
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029f08  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000190c  0802a1a8  0802a1a8  0002b1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802bab4  0802bab4  0002cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0802babc  0802babc  0002cabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802bac8  0802bac8  0002cac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0802bacc  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b88  24000088  0802bb54  0002d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c10  0802bb54  0002dc10  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY
 11 .debug_info   001ea6c6  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001bf9e  00000000  00000000  0021777c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00009180  00000000  00000000  00233720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00006ee8  00000000  00000000  0023c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000577b4  00000000  00000000  00243788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0009d214  00000000  00000000  0029af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d98ea  00000000  00000000  00338150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00511a3a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0002b904  00000000  00000000  00511a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0053d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a190 	.word	0x0802a190

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0802a190 	.word	0x0802a190

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f011 f8a8 	bl	8011edc <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0802b178 	.word	0x0802b178

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f027 fc56 	bl	802865e <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0802b148 	.word	0x0802b148
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0802b148 	.word	0x0802b148

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f027 fbff 	bl	802865e <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f01d fbcc 	bl	801e660 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f028 faf3 	bl	80294b4 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f022 fee2 	bl	8023d28 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f028 fa96 	bl	80294b4 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f01d fb45 	bl	801e660 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f028 fa6c 	bl	80294b4 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f01a ffd3 	bl	801bfe0 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f01a ff97 	bl	801bfe0 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f028 f9f2 	bl	80294b4 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f01a ff4c 	bl	801bfe0 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0802a1a8 	.word	0x0802a1a8
 8001160:	0802a1c4 	.word	0x0802a1c4
 8001164:	0802a1e0 	.word	0x0802a1e0
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0802a1fc 	.word	0x0802a1fc
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f027 fa7d 	bl	8028680 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f01a fe62 	bl	801be7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f01a fe76 	bl	801beb2 <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f027 fa5a 	bl	8028680 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f01a fe3f 	bl	801be7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f01a fe53 	bl	801beb2 <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f027 fa37 	bl	8028680 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f01a fe1c 	bl	801be7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f01a fe30 	bl	801beb2 <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f028 f8ba 	bl	80294b4 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0802a22c 	.word	0x0802a22c

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f01c fca3 	bl	801de38 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f01c fc77 	bl	801de38 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f01b f9ba 	bl	801c8d8 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f01a f873 	bl	801beb2 <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f027 fb19 	bl	80294b4 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f01a f812 	bl	801beb2 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0802a23c 	.word	0x0802a23c

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f01a fbdc 	bl	801c698 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f01b f807 	bl	801cf14 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f01a fcdc 	bl	801c8d8 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f84f 	bl	8004fe8 <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f84a 	bl	8005008 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0802b13c 	.word	0x0802b13c

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f026 fb70 	bl	80286d2 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00f feb6 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0802b178 	.word	0x0802b178

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN11SoftwareSPI5delayEv>:
#include "SoftwareSPI.h"

void SoftwareSPI::delay() {
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < delayTicks; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e003      	b.n	80021fc <_ZN11SoftwareSPI5delayEv+0x16>
        __asm volatile("nop");
 80021f4:	bf00      	nop
    for (volatile uint32_t i = 0; i < delayTicks; i++) {
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	bf8c      	ite	hi
 8002208:	2301      	movhi	r3, #1
 800220a:	2300      	movls	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <_ZN11SoftwareSPI5delayEv+0xe>
    }
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f026 fb23 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_h8BitOrder9ByteOrder>:
      byteOrder(byteOrder) {
	setSPIMode(mode);
}

// Constructor WITH chip select
SoftwareSPI::SoftwareSPI(const std::string& mosiPin, const std::string& misoPin, const std::string& clkPin, const std::string& csPin,
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
		uint8_t mode = 0, BitOrder bitOrder, ByteOrder byteOrder)
    : mosi(mosiPin, OUTPUT),
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fc5a 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
      miso(misoPin, INPUT, PULLUP),
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800225a:	2302      	movs	r3, #2
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	f002 fc7a 	bl	8004b58 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
      clk(clkPin, OUTPUT),
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3380      	adds	r3, #128	@ 0x80
 8002268:	2201      	movs	r2, #1
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fc4b 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
      cs(new Pin(csPin, OUTPUT)), // Dynamically allocate CS pin
 8002272:	2040      	movs	r0, #64	@ 0x40
 8002274:	f026 fa04 	bl	8028680 <_Znwj>
 8002278:	4603      	mov	r3, r0
 800227a:	461c      	mov	r4, r3
 800227c:	2201      	movs	r2, #1
 800227e:	6a39      	ldr	r1, [r7, #32]
 8002280:	4620      	mov	r0, r4
 8002282:	f002 fc41 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
      delayTicks(2),
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2202      	movs	r2, #2
 8002290:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
      bitOrder(bitOrder),
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800229a:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
      byteOrder(byteOrder)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80022a4:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
{
	setSPIMode(mode);
 80022a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f838 	bl	8002324 <_ZN11SoftwareSPI10setSPIModeEh>
	cs->set(true); // Set CS high (inactive state)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fdcd 	bl	8004e5c <_ZN3Pin3setEb>
}
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}

080022cc <_ZN11SoftwareSPI5beginEv>:
    if (cs) {
        delete cs; // Clean up CS pin if used
    }
}

void SoftwareSPI::begin() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    mosi.setAsOutput();
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fdd7 	bl	8004e8a <_ZN3Pin11setAsOutputEv>
    miso.setAsInput();
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3340      	adds	r3, #64	@ 0x40
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fde3 	bl	8004eac <_ZN3Pin10setAsInputEv>
    clk.setAsOutput();
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3380      	adds	r3, #128	@ 0x80
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 fdcd 	bl	8004e8a <_ZN3Pin11setAsOutputEv>
    clk.set(cpol); // Set clock idle state
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f002 fdac 	bl	8004e5c <_ZN3Pin3setEb>
    if (cs) cs->set(true); // Ensure CS starts high
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <_ZN11SoftwareSPI5beginEv+0x50>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fda0 	bl	8004e5c <_ZN3Pin3setEb>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZN11SoftwareSPI10setSPIModeEh>:

void SoftwareSPI::setClockDivider(uint32_t div) {
    delayTicks = div;
}

void SoftwareSPI::setSPIMode(uint8_t mode) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
    cpol = (mode & 0x02) != 0; // CPOL is bit 1
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2da      	uxtb	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
    cpha = (mode & 0x01) != 0; // CPHA is bit 0
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_ZN11SoftwareSPI8transferEPhj>:

void SoftwareSPI::transfer(uint8_t* data, size_t length) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
    if (cs) cs->set(false); // Pull CS low to start transaction
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <_ZN11SoftwareSPI8transferEPhj+0x24>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fd68 	bl	8004e5c <_ZN3Pin3setEb>

    for (size_t byteIdx = 0; byteIdx < length; byteIdx++) {
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e0a6      	b.n	80024e0 <_ZN11SoftwareSPI8transferEPhj+0x178>
        size_t index = (byteOrder == MSB_FIRST_BYTE) ? byteIdx : (length - 1 - byteIdx);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <_ZN11SoftwareSPI8transferEPhj+0x3e>
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	e000      	b.n	80023a8 <_ZN11SoftwareSPI8transferEPhj+0x40>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	617b      	str	r3, [r7, #20]
        uint8_t received = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	76fb      	strb	r3, [r7, #27]
        uint8_t byteToSend = data[index];
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	74fb      	strb	r3, [r7, #19]

        for (uint8_t i = 0; i < 8; i++) {
 80023b8:	2300      	movs	r3, #0
 80023ba:	76bb      	strb	r3, [r7, #26]
 80023bc:	e07b      	b.n	80024b6 <_ZN11SoftwareSPI8transferEPhj+0x14e>
            uint8_t bitPos = (bitOrder == MSB_FIRST) ? (7 - i) : i;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <_ZN11SoftwareSPI8transferEPhj+0x6a>
 80023c8:	7ebb      	ldrb	r3, [r7, #26]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e000      	b.n	80023d4 <_ZN11SoftwareSPI8transferEPhj+0x6c>
 80023d2:	7ebb      	ldrb	r3, [r7, #26]
 80023d4:	74bb      	strb	r3, [r7, #18]

            clk.set(!cpol); // Start clock low if CPOL=0, high if CPOL=1
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f002 fd36 	bl	8004e5c <_ZN3Pin3setEb>
            delay();
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff fef8 	bl	80021e6 <_ZN11SoftwareSPI5delayEv>
            mosi.set((byteToSend & (1 << bitPos)) ? true : false); // Set data bit
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	7cfa      	ldrb	r2, [r7, #19]
 80023fa:	7cbb      	ldrb	r3, [r7, #18]
 80023fc:	fa42 f303 	asr.w	r3, r2, r3
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4619      	mov	r1, r3
 8002408:	f002 fd28 	bl	8004e5c <_ZN3Pin3setEb>

            clk.set(cpol); // Generate clock edge
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f002 fd1e 	bl	8004e5c <_ZN3Pin3setEb>
            delay();
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff fee0 	bl	80021e6 <_ZN11SoftwareSPI5delayEv>

            if (cpha) { // Read on second clock edge if CPHA=1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <_ZN11SoftwareSPI8transferEPhj+0xf0>
                received |= (miso.get() ? 1 : 0) << bitPos;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3340      	adds	r3, #64	@ 0x40
 8002434:	4618      	mov	r0, r3
 8002436:	f002 fcfb 	bl	8004e30 <_ZNK3Pin3getEv>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <_ZN11SoftwareSPI8transferEPhj+0xdc>
 8002440:	2201      	movs	r2, #1
 8002442:	e000      	b.n	8002446 <_ZN11SoftwareSPI8transferEPhj+0xde>
 8002444:	2200      	movs	r2, #0
 8002446:	7cbb      	ldrb	r3, [r7, #18]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	b25a      	sxtb	r2, r3
 800244e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002452:	4313      	orrs	r3, r2
 8002454:	b25b      	sxtb	r3, r3
 8002456:	76fb      	strb	r3, [r7, #27]
            }
            clk.set(!cpol);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f002 fcf5 	bl	8004e5c <_ZN3Pin3setEb>
            delay();
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff feb7 	bl	80021e6 <_ZN11SoftwareSPI5delayEv>

            if (!cpha) { // Read on first clock edge if CPHA=0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <_ZN11SoftwareSPI8transferEPhj+0x148>
                received |= (miso.get() ? 1 : 0) << bitPos;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3340      	adds	r3, #64	@ 0x40
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fccf 	bl	8004e30 <_ZNK3Pin3getEv>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <_ZN11SoftwareSPI8transferEPhj+0x134>
 8002498:	2201      	movs	r2, #1
 800249a:	e000      	b.n	800249e <_ZN11SoftwareSPI8transferEPhj+0x136>
 800249c:	2200      	movs	r2, #0
 800249e:	7cbb      	ldrb	r3, [r7, #18]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	76fb      	strb	r3, [r7, #27]
        for (uint8_t i = 0; i < 8; i++) {
 80024b0:	7ebb      	ldrb	r3, [r7, #26]
 80024b2:	3301      	adds	r3, #1
 80024b4:	76bb      	strb	r3, [r7, #26]
 80024b6:	7ebb      	ldrb	r3, [r7, #26]
 80024b8:	2b07      	cmp	r3, #7
 80024ba:	d980      	bls.n	80023be <_ZN11SoftwareSPI8transferEPhj+0x56>
            }
        }
        clk.set(cpol);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f002 fcc6 	bl	8004e5c <_ZN3Pin3setEb>

        data[index] = received;
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4413      	add	r3, r2
 80024d6:	7efa      	ldrb	r2, [r7, #27]
 80024d8:	701a      	strb	r2, [r3, #0]
    for (size_t byteIdx = 0; byteIdx < length; byteIdx++) {
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f4ff af54 	bcc.w	8002392 <_ZN11SoftwareSPI8transferEPhj+0x2a>
    }

    if (cs) cs->set(true); // Pull CS high to end transaction
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <_ZN11SoftwareSPI8transferEPhj+0x19a>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fcad 	bl	8004e5c <_ZN3Pin3setEb>
}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4618      	mov	r0, r3
 8002530:	f026 f97b 	bl	802882a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3318      	adds	r3, #24
 8002538:	4618      	mov	r0, r3
 800253a:	f026 f976 	bl	802882a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f026 fa59 	bl	80289f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002544:	4603      	mov	r3, r0
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	4618      	mov	r0, r3
 8002556:	f026 f9f0 	bl	802893a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f026 fa4b 	bl	80289f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002560:	4603      	mov	r3, r0
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3318      	adds	r3, #24
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f026 f9e1 	bl	802893a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3318      	adds	r3, #24
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f026 fb5d 	bl	8028c40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2da      	uxtb	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 80025a2:	2040      	movs	r0, #64	@ 0x40
 80025a4:	f026 f86c 	bl	8028680 <_Znwj>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461c      	mov	r4, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3318      	adds	r3, #24
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f002 faa7 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f848 	bl	800265c <_ZN14SoftwareSerial5setTXEv>
 80025cc:	e020      	b.n	8002610 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 80025ce:	2040      	movs	r0, #64	@ 0x40
 80025d0:	f026 f856 	bl	8028680 <_Znwj>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461c      	mov	r4, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f002 fa92 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f837 	bl	800265c <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 80025ee:	2040      	movs	r0, #64	@ 0x40
 80025f0:	f026 f846 	bl	8028680 <_Znwj>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461c      	mov	r4, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3318      	adds	r3, #24
 80025fc:	2201      	movs	r2, #1
 80025fe:	4619      	mov	r1, r3
 8002600:	4620      	mov	r0, r4
 8002602:	f002 fa81 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f839 	bl	8002682 <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bd90      	pop	{r4, r7, pc}

0800263a <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 8002644:	f644 4390 	movw	r3, #19600	@ 0x4c90
 8002648:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fc0e 	bl	8004e8a <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fbf1 	bl	8004e5c <_ZN3Pin3setEb>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268e:	4618      	mov	r0, r3
 8002690:	f002 fc0c 	bl	8004eac <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fc18 	bl	8004ece <_ZN3Pin9setPullUpEv>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01f      	beq.n	80026fc <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffdd 	bl	8002682 <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 80026e2:	e00b      	b.n	80026fc <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffb4 	bl	800265c <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 8002714:	2101      	movs	r1, #1
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffc5 	bl	80026a6 <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f80c 	bl	800275a <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f867 	bl	8002820 <_ZN14SoftwareSerial7receiveEv>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	2b00      	cmp	r3, #0
 8002778:	bfd4      	ite	le
 800277a:	2301      	movle	r3, #1
 800277c:	2300      	movgt	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d049      	beq.n	8002818 <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800278a:	1c59      	adds	r1, r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8002792:	2b09      	cmp	r3, #9
 8002794:	bfd4      	ite	le
 8002796:	2301      	movle	r3, #1
 8002798:	2300      	movgt	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f002 fb4e 	bl	8004e5c <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c6:	105a      	asrs	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 80027d6:	e01f      	b.n	8002818 <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80027f2:	e011      	b.n	8002818 <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027fa:	2b19      	cmp	r3, #25
 80027fc:	d90c      	bls.n	8002818 <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 8002808:	2101      	movs	r1, #1
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ff4b 	bl	80026a6 <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283c:	2b00      	cmp	r3, #0
 800283e:	bfd4      	ite	le
 8002840:	2301      	movle	r3, #1
 8002842:	2300      	movgt	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06f      	beq.n	800292a <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284e:	4618      	mov	r0, r3
 8002850:	f002 faee 	bl	8004e30 <_ZNK3Pin3getEv>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d114      	bne.n	800288e <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 8002882:	e052      	b.n	800292a <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800288c:	e04d      	b.n	800292a <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	2b07      	cmp	r3, #7
 8002896:	dd2b      	ble.n	80028f0 <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80028a4:	4619      	mov	r1, r3
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80028c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c8:	bf8c      	ite	hi
 80028ca:	2301      	movhi	r3, #1
 80028cc:	2300      	movls	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80028ee:	e01c      	b.n	800292a <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f6:	105a      	asrs	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <_ZN14SoftwareSerial7receiveEv+0xf4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800290a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002948:	1ad3      	subs	r3, r2, r3
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 8002968:	e002      	b.n	8002970 <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fdcd 	bl	800250a <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f7      	bne.n	800296a <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2203      	movs	r2, #3
 8002994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <_ZN14SoftwareSerial5writeEi+0x54>
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fe7e 	bl	80026a6 <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d102      	bne.n	80029e0 <_ZN14SoftwareSerial4readEv+0x1e>
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e020      	b.n	8002a22 <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029f0:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a0a:	bf8c      	ite	hi
 8002a0c:	2301      	movhi	r3, #1
 8002a0e:	2300      	movls	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <_ZN14SoftwareSerial4readEv+0x5c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	b21b      	sxth	r3, r3
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>:

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF

uint32_t TMC2130Stepper::CHOPCONF() {
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	216c      	movs	r1, #108	@ 0x6c
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
    CHOPCONF_register.sr = input;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002a6c:	216c      	movs	r1, #108	@ 0x6c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(      uint8_t B ) { SET_REG(toff);    }
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	b2d9      	uxtb	r1, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8002a94:	f361 0303 	bfi	r3, r1, #0, #4
 8002a98:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002aa8:	216c      	movs	r1, #108	@ 0x6c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(     uint8_t B ) { SET_REG(hstrt);   }
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	70fb      	strb	r3, [r7, #3]
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	b2d9      	uxtb	r1, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8002ad0:	f361 1306 	bfi	r3, r1, #4, #3
 8002ad4:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002ae4:	216c      	movs	r1, #108	@ 0x6c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(      uint8_t B ) { SET_REG(hend);    }
 8002af2:	b590      	push	{r4, r7, lr}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70fb      	strb	r3, [r7, #3]
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f002 0101 	and.w	r1, r2, #1
 8002b0c:	01cc      	lsls	r4, r1, #7
 8002b0e:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8002b12:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002b16:	4608      	mov	r0, r1
 8002b18:	4621      	mov	r1, r4
 8002b1a:	4301      	orrs	r1, r0
 8002b1c:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 0207 	and.w	r2, r2, #7
 8002b28:	f002 0007 	and.w	r0, r2, #7
 8002b2c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002b30:	f022 0207 	bic.w	r2, r2, #7
 8002b34:	4611      	mov	r1, r2
 8002b36:	4602      	mov	r2, r0
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002b4a:	216c      	movs	r1, #108	@ 0x6c
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}

08002b58 <_ZN14TMC2130Stepper3tblEh>:
//void TMC2130Stepper::fd(      uint8_t B ) { SET_REG(fd);      }
void TMC2130Stepper::disfdcc(   bool    B ) { SET_REG(disfdcc); }
void TMC2130Stepper::rndtf(     bool    B ) { SET_REG(rndtf);   }
void TMC2130Stepper::chm(       bool    B ) { SET_REG(chm);     }
void TMC2130Stepper::tbl(       uint8_t B ) { SET_REG(tbl);     }
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f002 0101 	and.w	r1, r2, #1
 8002b72:	01cc      	lsls	r4, r1, #7
 8002b74:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8002b78:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	4301      	orrs	r1, r0
 8002b82:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 0201 	and.w	r2, r2, #1
 8002b8e:	f002 0001 	and.w	r0, r2, #1
 8002b92:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002bb0:	216c      	movs	r1, #108	@ 0x6c
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}

08002bbe <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(    bool    B ) { SET_REG(vsense);  }
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 8002bd0:	78f9      	ldrb	r1, [r7, #3]
 8002bd2:	f361 0341 	bfi	r3, r1, #1, #1
 8002bd6:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002be6:	216c      	movs	r1, #108	@ 0x6c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(   bool    B ) { SET_REG(vhighfs); }
void TMC2130Stepper::vhighchm(  bool    B ) { SET_REG(vhighchm);}
void TMC2130Stepper::sync(      uint8_t B ) { SET_REG(sync);    }
void TMC2130Stepper::mres(      uint8_t B ) { SET_REG(mres);    }
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	b2d9      	uxtb	r1, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8002c0e:	f361 0303 	bfi	r3, r1, #0, #4
 8002c12:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002c22:	216c      	movs	r1, #108	@ 0x6c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_ZN14TMC2130Stepper5hstrtEv>:
void TMC2130Stepper::intpol(    bool    B ) { SET_REG(intpol);  }
void TMC2130Stepper::dedge(     bool    B ) { SET_REG(dedge);   }
void TMC2130Stepper::diss2g(    bool    B ) { SET_REG(diss2g);  }

uint8_t TMC2130Stepper::toff()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;    }
uint8_t TMC2130Stepper::hstrt()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;   }
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fef6 	bl	8002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	7b3b      	ldrb	r3, [r7, #12]
 8002c48:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;    }
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fee3 	bl	8002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	89bb      	ldrh	r3, [r7, #12]
 8002c6e:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;      }
bool    TMC2130Stepper::disfdcc()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc; }
bool    TMC2130Stepper::rndtf()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;   }
bool    TMC2130Stepper::chm()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;     }
uint8_t TMC2130Stepper::tbl()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;     }
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fed0 	bl	8002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_ZN14TMC2130Stepper6vsenseEv>:
bool    TMC2130Stepper::vsense()    { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;  }
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff febd 	bl	8002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	7bbb      	ldrb	r3, [r7, #14]
 8002cba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZN14TMC2130Stepper4mresEv>:
bool    TMC2130Stepper::vhighfs()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs; }
bool    TMC2130Stepper::vhighchm()  { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;    }
uint8_t TMC2130Stepper::mres()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;    }
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff feaa 	bl	8002a2e <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZN14TMC2208Stepper8CHOPCONFEv>:

void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	216c      	movs	r1, #108	@ 0x6c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	b2d9      	uxtb	r1, r3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002d28:	f361 0303 	bfi	r3, r1, #0, #4
 8002d2c:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002d3c:	216c      	movs	r1, #108	@ 0x6c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	b2d9      	uxtb	r1, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002d64:	f361 1306 	bfi	r3, r1, #4, #3
 8002d68:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002d78:	216c      	movs	r1, #108	@ 0x6c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 8002d86:	b590      	push	{r4, r7, lr}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f002 0101 	and.w	r1, r2, #1
 8002da0:	01cc      	lsls	r4, r1, #7
 8002da2:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 8002da6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002daa:	4608      	mov	r0, r1
 8002dac:	4621      	mov	r1, r4
 8002dae:	4301      	orrs	r1, r0
 8002db0:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002db4:	0852      	lsrs	r2, r2, #1
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f002 0207 	and.w	r2, r2, #7
 8002dbc:	f002 0007 	and.w	r0, r2, #7
 8002dc0:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002dc4:	f022 0207 	bic.w	r2, r2, #7
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4602      	mov	r2, r0
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002dde:	216c      	movs	r1, #108	@ 0x6c
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}

08002dec <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f002 0101 	and.w	r1, r2, #1
 8002e06:	01cc      	lsls	r4, r1, #7
 8002e08:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002e0c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002e10:	4608      	mov	r0, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	4301      	orrs	r1, r0
 8002e16:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002e1a:	0852      	lsrs	r2, r2, #1
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 0201 	and.w	r2, r2, #1
 8002e22:	f002 0001 	and.w	r0, r2, #1
 8002e26:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4602      	mov	r2, r0
 8002e32:	430a      	orrs	r2, r1
 8002e34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002e44:	216c      	movs	r1, #108	@ 0x6c
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002e64:	78f9      	ldrb	r1, [r7, #3]
 8002e66:	f361 0341 	bfi	r3, r1, #1, #1
 8002e6a:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002e7a:	216c      	movs	r1, #108	@ 0x6c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8002ea2:	f361 0303 	bfi	r3, r1, #0, #4
 8002ea6:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002eb6:	216c      	movs	r1, #108	@ 0x6c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff0c 	bl	8002cee <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	7b3b      	ldrb	r3, [r7, #12]
 8002edc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fef9 	bl	8002cee <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002efc:	4603      	mov	r3, r0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	89bb      	ldrh	r3, [r7, #12]
 8002f02:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fee6 	bl	8002cee <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fed3 	bl	8002cee <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff fec0 	bl	8002cee <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 8002f82:	b590      	push	{r4, r7, lr}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	b2d1      	uxtb	r1, r2
 8002f96:	2000      	movs	r0, #0
 8002f98:	4301      	orrs	r1, r0
 8002f9a:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 8002f9e:	0a11      	lsrs	r1, r2, #8
 8002fa0:	b2c9      	uxtb	r1, r1
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	4301      	orrs	r1, r0
 8002fa6:	f883 102a 	strb.w	r1, [r3, #42]	@ 0x2a
 8002faa:	0c11      	lsrs	r1, r2, #16
 8002fac:	b2c9      	uxtb	r1, r1
 8002fae:	2000      	movs	r0, #0
 8002fb0:	4301      	orrs	r1, r0
 8002fb2:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002fb6:	0e12      	lsrs	r2, r2, #24
 8002fb8:	f002 0201 	and.w	r2, r2, #1
 8002fbc:	f002 0001 	and.w	r0, r2, #1
 8002fc0:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4602      	mov	r2, r0
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681c      	ldr	r4, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fdc:	0a12      	lsrs	r2, r2, #8
 8002fde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	461a      	mov	r2, r3
 8002fec:	216d      	movs	r1, #109	@ 0x6d
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	47a0      	blx	r4
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}

08002ffa <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 8002ffa:	b590      	push	{r4, r7, lr}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	70fb      	strb	r3, [r7, #3]
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	b2d9      	uxtb	r1, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 8003014:	f361 0303 	bfi	r3, r1, #0, #4
 8003018:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681c      	ldr	r4, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003026:	0a12      	lsrs	r2, r2, #8
 8003028:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4313      	orrs	r3, r2
 8003034:	461a      	mov	r2, r3
 8003036:	216d      	movs	r1, #109	@ 0x6d
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	47a0      	blx	r4
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}

08003044 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 800305e:	f361 0303 	bfi	r3, r1, #0, #4
 8003062:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681c      	ldr	r4, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003070:	0a12      	lsrs	r2, r2, #8
 8003072:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	4313      	orrs	r3, r2
 800307e:	461a      	mov	r2, r3
 8003080:	216d      	movs	r1, #109	@ 0x6d
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	47a0      	blx	r4
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	b2d9      	uxtb	r1, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 80030a8:	f361 1346 	bfi	r3, r1, #5, #2
 80030ac:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681c      	ldr	r4, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ba:	0a12      	lsrs	r2, r2, #8
 80030bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4313      	orrs	r3, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	216d      	movs	r1, #109	@ 0x6d
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	47a0      	blx	r4
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80030f2:	f361 0303 	bfi	r3, r1, #0, #4
 80030f6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8003108:	b292      	uxth	r2, r2
 800310a:	2142      	movs	r1, #66	@ 0x42
 800310c:	4798      	blx	r3
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	b2d9      	uxtb	r1, r3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8003130:	f361 0303 	bfi	r3, r1, #0, #4
 8003134:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8003146:	b292      	uxth	r2, r2
 8003148:	2142      	movs	r1, #66	@ 0x42
 800314a:	4798      	blx	r3
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	b2d9      	uxtb	r1, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800316e:	f361 1346 	bfi	r3, r1, #5, #2
 8003172:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8003184:	b292      	uxth	r2, r2
 8003186:	2142      	movs	r1, #66	@ 0x42
 8003188:	4798      	blx	r3
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3304      	adds	r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	216f      	movs	r1, #111	@ 0x6f
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }

uint32_t TMC2208Stepper::DRV_STATUS() {
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3304      	adds	r3, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	216f      	movs	r1, #111	@ 0x6f
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ZN14TMC2130Stepper5GCONFEm>:
// GCONF

uint32_t TMC2130Stepper::GCONF() {
    return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
    GCONF_register.sr = input;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b2d1      	uxtb	r1, r2
 80031e6:	2000      	movs	r0, #0
 80031e8:	4301      	orrs	r1, r0
 80031ea:	7559      	strb	r1, [r3, #21]
 80031ec:	0a11      	lsrs	r1, r2, #8
 80031ee:	b2c9      	uxtb	r1, r1
 80031f0:	2000      	movs	r0, #0
 80031f2:	4301      	orrs	r1, r0
 80031f4:	7599      	strb	r1, [r3, #22]
 80031f6:	0c12      	lsrs	r2, r2, #16
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	f002 0003 	and.w	r0, r2, #3
 8003200:	7dda      	ldrb	r2, [r3, #23]
 8003202:	f022 0203 	bic.w	r2, r2, #3
 8003206:	4611      	mov	r1, r2
 8003208:	4602      	mov	r2, r0
 800320a:	430a      	orrs	r2, r1
 800320c:	75da      	strb	r2, [r3, #23]
    write(GCONF_register.address, GCONF_register.sr);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6952      	ldr	r2, [r2, #20]
 8003218:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800323c:	78f9      	ldrb	r1, [r7, #3]
 800323e:	f361 0382 	bfi	r3, r1, #2, #1
 8003242:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6a12      	ldr	r2, [r2, #32]
 8003250:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8003254:	b292      	uxth	r2, r2
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003276:	78f9      	ldrb	r1, [r7, #3]
 8003278:	f361 1386 	bfi	r3, r1, #6, #1
 800327c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a12      	ldr	r2, [r2, #32]
 800328a:	f3c2 2209 	ubfx	r2, r2, #8, #10
 800328e:	b292      	uxth	r2, r2
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80032b0:	78f9      	ldrb	r1, [r7, #3]
 80032b2:	f361 13c7 	bfi	r3, r1, #7, #1
 80032b6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6a12      	ldr	r2, [r2, #32]
 80032c4:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80032c8:	b292      	uxth	r2, r2
 80032ca:	2100      	movs	r1, #0
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
    IHOLD_IRUN_register.sr = input;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	b291      	uxth	r1, r2
 80032ec:	2000      	movs	r0, #0
 80032ee:	4301      	orrs	r1, r0
 80032f0:	8099      	strh	r1, [r3, #4]
 80032f2:	0c12      	lsrs	r2, r2, #16
 80032f4:	f002 020f 	and.w	r2, r2, #15
 80032f8:	f002 000f 	and.w	r0, r2, #15
 80032fc:	799a      	ldrb	r2, [r3, #6]
 80032fe:	f022 020f 	bic.w	r2, r2, #15
 8003302:	4611      	mov	r1, r2
 8003304:	4602      	mov	r2, r0
 8003306:	430a      	orrs	r2, r1
 8003308:	719a      	strb	r2, [r3, #6]
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6852      	ldr	r2, [r2, #4]
 8003314:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003318:	2110      	movs	r1, #16
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <_ZN10TMCStepper5iholdEh>:

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	70fb      	strb	r3, [r7, #3]
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	b2d9      	uxtb	r1, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	7913      	ldrb	r3, [r2, #4]
 800333e:	f361 0304 	bfi	r3, r1, #0, #5
 8003342:	7113      	strb	r3, [r2, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6852      	ldr	r2, [r2, #4]
 800334e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003352:	2110      	movs	r1, #16
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	7953      	ldrb	r3, [r2, #5]
 8003378:	f361 0304 	bfi	r3, r1, #0, #5
 800337c:	7153      	strb	r3, [r2, #5]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800338c:	2110      	movs	r1, #16
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	b2d9      	uxtb	r1, r3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	7993      	ldrb	r3, [r2, #6]
 80033b2:	f361 0303 	bfi	r3, r1, #0, #4
 80033b6:	7193      	strb	r3, [r2, #6]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6852      	ldr	r2, [r2, #4]
 80033c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80033c6:	2110      	movs	r1, #16
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033f0:	2170      	movs	r1, #112	@ 0x70
 80033f2:	4798      	blx	r3
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_ZN14TMC2160Stepper13pwm_autoscaleEb>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	f892 3046 	ldrb.w	r3, [r2, #70]	@ 0x46
 800340e:	78f9      	ldrb	r1, [r7, #3]
 8003410:	f361 0382 	bfi	r3, r1, #2, #1
 8003414:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003424:	2170      	movs	r1, #112	@ 0x70
 8003426:	4798      	blx	r3
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8003442:	78f9      	ldrb	r1, [r7, #3]
 8003444:	f361 0382 	bfi	r3, r1, #2, #1
 8003448:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 8003458:	2170      	movs	r1, #112	@ 0x70
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	ed87 0a00 	vstr	s0, [r7]
 8003474:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <_ZN10TMCStepperC1Ef+0x50>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	460a      	mov	r2, r1
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	460a      	mov	r2, r1
 8003486:	709a      	strb	r2, [r3, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	71da      	strb	r2, [r3, #7]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	811a      	strh	r2, [r3, #8]
 8003494:	7a9a      	ldrb	r2, [r3, #10]
 8003496:	f022 020f 	bic.w	r2, r2, #15
 800349a:	729a      	strb	r2, [r3, #10]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	0802b220 	.word	0x0802b220

080034bc <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:

// only software SPI supported

int8_t TMC2130Stepper::chain_length = 0;

TMC2130Stepper::TMC2130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link)
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b08b      	sub	sp, #44	@ 0x2c
 80034c0:	af04      	add	r7, sp, #16
 80034c2:	6178      	str	r0, [r7, #20]
 80034c4:	6139      	str	r1, [r7, #16]
 80034c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80034ca:	60ba      	str	r2, [r7, #8]
 80034cc:	607b      	str	r3, [r7, #4]
    : TMCStepper(RS),
      cs(nullptr),
      link_index(link) {
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ffc7 	bl	8003468 <_ZN10TMCStepperC1Ef>
 80034da:	4a51      	ldr	r2, [pc, #324]	@ (8003620 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x164>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3315      	adds	r3, #21
 80034e4:	2200      	movs	r2, #0
 80034e6:	801a      	strh	r2, [r3, #0]
 80034e8:	709a      	strb	r2, [r3, #2]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	831a      	strh	r2, [r3, #24]
 80034f0:	7e9a      	ldrb	r2, [r3, #26]
 80034f2:	f022 020f 	bic.w	r2, r2, #15
 80034f6:	769a      	strb	r2, [r3, #26]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	76da      	strb	r2, [r3, #27]
 80034fe:	2200      	movs	r2, #0
 8003500:	771a      	strb	r2, [r3, #28]
 8003502:	7f5a      	ldrb	r2, [r3, #29]
 8003504:	f022 020f 	bic.w	r2, r2, #15
 8003508:	775a      	strb	r2, [r3, #29]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	83da      	strh	r2, [r3, #30]
 8003510:	8c1a      	ldrh	r2, [r3, #32]
 8003512:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	841a      	strh	r2, [r3, #32]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003522:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003526:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800352a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003550:	2200      	movs	r2, #0
 8003552:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003556:	2200      	movs	r2, #0
 8003558:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 800355c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	332d      	adds	r3, #45	@ 0x2d
 800356c:	2200      	movs	r2, #0
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	709a      	strb	r2, [r3, #2]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3330      	adds	r3, #48	@ 0x30
 8003576:	2100      	movs	r1, #0
 8003578:	460a      	mov	r2, r1
 800357a:	801a      	strh	r2, [r3, #0]
 800357c:	460a      	mov	r2, r1
 800357e:	709a      	strb	r2, [r3, #2]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 8003586:	f36f 0301 	bfc	r3, #0, #2
 800358a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
      cs(nullptr),
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	635a      	str	r2, [r3, #52]	@ 0x34
      link_index(link) {
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	cs = new Pin(pinCS, OUTPUT);
 80035a4:	2040      	movs	r0, #64	@ 0x40
 80035a6:	f025 f86b 	bl	8028680 <_Znwj>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461c      	mov	r4, r3
 80035ae:	2201      	movs	r2, #1
 80035b0:	6939      	ldr	r1, [r7, #16]
 80035b2:	4620      	mov	r0, r4
 80035b4:	f001 faa8 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	635c      	str	r4, [r3, #52]	@ 0x34

    TMC_SW_SPI = new SoftwareSPI(pinMOSI, pinMISO, pinSCK, pinCS, SPI_MODE_3, MSB_FIRST, MSB_FIRST_BYTE);
 80035bc:	20d0      	movs	r0, #208	@ 0xd0
 80035be:	f025 f85f 	bl	8028680 <_Znwj>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461c      	mov	r4, r3
 80035c6:	2300      	movs	r3, #0
 80035c8:	9303      	str	r3, [sp, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	2303      	movs	r3, #3
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4620      	mov	r0, r4
 80035de:	f7fe fe2c 	bl	800223a <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_h8BitOrder9ByteOrder>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	639c      	str	r4, [r3, #56]	@ 0x38

    defaults();
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	f000 f81e 	bl	8003628 <_ZN14TMC2130Stepper8defaultsEv>

    switchCSpin(HIGH);
 80035ec:	2101      	movs	r1, #1
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f000 f831 	bl	8003656 <_ZN14TMC2130Stepper11switchCSpinEb>
    TMC_SW_SPI->begin();
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe fe67 	bl	80022cc <_ZN11SoftwareSPI5beginEv>

    if (link > chain_length)
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x168>)
 8003600:	f993 3000 	ldrsb.w	r3, [r3]
 8003604:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	dd03      	ble.n	8003614 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x158>
      chain_length = link;
 800360c:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x168>)
 800360e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003612:	7013      	strb	r3, [r2, #0]
  }
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	0802b1e4 	.word	0x0802b1e4
 8003624:	240000a4 	.word	0x240000a4

08003628 <_ZN14TMC2130Stepper8defaultsEv>:

    if (link > chain_length)
      chain_length = link;
  }

void TMC2130Stepper::defaults() {
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f442 6290 	orr.w	r2, r2, #1152	@ 0x480
 8003638:	861a      	strh	r2, [r3, #48]	@ 0x30
 800363a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800363e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003642:	f042 0205 	orr.w	r2, r2, #5
 8003646:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
  cs->set(state);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fbf6 	bl	8004e5c <_ZN3Pin3setEb>
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZN14TMC2130Stepper4readEh>:
    transfer(0x00);
  }
}

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	@ 0x30
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
    uint32_t out = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    int8_t i = 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!TMC_SW_SPI) return 0; // Ensure SPI instance is valid
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <_ZN14TMC2130Stepper4readEh+0x22>
 80036be:	2300      	movs	r3, #0
 80036c0:	e08e      	b.n	80037e0 <_ZN14TMC2130Stepper4readEh+0x140>

    beginTransaction();
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ffd8 	bl	8003678 <_ZN14TMC2130Stepper16beginTransactionEv>
    if (cs) cs->set(false); // Pull CS low
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <_ZN14TMC2130Stepper4readEh+0x3c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fbc0 	bl	8004e5c <_ZN3Pin3setEb>

    uint8_t datagram[5] = { addressByte, 0, 0, 0, 0 };
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	711a      	strb	r2, [r3, #4]
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f887 3020 	strb.w	r3, [r7, #32]
    TMC_SW_SPI->transfer(datagram, 5); // Send address and receive response
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	f107 0120 	add.w	r1, r7, #32
 80036f4:	2205      	movs	r2, #5
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fe36 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>

    while (i < link_index) {
 80036fc:	e012      	b.n	8003724 <_ZN14TMC2130Stepper4readEh+0x84>
        uint8_t empty[5] = { 0 };
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	2300      	movs	r3, #0
 8003704:	753b      	strb	r3, [r7, #20]
        TMC_SW_SPI->transfer(empty, 5); // Shift data for multi-driver chains
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	f107 0110 	add.w	r1, r7, #16
 800370e:	2205      	movs	r2, #5
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fe29 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>
        i++;
 8003716:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (i < link_index) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f993 303c 	ldrsb.w	r3, [r3, #60]	@ 0x3c
 800372a:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 800372e:	429a      	cmp	r2, r3
 8003730:	dbe5      	blt.n	80036fe <_ZN14TMC2130Stepper4readEh+0x5e>
    }

    if (cs) cs->set(true); // Pull CS high
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <_ZN14TMC2130Stepper4readEh+0xa6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fb8b 	bl	8004e5c <_ZN3Pin3setEb>
    if (cs) cs->set(false); // Pull CS low again
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <_ZN14TMC2130Stepper4readEh+0xe2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fb81 	bl	8004e5c <_ZN3Pin3setEb>

    while (i < chain_length) {
 800375a:	e012      	b.n	8003782 <_ZN14TMC2130Stepper4readEh+0xe2>
        uint8_t empty[5] = { 0 };
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	2300      	movs	r3, #0
 8003762:	733b      	strb	r3, [r7, #12]
        TMC_SW_SPI->transfer(empty, 5);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	f107 0108 	add.w	r1, r7, #8
 800376c:	2205      	movs	r2, #5
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fdfa 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>
        i++;
 8003774:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003778:	b2db      	uxtb	r3, r3
 800377a:	3301      	adds	r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (i < chain_length) {
 8003782:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <_ZN14TMC2130Stepper4readEh+0x148>)
 8003784:	f993 3000 	ldrsb.w	r3, [r3]
 8003788:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 800378c:	429a      	cmp	r2, r3
 800378e:	dbe5      	blt.n	800375c <_ZN14TMC2130Stepper4readEh+0xbc>
    }

    uint8_t response[5] = { addressByte, 0, 0, 0, 0 };
 8003790:	f107 0318 	add.w	r3, r7, #24
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	711a      	strb	r2, [r3, #4]
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	763b      	strb	r3, [r7, #24]
    TMC_SW_SPI->transfer(response, 5); // Read response
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	f107 0118 	add.w	r1, r7, #24
 80037a6:	2205      	movs	r2, #5
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fddd 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>

    out = (response[1] << 24) | (response[2] << 16) | (response[3] << 8) | response[4];
 80037ae:	7e7b      	ldrb	r3, [r7, #25]
 80037b0:	061a      	lsls	r2, r3, #24
 80037b2:	7ebb      	ldrb	r3, [r7, #26]
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	7efb      	ldrb	r3, [r7, #27]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	4313      	orrs	r3, r2
 80037be:	7f3a      	ldrb	r2, [r7, #28]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    endTransaction();
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff61 	bl	800368c <_ZN14TMC2130Stepper14endTransactionEv>
    if (cs) cs->set(true); // Pull CS high
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <_ZN14TMC2130Stepper4readEh+0x13e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fb3f 	bl	8004e5c <_ZN3Pin3setEb>

    return out;
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3730      	adds	r7, #48	@ 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	240000a4 	.word	0x240000a4

080037ec <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	460b      	mov	r3, r1
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	72fb      	strb	r3, [r7, #11]
    addressByte |= TMC_WRITE;
 80037fa:	7afb      	ldrb	r3, [r7, #11]
 80037fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003800:	72fb      	strb	r3, [r7, #11]
    int8_t i = 1;
 8003802:	2301      	movs	r3, #1
 8003804:	77fb      	strb	r3, [r7, #31]

    if (!TMC_SW_SPI) return; // Ensure SPI instance is valid
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04d      	beq.n	80038aa <_ZN14TMC2130Stepper5writeEhm+0xbe>

    beginTransaction();
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff ff32 	bl	8003678 <_ZN14TMC2130Stepper16beginTransactionEv>
    if (cs) cs->set(false); // Pull CS low
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <_ZN14TMC2130Stepper5writeEhm+0x3c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fb1a 	bl	8004e5c <_ZN3Pin3setEb>

    uint8_t datagram[5] = { addressByte, (uint8_t)(config >> 24), (uint8_t)(config >> 16), (uint8_t)(config >> 8), (uint8_t)config };
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	763b      	strb	r3, [r7, #24]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	b2db      	uxtb	r3, r3
 8003832:	767b      	strb	r3, [r7, #25]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	b2db      	uxtb	r3, r3
 800383a:	76bb      	strb	r3, [r7, #26]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	b2db      	uxtb	r3, r3
 8003842:	76fb      	strb	r3, [r7, #27]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	773b      	strb	r3, [r7, #28]
    TMC_SW_SPI->transfer(datagram, 5); // Send data
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384e:	f107 0118 	add.w	r1, r7, #24
 8003852:	2205      	movs	r2, #5
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fd87 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>

    while (i < link_index) {
 800385a:	e011      	b.n	8003880 <_ZN14TMC2130Stepper5writeEhm+0x94>
        uint8_t empty[5] = { 0 };
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	2300      	movs	r3, #0
 8003862:	753b      	strb	r3, [r7, #20]
        TMC_SW_SPI->transfer(empty, 5);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	f107 0110 	add.w	r1, r7, #16
 800386c:	2205      	movs	r2, #5
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fd7a 	bl	8002368 <_ZN11SoftwareSPI8transferEPhj>
        i++;
 8003874:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	77fb      	strb	r3, [r7, #31]
    while (i < link_index) {
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f993 303c 	ldrsb.w	r3, [r3, #60]	@ 0x3c
 8003886:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800388a:	429a      	cmp	r2, r3
 800388c:	dbe6      	blt.n	800385c <_ZN14TMC2130Stepper5writeEhm+0x70>
    }

    endTransaction();
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff fefc 	bl	800368c <_ZN14TMC2130Stepper14endTransactionEv>
    if (cs) cs->set(true); // Pull CS high
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <_ZN14TMC2130Stepper5writeEhm+0xc0>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fada 	bl	8004e5c <_ZN3Pin3setEb>
 80038a8:	e000      	b.n	80038ac <_ZN14TMC2130Stepper5writeEhm+0xc0>
    if (!TMC_SW_SPI) return; // Ensure SPI instance is valid
 80038aa:	bf00      	nop
}
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	b291      	uxth	r1, r2
 80038c6:	2000      	movs	r0, #0
 80038c8:	4301      	orrs	r1, r0
 80038ca:	8319      	strh	r1, [r3, #24]
 80038cc:	0c12      	lsrs	r2, r2, #16
 80038ce:	f002 020f 	and.w	r2, r2, #15
 80038d2:	f002 000f 	and.w	r0, r2, #15
 80038d6:	7e9a      	ldrb	r2, [r3, #26]
 80038d8:	f022 020f 	bic.w	r2, r2, #15
 80038dc:	4611      	mov	r1, r2
 80038de:	4602      	mov	r2, r0
 80038e0:	430a      	orrs	r2, r1
 80038e2:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6992      	ldr	r2, [r2, #24]
 80038ee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80038f2:	2114      	movs	r1, #20
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"


TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	6178      	str	r0, [r7, #20]
 8003908:	6139      	str	r1, [r7, #16]
 800390a:	ed87 0a03 	vstr	s0, [r7, #12]
 800390e:	60ba      	str	r2, [r7, #8]
 8003910:	607b      	str	r3, [r7, #4]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	ed97 0a03 	vldr	s0, [r7, #12]
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	f7ff fdc8 	bl	80034bc <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 800392c:	4a0e      	ldr	r2, [pc, #56]	@ (8003968 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x68>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	333d      	adds	r3, #61	@ 0x3d
 8003936:	2200      	movs	r2, #0
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	709a      	strb	r2, [r3, #2]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	3340      	adds	r3, #64	@ 0x40
 8003940:	2100      	movs	r1, #0
 8003942:	460a      	mov	r2, r1
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	460a      	mov	r2, r1
 8003948:	709a      	strb	r2, [r3, #2]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	@ 0x44
  { defaults(); }
 8003958:	6978      	ldr	r0, [r7, #20]
 800395a:	f000 f857 	bl	8003a0c <_ZN14TMC2160Stepper8defaultsEv>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0802b25c 	.word	0x0802b25c

0800396c <_ZN14TMC2160Stepper5beginEv>:

TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  //set pins
  switchCSpin(HIGH);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fe6c 	bl	8003656 <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->begin();
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <_ZN14TMC2160Stepper5beginEv+0x24>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fc9e 	bl	80022cc <_ZN11SoftwareSPI5beginEv>

  GCONF(GCONF_register.sr);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f3c3 2311 	ubfx	r3, r3, #8, #18
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7ff fc18 	bl	80031d2 <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f7ff f84e 	bl	8002a4e <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b8:	0a12      	lsrs	r2, r2, #8
 80039ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7ff fadb 	bl	8002f82 <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fcfe 	bl	80033d4 <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f7ff fc77 	bl	80032d8 <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2108      	movs	r1, #8
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f843 	bl	8002a7a <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	332c      	adds	r3, #44	@ 0x2c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	2101      	movs	r1, #1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4798      	blx	r3
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8003a1a:	2106      	movs	r1, #6
 8003a1c:	f361 0303 	bfi	r3, r1, #0, #4
 8003a20:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  SHORT_CONF_register.s2g_level = 6;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 8003a2a:	2106      	movs	r1, #6
 8003a2c:	f361 0303 	bfi	r3, r1, #0, #4
 8003a30:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	f361 0301 	bfi	r3, r1, #0, #2
 8003a40:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  SHORT_CONF_register.shortdelay = 0;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8003a4a:	f36f 0382 	bfc	r3, #2, #1
 8003a4e:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  DRV_CONF_register.bbmtime = 0;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8003a58:	f36f 0304 	bfc	r3, #0, #5
 8003a5c:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
  DRV_CONF_register.bbmclks = 4;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8003a66:	2104      	movs	r1, #4
 8003a68:	f361 0303 	bfi	r3, r1, #0, #4
 8003a6c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
  DRV_CONF_register.otselect = 0b00;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003a76:	f36f 0301 	bfc	r3, #0, #2
 8003a7a:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.drvstrength = 0b10;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003a84:	2102      	movs	r1, #2
 8003a86:	f361 0383 	bfi	r3, r1, #2, #2
 8003a8a:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.filt_isense = 0b00;
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003a94:	f36f 1305 	bfc	r3, #4, #2
 8003a98:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  TPOWERDOWN_register.sr = 10;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	220a      	movs	r2, #10
 8003aa0:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003aaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8003abe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f042 0210 	orr.w	r2, r2, #16
 8003ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <_ZN14TMC2160Stepper8defaultsEv+0xd4>)
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	c40c001e 	.word	0xc40c001e

08003ae4 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 8003af0:	f240 1345 	movw	r3, #325	@ 0x145
 8003af4:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 8003af6:	231f      	movs	r3, #31
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t scaler = 0; // = 256
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b06:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003bdc <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 8003b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b12:	ee17 3a90 	vmov	r3, s15
 8003b16:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 8003b18:	f642 5341 	movw	r3, #11585	@ 0x2d41
 8003b1c:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 8003b1e:	8b7a      	ldrh	r2, [r7, #26]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 8003b2e:	897a      	ldrh	r2, [r7, #10]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 8003b3a:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 8003b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b40:	3301      	adds	r3, #1
 8003b42:	461a      	mov	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	2bff      	cmp	r3, #255	@ 0xff
 8003b5a:	d902      	bls.n	8003b62 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	e007      	b.n	8003b72 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b66:	d804      	bhi.n	8003b72 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 8003b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while(0 < scaler && scaler < 128);
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <_ZN14TMC2160Stepper11rms_currentEt+0x9a>
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b7c:	d9dc      	bls.n	8003b38 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 8003b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b82:	2b1f      	cmp	r3, #31
 8003b84:	d902      	bls.n	8003b8c <_ZN14TMC2160Stepper11rms_currentEt+0xa8>
    CS = 31;
 8003b86:	231f      	movs	r3, #31
 8003b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  GLOBAL_SCALER(scaler);
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f826 	bl	8003be4 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fbdd 	bl	8003360 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003bc6:	793b      	ldrb	r3, [r7, #4]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f7ff fbaa 	bl	8003326 <_ZN10TMCStepper5iholdEh>
}
 8003bd2:	bf00      	nop
 8003bd4:	3728      	adds	r7, #40	@ 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	477fff00 	.word	0x477fff00
 8003be0:	000144fe 	.word	0x000144fe

08003be4 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8003c06:	210b      	movs	r1, #11
 8003c08:	4798      	blx	r3
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b095      	sub	sp, #84	@ 0x54
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6178      	str	r0, [r7, #20]
 8003c1c:	6139      	str	r1, [r7, #16]
 8003c1e:	60fa      	str	r2, [r7, #12]
 8003c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c24:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fc1b 	bl	8003468 <_ZN10TMCStepperC1Ef>
 8003c32:	4a47      	ldr	r2, [pc, #284]	@ (8003d50 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	831a      	strh	r2, [r3, #24]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4a44      	ldr	r2, [pc, #272]	@ (8003d54 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8003c42:	61da      	str	r2, [r3, #28]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2020 	strb.w	r2, [r3, #32]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003c54:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003c58:	f022 0203 	bic.w	r2, r2, #3
 8003c5c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8003c68:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003c6c:	f022 020f 	bic.w	r2, r2, #15
 8003c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	3334      	adds	r3, #52	@ 0x34
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f024 ffdd 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	334c      	adds	r3, #76	@ 0x4c
 8003ce0:	6939      	ldr	r1, [r7, #16]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f024 ffd7 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	79fa      	ldrb	r2, [r7, #7]
 8003cec:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8003cf0:	209c      	movs	r0, #156	@ 0x9c
 8003cf2:	f024 fcc5 	bl	8028680 <_Znwj>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	f107 031c 	add.w	r3, r7, #28
 8003cfe:	6939      	ldr	r1, [r7, #16]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f024 ffc8 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003d06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f024 ffc2 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003d12:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fe fbff 	bl	8002520 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8003d22:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8003d24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f024 fda4 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4618      	mov	r0, r3
 8003d34:	f024 fd9f 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d3c:	615a      	str	r2, [r3, #20]
        defaults();
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f000 f832 	bl	8003da8 <_ZN14TMC2208Stepper8defaultsEv>
    }
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4618      	mov	r0, r3
 8003d48:	3754      	adds	r7, #84	@ 0x54
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	0802b1a8 	.word	0x0802b1a8
 8003d54:	3de147ae 	.word	0x3de147ae

08003d58 <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fc65 	bl	800263a <_ZN14SoftwareSerial5beginEi>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8003d80:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffe7 	bl	8003d58 <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fa69 	bl	8003264 <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8003d92:	2101      	movs	r1, #1
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fa82 	bl	800329e <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f017 ff4e 	bl	801bc3c <HAL_Delay>

}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003dc4:	f36f 0341 	bfc	r3, #1, #1
 8003dc8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003dd2:	f36f 0382 	bfc	r3, #2, #1
 8003dd6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	7993      	ldrb	r3, [r2, #6]
 8003dec:	2101      	movs	r1, #1
 8003dee:	f361 0303 	bfi	r3, r1, #0, #4
 8003df2:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2214      	movs	r2, #20
 8003df8:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8003e02:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003e12:	2200      	movs	r2, #0
 8003e14:	f042 0210 	orr.w	r2, r2, #16
 8003e18:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8003e24:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f042 020d 	orr.w	r2, r2, #13
 8003e34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8003e3e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8003e60:	2300      	movs	r3, #0
 8003e62:	75bb      	strb	r3, [r7, #22]
 8003e64:	e027      	b.n	8003eb6 <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8003e66:	7dbb      	ldrb	r3, [r7, #22]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003e70:	2300      	movs	r3, #0
 8003e72:	753b      	strb	r3, [r7, #20]
 8003e74:	e019      	b.n	8003eaa <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	09db      	lsrs	r3, r3, #7
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	7d7b      	ldrb	r3, [r7, #21]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d007      	beq.n	8003e98 <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	b25b      	sxtb	r3, r3
 8003e8e:	f083 0307 	eor.w	r3, r3, #7
 8003e92:	b25b      	sxtb	r3, r3
 8003e94:	75fb      	strb	r3, [r7, #23]
 8003e96:	e002      	b.n	8003e9e <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8003e9e:	7d7b      	ldrb	r3, [r7, #21]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003ea4:	7d3b      	ldrb	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	753b      	strb	r3, [r7, #20]
 8003eaa:	7d3b      	ldrb	r3, [r7, #20]
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	d9e2      	bls.n	8003e76 <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8003eb0:	7dbb      	ldrb	r3, [r7, #22]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	75bb      	strb	r3, [r7, #22]
 8003eb6:	7dba      	ldrb	r2, [r7, #22]
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3d3      	bcc.n	8003e66 <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8003ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
    int out = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fd28 	bl	8002932 <_ZN14SoftwareSerial9availableEv>
 8003ee2:	60f8      	str	r0, [r7, #12]

    return out;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe fbf8 	bl	8002704 <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fd34 	bl	80029c2 <_ZN14SoftwareSerial4readEv>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	81fb      	strh	r3, [r7, #14]

	return out;
 8003f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fce7 	bl	8002956 <_ZN14SoftwareSerial5writeEi>

    return out;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	b2db      	uxtb	r3, r3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b089      	sub	sp, #36	@ 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fac:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	2305      	movs	r3, #5
 8003fba:	753b      	strb	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8003fc2:	757b      	strb	r3, [r7, #21]
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
 8003fc6:	75bb      	strb	r3, [r7, #22]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	75fb      	strb	r3, [r7, #23]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	763b      	strb	r3, [r7, #24]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	767b      	strb	r3, [r7, #25]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 8003fe6:	7fbc      	ldrb	r4, [r7, #30]
 8003fe8:	7fba      	ldrb	r2, [r7, #30]
 8003fea:	f107 0314 	add.w	r3, r7, #20
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7ff ff2c 	bl	8003e4e <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f104 0320 	add.w	r3, r4, #32
 8003ffe:	443b      	add	r3, r7
 8004000:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff ff72 	bl	8003eee <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 800400a:	2300      	movs	r3, #0
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e013      	b.n	8004038 <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 8004010:	7ffb      	ldrb	r3, [r7, #31]
 8004012:	3320      	adds	r3, #32
 8004014:	443b      	add	r3, r7
 8004016:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800401a:	4619      	mov	r1, r3
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff ffa4 	bl	8003f6a <_ZN14TMC2208Stepper12serial_writeEh>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8b1b      	ldrh	r3, [r3, #24]
 800402a:	4413      	add	r3, r2
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	3301      	adds	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	7ffa      	ldrb	r2, [r7, #31]
 800403a:	7fbb      	ldrb	r3, [r7, #30]
 800403c:	429a      	cmp	r2, r3
 800403e:	d9e7      	bls.n	8004010 <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ff6b 	bl	8003f1c <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 8004046:	2005      	movs	r0, #5
 8004048:	f017 fdf8 	bl	801bc3c <HAL_Delay>
}
 800404c:	bf00      	nop
 800404e:	3724      	adds	r7, #36	@ 0x24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 8004054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004058:	b092      	sub	sp, #72	@ 0x48
 800405a:	af00      	add	r7, sp, #0
 800405c:	6178      	str	r0, [r7, #20]
 800405e:	6139      	str	r1, [r7, #16]
 8004060:	4611      	mov	r1, r2
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	4613      	mov	r3, r2
 800406a:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 800406c:	e002      	b.n	8004074 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff68 	bl	8003f44 <_ZN14TMC2208Stepper11serial_readEv>
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f7ff ff29 	bl	8003ecc <_ZN14TMC2208Stepper9availableEv>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfcc      	ite	gt
 8004080:	2301      	movgt	r3, #1
 8004082:	2300      	movle	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff2f 	bl	8003eee <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	@ 0x44
 8004094:	e00a      	b.n	80040ac <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 8004096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	6978      	ldr	r0, [r7, #20]
 80040a2:	f7ff ff62 	bl	8003f6a <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 80040a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a8:	3301      	adds	r3, #1
 80040aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b0:	429a      	cmp	r2, r3
 80040b2:	ddf0      	ble.n	8004096 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7ff ff31 	bl	8003f1c <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 80040ba:	f017 fdb3 	bl	801bc24 <HAL_GetTick>
 80040be:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	3202      	adds	r2, #2
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 80040d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 80040d8:	f017 fda4 	bl	801bc24 <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d004      	beq.n	80040f0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 80040ea:	89bb      	ldrh	r3, [r7, #12]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 80040f0:	89bb      	ldrh	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e080      	b.n	8004202 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f7ff ff1f 	bl	8003f44 <_ZN14TMC2208Stepper11serial_readEv>
 8004106:	4603      	mov	r3, r0
 8004108:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 800410a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800410e:	2b00      	cmp	r3, #0
 8004110:	db0c      	blt.n	800412c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 8004118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800411a:	b2db      	uxtb	r3, r3
 800411c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800411e:	4313      	orrs	r3, r2
 8004120:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800412a:	e000      	b.n	800412e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 800412c:	bf00      	nop

	} while (sync != sync_target);
 800412e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	429a      	cmp	r2, r3
 8004134:	d1d0      	bne.n	80040d8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 8004136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004138:	2200      	movs	r2, #0
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004142:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 8004146:	f017 fd6d 	bl	801bc24 <HAL_GetTick>
 800414a:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 800414c:	2305      	movs	r3, #5
 800414e:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 8004150:	2300      	movs	r3, #0
 8004152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004156:	e03f      	b.n	80041d8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 8004158:	f017 fd64 	bl	801bc24 <HAL_GetTick>
 800415c:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004162:	429a      	cmp	r2, r3
 8004164:	d004      	beq.n	8004170 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8004170:	89bb      	ldrh	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e040      	b.n	8004202 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	f7ff fedf 	bl	8003f44 <_ZN14TMC2208Stepper11serial_readEv>
 8004186:	4603      	mov	r3, r0
 8004188:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 800418a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db21      	blt.n	80041d6 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 8004192:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	020b      	lsls	r3, r1, #8
 80041a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041a4:	0202      	lsls	r2, r0, #8
 80041a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 80041aa:	8b7b      	ldrh	r3, [r7, #26]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2200      	movs	r2, #0
 80041b0:	469a      	mov	sl, r3
 80041b2:	4693      	mov	fp, r2
 80041b4:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 80041b8:	2500      	movs	r5, #0
 80041ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80041be:	ea42 0804 	orr.w	r8, r2, r4
 80041c2:	ea43 0905 	orr.w	r9, r3, r5
 80041c6:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 80041ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041ce:	3301      	adds	r3, #1
 80041d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80041d4:	e000      	b.n	80041d8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 80041d6:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 80041d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d9bb      	bls.n	8004158 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 80041e0:	e002      	b.n	80041e8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f7ff feae 	bl	8003f44 <_ZN14TMC2208Stepper11serial_readEv>
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7ff fe6f 	bl	8003ecc <_ZN14TMC2208Stepper9availableEv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfcc      	ite	gt
 80041f4:	2301      	movgt	r3, #1
 80041f6:	2300      	movle	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f1      	bne.n	80041e2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 80041fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	3748      	adds	r7, #72	@ 0x48
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800420e <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 800420e:	b580      	push	{r7, lr}
 8004210:	b088      	sub	sp, #32
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 800421a:	2303      	movs	r3, #3
 800421c:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	2305      	movs	r3, #5
 8004224:	743b      	strb	r3, [r7, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800422c:	747b      	strb	r3, [r7, #17]
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 8004232:	f107 0310 	add.w	r3, r7, #16
 8004236:	2203      	movs	r2, #3
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe07 	bl	8003e4e <_ZN14TMC2208Stepper7calcCRCEPhh>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
 8004254:	e080      	b.n	8004358 <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fe53 	bl	8003f02 <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 800425c:	f107 0110 	add.w	r1, r7, #16
 8004260:	2305      	movs	r3, #5
 8004262:	2203      	movs	r2, #3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fef5 	bl	8004054 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 800426a:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe5e 	bl	8003f30 <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 8004274:	2005      	movs	r0, #5
 8004276:	f017 fce1 	bl	801bc3c <HAL_Delay>

        CRCerror = false;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 8004282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	0e0a      	lsrs	r2, r1, #24
 8004290:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 8004292:	b2d3      	uxtb	r3, r2
 8004294:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 8004296:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	0c0a      	lsrs	r2, r1, #16
 80042a4:	2300      	movs	r3, #0
        };
 80042a6:	b2d3      	uxtb	r3, r2
 80042a8:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 80042aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	0a0a      	lsrs	r2, r1, #8
 80042b8:	2300      	movs	r3, #0
        };
 80042ba:	b2d3      	uxtb	r3, r2
 80042bc:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 80042be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	000a      	movs	r2, r1
 80042cc:	2300      	movs	r3, #0
        };
 80042ce:	b2d3      	uxtb	r3, r2
 80042d0:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 80042d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	0e02      	lsrs	r2, r0, #24
 80042e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80042e4:	0e0b      	lsrs	r3, r1, #24
        };
 80042e6:	b2d3      	uxtb	r3, r2
 80042e8:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 80042ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	0c02      	lsrs	r2, r0, #16
 80042f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042fc:	0c0b      	lsrs	r3, r1, #16
        };
 80042fe:	b2d3      	uxtb	r3, r2
 8004300:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 8004302:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	0a02      	lsrs	r2, r0, #8
 8004310:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004314:	0a0b      	lsrs	r3, r1, #8
        };
 8004316:	b2d3      	uxtb	r3, r2
 8004318:	73bb      	strb	r3, [r7, #14]
 800431a:	7e3b      	ldrb	r3, [r7, #24]
 800431c:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	2207      	movs	r2, #7
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fd91 	bl	8003e4e <_ZN14TMC2208Stepper7calcCRCEPhh>
 800432c:	4603      	mov	r3, r0
 800432e:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 8004330:	7e3b      	ldrb	r3, [r7, #24]
 8004332:	7d7a      	ldrb	r2, [r7, #21]
 8004334:	429a      	cmp	r2, r3
 8004336:	d102      	bne.n	800433e <_ZN14TMC2208Stepper4readEh+0x130>
 8004338:	7d7b      	ldrb	r3, [r7, #21]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d110      	bne.n	8004360 <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	3301      	adds	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f67f af7b 	bls.w	8004256 <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 8004360:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	0a02      	lsrs	r2, r0, #8
 800436e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004372:	0a0b      	lsrs	r3, r1, #8
 8004374:	4613      	mov	r3, r2
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80043a0:	2140      	movs	r1, #64	@ 0x40
 80043a2:	4798      	blx	r3
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	b2d1      	uxtb	r1, r2
 80043c0:	2000      	movs	r0, #0
 80043c2:	4301      	orrs	r1, r0
 80043c4:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 80043c8:	0a11      	lsrs	r1, r2, #8
 80043ca:	b2c9      	uxtb	r1, r1
 80043cc:	2000      	movs	r0, #0
 80043ce:	4301      	orrs	r1, r0
 80043d0:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 80043d4:	0c12      	lsrs	r2, r2, #16
 80043d6:	f002 020f 	and.w	r2, r2, #15
 80043da:	f002 000f 	and.w	r0, r2, #15
 80043de:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 80043e2:	f022 020f 	bic.w	r2, r2, #15
 80043e6:	4611      	mov	r1, r2
 80043e8:	4602      	mov	r2, r0
 80043ea:	430a      	orrs	r2, r1
 80043ec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80043fc:	f3c2 2213 	ubfx	r2, r2, #8, #20
 8004400:	2114      	movs	r1, #20
 8004402:	4798      	blx	r3
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	6178      	str	r0, [r7, #20]
 8004414:	6139      	str	r1, [r7, #16]
 8004416:	ed87 0a03 	vstr	s0, [r7, #12]
 800441a:	60ba      	str	r2, [r7, #8]
 800441c:	607b      	str	r3, [r7, #4]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	f7ff fa64 	bl	8003900 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8004438:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x14c>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f8b2 3048 	ldrh.w	r3, [r2, #72]	@ 0x48
 8004444:	f36f 030b 	bfc	r3, #0, #12
 8004448:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	f892 304a 	ldrb.w	r3, [r2, #74]	@ 0x4a
 8004452:	f36f 0300 	bfc	r3, #0, #1
 8004456:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8004462:	2200      	movs	r2, #0
 8004464:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004468:	2200      	movs	r2, #0
 800446a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800446e:	2200      	movs	r2, #0
 8004470:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	f892 304f 	ldrb.w	r3, [r2, #79]	@ 0x4f
 800447a:	f36f 0301 	bfc	r3, #0, #2
 800447e:	f882 304f 	strb.w	r3, [r2, #79]	@ 0x4f
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	651a      	str	r2, [r3, #80]	@ 0x50
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2200      	movs	r2, #0
 800448c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8004490:	f893 2056 	ldrb.w	r2, [r3, #86]	@ 0x56
 8004494:	f022 0203 	bic.w	r2, r2, #3
 8004498:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 80044b8:	f893 205b 	ldrb.w	r2, [r3, #91]	@ 0x5b
 80044bc:	f022 020f 	bic.w	r2, r2, #15
 80044c0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80044d4:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 80044d8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80044dc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 800450a:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800450e:	f022 0203 	bic.w	r2, r2, #3
 8004512:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	f8b2 306a 	ldrh.w	r3, [r2, #106]	@ 0x6a
 8004524:	f36f 030b 	bfc	r3, #0, #12
 8004528:	f8a2 306a 	strh.w	r3, [r2, #106]	@ 0x6a
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 8004532:	f36f 030a 	bfc	r3, #0, #11
 8004536:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 8004542:	2200      	movs	r2, #0
 8004544:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  { defaults(); }
 8004548:	6978      	ldr	r0, [r7, #20]
 800454a:	f000 f81b 	bl	8004584 <_ZN14TMC5130Stepper8defaultsEv>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	0802b298 	.word	0x0802b298

0800455c <_ZN14TMC5130Stepper5beginEv>:

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fa00 	bl	800396c <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f838 	bl	80045e4 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 8004574:	2100      	movs	r1, #0
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f824 	bl	80045c4 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	f892 304a 	ldrb.w	r3, [r2, #74]	@ 0x4a
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
  ENC_CONST_register.sr = 65536;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 80045a2:	2200      	movs	r2, #0
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	00050480 	.word	0x00050480

080045c4 <_ZN14TMC5130Stepper7XACTUALEl>:
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	2121      	movs	r1, #33	@ 0x21
 80045da:	4798      	blx	r3
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_ZN14TMC5130Stepper7XTARGETEl>:
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	212d      	movs	r1, #45	@ 0x2d
 80045fa:	4798      	blx	r3
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	6178      	str	r0, [r7, #20]
 800460c:	6139      	str	r1, [r7, #16]
 800460e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004612:	60ba      	str	r2, [r7, #8]
 8004614:	607b      	str	r3, [r7, #4]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	ed97 0a03 	vldr	s0, [r7, #12]
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	f7ff feee 	bl	800440c <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x58>)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800463e:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8004642:	f022 020f 	bic.w	r2, r2, #15
 8004646:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  { defaults(); }
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f000 f808 	bl	8004660 <_ZN14TMC5160Stepper8defaultsEv>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	0802b2d4 	.word	0x0802b2d4

08004660 <_ZN14TMC5160Stepper8defaultsEv>:

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 800466e:	2106      	movs	r1, #6
 8004670:	f361 0303 	bfi	r3, r1, #0, #4
 8004674:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  SHORT_CONF_register.s2g_level = 6;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 800467e:	2106      	movs	r1, #6
 8004680:	f361 0303 	bfi	r3, r1, #0, #4
 8004684:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 800468e:	2101      	movs	r1, #1
 8004690:	f361 0301 	bfi	r3, r1, #0, #2
 8004694:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  SHORT_CONF_register.shortdelay = 0;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 800469e:	f36f 0382 	bfc	r3, #2, #1
 80046a2:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  DRV_CONF_register.bbmtime = 0;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 80046ac:	f36f 0304 	bfc	r3, #0, #5
 80046b0:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
  DRV_CONF_register.bbmclks = 4;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 80046ba:	2104      	movs	r1, #4
 80046bc:	f361 0303 	bfi	r3, r1, #0, #4
 80046c0:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
  DRV_CONF_register.otselect = 0b00;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 80046ca:	f36f 0301 	bfc	r3, #0, #2
 80046ce:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.drvstrength = 0b10;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 80046d8:	2102      	movs	r1, #2
 80046da:	f361 0383 	bfi	r3, r1, #2, #2
 80046de:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.filt_isense = 0b00;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 80046e8:	f36f 1305 	bfc	r3, #4, #2
 80046ec:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  TPOWERDOWN_register.sr = 10;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	220a      	movs	r2, #10
 80046f4:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8004708:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800470c:	f022 0203 	bic.w	r2, r2, #3
 8004710:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ENC_CONST_register.sr = 65536;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 800471c:	2200      	movs	r2, #0
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8004732:	2200      	movs	r2, #0
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800473c:	2200      	movs	r2, #0
 800473e:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8004742:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8004746:	2200      	movs	r2, #0
 8004748:	f042 0210 	orr.w	r2, r2, #16
 800474c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a04      	ldr	r2, [pc, #16]	@ (8004764 <_ZN14TMC5160Stepper8defaultsEv+0x104>)
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	c40c001e 	.word	0xc40c001e

08004768 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	460b      	mov	r3, r1
 8004772:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800477e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8004878 <_ZN10TMCStepper11rms_currentEt+0x110>
 8004782:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004786:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8004880 <_ZN10TMCStepper11rms_currentEt+0x118>
 800478a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	edd3 7a03 	vldr	s15, [r3, #12]
 8004794:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004798:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8004888 <_ZN10TMCStepper11rms_currentEt+0x120>
 800479c:	ee37 7b05 	vadd.f64	d7, d7, d5
 80047a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80047a4:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8004890 <_ZN10TMCStepper11rms_currentEt+0x128>
 80047a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80047ac:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80047b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80047b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80047bc:	793b      	ldrb	r3, [r7, #4]
 80047be:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d82d      	bhi.n	8004822 <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 80047d4:	897b      	ldrh	r3, [r7, #10]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047de:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8004878 <_ZN10TMCStepper11rms_currentEt+0x110>
 80047e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047e6:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8004880 <_ZN10TMCStepper11rms_currentEt+0x118>
 80047ea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80047f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047f8:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8004888 <_ZN10TMCStepper11rms_currentEt+0x120>
 80047fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004800:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004804:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8004898 <_ZN10TMCStepper11rms_currentEt+0x130>
 8004808:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800480c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004810:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004814:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004818:	edc7 7a01 	vstr	s15, [r7, #4]
 800481c:	793b      	ldrb	r3, [r7, #4]
 800481e:	75fb      	strb	r3, [r7, #23]
 8004820:	e006      	b.n	8004830 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	4798      	blx	r3
  }

  if (CS > 31)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b1f      	cmp	r3, #31
 8004834:	d901      	bls.n	800483a <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 8004836:	231f      	movs	r3, #31
 8004838:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	4619      	mov	r1, r3
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7fe fd8e 	bl	8003360 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	edd3 7a04 	vldr	s15, [r3, #16]
 8004854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004860:	793b      	ldrb	r3, [r7, #4]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	4619      	mov	r1, r3
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7fe fd5d 	bl	8003326 <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 800486c:	bf00      	nop
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	f3af 8000 	nop.w
 8004878:	aa3ad18d 	.word	0xaa3ad18d
 800487c:	4046a09a 	.word	0x4046a09a
 8004880:	00000000 	.word	0x00000000
 8004884:	408f4000 	.word	0x408f4000
 8004888:	47ae147b 	.word	0x47ae147b
 800488c:	3f947ae1 	.word	0x3f947ae1
 8004890:	cccccccd 	.word	0xcccccccd
 8004894:	3fd4cccc 	.word	0x3fd4cccc
 8004898:	70a3d70a 	.word	0x70a3d70a
 800489c:	3fc70a3d 	.word	0x3fc70a3d

080048a0 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3310      	adds	r3, #16
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
 80048b4:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <_ZN10TMCStepper15test_connectionEv+0x28>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d103      	bne.n	80048cc <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e002      	b.n	80048ce <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 80048c8:	2302      	movs	r3, #2
 80048ca:	e000      	b.n	80048ce <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 80048cc:	2300      	movs	r3, #0
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ea:	d058      	beq.n	800499e <_ZN10TMCStepper10microstepsEt+0xc6>
 80048ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f0:	f300 809d 	bgt.w	8004a2e <_ZN10TMCStepper10microstepsEt+0x156>
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	d05a      	beq.n	80049ae <_ZN10TMCStepper10microstepsEt+0xd6>
 80048f8:	2b80      	cmp	r3, #128	@ 0x80
 80048fa:	f300 8098 	bgt.w	8004a2e <_ZN10TMCStepper10microstepsEt+0x156>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	dc4a      	bgt.n	8004998 <_ZN10TMCStepper10microstepsEt+0xc0>
 8004902:	2b00      	cmp	r3, #0
 8004904:	f340 8093 	ble.w	8004a2e <_ZN10TMCStepper10microstepsEt+0x156>
 8004908:	3b01      	subs	r3, #1
 800490a:	2b1f      	cmp	r3, #31
 800490c:	f200 808f 	bhi.w	8004a2e <_ZN10TMCStepper10microstepsEt+0x156>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <_ZN10TMCStepper10microstepsEt+0x40>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004a1f 	.word	0x08004a1f
 800491c:	08004a0f 	.word	0x08004a0f
 8004920:	08004a2f 	.word	0x08004a2f
 8004924:	080049ff 	.word	0x080049ff
 8004928:	08004a2f 	.word	0x08004a2f
 800492c:	08004a2f 	.word	0x08004a2f
 8004930:	08004a2f 	.word	0x08004a2f
 8004934:	080049ef 	.word	0x080049ef
 8004938:	08004a2f 	.word	0x08004a2f
 800493c:	08004a2f 	.word	0x08004a2f
 8004940:	08004a2f 	.word	0x08004a2f
 8004944:	08004a2f 	.word	0x08004a2f
 8004948:	08004a2f 	.word	0x08004a2f
 800494c:	08004a2f 	.word	0x08004a2f
 8004950:	08004a2f 	.word	0x08004a2f
 8004954:	080049df 	.word	0x080049df
 8004958:	08004a2f 	.word	0x08004a2f
 800495c:	08004a2f 	.word	0x08004a2f
 8004960:	08004a2f 	.word	0x08004a2f
 8004964:	08004a2f 	.word	0x08004a2f
 8004968:	08004a2f 	.word	0x08004a2f
 800496c:	08004a2f 	.word	0x08004a2f
 8004970:	08004a2f 	.word	0x08004a2f
 8004974:	08004a2f 	.word	0x08004a2f
 8004978:	08004a2f 	.word	0x08004a2f
 800497c:	08004a2f 	.word	0x08004a2f
 8004980:	08004a2f 	.word	0x08004a2f
 8004984:	08004a2f 	.word	0x08004a2f
 8004988:	08004a2f 	.word	0x08004a2f
 800498c:	08004a2f 	.word	0x08004a2f
 8004990:	08004a2f 	.word	0x08004a2f
 8004994:	080049cf 	.word	0x080049cf
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	d010      	beq.n	80049be <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 800499c:	e047      	b.n	8004a2e <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3324      	adds	r3, #36	@ 0x24
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2100      	movs	r1, #0
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
 80049ac:	e040      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3324      	adds	r3, #36	@ 0x24
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
 80049bc:	e038      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3324      	adds	r3, #36	@ 0x24
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2102      	movs	r1, #2
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
 80049cc:	e030      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3324      	adds	r3, #36	@ 0x24
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2103      	movs	r1, #3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e028      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3324      	adds	r3, #36	@ 0x24
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2104      	movs	r1, #4
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e020      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3324      	adds	r3, #36	@ 0x24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2105      	movs	r1, #5
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
 80049fc:	e018      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3324      	adds	r3, #36	@ 0x24
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2106      	movs	r1, #6
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e010      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3324      	adds	r3, #36	@ 0x24
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2107      	movs	r1, #7
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	4798      	blx	r3
 8004a1c:	e008      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3324      	adds	r3, #36	@ 0x24
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2108      	movs	r1, #8
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
 8004a2c:	e000      	b.n	8004a30 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 8004a2e:	bf00      	nop
  }
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b36      	cmp	r3, #54	@ 0x36
 8004a48:	d022      	beq.n	8004a90 <_ZN10TMCStepper10blank_timeEh+0x58>
 8004a4a:	2b36      	cmp	r3, #54	@ 0x36
 8004a4c:	dc28      	bgt.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004a4e:	2b24      	cmp	r3, #36	@ 0x24
 8004a50:	d016      	beq.n	8004a80 <_ZN10TMCStepper10blank_timeEh+0x48>
 8004a52:	2b24      	cmp	r3, #36	@ 0x24
 8004a54:	dc24      	bgt.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d002      	beq.n	8004a60 <_ZN10TMCStepper10blank_timeEh+0x28>
 8004a5a:	2b18      	cmp	r3, #24
 8004a5c:	d008      	beq.n	8004a70 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 8004a5e:	e01f      	b.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	332c      	adds	r3, #44	@ 0x2c
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
 8004a6e:	e017      	b.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	332c      	adds	r3, #44	@ 0x2c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e00f      	b.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	332c      	adds	r3, #44	@ 0x2c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2102      	movs	r1, #2
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
 8004a8e:	e007      	b.n	8004aa0 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	332c      	adds	r3, #44	@ 0x2c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2103      	movs	r1, #3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
 8004a9e:	bf00      	nop
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	79d2      	ldrb	r2, [r2, #7]
 8004ac4:	2111      	movs	r1, #17
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f024 f8ab 	bl	8028c3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4904      	ldr	r1, [pc, #16]	@ (8004b00 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8004af0:	4804      	ldr	r0, [pc, #16]	@ (8004b04 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8004af2:	f000 fa34 	bl	8004f5e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8004af6:	4603      	mov	r3, r0
					__idx, __base); }
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0802a250 	.word	0x0802a250
 8004b04:	0802923d 	.word	0x0802923d

08004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f024 f8bc 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	761a      	strb	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	765a      	strb	r2, [r3, #25]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	332c      	adds	r3, #44	@ 0x2c
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
    configurePin();
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f835 	bl	8004bac <_ZN3Pin12configurePinEv>
    enableClock();
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f8a8 	bl	8004c98 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f949 	bl	8004de0 <_ZN3Pin13initialisePinEv>
}
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f024 f893 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	761a      	strb	r2, [r3, #24]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	765a      	strb	r2, [r3, #25]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	332c      	adds	r3, #44	@ 0x2c
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	611a      	str	r2, [r3, #16]
    configurePin();
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f80b 	bl	8004bac <_ZN3Pin12configurePinEv>
    enableClock();
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f87e 	bl	8004c98 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f91f 	bl	8004de0 <_ZN3Pin13initialisePinEv>
}
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b090      	sub	sp, #64	@ 0x40
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 8004bb4:	4b36      	ldr	r3, [pc, #216]	@ (8004c90 <_ZN3Pin12configurePinEv+0xe4>)
 8004bb6:	f107 0408 	add.w	r4, r7, #8
 8004bba:	461d      	mov	r5, r3
 8004bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f023 ff17 	bl	8028a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b50      	cmp	r3, #80	@ 0x50
 8004bd8:	bf0c      	ite	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	2300      	movne	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d042      	beq.n	8004c6a <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f023 ff09 	bl	8028a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	3b41      	subs	r3, #65	@ 0x41
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004c00:	f04f 33ff 	mov.w	r3, #4294967295
 8004c04:	2203      	movs	r2, #3
 8004c06:	f024 f877 	bl	8028cf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c0e:	220a      	movs	r2, #10
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff5e 	bl	8004ad4 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	839a      	strh	r2, [r3, #28]
 8004c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c24:	4618      	mov	r0, r3
 8004c26:	f023 fe26 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8b9b      	ldrh	r3, [r3, #28]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2301      	movs	r3, #1
 8004c32:	4093      	lsls	r3, r2
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	7e9b      	ldrb	r3, [r3, #26]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	3340      	adds	r3, #64	@ 0x40
 8004c42:	443b      	add	r3, r7
 8004c44:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	7e1b      	ldrb	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7e5b      	ldrb	r3, [r3, #25]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d00c      	beq.n	8004c82 <_ZN3Pin12configurePinEv+0xd6>
 8004c68:	e003      	b.n	8004c72 <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 8004c6a:	480a      	ldr	r0, [pc, #40]	@ (8004c94 <_ZN3Pin12configurePinEv+0xe8>)
 8004c6c:	f024 fc22 	bl	80294b4 <puts>
 8004c70:	e00a      	b.n	8004c88 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d101      	bne.n	8004c7e <_ZN3Pin12configurePinEv+0xd2>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e002      	b.n	8004c84 <_ZN3Pin12configurePinEv+0xd8>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <_ZN3Pin12configurePinEv+0xd8>
 8004c82:	2301      	movs	r3, #1
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8004c88:	3740      	adds	r7, #64	@ 0x40
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	0802a278 	.word	0x0802a278
 8004c94:	0802a258 	.word	0x0802a258

08004c98 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8004c98:	b480      	push	{r7}
 8004c9a:	b08b      	sub	sp, #44	@ 0x2c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7e9b      	ldrb	r3, [r3, #26]
 8004ca4:	2b07      	cmp	r3, #7
 8004ca6:	f200 8093 	bhi.w	8004dd0 <_ZN3Pin11enableClockEv+0x138>
 8004caa:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <_ZN3Pin11enableClockEv+0x18>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cd1 	.word	0x08004cd1
 8004cb4:	08004cf1 	.word	0x08004cf1
 8004cb8:	08004d11 	.word	0x08004d11
 8004cbc:	08004d31 	.word	0x08004d31
 8004cc0:	08004d51 	.word	0x08004d51
 8004cc4:	08004d71 	.word	0x08004d71
 8004cc8:	08004d91 	.word	0x08004d91
 8004ccc:	08004db1 	.word	0x08004db1
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8004cd0:	4b42      	ldr	r3, [pc, #264]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd6:	4a41      	ldr	r2, [pc, #260]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	e06f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf6:	4a39      	ldr	r2, [pc, #228]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d00:	4b36      	ldr	r3, [pc, #216]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	e05f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8004d10:	4b32      	ldr	r3, [pc, #200]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d16:	4a31      	ldr	r2, [pc, #196]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d20:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	e04f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8004d30:	4b2a      	ldr	r3, [pc, #168]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d36:	4a29      	ldr	r2, [pc, #164]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d38:	f043 0308 	orr.w	r3, r3, #8
 8004d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d40:	4b26      	ldr	r3, [pc, #152]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	e03f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8004d50:	4b22      	ldr	r3, [pc, #136]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d60:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e02f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8004d70:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d76:	4a19      	ldr	r2, [pc, #100]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d78:	f043 0320 	orr.w	r3, r3, #32
 8004d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d80:	4b16      	ldr	r3, [pc, #88]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	e01f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8004d90:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d96:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004da0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	e00f      	b.n	8004dd0 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004db6:	4a09      	ldr	r2, [pc, #36]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <_ZN3Pin11enableClockEv+0x144>)
 8004dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	bf00      	nop
    }
}
 8004dd0:	bf00      	nop
 8004dd2:	372c      	adds	r7, #44	@ 0x2c
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	58024400 	.word	0x58024400

08004de0 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8bdb      	ldrh	r3, [r3, #30]
 8004df0:	2200      	movs	r2, #0
 8004df2:	4619      	mov	r1, r3
 8004df4:	f019 fdfc 	bl	801e9f0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8bdb      	ldrh	r3, [r3, #30]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	332c      	adds	r3, #44	@ 0x2c
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f019 fc1c 	bl	801e660 <HAL_GPIO_Init>
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8bdb      	ldrh	r3, [r3, #30]
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f019 fdbc 	bl	801e9c0 <HAL_GPIO_ReadPin>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8bd9      	ldrh	r1, [r3, #30]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <_ZN3Pin3setEb+0x1e>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <_ZN3Pin3setEb+0x20>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f019 fdb7 	bl	801e9f0 <HAL_GPIO_WritePin>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff9e 	bl	8004de0 <_ZN3Pin13initialisePinEv>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff8d 	bl	8004de0 <_ZN3Pin13initialisePinEv>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff7f 	bl	8004de0 <_ZN3Pin13initialisePinEv>
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	f024 fc8b 	bl	802980c <__errno>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f024 fc85 	bl	802980c <__errno>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8004f12:	b590      	push	{r4, r7, lr}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	f024 fc77 	bl	802980c <__errno>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681c      	ldr	r4, [r3, #0]
 8004f34:	f024 fc6a 	bl	802980c <__errno>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	601c      	str	r4, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}

08004f46 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8004f50:	2300      	movs	r3, #0
	  }
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b08b      	sub	sp, #44	@ 0x2c
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ffba 	bl	8004eea <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f107 0118 	add.w	r1, r7, #24
 8004f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
 8004f82:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d102      	bne.n	8004f92 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8004f8c:	68b8      	ldr	r0, [r7, #8]
 8004f8e:	f023 fb93 	bl	80286b8 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8004f92:	f024 fc3b 	bl	802980c <__errno>
 8004f96:	4603      	mov	r3, r0
 8004f98:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8004f9a:	2b22      	cmp	r3, #34	@ 0x22
 8004f9c:	d006      	beq.n	8004fac <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fa2:	f7ff ffd0 	bl	8004f46 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8004fb0:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f023 fb84 	bl	80286c4 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	623b      	str	r3, [r7, #32]

      if (__idx)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	601a      	str	r2, [r3, #0]

      return __ret;
 8004fd2:	6a3c      	ldr	r4, [r7, #32]
    }
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ff9a 	bl	8004f12 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8004fde:	4623      	mov	r3, r4
    }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	372c      	adds	r7, #44	@ 0x2c
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}

08004fe8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	@ (8005004 <_ZN9InterruptC1Ev+0x1c>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	0802b310 	.word	0x0802b310

08005008 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4805      	ldr	r0, [pc, #20]	@ (800502c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8005016:	f024 f9dd 	bl	80293d4 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800501a:	4905      	ldr	r1, [pc, #20]	@ (8005030 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	0802a298 	.word	0x0802a298
 8005030:	240000a8 	.word	0x240000a8

08005034 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a02      	ldr	r2, [pc, #8]	@ (800504c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8005042:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}
 800504c:	240000a8 	.word	0x240000a8

08005050 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8005054:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a02      	ldr	r2, [pc, #8]	@ (8005068 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 800505e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005060:	4610      	mov	r0, r2
 8005062:	4798      	blx	r3
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}
 8005068:	240000a8 	.word	0x240000a8

0800506c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8005070:	4b04      	ldr	r3, [pc, #16]	@ (8005084 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a02      	ldr	r2, [pc, #8]	@ (8005084 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 800507a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}
 8005084:	240000a8 	.word	0x240000a8

08005088 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 800508c:	4b04      	ldr	r3, [pc, #16]	@ (80050a0 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a02      	ldr	r2, [pc, #8]	@ (80050a0 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8005096:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
}
 800509c:	bf00      	nop
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	240000a8 	.word	0x240000a8

080050a4 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 80050a8:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a02      	ldr	r2, [pc, #8]	@ (80050bc <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 80050b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	240000a8 	.word	0x240000a8

080050c0 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 80050c4:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 80050c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a02      	ldr	r2, [pc, #8]	@ (80050d8 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 80050ce:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80050d0:	4610      	mov	r0, r2
 80050d2:	4798      	blx	r3
}
 80050d4:	bf00      	nop
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	240000a8 	.word	0x240000a8

080050dc <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 80050e0:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 80050f4:	f7ff fff2 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f002 f948 	bl	8007394 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8005104:	4603      	mov	r3, r0
 8005106:	e004      	b.n	8005112 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fb f949 	bl	80003a0 <strlen>
 800510e:	4603      	mov	r3, r0
 8005110:	bf00      	nop
      }
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8005124:	6838      	ldr	r0, [r7, #0]
 8005126:	f023 ff1b 	bl	8028f60 <malloc>
 800512a:	4603      	mov	r3, r0
  }
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
    free(ptr);
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f023 ff16 	bl	8028f70 <free>
  }
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	f023 ffbe 	bl	80290dc <realloc>
 8005160:	4603      	mov	r3, r0
  }
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8005170:	4b02      	ldr	r3, [pc, #8]	@ (800517c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	24000000 	.word	0x24000000

08005180 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3309      	adds	r3, #9
  }
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a8:	d301      	bcc.n	80051ae <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e01b      	b.n	80051e6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ffe6 	bl	8005180 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 80051b4:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d201      	bcs.n	80051c2 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 80051be:	2300      	movs	r3, #0
 80051c0:	e011      	b.n	80051e6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	6838      	ldr	r0, [r7, #0]
 80051cc:	4798      	blx	r3
 80051ce:	60b8      	str	r0, [r7, #8]
    if (node) {
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2201      	movs	r2, #1
 80051e2:	809a      	strh	r2, [r3, #4]
    }
    return node;
 80051e4:	68bb      	ldr	r3, [r7, #8]
  }
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 80051ee:	b5b0      	push	{r4, r5, r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005200:	d20e      	bcs.n	8005220 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	681c      	ldr	r4, [r3, #0]
 800520a:	687d      	ldr	r5, [r7, #4]
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f7ff ffb7 	bl	8005180 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	4628      	mov	r0, r5
 800521a:	47a0      	blx	r4
 800521c:	6178      	str	r0, [r7, #20]
 800521e:	e001      	b.n	8005224 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
    if (newNode)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	80da      	strh	r2, [r3, #6]
 8005232:	e006      	b.n	8005242 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3304      	adds	r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
    return newNode;
 8005242:	697b      	ldr	r3, [r7, #20]
  }
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bdb0      	pop	{r4, r5, r7, pc}

0800524c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3304      	adds	r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	6838      	ldr	r0, [r7, #0]
 8005262:	4798      	blx	r3
  }
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	721a      	strb	r2, [r3, #8]
  }
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
    return !str_;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
  }
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    return size_;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
  }
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    return str_;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
  }
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    while (strings_) {
 80052f6:	e00a      	b.n	800530e <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff ff9f 	bl	800524c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	601a      	str	r2, [r3, #0]
    strings_ = node;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	601a      	str	r2, [r3, #0]
  }
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e029      	b.n	80053b0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	3308      	adds	r3, #8
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d11f      	bne.n	80053a6 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	889b      	ldrh	r3, [r3, #4]
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	809a      	strh	r2, [r3, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	889b      	ldrh	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	6938      	ldr	r0, [r7, #16]
 80053a0:	f7ff ff54 	bl	800524c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 80053a4:	e008      	b.n	80053b8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1d2      	bne.n	800535c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 80053b6:	e000      	b.n	80053ba <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 80053b8:	bf00      	nop
    }
  }
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	2301      	movs	r3, #1
 80053cc:	2200      	movs	r2, #0
 80053ce:	2100      	movs	r1, #0
 80053d0:	f7ff ff4c 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 80053de:	b590      	push	{r4, r7, lr}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 80053ec:	68fc      	ldr	r4, [r7, #12]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 80053f4:	68b8      	ldr	r0, [r7, #8]
 80053f6:	f7fa ffd3 	bl	80003a0 <strlen>
 80053fa:	4602      	mov	r2, r0
 80053fc:	e000      	b.n	8005400 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 80053fe:	2200      	movs	r2, #0
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff ff31 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bd90      	pop	{r4, r7, pc}

08005414 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
    return str_.data();
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff58 	bl	80052d4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8005424:	4603      	mov	r3, r0
  }
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
    return s.str_;
 8005436:	687b      	ldr	r3, [r7, #4]
  }
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005458:	809a      	strh	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2db      	uxtb	r3, r3
  }
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
  }
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f805 	bl	80054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80054c0:	4603      	mov	r3, r0
  }
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
  }
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
    return p;
 80054ec:	683b      	ldr	r3, [r7, #0]
  }
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	460a      	mov	r2, r1
 800551e:	71fb      	strb	r3, [r7, #7]
 8005520:	4613      	mov	r3, r2
 8005522:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 8005524:	79fa      	ldrb	r2, [r7, #7]
 8005526:	79bb      	ldrb	r3, [r7, #6]
 8005528:	4013      	ands	r3, r2
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
    return p;
 8005562:	683b      	ldr	r3, [r7, #0]
  }
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ffe1 	bl	8005542 <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	711a      	strb	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800558c:	80da      	strh	r2, [r3, #6]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    return next_;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	88db      	ldrh	r3, [r3, #6]
  }
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	80da      	strh	r2, [r3, #6]
  }
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f85f 	bl	800569a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	e000      	b.n	80055e8 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 80055e6:	2300      	movs	r3, #0
  }
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f85f 	bl	80056bc <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	e000      	b.n	800560a <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8005608:	2300      	movs	r3, #0
  }
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f86c 	bl	80056f8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	e000      	b.n	800562c <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 800562a:	2300      	movs	r3, #0
  }
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ffe8 	bl	8005612 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8005642:	4603      	mov	r3, r0
  }
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	791b      	ldrb	r3, [r3, #4]
 800565a:	2b04      	cmp	r3, #4
 800565c:	d002      	beq.n	8005664 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 800565e:	2b05      	cmp	r3, #5
 8005660:	d008      	beq.n	8005674 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8005662:	e013      	b.n	800568c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff feb6 	bl	80053de <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8005672:	e00e      	b.n	8005692 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	88da      	ldrh	r2, [r3, #6]
 8005682:	2300      	movs	r3, #0
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 fea5 	bl	80073d4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 800568a:	e002      	b.n	8005692 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fe97 	bl	80053c0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	791b      	ldrb	r3, [r3, #4]
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
  }
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	791b      	ldrb	r3, [r3, #4]
 80056c8:	2160      	movs	r1, #96	@ 0x60
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff ff22 	bl	8005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80056d0:	4603      	mov	r3, r0
  }
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	791b      	ldrb	r3, [r3, #4]
 80056e6:	2108      	movs	r1, #8
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff13 	bl	8005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80056ee:	4603      	mov	r3, r0
  }
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	2b20      	cmp	r3, #32
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
  }
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	711a      	strb	r2, [r3, #4]
  }
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2206      	movs	r2, #6
 8005744:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	701a      	strb	r2, [r3, #0]
  }
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f805 	bl	8005776 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800576c:	2301      	movs	r3, #1
  }
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2205      	movs	r2, #5
 8005784:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]
  }
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ae:	805a      	strh	r2, [r3, #2]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ffe5 	bl	8005798 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2240      	movs	r2, #64	@ 0x40
 80057e4:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4619      	mov	r1, r3
 80057ea:	2004      	movs	r0, #4
 80057ec:	f7ff fe79 	bl	80054e2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d006      	beq.n	8005804 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 80057f6:	2200      	movs	r2, #0
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	805a      	strh	r2, [r3, #2]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ffdd 	bl	80057be <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8005804:	687b      	ldr	r3, [r7, #4]
  }
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ffbd 	bl	8005798 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4619      	mov	r1, r3
 800583a:	2004      	movs	r0, #4
 800583c:	f7ff fe51 	bl	80054e2 <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8005846:	2200      	movs	r2, #0
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	805a      	strh	r2, [r3, #2]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ffdd 	bl	800580e <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8005854:	687b      	ldr	r3, [r7, #4]
  }
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	849a      	strh	r2, [r3, #36]	@ 0x24
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800589a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	711a      	strb	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3308      	adds	r3, #8
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff ffca 	bl	800585e <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	330c      	adds	r3, #12
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ffd3 	bl	800587a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3308      	adds	r3, #8
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fd16 	bl	8005320 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f7ff fc43 	bl	8005198 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8005912:	60f8      	str	r0, [r7, #12]
    if (!node)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	711a      	strb	r2, [r3, #4]
    return node;
 8005920:	68fb      	ldr	r3, [r7, #12]
  }
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	68b8      	ldr	r0, [r7, #8]
 8005940:	f7ff fc55 	bl	80051ee <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8005944:	60b8      	str	r0, [r7, #8]
    if (!node)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	711a      	strb	r2, [r3, #4]
    return node;
 8005952:	68bb      	ldr	r3, [r7, #8]
  }
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	6838      	ldr	r0, [r7, #0]
 800596e:	f7ff fc6d 	bl	800524c <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f103 0008 	add.w	r0, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	f7ff fcd7 	bl	8005344 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f103 020c 	add.w	r2, r3, #12
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f001 fd24 	bl	8007400 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f103 0208 	add.w	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f7ff fc8e 	bl	80052ec <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f103 020c 	add.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f001 fd3f 	bl	8007470 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
    return data_;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
  }
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
    return resources_;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
  }
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
    return resources_;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
  }
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    return data_;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
  }
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	463b      	mov	r3, r7
 8005aae:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fd13 	bl	80074e0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005aba:	60f8      	str	r0, [r7, #12]
    return !!data;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
  }
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fcb2 	bl	8005444 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	1d38      	adds	r0, r7, #4
 8005af4:	e880 0006 	stmia.w	r0, {r1, r2}
 8005af8:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	461a      	mov	r2, r3
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b04:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fcce 	bl	80054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005b2e:	4601      	mov	r1, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff8a 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fc98 	bl	800548a <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8005b5a:	4603      	mov	r3, r0
  }
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 f936 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8005b7a:	687b      	ldr	r3, [r7, #4]
  }
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8005ba6:	b480      	push	{r7}
 8005ba8:	b085      	sub	sp, #20
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
    if (!data_)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ff76 	bl	8005ad0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8005be4:	e011      	b.n	8005c0a <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4619      	mov	r1, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f919 	bl	8005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f107 0208 	add.w	r2, r7, #8
 8005c02:	ca06      	ldmia	r2, {r1, r2}
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff70 	bl	8005aea <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
    return iterator();
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ff57 	bl	8005ad0 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
    return resources_;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
  }
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fc2f 	bl	80054fa <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8005c9c:	4603      	mov	r3, r0
  }
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fdf8 	bl	80058aa <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3338      	adds	r3, #56	@ 0x38
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fc56 	bl	8005570 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fe7d 	bl	80059d8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fe54 	bl	800599e <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3338      	adds	r3, #56	@ 0x38
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fd0d 	bl	800571a <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
    return &resources_;
 8005d10:	687b      	ldr	r3, [r7, #4]
  }
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
    return &data_;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3338      	adds	r3, #56	@ 0x38
  }
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
    return &data_;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3338      	adds	r3, #56	@ 0x38
  }
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f93e 	bl	8005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fbdd 	bl	8007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e00d      	b.n	8005d9a <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f107 0208 	add.w	r2, r7, #8
 8005d86:	ca06      	ldmia	r2, {r1, r2}
 8005d88:	f000 f867 	bl	8005e5a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8005d8c:	f107 0308 	add.w	r3, r7, #8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fbda 	bl	800754a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005d96:	4603      	mov	r3, r0
 8005d98:	bf00      	nop
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	4613      	mov	r3, r2
 8005dae:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	88fa      	ldrh	r2, [r7, #6]
 8005dba:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fbe5 	bl	8005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	e001      	b.n	8005dd8 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8005dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	80da      	strh	r2, [r3, #6]
}
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	88db      	ldrh	r3, [r3, #6]
 8005df4:	4619      	mov	r1, r3
 8005df6:	6838      	ldr	r0, [r7, #0]
 8005df8:	f000 f965 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	88da      	ldrh	r2, [r3, #6]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fbbe 	bl	8005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	80da      	strh	r2, [r3, #6]
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f941 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005e44:	4601      	mov	r1, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ffa8 	bl	8005da2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8005e5a:	b590      	push	{r4, r7, lr}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	1d38      	adds	r0, r7, #4
 8005e64:	e880 0006 	stmia.w	r0, {r1, r2}
 8005e68:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d019      	beq.n	8005eaa <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6838      	ldr	r0, [r7, #0]
 8005e7e:	f000 f922 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005e82:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8005e84:	697c      	ldr	r4, [r7, #20]
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fb6a 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4619      	mov	r1, r3
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7ff fb8c 	bl	80055b0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fb61 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8005ea8:	e00f      	b.n	8005eca <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fb58 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 fb50 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	805a      	strh	r2, [r3, #2]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}

08005ed2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	1d38      	adds	r0, r7, #4
 8005ede:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fb47 	bl	800757a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005eec:	4604      	mov	r4, r0
 8005eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fb35 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4619      	mov	r1, r3
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff fb57 	bl	80055b0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01a      	beq.n	8005f44 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	885b      	ldrh	r3, [r3, #2]
 8005f12:	4619      	mov	r1, r3
 8005f14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f16:	f000 f8d6 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005f1a:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8005f1c:	697c      	ldr	r4, [r7, #20]
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fb1e 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f26:	4603      	mov	r3, r0
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff fb40 	bl	80055b0 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8005f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fb14 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8005f42:	e010      	b.n	8005f66 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 fb0b 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8005f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fb02 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461a      	mov	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	805a      	strh	r2, [r3, #2]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005f70:	b002      	add	sp, #8
 8005f72:	4770      	bx	lr

08005f74 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8005f84:	e01b      	b.n	8005fbe <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8005f86:	8afb      	ldrh	r3, [r7, #22]
 8005f88:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f000 f899 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005f94:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f7ff fafe 	bl	8005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8005fa0:	683c      	ldr	r4, [r7, #0]
 8005fa2:	8aba      	ldrh	r2, [r7, #20]
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	6939      	ldr	r1, [r7, #16]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 faf1 	bl	8007592 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f851 	bl	8006060 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8005fbe:	8afb      	ldrh	r3, [r7, #22]
 8005fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d1de      	bne.n	8005f86 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fce:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fd6:	805a      	strh	r2, [r3, #2]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd90      	pop	{r4, r7, pc}

08005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f103 010c 	add.w	r1, r3, #12
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	f107 0308 	add.w	r3, r7, #8
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 faf0 	bl	80075de <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fb2e 	bl	8007664 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006008:	4603      	mov	r3, r0
 800600a:	f083 0301 	eor.w	r3, r3, #1
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	711a      	strb	r2, [r3, #4]
    return {};
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 facd 	bl	80075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8006020:	e01a      	b.n	8006058 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8006022:	f107 0308 	add.w	r3, r7, #8
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fb2d 	bl	8007686 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800602c:	4603      	mov	r3, r0
 800602e:	4619      	mov	r1, r3
 8006030:	2008      	movs	r0, #8
 8006032:	f7ff fa91 	bl	8005558 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 8006036:	4604      	mov	r4, r0
 8006038:	2c00      	cmp	r4, #0
 800603a:	d002      	beq.n	8006042 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff fa97 	bl	8005570 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8006042:	f107 0308 	add.w	r3, r7, #8
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fb29 	bl	800769e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	4621      	mov	r1, r4
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 fa9d 	bl	8007592 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bd90      	pop	{r4, r7, pc}

08006060 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8006060:	b5b0      	push	{r4, r5, r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fa82 	bl	800757a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8006076:	4603      	mov	r3, r0
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fa1c 	bl	80064b8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f103 040c 	add.w	r4, r3, #12
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fa5e 	bl	800754a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800608e:	4603      	mov	r3, r0
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fb10 	bl	80076b6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 8006096:	4605      	mov	r5, r0
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fa61 	bl	8007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	4629      	mov	r1, r5
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fb10 	bl	80076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80060b0:	f107 0310 	add.w	r3, r7, #16
 80060b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80060b8:	4620      	mov	r0, r4
 80060ba:	f001 fb1d 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bdb0      	pop	{r4, r5, r7, pc}

080060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	330c      	adds	r3, #12
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 fb28 	bl	8007730 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80060e0:	4603      	mov	r3, r0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 80060ea:	b590      	push	{r4, r7, lr}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f103 010c 	add.w	r1, r3, #12
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fa6b 	bl	80075de <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8006108:	f107 0308 	add.w	r3, r7, #8
 800610c:	4618      	mov	r0, r3
 800610e:	f001 faa9 	bl	8007664 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006112:	4603      	mov	r3, r0
 8006114:	f083 0301 	eor.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d006      	beq.n	800612c <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2201      	movs	r2, #1
 8006122:	711a      	strb	r2, [r3, #4]
    return {};
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fb27 	bl	8007778 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 800612a:	e011      	b.n	8006150 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	4618      	mov	r0, r3
 8006132:	f001 faa8 	bl	8007686 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8006136:	4603      	mov	r3, r0
 8006138:	461c      	mov	r4, r3
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f001 faad 	bl	800769e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	4621      	mov	r1, r4
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fb26 	bl	800779c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	bd90      	pop	{r4, r7, pc}

08006158 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8006164:	887b      	ldrh	r3, [r7, #2]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f816 	bl	800619a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800616e:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f103 040c 	add.w	r4, r3, #12
 8006176:	887a      	ldrh	r2, [r7, #2]
 8006178:	f107 030c 	add.w	r3, r7, #12
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	4618      	mov	r0, r3
 8006180:	f001 faa6 	bl	80076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	e893 0006 	ldmia.w	r3, {r1, r2}
 800618c:	4620      	mov	r0, r4
 800618e:	f001 fab3 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}

0800619a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	330c      	adds	r3, #12
 80061aa:	887a      	ldrh	r2, [r7, #2]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 fabe 	bl	8007730 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80061b4:	4603      	mov	r3, r0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	4603      	mov	r3, r0
 80061c6:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 80061c8:	2000      	movs	r0, #0
 80061ca:	f000 f819 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 80061ce:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	e00c      	b.n	80061f6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	79fa      	ldrb	r2, [r7, #7]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d103      	bne.n	80061ee <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	e003      	b.n	80061f6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3302      	adds	r3, #2
 80061f2:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 80061f4:	e7ec      	b.n	80061d0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8006210:	2304      	movs	r3, #4
 8006212:	e000      	b.n	8006216 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 8006214:	2300      	movs	r3, #0
 8006216:	4a04      	ldr	r2, [pc, #16]	@ (8006228 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8006218:	4413      	add	r3, r2
  }
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	0802a2cc 	.word	0x0802a2cc

0800622c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
    if (node_)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7ff fb73 	bl	800595c <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
    size_ = 0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
    if (!node_)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d108      	bne.n	80062a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	211f      	movs	r1, #31
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fb2d 	bl	80058fc <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
  }
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681c      	ldr	r4, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f103 0108 	add.w	r1, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 fa72 	bl	80077c4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 80062e0:	f107 0308 	add.w	r3, r7, #8
 80062e4:	4619      	mov	r1, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	f001 fa7d 	bl	80077e6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80062ec:	6178      	str	r0, [r7, #20]
    if (!node) {
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d113      	bne.n	800631c <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6859      	ldr	r1, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	461a      	mov	r2, r3
 8006302:	f7ff fb12 	bl	800592a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 8006306:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fae5 	bl	80058de <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	e005      	b.n	8006328 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	889b      	ldrh	r3, [r3, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8006328:	697b      	ldr	r3, [r7, #20]
  }
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}

08006332 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 8006332:	b590      	push	{r4, r7, lr}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d014      	beq.n	8006370 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6852      	ldr	r2, [r2, #4]
 800634e:	88d2      	ldrh	r2, [r2, #6]
 8006350:	4293      	cmp	r3, r2
 8006352:	d10d      	bne.n	8006370 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	3301      	adds	r3, #1
 8006364:	461a      	mov	r2, r3
 8006366:	f7ff fae0 	bl	800592a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800636a:	4602      	mov	r2, r0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]
    if (node_)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 8006378:	78fc      	ldrb	r4, [r7, #3]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	1c58      	adds	r0, r3, #1
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	6088      	str	r0, [r1, #8]
 8006388:	4413      	add	r3, r2
 800638a:	4622      	mov	r2, r4
 800638c:	721a      	strb	r2, [r3, #8]
  }
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bd90      	pop	{r4, r7, pc}

08006396 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf14      	ite	ne
 80063a6:	2301      	movne	r3, #1
 80063a8:	2300      	moveq	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
  }
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4413      	add	r3, r2
 80063cc:	2200      	movs	r2, #0
 80063ce:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f103 0108 	add.w	r1, r3, #8
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	2300      	movs	r3, #0
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fa11 	bl	8007806 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	463b      	mov	r3, r7
 80063f4:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80063f8:	463b      	mov	r3, r7
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f87c 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8006400:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff f91c 	bl	800564c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fffb 	bl	8005414 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 800641e:	4603      	mov	r3, r0
 8006420:	e000      	b.n	8006424 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8006422:	2300      	movs	r3, #0
  }
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	1d3b      	adds	r3, r7, #4
 8006436:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f84f 	bl	80074e0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8006442:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f9ef 	bl	800782a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800644c:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 8006454:	6978      	ldr	r0, [r7, #20]
 8006456:	f7ff f8ba 	bl	80055ce <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800645a:	4603      	mov	r3, r0
 800645c:	e000      	b.n	8006460 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 800645e:	2300      	movs	r3, #0
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff fb9e 	bl	8005ba6 <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f82c 	bl	80074e0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8006488:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f9cc 	bl	800782a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8006492:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 800649a:	6978      	ldr	r0, [r7, #20]
 800649c:	f7ff f8b9 	bl	8005612 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80064a0:	4603      	mov	r3, r0
 80064a2:	e000      	b.n	80064a6 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 80064a4:	2300      	movs	r3, #0
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fbce 	bl	8005c4c <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff f823 	bl	8005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	4619      	mov	r1, r3
 80064dc:	6838      	ldr	r0, [r7, #0]
 80064de:	f7ff fa4c 	bl	800597a <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	791b      	ldrb	r3, [r3, #4]
 80064e6:	2110      	movs	r1, #16
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff f813 	bl	8005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6838      	ldr	r0, [r7, #0]
 80064fc:	f7ff fe2c 	bl	8006158 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff f875 	bl	80055f0 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 8006506:	60f8      	str	r0, [r7, #12]
  if (collection)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fd2f 	bl	8005f74 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	711a      	strb	r2, [r3, #4]
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	791b      	ldrb	r3, [r3, #4]
 8006532:	2110      	movs	r1, #16
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe ffed 	bl	8005514 <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 800653a:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	4619      	mov	r1, r3
 8006546:	6838      	ldr	r0, [r7, #0]
 8006548:	f7ff fe27 	bl	800619a <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 800654c:	4603      	mov	r3, r0
             : nullptr;
 800654e:	e000      	b.n	8006552 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
    return code_;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	781b      	ldrb	r3, [r3, #0]
  }
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	24000004 	.word	0x24000004

080065b8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    return true;
 80065c0:	2301      	movs	r3, #1
  }
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
    return true;
 80065d6:	2301      	movs	r3, #1
  }
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
    return true;
 80065ec:	2301      	movs	r3, #1
  }
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
    return true;
 8006602:	2301      	movs	r3, #1
  }
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	220a      	movs	r2, #10
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	3b01      	subs	r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	f107 030c 	add.w	r3, r7, #12
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ffe2 	bl	800662c <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8006668:	7b3b      	ldrb	r3, [r7, #12]
  }
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
  }
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800669c:	793b      	ldrb	r3, [r7, #4]
 800669e:	737b      	strb	r3, [r7, #13]
 80066a0:	2300      	movs	r3, #0
 80066a2:	7b3a      	ldrb	r2, [r7, #12]
 80066a4:	f362 0307 	bfi	r3, r2, #0, #8
 80066a8:	7b7a      	ldrb	r2, [r7, #13]
 80066aa:	f362 230f 	bfi	r3, r2, #8, #8
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fb03 	bl	8005cce <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80066e0:	d305      	bcc.n	80066ee <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80066e8:	d201      	bcs.n	80066ee <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800670c:	d305      	bcc.n	800671a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8006714:	d201      	bcs.n	800671a <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ffb9 	bl	80066d0 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8006764:	887b      	ldrh	r3, [r7, #2]
 8006766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	801a      	strh	r2, [r3, #0]
      return false;
 8006770:	2300      	movs	r3, #0
 8006772:	e018      	b.n	80067a6 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff ffc0 	bl	80066fc <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	029a      	lsls	r2, r3, #10
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800678e:	4313      	orrs	r3, r2
 8006790:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006794:	461a      	mov	r2, r3
      codepoint_ =
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]
      return true;
 800679a:	2301      	movs	r3, #1
 800679c:	e003      	b.n	80067a6 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800679e:	887a      	ldrh	r2, [r7, #2]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
    return true;
 80067a4:	2301      	movs	r3, #1
  }
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
  }
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80067d4:	d904      	bls.n	80067e0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b39      	cmp	r3, #57	@ 0x39
 80067da:	d801      	bhi.n	80067e0 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	ed87 0a00 	vstr	s0, [r7]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	e9c7 2300 	strd	r2, r3, [r7]
 8006830:	68f9      	ldr	r1, [r7, #12]
 8006832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006836:	e9c1 2300 	strd	r2, r3, [r1]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	e9c7 2300 	strd	r2, r3, [r7]
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685a:	e9c1 2300 	strd	r2, r3, [r1]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	ed87 0b00 	vstr	d0, [r7]
 8006878:	68f9      	ldr	r1, [r7, #12]
 800687a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687e:	e9c1 2300 	strd	r2, r3, [r1]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3308      	adds	r3, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff ffa3 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	ed87 0a00 	vstr	s0, [r7]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3308      	adds	r3, #8
 80068c8:	ed97 0a00 	vldr	s0, [r7]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff ff99 	bl	8006804 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	e9c7 2300 	strd	r2, r3, [r7]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f103 0108 	add.w	r1, r3, #8
 80068f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f8:	4608      	mov	r0, r1
 80068fa:	f7ff ff93 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	e9c7 2300 	strd	r2, r3, [r7]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2203      	movs	r2, #3
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f103 0108 	add.w	r1, r3, #8
 8006920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006924:	4608      	mov	r0, r1
 8006926:	f7ff ff8f 	bl	8006848 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	ed87 0b00 	vstr	d0, [r7]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2204      	movs	r2, #4
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3308      	adds	r3, #8
 800694a:	ed97 0b00 	vldr	d0, [r7]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff ff8c 	bl	800686c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
    return type_;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	781b      	ldrb	r3, [r3, #0]
  }
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80069a0:	4610      	mov	r0, r2
 80069a2:	4619      	mov	r1, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	ee07 3a90 	vmov	s15, r3
  }
 80069be:	eeb0 0a67 	vmov.f32	s0, s15
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80069da:	ec43 2b17 	vmov	d7, r2, r3
  }
 80069de:	eeb0 0b47 	vmov.f64	d0, d7
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 80069ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f0:	b0a6      	sub	sp, #152	@ 0x98
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80069f6:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 80069fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b2b      	cmp	r3, #43	@ 0x2b
 8006a04:	d008      	beq.n	8006a18 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8006a06:	2b2d      	cmp	r3, #45	@ 0x2d
 8006a08:	d10a      	bne.n	8006a20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8006a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a12:	3301      	adds	r3, #1
 8006a14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a16:	e003      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8006a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a1e:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8006a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7ff fece 	bl	80067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f083 0301 	eor.w	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a3c:	d001      	beq.n	8006a42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8006a48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a4a:	f7ff ff21 	bl	8006890 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006a4e:	e1f5      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8006a6e:	e054      	b.n	8006b1a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8006a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	3b30      	subs	r3, #48	@ 0x30
 8006a76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8006a7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006a7e:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8006a82:	49ae      	ldr	r1, [pc, #696]	@ (8006d3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8006a84:	418b      	sbcs	r3, r1
 8006a86:	d251      	bcs.n	8006b2c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8006a88:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f04f 0000 	mov.w	r0, #0
 8006a94:	f04f 0100 	mov.w	r1, #0
 8006a98:	0099      	lsls	r1, r3, #2
 8006a9a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006a9e:	0090      	lsls	r0, r2, #2
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	eb12 0804 	adds.w	r8, r2, r4
 8006aa8:	eb43 0905 	adc.w	r9, r3, r5
 8006aac:	eb18 0308 	adds.w	r3, r8, r8
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	eb49 0309 	adc.w	r3, r9, r9
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8006abc:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8006ac0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ac8:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ace:	460b      	mov	r3, r1
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ada:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ade:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4291      	cmp	r1, r2
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	eb71 0303 	sbcs.w	r3, r1, r3
 8006aec:	d320      	bcc.n	8006b30 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8006aee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006af2:	2200      	movs	r2, #0
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af6:	637a      	str	r2, [r7, #52]	@ 0x34
 8006af8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006afc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b00:	4621      	mov	r1, r4
 8006b02:	1851      	adds	r1, r2, r1
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	4629      	mov	r1, r5
 8006b08:	414b      	adcs	r3, r1
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006b10:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8006b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b16:	3301      	adds	r3, #1
 8006b18:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff fe51 	bl	80067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1a2      	bne.n	8006a70 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8006b2a:	e002      	b.n	8006b32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b30:	bf00      	nop
  }

  if (*s == '\0') {
 8006b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d136      	bne.n	8006ba8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8006b3a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d019      	beq.n	8006b76 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b4a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8006b4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b52:	2a01      	cmp	r2, #1
 8006b54:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8006b58:	d226      	bcs.n	8006ba8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8006b5a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4250      	negs	r0, r2
 8006b62:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006b64:	eb61 0303 	sbc.w	r3, r1, r3
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b6e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b70:	f7ff feb4 	bl	80068dc <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8006b74:	e162      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8006b76:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b7c:	f7ff fec4 	bl	8006908 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8006b80:	e15c      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8006b82:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006b86:	f04f 020a 	mov.w	r2, #10
 8006b8a:	f04f 0300 	mov.w	r3, #0
 8006b8e:	f7f9 fed9 	bl	8000944 <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 8006b9a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8006ba8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb0:	d2e7      	bcs.n	8006b82 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8006bb2:	e009      	b.n	8006bc8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8006bb4:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8006bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fdfa 	bl	80067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1ed      	bne.n	8006bb4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8006bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bde:	d14c      	bne.n	8006c7a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8006be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be2:	3301      	adds	r3, #1
 8006be4:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006be6:	e040      	b.n	8006c6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8006be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bec:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8006bf0:	4953      	ldr	r1, [pc, #332]	@ (8006d40 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8006bf2:	418b      	sbcs	r3, r1
 8006bf4:	d236      	bcs.n	8006c64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8006bf6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	f04f 0000 	mov.w	r0, #0
 8006c02:	f04f 0100 	mov.w	r1, #0
 8006c06:	0099      	lsls	r1, r3, #2
 8006c08:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006c0c:	0090      	lsls	r0, r2, #2
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	eb12 0a04 	adds.w	sl, r2, r4
 8006c16:	eb43 0b05 	adc.w	fp, r3, r5
 8006c1a:	eb1a 030a 	adds.w	r3, sl, sl
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	eb4b 030b 	adc.w	r3, fp, fp
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006c30:	7809      	ldrb	r1, [r1, #0]
 8006c32:	3930      	subs	r1, #48	@ 0x30
 8006c34:	b2c9      	uxtb	r1, r1
 8006c36:	b2c9      	uxtb	r1, r1
 8006c38:	2000      	movs	r0, #0
 8006c3a:	6239      	str	r1, [r7, #32]
 8006c3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c42:	4621      	mov	r1, r4
 8006c44:	1851      	adds	r1, r2, r1
 8006c46:	6039      	str	r1, [r7, #0]
 8006c48:	4629      	mov	r1, r5
 8006c4a:	414b      	adcs	r3, r1
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006c52:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8006c56:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8006c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c66:	3301      	adds	r3, #1
 8006c68:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fda9 	bl	80067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1b6      	bne.n	8006be8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8006c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b65      	cmp	r3, #101	@ 0x65
 8006c86:	d003      	beq.n	8006c90 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8006c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b45      	cmp	r3, #69	@ 0x45
 8006c8e:	d171      	bne.n	8006d74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8006c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c92:	3301      	adds	r3, #1
 8006c94:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8006c96:	2300      	movs	r3, #0
 8006c98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ca2:	d106      	bne.n	8006cb2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8006caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cac:	3301      	adds	r3, #1
 8006cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb0:	e04f      	b.n	8006d52 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8006cb8:	d14b      	bne.n	8006d52 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8006cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8006cc0:	e047      	b.n	8006d52 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8006cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	3b30      	subs	r3, #48	@ 0x30
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8006cdc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8006ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8006cea:	dd2f      	ble.n	8006d4c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8006cec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8006cf4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8006cfc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006d44 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8006d00:	e001      	b.n	8006d06 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8006d02:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006d48 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 8006d06:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d0c:	f7ff fdd1 	bl	80068b2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8006d10:	e094      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8006d12:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8006d1a:	f000 fda7 	bl	800786c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d1e:	eeb0 7b40 	vmov.f64	d7, d0
 8006d22:	eeb1 7b47 	vneg.f64	d7, d7
 8006d26:	e003      	b.n	8006d30 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8006d28:	f000 fda0 	bl	800786c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d2c:	eeb0 7b40 	vmov.f64	d7, d0
 8006d30:	eeb0 0b47 	vmov.f64	d0, d7
 8006d34:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d36:	f7ff fdfd 	bl	8006934 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006d3a:	e07f      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8006d3c:	19999999 	.word	0x19999999
 8006d40:	00019999 	.word	0x00019999
 8006d44:	80000000 	.word	0x80000000
 8006d48:	00000000 	.word	0x00000000
      }
      s++;
 8006d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d4e:	3301      	adds	r3, #1
 8006d50:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fd35 	bl	80067c6 <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1af      	bne.n	8006cc2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8006d62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8006d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d6e:	425b      	negs	r3, r3
 8006d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8006d74:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006d78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8006d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8006d8a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d8c:	f7ff fd80 	bl	8006890 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006d90:	e054      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8006d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d96:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8006d9a:	db0a      	blt.n	8006db2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006da0:	2b26      	cmp	r3, #38	@ 0x26
 8006da2:	dc06      	bgt.n	8006db2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8006da4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006da8:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8006dac:	f173 0300 	sbcs.w	r3, r3, #0
 8006db0:	d301      	bcc.n	8006db6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8006db6:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8006dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01e      	beq.n	8006e02 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8006dc4:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006dc8:	f7f9 fc78 	bl	80006bc <__aeabi_ul2d>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006dd4:	ec43 2b10 	vmov	d0, r2, r3
 8006dd8:	f000 fd56 	bl	8007888 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8006ddc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8006de0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8006de8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006dec:	eeb1 7b47 	vneg.f64	d7, d7
 8006df0:	e001      	b.n	8006df6 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8006df2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006df6:	eeb0 0b47 	vmov.f64	d0, d7
 8006dfa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006dfc:	f7ff fd9a 	bl	8006934 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006e00:	e01c      	b.n	8006e3c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8006e02:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006e06:	f7f9 fd57 	bl	80008b8 <__aeabi_ul2f>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006e10:	ee00 3a10 	vmov	s0, r3
 8006e14:	f000 fd79 	bl	800790a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8006e18:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8006e1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8006e24:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e28:	eef1 7a67 	vneg.f32	s15, s15
 8006e2c:	e001      	b.n	8006e32 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8006e2e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e32:	eeb0 0a67 	vmov.f32	s0, s15
 8006e36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e38:	f7ff fd3b 	bl	80068b2 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8006e3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e3e:	3798      	adds	r7, #152	@ 0x98
 8006e40:	46bd      	mov	sp, r7
 8006e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e46:	bf00      	nop

08006e48 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	601a      	str	r2, [r3, #0]
	configError(false)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	1d1c      	adds	r4, r3, #4
 8006e94:	f107 030c 	add.w	r3, r7, #12
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f021 fc02 	bl	80286a2 <_ZNSaIcEC1Ev>
 8006e9e:	f107 030c 	add.w	r3, r7, #12
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4914      	ldr	r1, [pc, #80]	@ (8006ef8 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 fd70 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f021 fbf7 	bl	80286a4 <_ZNSaIcED1Ev>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a10      	ldr	r2, [pc, #64]	@ (8006efc <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8006eba:	61da      	str	r2, [r3, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f103 0420 	add.w	r4, r3, #32
 8006ec2:	f7fe f953 	bl	800516c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7fe feeb 	bl	8005ca6 <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3360      	adds	r3, #96	@ 0x60
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fea8 	bl	8005c2a <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f80c 	bl	8006f00 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f82b 	bl	8006f44 <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd90      	pop	{r4, r7, pc}
 8006ef8:	0802a324 	.word	0x0802a324
 8006efc:	0802a328 	.word	0x0802a328

08006f00 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f021 fd6d 	bl	80289ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3320      	adds	r3, #32
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fee5 	bl	8005ce6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f903 	bl	8007128 <_ZN17JsonConfigHandler16readFileContentsEv>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f083 0301 	eor.w	r3, r3, #1
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e003      	b.n	8006f3a <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f9c8 	bl	80072c8 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8006f38:	2301      	movs	r3, #1
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b0a1      	sub	sp, #132	@ 0x84
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 808e 	bne.w	8007074 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8006f58:	4848      	ldr	r0, [pc, #288]	@ (800707c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8006f5a:	f022 faab 	bl	80294b4 <puts>

    JsonArray Threads = doc["Threads"];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f103 0120 	add.w	r1, r3, #32
 8006f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f68:	4a45      	ldr	r2, [pc, #276]	@ (8007080 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fd38 	bl	80079e0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fd49 	bl	8007a12 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	f107 021c 	add.w	r2, r7, #28
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fe1e 	bl	8005bcc <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006f90:	e05c      	b.n	800704c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8006f92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006f96:	f107 0210 	add.w	r2, r7, #16
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fdbd 	bl	8005b1c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8006fa2:	68fc      	ldr	r4, [r7, #12]
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fd3f 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8006fb2:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8006fb6:	463a      	mov	r2, r7
 8006fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fbc:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006fc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fca:	4a2e      	ldr	r2, [pc, #184]	@ (8007084 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fd3e 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006fd2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fd5e 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8006fdc:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006fe8:	4a27      	ldr	r2, [pc, #156]	@ (8007088 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fd60 	bl	8007ab0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006ff0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fd80 	bl	8007afa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8006ffa:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8006ffc:	4923      	ldr	r1, [pc, #140]	@ (800708c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8006ffe:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007000:	f7f9 f96e 	bl	80002e0 <strcmp>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 800700a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800700c:	4820      	ldr	r0, [pc, #128]	@ (8007090 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 800700e:	f022 f9e1 	bl	80293d4 <iprintf>
            remoraInstance->setBaseFreq(freq);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff15 	bl	8006e48 <_ZN6Remora11setBaseFreqEm>
 800701e:	e010      	b.n	8007042 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8007020:	491c      	ldr	r1, [pc, #112]	@ (8007094 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8007022:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007024:	f7f9 f95c 	bl	80002e0 <strcmp>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 800702e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007030:	4819      	ldr	r0, [pc, #100]	@ (8007098 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 8007032:	f022 f9cf 	bl	80293d4 <iprintf>
            remoraInstance->setServoFreq(freq);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff11 	bl	8006e64 <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fd8c 	bl	8005b64 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 800704c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007050:	f107 021c 	add.w	r2, r7, #28
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fddb 	bl	8005c12 <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 800705c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007060:	f107 0310 	add.w	r3, r7, #16
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fd6c 	bl	8005b44 <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d18f      	bne.n	8006f92 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8007072:	e000      	b.n	8007076 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8007074:	bf00      	nop
        }
    }
}
 8007076:	3784      	adds	r7, #132	@ 0x84
 8007078:	46bd      	mov	sp, r7
 800707a:	bd90      	pop	{r4, r7, pc}
 800707c:	0802a334 	.word	0x0802a334
 8007080:	0802a354 	.word	0x0802a354
 8007084:	0802a35c 	.word	0x0802a35c
 8007088:	0802a364 	.word	0x0802a364
 800708c:	0802a370 	.word	0x0802a370
 8007090:	0802a378 	.word	0x0802a378
 8007094:	0802a3a0 	.word	0x0802a3a0
 8007098:	0802a3a8 	.word	0x0802a3a8

0800709c <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 800709c:	b590      	push	{r4, r7, lr}
 800709e:	b08f      	sub	sp, #60	@ 0x3c
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f103 0120 	add.w	r1, r3, #32
 80070ac:	f107 0308 	add.w	r3, r7, #8
 80070b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007124 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fc94 	bl	80079e0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80070b8:	f107 0308 	add.w	r3, r7, #8
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 80070c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070c4:	f001 fc9a 	bl	80089fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 80070c8:	4604      	mov	r4, r0
 80070ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070cc:	f001 fca6 	bl	8008a1c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 80070d0:	4602      	mov	r2, r0
 80070d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070d6:	4621      	mov	r1, r4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fcb9 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 80070de:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 80070e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070e8:	f7fe fcdd 	bl	8005aa6 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 80070ec:	4603      	mov	r3, r0
 80070ee:	bf00      	nop
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d010      	beq.n	8007116 <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f103 0120 	add.w	r1, r3, #32
 80070fa:	f107 0318 	add.w	r3, r7, #24
 80070fe:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fc6d 	bl	80079e0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f107 0218 	add.w	r2, r7, #24
 800710c:	4611      	mov	r1, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fcff 	bl	8007b12 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8007114:	e002      	b.n	800711c <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fe fd34 	bl	8005b84 <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	373c      	adds	r7, #60	@ 0x3c
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	0802a3d0 	.word	0x0802a3d0

08007128 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8007128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800712c:	b08f      	sub	sp, #60	@ 0x3c
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8007132:	485a      	ldr	r0, [pc, #360]	@ (800729c <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 8007134:	f022 f9be 	bl	80294b4 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8007138:	4859      	ldr	r0, [pc, #356]	@ (80072a0 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 800713a:	f022 f9bb 	bl	80294b4 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800713e:	2200      	movs	r2, #0
 8007140:	4958      	ldr	r1, [pc, #352]	@ (80072a4 <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 8007142:	4859      	ldr	r0, [pc, #356]	@ (80072a8 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 8007144:	f020 fe48 	bl	8027dd8 <f_mount>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8007158:	4854      	ldr	r0, [pc, #336]	@ (80072ac <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 800715a:	f022 f93b 	bl	80293d4 <iprintf>
    	Error_Handler();
 800715e:	f003 fc4b 	bl	800a9f8 <Error_Handler>
 8007162:	e094      	b.n	800728e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	2201      	movs	r2, #1
 800716a:	4619      	mov	r1, r3
 800716c:	4850      	ldr	r0, [pc, #320]	@ (80072b0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 800716e:	f020 fe79 	bl	8027e64 <f_open>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8007182:	484c      	ldr	r0, [pc, #304]	@ (80072b4 <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8007184:	f022 f996 	bl	80294b4 <puts>
			Error_Handler();
 8007188:	f003 fc36 	bl	800a9f8 <Error_Handler>
 800718c:	e07f      	b.n	800728e <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 800718e:	466b      	mov	r3, sp
 8007190:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8007192:	4b47      	ldr	r3, [pc, #284]	@ (80072b0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8007198:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800719a:	4847      	ldr	r0, [pc, #284]	@ (80072b8 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 800719c:	f022 f91a 	bl	80293d4 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 80071a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071a2:	1e4b      	subs	r3, r1, #1
 80071a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071a6:	460a      	mov	r2, r1
 80071a8:	2300      	movs	r3, #0
 80071aa:	4690      	mov	r8, r2
 80071ac:	4699      	mov	r9, r3
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071c2:	460a      	mov	r2, r1
 80071c4:	2300      	movs	r3, #0
 80071c6:	4614      	mov	r4, r2
 80071c8:	461d      	mov	r5, r3
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	00eb      	lsls	r3, r5, #3
 80071d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071d8:	00e2      	lsls	r2, r4, #3
 80071da:	460b      	mov	r3, r1
 80071dc:	3318      	adds	r3, #24
 80071de:	3307      	adds	r3, #7
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	ebad 0d03 	sub.w	sp, sp, r3
 80071e8:	466b      	mov	r3, sp
 80071ea:	331f      	adds	r3, #31
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	015b      	lsls	r3, r3, #5
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 80071f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071fa:	482d      	ldr	r0, [pc, #180]	@ (80072b0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80071fc:	f020 ffec 	bl	80281d8 <f_read>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	bf14      	ite	ne
 8007206:	2301      	movne	r3, #1
 8007208:	2300      	moveq	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8007210:	482a      	ldr	r0, [pc, #168]	@ (80072bc <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 8007212:	f022 f94f 	bl	80294b4 <puts>
 8007216:	e036      	b.n	8007286 <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8007218:	4829      	ldr	r0, [pc, #164]	@ (80072c0 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 800721a:	f022 f94b 	bl	80294b4 <puts>
				jsonContent.reserve(length + 1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	1d1a      	adds	r2, r3, #4
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	3301      	adds	r3, #1
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f021 fbc4 	bl	80289b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	e01a      	b.n	800726a <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	1d19      	adds	r1, r3, #4
 8007238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723c:	4413      	add	r3, r2
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	f107 0310 	add.w	r3, r7, #16
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fc88 	bl	8007b5a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3304      	adds	r3, #4
 800724e:	f107 0210 	add.w	r2, r7, #16
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f021 fb14 	bl	8028882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800725a:	f107 0310 	add.w	r3, r7, #16
 800725e:	4618      	mov	r0, r3
 8007260:	f021 fb09 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8007264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007266:	3301      	adds	r3, #1
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
 800726a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	429a      	cmp	r2, r3
 8007270:	dbe0      	blt.n	8007234 <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	4618      	mov	r0, r3
 8007278:	f021 fce0 	bl	8028c3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800727c:	4603      	mov	r3, r0
 800727e:	4619      	mov	r1, r3
 8007280:	4810      	ldr	r0, [pc, #64]	@ (80072c4 <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 8007282:	f022 f8a7 	bl	80293d4 <iprintf>
			f_close(&SDFile);
 8007286:	480a      	ldr	r0, [pc, #40]	@ (80072b0 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007288:	f021 f963 	bl	8028552 <f_close>
 800728c:	46b5      	mov	sp, r6
    }

	return true;
 800728e:	2301      	movs	r3, #1
}
 8007290:	4618      	mov	r0, r3
 8007292:	373c      	adds	r7, #60	@ 0x3c
 8007294:	46bd      	mov	sp, r7
 8007296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800729a:	bf00      	nop
 800729c:	0802a3d8 	.word	0x0802a3d8
 80072a0:	0802a3fc 	.word	0x0802a3fc
 80072a4:	24000420 	.word	0x24000420
 80072a8:	24000424 	.word	0x24000424
 80072ac:	0802a41c 	.word	0x0802a41c
 80072b0:	24000654 	.word	0x24000654
 80072b4:	0802a438 	.word	0x0802a438
 80072b8:	0802a45c 	.word	0x0802a45c
 80072bc:	0802a480 	.word	0x0802a480
 80072c0:	0802a4a0 	.word	0x0802a4a0
 80072c4:	0802a4c0 	.word	0x0802a4c0

080072c8 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 80072c8:	b590      	push	{r4, r7, lr}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 80072d0:	482a      	ldr	r0, [pc, #168]	@ (800737c <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 80072d2:	f022 f8ef 	bl	80294b4 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3320      	adds	r3, #32
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fd03 	bl	8005ce6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f103 0420 	add.w	r4, r3, #32
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4618      	mov	r0, r3
 80072ec:	f021 fca6 	bl	8028c3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80072f0:	4603      	mov	r3, r0
 80072f2:	4619      	mov	r1, r3
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fc46 	bl	8007b86 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 80072fa:	4603      	mov	r3, r0
 80072fc:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 80072fe:	4820      	ldr	r0, [pc, #128]	@ (8007380 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8007300:	f022 f868 	bl	80293d4 <iprintf>

    switch (error.code())
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff f936 	bl	800657a <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 800730e:	4603      	mov	r3, r0
 8007310:	2b04      	cmp	r3, #4
 8007312:	d012      	beq.n	800733a <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 8007314:	2b04      	cmp	r3, #4
 8007316:	dc18      	bgt.n	800734a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 800731c:	2b03      	cmp	r3, #3
 800731e:	d004      	beq.n	800732a <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8007320:	e013      	b.n	800734a <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8007322:	4818      	ldr	r0, [pc, #96]	@ (8007384 <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 8007324:	f022 f8c6 	bl	80294b4 <puts>
            break;
 8007328:	e023      	b.n	8007372 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 800732a:	4817      	ldr	r0, [pc, #92]	@ (8007388 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 800732c:	f022 f8c2 	bl	80294b4 <puts>
            configError = true;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007338:	e01b      	b.n	8007372 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 800733a:	4814      	ldr	r0, [pc, #80]	@ (800738c <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 800733c:	f022 f8ba 	bl	80294b4 <puts>
            configError = true;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007348:	e013      	b.n	8007372 <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 800734a:	4811      	ldr	r0, [pc, #68]	@ (8007390 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 800734c:	f022 f842 	bl	80293d4 <iprintf>
            printf(error.c_str());
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff f91d 	bl	8006594 <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 800735a:	4603      	mov	r3, r0
 800735c:	4618      	mov	r0, r3
 800735e:	f022 f839 	bl	80293d4 <iprintf>
            printf("\n");
 8007362:	200a      	movs	r0, #10
 8007364:	f022 f848 	bl	80293f8 <putchar>
            configError = true;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007370:	bf00      	nop
    }

    return true;
 8007372:	2301      	movs	r3, #1
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}
 800737c:	0802a4c8 	.word	0x0802a4c8
 8007380:	0802a4ec 	.word	0x0802a4ec
 8007384:	0802a508 	.word	0x0802a508
 8007388:	0802a524 	.word	0x0802a524
 800738c:	0802a534 	.word	0x0802a534
 8007390:	0802a548 	.word	0x0802a548

08007394 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80073a0:	e002      	b.n	80073a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	72fa      	strb	r2, [r7, #11]
 80073b2:	f107 020b 	add.w	r2, r7, #11
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fbf7 	bl	8007bac <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80073be:	4603      	mov	r3, r0
 80073c0:	f083 0301 	eor.w	r3, r3, #1
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1eb      	bne.n	80073a2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80073ca:	68fb      	ldr	r3, [r7, #12]
    }
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4611      	mov	r1, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	460b      	mov	r3, r1
 80073e4:	80fb      	strh	r3, [r7, #6]
 80073e6:	4613      	mov	r3, r2
 80073e8:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	797b      	ldrb	r3, [r7, #5]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	f7fd ff3b 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	81fb      	strh	r3, [r7, #14]
 800740e:	e00b      	b.n	8007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	89fb      	ldrh	r3, [r7, #14]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fc40 	bl	8007ca2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	3301      	adds	r3, #1
 8007426:	81fb      	strh	r3, [r7, #14]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800742c:	89fa      	ldrh	r2, [r7, #14]
 800742e:	429a      	cmp	r2, r3
 8007430:	d3ee      	bcc.n	8007410 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800743e:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d00e      	beq.n	8007468 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3304      	adds	r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6a12      	ldr	r2, [r2, #32]
 8007456:	4611      	mov	r1, r2
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	4798      	blx	r3
      pools_ = preallocatedPools_;
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2204      	movs	r2, #4
 8007466:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800748a:	4619      	mov	r1, r3
 800748c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8007490:	440b      	add	r3, r1
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	4413      	add	r3, r2
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fc2e 	bl	8007cfa <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d017      	beq.n	80074d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d011      	beq.n	80074d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6a11      	ldr	r1, [r2, #32]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80074c4:	00d2      	lsls	r2, r2, #3
 80074c6:	6838      	ldr	r0, [r7, #0]
 80074c8:	4798      	blx	r3
 80074ca:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fad0 	bl	8005a8e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80074ee:	4603      	mov	r3, r0
  }
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7fe fa8d 	bl	8005a20 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 8007506:	4603      	mov	r3, r0
  }
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fe fa8d 	bl	8005a38 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 800751e:	4603      	mov	r3, r0
  }
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf14      	ite	ne
 8007538:	2301      	movne	r3, #1
 800753a:	2300      	moveq	r3, #0
 800753c:	b2db      	uxtb	r3, r3
  }
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
  }
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
    return id_;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	889b      	ldrh	r3, [r3, #4]
  }
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
  }
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8007592:	b480      	push	{r7}
 8007594:	b085      	sub	sp, #20
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	4613      	mov	r3, r2
 800759e:	80fb      	strh	r3, [r7, #6]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	88fa      	ldrh	r2, [r7, #6]
 80075aa:	809a      	strh	r2, [r3, #4]
  }
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075ce:	809a      	strh	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 80075de:	b580      	push	{r7, lr}
 80075e0:	b088      	sub	sp, #32
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d005      	beq.n	8007602 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fbda 	bl	8007db4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8007600:	e02c      	b.n	800765c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fbec 	bl	8007dee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8007616:	f107 0314 	add.w	r3, r7, #20
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f822 	bl	8007664 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	461a      	mov	r2, r3
 800762a:	f107 0314 	add.w	r3, r7, #20
 800762e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007632:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8007636:	e011      	b.n	800765c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f000 fc14 	bl	8007e68 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8007640:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d103      	bne.n	8007650 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fc49 	bl	8007ee0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800764e:	e005      	b.n	800765c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fbca 	bl	8007dee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 800765a:	bf00      	nop
  }
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
  }
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
    return ptr_;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
  }
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
    return id_;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	889b      	ldrh	r3, [r3, #4]
  }
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80076c2:	68fb      	ldr	r3, [r7, #12]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	809a      	strh	r2, [r3, #4]
  }
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 80076f8:	b590      	push	{r4, r7, lr}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fbf9 	bl	8007f04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8007712:	4603      	mov	r3, r0
 8007714:	4622      	mov	r2, r4
 8007716:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff ffbf 	bl	800769e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	bd90      	pop	{r4, r7, pc}

08007730 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007742:	4293      	cmp	r3, r2
 8007744:	d101      	bne.n	800774a <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8007746:	2300      	movs	r3, #0
 8007748:	e012      	b.n	8007770 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 800774a:	887b      	ldrh	r3, [r7, #2]
 800774c:	09db      	lsrs	r3, r3, #7
 800774e:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007756:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	89fb      	ldrh	r3, [r7, #14]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	89ba      	ldrh	r2, [r7, #12]
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fbd8 	bl	8007f1c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800776c:	4603      	mov	r3, r0
 800776e:	bf00      	nop
  }
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800778c:	809a      	strh	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	809a      	strh	r2, [r3, #4]
  }
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fbe6 	bl	8007fa8 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 80077dc:	bf00      	nop
}
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3308      	adds	r3, #8
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fbe6 	bl	8007fc8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 80077fc:	4603      	mov	r3, r0
  }
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	f7fd fd26 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fe f91f 	bl	8005a76 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007838:	4603      	mov	r3, r0
  }
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800784c:	6838      	ldr	r0, [r7, #0]
 800784e:	f000 fbf6 	bl	800803e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8007852:	4603      	mov	r3, r0
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fdea 	bl	800542e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007860:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8007870:	f04f 0000 	mov.w	r0, #0
 8007874:	4903      	ldr	r1, [pc, #12]	@ (8007884 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8007876:	f000 fc0d 	bl	8008094 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 800787a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800787e:	eeb0 0b47 	vmov.f64	d0, d7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	7ff00000 	.word	0x7ff00000

08007888 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007892:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	dd04      	ble.n	80078a4 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 800789a:	f000 fb51 	bl	8007f40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800789e:	4603      	mov	r3, r0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	e003      	b.n	80078ac <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 80078a4:	f000 fb70 	bl	8007f88 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80078a8:	4603      	mov	r3, r0
 80078aa:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dc02      	bgt.n	80078b8 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	425b      	negs	r3, r3
 80078b6:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
 80078bc:	e019      	b.n	80078f2 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80078c8:	7dfa      	ldrb	r2, [r7, #23]
 80078ca:	f107 0310 	add.w	r3, r7, #16
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fb45 	bl	8007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80078d6:	eeb0 6b40 	vmov.f64	d6, d0
 80078da:	ed97 7b02 	vldr	d7, [r7, #8]
 80078de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078e2:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	105b      	asrs	r3, r3, #1
 80078ea:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	3301      	adds	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e2      	bne.n	80078be <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 80078f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8007900:	eeb0 0b47 	vmov.f64	d0, d7
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	ed87 0a01 	vstr	s0, [r7, #4]
 8007914:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd04      	ble.n	8007926 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 800791c:	f000 fbca 	bl	80080b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8007920:	4603      	mov	r3, r0
 8007922:	60bb      	str	r3, [r7, #8]
 8007924:	e003      	b.n	800792e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8007926:	f000 fbd5 	bl	80080d4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 800792a:	4603      	mov	r3, r0
 800792c:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc02      	bgt.n	800793a <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	425b      	negs	r3, r3
 8007938:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e019      	b.n	8007974 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 800794a:	7bfa      	ldrb	r2, [r7, #15]
 800794c:	f107 0308 	add.w	r3, r7, #8
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fbce 	bl	80080f4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8007958:	eeb0 7a40 	vmov.f32	s14, s0
 800795c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007964:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	105b      	asrs	r3, r3, #1
 800796c:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	3301      	adds	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e2      	bne.n	8007940 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	ee07 3a90 	vmov	s15, r3
}
 8007980:	eeb0 0a67 	vmov.f32	s0, s15
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800798c:	b5b0      	push	{r4, r5, r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8007998:	68fc      	ldr	r4, [r7, #12]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f020 feaf 	bl	80286fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4619      	mov	r1, r3
 80079a6:	4620      	mov	r0, r4
 80079a8:	f021 f958 	bl	8028c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80079b2:	480a      	ldr	r0, [pc, #40]	@ (80079dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80079b4:	f020 fe7d 	bl	80286b2 <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7fd fb97 	bl	80050ec <_ZNSt11char_traitsIcE6lengthEPKc>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4413      	add	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80079c6:	462b      	mov	r3, r5
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f922 	bl	8007c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bdb0      	pop	{r4, r5, r7, pc}
 80079dc:	0802a564 	.word	0x0802a564

080079e0 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	@ 0x28
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80079ec:	f107 0314 	add.w	r3, r7, #20
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fb92 	bl	800811c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	f107 0314 	add.w	r3, r7, #20
 8007a00:	cb0c      	ldmia	r3, {r2, r3}
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fb9c 	bl	8008142 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f876 	bl	8007b12 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8007a26:	bf00      	nop
  }
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fb9b 	bl	800817a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8007a44:	bf00      	nop
  }
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b08c      	sub	sp, #48	@ 0x30
 8007a52:	af02      	add	r7, sp, #8
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	f107 0314 	add.w	r3, r7, #20
 8007a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a64:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a68:	f107 031c 	add.w	r3, r7, #28
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fba7 	bl	80081c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007a74:	466a      	mov	r2, sp
 8007a76:	f107 0320 	add.w	r3, r7, #32
 8007a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a7e:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f107 0214 	add.w	r2, r7, #20
 8007a88:	ca06      	ldmia	r2, {r1, r2}
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f973 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	3728      	adds	r7, #40	@ 0x28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fba1 	bl	80081e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8007aa6:	4603      	mov	r3, r0
  }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08c      	sub	sp, #48	@ 0x30
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	f107 0314 	add.w	r3, r7, #20
 8007ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ac6:	e883 0003 	stmia.w	r3, {r0, r1}
 8007aca:	f107 031c 	add.w	r3, r7, #28
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fbab 	bl	800822c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007ad6:	466a      	mov	r2, sp
 8007ad8:	f107 0320 	add.w	r3, r7, #32
 8007adc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ae0:	e882 0003 	stmia.w	r2, {r0, r1}
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f107 0214 	add.w	r2, r7, #20
 8007aea:	ca06      	ldmia	r2, {r1, r2}
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f942 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	3728      	adds	r7, #40	@ 0x28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fba5 	bl	8008252 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8007b08:	4603      	mov	r3, r0
  }
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8007b12:	b590      	push	{r4, r7, lr}
 8007b14:	b087      	sub	sp, #28
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8007b24:	6938      	ldr	r0, [r7, #16]
 8007b26:	f000 ff69 	bl	80089fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	6938      	ldr	r0, [r7, #16]
 8007b2e:	f000 ff75 	bl	8008a1c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8007b32:	4602      	mov	r2, r0
 8007b34:	f107 0308 	add.w	r3, r7, #8
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fd ff88 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8007b40:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b4c:	f7fe fc6e 	bl	800642c <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8007b50:	bf00      	nop
}
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd90      	pop	{r4, r7, pc}

08007b5a <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	4613      	mov	r3, r2
 8007b66:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f021 f893 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	461a      	mov	r2, r3
 8007b74:	2101      	movs	r1, #1
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f020 ff9c 	bl	8028ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8007b7c:	bf00      	nop
    }
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb80 	bl	8008296 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8007b96:	4602      	mov	r2, r0
 8007b98:	463b      	mov	r3, r7
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f000 fb85 	bl	80082ac <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8007ba2:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	781a      	ldrb	r2, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f020 fdaa 	bl	8028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b088      	sub	sp, #32
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	68b8      	ldr	r0, [r7, #8]
 8007c28:	f000 fb61 	bl	80082ee <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d911      	bls.n	8007c5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8007c36:	f107 0318 	add.w	r3, r7, #24
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f020 fd6c 	bl	802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f020 fd54 	bl	80286f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f020 fd55 	bl	8028702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8007c58:	e005      	b.n	8007c66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8007c5e:	69f8      	ldr	r0, [r7, #28]
 8007c60:	f020 fd4d 	bl	80286fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8007c64:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8007c66:	f107 0314 	add.w	r3, r7, #20
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff ffb1 	bl	8007bd4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f020 fd41 	bl	80286fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f020 fdce 	bl	8028820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f020 fd3a 	bl	8028706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ffab 	bl	8007bf2 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
    if (slots_)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6852      	ldr	r2, [r2, #4]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	6838      	ldr	r0, [r7, #0]
 8007cc4:	4798      	blx	r3
    slots_ = nullptr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	805a      	strh	r2, [r3, #2]
  }
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	00db      	lsls	r3, r3, #3
  }
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8007cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	681c      	ldr	r4, [r3, #0]
 8007d0c:	683d      	ldr	r5, [r7, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685e      	ldr	r6, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff ffe2 	bl	8007ce0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47a0      	blx	r4
 8007d26:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	885a      	ldrh	r2, [r3, #2]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	801a      	strh	r2, [r3, #0]
  }
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e008      	b.n	8007d6e <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	463b      	mov	r3, r7
 8007d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d66:	f000 fad6 	bl	8008316 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	bf00      	nop
  }
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8007d76:	b082      	sub	sp, #8
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	1d38      	adds	r0, r7, #4
 8007d82:	e880 0006 	stmia.w	r0, {r1, r2}
 8007d86:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	1d3a      	adds	r2, r7, #4
 8007d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d92:	e883 0003 	stmia.w	r3, {r0, r1}
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	f107 021c 	add.w	r2, r7, #28
 8007d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	b002      	add	sp, #8
 8007db2:	4770      	bx	lr

08007db4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc2:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6838      	ldr	r0, [r7, #0]
 8007dcc:	f7ff fcb0 	bl	8007730 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007dd0:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8007dda:	89fb      	ldrh	r3, [r7, #14]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fc75 	bl	80076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8007dee:	b5b0      	push	{r4, r5, r7, lr}
 8007df0:	b086      	sub	sp, #24
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	6a1a      	ldr	r2, [r3, #32]
 8007e04:	8afb      	ldrh	r3, [r7, #22]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	441a      	add	r2, r3
 8007e0a:	f107 030c 	add.w	r3, r7, #12
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 faad 	bl	8008370 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fc22 	bl	8007664 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f083 0301 	eor.w	r3, r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f857 	bl	8007ee0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007e32:	e015      	b.n	8007e60 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f863 	bl	8007f04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	8afb      	ldrh	r3, [r7, #22]
 8007e42:	01db      	lsls	r3, r3, #7
 8007e44:	b29c      	uxth	r4, r3
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fc27 	bl	800769e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4423      	add	r3, r4
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	4629      	mov	r1, r5
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fc38 	bl	80076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bdb0      	pop	{r4, r5, r7, pc}

08007e68 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d10b      	bne.n	8007e96 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 faa1 	bl	80083c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f083 0301 	eor.w	r3, r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e01b      	b.n	8007ed8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1a      	ldr	r2, [r3, #32]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ea8:	1c59      	adds	r1, r3, #1
 8007eaa:	b288      	uxth	r0, r1
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	8488      	strh	r0, [r1, #36]	@ 0x24
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8007eb6:	2380      	movs	r3, #128	@ 0x80
 8007eb8:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ec2:	d102      	bne.n	8007eca <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8007eca:	89fb      	ldrh	r3, [r7, #14]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68b8      	ldr	r0, [r7, #8]
 8007ed2:	f000 fabe 	bl	8008452 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
  }
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ef4:	809a      	strh	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
  }
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	887b      	ldrh	r3, [r7, #2]
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
  }
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
	...

08007f40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007f46:	1d3b      	adds	r3, r7, #4
 8007f48:	4904      	ldr	r1, [pc, #16]	@ (8007f5c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 faa7 	bl	800849e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007f50:	687b      	ldr	r3, [r7, #4]
  }
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0802b318 	.word	0x0802b318

08007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4413      	add	r3, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 faa1 	bl	80084bc <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8007f7a:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007f7e:	eeb0 0b47 	vmov.f64	d0, d7
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	4904      	ldr	r1, [pc, #16]	@ (8007fa4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fa83 	bl	800849e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007f98:	687b      	ldr	r3, [r7, #4]
  }
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	0802b360 	.word	0x0802b360

08007fa8 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7fd f956 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8007fc8:	b590      	push	{r4, r7, lr}
 8007fca:	b089      	sub	sp, #36	@ 0x24
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e01e      	b.n	8008018 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f103 0108 	add.w	r1, r3, #8
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	88db      	ldrh	r3, [r3, #6]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fbea 	bl	80077c4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	466c      	mov	r4, sp
 8007ff4:	f107 030c 	add.w	r3, r7, #12
 8007ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ffc:	e884 0003 	stmia.w	r4, {r0, r1}
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	ca07      	ldmia	r2, {r0, r1, r2}
 8008004:	f000 fa6a 	bl	80084dc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e006      	b.n	8008020 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1dd      	bne.n	8007fda <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 800801e:	2300      	movs	r3, #0
  }
 8008020:	4618      	mov	r0, r3
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	bd90      	pop	{r4, r7, pc}

08008028 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008030:	687b      	ldr	r3, [r7, #4]
}
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008046:	687b      	ldr	r3, [r7, #4]
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa7f 	bl	8008560 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8008062:	4603      	mov	r3, r0
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fa86 	bl	8008576 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800806a:	4603      	mov	r3, r0
  }
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa6f 	bl	8008560 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8008082:	4603      	mov	r3, r0
 8008084:	4618      	mov	r0, r3
 8008086:	f000 fa82 	bl	800858e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800808a:	4603      	mov	r3, r0
  }
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 800809e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a2:	f000 fa80 	bl	80085a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 80080a6:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80080aa:	eeb0 0b47 	vmov.f64	d0, d7
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80080ba:	1d3b      	adds	r3, r7, #4
 80080bc:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fa85 	bl	80085ce <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 80080c4:	687b      	ldr	r3, [r7, #4]
  }
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	0802b3a8 	.word	0x0802b3a8

080080d4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80080da:	1d3b      	adds	r3, r7, #4
 80080dc:	4904      	ldr	r1, [pc, #16]	@ (80080f0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fa75 	bl	80085ce <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 80080e4:	687b      	ldr	r3, [r7, #4]
  }
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	0802b3c0 	.word	0x0802b3c0

080080f4 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fa6f 	bl	80085ec <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 800810e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008112:	eeb0 0a67 	vmov.f32	s0, s15
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f000 fa6f 	bl	800860a <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800812c:	4602      	mov	r2, r0
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fa74 	bl	8008620 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8008138:	bf00      	nop
}
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8008142:	b082      	sub	sp, #8
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	f107 0110 	add.w	r1, r7, #16
 8008152:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	f107 0210 	add.w	r2, r7, #16
 8008164:	ca07      	ldmia	r2, {r0, r1, r2}
 8008166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	b002      	add	sp, #8
 8008178:	4770      	bx	lr

0800817a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800817a:	b590      	push	{r4, r7, lr}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800818c:	6938      	ldr	r0, [r7, #16]
 800818e:	f7ff ff71 	bl	8008074 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8008192:	4604      	mov	r4, r0
 8008194:	6938      	ldr	r0, [r7, #16]
 8008196:	f7ff ff5d 	bl	8008054 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 800819a:	4602      	mov	r2, r0
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	4621      	mov	r1, r4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fc54 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 80081a8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f107 0308 	add.w	r3, r7, #8
 80081b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80081b4:	f7fe f95d 	bl	8006472 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 80081b8:	bf00      	nop
}
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd90      	pop	{r4, r7, pc}

080081c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80081cc:	6838      	ldr	r0, [r7, #0]
 80081ce:	f000 fa36 	bl	800863e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80081d2:	4602      	mov	r2, r0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fa3b 	bl	8008654 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 80081de:	bf00      	nop
}
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80081f8:	6938      	ldr	r0, [r7, #16]
 80081fa:	f000 fcce 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80081fe:	4604      	mov	r4, r0
 8008200:	6938      	ldr	r0, [r7, #16]
 8008202:	f000 fb58 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8008206:	4602      	mov	r2, r0
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	4621      	mov	r1, r4
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fbf3 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8008214:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800821e:	f7fe f8e5 	bl	80063ec <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	371c      	adds	r7, #28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	f000 fa1b 	bl	8008672 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800823c:	4602      	mov	r2, r0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fa20 	bl	8008688 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8008248:	bf00      	nop
}
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8008252:	b590      	push	{r4, r7, lr}
 8008254:	b087      	sub	sp, #28
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008262:	6938      	ldr	r0, [r7, #16]
 8008264:	f000 fc99 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8008268:	4604      	mov	r4, r0
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 fb23 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8008270:	4602      	mov	r2, r0
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4621      	mov	r1, r4
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fbbe 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800827e:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8008280:	f107 0308 	add.w	r3, r7, #8
 8008284:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008288:	f000 fa0d 	bl	80086a6 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 800828c:	4603      	mov	r3, r0
}
 800828e:	4618      	mov	r0, r3
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	bd90      	pop	{r4, r7, pc}

08008296 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800829e:	687b      	ldr	r3, [r7, #4]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 80082b6:	6838      	ldr	r0, [r7, #0]
 80082b8:	f7ff feb6 	bl	8008028 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80082bc:	4603      	mov	r3, r0
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fa0f 	bl	80086e2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 80082c4:	4604      	mov	r4, r0
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe f9a0 	bl	8006610 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 80082d0:	7a38      	ldrb	r0, [r7, #8]
 80082d2:	f7fe f9df 	bl	8006694 <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 80082d6:	4603      	mov	r3, r0
 80082d8:	81bb      	strh	r3, [r7, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4621      	mov	r1, r4
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fa20 	bl	8008724 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 80082e4:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd90      	pop	{r4, r7, pc}

080082ee <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80082ee:	b5b0      	push	{r4, r5, r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80082f8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fa4a 	bl	8008796 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8008302:	462a      	mov	r2, r5
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fa4f 	bl	80087aa <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800830c:	4603      	mov	r3, r0
    }
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bdb0      	pop	{r4, r5, r7, pc}

08008316 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 8008316:	b580      	push	{r7, lr}
 8008318:	b088      	sub	sp, #32
 800831a:	af02      	add	r7, sp, #8
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	4638      	mov	r0, r7
 8008320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 8008324:	f107 0010 	add.w	r0, r7, #16
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	463b      	mov	r3, r7
 8008332:	cb0c      	ldmia	r3, {r2, r3}
 8008334:	68f9      	ldr	r1, [r7, #12]
 8008336:	f000 fa47 	bl	80087c8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 800833a:	f107 0310 	add.w	r3, r7, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd f892 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 800834a:	2300      	movs	r3, #0
 800834c:	e00c      	b.n	8008368 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 800834e:	f107 0310 	add.w	r3, r7, #16
 8008352:	6a39      	ldr	r1, [r7, #32]
 8008354:	4618      	mov	r0, r3
 8008356:	f7fd fd46 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 800835a:	f107 0310 	add.w	r3, r7, #16
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd f8b3 	bl	80054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8008364:	4603      	mov	r3, r0
 8008366:	bf00      	nop
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
    if (!slots_)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fdac 	bl	8007ee0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8008388:	e01a      	b.n	80083c0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	885a      	ldrh	r2, [r3, #2]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d303      	bcc.n	800839e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fda2 	bl	8007ee0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800839c:	e010      	b.n	80083c0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	885b      	ldrh	r3, [r3, #2]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	b291      	uxth	r1, r2
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	8051      	strh	r1, [r2, #2]
 80083aa:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	89fb      	ldrh	r3, [r7, #14]
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	89fa      	ldrh	r2, [r7, #14]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff f988 	bl	80076d0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083da:	d101      	bne.n	80083e0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 80083dc:	2300      	movs	r3, #0
 80083de:	e034      	b.n	800844a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1a      	ldr	r2, [r3, #32]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d114      	bne.n	800841c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	897a      	ldrh	r2, [r7, #10]
 80083fa:	00d2      	lsls	r2, r2, #3
 80083fc:	4611      	mov	r1, r2
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	4798      	blx	r3
 8008402:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 800840a:	2300      	movs	r3, #0
 800840c:	e01d      	b.n	800844a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f021 fa26 	bl	8029866 <memcpy>
 800841a:	e00f      	b.n	800843c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6a11      	ldr	r1, [r2, #32]
 8008428:	897a      	ldrh	r2, [r7, #10]
 800842a:	00d2      	lsls	r2, r2, #3
 800842c:	6838      	ldr	r0, [r7, #0]
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8008438:	2300      	movs	r3, #0
 800843a:	e006      	b.n	800844a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	897a      	ldrh	r2, [r7, #10]
 8008446:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8008448:	2301      	movs	r3, #1
  }
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8008452:	b5b0      	push	{r4, r5, r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	460b      	mov	r3, r1
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681c      	ldr	r4, [r3, #0]
 8008466:	687d      	ldr	r5, [r7, #4]
 8008468:	897b      	ldrh	r3, [r7, #10]
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fc38 	bl	8007ce0 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8008470:	4603      	mov	r3, r0
 8008472:	4619      	mov	r1, r3
 8008474:	4628      	mov	r0, r5
 8008476:	47a0      	blx	r4
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 8008486:	897a      	ldrh	r2, [r7, #10]
 8008488:	e000      	b.n	800848c <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 800848a:	2200      	movs	r2, #0
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	805a      	strh	r2, [r3, #2]
  }
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bdb0      	pop	{r4, r5, r7, pc}

0800849e <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return *p;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80084ce:	eeb0 0b47 	vmov.f64	d0, d7
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 80084dc:	b082      	sub	sp, #8
 80084de:	b590      	push	{r4, r7, lr}
 80084e0:	b089      	sub	sp, #36	@ 0x24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	1d3c      	adds	r4, r7, #4
 80084e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fc fee4 	bl	80052bc <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80084f4:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 80084f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fc fede 	bl	80052bc <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8008500:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	429a      	cmp	r2, r3
 8008508:	d001      	beq.n	800850e <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 800850a:	2300      	movs	r3, #0
 800850c:	e021      	b.n	8008552 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	e019      	b.n	8008548 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	69f9      	ldr	r1, [r7, #28]
 8008518:	4618      	mov	r0, r3
 800851a:	f7f8 fbf5 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800851e:	4603      	mov	r3, r0
 8008520:	461c      	mov	r4, r3
 8008522:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008526:	69f9      	ldr	r1, [r7, #28]
 8008528:	4618      	mov	r0, r3
 800852a:	f7f8 fbed 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800852e:	4603      	mov	r3, r0
 8008530:	429c      	cmp	r4, r3
 8008532:	bf14      	ite	ne
 8008534:	2301      	movne	r3, #1
 8008536:	2300      	moveq	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 800853e:	2300      	movs	r3, #0
 8008540:	e007      	b.n	8008552 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	3301      	adds	r3, #1
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d3e1      	bcc.n	8008514 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8008550:	2301      	movs	r3, #1
}
 8008552:	4618      	mov	r0, r3
 8008554:	3724      	adds	r7, #36	@ 0x24
 8008556:	46bd      	mov	sp, r7
 8008558:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800855c:	b002      	add	sp, #8
 800855e:	4770      	bx	lr

08008560 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008568:	687b      	ldr	r3, [r7, #4]
  }
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fd fa79 	bl	8005a76 <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8008584:	4603      	mov	r3, r0
  }
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fd fa79 	bl	8005a8e <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 800859c:	4603      	mov	r3, r0
  }
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 80085b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80085b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80085c0:	eeb0 0b47 	vmov.f64	d0, d7
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  return *p;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	ee07 3a90 	vmov	s15, r3
}
 80085fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008612:	687b      	ldr	r3, [r7, #4]
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800862a:	2301      	movs	r3, #1
 800862c:	2207      	movs	r2, #7
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fc fe1b 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008646:	687b      	ldr	r3, [r7, #4]
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800865e:	2301      	movs	r3, #1
 8008660:	2206      	movs	r2, #6
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fc fe01 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800867a:	687b      	ldr	r3, [r7, #4]
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008692:	2301      	movs	r3, #1
 8008694:	2209      	movs	r2, #9
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7fc fde7 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	463b      	mov	r3, r7
 80086ae:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80086b2:	463b      	mov	r3, r7
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fe ff1f 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80086ba:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80086bc:	463b      	mov	r3, r7
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe ff26 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80086c4:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 f902 	bl	80088d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80086d4:	4603      	mov	r3, r0
 80086d6:	e000      	b.n	80086da <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80086d8:	2300      	movs	r3, #0
  }
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fc9c 	bl	8008028 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80086f0:	4603      	mov	r3, r0
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f99e 	bl	8008a3c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4618      	mov	r0, r3
 8008716:	f7fd fd9e 	bl	8006256 <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b0a1      	sub	sp, #132	@ 0x84
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f999 	bl	8008a68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8008736:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8008738:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d107      	bne.n	800874e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 800873e:	f107 0318 	add.w	r3, r7, #24
 8008742:	2104      	movs	r1, #4
 8008744:	4618      	mov	r0, r3
 8008746:	f7fd ff08 	bl	800655a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 800874a:	7e3b      	ldrb	r3, [r7, #24]
 800874c:	e01f      	b.n	800878e <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f996 	bl	8008a80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008754:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7fd fac5 	bl	8005ce6 <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 800875c:	f107 031c 	add.w	r3, r7, #28
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f997 	bl	8008a98 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 800876a:	f107 001c 	add.w	r0, r7, #28
 800876e:	797b      	ldrb	r3, [r7, #5]
 8008770:	4622      	mov	r2, r4
 8008772:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008774:	f000 f9ac 	bl	8008ad0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008778:	4603      	mov	r3, r0
 800877a:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 800877c:	f107 031c 	add.w	r3, r7, #28
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff ffc2 	bl	800870a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7fd ff97 	bl	80066ba <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 800878c:	7d3b      	ldrb	r3, [r7, #20]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3784      	adds	r7, #132	@ 0x84
 8008792:	46bd      	mov	sp, r7
 8008794:	bd90      	pop	{r4, r7, pc}

08008796 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80087aa:	b480      	push	{r7}
 80087ac:	b085      	sub	sp, #20
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	1ad3      	subs	r3, r2, r3
    }
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80087c8:	b082      	sub	sp, #8
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b08e      	sub	sp, #56	@ 0x38
 80087ce:	af02      	add	r7, sp, #8
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
 80087d4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80087d8:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 80087dc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80087e0:	f7fc fd5b 	bl	800529a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fc fe2a 	bl	8005444 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 80087f0:	e05a      	b.n	80088a8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	f107 030c 	add.w	r3, r7, #12
 80087fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008800:	4618      	mov	r0, r3
 8008802:	f7fd fb13 	bl	8005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8008806:	e041      	b.n	800888c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8008808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800880c:	2b00      	cmp	r3, #0
 800880e:	d025      	beq.n	800885c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4618      	mov	r0, r3
 8008816:	f7fc fe4c 	bl	80054b2 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 800881a:	4602      	mov	r2, r0
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fc ff12 	bl	800564c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8008828:	f107 0320 	add.w	r3, r7, #32
 800882c:	f107 0214 	add.w	r2, r7, #20
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f985 	bl	8008b42 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8008838:	466a      	mov	r2, sp
 800883a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800883e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008842:	e882 0003 	stmia.w	r2, {r0, r1}
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800884c:	ca07      	ldmia	r2, {r0, r1, r2}
 800884e:	f7ff fe45 	bl	80084dc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008858:	2301      	movs	r3, #1
 800885a:	e000      	b.n	800885e <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 800885c:	2300      	movs	r3, #0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	461a      	mov	r2, r3
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800886e:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8008872:	e019      	b.n	80088a8 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8008874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008878:	f083 0301 	eor.w	r3, r3, #1
 800887c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008886:	4618      	mov	r0, r3
 8008888:	f7fd faad 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800888c:	f107 030c 	add.w	r3, r7, #12
 8008890:	4618      	mov	r0, r3
 8008892:	f7fc fde9 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008896:	4603      	mov	r3, r0
 8008898:	f083 0301 	eor.w	r3, r3, #1
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1b2      	bne.n	8008808 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fc fdce 	bl	8005444 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	3730      	adds	r7, #48	@ 0x30
 80088ac:	46bd      	mov	sp, r7
 80088ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088b2:	b002      	add	sp, #8
 80088b4:	4770      	bx	lr

080088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f954 	bl	8008b6c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80088c4:	4603      	mov	r3, r0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f95b 	bl	8008b82 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80088cc:	4603      	mov	r3, r0
  }
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fd fe1d 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80088ea:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	791b      	ldrb	r3, [r3, #4]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	2b1a      	cmp	r3, #26
 80088f4:	d87c      	bhi.n	80089f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 80088f6:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	080089af 	.word	0x080089af
 8008900:	080089bd 	.word	0x080089bd
 8008904:	08008969 	.word	0x08008969
 8008908:	080089f1 	.word	0x080089f1
 800890c:	080089f1 	.word	0x080089f1
 8008910:	080089f1 	.word	0x080089f1
 8008914:	0800896f 	.word	0x0800896f
 8008918:	080089f1 	.word	0x080089f1
 800891c:	0800897d 	.word	0x0800897d
 8008920:	080089f1 	.word	0x080089f1
 8008924:	080089cd 	.word	0x080089cd
 8008928:	080089f1 	.word	0x080089f1
 800892c:	080089f1 	.word	0x080089f1
 8008930:	080089f1 	.word	0x080089f1
 8008934:	080089f1 	.word	0x080089f1
 8008938:	080089f1 	.word	0x080089f1
 800893c:	080089f1 	.word	0x080089f1
 8008940:	080089f1 	.word	0x080089f1
 8008944:	080089f1 	.word	0x080089f1
 8008948:	080089f1 	.word	0x080089f1
 800894c:	080089f1 	.word	0x080089f1
 8008950:	080089f1 	.word	0x080089f1
 8008954:	0800898b 	.word	0x0800898b
 8008958:	080089f1 	.word	0x080089f1
 800895c:	0800899d 	.word	0x0800899d
 8008960:	080089f1 	.word	0x080089f1
 8008964:	080089df 	.word	0x080089df
        return content_.asBoolean;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	e041      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f921 	bl	8008bba <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8008978:	4603      	mov	r3, r0
 800897a:	e03a      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 f92b 	bl	8008bdc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8008986:	4603      	mov	r3, r0
 8008988:	e033      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	4610      	mov	r0, r2
 8008992:	4619      	mov	r1, r3
 8008994:	f000 f933 	bl	8008bfe <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8008998:	4603      	mov	r3, r0
 800899a:	e02a      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	4610      	mov	r0, r2
 80089a4:	4619      	mov	r1, r3
 80089a6:	f000 f93d 	bl	8008c24 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80089aa:	4603      	mov	r3, r0
 80089ac:	e021      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f949 	bl	8008c4a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80089b8:	4603      	mov	r3, r0
 80089ba:	e01a      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f941 	bl	8008c4a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e012      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	eeb0 0a67 	vmov.f32	s0, s15
 80089d6:	f000 f94c 	bl	8008c72 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80089da:	4603      	mov	r3, r0
 80089dc:	e009      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	ed93 7b00 	vldr	d7, [r3]
 80089e4:	eeb0 0b47 	vmov.f64	d0, d7
 80089e8:	f000 f95b 	bl	8008ca2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80089ec:	4603      	mov	r3, r0
 80089ee:	e000      	b.n	80089f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80089f0:	2300      	movs	r3, #0
  }
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f964 	bl	8008cd2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f96b 	bl	8008ce8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008a12:	4603      	mov	r3, r0
  }
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f954 	bl	8008cd2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f967 	bl	8008d00 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008a32:	4603      	mov	r3, r0
  }
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	e000      	b.n	8008a52 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	0802a324 	.word	0x0802a324

08008a68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7fd f960 	bl	8005d36 <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8008a76:	4603      	mov	r3, r0
  }
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fd f93d 	bl	8005d08 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8008a8e:	4603      	mov	r3, r0
  }
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68b9      	ldr	r1, [r7, #8]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fd fbbf 	bl	800622c <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3310      	adds	r3, #16
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f92c 	bl	8008d18 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	619a      	str	r2, [r3, #24]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b089      	sub	sp, #36	@ 0x24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	713a      	strb	r2, [r7, #4]
 8008adc:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8008ade:	783b      	ldrb	r3, [r7, #0]
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	68b9      	ldr	r1, [r7, #8]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f929 	bl	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008aea:	4603      	mov	r3, r0
 8008aec:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10f      	bne.n	8008b14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3310      	adds	r3, #16
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fa0d 	bl	8008f18 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008b04:	68b8      	ldr	r0, [r7, #8]
 8008b06:	f7fc fde8 	bl	80056da <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8008b14:	2300      	movs	r3, #0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d007      	beq.n	8008b2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8008b1a:	f107 0318 	add.w	r3, r7, #24
 8008b1e:	2103      	movs	r1, #3
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fd1a 	bl	800655a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008b26:	7e3b      	ldrb	r3, [r7, #24]
 8008b28:	e007      	b.n	8008b3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8008b2a:	7dfa      	ldrb	r2, [r7, #23]
 8008b2c:	f107 031c 	add.w	r3, r7, #28
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fd fd11 	bl	800655a <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008b38:	7f3b      	ldrb	r3, [r7, #28]
  }
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3724      	adds	r7, #36	@ 0x24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd90      	pop	{r4, r7, pc}

08008b42 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008b4c:	6838      	ldr	r0, [r7, #0]
 8008b4e:	f000 f9ef 	bl	8008f30 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fc fc6a 	bl	800542e <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008b74:	687b      	ldr	r3, [r7, #4]
  }
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9db 	bl	8008f46 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8008b90:	4603      	mov	r3, r0
  }
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff ffe2 	bl	8008b6c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f9d9 	bl	8008f62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008bb0:	4603      	mov	r3, r0
  }
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f9d9 	bl	8008f7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	e000      	b.n	8008bd4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f9d9 	bl	8008f9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	e000      	b.n	8008bf6 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c0c:	f000 f9dc 	bl	8008fc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	e000      	b.n	8008c1c <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c32:	f000 f9e1 	bl	8008ff8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	e000      	b.n	8008c42 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b086      	sub	sp, #24
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fd fec7 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8008c5e:	f107 0308 	add.w	r3, r7, #8
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f9e6 	bl	8009034 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8008c68:	4603      	mov	r3, r0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8008c80:	f000 fa1e 	bl	80090c0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d006      	beq.n	8008c98 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 8008c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c92:	ee17 3a90 	vmov	r3, s15
 8008c96:	e000      	b.n	8008c9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008cac:	ed97 0b00 	vldr	d0, [r7]
 8008cb0:	f000 fa34 	bl	800911c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8008cba:	ed97 7b00 	vldr	d7, [r7]
 8008cbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008cc2:	ee17 3a90 	vmov	r3, s15
 8008cc6:	e000      	b.n	8008cca <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008cda:	687b      	ldr	r3, [r7, #4]
  }
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fa39 	bl	8009168 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 8008cf6:	4603      	mov	r3, r0
  }
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa49 	bl	80091a0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8008d0e:	4603      	mov	r3, r0
  }
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8008d3c:	b5b0      	push	{r4, r5, r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	713a      	strb	r2, [r7, #4]
 8008d48:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fa36 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75fb      	strb	r3, [r7, #23]
    if (err)
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	e0d2      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 fa62 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b7b      	cmp	r3, #123	@ 0x7b
 8008d68:	f300 80ba 	bgt.w	8008ee0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008d6c:	2b5b      	cmp	r3, #91	@ 0x5b
 8008d6e:	da04      	bge.n	8008d7a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8008d70:	2b22      	cmp	r3, #34	@ 0x22
 8008d72:	d07b      	beq.n	8008e6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008d74:	2b27      	cmp	r3, #39	@ 0x27
 8008d76:	d079      	beq.n	8008e6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008d78:	e0b2      	b.n	8008ee0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008d7a:	3b5b      	subs	r3, #91	@ 0x5b
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	f200 80af 	bhi.w	8008ee0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008d82:	a201      	add	r2, pc, #4	@ (adr r2, 8008d88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008e0d 	.word	0x08008e0d
 8008d8c:	08008ee1 	.word	0x08008ee1
 8008d90:	08008ee1 	.word	0x08008ee1
 8008d94:	08008ee1 	.word	0x08008ee1
 8008d98:	08008ee1 	.word	0x08008ee1
 8008d9c:	08008ee1 	.word	0x08008ee1
 8008da0:	08008ee1 	.word	0x08008ee1
 8008da4:	08008ee1 	.word	0x08008ee1
 8008da8:	08008ee1 	.word	0x08008ee1
 8008dac:	08008ee1 	.word	0x08008ee1
 8008db0:	08008ee1 	.word	0x08008ee1
 8008db4:	08008eb3 	.word	0x08008eb3
 8008db8:	08008ee1 	.word	0x08008ee1
 8008dbc:	08008ee1 	.word	0x08008ee1
 8008dc0:	08008ee1 	.word	0x08008ee1
 8008dc4:	08008ee1 	.word	0x08008ee1
 8008dc8:	08008ee1 	.word	0x08008ee1
 8008dcc:	08008ee1 	.word	0x08008ee1
 8008dd0:	08008ee1 	.word	0x08008ee1
 8008dd4:	08008ed5 	.word	0x08008ed5
 8008dd8:	08008ee1 	.word	0x08008ee1
 8008ddc:	08008ee1 	.word	0x08008ee1
 8008de0:	08008ee1 	.word	0x08008ee1
 8008de4:	08008ee1 	.word	0x08008ee1
 8008de8:	08008ee1 	.word	0x08008ee1
 8008dec:	08008e91 	.word	0x08008e91
 8008df0:	08008ee1 	.word	0x08008ee1
 8008df4:	08008ee1 	.word	0x08008ee1
 8008df8:	08008ee1 	.word	0x08008ee1
 8008dfc:	08008ee1 	.word	0x08008ee1
 8008e00:	08008ee1 	.word	0x08008ee1
 8008e04:	08008ee1 	.word	0x08008ee1
 8008e08:	08008e3d 	.word	0x08008e3d
        if (filter.allowArray())
 8008e0c:	1d3b      	adds	r3, r7, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fd fbdd 	bl	80065ce <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8008e1a:	68b8      	ldr	r0, [r7, #8]
 8008e1c:	f7fc fcdc 	bl	80057d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008e20:	4601      	mov	r1, r0
 8008e22:	783b      	ldrb	r3, [r7, #0]
 8008e24:	462a      	mov	r2, r5
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 fa15 	bl	8009256 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	e069      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8008e30:	7839      	ldrb	r1, [r7, #0]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 fa95 	bl	8009362 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e063      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fd fbd0 	bl	80065e4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8008e4a:	68b8      	ldr	r0, [r7, #8]
 8008e4c:	f7fc fcec 	bl	8005828 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8008e50:	4601      	mov	r1, r0
 8008e52:	783b      	ldrb	r3, [r7, #0]
 8008e54:	4622      	mov	r2, r4
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fac6 	bl	80093e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	e051      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8008e60:	7839      	ldrb	r1, [r7, #0]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fbac 	bl	80095c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	e04b      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008e6c:	1d3b      	adds	r3, r7, #4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fd fbc3 	bl	80065fa <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fc1f 	bl	80096c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8008e82:	4603      	mov	r3, r0
 8008e84:	e03e      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fc3b 	bl	8009702 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	e039      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008e90:	1d3b      	adds	r3, r7, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fd fbb1 	bl	80065fa <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f7fc fc47 	bl	8005734 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8008ea6:	4919      	ldr	r1, [pc, #100]	@ (8008f0c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fc5f 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	e028      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fba0 	bl	80065fa <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	68b8      	ldr	r0, [r7, #8]
 8008ec4:	f7fc fc36 	bl	8005734 <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8008ec8:	4911      	ldr	r1, [pc, #68]	@ (8008f10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fc4e 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	e017      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8008ed4:	490f      	ldr	r1, [pc, #60]	@ (8008f14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fc48 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008edc:	4603      	mov	r3, r0
 8008ede:	e011      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008ee0:	1d3b      	adds	r3, r7, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fd fb89 	bl	80065fa <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fc61 	bl	80097b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	e004      	b.n	8008f04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fd04 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8008f00:	4603      	mov	r3, r0
 8008f02:	bf00      	nop
  }
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f0c:	0802a598 	.word	0x0802a598
 8008f10:	0802a5a0 	.word	0x0802a5a0
 8008f14:	0802a5a8 	.word	0x0802a5a8

08008f18 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
    return current_;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	791b      	ldrb	r3, [r3, #4]
  }
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fcf6 	bl	8009944 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008f58:	4603      	mov	r3, r0
  }
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd04 	bl	8009978 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8008f70:	4603      	mov	r3, r0
  }
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008f82:	f000 f8c2 	bl	800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008f86:	4602      	mov	r2, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf94      	ite	ls
 8008f8e:	2301      	movls	r3, #1
 8008f90:	2300      	movhi	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da01      	bge.n	8008fae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e008      	b.n	8008fc0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8008fae:	f000 f8ac 	bl	800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	bf2c      	ite	cs
 8008fba:	2301      	movcs	r3, #1
 8008fbc:	2300      	movcc	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008fc8:	b5b0      	push	{r4, r5, r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008fd2:	f000 f89a 	bl	800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2200      	movs	r2, #0
 8008fda:	461c      	mov	r4, r3
 8008fdc:	4615      	mov	r5, r2
 8008fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe2:	4294      	cmp	r4, r2
 8008fe4:	eb75 0303 	sbcs.w	r3, r5, r3
 8008fe8:	bf2c      	ite	cs
 8008fea:	2301      	movcs	r3, #1
 8008fec:	2300      	movcc	r3, #0
 8008fee:	b2db      	uxtb	r3, r3
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bdb0      	pop	{r4, r5, r7, pc}

08008ff8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008ff8:	b5b0      	push	{r4, r5, r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8009002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	da01      	bge.n	800900e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 800900a:	2300      	movs	r3, #0
 800900c:	e00e      	b.n	800902c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 800900e:	f000 f87c 	bl	800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8009012:	4603      	mov	r3, r0
 8009014:	2200      	movs	r2, #0
 8009016:	461c      	mov	r4, r3
 8009018:	4615      	mov	r5, r2
 800901a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901e:	4294      	cmp	r4, r2
 8009020:	eb75 0303 	sbcs.w	r3, r5, r3
 8009024:	bfac      	ite	ge
 8009026:	2301      	movge	r3, #1
 8009028:	2300      	movlt	r3, #0
 800902a:	b2db      	uxtb	r3, r3
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bdb0      	pop	{r4, r5, r7, pc}

08009034 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	3b01      	subs	r3, #1
 8009042:	2b03      	cmp	r3, #3
 8009044:	d82e      	bhi.n	80090a4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	0800905d 	.word	0x0800905d
 8009050:	0800906f 	.word	0x0800906f
 8009054:	08009081 	.word	0x08009081
 8009058:	08009093 	.word	0x08009093
        return convertNumber<T>(value_.asFloat);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009062:	eeb0 0a67 	vmov.f32	s0, s15
 8009066:	f7ff fe04 	bl	8008c72 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 800906a:	4603      	mov	r3, r0
 800906c:	e01b      	b.n	80090a6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009074:	4610      	mov	r0, r2
 8009076:	4619      	mov	r1, r3
 8009078:	f7ff fdd4 	bl	8008c24 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800907c:	4603      	mov	r3, r0
 800907e:	e012      	b.n	80090a6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009086:	4610      	mov	r0, r2
 8009088:	4619      	mov	r1, r3
 800908a:	f7ff fdb8 	bl	8008bfe <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 800908e:	4603      	mov	r3, r0
 8009090:	e009      	b.n	80090a6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	ed93 7b02 	vldr	d7, [r3, #8]
 8009098:	eeb0 0b47 	vmov.f64	d0, d7
 800909c:	f7ff fe01 	bl	8008ca2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80090a0:	4603      	mov	r3, r0
 80090a2:	e000      	b.n	80090a6 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 80090a4:	2300      	movs	r3, #0
  }
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop

080090b0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
    return 0;
 80090b4:	2300      	movs	r3, #0
  }
 80090b6:	4618      	mov	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 80090ca:	f7ff fff1 	bl	80090b0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 80090ce:	ee07 0a90 	vmov	s15, r0
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80090da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e2:	db0d      	blt.n	8009100 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 80090e4:	2000      	movs	r0, #0
 80090e6:	f000 fc63 	bl	80099b0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 80090ea:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 80090ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80090f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	d801      	bhi.n	8009100 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 80090fc:	2301      	movs	r3, #1
 80090fe:	e000      	b.n	8009102 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 800910a:	b480      	push	{r7}
 800910c:	af00      	add	r7, sp, #0
    return T(-1);
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8009112:	4618      	mov	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8009126:	f7ff ffc3 	bl	80090b0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 800912a:	ee07 0a90 	vmov	s15, r0
 800912e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009132:	ed97 6b00 	vldr	d6, [r7]
 8009136:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800913a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913e:	db0e      	blt.n	800915e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8009140:	f7ff ffe3 	bl	800910a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8009144:	ee07 0a90 	vmov	s15, r0
 8009148:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800914c:	ed97 6b00 	vldr	d6, [r7]
 8009150:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009158:	d801      	bhi.n	800915e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800915a:	2301      	movs	r3, #1
 800915c:	e000      	b.n	8009160 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8009168:	b590      	push	{r4, r7, lr}
 800916a:	b085      	sub	sp, #20
 800916c:	af02      	add	r7, sp, #8
 800916e:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fc2b 	bl	80099d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 800917a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff fc7d 	bl	8008a80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8009186:	4602      	mov	r2, r0
    return VariantData::getMember(
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	9200      	str	r2, [sp, #0]
 800918c:	3304      	adds	r3, #4
 800918e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009190:	4620      	mov	r0, r4
 8009192:	f000 fc29 	bl	80099e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8009196:	4603      	mov	r3, r0
  }
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	bd90      	pop	{r4, r7, pc}

080091a0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff fc67 	bl	8008a80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80091b2:	4603      	mov	r3, r0
  }
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
      switch (current()) {
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f82f 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d013      	beq.n	80091f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	db1d      	blt.n	8009210 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	dc1b      	bgt.n	8009210 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80091d8:	2b09      	cmp	r3, #9
 80091da:	db19      	blt.n	8009210 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80091dc:	3b09      	subs	r3, #9
 80091de:	4a11      	ldr	r2, [pc, #68]	@ (8009224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 80091e0:	fa22 f303 	lsr.w	r3, r2, r3
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf14      	ite	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	2300      	moveq	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d108      	bne.n	8009208 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 80091f6:	e00b      	b.n	8009210 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	7b1b      	ldrb	r3, [r3, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8009200:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8009202:	e00b      	b.n	800921c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8009204:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 8009206:	e009      	b.n	800921c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fc06 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 800920e:	e004      	b.n	800921a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 8009216:	2300      	movs	r3, #0
 8009218:	e000      	b.n	800921c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800921a:	e7d3      	b.n	80091c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	00800013 	.word	0x00800013

08009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3310      	adds	r3, #16
 8009234:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	f083 0301 	eor.w	r3, r3, #1
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 ff1a 	bl	800a07e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	791b      	ldrb	r3, [r3, #4]
  }
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 8009256:	b590      	push	{r4, r7, lr}
 8009258:	b089      	sub	sp, #36	@ 0x24
 800925a:	af00      	add	r7, sp, #0
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	713a      	strb	r2, [r7, #4]
 8009262:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8009264:	463b      	mov	r3, r7
 8009266:	4618      	mov	r0, r3
 8009268:	f7fd fa03 	bl	8006672 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8009272:	2305      	movs	r3, #5
 8009274:	e071      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fbcf 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff ff9d 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009282:	4603      	mov	r3, r0
 8009284:	77fb      	strb	r3, [r7, #31]
    if (err)
 8009286:	7ffb      	ldrb	r3, [r7, #31]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 800928c:	7ffb      	ldrb	r3, [r7, #31]
 800928e:	e064      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8009290:	215d      	movs	r1, #93	@ 0x5d
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fbce 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 800929e:	2300      	movs	r3, #0
 80092a0:	e05b      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	f107 0214 	add.w	r2, r7, #20
 80092aa:	1d3b      	adds	r3, r7, #4
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fbdd 	bl	8009a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 80092b4:	f107 0310 	add.w	r3, r7, #16
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fd f97d 	bl	80065b8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01c      	beq.n	80092fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	4619      	mov	r1, r3
 80092ca:	68b8      	ldr	r0, [r7, #8]
 80092cc:	f7fc fd3f 	bl	8005d4e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 80092d0:	61b8      	str	r0, [r7, #24]
        if (!value)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 80092d8:	2304      	movs	r3, #4
 80092da:	e03e      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 80092dc:	463b      	mov	r3, r7
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd f9b4 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80092e4:	4603      	mov	r3, r0
 80092e6:	4622      	mov	r2, r4
 80092e8:	69b9      	ldr	r1, [r7, #24]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff fd26 	bl	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80092f0:	4603      	mov	r3, r0
 80092f2:	77fb      	strb	r3, [r7, #31]
        if (err)
 80092f4:	7ffb      	ldrb	r3, [r7, #31]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80092fa:	7ffb      	ldrb	r3, [r7, #31]
 80092fc:	e02d      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 80092fe:	463b      	mov	r3, r7
 8009300:	4618      	mov	r0, r3
 8009302:	f7fd f9a3 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009306:	4603      	mov	r3, r0
 8009308:	4619      	mov	r1, r3
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fbbc 	bl	8009a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009310:	4603      	mov	r3, r0
 8009312:	77fb      	strb	r3, [r7, #31]
        if (err)
 8009314:	7ffb      	ldrb	r3, [r7, #31]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800931a:	7ffb      	ldrb	r3, [r7, #31]
 800931c:	e01d      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff ff4c 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009324:	4603      	mov	r3, r0
 8009326:	77fb      	strb	r3, [r7, #31]
      if (err)
 8009328:	7ffb      	ldrb	r3, [r7, #31]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800932e:	7ffb      	ldrb	r3, [r7, #31]
 8009330:	e013      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 8009332:	215d      	movs	r1, #93	@ 0x5d
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f000 fb7d 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8009340:	2300      	movs	r3, #0
 8009342:	e00a      	b.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 8009344:	212c      	movs	r1, #44	@ 0x2c
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fb74 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800934c:	4603      	mov	r3, r0
 800934e:	f083 0301 	eor.w	r3, r3, #1
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0ad      	beq.n	80092b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8009358:	2303      	movs	r3, #3
  }
 800935a:	4618      	mov	r0, r3
 800935c:	3724      	adds	r7, #36	@ 0x24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd90      	pop	{r4, r7, pc}

08009362 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800936c:	463b      	mov	r3, r7
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd f97f 	bl	8006672 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800937a:	2305      	movs	r3, #5
 800937c:	e030      	b.n	80093e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fb4b 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8009384:	463b      	mov	r3, r7
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd f960 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800938c:	4603      	mov	r3, r0
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fb79 	bl	8009a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]
      if (err)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	e01d      	b.n	80093e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff ff09 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]
      if (err)
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	e013      	b.n	80093e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 80093b8:	215d      	movs	r1, #93	@ 0x5d
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb3a 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e00a      	b.n	80093e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 80093ca:	212c      	movs	r1, #44	@ 0x2c
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fb31 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f083 0301 	eor.w	r3, r3, #1
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0d2      	beq.n	8009384 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 80093de:	2303      	movs	r3, #3
  }
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b091      	sub	sp, #68	@ 0x44
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	713a      	strb	r2, [r7, #4]
 80093f4:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80093f6:	463b      	mov	r3, r7
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fd f93a 	bl	8006672 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8009404:	2305      	movs	r3, #5
 8009406:	e0d7      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fb06 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fed4 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009414:	4603      	mov	r3, r0
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800941a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8009422:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009426:	e0c7      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8009428:	217d      	movs	r1, #125	@ 0x7d
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 fb02 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8009436:	2300      	movs	r3, #0
 8009438:	e0be      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fbba 	bl	8009bb4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8009446:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800944e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009452:	e0b1      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff feb1 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8009460:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8009468:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800946c:	e0a4      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 800946e:	213a      	movs	r1, #58	@ 0x3a
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fadf 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009476:	4603      	mov	r3, r0
 8009478:	f083 0301 	eor.w	r3, r3, #1
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8009482:	2303      	movs	r3, #3
 8009484:	e098      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f7fc ff92 	bl	80063b8 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8009494:	f107 0214 	add.w	r2, r7, #20
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	4611      	mov	r1, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fba9 	bl	8009bf4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 80094a2:	f107 0310 	add.w	r3, r7, #16
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fd f886 	bl	80065b8 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d040      	beq.n	8009534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 80094b2:	f107 0320 	add.w	r3, r7, #32
 80094b6:	f107 0214 	add.w	r2, r7, #20
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe f9c0 	bl	8007842 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	f107 0320 	add.w	r3, r7, #32
 80094cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094ce:	68b8      	ldr	r0, [r7, #8]
 80094d0:	f7fe ff21 	bl	8008316 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80094d4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d111      	bne.n	8009500 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fc fee6 	bl	80062b0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80094e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094ee:	68b8      	ldr	r0, [r7, #8]
 80094f0:	f000 fb8c 	bl	8009c0c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 80094f4:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d107      	bne.n	800950c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 80094fc:	2304      	movs	r3, #4
 80094fe:	e05b      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	4619      	mov	r1, r3
 8009506:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009508:	f7fc ffd6 	bl	80064b8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 800950c:	463b      	mov	r3, r7
 800950e:	4618      	mov	r0, r3
 8009510:	f7fd f89c 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009514:	4603      	mov	r3, r0
 8009516:	4622      	mov	r2, r4
 8009518:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fc0e 	bl	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009520:	4603      	mov	r3, r0
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8009526:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800952a:	2b00      	cmp	r3, #0
 800952c:	d015      	beq.n	800955a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800952e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009532:	e041      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 8009534:	463b      	mov	r3, r7
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd f888 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800953c:	4603      	mov	r3, r0
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 faa1 	bl	8009a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800954c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8009554:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009558:	e02e      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fe2e 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009560:	4603      	mov	r3, r0
 8009562:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8009566:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 800956e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009572:	e021      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 8009574:	217d      	movs	r1, #125	@ 0x7d
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fa5c 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8009582:	2300      	movs	r3, #0
 8009584:	e018      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8009586:	212c      	movs	r1, #44	@ 0x2c
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fa53 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800958e:	4603      	mov	r3, r0
 8009590:	f083 0301 	eor.w	r3, r3, #1
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 800959a:	2303      	movs	r3, #3
 800959c:	e00c      	b.n	80095b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff fe0c 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80095aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f43f af43 	beq.w	800943a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 80095b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 80095b8:	4618      	mov	r0, r3
 80095ba:	373c      	adds	r7, #60	@ 0x3c
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd90      	pop	{r4, r7, pc}

080095c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80095ca:	463b      	mov	r3, r7
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd f850 	bl	8006672 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80095d8:	2305      	movs	r3, #5
 80095da:	e06d      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa1c 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fdea 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
    if (err)
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	e060      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 80095f6:	217d      	movs	r1, #125	@ 0x7d
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa1b 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8009604:	2300      	movs	r3, #0
 8009606:	e057      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fb54 	bl	8009cb6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	e04d      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff fdcd 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	e043      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8009630:	213a      	movs	r1, #58	@ 0x3a
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f9fe 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009638:	4603      	mov	r3, r0
 800963a:	f083 0301 	eor.w	r3, r3, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8009644:	2303      	movs	r3, #3
 8009646:	e037      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8009648:	463b      	mov	r3, r7
 800964a:	4618      	mov	r0, r3
 800964c:	f7fc fffe 	bl	800664c <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009650:	4603      	mov	r3, r0
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fa17 	bl	8009a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	e027      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fda7 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	e01d      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800967c:	217d      	movs	r1, #125	@ 0x7d
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9d8 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800968a:	2300      	movs	r3, #0
 800968c:	e014      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800968e:	212c      	movs	r1, #44	@ 0x2c
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f9cf 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009696:	4603      	mov	r3, r0
 8009698:	f083 0301 	eor.w	r3, r3, #1
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e008      	b.n	80096b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff fd88 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
      if (err)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0a8      	beq.n	8009608 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
  }
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fc fdd7 	bl	8006280 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fb0b 	bl	8009cee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
    if (err)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	e009      	b.n	80096fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fc fde1 	bl	80062b0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 80096ee:	4603      	mov	r3, r0
 80096f0:	4619      	mov	r1, r3
 80096f2:	6838      	ldr	r0, [r7, #0]
 80096f4:	f7fc f83f 	bl	8005776 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 80096f8:	2300      	movs	r3, #0
  }
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fd8c 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
    move();
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f980 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fd84 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009720:	4603      	mov	r3, r0
 8009722:	73bb      	strb	r3, [r7, #14]
      move();
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f978 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 800972a:	7bba      	ldrb	r2, [r7, #14]
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	429a      	cmp	r2, r3
 8009730:	d016      	beq.n	8009760 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8009738:	2302      	movs	r3, #2
 800973a:	e013      	b.n	8009764 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b5c      	cmp	r3, #92	@ 0x5c
 8009740:	d1eb      	bne.n	800971a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fd70 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf14      	ite	ne
 800974e:	2301      	movne	r3, #1
 8009750:	2300      	moveq	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0e0      	beq.n	800971a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f95e 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 800975e:	e7dc      	b.n	800971a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8009760:	bf00      	nop
    return DeserializationError::Ok;
 8009762:	2300      	movs	r3, #0
  }
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
    while (*s) {
 8009776:	e016      	b.n	80097a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fd55 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8009788:	2302      	movs	r3, #2
 800978a:	e011      	b.n	80097b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	7bfa      	ldrb	r2, [r7, #15]
 8009792:	429a      	cmp	r2, r3
 8009794:	d001      	beq.n	800979a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8009796:	2303      	movs	r3, #3
 8009798:	e00a      	b.n	80097b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	603b      	str	r3, [r7, #0]
      move();
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f93a 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e4      	bne.n	8009778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 80097ae:	2300      	movs	r3, #0
  }
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08a      	sub	sp, #40	@ 0x28
 80097bc:	af02      	add	r7, sp, #8
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff fd2e 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80097cc:	4603      	mov	r3, r0
 80097ce:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80097d0:	e00f      	b.n	80097f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f921 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 80097d8:	7fba      	ldrb	r2, [r7, #30]
 80097da:	7ffb      	ldrb	r3, [r7, #31]
 80097dc:	1c59      	adds	r1, r3, #1
 80097de:	77f9      	strb	r1, [r7, #31]
 80097e0:	4619      	mov	r1, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	440b      	add	r3, r1
 80097e6:	771a      	strb	r2, [r3, #28]
      c = current();
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fd1d 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80097ee:	4603      	mov	r3, r0
 80097f0:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80097f2:	7fbb      	ldrb	r3, [r7, #30]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fafb 	bl	8009df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009800:	7ffb      	ldrb	r3, [r7, #31]
 8009802:	2b3e      	cmp	r3, #62	@ 0x3e
 8009804:	d801      	bhi.n	800980a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e0      	bne.n	80097d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8009810:	7ffb      	ldrb	r3, [r7, #31]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4413      	add	r3, r2
 8009816:	2200      	movs	r2, #0
 8009818:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f103 021c 	add.w	r2, r3, #28
 8009820:	f107 0308 	add.w	r3, r7, #8
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7fd f8e0 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	4618      	mov	r0, r3
 8009832:	f7fd f894 	bl	800695e <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8009836:	4603      	mov	r3, r0
 8009838:	3b01      	subs	r3, #1
 800983a:	2b03      	cmp	r3, #3
 800983c:	d85e      	bhi.n	80098fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 800983e:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	080098a5 	.word	0x080098a5
 8009848:	0800987d 	.word	0x0800987d
 800984c:	08009855 	.word	0x08009855
 8009850:	080098d1 	.word	0x080098d1
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd f89a 	bl	8006992 <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	6989      	ldr	r1, [r1, #24]
 8009866:	9100      	str	r1, [sp, #0]
 8009868:	6838      	ldr	r0, [r7, #0]
 800986a:	f000 fae5 	bl	8009e38 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8009874:	2300      	movs	r3, #0
 8009876:	e042      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009878:	2304      	movs	r3, #4
 800987a:	e040      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd f878 	bl	8006976 <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	6989      	ldr	r1, [r1, #24]
 800988e:	9100      	str	r1, [sp, #0]
 8009890:	6838      	ldr	r0, [r7, #0]
 8009892:	f000 fb13 	bl	8009ebc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 800989c:	2300      	movs	r3, #0
 800989e:	e02e      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098a0:	2304      	movs	r3, #4
 80098a2:	e02c      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd f880 	bl	80069ae <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 80098ae:	eef0 7a40 	vmov.f32	s15, s0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	4619      	mov	r1, r3
 80098b8:	eeb0 0a67 	vmov.f32	s0, s15
 80098bc:	6838      	ldr	r0, [r7, #0]
 80098be:	f000 fb3f 	bl	8009f40 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e018      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098cc:	2304      	movs	r3, #4
 80098ce:	e016      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 80098d0:	f107 0308 	add.w	r3, r7, #8
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fd f879 	bl	80069cc <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 80098da:	eeb0 7b40 	vmov.f64	d7, d0
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	4619      	mov	r1, r3
 80098e4:	eeb0 0b47 	vmov.f64	d0, d7
 80098e8:	6838      	ldr	r0, [r7, #0]
 80098ea:	f000 fb3d 	bl	8009f68 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 80098f4:	2300      	movs	r3, #0
 80098f6:	e002      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098f8:	2304      	movs	r3, #4
 80098fa:	e000      	b.n	80098fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 80098fc:	2303      	movs	r3, #3
  }
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop

08009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    char c = current();
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7ff fc89 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800991a:	e007      	b.n	800992c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f87c 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fc80 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fa5e 	bl	8009df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f0      	bne.n	800991c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800993a:	2300      	movs	r3, #0
  }
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7fc f990 	bl	8005c72 <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8009952:	4603      	mov	r3, r0
  }
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fb4c 	bl	800a002 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 800996a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800996e:	eeb0 0a67 	vmov.f32	s0, s15
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b085      	sub	sp, #20
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fb4c 	bl	800a022 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800998a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff ffd7 	bl	8009944 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8009996:	4602      	mov	r2, r0
    return VariantData::getMember(
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	9200      	str	r2, [sp, #0]
 800999c:	330c      	adds	r3, #12
 800999e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 f821 	bl	80099e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 80099a6:	4603      	mov	r3, r0
  }
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd90      	pop	{r4, r7, pc}

080099b0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 80099b8:	4804      	ldr	r0, [pc, #16]	@ (80099cc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 80099ba:	f7ff ffcf 	bl	800995c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80099be:	eef0 7a40 	vmov.f32	s15, s0
  }
 80099c2:	eeb0 0a67 	vmov.f32	s0, s15
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	4f7fffff 	.word	0x4f7fffff

080099d0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
    return client.getData();
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7fc f9a0 	bl	8005d1e <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 80099de:	4603      	mov	r3, r0
  }
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	4638      	mov	r0, r7
 80099f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e008      	b.n	8009a12 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	463b      	mov	r3, r7
 8009a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a0a:	f000 fb16 	bl	800a03a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	bf00      	nop
  }
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fb1c 	bl	800a064 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7ff fbf1 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009a46:	4603      	mov	r3, r0
 8009a48:	461a      	mov	r2, r3
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	bf14      	ite	ne
 8009a50:	2301      	movne	r3, #1
 8009a52:	2300      	moveq	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e003      	b.n	8009a66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff ffdb 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8009a64:	2301      	movs	r3, #1
  }
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009a78:	bf00      	nop
  }
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fb92 	bl	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	e07c      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff fbbe 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b7b      	cmp	r3, #123	@ 0x7b
 8009ab0:	dc71      	bgt.n	8009b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009ab2:	2b5b      	cmp	r3, #91	@ 0x5b
 8009ab4:	da04      	bge.n	8009ac0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8009ab6:	2b22      	cmp	r3, #34	@ 0x22
 8009ab8:	d056      	beq.n	8009b68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8009aba:	2b27      	cmp	r3, #39	@ 0x27
 8009abc:	d054      	beq.n	8009b68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8009abe:	e06a      	b.n	8009b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009ac0:	3b5b      	subs	r3, #91	@ 0x5b
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d867      	bhi.n	8009b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8009acc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b51 	.word	0x08009b51
 8009ad0:	08009b97 	.word	0x08009b97
 8009ad4:	08009b97 	.word	0x08009b97
 8009ad8:	08009b97 	.word	0x08009b97
 8009adc:	08009b97 	.word	0x08009b97
 8009ae0:	08009b97 	.word	0x08009b97
 8009ae4:	08009b97 	.word	0x08009b97
 8009ae8:	08009b97 	.word	0x08009b97
 8009aec:	08009b97 	.word	0x08009b97
 8009af0:	08009b97 	.word	0x08009b97
 8009af4:	08009b97 	.word	0x08009b97
 8009af8:	08009b7f 	.word	0x08009b7f
 8009afc:	08009b97 	.word	0x08009b97
 8009b00:	08009b97 	.word	0x08009b97
 8009b04:	08009b97 	.word	0x08009b97
 8009b08:	08009b97 	.word	0x08009b97
 8009b0c:	08009b97 	.word	0x08009b97
 8009b10:	08009b97 	.word	0x08009b97
 8009b14:	08009b97 	.word	0x08009b97
 8009b18:	08009b8b 	.word	0x08009b8b
 8009b1c:	08009b97 	.word	0x08009b97
 8009b20:	08009b97 	.word	0x08009b97
 8009b24:	08009b97 	.word	0x08009b97
 8009b28:	08009b97 	.word	0x08009b97
 8009b2c:	08009b97 	.word	0x08009b97
 8009b30:	08009b73 	.word	0x08009b73
 8009b34:	08009b97 	.word	0x08009b97
 8009b38:	08009b97 	.word	0x08009b97
 8009b3c:	08009b97 	.word	0x08009b97
 8009b40:	08009b97 	.word	0x08009b97
 8009b44:	08009b97 	.word	0x08009b97
 8009b48:	08009b97 	.word	0x08009b97
 8009b4c:	08009b5d 	.word	0x08009b5d
        return skipArray(nestingLimit);
 8009b50:	7839      	ldrb	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fc05 	bl	8009362 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	e021      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8009b5c:	7839      	ldrb	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fd2e 	bl	80095c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8009b64:	4603      	mov	r3, r0
 8009b66:	e01b      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fdca 	bl	8009702 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	e016      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8009b72:	490d      	ldr	r1, [pc, #52]	@ (8009ba8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fdf9 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	e010      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8009b7e:	490b      	ldr	r1, [pc, #44]	@ (8009bac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fdf3 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009b86:	4603      	mov	r3, r0
 8009b88:	e00a      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8009b8a:	4909      	ldr	r1, [pc, #36]	@ (8009bb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fded 	bl	800976c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009b92:	4603      	mov	r3, r0
 8009b94:	e004      	b.n	8009ba0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff feb6 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	bf00      	nop
  }
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	0802a598 	.word	0x0802a598
 8009bac:	0802a5a0 	.word	0x0802a5a0
 8009bb0:	0802a5a8 	.word	0x0802a5a8

08009bb4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fc fb5e 	bl	8006280 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fb2f 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fa6c 	bl	800a0aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d004      	beq.n	8009be2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f888 	bl	8009cee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009bde:	4603      	mov	r3, r0
 8009be0:	e004      	b.n	8009bec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa75 	bl	800a0d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8009be8:	4603      	mov	r3, r0
 8009bea:	bf00      	nop
  }
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009bfe:	bf00      	nop
  }
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	@ 0x28
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8009c18:	f107 0318 	add.w	r3, r7, #24
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fc f9de 	bl	8005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8009c24:	f107 0318 	add.w	r3, r7, #24
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fd fc7d 	bl	8007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f083 0301 	eor.w	r3, r3, #1
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e037      	b.n	8009cae <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8009c3e:	f107 0310 	add.w	r3, r7, #16
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fc f9cb 	bl	8005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8009c4a:	f107 0310 	add.w	r3, r7, #16
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fd fc6a 	bl	8007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f083 0301 	eor.w	r3, r3, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8009c60:	2300      	movs	r3, #0
 8009c62:	e024      	b.n	8009cae <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8009c64:	f107 0318 	add.w	r3, r7, #24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fd fc86 	bl	800757a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fb fd6f 	bl	8005758 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	f083 0301 	eor.w	r3, r3, #1
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e011      	b.n	8009cae <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f107 0218 	add.w	r2, r7, #24
 8009c9a:	ca06      	ldmia	r2, {r1, r2}
 8009c9c:	f7fc f919 	bl	8005ed2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8009ca0:	f107 0310 	add.w	r3, r7, #16
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fd fc50 	bl	800754a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	bf00      	nop
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3720      	adds	r7, #32
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff fab2 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f9ef 	bl	800a0aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fd15 	bl	8009702 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	e004      	b.n	8009ce6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa31 	bl	800a144 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	bf00      	nop
  }
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b086      	sub	sp, #24
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fc fd14 	bl	8006728 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff fa91 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75bb      	strb	r3, [r7, #22]
    move();
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff fe85 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff fa89 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]
      move();
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fe7d 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009d20:	7dfa      	ldrb	r2, [r7, #23]
 8009d22:	7dbb      	ldrb	r3, [r7, #22]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d051      	beq.n	8009dcc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e05a      	b.n	8009de8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d36:	d140      	bne.n	8009dba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fa75 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e04d      	b.n	8009de8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b75      	cmp	r3, #117	@ 0x75
 8009d50:	d125      	bne.n	8009d9e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fe61 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8009d58:	f107 030a 	add.w	r3, r7, #10
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa0e 	bl	800a180 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8009d64:	4603      	mov	r3, r0
 8009d66:	757b      	strb	r3, [r7, #21]
          if (err)
 8009d68:	7d7b      	ldrb	r3, [r7, #21]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8009d6e:	7d7b      	ldrb	r3, [r7, #21]
 8009d70:	e03a      	b.n	8009de8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8009d72:	897a      	ldrh	r2, [r7, #10]
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fc fce5 	bl	800674a <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d020      	beq.n	8009dc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8009d86:	f107 030c 	add.w	r3, r7, #12
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fc fd0f 	bl	80067ae <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8009d90:	4602      	mov	r2, r0
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4619      	mov	r1, r3
 8009d96:	4610      	mov	r0, r2
 8009d98:	f000 fa2b 	bl	800a1f2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8009d9c:	e7b8      	b.n	8009d10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fc fa0c 	bl	80061be <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e019      	b.n	8009de8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff fe30 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7dfa      	ldrb	r2, [r7, #23]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fc fab6 	bl	8006332 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8009dc6:	e7a3      	b.n	8009d10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8009dc8:	bf00      	nop
    for (;;) {
 8009dca:	e7a1      	b.n	8009d10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8009dcc:	bf00      	nop
    if (!stringBuilder_.isValid())
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fc fae0 	bl	8006396 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f083 0301 	eor.w	r3, r3, #1
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8009de2:	2304      	movs	r3, #4
 8009de4:	e000      	b.n	8009de8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8009de6:	2300      	movs	r3, #0
  }
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	2239      	movs	r2, #57	@ 0x39
 8009dfe:	2130      	movs	r1, #48	@ 0x30
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fa7a 	bl	800a2fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009e06:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10e      	bne.n	8009e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e10:	d00b      	beq.n	8009e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e16:	d008      	beq.n	8009e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e1c:	d005      	beq.n	8009e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	2b65      	cmp	r3, #101	@ 0x65
 8009e22:	d002      	beq.n	8009e2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8009e24:	79fb      	ldrb	r3, [r7, #7]
 8009e26:	2b45      	cmp	r3, #69	@ 0x45
 8009e28:	d101      	bne.n	8009e2e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e000      	b.n	8009e30 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8009e2e:	2300      	movs	r3, #0
  }
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8009e38:	b5b0      	push	{r4, r5, r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8009e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e48:	f7ff f8be 	bl	8008fc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	220a      	movs	r2, #10
 8009e56:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e028      	b.n	8009eb2 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8009e60:	f107 0310 	add.w	r3, r7, #16
 8009e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fc f93f 	bl	80060ea <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009e6c:	f107 0310 	add.w	r3, r7, #16
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 fa5c 	bl	800a32e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f083 0301 	eor.w	r3, r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009e82:	2300      	movs	r3, #0
 8009e84:	e016      	b.n	8009eb4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	221a      	movs	r2, #26
 8009e8a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009e8c:	f107 0310 	add.w	r3, r7, #16
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fa5d 	bl	800a350 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009e96:	4603      	mov	r3, r0
 8009e98:	461a      	mov	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8009e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fa5e 	bl	800a368 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009eac:	4603      	mov	r3, r0
 8009eae:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8009eb2:	2301      	movs	r3, #1
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bdb0      	pop	{r4, r5, r7, pc}

08009ebc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8009ebc:	b5b0      	push	{r4, r5, r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8009ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ecc:	f000 fa58 	bl	800a380 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	220c      	movs	r2, #12
 8009eda:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e028      	b.n	8009f36 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8009ee4:	f107 0310 	add.w	r3, r7, #16
 8009ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fc f8fd 	bl	80060ea <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009ef0:	f107 0310 	add.w	r3, r7, #16
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 fa1a 	bl	800a32e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f083 0301 	eor.w	r3, r3, #1
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e016      	b.n	8009f38 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	221c      	movs	r2, #28
 8009f0e:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009f10:	f107 0310 	add.w	r3, r7, #16
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fa1b 	bl	800a350 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8009f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f26:	f107 0310 	add.w	r3, r7, #16
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fa1c 	bl	800a368 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009f30:	4603      	mov	r3, r0
 8009f32:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009f36:	2301      	movs	r3, #1
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bdb0      	pop	{r4, r5, r7, pc}

08009f40 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	ed87 0a02 	vstr	s0, [r7, #8]
 8009f4c:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	220e      	movs	r2, #14
 8009f52:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	601a      	str	r2, [r3, #0]
    return true;
 8009f5a:	2301      	movs	r3, #1
  }
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	ed87 0b00 	vstr	d0, [r7]
 8009f74:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8009f76:	ed97 7b00 	vldr	d7, [r7]
 8009f7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009f7e:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8009f82:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009f8a:	ed97 6b00 	vldr	d6, [r7]
 8009f8e:	eeb4 6b47 	vcmp.f64	d6, d7
 8009f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f96:	d106      	bne.n	8009fa6 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	220e      	movs	r2, #14
 8009f9c:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	e028      	b.n	8009ff8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8009fa6:	f107 0314 	add.w	r3, r7, #20
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fc f89c 	bl	80060ea <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009fb2:	f107 0314 	add.w	r3, r7, #20
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f9b9 	bl	800a32e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f083 0301 	eor.w	r3, r3, #1
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e016      	b.n	8009ffa <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	221e      	movs	r2, #30
 8009fd0:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009fd2:	f107 0314 	add.w	r3, r7, #20
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f9ba 	bl	800a350 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8009fe4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fe8:	f107 0314 	add.w	r3, r7, #20
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 f9bb 	bl	800a368 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009ff8:	2301      	movs	r3, #1
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3720      	adds	r7, #32
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bdb0      	pop	{r4, r5, r7, pc}

0800a002 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]
  return ac.data;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	ee07 3a90 	vmov	s15, r3
}
 800a014:	eeb0 0a67 	vmov.f32	s0, s15
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
    return client.getData();
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fb fe2d 	bl	8005c8a <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 800a030:	4603      	mov	r3, r0
  }
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b086      	sub	sp, #24
 800a03e:	af02      	add	r7, sp, #8
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	4638      	mov	r0, r7
 800a044:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7fb faf3 	bl	8005634 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	463b      	mov	r3, r7
 800a054:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a056:	f7fd fe75 	bl	8007d44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 800a05a:	4603      	mov	r3, r0
  }
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	715a      	strb	r2, [r3, #5]
  }
 800a072:	bf00      	nop
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f99f 	bl	800a3cc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 800a08e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a096:	b2da      	uxtb	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	715a      	strb	r2, [r3, #5]
  }
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	2b27      	cmp	r3, #39	@ 0x27
 800a0b8:	d002      	beq.n	800a0c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b22      	cmp	r3, #34	@ 0x22
 800a0be:	d101      	bne.n	800a0c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 800a0c4:	2300      	movs	r3, #0
  }
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
    char c = current();
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff f8a4 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f980 	bl	800a3ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d015      	beq.n	800a11e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff fc91 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7bfa      	ldrb	r2, [r7, #15]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fc f917 	bl	8006332 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff f88f 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f96b 	bl	800a3ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1ea      	bne.n	800a0f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 800a11c:	e001      	b.n	800a122 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 800a11e:	2303      	movs	r3, #3
 800a120:	e00c      	b.n	800a13c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	f7fc f936 	bl	8006396 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f083 0301 	eor.w	r3, r3, #1
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 800a136:	2304      	movs	r3, #4
 800a138:	e000      	b.n	800a13c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 800a13a:	2300      	movs	r3, #0
  }
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
    char c = current();
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff f86b 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800a156:	e007      	b.n	800a168 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fc5e 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff f862 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f93e 	bl	800a3ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f0      	bne.n	800a158 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 800a176:	2300      	movs	r3, #0
  }
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
    result = 0;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2200      	movs	r2, #0
 800a18e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e025      	b.n	800a1e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff f846 	bl	8009228 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e01f      	b.n	800a1ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 f944 	bl	800a43a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800a1b6:	7b7b      	ldrb	r3, [r7, #13]
 800a1b8:	2b0f      	cmp	r3, #15
 800a1ba:	d901      	bls.n	800a1c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e014      	b.n	800a1ea <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	b21a      	sxth	r2, r3
 800a1c8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ca:	b21b      	sxth	r3, r3
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b21b      	sxth	r3, r3
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	801a      	strh	r2, [r3, #0]
      move();
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff fc1f 	bl	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d9d6      	bls.n	800a196 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800a1e8:	2300      	movs	r3, #0
  }
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b086      	sub	sp, #24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a200:	d806      	bhi.n	800a210 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	4619      	mov	r1, r3
 800a208:	6838      	ldr	r0, [r7, #0]
 800a20a:	f7fc f892 	bl	8006332 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800a20e:	e070      	b.n	800a2f2 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 800a210:	f107 030c 	add.w	r3, r7, #12
 800a214:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	617a      	str	r2, [r7, #20]
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a22e:	b2d9      	uxtb	r1, r3
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	617a      	str	r2, [r7, #20]
 800a236:	460a      	mov	r2, r1
 800a238:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	099b      	lsrs	r3, r3, #6
 800a23e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800a240:	8a7b      	ldrh	r3, [r7, #18]
 800a242:	2b1f      	cmp	r3, #31
 800a244:	d80a      	bhi.n	800a25c <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 800a246:	8a7b      	ldrh	r3, [r7, #18]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800a24e:	b2d9      	uxtb	r1, r3
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	617a      	str	r2, [r7, #20]
 800a256:	460a      	mov	r2, r1
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	e03e      	b.n	800a2da <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a25c:	8a7b      	ldrh	r3, [r7, #18]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a26a:	b2d9      	uxtb	r1, r3
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	617a      	str	r2, [r7, #20]
 800a272:	460a      	mov	r2, r1
 800a274:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800a276:	8a7b      	ldrh	r3, [r7, #18]
 800a278:	099b      	lsrs	r3, r3, #6
 800a27a:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800a27c:	8a7b      	ldrh	r3, [r7, #18]
 800a27e:	2b0f      	cmp	r3, #15
 800a280:	d80a      	bhi.n	800a298 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 800a282:	8a7b      	ldrh	r3, [r7, #18]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	f063 031f 	orn	r3, r3, #31
 800a28a:	b2d9      	uxtb	r1, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	617a      	str	r2, [r7, #20]
 800a292:	460a      	mov	r2, r1
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	e020      	b.n	800a2da <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a298:	8a7b      	ldrh	r3, [r7, #18]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2a6:	b2d9      	uxtb	r1, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	617a      	str	r2, [r7, #20]
 800a2ae:	460a      	mov	r2, r1
 800a2b0:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800a2b2:	8a7b      	ldrh	r3, [r7, #18]
 800a2b4:	099b      	lsrs	r3, r3, #6
 800a2b6:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800a2b8:	8a7b      	ldrh	r3, [r7, #18]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	f063 030f 	orn	r3, r3, #15
 800a2c0:	b2d9      	uxtb	r1, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	617a      	str	r2, [r7, #20]
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800a2cc:	e005      	b.n	800a2da <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6838      	ldr	r0, [r7, #0]
 800a2d6:	f7fc f82c 	bl	8006332 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	bf14      	ite	ne
 800a2e8:	2301      	movne	r3, #1
 800a2ea:	2300      	moveq	r3, #0
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1ed      	bne.n	800a2ce <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 800a2f2:	bf00      	nop
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	4603      	mov	r3, r0
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	460b      	mov	r3, r1
 800a306:	71bb      	strb	r3, [r7, #6]
 800a308:	4613      	mov	r3, r2
 800a30a:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800a30c:	79ba      	ldrb	r2, [r7, #6]
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	429a      	cmp	r2, r3
 800a312:	d805      	bhi.n	800a320 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a314:	79fa      	ldrb	r2, [r7, #7]
 800a316:	797b      	ldrb	r3, [r7, #5]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d801      	bhi.n	800a320 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 800a320:	2300      	movs	r3, #0
  }
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bf14      	ite	ne
 800a33e:	2301      	movne	r3, #1
 800a340:	2300      	moveq	r3, #0
 800a342:	b2db      	uxtb	r3, r3
  }
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
    return id_;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	889b      	ldrh	r3, [r3, #4]
  }
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
    return ptr_;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
  }
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a38c:	f000 f86e 	bl	800a46c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a390:	4603      	mov	r3, r0
 800a392:	17da      	asrs	r2, r3, #31
 800a394:	4698      	mov	r8, r3
 800a396:	4691      	mov	r9, r2
 800a398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39c:	4542      	cmp	r2, r8
 800a39e:	eb73 0309 	sbcs.w	r3, r3, r9
 800a3a2:	db0d      	blt.n	800a3c0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800a3a4:	f000 f86b 	bl	800a47e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	17da      	asrs	r2, r3, #31
 800a3ac:	461c      	mov	r4, r3
 800a3ae:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b4:	4294      	cmp	r4, r2
 800a3b6:	eb75 0303 	sbcs.w	r3, r5, r3
 800a3ba:	db01      	blt.n	800a3c0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a3cc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	1c59      	adds	r1, r3, #1
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	6011      	str	r1, [r2, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
  }
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	2239      	movs	r2, #57	@ 0x39
 800a3fa:	2130      	movs	r1, #48	@ 0x30
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff ff7c 	bl	800a2fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d111      	bne.n	800a42c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	227a      	movs	r2, #122	@ 0x7a
 800a40c:	215f      	movs	r1, #95	@ 0x5f
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff ff73 	bl	800a2fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d108      	bne.n	800a42c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	225a      	movs	r2, #90	@ 0x5a
 800a41e:	2141      	movs	r1, #65	@ 0x41
 800a420:	4618      	mov	r0, r3
 800a422:	f7ff ff6a 	bl	800a2fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a426:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800a42c:	2301      	movs	r3, #1
 800a42e:	e000      	b.n	800a432 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 800a430:	2300      	movs	r3, #0
  }
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	4603      	mov	r3, r0
 800a442:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b40      	cmp	r3, #64	@ 0x40
 800a448:	d803      	bhi.n	800a452 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	3b30      	subs	r3, #48	@ 0x30
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	e006      	b.n	800a460 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	f023 0320 	bic.w	r3, r3, #32
 800a458:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	3b37      	subs	r3, #55	@ 0x37
 800a45e:	b2db      	uxtb	r3, r3
  }
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a470:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800a474:	4618      	mov	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800a47e:	b580      	push	{r7, lr}
 800a480:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a482:	f7ff fff3 	bl	800a46c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a486:	4603      	mov	r3, r0
 800a488:	43db      	mvns	r3, r3
  }
 800a48a:	4618      	mov	r0, r3
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a498:	1d39      	adds	r1, r7, #4
 800a49a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4803      	ldr	r0, [pc, #12]	@ (800a4b0 <__io_putchar+0x20>)
 800a4a2:	f019 fdda 	bl	802405a <HAL_UART_Transmit>
	  return ch;
 800a4a6:	687b      	ldr	r3, [r7, #4]
	}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	24000378 	.word	0x24000378

0800a4b4 <main>:
}

int main(void)
{
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
	MPU_Config();
 800a4ba:	f000 fa55 	bl	800a968 <_ZL10MPU_Configv>
	HAL_Init();
 800a4be:	f011 fb2b 	bl	801bb18 <HAL_Init>
	SystemClock_Config();
 800a4c2:	f000 f867 	bl	800a594 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800a4c6:	f000 f92f 	bl	800a728 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a4ca:	f3bf 8f4f 	dsb	sy
}
 800a4ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4d0:	f3bf 8f6f 	isb	sy
}
 800a4d4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800a4d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a58c <main+0xd8>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a4de:	f3bf 8f4f 	dsb	sy
}
 800a4e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4e4:	f3bf 8f6f 	isb	sy
}
 800a4e8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800a4ea:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a4ec:	4b27      	ldr	r3, [pc, #156]	@ (800a58c <main+0xd8>)
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d11b      	bne.n	800a53a <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 800a502:	f3bf 8f4f 	dsb	sy
}
 800a506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a508:	f3bf 8f6f 	isb	sy
}
 800a50c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a50e:	4b1f      	ldr	r3, [pc, #124]	@ (800a58c <main+0xd8>)
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a516:	f3bf 8f4f 	dsb	sy
}
 800a51a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a51c:	f3bf 8f6f 	isb	sy
}
 800a520:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a522:	4b1a      	ldr	r3, [pc, #104]	@ (800a58c <main+0xd8>)
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	4a19      	ldr	r2, [pc, #100]	@ (800a58c <main+0xd8>)
 800a528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a52c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a52e:	f3bf 8f4f 	dsb	sy
}
 800a532:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a534:	f3bf 8f6f 	isb	sy
}
 800a538:	e000      	b.n	800a53c <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a53a:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800a53c:	4b14      	ldr	r3, [pc, #80]	@ (800a590 <main+0xdc>)
 800a53e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a542:	4a13      	ldr	r2, [pc, #76]	@ (800a590 <main+0xdc>)
 800a544:	f043 0301 	orr.w	r3, r3, #1
 800a548:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a54c:	4b10      	ldr	r3, [pc, #64]	@ (800a590 <main+0xdc>)
 800a54e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800a55a:	f000 f9a9 	bl	800a8b0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800a55e:	f000 f947 	bl	800a7f0 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 800a562:	f000 f919 	bl	800a798 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800a566:	f01b fc5d 	bl	8025e24 <MX_FATFS_Init>

	Remora *remora = new Remora();
 800a56a:	2044      	movs	r0, #68	@ 0x44
 800a56c:	f01e f888 	bl	8028680 <_Znwj>
 800a570:	4603      	mov	r3, r0
 800a572:	461c      	mov	r4, r3
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fe61 	bl	800b23c <_ZN6RemoraC1Ev>
 800a57a:	607c      	str	r4, [r7, #4]
	remora->run();
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 f915 	bl	800b7ac <_ZN6Remora3runEv>
}
 800a582:	2300      	movs	r3, #0
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}
 800a58c:	e000ed00 	.word	0xe000ed00
 800a590:	58024400 	.word	0x58024400

0800a594 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b09e      	sub	sp, #120	@ 0x78
 800a598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a59a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a59e:	224c      	movs	r2, #76	@ 0x4c
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f01f f890 	bl	80296c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a5a8:	f107 030c 	add.w	r3, r7, #12
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f01f f889 	bl	80296c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a5b6:	2002      	movs	r0, #2
 800a5b8:	f014 fa34 	bl	801ea24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60bb      	str	r3, [r7, #8]
 800a5c0:	4b56      	ldr	r3, [pc, #344]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c4:	4a55      	ldr	r2, [pc, #340]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a5c6:	f023 0301 	bic.w	r3, r3, #1
 800a5ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5cc:	4b53      	ldr	r3, [pc, #332]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	60bb      	str	r3, [r7, #8]
 800a5d6:	4b52      	ldr	r3, [pc, #328]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	4a51      	ldr	r2, [pc, #324]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a5dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5e0:	6193      	str	r3, [r2, #24]
 800a5e2:	4b4f      	ldr	r3, [pc, #316]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a5ea:	60bb      	str	r3, [r7, #8]
 800a5ec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a5ee:	bf00      	nop
 800a5f0:	4b4b      	ldr	r3, [pc, #300]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5fc:	bf14      	ite	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	2300      	moveq	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1f3      	bne.n	800a5f0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a608:	4b46      	ldr	r3, [pc, #280]	@ (800a724 <_Z18SystemClock_Configv+0x190>)
 800a60a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a60e:	4a45      	ldr	r2, [pc, #276]	@ (800a724 <_Z18SystemClock_Configv+0x190>)
 800a610:	f043 0302 	orr.w	r3, r3, #2
 800a614:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a618:	4b42      	ldr	r3, [pc, #264]	@ (800a724 <_Z18SystemClock_Configv+0x190>)
 800a61a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	607b      	str	r3, [r7, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a626:	2300      	movs	r3, #0
 800a628:	603b      	str	r3, [r7, #0]
 800a62a:	4b3d      	ldr	r3, [pc, #244]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	4a3c      	ldr	r2, [pc, #240]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a634:	6193      	str	r3, [r2, #24]
 800a636:	4b3a      	ldr	r3, [pc, #232]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	4b36      	ldr	r3, [pc, #216]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a644:	4a35      	ldr	r2, [pc, #212]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a64c:	4b33      	ldr	r3, [pc, #204]	@ (800a71c <_Z18SystemClock_Configv+0x188>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	603b      	str	r3, [r7, #0]
 800a656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a658:	bf00      	nop
 800a65a:	4b31      	ldr	r3, [pc, #196]	@ (800a720 <_Z18SystemClock_Configv+0x18c>)
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a666:	bf14      	ite	ne
 800a668:	2301      	movne	r3, #1
 800a66a:	2300      	moveq	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f3      	bne.n	800a65a <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a672:	4b2c      	ldr	r3, [pc, #176]	@ (800a724 <_Z18SystemClock_Configv+0x190>)
 800a674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a676:	f023 0303 	bic.w	r3, r3, #3
 800a67a:	4a2a      	ldr	r2, [pc, #168]	@ (800a724 <_Z18SystemClock_Configv+0x190>)
 800a67c:	f043 0302 	orr.w	r3, r3, #2
 800a680:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a682:	2301      	movs	r3, #1
 800a684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a68a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a68c:	2302      	movs	r3, #2
 800a68e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a690:	2302      	movs	r3, #2
 800a692:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a694:	2305      	movs	r3, #5
 800a696:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a698:	23c0      	movs	r3, #192	@ 0xc0
 800a69a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a69c:	2302      	movs	r3, #2
 800a69e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a6b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f014 f9ed 	bl	801ea98 <HAL_RCC_OscConfig>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800a6ce:	f000 f993 	bl	800a9f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a6d2:	233f      	movs	r3, #63	@ 0x3f
 800a6d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a6de:	2308      	movs	r3, #8
 800a6e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a6e2:	2340      	movs	r3, #64	@ 0x40
 800a6e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a6e6:	2340      	movs	r3, #64	@ 0x40
 800a6e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a6f4:	f107 030c 	add.w	r3, r7, #12
 800a6f8:	2104      	movs	r1, #4
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f014 fe26 	bl	801f34c <HAL_RCC_ClockConfig>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	bf14      	ite	ne
 800a706:	2301      	movne	r3, #1
 800a708:	2300      	moveq	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 800a710:	f000 f972 	bl	800a9f8 <Error_Handler>
  }
}
 800a714:	bf00      	nop
 800a716:	3778      	adds	r7, #120	@ 0x78
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	58000400 	.word	0x58000400
 800a720:	58024800 	.word	0x58024800
 800a724:	58024400 	.word	0x58024400

0800a728 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b0b0      	sub	sp, #192	@ 0xc0
 800a72c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a72e:	463b      	mov	r3, r7
 800a730:	22c0      	movs	r2, #192	@ 0xc0
 800a732:	2100      	movs	r1, #0
 800a734:	4618      	mov	r0, r3
 800a736:	f01e ffc7 	bl	80296c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800a73a:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800a73e:	f04f 0300 	mov.w	r3, #0
 800a742:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800a746:	2302      	movs	r3, #2
 800a748:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800a74a:	230c      	movs	r3, #12
 800a74c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a74e:	2301      	movs	r3, #1
 800a750:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800a752:	230a      	movs	r3, #10
 800a754:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a756:	2302      	movs	r3, #2
 800a758:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a75a:	23c0      	movs	r3, #192	@ 0xc0
 800a75c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a75e:	2320      	movs	r3, #32
 800a760:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a766:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a76a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a770:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a772:	463b      	mov	r3, r7
 800a774:	4618      	mov	r0, r3
 800a776:	f015 f975 	bl	801fa64 <HAL_RCCEx_PeriphCLKConfig>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bf14      	ite	ne
 800a780:	2301      	movne	r3, #1
 800a782:	2300      	moveq	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800a78a:	f000 f935 	bl	800a9f8 <Error_Handler>
  }
}
 800a78e:	bf00      	nop
 800a790:	37c0      	adds	r7, #192	@ 0xc0
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a79c:	4b11      	ldr	r3, [pc, #68]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a79e:	4a12      	ldr	r2, [pc, #72]	@ (800a7e8 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800a7a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a7a2:	4b10      	ldr	r3, [pc, #64]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a7ae:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a7b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800a7be:	4b09      	ldr	r3, [pc, #36]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800a7c4:	4807      	ldr	r0, [pc, #28]	@ (800a7e4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7c6:	f017 fe4b 	bl	8022460 <HAL_SD_Init>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2301      	movne	r3, #1
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d002      	beq.n	800a7e0 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800a7da:	4804      	ldr	r0, [pc, #16]	@ (800a7ec <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800a7dc:	f01e fe6a 	bl	80294b4 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800a7e0:	bf00      	nop
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	240002fc 	.word	0x240002fc
 800a7e8:	52007000 	.word	0x52007000
 800a7ec:	0802a5b0 	.word	0x0802a5b0

0800a7f0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a7f4:	4b2c      	ldr	r3, [pc, #176]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a7f6:	4a2d      	ldr	r2, [pc, #180]	@ (800a8ac <_ZL19MX_USART1_UART_Initv+0xbc>)
 800a7f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 800a7fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a7fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a802:	4b29      	ldr	r3, [pc, #164]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a804:	2200      	movs	r2, #0
 800a806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a808:	4b27      	ldr	r3, [pc, #156]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a80e:	4b26      	ldr	r3, [pc, #152]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a810:	2200      	movs	r2, #0
 800a812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a814:	4b24      	ldr	r3, [pc, #144]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a816:	220c      	movs	r2, #12
 800a818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a81a:	4b23      	ldr	r3, [pc, #140]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a820:	4b21      	ldr	r3, [pc, #132]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a822:	2200      	movs	r2, #0
 800a824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a826:	4b20      	ldr	r3, [pc, #128]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a828:	2200      	movs	r2, #0
 800a82a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a82c:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a82e:	2200      	movs	r2, #0
 800a830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a832:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a834:	2200      	movs	r2, #0
 800a836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a838:	481b      	ldr	r0, [pc, #108]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a83a:	f019 fbbe 	bl	8023fba <HAL_UART_Init>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	bf14      	ite	ne
 800a844:	2301      	movne	r3, #1
 800a846:	2300      	moveq	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800a84e:	f000 f8d3 	bl	800a9f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a852:	2100      	movs	r1, #0
 800a854:	4814      	ldr	r0, [pc, #80]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a856:	f01a fc50 	bl	80250fa <HAL_UARTEx_SetTxFifoThreshold>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bf14      	ite	ne
 800a860:	2301      	movne	r3, #1
 800a862:	2300      	moveq	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800a86a:	f000 f8c5 	bl	800a9f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a86e:	2100      	movs	r1, #0
 800a870:	480d      	ldr	r0, [pc, #52]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a872:	f01a fc80 	bl	8025176 <HAL_UARTEx_SetRxFifoThreshold>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800a886:	f000 f8b7 	bl	800a9f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a88a:	4807      	ldr	r0, [pc, #28]	@ (800a8a8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a88c:	f01a fbfc 	bl	8025088 <HAL_UARTEx_DisableFifoMode>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	bf14      	ite	ne
 800a896:	2301      	movne	r3, #1
 800a898:	2300      	moveq	r3, #0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800a8a0:	f000 f8aa 	bl	800a9f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a8a4:	bf00      	nop
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	24000378 	.word	0x24000378
 800a8ac:	40011000 	.word	0x40011000

0800a8b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	@ 0x28
 800a8b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8b6:	f107 0314 	add.w	r3, r7, #20
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	605a      	str	r2, [r3, #4]
 800a8c0:	609a      	str	r2, [r3, #8]
 800a8c2:	60da      	str	r2, [r3, #12]
 800a8c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8c6:	4b26      	ldr	r3, [pc, #152]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8cc:	4a24      	ldr	r2, [pc, #144]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a8d6:	4b22      	ldr	r3, [pc, #136]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8e4:	4b1e      	ldr	r3, [pc, #120]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8ec:	f043 0304 	orr.w	r3, r3, #4
 800a8f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a902:	4b17      	ldr	r3, [pc, #92]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a908:	4a15      	ldr	r2, [pc, #84]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a90a:	f043 0301 	orr.w	r3, r3, #1
 800a90e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a912:	4b13      	ldr	r3, [pc, #76]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	60bb      	str	r3, [r7, #8]
 800a91e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a920:	4b0f      	ldr	r3, [pc, #60]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a926:	4a0e      	ldr	r2, [pc, #56]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a928:	f043 0308 	orr.w	r3, r3, #8
 800a92c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a930:	4b0b      	ldr	r3, [pc, #44]	@ (800a960 <_ZL12MX_GPIO_Initv+0xb0>)
 800a932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a936:	f003 0308 	and.w	r3, r3, #8
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a93e:	2310      	movs	r3, #16
 800a940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a942:	2300      	movs	r3, #0
 800a944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a946:	2300      	movs	r3, #0
 800a948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a94a:	f107 0314 	add.w	r3, r7, #20
 800a94e:	4619      	mov	r1, r3
 800a950:	4804      	ldr	r0, [pc, #16]	@ (800a964 <_ZL12MX_GPIO_Initv+0xb4>)
 800a952:	f013 fe85 	bl	801e660 <HAL_GPIO_Init>

}
 800a956:	bf00      	nop
 800a958:	3728      	adds	r7, #40	@ 0x28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	58024400 	.word	0x58024400
 800a964:	58020800 	.word	0x58020800

0800a968 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800a96e:	463b      	mov	r3, r7
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	609a      	str	r2, [r3, #8]
 800a978:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800a97a:	f011 fab9 	bl	801bef0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a97e:	2301      	movs	r3, #1
 800a980:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a982:	2300      	movs	r3, #0
 800a984:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800a986:	2300      	movs	r3, #0
 800a988:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a98a:	231f      	movs	r3, #31
 800a98c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800a98e:	2387      	movs	r3, #135	@ 0x87
 800a990:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a992:	2300      	movs	r3, #0
 800a994:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800a996:	2300      	movs	r3, #0
 800a998:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a99a:	2301      	movs	r3, #1
 800a99c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a9aa:	463b      	mov	r3, r7
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f011 fad7 	bl	801bf60 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a9b6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a9ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800a9bc:	2307      	movs	r3, #7
 800a9be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f011 fabc 	bl	801bf60 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a9e8:	2004      	movs	r0, #4
 800a9ea:	f011 fa99 	bl	801bf20 <HAL_MPU_Enable>

}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 800a9fc:	4803      	ldr	r0, [pc, #12]	@ (800aa0c <Error_Handler+0x14>)
 800a9fe:	f01e fce9 	bl	80293d4 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800aa02:	b672      	cpsid	i
}
 800aa04:	bf00      	nop

  __disable_irq();
  while (1)
 800aa06:	bf00      	nop
 800aa08:	e7fd      	b.n	800aa06 <Error_Handler+0xe>
 800aa0a:	bf00      	nop
 800aa0c:	0802a5c0 	.word	0x0802a5c0

0800aa10 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	1e5a      	subs	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	605a      	str	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf0c      	ite	eq
 800aa60:	2301      	moveq	r3, #1
 800aa62:	2300      	movne	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d019      	beq.n	800aa9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3308      	adds	r3, #8
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	609a      	str	r2, [r3, #8]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
        }
    }
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800aaac:	4b02      	ldr	r3, [pc, #8]	@ (800aab8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800aaae:	4618      	mov	r0, r3
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	0802b3ec 	.word	0x0802b3ec

0800aabc <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
      header = 0;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
      inputs = 0;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
 800aad4:	e008      	b.n	800aae8 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4413      	add	r3, r2
 800aade:	2200      	movs	r2, #0
 800aae0:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	3301      	adds	r3, #1
 800aae6:	73fb      	strb	r3, [r7, #15]
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b07      	cmp	r3, #7
 800aaec:	d9f3      	bls.n	800aad6 <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73bb      	strb	r3, [r7, #14]
 800aaf2:	e00b      	b.n	800ab0c <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	3304      	adds	r3, #4
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	73bb      	strb	r3, [r7, #14]
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d9f0      	bls.n	800aaf4 <_ZN8txData_tC1Ev+0x38>
     }
  }
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d201      	bcs.n	800ab3a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	e000      	b.n	800ab3c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800ab3a:	687b      	ldr	r3, [r7, #4]
    }
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
    return static_;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7a1b      	ldrb	r3, [r3, #8]
  }
 800ab54:	4618      	mov	r0, r3
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  }
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b084      	sub	sp, #16
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e006      	b.n	800ab9a <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 f9ab 	bl	800aeec <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 800ab96:	4603      	mov	r3, r0
 800ab98:	bf00      	nop
  }
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7fa fd0f 	bl	80055ce <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800abb0:	4603      	mov	r3, r0
  }
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	60b9      	str	r1, [r7, #8]
 800abc4:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7ff ffeb 	bl	800aba2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800abcc:	4603      	mov	r3, r0
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff ffcf 	bl	800ab76 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800abd8:	4603      	mov	r3, r0
  }
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	68b9      	ldr	r1, [r7, #8]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff ffde 	bl	800abba <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800abfe:	4603      	mov	r3, r0
 800ac00:	e000      	b.n	800ac04 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800ac02:	2300      	movs	r3, #0
  }
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 f81d 	bl	800ac58 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d004      	beq.n	800ac2e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7fa fdd7 	bl	80057d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	e003      	b.n	800ac36 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7fa fccd 	bl	80055ce <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800ac34:	4603      	mov	r3, r0
 800ac36:	617b      	str	r3, [r7, #20]
    if (!array)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e006      	b.n	800ac50 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	6978      	ldr	r0, [r7, #20]
 800ac48:	f000 f8ff 	bl	800ae4a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	bf00      	nop
  }
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	791b      	ldrb	r3, [r3, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bf0c      	ite	eq
 800ac68:	2301      	moveq	r3, #1
 800ac6a:	2300      	movne	r3, #0
 800ac6c:	b2db      	uxtb	r3, r3
  }
 800ac6e:	4618      	mov	r0, r3
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d003      	beq.n	800ac92 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d101      	bne.n	800ac96 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 800ac96:	2300      	movs	r3, #0
  }
 800ac98:	4618      	mov	r0, r3
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2204      	movs	r2, #4
 800acb2:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	601a      	str	r2, [r3, #0]
  }
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f103 0208 	add.w	r2, r3, #8
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4619      	mov	r1, r3
 800acda:	4610      	mov	r0, r2
 800acdc:	f7fa fb06 	bl	80052ec <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f103 020c 	add.w	r2, r3, #12
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f7fc fb87 	bl	8007400 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	330c      	adds	r3, #12
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 f88f 	bl	800be1a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3308      	adds	r3, #8
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff ff2d 	bl	800ab60 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	461a      	mov	r2, r3
 800ad22:	1d3b      	adds	r3, r7, #4
 800ad24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad28:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bf0c      	ite	eq
 800ad48:	2301      	moveq	r3, #1
 800ad4a:	2300      	movne	r3, #0
 800ad4c:	b2db      	uxtb	r3, r3
  }
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00a      	beq.n	800ad80 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f000 f8cf 	bl	800af1a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	e000      	b.n	800ad82 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 800ad80:	2300      	movs	r3, #0
  }
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
    return resources_;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
  }
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fa fba3 	bl	80054fa <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800adb4:	4603      	mov	r3, r0
  }
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fa fb95 	bl	80054fa <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800add0:	4603      	mov	r3, r0
  }
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff ff6e 	bl	800acc6 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fb f80f 	bl	8005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800ae0e:	e006      	b.n	800ae1e <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f7fa ffe7 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7fa fb22 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f083 0301 	eor.w	r3, r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e7      	bne.n	800ae10 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800ae40:	bf00      	nop
}
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b088      	sub	sp, #32
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 800ae56:	68f9      	ldr	r1, [r7, #12]
 800ae58:	f107 0314 	add.w	r3, r7, #20
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fa ffe4 	bl	8005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 800ae64:	e008      	b.n	800ae78 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fa ffba 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 800ae78:	f107 0314 	add.w	r3, r7, #20
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fa faf3 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f083 0301 	eor.w	r3, r3, #1
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e000      	b.n	800ae9a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e3      	bne.n	800ae66 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 800ae9e:	f107 0314 	add.w	r3, r7, #20
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fa fae0 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 800aeb4:	f107 0314 	add.w	r3, r7, #20
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fa fb06 	bl	80054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800aebe:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800aec0:	e00c      	b.n	800aedc <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7fa ff42 	bl	8005d4e <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 800aeca:	61f8      	str	r0, [r7, #28]
    if (!element)
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d101      	bne.n	800aed6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800aed2:	2300      	movs	r3, #0
 800aed4:	e006      	b.n	800aee4 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1ef      	bne.n	800aec2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800aee2:	69fb      	ldr	r3, [r7, #28]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 800aef8:	f107 0010 	add.w	r0, r7, #16
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	f7ff ff77 	bl	800adf4 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 800af06:	f107 0310 	add.w	r3, r7, #16
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fa fadd 	bl	80054ca <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800af10:	4603      	mov	r3, r0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b086      	sub	sp, #24
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800af28:	f107 030c 	add.w	r3, r7, #12
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fa ff7b 	bl	8005e2c <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800af36:	e008      	b.n	800af4a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	3301      	adds	r3, #1
 800af3c:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800af3e:	f107 030c 	add.w	r3, r7, #12
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	4618      	mov	r0, r3
 800af46:	f7fa ff4e 	bl	8005de6 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800af4a:	f107 030c 	add.w	r3, r7, #12
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fa fa8a 	bl	8005468 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800af54:	4603      	mov	r3, r0
 800af56:	f083 0301 	eor.w	r3, r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1eb      	bne.n	800af38 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 800af60:	697b      	ldr	r3, [r7, #20]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b084      	sub	sp, #16
 800af6e:	af00      	add	r7, sp, #0
 800af70:	463b      	mov	r3, r7
 800af72:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800af76:	463b      	mov	r3, r7
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fc fabd 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800af7e:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d007      	beq.n	800af96 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff fe77 	bl	800ac7a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 800af96:	2300      	movs	r3, #0
  }
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 ff48 	bl	800be46 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4611      	mov	r1, r2
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff ffe5 	bl	800afa0 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 800afea:	6838      	ldr	r0, [r7, #0]
 800afec:	f000 ff20 	bl	800be30 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800aff0:	4602      	mov	r2, r0
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3318      	adds	r3, #24
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff ffe1 	bl	800afc0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	7f9b      	ldrb	r3, [r3, #30]
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800b01e:	b580      	push	{r7, lr}
 800b020:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800b022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b02a:	f003 0310 	and.w	r3, r3, #16
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bf14      	ite	ne
 800b032:	2301      	movne	r3, #1
 800b034:	2300      	moveq	r3, #0
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d006      	beq.n	800b04a <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800b03c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b040:	2210      	movs	r2, #16
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800b046:	f7f9 fff5 	bl	8005034 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800b04e:	b580      	push	{r7, lr}
 800b050:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800b052:	f7f9 fffd 	bl	8005050 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 800b056:	bf00      	nop
 800b058:	bd80      	pop	{r7, pc}

0800b05a <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 800b05e:	f7fa f805 	bl	800506c <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800b062:	bf00      	nop
 800b064:	bd80      	pop	{r7, pc}

0800b066 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 800b066:	b580      	push	{r7, lr}
 800b068:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 800b06a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d009      	beq.n	800b096 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800b082:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800b092:	f7f9 fff9 	bl	8005088 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <TIM3_IRQHandler+0x30>)
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bf14      	ite	ne
 800b0ac:	2301      	movne	r3, #1
 800b0ae:	2300      	moveq	r3, #0
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 800b0b6:	4b05      	ldr	r3, [pc, #20]	@ (800b0cc <TIM3_IRQHandler+0x30>)
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	4a04      	ldr	r2, [pc, #16]	@ (800b0cc <TIM3_IRQHandler+0x30>)
 800b0bc:	f023 0301 	bic.w	r3, r3, #1
 800b0c0:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800b0c2:	f7f9 ffef 	bl	80050a4 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 800b0c6:	bf00      	nop
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	40000400 	.word	0x40000400

0800b0d0 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 800b0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b100 <TIM4_IRQHandler+0x30>)
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bf14      	ite	ne
 800b0e0:	2301      	movne	r3, #1
 800b0e2:	2300      	moveq	r3, #0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 800b0ea:	4b05      	ldr	r3, [pc, #20]	@ (800b100 <TIM4_IRQHandler+0x30>)
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	4a04      	ldr	r2, [pc, #16]	@ (800b100 <TIM4_IRQHandler+0x30>)
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 800b0f6:	f7f9 ffe3 	bl	80050c0 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	40000800 	.word	0x40000800

0800b104 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3304      	adds	r3, #4
 800b110:	4618      	mov	r0, r3
 800b112:	f000 feb4 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff ffea 	bl	800b104 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4618      	mov	r0, r3
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b082      	sub	sp, #8
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 ff6f 	bl	800c026 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 ff52 	bl	800c006 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff ffeb 	bl	800b152 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f000 ffa0 	bl	800c0dc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff ffe5 	bl	800b186 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 f8bf 	bl	800c35a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff ffe5 	bl	800b1c6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	3304      	adds	r3, #4
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fe33 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff ffea 	bl	800b206 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b097      	sub	sp, #92	@ 0x5c
 800b240:	af02      	add	r7, sp, #8
 800b242:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3310      	adds	r3, #16
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fe51 	bl	800bef0 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3314      	adds	r3, #20
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fe7e 	bl	800bf54 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	331c      	adds	r3, #28
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fea0 	bl	800bfa2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3320      	adds	r3, #32
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fe9b 	bl	800bfa2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3324      	adds	r3, #36	@ 0x24
 800b270:	4618      	mov	r0, r3
 800b272:	f000 fe96 	bl	800bfa2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3328      	adds	r3, #40	@ 0x28
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff ff76 	bl	800b16c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
	baseFreq(Config::pruBaseFreq),
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800b286:	635a      	str	r2, [r3, #52]	@ 0x34
	servoFreq(Config::pruServoFreq),
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b28e:	639a      	str	r2, [r3, #56]	@ 0x38
	serialFreq(Config::pruSerialFreq)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800b296:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	threadsRunning = false;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	currentState = ST_SETUP;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2205      	movs	r2, #5
 800b2aa:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	613b      	str	r3, [r7, #16]
 800b2b0:	f107 030c 	add.w	r3, r7, #12
 800b2b4:	f107 0210 	add.w	r2, r7, #16
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fef3 	bl	800c0a6 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3310      	adds	r3, #16
 800b2c4:	f107 020c 	add.w	r2, r7, #12
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff ff6b 	bl	800b1a6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b2d0:	f107 030c 	add.w	r3, r7, #12
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 fe1b 	bl	800bf10 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a6c      	ldr	r2, [pc, #432]	@ (800b490 <_ZN6RemoraC1Ev+0x254>)
 800b2de:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a6c      	ldr	r2, [pc, #432]	@ (800b494 <_ZN6RemoraC1Ev+0x258>)
 800b2e4:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f103 0108 	add.w	r1, r3, #8
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	4b69      	ldr	r3, [pc, #420]	@ (800b498 <_ZN6RemoraC1Ev+0x25c>)
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	f107 0008 	add.w	r0, r7, #8
 800b2f8:	f107 0314 	add.w	r3, r7, #20
 800b2fc:	f000 ff0a 	bl	800c114 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 800b300:	f107 0318 	add.w	r3, r7, #24
 800b304:	4618      	mov	r0, r3
 800b306:	f000 ff50 	bl	800c1aa <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3314      	adds	r3, #20
 800b30e:	f107 0218 	add.w	r2, r7, #24
 800b312:	4611      	mov	r1, r2
 800b314:	4618      	mov	r0, r3
 800b316:	f000 ff56 	bl	800c1c6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 800b31a:	f107 0318 	add.w	r3, r7, #24
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff fefe 	bl	800b120 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3314      	adds	r3, #20
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 ff5f 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b32e:	4604      	mov	r4, r0
 800b330:	f107 0308 	add.w	r3, r7, #8
 800b334:	4618      	mov	r0, r3
 800b336:	f000 ff65 	bl	800c204 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f107 0320 	add.w	r3, r7, #32
 800b340:	4611      	mov	r1, r2
 800b342:	4618      	mov	r0, r3
 800b344:	f000 ff7a 	bl	800c23c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 800b348:	f107 0320 	add.w	r3, r7, #32
 800b34c:	4619      	mov	r1, r3
 800b34e:	4620      	mov	r0, r4
 800b350:	f7ff fe46 	bl	800afe0 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 800b354:	f107 0320 	add.w	r3, r7, #32
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 ff8b 	bl	800c274 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3314      	adds	r3, #20
 800b362:	4618      	mov	r0, r3
 800b364:	f000 ff42 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b368:	4603      	mov	r3, r0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f005 fa65 	bl	801083a <_ZN12CommsHandler4initEv>
	comms->start();
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	3314      	adds	r3, #20
 800b374:	4618      	mov	r0, r3
 800b376:	f000 ff39 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f005 fa8a 	bl	8010896 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800b382:	4b46      	ldr	r3, [pc, #280]	@ (800b49c <_ZN6RemoraC1Ev+0x260>)
 800b384:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 800b386:	231d      	movs	r3, #29
 800b388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	3334      	adds	r3, #52	@ 0x34
    baseThread = make_unique<pruThread>(
 800b38e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b392:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800b396:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b39a:	4c41      	ldr	r4, [pc, #260]	@ (800b4a0 <_ZN6RemoraC1Ev+0x264>)
 800b39c:	9401      	str	r4, [sp, #4]
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4940      	ldr	r1, [pc, #256]	@ (800b4a4 <_ZN6RemoraC1Ev+0x268>)
 800b3a4:	f000 ff88 	bl	800c2b8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	331c      	adds	r3, #28
 800b3ac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff ff17 	bl	800b1e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800b3b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 fe00 	bl	800bfc2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800b3c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3c6:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800b3c8:	231c      	movs	r3, #28
 800b3ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3338      	adds	r3, #56	@ 0x38
    servoThread = make_unique<pruThread>(
 800b3d0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800b3d4:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800b3d8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b3dc:	4c32      	ldr	r4, [pc, #200]	@ (800b4a8 <_ZN6RemoraC1Ev+0x26c>)
 800b3de:	9401      	str	r4, [sp, #4]
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4931      	ldr	r1, [pc, #196]	@ (800b4ac <_ZN6RemoraC1Ev+0x270>)
 800b3e6:	f000 ffd4 	bl	800c392 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3320      	adds	r3, #32
 800b3ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7ff fef6 	bl	800b1e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800b3fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fddf 	bl	800bfc2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800b404:	4b2a      	ldr	r3, [pc, #168]	@ (800b4b0 <_ZN6RemoraC1Ev+0x274>)
 800b406:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800b408:	231e      	movs	r3, #30
 800b40a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	333c      	adds	r3, #60	@ 0x3c
    serialThread = make_unique<pruThread>(
 800b412:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800b416:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800b41a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b41e:	4c25      	ldr	r4, [pc, #148]	@ (800b4b4 <_ZN6RemoraC1Ev+0x278>)
 800b420:	9401      	str	r4, [sp, #4]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	460b      	mov	r3, r1
 800b426:	4924      	ldr	r1, [pc, #144]	@ (800b4b8 <_ZN6RemoraC1Ev+0x27c>)
 800b428:	f001 f804 	bl	800c434 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3324      	adds	r3, #36	@ 0x24
 800b430:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fed5 	bl	800b1e6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800b43c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fdbe 	bl	800bfc2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3320      	adds	r3, #32
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 f843 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b450:	4604      	mov	r4, r0
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f103 0214 	add.w	r2, r3, #20
 800b458:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b45c:	4611      	mov	r1, r2
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 f845 	bl	800c4ee <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800b464:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b468:	4619      	mov	r1, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	f00f fc5c 	bl	801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800b470:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fed4 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800b47a:	f107 0308 	add.w	r3, r7, #8
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fe71 	bl	800c166 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	3754      	adds	r7, #84	@ 0x54
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd90      	pop	{r4, r7, pc}
 800b48e:	bf00      	nop
 800b490:	30000080 	.word	0x30000080
 800b494:	300000c0 	.word	0x300000c0
 800b498:	40013000 	.word	0x40013000
 800b49c:	40000400 	.word	0x40000400
 800b4a0:	0802b3f4 	.word	0x0802b3f4
 800b4a4:	0802a5c8 	.word	0x0802a5c8
 800b4a8:	0802b3f8 	.word	0x0802b3f8
 800b4ac:	0802a5d0 	.word	0x0802a5d0
 800b4b0:	40000800 	.word	0x40000800
 800b4b4:	0802b3fc 	.word	0x0802b3fc
 800b4b8:	0802a5d8 	.word	0x0802a5d8

0800b4bc <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800b4bc:	b5b0      	push	{r4, r5, r7, lr}
 800b4be:	b08a      	sub	sp, #40	@ 0x28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]

    if (currentState != newState) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	78fa      	ldrb	r2, [r7, #3]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d021      	beq.n	800b516 <_ZN6Remora17transitionToStateENS_5StateE+0x5a>
        const char* stateNames[] = {
 800b4d2:	4b13      	ldr	r3, [pc, #76]	@ (800b520 <_ZN6Remora17transitionToStateENS_5StateE+0x64>)
 800b4d4:	f107 040c 	add.w	r4, r7, #12
 800b4d8:	461d      	mov	r5, r3
 800b4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            "Setup", "Start", "Idle", "Running", "Stop", "Reset", "System Reset"
        };
        printf("\n## Transitioning from %s state to %s state\n",
               stateNames[currentState], stateNames[newState]);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
        printf("\n## Transitioning from %s state to %s state\n",
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	3328      	adds	r3, #40	@ 0x28
 800b4ee:	443b      	add	r3, r7
 800b4f0:	f853 1c1c 	ldr.w	r1, [r3, #-28]
               stateNames[currentState], stateNames[newState]);
 800b4f4:	78fb      	ldrb	r3, [r7, #3]
        printf("\n## Transitioning from %s state to %s state\n",
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	3328      	adds	r3, #40	@ 0x28
 800b4fa:	443b      	add	r3, r7
 800b4fc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800b500:	461a      	mov	r2, r3
 800b502:	4808      	ldr	r0, [pc, #32]	@ (800b524 <_ZN6Remora17transitionToStateENS_5StateE+0x68>)
 800b504:	f01d ff66 	bl	80293d4 <iprintf>

        prevState = currentState;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	781a      	ldrb	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	78fa      	ldrb	r2, [r7, #3]
 800b514:	701a      	strb	r2, [r3, #0]
    }
}
 800b516:	bf00      	nop
 800b518:	3728      	adds	r7, #40	@ 0x28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bdb0      	pop	{r4, r5, r7, pc}
 800b51e:	bf00      	nop
 800b520:	0802a650 	.word	0x0802a650
 800b524:	0802a5e0 	.word	0x0802a5e0

0800b528 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	781a      	ldrb	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d002      	beq.n	800b542 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800b53c:	4808      	ldr	r0, [pc, #32]	@ (800b560 <_ZN6Remora16handleSetupStateEv+0x38>)
 800b53e:	f01d ffb9 	bl	80294b4 <puts>
    }
    prevState = currentState;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	705a      	strb	r2, [r3, #1]

    loadModules();
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f996 	bl	800b87c <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800b550:	2101      	movs	r1, #1
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff ffb2 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	0802a66c 	.word	0x0802a66c

0800b564 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	429a      	cmp	r2, r3
 800b576:	d002      	beq.n	800b57e <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800b578:	482e      	ldr	r0, [pc, #184]	@ (800b634 <_ZN6Remora16handleStartStateEv+0xd0>)
 800b57a:	f01d ff9b 	bl	80294b4 <puts>
    }
    prevState = currentState;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	781a      	ldrb	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	705a      	strb	r2, [r3, #1]

    for (const auto& module : onLoad) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3328      	adds	r3, #40	@ 0x28
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	6978      	ldr	r0, [r7, #20]
 800b58e:	f000 ffbe 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800b592:	4603      	mov	r3, r0
 800b594:	60fb      	str	r3, [r7, #12]
 800b596:	6978      	ldr	r0, [r7, #20]
 800b598:	f000 ffc9 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800b59c:	4603      	mov	r3, r0
 800b59e:	60bb      	str	r3, [r7, #8]
 800b5a0:	e01a      	b.n	800b5d8 <_ZN6Remora16handleStartStateEv+0x74>
 800b5a2:	f107 030c 	add.w	r3, r7, #12
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fffb 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800b5ac:	6138      	str	r0, [r7, #16]
        if (module) {
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 f802 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <_ZN6Remora16handleStartStateEv+0x6a>
            module->configure();
 800b5bc:	6938      	ldr	r0, [r7, #16]
 800b5be:	f001 f80d 	bl	800c5dc <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	3214      	adds	r2, #20
 800b5c8:	6812      	ldr	r2, [r2, #0]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	4790      	blx	r2
    for (const auto& module : onLoad) {
 800b5ce:	f107 030c 	add.w	r3, r7, #12
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 ffd4 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800b5d8:	f107 0208 	add.w	r2, r7, #8
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 ffb4 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1d9      	bne.n	800b5a2 <_ZN6Remora16handleStartStateEv+0x3e>
        }
    }

    if (!threadsRunning) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5f4:	f083 0301 	eor.w	r3, r3, #1
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d011      	beq.n	800b622 <_ZN6Remora16handleStartStateEv+0xbe>
        startThread(servoThread, "SERVO");
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3320      	adds	r3, #32
 800b602:	4a0d      	ldr	r2, [pc, #52]	@ (800b638 <_ZN6Remora16handleStartStateEv+0xd4>)
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f8a8 	bl	800b75c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	331c      	adds	r3, #28
 800b610:	4a0a      	ldr	r2, [pc, #40]	@ (800b63c <_ZN6Remora16handleStartStateEv+0xd8>)
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f8a1 	bl	800b75c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    transitionToState(ST_IDLE);
 800b622:	2102      	movs	r1, #2
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff ff49 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b62a:	bf00      	nop
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	0802a688 	.word	0x0802a688
 800b638:	0802a6a4 	.word	0x0802a6a4
 800b63c:	0802a6ac 	.word	0x0802a6ac

0800b640 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	785b      	ldrb	r3, [r3, #1]
 800b650:	429a      	cmp	r2, r3
 800b652:	d002      	beq.n	800b65a <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800b654:	480d      	ldr	r0, [pc, #52]	@ (800b68c <_ZN6Remora15handleIdleStateEv+0x4c>)
 800b656:	f01d ff2d 	bl	80294b4 <puts>
    }
    prevState = currentState;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	781a      	ldrb	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3314      	adds	r3, #20
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fdc0 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b66c:	4603      	mov	r3, r0
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff fcc9 	bl	800b006 <_ZNK12CommsHandler9getStatusEv>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800b67a:	2103      	movs	r1, #3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ff1d 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	0802a6b4 	.word	0x0802a6b4

0800b690 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	781a      	ldrb	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	785b      	ldrb	r3, [r3, #1]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d002      	beq.n	800b6aa <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800b6a4:	4813      	ldr	r0, [pc, #76]	@ (800b6f4 <_ZN6Remora18handleRunningStateEv+0x64>)
 800b6a6:	f01d ff05 	bl	80294b4 <puts>
    }
    prevState = currentState;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3314      	adds	r3, #20
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fd98 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fca1 	bl	800b006 <_ZNK12CommsHandler9getStatusEv>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f083 0301 	eor.w	r3, r3, #1
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800b6d0:	2105      	movs	r1, #5
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fef2 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7b1b      	ldrb	r3, [r3, #12]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800b6e2:	2106      	movs	r1, #6
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fee9 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0802a6cc 	.word	0x0802a6cc

0800b6f8 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d002      	beq.n	800b712 <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800b70c:	480c      	ldr	r0, [pc, #48]	@ (800b740 <_ZN6Remora16handleResetStateEv+0x48>)
 800b70e:	f01d fed1 	bl	80294b4 <puts>
    }
    prevState = currentState;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	781a      	ldrb	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800b71a:	480a      	ldr	r0, [pc, #40]	@ (800b744 <_ZN6Remora16handleResetStateEv+0x4c>)
 800b71c:	f01d feca 	bl	80294b4 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	2240      	movs	r2, #64	@ 0x40
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f82f 	bl	800b78c <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800b72e:	2102      	movs	r1, #2
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fec3 	bl	800b4bc <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	0802a6e8 	.word	0x0802a6e8
 800b744:	0802a704 	.word	0x0802a704

0800b748 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800b750:	f010 fbbd 	bl	801bece <HAL_NVIC_SystemReset>
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	4807      	ldr	r0, [pc, #28]	@ (800b788 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800b76c:	f01d fe32 	bl	80293d4 <iprintf>
    thread->startThread();
 800b770:	68b8      	ldr	r0, [r7, #8]
 800b772:	f000 feb0 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b776:	4603      	mov	r3, r0
 800b778:	4618      	mov	r0, r3
 800b77a:	f00f fb69 	bl	801ae50 <_ZN9pruThread11startThreadEv>
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	0802a71c 	.word	0x0802a71c

0800b78c <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	2100      	movs	r1, #0
 800b79c:	68b8      	ldr	r0, [r7, #8]
 800b79e:	f01d ff93 	bl	80296c8 <memset>
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <_ZN6Remora3runEv>:

void Remora::run() {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b06      	cmp	r3, #6
 800b7ba:	d829      	bhi.n	800b810 <_ZN6Remora3runEv+0x64>
 800b7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <_ZN6Remora3runEv+0x18>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7e1 	.word	0x0800b7e1
 800b7c8:	0800b7e9 	.word	0x0800b7e9
 800b7cc:	0800b7f1 	.word	0x0800b7f1
 800b7d0:	0800b7f9 	.word	0x0800b7f9
 800b7d4:	0800b811 	.word	0x0800b811
 800b7d8:	0800b801 	.word	0x0800b801
 800b7dc:	0800b809 	.word	0x0800b809
            case ST_SETUP:
                handleSetupState();
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff fea1 	bl	800b528 <_ZN6Remora16handleSetupStateEv>
                break;
 800b7e6:	e017      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff febb 	bl	800b564 <_ZN6Remora16handleStartStateEv>
                break;
 800b7ee:	e013      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff ff25 	bl	800b640 <_ZN6Remora15handleIdleStateEv>
                break;
 800b7f6:	e00f      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ff49 	bl	800b690 <_ZN6Remora18handleRunningStateEv>
                break;
 800b7fe:	e00b      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff ff79 	bl	800b6f8 <_ZN6Remora16handleResetStateEv>
                break;
 800b806:	e007      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff ff9d 	bl	800b748 <_ZN6Remora19handleSysResetStateEv>
                break;
 800b80e:	e003      	b.n	800b818 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800b810:	4806      	ldr	r0, [pc, #24]	@ (800b82c <_ZN6Remora3runEv+0x80>)
 800b812:	f01d fe4f 	bl	80294b4 <puts>
                break;
 800b816:	bf00      	nop
        }
        comms->tasks();
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3314      	adds	r3, #20
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 fce5 	bl	800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b822:	4603      	mov	r3, r0
 800b824:	4618      	mov	r0, r3
 800b826:	f005 f849 	bl	80108bc <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800b82a:	e7c3      	b.n	800b7b4 <_ZN6Remora3runEv+0x8>
 800b82c:	0802a734 	.word	0x0802a734

0800b830 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	3304      	adds	r3, #4
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f000 ff16 	bl	800c67e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff ffdf 	bl	800b830 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800b87c:	b5b0      	push	{r4, r5, r7, lr}
 800b87e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800b882:	af04      	add	r7, sp, #16
 800b884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b88c:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800b88e:	f006 fc8d 	bl	80121ac <_ZN13ModuleFactory11getInstanceEv>
 800b892:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800b896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b89a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3310      	adds	r3, #16
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fea6 	bl	800c5f4 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8ae:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fb fbf1 	bl	800709c <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff fa3a 	bl	800ad38 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800b8ca:	e266      	b.n	800bd9a <_ZN6Remora11loadModulesEv+0x51e>
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800b8cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8d0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800b8d4:	f107 0118 	add.w	r1, r7, #24
 800b8d8:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fe95 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b8e2:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800b8e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 fb79 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 fb7d 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b8fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b902:	49c3      	ldr	r1, [pc, #780]	@ (800bc10 <_ZN6Remora11loadModulesEv+0x394>)
 800b904:	4618      	mov	r0, r3
 800b906:	f7fc fc5c 	bl	80081c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b90a:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800b90e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b918:	cb0c      	ldmia	r3, {r2, r3}
 800b91a:	4620      	mov	r0, r4
 800b91c:	f001 fb84 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b920:	f107 0320 	add.w	r3, r7, #32
 800b924:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b928:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b92c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b930:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b934:	f002 f8df 	bl	800daf6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b938:	4604      	mov	r4, r0
 800b93a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b93e:	f002 f8ea 	bl	800db16 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b942:	4602      	mov	r2, r0
 800b944:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b948:	4621      	mov	r1, r4
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fa f855 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b950:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b952:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b956:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b95a:	f7ff fb06 	bl	800af6a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b95e:	4603      	mov	r3, r0
 800b960:	bf00      	nop
 800b962:	2b00      	cmp	r3, #0
 800b964:	d04e      	beq.n	800ba04 <_ZN6Remora11loadModulesEv+0x188>
 800b966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b96a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800b96e:	f107 0118 	add.w	r1, r7, #24
 800b972:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fe48 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b97c:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800b980:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b984:	4618      	mov	r0, r3
 800b986:	f001 fb2c 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b98a:	4602      	mov	r2, r0
 800b98c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f001 fb30 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b998:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b99c:	499d      	ldr	r1, [pc, #628]	@ (800bc14 <_ZN6Remora11loadModulesEv+0x398>)
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 fb61 	bl	800d066 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b9a4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800b9a8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b9b2:	cb0c      	ldmia	r3, {r2, r3}
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f001 fb37 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b9ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9be:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800b9c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800b9c6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b9ca:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b9ce:	f002 f892 	bl	800daf6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b9d8:	f002 f89d 	bl	800db16 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fa f808 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b9ea:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b9ec:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b9f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9f4:	f7ff fab9 	bl	800af6a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	bf00      	nop
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <_ZN6Remora11loadModulesEv+0x188>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <_ZN6Remora11loadModulesEv+0x18a>
 800ba04:	2300      	movs	r3, #0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 81c2 	beq.w	800bd90 <_ZN6Remora11loadModulesEv+0x514>
            const char* threadName = modules[i]["Thread"];
 800ba0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba10:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800ba14:	f107 0118 	add.w	r1, r7, #24
 800ba18:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fdf5 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800ba22:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800ba26:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fad9 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ba30:	4602      	mov	r2, r0
 800ba32:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800ba36:	4611      	mov	r1, r2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f001 fadd 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800ba3e:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800ba42:	4973      	ldr	r1, [pc, #460]	@ (800bc10 <_ZN6Remora11loadModulesEv+0x394>)
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fc fbbc 	bl	80081c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800ba4a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800ba4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800ba58:	cb0c      	ldmia	r3, {r2, r3}
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f001 fae4 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800ba60:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fde1 	bl	800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ba6a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800ba6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ba76:	f107 0118 	add.w	r1, r7, #24
 800ba7a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 fdc4 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800ba84:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800ba88:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 faa8 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ba92:	4602      	mov	r2, r0
 800ba94:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800ba98:	4611      	mov	r1, r2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 faac 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800baa0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800baa4:	495b      	ldr	r1, [pc, #364]	@ (800bc14 <_ZN6Remora11loadModulesEv+0x398>)
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fadd 	bl	800d066 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800baac:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800bab0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800baba:	cb0c      	ldmia	r3, {r2, r3}
 800babc:	4620      	mov	r0, r4
 800babe:	f001 fab3 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800bac2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fdb0 	bl	800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bacc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800bad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bad4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800badc:	494e      	ldr	r1, [pc, #312]	@ (800bc18 <_ZN6Remora11loadModulesEv+0x39c>)
 800bade:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bae2:	f7f4 fbfd 	bl	80002e0 <strcmp>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10b      	bne.n	800bb04 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800baec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800baf0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bafc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	e012      	b.n	800bb2a <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800bb04:	4945      	ldr	r1, [pc, #276]	@ (800bc1c <_ZN6Remora11loadModulesEv+0x3a0>)
 800bb06:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bb0a:	f7f4 fbe9 	bl	80002e0 <strcmp>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800bb14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb24:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bb28:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800bb2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb32:	f107 0118 	add.w	r1, r7, #24
 800bb36:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fd66 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800bb40:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800bb44:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 fa4a 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 fa4e 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800bb5c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800bb60:	492f      	ldr	r1, [pc, #188]	@ (800bc20 <_ZN6Remora11loadModulesEv+0x3a4>)
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 fab4 	bl	800d0d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bb68:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800bb6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800bb76:	cb0c      	ldmia	r3, {r2, r3}
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f001 fa55 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800bb7e:	f107 0214 	add.w	r2, r7, #20
 800bb82:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fd5b 	bl	800c644 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800bb8e:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800bb92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bb96:	f107 0118 	add.w	r1, r7, #24
 800bb9a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fd34 	bl	800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800bba4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bba8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fd56 	bl	800c660 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800bbb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bbb8:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800bbbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bbc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	9302      	str	r3, [sp, #8]
 800bbc8:	466a      	mov	r2, sp
 800bbca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bbce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbd2:	e882 0003 	stmia.w	r2, {r0, r1}
 800bbd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800bbda:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f006 f9f1 	bl	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fce5 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f083 0301 	eor.w	r3, r3, #1
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d015      	beq.n	800bc28 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800bbfc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800bc00:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800bc04:	4807      	ldr	r0, [pc, #28]	@ (800bc24 <_ZN6Remora11loadModulesEv+0x3a8>)
 800bc06:	f01d fbe5 	bl	80293d4 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800bc0a:	2400      	movs	r4, #0
 800bc0c:	e0ba      	b.n	800bd84 <_ZN6Remora11loadModulesEv+0x508>
 800bc0e:	bf00      	nop
 800bc10:	0802a74c 	.word	0x0802a74c
 800bc14:	0802a754 	.word	0x0802a754
 800bc18:	0802a5d0 	.word	0x0802a5d0
 800bc1c:	0802a5c8 	.word	0x0802a5c8
 800bc20:	0802a75c 	.word	0x0802a75c
 800bc24:	0802a768 	.word	0x0802a768
			}

            bool _modPost = _mod->getUsesModulePost();
 800bc28:	f107 030c 	add.w	r3, r7, #12
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 fcd5 	bl	800c5dc <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800bc32:	4603      	mov	r3, r0
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	3218      	adds	r2, #24
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	4790      	blx	r2
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800bc44:	4960      	ldr	r1, [pc, #384]	@ (800bdc8 <_ZN6Remora11loadModulesEv+0x54c>)
 800bc46:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bc4a:	f7f4 fb49 	bl	80002e0 <strcmp>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d13e      	bne.n	800bcd2 <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800bc54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bc58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3320      	adds	r3, #32
 800bc60:	4618      	mov	r0, r3
 800bc62:	f000 fc38 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bc66:	4604      	mov	r4, r0
 800bc68:	f107 020c 	add.w	r2, r7, #12
 800bc6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fdf2 	bl	800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bc78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f00f f852 	bl	801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bc84:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff faca 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bc8e:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d075      	beq.n	800bd82 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bc96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bc9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3320      	adds	r3, #32
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 fc17 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	f107 020c 	add.w	r2, r7, #12
 800bcae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fdd1 	bl	800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bcba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f00f f84d 	bl	801ad60 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bcc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff faa9 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bcd0:	e057      	b.n	800bd82 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800bcd2:	493e      	ldr	r1, [pc, #248]	@ (800bdcc <_ZN6Remora11loadModulesEv+0x550>)
 800bcd4:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bcd8:	f7f4 fb02 	bl	80002e0 <strcmp>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d13e      	bne.n	800bd60 <_ZN6Remora11loadModulesEv+0x4e4>
                baseThread->registerModule(_mod);
 800bce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bce6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	331c      	adds	r3, #28
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 fbf1 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	f107 020c 	add.w	r2, r7, #12
 800bcfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fdab 	bl	800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bd06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f00f f80b 	bl	801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bd12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fa83 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bd1c:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d02e      	beq.n	800bd82 <_ZN6Remora11loadModulesEv+0x506>
            		baseThread->registerModulePost(_mod);
 800bd24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bd28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	331c      	adds	r3, #28
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fbd0 	bl	800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bd36:	4604      	mov	r4, r0
 800bd38:	f107 020c 	add.w	r2, r7, #12
 800bd3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd40:	4611      	mov	r1, r2
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff fd8a 	bl	800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bd48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f00f f806 	bl	801ad60 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bd54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fa62 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bd5e:	e010      	b.n	800bd82 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else {
                onLoad.push_back(move(_mod));
 800bd60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bd64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800bd6e:	f107 030c 	add.w	r3, r7, #12
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fc9a 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fca0 	bl	800c6c2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>
            }
        }
 800bd82:	2401      	movs	r4, #1
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff fa4a 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bd8e:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800bd90:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bd94:	3301      	adds	r3, #1
 800bd96:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800bd9a:	f107 0318 	add.w	r3, r7, #24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe ffdb 	bl	800ad5a <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800bda4:	4602      	mov	r2, r0
 800bda6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	bf34      	ite	cc
 800bdae:	2301      	movcc	r3, #1
 800bdb0:	2300      	movcs	r3, #0
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f47f ad89 	bne.w	800b8cc <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800bdba:	bf00      	nop
 800bdbc:	bf00      	nop
 800bdbe:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0802a5d0 	.word	0x0802a5d0
 800bdcc:	0802a5c8 	.word	0x0802a5c8

0800bdd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
      { delete this; }
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d005      	beq.n	800bdea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3304      	adds	r3, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4798      	blx	r3
 800bdea:	bf00      	nop
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d201      	bcs.n	800be0c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	e000      	b.n	800be0e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800be0c:	687b      	ldr	r3, [r7, #4]
    }
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  }
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4618      	mov	r0, r3
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800be50:	6838      	ldr	r0, [r7, #0]
 800be52:	f000 fcbd 	bl	800c7d0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800be56:	4603      	mov	r3, r0
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fc98 	bl	800c790 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800be60:	6838      	ldr	r0, [r7, #0]
 800be62:	f000 fcca 	bl	800c7fa <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800be66:	4603      	mov	r3, r0
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fcd3 	bl	800c814 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fcc3 	bl	800c7fa <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800be74:	687b      	ldr	r3, [r7, #4]
      }
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe fdd7 	bl	800aa46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	f000 fcbc 	bl	800c82a <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800beb2:	4603      	mov	r3, r0
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 fcbd 	bl	800c846 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff ffeb 	bl	800bebc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff ffe8 	bl	800bed6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fca0 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bf20:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00c      	beq.n	800bf44 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fca5 	bl	800c87a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800bf30:	4604      	mov	r4, r0
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 fcae 	bl	800c894 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f000 fcc6 	bl	800c8d0 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
      }
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd90      	pop	{r4, r7, pc}

0800bf54 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fcc9 	bl	800c8f6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fccd 	bl	800c918 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff ffeb 	bl	800bf6e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff ffe8 	bl	800bf88 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bfc2:	b590      	push	{r4, r7, lr}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 fcb0 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bfd2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00c      	beq.n	800bff6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fcb5 	bl	800c94c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 fcbe 	bl	800c966 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800bfea:	4603      	mov	r3, r0
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4619      	mov	r1, r3
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fcda 	bl	800c9aa <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
      }
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	bd90      	pop	{r4, r7, pc}

0800c006 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fcde 	bl	800c9d0 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fce6 	bl	800c9e8 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fcee 	bl	800ca10 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	689a      	ldr	r2, [r3, #8]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800c056:	461a      	mov	r2, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fce4 	bl	800ca26 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4618      	mov	r0, r3
 800c062:	f7ff f86a 	bl	800b13a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800c070:	b5b0      	push	{r4, r5, r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681c      	ldr	r4, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fce2 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800c088:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c08a:	461a      	mov	r2, r3
 800c08c:	4629      	mov	r1, r5
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fce7 	bl	800ca62 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff ffd1 	bl	800c03e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bdb0      	pop	{r4, r5, r7, pc}

0800c0a6 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800c0a6:	b590      	push	{r4, r7, lr}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c0b0:	206c      	movs	r0, #108	@ 0x6c
 800c0b2:	f01c fae5 	bl	8028680 <_Znwj>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	461c      	mov	r4, r3
 800c0ba:	6838      	ldr	r0, [r7, #0]
 800c0bc:	f000 fcdf 	bl	800ca7e <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7fa feda 	bl	8006e80 <_ZN17JsonConfigHandlerC1EP6Remora>
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fcf0 	bl	800cab4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}

0800c0dc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c0e6:	6838      	ldr	r0, [r7, #0]
 800c0e8:	f000 fd13 	bl	800cb12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fcee 	bl	800cad2 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c0f6:	6838      	ldr	r0, [r7, #0]
 800c0f8:	f000 fd20 	bl	800cb3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fd29 	bl	800cb56 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd19 	bl	800cb3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c10a:	687b      	ldr	r3, [r7, #4]
      }
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c122:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800c126:	f01c faab 	bl	8028680 <_Znwj>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461e      	mov	r6, r3
 800c12e:	68b8      	ldr	r0, [r7, #8]
 800c130:	f000 fd1c 	bl	800cb6c <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800c134:	4603      	mov	r3, r0
 800c136:	681c      	ldr	r4, [r3, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fd22 	bl	800cb82 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800c13e:	4603      	mov	r3, r0
 800c140:	681d      	ldr	r5, [r3, #0]
 800c142:	6838      	ldr	r0, [r7, #0]
 800c144:	f000 fd28 	bl	800cb98 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c148:	4603      	mov	r3, r0
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	462a      	mov	r2, r5
 800c14e:	4621      	mov	r1, r4
 800c150:	4630      	mov	r0, r6
 800c152:	f7f4 fe33 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800c156:	4631      	mov	r1, r6
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 fd38 	bl	800cbce <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c166 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c166:	b590      	push	{r4, r7, lr}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fd3b 	bl	800cbec <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800c176:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00c      	beq.n	800c19a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fd40 	bl	800cc06 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c186:	4604      	mov	r4, r0
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f000 fd49 	bl	800cc20 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800c18e:	4603      	mov	r3, r0
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4619      	mov	r1, r3
 800c194:	4620      	mov	r0, r4
 800c196:	f000 fd4e 	bl	800cc36 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	601a      	str	r2, [r3, #0]
      }
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}

0800c1aa <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800c1b2:	f107 030c 	add.w	r3, r7, #12
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fd4d 	bl	800cc58 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800c1c6:	b590      	push	{r4, r7, lr}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
 800c1ce:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800c1d0:	687c      	ldr	r4, [r7, #4]
 800c1d2:	6838      	ldr	r0, [r7, #0]
 800c1d4:	f000 fd4f 	bl	800cc76 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fd55 	bl	800cc8c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800c1e2:	687b      	ldr	r3, [r7, #4]
      }
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd90      	pop	{r4, r7, pc}

0800c1ec <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fd68 	bl	800ccca <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c1fa:	4603      	mov	r3, r0
      }
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b084      	sub	sp, #16
 800c21e:	af00      	add	r7, sp, #0
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	60b9      	str	r1, [r7, #8]
 800c224:	607a      	str	r2, [r7, #4]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fd70 	bl	800cd12 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800c23c:	b5b0      	push	{r4, r5, r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800c246:	687c      	ldr	r4, [r7, #4]
 800c248:	6838      	ldr	r0, [r7, #0]
 800c24a:	f000 fd4a 	bl	800cce2 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800c24e:	4605      	mov	r5, r0
 800c250:	6838      	ldr	r0, [r7, #0]
 800c252:	f000 fcd8 	bl	800cc06 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c256:	4603      	mov	r3, r0
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 fd4f 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	4629      	mov	r1, r5
 800c264:	4620      	mov	r0, r4
 800c266:	f7ff ffd8 	bl	800c21a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bdb0      	pop	{r4, r5, r7, pc}

0800c274 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fd5d 	bl	800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c284:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00c      	beq.n	800c2a8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fd62 	bl	800cd58 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800c294:	4604      	mov	r4, r0
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fd6b 	bl	800cd72 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800c29c:	4603      	mov	r3, r0
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 fd70 	bl	800cd88 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]
      }
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd90      	pop	{r4, r7, pc}

0800c2b8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2bc:	b08e      	sub	sp, #56	@ 0x38
 800c2be:	af02      	add	r7, sp, #8
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]
 800c2c6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c2c8:	2044      	movs	r0, #68	@ 0x44
 800c2ca:	f01c f9d9 	bl	8028680 <_Znwj>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	4698      	mov	r8, r3
 800c2d2:	68b8      	ldr	r0, [r7, #8]
 800c2d4:	f000 fd69 	bl	800cdaa <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c2d8:	4604      	mov	r4, r0
 800c2da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f01c f9df 	bl	80286a2 <_ZNSaIcEC1Ev>
 800c2e4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c2e8:	f107 0314 	add.w	r3, r7, #20
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fb fb4c 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fd63 	bl	800cdc0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	681d      	ldr	r5, [r3, #0]
 800c2fe:	6838      	ldr	r0, [r7, #0]
 800c300:	f000 fd69 	bl	800cdd6 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c304:	4603      	mov	r3, r0
 800c306:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c30a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c30c:	f000 fd6e 	bl	800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c310:	4603      	mov	r3, r0
 800c312:	681c      	ldr	r4, [r3, #0]
 800c314:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c316:	f000 fd74 	bl	800ce02 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c31a:	4603      	mov	r3, r0
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	f107 0114 	add.w	r1, r7, #20
 800c324:	9301      	str	r3, [sp, #4]
 800c326:	9400      	str	r4, [sp, #0]
 800c328:	4633      	mov	r3, r6
 800c32a:	462a      	mov	r2, r5
 800c32c:	4640      	mov	r0, r8
 800c32e:	f00e fc3f 	bl	801abb0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c332:	4641      	mov	r1, r8
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 fd7f 	bl	800ce38 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c33a:	f107 0314 	add.w	r3, r7, #20
 800c33e:	4618      	mov	r0, r3
 800c340:	f01c fa99 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c348:	4618      	mov	r0, r3
 800c34a:	f01c f9ab 	bl	80286a4 <_ZNSaIcED1Ev>
 800c34e:	bf00      	nop
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	3730      	adds	r7, #48	@ 0x30
 800c354:	46bd      	mov	sp, r7
 800c356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c35a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c364:	6838      	ldr	r0, [r7, #0]
 800c366:	f000 fd96 	bl	800ce96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fd71 	bl	800ce56 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c374:	6838      	ldr	r0, [r7, #0]
 800c376:	f000 fda3 	bl	800cec0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fdac 	bl	800ceda <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fd9c 	bl	800cec0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c388:	687b      	ldr	r3, [r7, #4]
      }
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c396:	b08e      	sub	sp, #56	@ 0x38
 800c398:	af02      	add	r7, sp, #8
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c3a2:	2044      	movs	r0, #68	@ 0x44
 800c3a4:	f01c f96c 	bl	8028680 <_Znwj>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	4698      	mov	r8, r3
 800c3ac:	68b8      	ldr	r0, [r7, #8]
 800c3ae:	f000 fd9f 	bl	800cef0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f01c f972 	bl	80286a2 <_ZNSaIcEC1Ev>
 800c3be:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c3c2:	f107 0314 	add.w	r3, r7, #20
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fb fadf 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fcf6 	bl	800cdc0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	681d      	ldr	r5, [r3, #0]
 800c3d8:	6838      	ldr	r0, [r7, #0]
 800c3da:	f000 fcfc 	bl	800cdd6 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3e4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c3e6:	f000 fd01 	bl	800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	681c      	ldr	r4, [r3, #0]
 800c3ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c3f0:	f000 fd07 	bl	800ce02 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	f107 0114 	add.w	r1, r7, #20
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	9400      	str	r4, [sp, #0]
 800c402:	4633      	mov	r3, r6
 800c404:	462a      	mov	r2, r5
 800c406:	4640      	mov	r0, r8
 800c408:	f00e fbd2 	bl	801abb0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c40c:	4641      	mov	r1, r8
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 fd12 	bl	800ce38 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c414:	f107 0314 	add.w	r3, r7, #20
 800c418:	4618      	mov	r0, r3
 800c41a:	f01c fa2c 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c41e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c422:	4618      	mov	r0, r3
 800c424:	f01c f93e 	bl	80286a4 <_ZNSaIcED1Ev>
 800c428:	bf00      	nop
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	3730      	adds	r7, #48	@ 0x30
 800c42e:	46bd      	mov	sp, r7
 800c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c434 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c438:	b08e      	sub	sp, #56	@ 0x38
 800c43a:	af02      	add	r7, sp, #8
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c444:	2044      	movs	r0, #68	@ 0x44
 800c446:	f01c f91b 	bl	8028680 <_Znwj>
 800c44a:	4603      	mov	r3, r0
 800c44c:	4698      	mov	r8, r3
 800c44e:	68b8      	ldr	r0, [r7, #8]
 800c450:	f000 fd59 	bl	800cf06 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c454:	4604      	mov	r4, r0
 800c456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c45a:	4618      	mov	r0, r3
 800c45c:	f01c f921 	bl	80286a2 <_ZNSaIcEC1Ev>
 800c460:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c464:	f107 0314 	add.w	r3, r7, #20
 800c468:	4621      	mov	r1, r4
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fb fa8e 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fca5 	bl	800cdc0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c476:	4603      	mov	r3, r0
 800c478:	681d      	ldr	r5, [r3, #0]
 800c47a:	6838      	ldr	r0, [r7, #0]
 800c47c:	f000 fcab 	bl	800cdd6 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c480:	4603      	mov	r3, r0
 800c482:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c486:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c488:	f000 fcb0 	bl	800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c48c:	4603      	mov	r3, r0
 800c48e:	681c      	ldr	r4, [r3, #0]
 800c490:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c492:	f000 fcb6 	bl	800ce02 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c496:	4603      	mov	r3, r0
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f107 0114 	add.w	r1, r7, #20
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	9400      	str	r4, [sp, #0]
 800c4a4:	4633      	mov	r3, r6
 800c4a6:	462a      	mov	r2, r5
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	f00e fb81 	bl	801abb0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c4ae:	4641      	mov	r1, r8
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 fcc1 	bl	800ce38 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c4b6:	f107 0314 	add.w	r3, r7, #20
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f01c f9db 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c4c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f01c f8ed 	bl	80286a4 <_ZNSaIcED1Ev>
 800c4ca:	bf00      	nop
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	3730      	adds	r7, #48	@ 0x30
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4d6 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
	return get();
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fcdf 	bl	800bea2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800c4e4:	4603      	mov	r3, r0
      }
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fd0c 	bl	800cf1c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4618      	mov	r0, r3
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	f107 030c 	add.w	r3, r7, #12
 800c51c:	4611      	mov	r1, r2
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 fd12 	bl	800cf48 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	1d1a      	adds	r2, r3, #4
 800c53a:	f107 030c 	add.w	r3, r7, #12
 800c53e:	4611      	mov	r1, r2
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fd01 	bl	800cf48 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	4618      	mov	r0, r3
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c550:	b590      	push	{r4, r7, lr}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fd04 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c560:	4603      	mov	r3, r0
 800c562:	681c      	ldr	r4, [r3, #0]
 800c564:	6838      	ldr	r0, [r7, #0]
 800c566:	f000 fcff 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c56a:	4603      	mov	r3, r0
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	429c      	cmp	r4, r3
 800c570:	bf14      	ite	ne
 800c572:	2301      	movne	r3, #1
 800c574:	2300      	moveq	r3, #0
 800c576:	b2db      	uxtb	r3, r3
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd90      	pop	{r4, r7, pc}

0800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f103 0208 	add.w	r2, r3, #8
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	601a      	str	r2, [r3, #0]
	return *this;
 800c594:	687b      	ldr	r3, [r7, #4]
      }
 800c596:	4618      	mov	r0, r3
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c5a2:	b480      	push	{r7}
 800c5a4:	b083      	sub	sp, #12
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bf14      	ite	ne
 800c5ca:	2301      	movne	r3, #1
 800c5cc:	2300      	moveq	r3, #0
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fcca 	bl	800cf7e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c5ea:	4603      	mov	r3, r0
      }
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	return get();
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fcca 	bl	800cf96 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800c602:	4603      	mov	r3, r0
      }
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	ca06      	ldmia	r2, {r1, r2}
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f000 fcc6 	bl	800cfb0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fd29 	bl	800d08c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800c63a:	4603      	mov	r3, r0
  }
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
    this->set(src);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fd50 	bl	800d0f6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800c656:	687b      	ldr	r3, [r7, #4]
  }
 800c658:	4618      	mov	r0, r3
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
    return as<T>();
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fd4f 	bl	800d112 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800c674:	bf00      	nop
  }
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe f9c3 	bl	800aa28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b082      	sub	sp, #8
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6cc:	6838      	ldr	r0, [r7, #0]
 800c6ce:	f7ff ffed 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fd3f 	bl	800d15a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 800c6dc:	bf00      	nop
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
      { }
 800c6ec:	4a04      	ldr	r2, [pc, #16]	@ (800c700 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	0802b424 	.word	0x0802b424

0800c704 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
      { }
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff ffe9 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c712:	210c      	movs	r1, #12
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f01b ffa2 	bl	802865e <_ZdlPvj>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	4638      	mov	r0, r7
 800c72e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800c732:	463b      	mov	r3, r7
 800c734:	4618      	mov	r0, r3
 800c736:	f7f8 fdb0 	bl	800529a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800c740:	2300      	movs	r3, #0
 800c742:	e021      	b.n	800c788 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800c744:	463b      	mov	r3, r7
 800c746:	4618      	mov	r0, r3
 800c748:	f7fe f9fe 	bl	800ab48 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800c752:	463b      	mov	r3, r7
 800c754:	4618      	mov	r0, r3
 800c756:	f7f8 fdbd 	bl	80052d4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800c75a:	4603      	mov	r3, r0
 800c75c:	4619      	mov	r1, r3
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f7fe faa0 	bl	800aca4 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800c764:	2301      	movs	r3, #1
 800c766:	e00f      	b.n	800c788 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800c768:	6a38      	ldr	r0, [r7, #32]
 800c76a:	463b      	mov	r3, r7
 800c76c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c76e:	f000 fd27 	bl	800d1c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800c772:	6178      	str	r0, [r7, #20]
  if (dup) {
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d005      	beq.n	800c786 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800c77a:	6979      	ldr	r1, [r7, #20]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7f8 fffa 	bl	8005776 <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c790:	b590      	push	{r4, r7, lr}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 facf 	bl	800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c7a6:	683c      	ldr	r4, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fac8 	bl	800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f81e 	bl	800c7fa <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	68f9      	ldr	r1, [r7, #12]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 fae0 	bl	800cd88 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800c7c8:	bf00      	nop
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd90      	pop	{r4, r7, pc}

0800c7d0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fab0 	bl	800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 faaa 	bl	800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
	return __p;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
      }
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4618      	mov	r0, r3
 800c806:	f000 fd01 	bl	800d20c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fcf5 	bl	800d224 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c83a:	4603      	mov	r3, r0
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fcf4 	bl	800d23e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fcf7 	bl	800d25e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c870:	4603      	mov	r3, r0
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f959 	bl	800cb3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c88a:	4603      	mov	r3, r0
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3320      	adds	r3, #32
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fa8f 	bl	800adda <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f01b ffd8 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c8d0:	b590      	push	{r4, r7, lr}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c8da:	683c      	ldr	r4, [r7, #0]
 800c8dc:	2c00      	cmp	r4, #0
 800c8de:	d006      	beq.n	800c8ee <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff ffe2 	bl	800c8aa <_ZN17JsonConfigHandlerD1Ev>
 800c8e6:	216c      	movs	r1, #108	@ 0x6c
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f01b feb8 	bl	802865e <_ZdlPvj>
      }
 800c8ee:	bf00      	nop
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd90      	pop	{r4, r7, pc}

0800c8f6 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3304      	adds	r3, #4
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fcb5 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fcb6 	bl	800d294 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fcb9 	bl	800d2b4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c942:	4603      	mov	r3, r0
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fab2 	bl	800cec0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c95c:	4603      	mov	r3, r0
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4618      	mov	r0, r3
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	3338      	adds	r3, #56	@ 0x38
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff fb71 	bl	800c070 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	332c      	adds	r3, #44	@ 0x2c
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff fb6c 	bl	800c070 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f01b ff6b 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c9aa:	b590      	push	{r4, r7, lr}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c9b4:	683c      	ldr	r4, [r7, #0]
 800c9b6:	2c00      	cmp	r4, #0
 800c9b8:	d006      	beq.n	800c9c8 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7ff ffde 	bl	800c97c <_ZN9pruThreadD1Ev>
 800c9c0:	2144      	movs	r1, #68	@ 0x44
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f01b fe4b 	bl	802865e <_ZdlPvj>
      }
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd90      	pop	{r4, r7, pc}

0800c9d0 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fc78 	bl	800d2ce <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	605a      	str	r2, [r3, #4]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	609a      	str	r2, [r3, #8]
	{ }
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
	if (__p)
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d005      	beq.n	800ca44 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 fc50 	bl	800d2e4 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800ca44:	bf00      	nop
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b084      	sub	sp, #16
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 fc46 	bl	800d302 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800ca76:	bf00      	nop
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fc39 	bl	800d31c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff ffe6 	bl	800ca94 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800cad2:	b590      	push	{r4, r7, lr}
 800cad4:	b085      	sub	sp, #20
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff febf 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cae2:	4603      	mov	r3, r0
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800cae8:	683c      	ldr	r4, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff feb8 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800caf0:	4603      	mov	r3, r0
 800caf2:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f81e 	bl	800cb3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800cb00:	4603      	mov	r3, r0
 800cb02:	68f9      	ldr	r1, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fee3 	bl	800c8d0 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800cb0a:	bf00      	nop
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd90      	pop	{r4, r7, pc}

0800cb12 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff fea0 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb20:	4603      	mov	r3, r0
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7ff fe9a 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
	return __p;
 800cb32:	68fb      	ldr	r3, [r7, #12]
      }
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 fbfc 	bl	800d344 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4618      	mov	r0, r3
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb82:	b480      	push	{r7}
 800cb84:	b083      	sub	sp, #12
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fbcc 	bl	800d35c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff ffe6 	bl	800cbae <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fbc4 	bl	800d384 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 fbc4 	bl	800d39e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800cc16:	4603      	mov	r3, r0
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	3204      	adds	r2, #4
 800cc4a:	6812      	ldr	r2, [r2, #0]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	4790      	blx	r2
      }
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 fba6 	bl	800d3b8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800cc96:	6838      	ldr	r0, [r7, #0]
 800cc98:	f000 fba8 	bl	800d3ec <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f107 0308 	add.w	r3, r7, #8
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fbac 	bl	800d402 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800ccaa:	f107 0308 	add.w	r3, r7, #8
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fbc4 	bl	800d43e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800ccb6:	f107 0308 	add.w	r3, r7, #8
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fe fa22 	bl	800b104 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800ccc0:	687b      	ldr	r3, [r7, #4]
      }
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fbca 	bl	800d46c <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fbc9 	bl	800d484 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4618      	mov	r0, r3
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800cd12:	b590      	push	{r4, r7, lr}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	60f8      	str	r0, [r7, #12]
 800cd1a:	60b9      	str	r1, [r7, #8]
 800cd1c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cd1e:	68fc      	ldr	r4, [r7, #12]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff ffeb 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd26:	4602      	mov	r2, r0
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f000 fbbd 	bl	800d4ae <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4618      	mov	r0, r3
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd90      	pop	{r4, r7, pc}

0800cd3e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b082      	sub	sp, #8
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fbc9 	bl	800d4e0 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	4618      	mov	r0, r3
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff fd49 	bl	800c7fa <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cd72:	b480      	push	{r7}
 800cd74:	b083      	sub	sp, #12
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d004      	beq.n	800cda2 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	3204      	adds	r2, #4
 800cd9c:	6812      	ldr	r2, [r2, #0]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	4790      	blx	r2
      }
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	370c      	adds	r7, #12
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr

0800cdd6 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdd6:	b480      	push	{r7}
 800cdd8:	b083      	sub	sp, #12
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce02:	b480      	push	{r7}
 800ce04:	b083      	sub	sp, #12
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	4611      	mov	r1, r2
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fb66 	bl	800d4fa <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff ffe6 	bl	800ce18 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800ce56:	b590      	push	{r4, r7, lr}
 800ce58:	b085      	sub	sp, #20
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fd66 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ce66:	4603      	mov	r3, r0
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800ce6c:	683c      	ldr	r4, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff fd5f 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ce74:	4603      	mov	r3, r0
 800ce76:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f81e 	bl	800cec0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800ce84:	4603      	mov	r3, r0
 800ce86:	68f9      	ldr	r1, [r7, #12]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fd8e 	bl	800c9aa <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800ce8e:	bf00      	nop
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd90      	pop	{r4, r7, pc}

0800ce96 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff fd47 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cea4:	4603      	mov	r3, r0
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff fd41 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	return __p;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
      }
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fb29 	bl	800d522 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ced0:	4603      	mov	r3, r0
 800ced2:	4618      	mov	r0, r3
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ceda:	b480      	push	{r7}
 800cedc:	b083      	sub	sp, #12
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4618      	mov	r0, r3
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr

0800cf06 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	1d1a      	adds	r2, r3, #4
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	3304      	adds	r3, #4
 800cf36:	4619      	mov	r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	f7ff fba0 	bl	800c67e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4618      	mov	r0, r3
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fad7 	bl	800d53a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 fad6 	bl	800d552 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	1d38      	adds	r0, r7, #4
 800cfba:	e880 0006 	stmia.w	r0, {r1, r2}
 800cfbe:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	1d3a      	adds	r2, r7, #4
 800cfc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfca:	e883 0003 	stmia.w	r3, {r0, r1}
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	60da      	str	r2, [r3, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800cfea:	687b      	ldr	r3, [r7, #4]
  }
 800cfec:	4618      	mov	r0, r3
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	3304      	adds	r3, #4
 800d008:	3204      	adds	r2, #4
 800d00a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d00e:	e883 0003 	stmia.w	r3, {r0, r1}
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	68da      	ldr	r2, [r3, #12]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	60da      	str	r2, [r3, #12]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800d028:	b082      	sub	sp, #8
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
 800d034:	f107 0110 	add.w	r1, r7, #16
 800d038:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	3304      	adds	r3, #4
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	4618      	mov	r0, r3
 800d044:	f7ff ffd8 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	3314      	adds	r3, #20
 800d04c:	f107 0210 	add.w	r2, r7, #16
 800d050:	ca07      	ldmia	r2, {r0, r1, r2}
 800d052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4618      	mov	r0, r3
 800d05a:	3708      	adds	r7, #8
 800d05c:	46bd      	mov	sp, r7
 800d05e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d062:	b002      	add	sp, #8
 800d064:	4770      	bx	lr

0800d066 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800d066:	b580      	push	{r7, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800d070:	6838      	ldr	r0, [r7, #0]
 800d072:	f000 fa7c 	bl	800d56e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800d076:	4602      	mov	r2, r0
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4611      	mov	r1, r2
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 fa81 	bl	800d584 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800d082:	bf00      	nop
}
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800d09c:	6938      	ldr	r0, [r7, #16]
 800d09e:	f000 fd2a 	bl	800daf6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	6938      	ldr	r0, [r7, #16]
 800d0a6:	f000 fd36 	bl	800db16 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	f107 0308 	add.w	r3, r7, #8
 800d0b0:	4621      	mov	r1, r4
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f8 fca1 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800d0b8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0c2:	f7f9 f993 	bl	80063ec <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800d0c6:	4603      	mov	r3, r0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	371c      	adds	r7, #28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd90      	pop	{r4, r7, pc}

0800d0d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800d0da:	6838      	ldr	r0, [r7, #0]
 800d0dc:	f000 fa61 	bl	800d5a2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 fa66 	bl	800d5b8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800d0ec:	bf00      	nop
}
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 fa67 	bl	800d5d6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800d108:	4603      	mov	r3, r0
  }
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800d112:	b590      	push	{r4, r7, lr}
 800d114:	b087      	sub	sp, #28
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	617b      	str	r3, [r7, #20]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800d124:	6938      	ldr	r0, [r7, #16]
 800d126:	f000 ffd3 	bl	800e0d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800d12a:	4604      	mov	r4, r0
 800d12c:	6938      	ldr	r0, [r7, #16]
 800d12e:	f000 ffdf 	bl	800e0f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800d132:	4602      	mov	r2, r0
 800d134:	f107 0308 	add.w	r3, r7, #8
 800d138:	4621      	mov	r1, r4
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f8 fc88 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800d140:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f107 0308 	add.w	r3, r7, #8
 800d148:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d14c:	f7fd fde0 	bl	800ad10 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800d150:	bf00      	nop
}
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	371c      	adds	r7, #28
 800d156:	46bd      	mov	sp, r7
 800d158:	bd90      	pop	{r4, r7, pc}

0800d15a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800d15a:	b5b0      	push	{r4, r5, r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685a      	ldr	r2, [r3, #4]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d012      	beq.n	800d196 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d170:	687c      	ldr	r4, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685d      	ldr	r5, [r3, #4]
 800d176:	6838      	ldr	r0, [r7, #0]
 800d178:	f000 fa3c 	bl	800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d17c:	4603      	mov	r3, r0
 800d17e:	461a      	mov	r2, r3
 800d180:	4629      	mov	r1, r5
 800d182:	4620      	mov	r0, r4
 800d184:	f000 fa41 	bl	800d60a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	f103 0208 	add.w	r2, r3, #8
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	605a      	str	r2, [r3, #4]
 800d194:	e00c      	b.n	800d1b0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff f9c9 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d19c:	4604      	mov	r4, r0
 800d19e:	6838      	ldr	r0, [r7, #0]
 800d1a0:	f000 fa28 	bl	800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fa40 	bl	800d630 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 fab9 	bl	800d728 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>
 800d1b6:	4603      	mov	r3, r0
#endif
      }
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bdb0      	pop	{r4, r5, r7, pc}

0800d1c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800d1ce:	463b      	mov	r3, r7
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7f8 f862 	bl	800529a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d001      	beq.n	800d1e0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e011      	b.n	800d204 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f103 0008 	add.w	r0, r3, #8
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1f0:	f000 fab5 	bl	800d75e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800d1f4:	6178      	str	r0, [r7, #20]
    if (!node)
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2201      	movs	r2, #1
 800d200:	711a      	strb	r2, [r3, #4]
    return node;
 800d202:	697b      	ldr	r3, [r7, #20]
  }
 800d204:	4618      	mov	r0, r3
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fae2 	bl	800d7de <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d21a:	4603      	mov	r3, r0
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fae1 	bl	800d7f6 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d234:	4603      	mov	r3, r0
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fae1 	bl	800d80e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 fae9 	bl	800d826 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d25e:	b580      	push	{r7, lr}
 800d260:	b082      	sub	sp, #8
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 faea 	bl	800d842 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d26e:	4603      	mov	r3, r0
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
      { }
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fadc 	bl	800d85a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fae4 	bl	800d872 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 fae5 	bl	800d88e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	68b9      	ldr	r1, [r7, #8]
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f000 fad6 	bl	800d8a6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800d2fa:	bf00      	nop
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fad8 	bl	800d8c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800d314:	bf00      	nop
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d31c:	b590      	push	{r4, r7, lr}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fa8c 	bl	800c846 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d32e:	683c      	ldr	r4, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fa95 	bl	800c860 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800d336:	4603      	mov	r3, r0
 800d338:	601c      	str	r4, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	bd90      	pop	{r4, r7, pc}

0800d344 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fad2 	bl	800d8f6 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d352:	4603      	mov	r3, r0
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 fad0 	bl	800d90e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d36e:	683c      	ldr	r4, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff fc3b 	bl	800cbec <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d376:	4603      	mov	r3, r0
 800d378:	601c      	str	r4, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	bd90      	pop	{r4, r7, pc}

0800d384 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 faca 	bl	800d928 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d394:	4603      	mov	r3, r0
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fac9 	bl	800d940 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 fac1 	bl	800d958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 faff 	bl	800d9e0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800d402:	b580      	push	{r7, lr}
 800d404:	b082      	sub	sp, #8
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
 800d40a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3304      	adds	r3, #4
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff ff2d 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	1d1a      	adds	r2, r3, #4
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	3304      	adds	r3, #4
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f000 fae4 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
      }
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800d43e:	b580      	push	{r7, lr}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fae6 	bl	800da20 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1d1a      	adds	r2, r3, #4
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f000 fac9 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff fbad 	bl	800cbec <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d492:	4603      	mov	r3, r0
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fba7 	bl	800cbec <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	601a      	str	r2, [r3, #0]
	return __p;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
      }
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800d4ae:	b5b0      	push	{r4, r5, r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	60f8      	str	r0, [r7, #12]
 800d4b6:	60b9      	str	r1, [r7, #8]
 800d4b8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800d4ba:	68fc      	ldr	r4, [r7, #12]
 800d4bc:	68b8      	ldr	r0, [r7, #8]
 800d4be:	f000 face 	bl	800da5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff fc19 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f000 facf 	bl	800da74 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bdb0      	pop	{r4, r5, r7, pc}

0800d4e0 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 fade 	bl	800daac <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d4fa:	b590      	push	{r4, r7, lr}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff fa06 	bl	800c918 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d50c:	683c      	ldr	r4, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fa0f 	bl	800c932 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800d514:	4603      	mov	r3, r0
 800d516:	601c      	str	r4, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4618      	mov	r0, r3
 800d51c:	370c      	adds	r7, #12
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd90      	pop	{r4, r7, pc}

0800d522 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 faca 	bl	800dac4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d530:	4603      	mov	r3, r0
 800d532:	4618      	mov	r0, r3
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4618      	mov	r0, r3
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 fabd 	bl	800dadc <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d562:	4603      	mov	r3, r0
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}

0800d56e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d576:	687b      	ldr	r3, [r7, #4]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d58e:	2301      	movs	r3, #1
 800d590:	2204      	movs	r2, #4
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7f7 fe69 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d5aa:	687b      	ldr	r3, [r7, #4]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	220a      	movs	r2, #10
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f7 fe4f 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 faa6 	bl	800db36 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800d5ea:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b084      	sub	sp, #16
 800d60e:	af00      	add	r7, sp, #0
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ffec 	bl	800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d61c:	4603      	mov	r3, r0
 800d61e:	461a      	mov	r2, r3
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 faa1 	bl	800db6a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800d628:	bf00      	nop
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800d630:	b5b0      	push	{r4, r5, r7, lr}
 800d632:	b08c      	sub	sp, #48	@ 0x30
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d63c:	4a39      	ldr	r2, [pc, #228]	@ (800d724 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800d63e:	2101      	movs	r1, #1
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 faaa 	bl	800db9a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800d646:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7fe ff5a 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800d65a:	4603      	mov	r3, r0
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	f107 0214 	add.w	r2, r7, #20
 800d662:	f107 0308 	add.w	r3, r7, #8
 800d666:	4611      	mov	r1, r2
 800d668:	4618      	mov	r0, r3
 800d66a:	f000 fadd 	bl	800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800d66e:	4603      	mov	r3, r0
 800d670:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d676:	4618      	mov	r0, r3
 800d678:	f000 faeb 	bl	800dc52 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800d67c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800d682:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800d688:	69fa      	ldr	r2, [r7, #28]
 800d68a:	18d5      	adds	r5, r2, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7ff ffb1 	bl	800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d692:	4603      	mov	r3, r0
 800d694:	461a      	mov	r2, r3
 800d696:	4629      	mov	r1, r5
 800d698:	4620      	mov	r0, r4
 800d69a:	f7ff ffb6 	bl	800d60a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7ff fc5e 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff f9ca 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d6b8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d6ba:	69fa      	ldr	r2, [r7, #28]
 800d6bc:	4621      	mov	r1, r4
 800d6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c0:	f000 fadb 	bl	800dc7a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d6c4:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d6cc:	f107 0308 	add.w	r3, r7, #8
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff fc49 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff f9b5 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d6e2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 fac6 	bl	800dc7a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d6ee:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800d6f0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	689a      	ldr	r2, [r3, #8]
 800d6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d700:	f7ff f991 	bl	800ca26 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	69ba      	ldr	r2, [r7, #24]
 800d70e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	69fa      	ldr	r2, [r7, #28]
 800d716:	441a      	add	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	609a      	str	r2, [r3, #8]
    }
 800d71c:	bf00      	nop
 800d71e:	3730      	adds	r7, #48	@ 0x30
 800d720:	46bd      	mov	sp, r7
 800d722:	bdb0      	pop	{r4, r5, r7, pc}
 800d724:	0802a7f4 	.word	0x0802a7f4

0800d728 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f7fe fefc 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d736:	4603      	mov	r3, r0
 800d738:	60fb      	str	r3, [r7, #12]
 800d73a:	f107 030c 	add.w	r3, r7, #12
 800d73e:	2101      	movs	r1, #1
 800d740:	4618      	mov	r0, r3
 800d742:	f000 fab9 	bl	800dcb8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>
 800d746:	4603      	mov	r3, r0
 800d748:	60bb      	str	r3, [r7, #8]
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe ff27 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800d754:	4603      	mov	r3, r0
      }
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800d75e:	b580      	push	{r7, lr}
 800d760:	b088      	sub	sp, #32
 800d762:	af02      	add	r7, sp, #8
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	4638      	mov	r0, r7
 800d768:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800d76c:	463b      	mov	r3, r7
 800d76e:	4619      	mov	r1, r3
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f7fa fc29 	bl	8007fc8 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800d776:	6178      	str	r0, [r7, #20]
    if (node) {
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d007      	beq.n	800d78e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	889b      	ldrh	r3, [r3, #4]
 800d782:	3301      	adds	r3, #1
 800d784:	b29a      	uxth	r2, r3
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	809a      	strh	r2, [r3, #4]
      return node;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	e023      	b.n	800d7d6 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800d78e:	463b      	mov	r3, r7
 800d790:	4618      	mov	r0, r3
 800d792:	f7f7 fd93 	bl	80052bc <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800d796:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800d798:	6a39      	ldr	r1, [r7, #32]
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f7f7 fcfc 	bl	8005198 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800d7a0:	6178      	str	r0, [r7, #20]
    if (!node)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d101      	bne.n	800d7ac <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	e014      	b.n	800d7d6 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f103 0208 	add.w	r2, r3, #8
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	463a      	mov	r2, r7
 800d7ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7bc:	f000 fa95 	bl	800dcea <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
    add(node);
 800d7cc:	6979      	ldr	r1, [r7, #20]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7f7 fda6 	bl	8005320 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800d7d4:	697b      	ldr	r3, [r7, #20]
  }
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3718      	adds	r7, #24
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 fa9f 	bl	800dd2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fa9f 	bl	800dd42 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d804:	4603      	mov	r3, r0
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 faa0 	bl	800dd5c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4618      	mov	r0, r3
 800d838:	370c      	adds	r7, #12
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d842:	b580      	push	{r7, lr}
 800d844:	b082      	sub	sp, #8
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fa91 	bl	800dd72 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800d850:	4603      	mov	r3, r0
 800d852:	4618      	mov	r0, r3
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fa92 	bl	800dd8c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4618      	mov	r0, r3
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fa83 	bl	800dda2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800d89c:	4603      	mov	r3, r0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	60f8      	str	r0, [r7, #12]
 800d8ae:	60b9      	str	r1, [r7, #8]
 800d8b0:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68b8      	ldr	r0, [r7, #8]
 800d8ba:	f01a fed0 	bl	802865e <_ZdlPvj>
      }
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d8ce:	e009      	b.n	800d8e4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fa73 	bl	800ddbc <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 fa7a 	bl	800ddd2 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	607b      	str	r3, [r7, #4]
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d1f1      	bne.n	800d8d0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fa72 	bl	800dde8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800d904:	4603      	mov	r3, r0
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fa71 	bl	800de00 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa75 	bl	800de20 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800d936:	4603      	mov	r3, r0
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fa76 	bl	800de3a <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d94e:	4603      	mov	r3, r0
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800d958:	b5b0      	push	{r4, r5, r7, lr}
 800d95a:	b08a      	sub	sp, #40	@ 0x28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	f107 031c 	add.w	r3, r7, #28
 800d96a:	4611      	mov	r1, r2
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 fa70 	bl	800de52 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800d972:	f107 0314 	add.w	r3, r7, #20
 800d976:	f107 021c 	add.w	r2, r7, #28
 800d97a:	4611      	mov	r1, r2
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 fa81 	bl	800de84 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800d982:	f107 0314 	add.w	r3, r7, #20
 800d986:	4618      	mov	r0, r3
 800d988:	f000 faa4 	bl	800ded4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800d98c:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800d98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d990:	4619      	mov	r1, r3
 800d992:	202c      	movs	r0, #44	@ 0x2c
 800d994:	f7fd f83c 	bl	800aa10 <_ZnwjPv>
 800d998:	4604      	mov	r4, r0
 800d99a:	4629      	mov	r1, r5
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 faa7 	bl	800def0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800d9a2:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 fac2 	bl	800df34 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6a3a      	ldr	r2, [r7, #32]
 800d9b4:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800d9b6:	6a38      	ldr	r0, [r7, #32]
 800d9b8:	f000 facb 	bl	800df52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	601a      	str	r2, [r3, #0]
	}
 800d9c2:	f107 0314 	add.w	r3, r7, #20
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 fa6f 	bl	800deaa <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d9cc:	f107 031c 	add.w	r3, r7, #28
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fa4b 	bl	800de6c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3728      	adds	r7, #40	@ 0x28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bdb0      	pop	{r4, r5, r7, pc}

0800d9e0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	{ }
 800d9ea:	bf00      	nop
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800d9f6:	b480      	push	{r7}
 800d9f8:	b085      	sub	sp, #20
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	601a      	str	r2, [r3, #0]
      }
 800da14:	bf00      	nop
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fa9f 	bl	800df6e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da30:	4603      	mov	r3, r0
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800da36:	6838      	ldr	r0, [r7, #0]
 800da38:	f000 fa99 	bl	800df6e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da3c:	4603      	mov	r3, r0
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800da44:	f107 030c 	add.w	r3, r7, #12
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 fa90 	bl	800df6e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da4e:	4603      	mov	r3, r0
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	601a      	str	r2, [r3, #0]
    }
 800da56:	bf00      	nop
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da5e:	b480      	push	{r7}
 800da60:	b083      	sub	sp, #12
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800da74:	b590      	push	{r4, r7, lr}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff f93b 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800da86:	4603      	mov	r3, r0
 800da88:	4619      	mov	r1, r3
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f000 fa7a 	bl	800df84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800da90:	68fc      	ldr	r4, [r7, #12]
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f7ff ffe3 	bl	800da5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800da98:	4603      	mov	r3, r0
 800da9a:	4619      	mov	r1, r3
 800da9c:	4620      	mov	r0, r4
 800da9e:	f000 fa83 	bl	800dfa8 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4618      	mov	r0, r3
 800daa6:	3714      	adds	r7, #20
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd90      	pop	{r4, r7, pc}

0800daac <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fa88 	bl	800dfca <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800daba:	4603      	mov	r3, r0
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 fa89 	bl	800dfe4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800dad2:	4603      	mov	r3, r0
 800dad4:	4618      	mov	r0, r3
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 fa88 	bl	800dffc <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800daec:	4603      	mov	r3, r0
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b082      	sub	sp, #8
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fa88 	bl	800e014 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800db04:	4603      	mov	r3, r0
 800db06:	4618      	mov	r0, r3
 800db08:	f000 fa8f 	bl	800e02a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800db0c:	4603      	mov	r3, r0
  }
 800db0e:	4618      	mov	r0, r3
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fa78 	bl	800e014 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800db24:	4603      	mov	r3, r0
 800db26:	4618      	mov	r0, r3
 800db28:	f000 fa8b 	bl	800e042 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800db2c:	4603      	mov	r3, r0
  }
 800db2e:	4618      	mov	r0, r3
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800db36:	b590      	push	{r4, r7, lr}
 800db38:	b087      	sub	sp, #28
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	60f8      	str	r0, [r7, #12]
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	681c      	ldr	r4, [r3, #0]
 800db46:	f107 0310 	add.w	r3, r7, #16
 800db4a:	68f9      	ldr	r1, [r7, #12]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 fa84 	bl	800e05a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800db52:	f107 0310 	add.w	r3, r7, #16
 800db56:	e893 0006 	ldmia.w	r3, {r1, r2}
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fa93 	bl	800e086 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800db60:	4603      	mov	r3, r0
}
 800db62:	4618      	mov	r0, r3
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	bd90      	pop	{r4, r7, pc}

0800db6a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800db6a:	b590      	push	{r4, r7, lr}
 800db6c:	b085      	sub	sp, #20
 800db6e:	af00      	add	r7, sp, #0
 800db70:	60f8      	str	r0, [r7, #12]
 800db72:	60b9      	str	r1, [r7, #8]
 800db74:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	4619      	mov	r1, r3
 800db7a:	2008      	movs	r0, #8
 800db7c:	f7fc ff48 	bl	800aa10 <_ZnwjPv>
 800db80:	4604      	mov	r4, r0
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff fd36 	bl	800d5f4 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800db88:	4603      	mov	r3, r0
 800db8a:	4619      	mov	r1, r3
 800db8c:	4620      	mov	r0, r4
 800db8e:	f000 fabf 	bl	800e110 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800db92:	bf00      	nop
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	bd90      	pop	{r4, r7, pc}

0800db9a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800db9a:	b590      	push	{r4, r7, lr}
 800db9c:	b087      	sub	sp, #28
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f000 fac5 	bl	800e136 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dbac:	4604      	mov	r4, r0
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f000 fad2 	bl	800e158 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	1ae2      	subs	r2, r4, r3
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	bf34      	ite	cc
 800dbbe:	2301      	movcc	r3, #1
 800dbc0:	2300      	movcs	r3, #0
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f01a fd78 	bl	80286be <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 fac2 	bl	800e158 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 fabe 	bl	800e158 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	613b      	str	r3, [r7, #16]
 800dbe0:	f107 0208 	add.w	r2, r7, #8
 800dbe4:	f107 0310 	add.w	r3, r7, #16
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe f901 	bl	800bdf2 <_ZSt3maxIjERKT_S2_S2_>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4423      	add	r3, r4
 800dbf6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f000 faad 	bl	800e158 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d306      	bcc.n	800dc14 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fa95 	bl	800e136 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d904      	bls.n	800dc1e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fa8e 	bl	800e136 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	e000      	b.n	800dc20 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800dc1e:	697b      	ldr	r3, [r7, #20]
      }
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff f998 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	681c      	ldr	r4, [r3, #0]
 800dc3c:	6838      	ldr	r0, [r7, #0]
 800dc3e:	f7ff f993 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dc42:	4603      	mov	r3, r0
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	1ae3      	subs	r3, r4, r3
 800dc48:	10db      	asrs	r3, r3, #3
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd90      	pop	{r4, r7, pc}

0800dc52 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6839      	ldr	r1, [r7, #0]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 fa86 	bl	800e178 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	e000      	b.n	800dc72 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800dc70:	2300      	movs	r3, #0
      }
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
 800dc86:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	68b9      	ldr	r1, [r7, #8]
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f000 fa81 	bl	800e196 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800dc94:	4603      	mov	r3, r0
      }
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fa90 	bl	800e1d0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	425b      	negs	r3, r3
 800dccc:	4413      	add	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	f107 020c 	add.w	r2, r7, #12
 800dcd4:	f107 0308 	add.w	r3, r7, #8
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff f934 	bl	800cf48 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800dcea:	b590      	push	{r4, r7, lr}
 800dcec:	b087      	sub	sp, #28
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	1d3c      	adds	r4, r7, #4
 800dcf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dcf6:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	617b      	str	r3, [r7, #20]
 800dcfc:	e00c      	b.n	800dd18 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	18d4      	adds	r4, r2, r3
 800dd04:	1d3b      	adds	r3, r7, #4
 800dd06:	6979      	ldr	r1, [r7, #20]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7f2 fffd 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	3301      	adds	r3, #1
 800dd16:	617b      	str	r3, [r7, #20]
 800dd18:	697a      	ldr	r2, [r7, #20]
 800dd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d3ee      	bcc.n	800dcfe <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800dd20:	bf00      	nop
 800dd22:	bf00      	nop
 800dd24:	371c      	adds	r7, #28
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd90      	pop	{r4, r7, pc}

0800dd2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 fa58 	bl	800e1e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 fa56 	bl	800e1fe <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800dd52:	4603      	mov	r3, r0
 800dd54:	4618      	mov	r0, r3
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4618      	mov	r0, r3
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fa49 	bl	800e214 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800dd82:	4603      	mov	r3, r0
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fa3c 	bl	800e22a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7fd fa21 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fa25 	bl	800e240 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 fa24 	bl	800e256 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	f000 fa2c 	bl	800e26e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 fa2d 	bl	800e28a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800de30:	4603      	mov	r3, r0
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa2c 	bl	800e2a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800de48:	4603      	mov	r3, r0
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800de52:	b580      	push	{r7, lr}
 800de54:	b082      	sub	sp, #8
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	6039      	str	r1, [r7, #0]
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fa2b 	bl	800e2b8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fa2a 	bl	800e2ce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800de8e:	2101      	movs	r1, #1
 800de90:	6838      	ldr	r0, [r7, #0]
 800de92:	f000 fa27 	bl	800e2e4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800de96:	4603      	mov	r3, r0
 800de98:	461a      	mov	r2, r3
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fa30 	bl	800e302 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d007      	beq.n	800deca <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6818      	ldr	r0, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	4619      	mov	r1, r3
 800dec6:	f000 fa30 	bl	800e32a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fa31 	bl	800e348 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800dee6:	4603      	mov	r3, r0
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fa2f 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800df02:	4a0b      	ldr	r2, [pc, #44]	@ (800df30 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	330c      	adds	r3, #12
 800df0c:	4621      	mov	r1, r4
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fa3c 	bl	800e38c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 f81c 	bl	800df52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800df1a:	4602      	mov	r2, r0
 800df1c:	463b      	mov	r3, r7
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fa42 	bl	800e3aa <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4618      	mov	r0, r3
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd90      	pop	{r4, r7, pc}
 800df30:	0802b408 	.word	0x0802b408

0800df34 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	605a      	str	r2, [r3, #4]
	return *this;
 800df44:	687b      	ldr	r3, [r7, #4]
      }
 800df46:	4618      	mov	r0, r3
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	330c      	adds	r3, #12
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 fa2f 	bl	800e3c2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800df64:	4603      	mov	r3, r0
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800df8e:	6838      	ldr	r0, [r7, #0]
 800df90:	f7fe feb4 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800df94:	4603      	mov	r3, r0
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fa1e 	bl	800e3da <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800dfb2:	6838      	ldr	r0, [r7, #0]
 800dfb4:	f7ff fd53 	bl	800da5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b082      	sub	sp, #8
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 fa13 	bl	800e400 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b082      	sub	sp, #8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fa12 	bl	800e416 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800dff2:	4603      	mov	r3, r0
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fa11 	bl	800e42c <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e00a:	4603      	mov	r3, r0
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800e01c:	687b      	ldr	r3, [r7, #4]
  }
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b082      	sub	sp, #8
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fa07 	bl	800e446 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800e038:	4603      	mov	r3, r0
  }
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fa17 	bl	800e47e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800e050:	4603      	mov	r3, r0
  }
 800e052:	4618      	mov	r0, r3
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800e05a:	b590      	push	{r4, r7, lr}
 800e05c:	b083      	sub	sp, #12
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800e064:	6838      	ldr	r0, [r7, #0]
 800e066:	f000 fa18 	bl	800e49a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800e06a:	4604      	mov	r4, r0
 800e06c:	6838      	ldr	r0, [r7, #0]
 800e06e:	f7ff fd52 	bl	800db16 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	4621      	mov	r1, r4
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7f7 fce9 	bl	8005a50 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	bd90      	pop	{r4, r7, pc}

0800e086 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800e086:	b580      	push	{r7, lr}
 800e088:	b086      	sub	sp, #24
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	60f8      	str	r0, [r7, #12]
 800e08e:	1d3b      	adds	r3, r7, #4
 800e090:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800e094:	1d3b      	adds	r3, r7, #4
 800e096:	4618      	mov	r0, r3
 800e098:	f7f9 fa22 	bl	80074e0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800e09c:	6178      	str	r0, [r7, #20]
    if (!data)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e00f      	b.n	800e0c8 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800e0a8:	1d3b      	adds	r3, r7, #4
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f9 fbbd 	bl	800782a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800e0b0:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800e0b2:	6939      	ldr	r1, [r7, #16]
 800e0b4:	6978      	ldr	r0, [r7, #20]
 800e0b6:	f7f8 f9ff 	bl	80064b8 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	68f9      	ldr	r1, [r7, #12]
 800e0be:	6978      	ldr	r0, [r7, #20]
 800e0c0:	f000 f9fb 	bl	800e4ba <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	bf00      	nop
  }
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7fe ff82 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 fa2d 	bl	800e540 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e0e6:	4603      	mov	r3, r0
  }
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7fe ff72 	bl	800cfe2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800e0fe:	4603      	mov	r3, r0
 800e100:	4618      	mov	r0, r3
 800e102:	f000 fa3c 	bl	800e57e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e106:	4603      	mov	r3, r0
  }
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800e110:	b590      	push	{r4, r7, lr}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800e11a:	687c      	ldr	r4, [r7, #4]
 800e11c:	6838      	ldr	r0, [r7, #0]
 800e11e:	f7fe fac5 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e122:	4603      	mov	r3, r0
 800e124:	4619      	mov	r1, r3
 800e126:	4620      	mov	r0, r4
 800e128:	f000 fa35 	bl	800e596 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4618      	mov	r0, r3
 800e130:	370c      	adds	r7, #12
 800e132:	46bd      	mov	sp, r7
 800e134:	bd90      	pop	{r4, r7, pc}

0800e136 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 fa60 	bl	800e606 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800e146:	4603      	mov	r3, r0
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 fa42 	bl	800e5d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800e14e:	4603      	mov	r3, r0
 800e150:	4618      	mov	r0, r3
 800e152:	3708      	adds	r7, #8
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	10db      	asrs	r3, r3, #3
 800e16c:	4618      	mov	r0, r3
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e182:	2200      	movs	r2, #0
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 fa48 	bl	800e61c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800e18c:	4603      	mov	r3, r0
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e196:	b5b0      	push	{r4, r5, r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	607a      	str	r2, [r7, #4]
 800e1a2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 fa63 	bl	800e670 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	68b8      	ldr	r0, [r7, #8]
 800e1ae:	f000 fa5f 	bl	800e670 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fa5b 	bl	800e670 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	4629      	mov	r1, r5
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fa60 	bl	800e686 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800e1c6:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bdb0      	pop	{r4, r5, r7, pc}

0800e1d0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800e1da:	6838      	ldr	r0, [r7, #0]
 800e1dc:	f7fd f821 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e1fe:	b480      	push	{r7}
 800e200:	b083      	sub	sp, #12
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4618      	mov	r0, r3
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr

0800e22a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800e22a:	b480      	push	{r7}
 800e22c:	b083      	sub	sp, #12
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fa37 	bl	800e6d2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4618      	mov	r0, r3
 800e268:	3708      	adds	r7, #8
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	601a      	str	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4618      	mov	r0, r3
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr

0800e28a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e28a:	b480      	push	{r7}
 800e28c:	b083      	sub	sp, #12
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4618      	mov	r0, r3
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fa1d 	bl	800e6e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2ce:	b480      	push	{r7}
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fa04 	bl	800e700 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e302:	b580      	push	{r7, lr}
 800e304:	b084      	sub	sp, #16
 800e306:	af00      	add	r7, sp, #0
 800e308:	60f8      	str	r0, [r7, #12]
 800e30a:	60b9      	str	r1, [r7, #8]
 800e30c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e30e:	68b8      	ldr	r0, [r7, #8]
 800e310:	f000 fa24 	bl	800e75c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800e314:	4602      	mov	r2, r0
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	605a      	str	r2, [r3, #4]
      { }
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	60f8      	str	r0, [r7, #12]
 800e332:	60b9      	str	r1, [r7, #8]
 800e334:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 fa19 	bl	800e772 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800e340:	bf00      	nop
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800e350:	687b      	ldr	r3, [r7, #4]
    }
 800e352:	4618      	mov	r0, r3
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
	...

0800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800e368:	4a07      	ldr	r2, [pc, #28]	@ (800e388 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2201      	movs	r2, #1
 800e372:	605a      	str	r2, [r3, #4]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	609a      	str	r2, [r3, #8]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	0802b424 	.word	0x0802b424

0800e38c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	7039      	strb	r1, [r7, #0]
 800e396:	463b      	mov	r3, r7
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f9fa 	bl	800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b082      	sub	sp, #8
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800e3b4:	6838      	ldr	r0, [r7, #0]
 800e3b6:	f000 f9f9 	bl	800e7ac <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800e3ba:	bf00      	nop
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b082      	sub	sp, #8
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f9ff 	bl	800e7ce <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800e3da:	b590      	push	{r4, r7, lr}
 800e3dc:	b083      	sub	sp, #12
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e3e4:	687c      	ldr	r4, [r7, #4]
 800e3e6:	6838      	ldr	r0, [r7, #0]
 800e3e8:	f7fe fc88 	bl	800ccfc <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 f9f7 	bl	800e7e4 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}

0800e400 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4618      	mov	r0, r3
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e416:	b480      	push	{r7}
 800e418:	b083      	sub	sp, #12
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	4618      	mov	r0, r3
 800e438:	f000 f9e0 	bl	800e7fc <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800e43c:	4603      	mov	r3, r0
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800e446:	b590      	push	{r4, r7, lr}
 800e448:	b085      	sub	sp, #20
 800e44a:	af02      	add	r7, sp, #8
 800e44c:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3304      	adds	r3, #4
 800e452:	4618      	mov	r0, r3
 800e454:	f000 f874 	bl	800e540 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e458:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 f88d 	bl	800e57e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e464:	4602      	mov	r2, r0
    return VariantData::getMember(
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	9200      	str	r2, [sp, #0]
 800e46a:	3314      	adds	r3, #20
 800e46c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e46e:	4620      	mov	r0, r4
 800e470:	f7fb faba 	bl	80099e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800e474:	4603      	mov	r3, r0
  }
 800e476:	4618      	mov	r0, r3
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd90      	pop	{r4, r7, pc}

0800e47e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e47e:	b580      	push	{r7, lr}
 800e480:	b082      	sub	sp, #8
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3304      	adds	r3, #4
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 f877 	bl	800e57e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e490:	4603      	mov	r3, r0
  }
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff fdb6 	bl	800e014 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 f9b1 	bl	800e812 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800e4b0:	4603      	mov	r3, r0
  }
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800e4ba:	b5b0      	push	{r4, r5, r7, lr}
 800e4bc:	b086      	sub	sp, #24
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800e4c6:	68b8      	ldr	r0, [r7, #8]
 800e4c8:	f7fa fd57 	bl	8008f7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d006      	beq.n	800e4e0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	220a      	movs	r2, #10
 800e4d6:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	e02a      	b.n	800e536 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800e4e0:	f107 0310 	add.w	r3, r7, #16
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f7 fdff 	bl	80060ea <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800e4ec:	f107 0310 	add.w	r3, r7, #16
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fb ff1c 	bl	800a32e <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	f083 0301 	eor.w	r3, r3, #1
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800e502:	2300      	movs	r3, #0
 800e504:	e018      	b.n	800e538 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	221a      	movs	r2, #26
 800e50a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800e50c:	f107 0310 	add.w	r3, r7, #16
 800e510:	4618      	mov	r0, r3
 800e512:	f7fb ff1d 	bl	800a350 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800e516:	4603      	mov	r3, r0
 800e518:	461a      	mov	r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2200      	movs	r2, #0
 800e522:	461c      	mov	r4, r3
 800e524:	4615      	mov	r5, r2
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fb ff1c 	bl	800a368 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800e530:	4603      	mov	r3, r0
 800e532:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800e536:	2301      	movs	r3, #1
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3718      	adds	r7, #24
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bdb0      	pop	{r4, r5, r7, pc}

0800e540 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e540:	b5b0      	push	{r4, r5, r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	3304      	adds	r3, #4
 800e550:	4618      	mov	r0, r3
 800e552:	f000 fa0e 	bl	800e972 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800e556:	4605      	mov	r5, r0
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3304      	adds	r3, #4
 800e560:	4618      	mov	r0, r3
 800e562:	f000 fa12 	bl	800e98a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e566:	4603      	mov	r3, r0
    return VariantData::getElement(
 800e568:	461a      	mov	r2, r3
 800e56a:	4621      	mov	r1, r4
 800e56c:	4628      	mov	r0, r5
 800e56e:	f7fc fb38 	bl	800abe2 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800e572:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800e574:	bf00      	nop
  }
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bdb0      	pop	{r4, r5, r7, pc}

0800e57e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f94f 	bl	800e82a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800e58c:	4603      	mov	r3, r0
  }
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3304      	adds	r3, #4
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fe63 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	1d1a      	adds	r2, r3, #4
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f7ff fa1a 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]
      }
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e5da:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800e5de:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f930 	bl	800e846 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e5ea:	f107 0208 	add.w	r2, r7, #8
 800e5ee:	f107 030c 	add.w	r3, r7, #12
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fc fa93 	bl	800ab20 <_ZSt3minIjERKT_S2_S2_>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	681b      	ldr	r3, [r3, #0]
      }
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 f918 	bl	800e85e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e62e:	4602      	mov	r2, r0
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	4293      	cmp	r3, r2
 800e634:	bf8c      	ite	hi
 800e636:	2301      	movhi	r3, #1
 800e638:	2300      	movls	r3, #0
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	bf14      	ite	ne
 800e640:	2301      	movne	r3, #1
 800e642:	2300      	moveq	r3, #0
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d007      	beq.n	800e65a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e650:	d301      	bcc.n	800e656 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e652:	f01a f82b 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e656:	f01a f826 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	00db      	lsls	r3, r3, #3
 800e65e:	4618      	mov	r0, r3
 800e660:	f01a f80e 	bl	8028680 <_Znwj>
 800e664:	4603      	mov	r3, r0
 800e666:	bf00      	nop
      }
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800e670:	b480      	push	{r7}
 800e672:	b083      	sub	sp, #12
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800e686:	b590      	push	{r4, r7, lr}
 800e688:	b087      	sub	sp, #28
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	607a      	str	r2, [r7, #4]
 800e692:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800e698:	e012      	b.n	800e6c0 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800e69a:	6978      	ldr	r0, [r7, #20]
 800e69c:	f7ff fb8e 	bl	800ddbc <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff fb8a 	bl	800ddbc <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f000 f8e1 	bl	800e876 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3308      	adds	r3, #8
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	3308      	adds	r3, #8
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d1e8      	bne.n	800e69a <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800e6c8:	697b      	ldr	r3, [r7, #20]
    }
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	371c      	adds	r7, #28
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd90      	pop	{r4, r7, pc}

0800e6d2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800e6d2:	b480      	push	{r7}
 800e6d4:	b083      	sub	sp, #12
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
	...

0800e700 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f000 f8ff 	bl	800e910 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e712:	4602      	mov	r2, r0
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	4293      	cmp	r3, r2
 800e718:	bf8c      	ite	hi
 800e71a:	2301      	movhi	r3, #1
 800e71c:	2300      	movls	r3, #0
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	bf14      	ite	ne
 800e724:	2301      	movne	r3, #1
 800e726:	2300      	moveq	r3, #0
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	4a09      	ldr	r2, [pc, #36]	@ (800e758 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d901      	bls.n	800e73a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e736:	f019 ffb9 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e73a:	f019 ffb4 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	222c      	movs	r2, #44	@ 0x2c
 800e742:	fb02 f303 	mul.w	r3, r2, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f019 ff9a 	bl	8028680 <_Znwj>
 800e74c:	4603      	mov	r3, r0
 800e74e:	bf00      	nop
      }
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	05d1745d 	.word	0x05d1745d

0800e75c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4618      	mov	r0, r3
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr

0800e772 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e772:	b580      	push	{r7, lr}
 800e774:	b084      	sub	sp, #16
 800e776:	af00      	add	r7, sp, #0
 800e778:	60f8      	str	r0, [r7, #12]
 800e77a:	60b9      	str	r1, [r7, #8]
 800e77c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	222c      	movs	r2, #44	@ 0x2c
 800e782:	fb02 f303 	mul.w	r3, r2, r3
 800e786:	4619      	mov	r1, r3
 800e788:	68b8      	ldr	r0, [r7, #8]
 800e78a:	f019 ff68 	bl	802865e <_ZdlPvj>
      }
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	2020      	movs	r0, #32
 800e7ba:	f7fc f929 	bl	800aa10 <_ZnwjPv>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f001 ffe1 	bl	8010788 <_ZN12CommsHandlerC1Ev>
    }
 800e7c6:	bf00      	nop
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800e7ce:	b480      	push	{r7}
 800e7d0:	b083      	sub	sp, #12
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800e7d6:	687b      	ldr	r3, [r7, #4]
      }
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr

0800e812 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e812:	b580      	push	{r7, lr}
 800e814:	b082      	sub	sp, #8
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f886 	bl	800e92c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800e820:	4603      	mov	r3, r0
  }
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b082      	sub	sp, #8
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3304      	adds	r3, #4
 800e836:	4618      	mov	r0, r3
 800e838:	f000 f8a7 	bl	800e98a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e83c:	4603      	mov	r3, r0
  }
 800e83e:	4618      	mov	r0, r3
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f8a7 	bl	800e9a2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800e854:	4603      	mov	r3, r0
      }
 800e856:	4618      	mov	r0, r3
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e85e:	b480      	push	{r7}
 800e860:	b083      	sub	sp, #12
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e866:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	60f8      	str	r0, [r7, #12]
 800e87e:	60b9      	str	r1, [r7, #8]
 800e880:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800e882:	68b8      	ldr	r0, [r7, #8]
 800e884:	f7fd ff12 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e888:	4603      	mov	r3, r0
 800e88a:	461a      	mov	r2, r3
 800e88c:	68f9      	ldr	r1, [r7, #12]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7fe febb 	bl	800d60a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800e894:	68b8      	ldr	r0, [r7, #8]
 800e896:	f7ff fa91 	bl	800ddbc <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4619      	mov	r1, r3
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff f9fd 	bl	800dc9e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800e8a4:	bf00      	nop
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af02      	add	r7, sp, #8
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800e8ba:	463b      	mov	r3, r7
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7f6 fcec 	bl	800529a <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e01d      	b.n	800e908 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f7fc f9c3 	bl	800ac58 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d004      	beq.n	800e8e2 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f7f6 ffa5 	bl	8005828 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	e003      	b.n	800e8ea <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f7f6 fe95 	bl	8005612 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	617b      	str	r3, [r7, #20]
    if (!obj)
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e008      	b.n	800e908 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800e8f6:	6978      	ldr	r0, [r7, #20]
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e900:	f000 f85b 	bl	800e9ba <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e904:	4603      	mov	r3, r0
 800e906:	bf00      	nop
  }
 800e908:	4618      	mov	r0, r3
 800e90a:	3718      	adds	r7, #24
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e918:	4b03      	ldr	r3, [pc, #12]	@ (800e928 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	02e8ba2e 	.word	0x02e8ba2e

0800e92c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800e92c:	b590      	push	{r4, r7, lr}
 800e92e:	b087      	sub	sp, #28
 800e930:	af02      	add	r7, sp, #8
 800e932:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3304      	adds	r3, #4
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 f85f 	bl	800e9fc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800e93e:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d101      	bne.n	800e94a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e946:	2300      	movs	r3, #0
 800e948:	e00f      	b.n	800e96a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800e94a:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fe14 	bl	800e57e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e956:	4602      	mov	r2, r0
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	9200      	str	r2, [sp, #0]
 800e95c:	3314      	adds	r3, #20
 800e95e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e960:	4620      	mov	r0, r4
 800e962:	f7ff ffa3 	bl	800e8ac <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800e966:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800e968:	bf00      	nop
  }
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}

0800e972 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e972:	b580      	push	{r7, lr}
 800e974:	b082      	sub	sp, #8
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f7fc fa11 	bl	800ada2 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800e980:	4603      	mov	r3, r0
  }
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fc f9f9 	bl	800ad8a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800e998:	4603      	mov	r3, r0
  }
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff ff57 	bl	800e85e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b088      	sub	sp, #32
 800e9be:	af02      	add	r7, sp, #8
 800e9c0:	60f8      	str	r0, [r7, #12]
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	463b      	mov	r3, r7
 800e9ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7f9 fca0 	bl	8008316 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800e9d6:	6178      	str	r0, [r7, #20]
  if (data)
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	e008      	b.n	800e9f4 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f000 f812 	bl	800ea14 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	bf00      	nop
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3718      	adds	r7, #24
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f85b 	bl	800eac0 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800ea0a:	4603      	mov	r3, r0
  }
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b08a      	sub	sp, #40	@ 0x28
 800ea18:	af02      	add	r7, sp, #8
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	4638      	mov	r0, r7
 800ea1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800ea22:	f107 0318 	add.w	r3, r7, #24
 800ea26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7f7 fad9 	bl	8005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800ea2e:	f107 0318 	add.w	r3, r7, #24
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f8 fd78 	bl	8007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f083 0301 	eor.w	r3, r3, #1
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800ea44:	2300      	movs	r3, #0
 800ea46:	e037      	b.n	800eab8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800ea48:	f107 0310 	add.w	r3, r7, #16
 800ea4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f7 fac6 	bl	8005fe0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800ea54:	f107 0310 	add.w	r3, r7, #16
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f8 fd65 	bl	8007528 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f083 0301 	eor.w	r3, r3, #1
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e024      	b.n	800eab8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800ea6e:	f107 0318 	add.w	r3, r7, #24
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7f8 fd81 	bl	800757a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800ea78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	463b      	mov	r3, r7
 800ea7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea80:	f7fd fe50 	bl	800c724 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f083 0301 	eor.w	r3, r3, #1
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800ea90:	2300      	movs	r3, #0
 800ea92:	e011      	b.n	800eab8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	9301      	str	r3, [sp, #4]
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f107 0218 	add.w	r2, r7, #24
 800eaa4:	ca06      	ldmia	r2, {r1, r2}
 800eaa6:	f7f7 fa14 	bl	8005ed2 <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800eaaa:	f107 0310 	add.w	r3, r7, #16
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f8 fd4b 	bl	800754a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800eab4:	4603      	mov	r3, r0
 800eab6:	bf00      	nop
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3720      	adds	r7, #32
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800eac0:	b5b0      	push	{r4, r5, r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	3304      	adds	r3, #4
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 f81a 	bl	800eb06 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800ead2:	60f8      	str	r0, [r7, #12]
    if (!data)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d101      	bne.n	800eade <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800eada:	2300      	movs	r3, #0
 800eadc:	e00f      	b.n	800eafe <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800eade:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68dd      	ldr	r5, [r3, #12]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff ff4e 	bl	800e98a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f7fc f889 	bl	800ac0c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800eafa:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800eafc:	bf00      	nop
  }
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bdb0      	pop	{r4, r5, r7, pc}

0800eb06 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7fc f955 	bl	800adbe <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800eb14:	4603      	mov	r3, r0
  }
 800eb16:	4618      	mov	r0, r3
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <_Z41__static_initialization_and_destruction_0ii>:
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d10a      	bne.n	800eb46 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d105      	bne.n	800eb46 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800eb3a:	4805      	ldr	r0, [pc, #20]	@ (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800eb3c:	f7fb ffbe 	bl	800aabc <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800eb40:	4804      	ldr	r0, [pc, #16]	@ (800eb54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800eb42:	f7f2 f877 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	30000080 	.word	0x30000080
 800eb54:	300000c0 	.word	0x300000c0

0800eb58 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	4a05      	ldr	r2, [pc, #20]	@ (800eb78 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd fdbb 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	0802b408 	.word	0x0802b408

0800eb7c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff ffe7 	bl	800eb58 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800eb8a:	212c      	movs	r1, #44	@ 0x2c
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f019 fd66 	bl	802865e <_ZdlPvj>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4618      	mov	r0, r3
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800eb9c:	b590      	push	{r4, r7, lr}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	330c      	adds	r3, #12
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f000 f856 	bl	800ec5a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ebae:	4604      	mov	r4, r0
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7ff f9ce 	bl	800df52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 f859 	bl	800ec72 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd90      	pop	{r4, r7, pc}

0800ebc8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	330c      	adds	r3, #12
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 f840 	bl	800ec5a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	f107 0314 	add.w	r3, r7, #20
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7ff f935 	bl	800de52 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ebe8:	f107 0114 	add.w	r1, r7, #20
 800ebec:	f107 030c 	add.w	r3, r7, #12
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff fb85 	bl	800e302 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff ffad 	bl	800eb58 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ebfe:	f107 030c 	add.w	r3, r7, #12
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7ff f951 	bl	800deaa <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7ff f92d 	bl	800de6c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ec12:	3718      	adds	r7, #24
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff f995 	bl	800df52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ec28:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ec2a:	f7fb ff3d 	bl	800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800ec2e:	4602      	mov	r2, r0
	    ||
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d005      	beq.n	800ec42 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800ec36:	6838      	ldr	r0, [r7, #0]
 800ec38:	f019 fd4e 	bl	80286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800ec3c:	4603      	mov	r3, r0
	    ||
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d001      	beq.n	800ec46 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800ec42:	2301      	movs	r3, #1
 800ec44:	e000      	b.n	800ec48 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800ec46:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	e000      	b.n	800ec52 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800ec50:	2300      	movs	r3, #0
      }
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b082      	sub	sp, #8
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 f811 	bl	800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800ec7c:	6838      	ldr	r0, [r7, #0]
 800ec7e:	f000 f80f 	bl	800eca0 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800ec82:	bf00      	nop
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4618      	mov	r0, r3
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	4798      	blx	r3
    }
 800ecb2:	bf00      	nop
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	f7ff ff2c 	bl	800eb20 <_Z41__static_initialization_and_destruction_0ii>
 800ecc8:	bd80      	pop	{r7, pc}
	...

0800eccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecfc <HAL_MspInit+0x30>)
 800ecd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ecd8:	4a08      	ldr	r2, [pc, #32]	@ (800ecfc <HAL_MspInit+0x30>)
 800ecda:	f043 0302 	orr.w	r3, r3, #2
 800ecde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ece2:	4b06      	ldr	r3, [pc, #24]	@ (800ecfc <HAL_MspInit+0x30>)
 800ece4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ece8:	f003 0302 	and.w	r3, r3, #2
 800ecec:	607b      	str	r3, [r7, #4]
 800ecee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	58024400 	.word	0x58024400

0800ed00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b0bc      	sub	sp, #240	@ 0xf0
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	605a      	str	r2, [r3, #4]
 800ed12:	609a      	str	r2, [r3, #8]
 800ed14:	60da      	str	r2, [r3, #12]
 800ed16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ed18:	f107 0318 	add.w	r3, r7, #24
 800ed1c:	22c0      	movs	r2, #192	@ 0xc0
 800ed1e:	2100      	movs	r1, #0
 800ed20:	4618      	mov	r0, r3
 800ed22:	f01a fcd1 	bl	80296c8 <memset>
  if(hsd->Instance==SDMMC1)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a3c      	ldr	r2, [pc, #240]	@ (800ee1c <HAL_SD_MspInit+0x11c>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d171      	bne.n	800ee14 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800ed30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ed34:	f04f 0300 	mov.w	r3, #0
 800ed38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ed40:	f107 0318 	add.w	r3, r7, #24
 800ed44:	4618      	mov	r0, r3
 800ed46:	f010 fe8d 	bl	801fa64 <HAL_RCCEx_PeriphCLKConfig>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800ed50:	f7fb fe52 	bl	800a9f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ed54:	4b32      	ldr	r3, [pc, #200]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ed5a:	4a31      	ldr	r2, [pc, #196]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed60:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ed64:	4b2e      	ldr	r3, [pc, #184]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ed6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed6e:	617b      	str	r3, [r7, #20]
 800ed70:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed72:	4b2b      	ldr	r3, [pc, #172]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed78:	4a29      	ldr	r2, [pc, #164]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed7a:	f043 0304 	orr.w	r3, r3, #4
 800ed7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ed82:	4b27      	ldr	r3, [pc, #156]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed88:	f003 0304 	and.w	r3, r3, #4
 800ed8c:	613b      	str	r3, [r7, #16]
 800ed8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ed90:	4b23      	ldr	r3, [pc, #140]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed96:	4a22      	ldr	r2, [pc, #136]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800ed98:	f043 0308 	orr.w	r3, r3, #8
 800ed9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800eda0:	4b1f      	ldr	r3, [pc, #124]	@ (800ee20 <HAL_SD_MspInit+0x120>)
 800eda2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eda6:	f003 0308 	and.w	r3, r3, #8
 800edaa:	60fb      	str	r3, [r7, #12]
 800edac:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800edae:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800edb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edb6:	2302      	movs	r3, #2
 800edb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edc2:	2303      	movs	r3, #3
 800edc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800edc8:	230c      	movs	r3, #12
 800edca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800edd2:	4619      	mov	r1, r3
 800edd4:	4813      	ldr	r0, [pc, #76]	@ (800ee24 <HAL_SD_MspInit+0x124>)
 800edd6:	f00f fc43 	bl	801e660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800edda:	2304      	movs	r3, #4
 800eddc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ede0:	2302      	movs	r3, #2
 800ede2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edec:	2303      	movs	r3, #3
 800edee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800edf2:	230c      	movs	r3, #12
 800edf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800edf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800edfc:	4619      	mov	r1, r3
 800edfe:	480a      	ldr	r0, [pc, #40]	@ (800ee28 <HAL_SD_MspInit+0x128>)
 800ee00:	f00f fc2e 	bl	801e660 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800ee04:	2200      	movs	r2, #0
 800ee06:	2100      	movs	r1, #0
 800ee08:	2031      	movs	r0, #49	@ 0x31
 800ee0a:	f00d f838 	bl	801be7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800ee0e:	2031      	movs	r0, #49	@ 0x31
 800ee10:	f00d f84f 	bl	801beb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800ee14:	bf00      	nop
 800ee16:	37f0      	adds	r7, #240	@ 0xf0
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	52007000 	.word	0x52007000
 800ee20:	58024400 	.word	0x58024400
 800ee24:	58020800 	.word	0x58020800
 800ee28:	58020c00 	.word	0x58020c00

0800ee2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b0ba      	sub	sp, #232	@ 0xe8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	605a      	str	r2, [r3, #4]
 800ee3e:	609a      	str	r2, [r3, #8]
 800ee40:	60da      	str	r2, [r3, #12]
 800ee42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ee44:	f107 0310 	add.w	r3, r7, #16
 800ee48:	22c0      	movs	r2, #192	@ 0xc0
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f01a fc3b 	bl	80296c8 <memset>
  if(huart->Instance==USART1)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a27      	ldr	r2, [pc, #156]	@ (800eef4 <HAL_UART_MspInit+0xc8>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d146      	bne.n	800eeea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ee5c:	f04f 0201 	mov.w	r2, #1
 800ee60:	f04f 0300 	mov.w	r3, #0
 800ee64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee6e:	f107 0310 	add.w	r3, r7, #16
 800ee72:	4618      	mov	r0, r3
 800ee74:	f010 fdf6 	bl	801fa64 <HAL_RCCEx_PeriphCLKConfig>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800ee7e:	f7fb fdbb 	bl	800a9f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ee82:	4b1d      	ldr	r3, [pc, #116]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800ee84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee88:	4a1b      	ldr	r2, [pc, #108]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800ee8a:	f043 0310 	orr.w	r3, r3, #16
 800ee8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ee92:	4b19      	ldr	r3, [pc, #100]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800ee94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee98:	f003 0310 	and.w	r3, r3, #16
 800ee9c:	60fb      	str	r3, [r7, #12]
 800ee9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eea0:	4b15      	ldr	r3, [pc, #84]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800eea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eea6:	4a14      	ldr	r2, [pc, #80]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800eea8:	f043 0301 	orr.w	r3, r3, #1
 800eeac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800eeb0:	4b11      	ldr	r3, [pc, #68]	@ (800eef8 <HAL_UART_MspInit+0xcc>)
 800eeb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eeb6:	f003 0301 	and.w	r3, r3, #1
 800eeba:	60bb      	str	r3, [r7, #8]
 800eebc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800eebe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800eec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eec6:	2302      	movs	r3, #2
 800eec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eecc:	2300      	movs	r3, #0
 800eece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eed2:	2300      	movs	r3, #0
 800eed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800eed8:	2307      	movs	r3, #7
 800eeda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eede:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800eee2:	4619      	mov	r1, r3
 800eee4:	4805      	ldr	r0, [pc, #20]	@ (800eefc <HAL_UART_MspInit+0xd0>)
 800eee6:	f00f fbbb 	bl	801e660 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800eeea:	bf00      	nop
 800eeec:	37e8      	adds	r7, #232	@ 0xe8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	40011000 	.word	0x40011000
 800eef8:	58024400 	.word	0x58024400
 800eefc:	58020000 	.word	0x58020000

0800ef00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ef00:	b480      	push	{r7}
 800ef02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ef04:	bf00      	nop
 800ef06:	e7fd      	b.n	800ef04 <NMI_Handler+0x4>

0800ef08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ef0c:	bf00      	nop
 800ef0e:	e7fd      	b.n	800ef0c <HardFault_Handler+0x4>

0800ef10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ef10:	b480      	push	{r7}
 800ef12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ef14:	bf00      	nop
 800ef16:	e7fd      	b.n	800ef14 <MemManage_Handler+0x4>

0800ef18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <BusFault_Handler+0x4>

0800ef20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ef24:	bf00      	nop
 800ef26:	e7fd      	b.n	800ef24 <UsageFault_Handler+0x4>

0800ef28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ef2c:	bf00      	nop
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ef36:	b480      	push	{r7}
 800ef38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ef3a:	bf00      	nop
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ef44:	b480      	push	{r7}
 800ef46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ef48:	bf00      	nop
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ef56:	f00c fe51 	bl	801bbfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ef5a:	bf00      	nop
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800ef64:	4802      	ldr	r0, [pc, #8]	@ (800ef70 <SDMMC1_IRQHandler+0x10>)
 800ef66:	f013 fceb 	bl	8022940 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800ef6a:	bf00      	nop
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	240002fc 	.word	0x240002fc

0800ef74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ef74:	b480      	push	{r7}
 800ef76:	af00      	add	r7, sp, #0
	return 1;
 800ef78:	2301      	movs	r3, #1
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <_kill>:

int _kill(int pid, int sig)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ef8e:	f01a fc3d 	bl	802980c <__errno>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2216      	movs	r2, #22
 800ef96:	601a      	str	r2, [r3, #0]
	return -1;
 800ef98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <_exit>:

void _exit (int status)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800efac:	f04f 31ff 	mov.w	r1, #4294967295
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7ff ffe7 	bl	800ef84 <_kill>
	while (1) {}		/* Make sure we hang here */
 800efb6:	bf00      	nop
 800efb8:	e7fd      	b.n	800efb6 <_exit+0x12>

0800efba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b086      	sub	sp, #24
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efc6:	2300      	movs	r3, #0
 800efc8:	617b      	str	r3, [r7, #20]
 800efca:	e00a      	b.n	800efe2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800efcc:	f3af 8000 	nop.w
 800efd0:	4601      	mov	r1, r0
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	60ba      	str	r2, [r7, #8]
 800efd8:	b2ca      	uxtb	r2, r1
 800efda:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	3301      	adds	r3, #1
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	dbf0      	blt.n	800efcc <_read+0x12>
	}

return len;
 800efea:	687b      	ldr	r3, [r7, #4]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f000:	2300      	movs	r3, #0
 800f002:	617b      	str	r3, [r7, #20]
 800f004:	e009      	b.n	800f01a <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	60ba      	str	r2, [r7, #8]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fb fa3e 	bl	800a490 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	3301      	adds	r3, #1
 800f018:	617b      	str	r3, [r7, #20]
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	dbf1      	blt.n	800f006 <_write+0x12>
	}
	return len;
 800f022:	687b      	ldr	r3, [r7, #4]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <_close>:

int _close(int file)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
	return -1;
 800f034:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f038:	4618      	mov	r0, r3
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f054:	605a      	str	r2, [r3, #4]
	return 0;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <_isatty>:

int _isatty(int file)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	return 1;
 800f06c:	2301      	movs	r3, #1
}
 800f06e:	4618      	mov	r0, r3
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b085      	sub	sp, #20
 800f07e:	af00      	add	r7, sp, #0
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	607a      	str	r2, [r7, #4]
	return 0;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b086      	sub	sp, #24
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f09c:	4a14      	ldr	r2, [pc, #80]	@ (800f0f0 <_sbrk+0x5c>)
 800f09e:	4b15      	ldr	r3, [pc, #84]	@ (800f0f4 <_sbrk+0x60>)
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f0a8:	4b13      	ldr	r3, [pc, #76]	@ (800f0f8 <_sbrk+0x64>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d102      	bne.n	800f0b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f0b0:	4b11      	ldr	r3, [pc, #68]	@ (800f0f8 <_sbrk+0x64>)
 800f0b2:	4a12      	ldr	r2, [pc, #72]	@ (800f0fc <_sbrk+0x68>)
 800f0b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f0b6:	4b10      	ldr	r3, [pc, #64]	@ (800f0f8 <_sbrk+0x64>)
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4413      	add	r3, r2
 800f0be:	693a      	ldr	r2, [r7, #16]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d207      	bcs.n	800f0d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f0c4:	f01a fba2 	bl	802980c <__errno>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	220c      	movs	r2, #12
 800f0cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d2:	e009      	b.n	800f0e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f0d4:	4b08      	ldr	r3, [pc, #32]	@ (800f0f8 <_sbrk+0x64>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f0da:	4b07      	ldr	r3, [pc, #28]	@ (800f0f8 <_sbrk+0x64>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	4a05      	ldr	r2, [pc, #20]	@ (800f0f8 <_sbrk+0x64>)
 800f0e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	24080000 	.word	0x24080000
 800f0f4:	00000400 	.word	0x00000400
 800f0f8:	2400040c 	.word	0x2400040c
 800f0fc:	24000c10 	.word	0x24000c10

0800f100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800f100:	b480      	push	{r7}
 800f102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f104:	4b37      	ldr	r3, [pc, #220]	@ (800f1e4 <SystemInit+0xe4>)
 800f106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f10a:	4a36      	ldr	r2, [pc, #216]	@ (800f1e4 <SystemInit+0xe4>)
 800f10c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f114:	4b34      	ldr	r3, [pc, #208]	@ (800f1e8 <SystemInit+0xe8>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f003 030f 	and.w	r3, r3, #15
 800f11c:	2b06      	cmp	r3, #6
 800f11e:	d807      	bhi.n	800f130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f120:	4b31      	ldr	r3, [pc, #196]	@ (800f1e8 <SystemInit+0xe8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f023 030f 	bic.w	r3, r3, #15
 800f128:	4a2f      	ldr	r2, [pc, #188]	@ (800f1e8 <SystemInit+0xe8>)
 800f12a:	f043 0307 	orr.w	r3, r3, #7
 800f12e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800f130:	4b2e      	ldr	r3, [pc, #184]	@ (800f1ec <SystemInit+0xec>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a2d      	ldr	r2, [pc, #180]	@ (800f1ec <SystemInit+0xec>)
 800f136:	f043 0301 	orr.w	r3, r3, #1
 800f13a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f13c:	4b2b      	ldr	r3, [pc, #172]	@ (800f1ec <SystemInit+0xec>)
 800f13e:	2200      	movs	r2, #0
 800f140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800f142:	4b2a      	ldr	r3, [pc, #168]	@ (800f1ec <SystemInit+0xec>)
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	4929      	ldr	r1, [pc, #164]	@ (800f1ec <SystemInit+0xec>)
 800f148:	4b29      	ldr	r3, [pc, #164]	@ (800f1f0 <SystemInit+0xf0>)
 800f14a:	4013      	ands	r3, r2
 800f14c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f14e:	4b26      	ldr	r3, [pc, #152]	@ (800f1e8 <SystemInit+0xe8>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 0308 	and.w	r3, r3, #8
 800f156:	2b00      	cmp	r3, #0
 800f158:	d007      	beq.n	800f16a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f15a:	4b23      	ldr	r3, [pc, #140]	@ (800f1e8 <SystemInit+0xe8>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f023 030f 	bic.w	r3, r3, #15
 800f162:	4a21      	ldr	r2, [pc, #132]	@ (800f1e8 <SystemInit+0xe8>)
 800f164:	f043 0307 	orr.w	r3, r3, #7
 800f168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800f16a:	4b20      	ldr	r3, [pc, #128]	@ (800f1ec <SystemInit+0xec>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800f170:	4b1e      	ldr	r3, [pc, #120]	@ (800f1ec <SystemInit+0xec>)
 800f172:	2200      	movs	r2, #0
 800f174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800f176:	4b1d      	ldr	r3, [pc, #116]	@ (800f1ec <SystemInit+0xec>)
 800f178:	2200      	movs	r2, #0
 800f17a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800f17c:	4b1b      	ldr	r3, [pc, #108]	@ (800f1ec <SystemInit+0xec>)
 800f17e:	4a1d      	ldr	r2, [pc, #116]	@ (800f1f4 <SystemInit+0xf4>)
 800f180:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800f182:	4b1a      	ldr	r3, [pc, #104]	@ (800f1ec <SystemInit+0xec>)
 800f184:	4a1c      	ldr	r2, [pc, #112]	@ (800f1f8 <SystemInit+0xf8>)
 800f186:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800f188:	4b18      	ldr	r3, [pc, #96]	@ (800f1ec <SystemInit+0xec>)
 800f18a:	4a1c      	ldr	r2, [pc, #112]	@ (800f1fc <SystemInit+0xfc>)
 800f18c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f18e:	4b17      	ldr	r3, [pc, #92]	@ (800f1ec <SystemInit+0xec>)
 800f190:	2200      	movs	r2, #0
 800f192:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800f194:	4b15      	ldr	r3, [pc, #84]	@ (800f1ec <SystemInit+0xec>)
 800f196:	4a19      	ldr	r2, [pc, #100]	@ (800f1fc <SystemInit+0xfc>)
 800f198:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f19a:	4b14      	ldr	r3, [pc, #80]	@ (800f1ec <SystemInit+0xec>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800f1a0:	4b12      	ldr	r3, [pc, #72]	@ (800f1ec <SystemInit+0xec>)
 800f1a2:	4a16      	ldr	r2, [pc, #88]	@ (800f1fc <SystemInit+0xfc>)
 800f1a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f1a6:	4b11      	ldr	r3, [pc, #68]	@ (800f1ec <SystemInit+0xec>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f1ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f1ec <SystemInit+0xec>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a0e      	ldr	r2, [pc, #56]	@ (800f1ec <SystemInit+0xec>)
 800f1b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f1b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f1ec <SystemInit+0xec>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800f1be:	4b10      	ldr	r3, [pc, #64]	@ (800f200 <SystemInit+0x100>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	4b10      	ldr	r3, [pc, #64]	@ (800f204 <SystemInit+0x104>)
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1ca:	d202      	bcs.n	800f1d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f1cc:	4b0e      	ldr	r3, [pc, #56]	@ (800f208 <SystemInit+0x108>)
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800f1d2:	4b0e      	ldr	r3, [pc, #56]	@ (800f20c <SystemInit+0x10c>)
 800f1d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800f1d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f1da:	bf00      	nop
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	e000ed00 	.word	0xe000ed00
 800f1e8:	52002000 	.word	0x52002000
 800f1ec:	58024400 	.word	0x58024400
 800f1f0:	eaf6ed7f 	.word	0xeaf6ed7f
 800f1f4:	02020200 	.word	0x02020200
 800f1f8:	01ff0000 	.word	0x01ff0000
 800f1fc:	01010280 	.word	0x01010280
 800f200:	5c001000 	.word	0x5c001000
 800f204:	ffff0000 	.word	0xffff0000
 800f208:	51008108 	.word	0x51008108
 800f20c:	52004000 	.word	0x52004000

0800f210 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b09a      	sub	sp, #104	@ 0x68
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800f21c:	f107 031c 	add.w	r3, r7, #28
 800f220:	4a23      	ldr	r2, [pc, #140]	@ (800f2b0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	4618      	mov	r0, r3
 800f226:	f000 f8b7 	bl	800f398 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f22a:	f107 031c 	add.w	r3, r7, #28
 800f22e:	4618      	mov	r0, r3
 800f230:	f7f8 fc32 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f234:	4603      	mov	r3, r0
 800f236:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800f238:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f23c:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800f23e:	68b9      	ldr	r1, [r7, #8]
 800f240:	4618      	mov	r0, r3
 800f242:	f7f8 fc35 	bl	8007ab0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f246:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 f8c9 	bl	800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f250:	4603      	mov	r3, r0
 800f252:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800f254:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f258:	4a17      	ldr	r2, [pc, #92]	@ (800f2b8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800f25a:	68b9      	ldr	r1, [r7, #8]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f000 f8cc 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f262:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f266:	4618      	mov	r0, r3
 800f268:	f7f8 fc47 	bl	8007afa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800f26c:	4603      	mov	r3, r0
 800f26e:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	4619      	mov	r1, r3
 800f276:	4811      	ldr	r0, [pc, #68]	@ (800f2bc <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800f278:	f01a f8ac 	bl	80293d4 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800f27c:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f280:	f107 0314 	add.w	r3, r7, #20
 800f284:	f107 0210 	add.w	r2, r7, #16
 800f288:	f107 0118 	add.w	r1, r7, #24
 800f28c:	f000 f8da 	bl	800f444 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f290:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f294:	4619      	mov	r1, r3
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f000 f937 	bl	800f50a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f29c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 f910 	bl	800f4c6 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800f2a6:	bf00      	nop
}
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	3768      	adds	r7, #104	@ 0x68
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	0802a810 	.word	0x0802a810
 800f2b4:	0802a814 	.word	0x0802a814
 800f2b8:	0802a820 	.word	0x0802a820
 800f2bc:	0802a82c 	.word	0x0802a82c

0800f2c0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f002 fde7 	bl	8011ea4 <_ZN6ModuleC1Ev>
 800f2d6:	4a15      	ldr	r2, [pc, #84]	@ (800f32c <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	601a      	str	r2, [r3, #0]
	bState(false),
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	617b      	str	r3, [r7, #20]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	3320      	adds	r3, #32
 800f2fc:	f107 0214 	add.w	r2, r7, #20
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	4618      	mov	r0, r3
 800f304:	f000 f914 	bl	800f530 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3320      	adds	r3, #32
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 f952 	bl	800f5b6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f312:	4602      	mov	r2, r0
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	7d5b      	ldrb	r3, [r3, #21]
 800f318:	4619      	mov	r1, r3
 800f31a:	4610      	mov	r0, r2
 800f31c:	f7f5 fd9e 	bl	8004e5c <_ZN3Pin3setEb>
}
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4618      	mov	r0, r3
 800f324:	3718      	adds	r7, #24
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	0802b46c 	.word	0x0802b46c

0800f330 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	69db      	ldr	r3, [r3, #28]
 800f33c:	1c5a      	adds	r2, r3, #1
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	69da      	ldr	r2, [r3, #28]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	699b      	ldr	r3, [r3, #24]
 800f34a:	085b      	lsrs	r3, r3, #1
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d315      	bcc.n	800f37c <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	7d5b      	ldrb	r3, [r3, #21]
 800f354:	f083 0301 	eor.w	r3, r3, #1
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3320      	adds	r3, #32
 800f362:	4618      	mov	r0, r3
 800f364:	f000 f927 	bl	800f5b6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f368:	4602      	mov	r2, r0
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	7d5b      	ldrb	r3, [r3, #21]
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7f5 fd73 	bl	8004e5c <_ZN3Pin3setEb>
        blinkCount = 0;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	61da      	str	r2, [r3, #28]
	}
}
 800f37c:	bf00      	nop
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	return;
 800f38c:	bf00      	nop
}
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f398:	b580      	push	{r7, lr}
 800f39a:	b08c      	sub	sp, #48	@ 0x30
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	f107 0314 	add.w	r3, r7, #20
 800f3aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3b2:	f107 031c 	add.w	r3, r7, #28
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f000 f913 	bl	800f5e4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f3be:	466a      	mov	r2, sp
 800f3c0:	f107 0320 	add.w	r3, r7, #32
 800f3c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3c8:	e882 0003 	stmia.w	r2, {r0, r1}
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	f107 0214 	add.w	r2, r7, #20
 800f3d2:	ca06      	ldmia	r2, {r1, r2}
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f7f8 fcce 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	3728      	adds	r7, #40	@ 0x28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
    return as<T>();
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 f90d 	bl	800f60a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800f3f0:	4603      	mov	r3, r0
  }
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3708      	adds	r7, #8
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b08c      	sub	sp, #48	@ 0x30
 800f3fe:	af02      	add	r7, sp, #8
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	f107 0314 	add.w	r3, r7, #20
 800f40c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f410:	e883 0003 	stmia.w	r3, {r0, r1}
 800f414:	f107 031c 	add.w	r3, r7, #28
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd fe58 	bl	800d0d0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f420:	466a      	mov	r2, sp
 800f422:	f107 0320 	add.w	r3, r7, #32
 800f426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f42a:	e882 0003 	stmia.w	r2, {r0, r1}
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	f107 0214 	add.w	r2, r7, #20
 800f434:	ca06      	ldmia	r2, {r1, r2}
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7f8 fc9d 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	3728      	adds	r7, #40	@ 0x28
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f444:	b5b0      	push	{r4, r5, r7, lr}
 800f446:	b08c      	sub	sp, #48	@ 0x30
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f452:	2024      	movs	r0, #36	@ 0x24
 800f454:	f019 f914 	bl	8028680 <_Znwj>
 800f458:	4603      	mov	r3, r0
 800f45a:	461d      	mov	r5, r3
 800f45c:	68b8      	ldr	r0, [r7, #8]
 800f45e:	f000 f8f6 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f462:	4603      	mov	r3, r0
 800f464:	681c      	ldr	r4, [r3, #0]
 800f466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f46a:	4618      	mov	r0, r3
 800f46c:	f019 f919 	bl	80286a2 <_ZNSaIcEC1Ev>
 800f470:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f474:	f107 0314 	add.w	r3, r7, #20
 800f478:	4621      	mov	r1, r4
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7f8 fa86 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7fd fcb3 	bl	800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800f486:	4603      	mov	r3, r0
 800f488:	681c      	ldr	r4, [r3, #0]
 800f48a:	6838      	ldr	r0, [r7, #0]
 800f48c:	f000 f8ea 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f490:	4603      	mov	r3, r0
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f107 0114 	add.w	r1, r7, #20
 800f498:	4622      	mov	r2, r4
 800f49a:	4628      	mov	r0, r5
 800f49c:	f7ff ff10 	bl	800f2c0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f000 f8f9 	bl	800f69a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f4a8:	f107 0314 	add.w	r3, r7, #20
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f019 f9e2 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f4b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f019 f8f4 	bl	80286a4 <_ZNSaIcED1Ev>
 800f4bc:	bf00      	nop
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	3730      	adds	r7, #48	@ 0x30
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bdb0      	pop	{r4, r5, r7, pc}

0800f4c6 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f4c6:	b590      	push	{r4, r7, lr}
 800f4c8:	b085      	sub	sp, #20
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 f8f1 	bl	800f6b8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f4d6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00c      	beq.n	800f4fa <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 f8f6 	bl	800f6d2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 f8ff 	bl	800f6ec <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 f92d 	bl	800f754 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
      }
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4618      	mov	r0, r3
 800f504:	3714      	adds	r7, #20
 800f506:	46bd      	mov	sp, r7
 800f508:	bd90      	pop	{r4, r7, pc}

0800f50a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f50a:	b590      	push	{r4, r7, lr}
 800f50c:	b083      	sub	sp, #12
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
 800f512:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f514:	687c      	ldr	r4, [r7, #4]
 800f516:	6838      	ldr	r0, [r7, #0]
 800f518:	f000 f92d 	bl	800f776 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f51c:	4603      	mov	r3, r0
 800f51e:	4619      	mov	r1, r3
 800f520:	4620      	mov	r0, r4
 800f522:	f000 f933 	bl	800f78c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd90      	pop	{r4, r7, pc}

0800f530 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f530:	b5b0      	push	{r4, r5, r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f53c:	2040      	movs	r0, #64	@ 0x40
 800f53e:	f019 f89f 	bl	8028680 <_Znwj>
 800f542:	4603      	mov	r3, r0
 800f544:	461c      	mov	r4, r3
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f000 f958 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f54c:	4605      	mov	r5, r0
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 f83d 	bl	800f5ce <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f554:	4603      	mov	r3, r0
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	4629      	mov	r1, r5
 800f55c:	4620      	mov	r0, r4
 800f55e:	f7f5 fad3 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f562:	4621      	mov	r1, r4
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 f964 	bl	800f832 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bdb0      	pop	{r4, r5, r7, pc}

0800f572 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f572:	b590      	push	{r4, r7, lr}
 800f574:	b085      	sub	sp, #20
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f000 f967 	bl	800f850 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f582:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00c      	beq.n	800f5a6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f96c 	bl	800f86a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800f592:	4604      	mov	r4, r0
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f000 f975 	bl	800f884 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800f59a:	4603      	mov	r3, r0
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4619      	mov	r1, r3
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f000 f97a 	bl	800f89a <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
      }
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3714      	adds	r7, #20
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd90      	pop	{r4, r7, pc}

0800f5b6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b082      	sub	sp, #8
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
	return get();
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f97e 	bl	800f8c0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800f5c4:	4603      	mov	r3, r0
      }
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f5ce:	b480      	push	{r7}
 800f5d0:	b083      	sub	sp, #12
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f5ee:	6838      	ldr	r0, [r7, #0]
 800f5f0:	f000 f973 	bl	800f8da <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 f978 	bl	800f8f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800f600:	bf00      	nop
}
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800f60a:	b590      	push	{r4, r7, lr}
 800f60c:	b087      	sub	sp, #28
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800f61a:	6938      	ldr	r0, [r7, #16]
 800f61c:	f7f9 fabd 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800f620:	4604      	mov	r4, r0
 800f622:	6938      	ldr	r0, [r7, #16]
 800f624:	f7f9 f947 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800f628:	4602      	mov	r2, r0
 800f62a:	f107 0308 	add.w	r3, r7, #8
 800f62e:	4621      	mov	r1, r4
 800f630:	4618      	mov	r0, r3
 800f632:	f7f6 f9e2 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800f636:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800f638:	f107 0308 	add.w	r3, r7, #8
 800f63c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f640:	f000 f965 	bl	800f90e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd90      	pop	{r4, r7, pc}

0800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f64e:	b480      	push	{r7}
 800f650:	b083      	sub	sp, #12
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b082      	sub	sp, #8
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
 800f682:	6039      	str	r1, [r7, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 f95d 	bl	800f94a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b082      	sub	sp, #8
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7ff ffe6 	bl	800f67a <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f000 f955 	bl	800f972 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f000 f955 	bl	800f98c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	370c      	adds	r7, #12
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
	...

0800f704 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	4a08      	ldr	r2, [pc, #32]	@ (800f730 <_ZN5BlinkD1Ev+0x2c>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	3320      	adds	r3, #32
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff ff2b 	bl	800f572 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f002 fbdc 	bl	8011edc <_ZN6ModuleD1Ev>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4618      	mov	r0, r3
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	0802b46c 	.word	0x0802b46c

0800f734 <_ZN5BlinkD0Ev>:
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff ffe1 	bl	800f704 <_ZN5BlinkD1Ev>
 800f742:	2124      	movs	r1, #36	@ 0x24
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f018 ff8a 	bl	802865e <_ZdlPvj>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d004      	beq.n	800f76e <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	3204      	adds	r2, #4
 800f768:	6812      	ldr	r2, [r2, #0]
 800f76a:	4618      	mov	r0, r3
 800f76c:	4790      	blx	r2
      }
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f776:	b480      	push	{r7}
 800f778:	b083      	sub	sp, #12
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f796:	6838      	ldr	r0, [r7, #0]
 800f798:	f000 f905 	bl	800f9a6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f79c:	4602      	mov	r2, r0
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	601a      	str	r2, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fd fd66 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f7ac:	6838      	ldr	r0, [r7, #0]
 800f7ae:	f000 f8fa 	bl	800f9a6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 f903 	bl	800f9c0 <_ZSt12__to_addressI5BlinkEPT_S2_>
 800f7ba:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f7bc:	6838      	ldr	r0, [r7, #0]
 800f7be:	f7ff ffda 	bl	800f776 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	f107 0308 	add.w	r3, r7, #8
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 f903 	bl	800f9d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3304      	adds	r3, #4
 800f7d4:	f107 0208 	add.w	r2, r7, #8
 800f7d8:	4611      	mov	r1, r2
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 f93d 	bl	800fa5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f7e0:	f107 0308 	add.w	r3, r7, #8
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fc fb4a 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 f958 	bl	800faa2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f812:	b580      	push	{r7, lr}
 800f814:	b082      	sub	sp, #8
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	6039      	str	r1, [r7, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	683a      	ldr	r2, [r7, #0]
 800f820:	4611      	mov	r1, r2
 800f822:	4618      	mov	r0, r3
 800f824:	f000 f948 	bl	800fab8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f832:	b580      	push	{r7, lr}
 800f834:	b082      	sub	sp, #8
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6839      	ldr	r1, [r7, #0]
 800f840:	4618      	mov	r0, r3
 800f842:	f7ff ffe6 	bl	800f812 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 f940 	bl	800fae0 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f860:	4603      	mov	r3, r0
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f000 f940 	bl	800fafa <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800f87a:	4603      	mov	r3, r0
 800f87c:	4618      	mov	r0, r3
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4618      	mov	r0, r3
 800f890:	370c      	adds	r7, #12
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f89a:	b590      	push	{r4, r7, lr}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f8a4:	683c      	ldr	r4, [r7, #0]
 800f8a6:	2c00      	cmp	r4, #0
 800f8a8:	d006      	beq.n	800f8b8 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f7f2 fcb8 	bl	8002220 <_ZN3PinD1Ev>
 800f8b0:	2140      	movs	r1, #64	@ 0x40
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f018 fed3 	bl	802865e <_ZdlPvj>
      }
 800f8b8:	bf00      	nop
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd90      	pop	{r4, r7, pc}

0800f8c0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f000 f922 	bl	800fb14 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f8da:	b480      	push	{r7}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f8e2:	687b      	ldr	r3, [r7, #4]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7f5 fcb3 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800f90e:	b580      	push	{r7, lr}
 800f910:	b084      	sub	sp, #16
 800f912:	af00      	add	r7, sp, #0
 800f914:	463b      	mov	r3, r7
 800f916:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800f91a:	463b      	mov	r3, r7
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f7 fdeb 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800f922:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800f924:	463b      	mov	r3, r7
 800f926:	4618      	mov	r0, r3
 800f928:	f7f7 fdf2 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800f92c:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d005      	beq.n	800f940 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800f934:	68b9      	ldr	r1, [r7, #8]
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f000 f8fa 	bl	800fb30 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800f93c:	4603      	mov	r3, r0
 800f93e:	e000      	b.n	800f942 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800f940:	2300      	movs	r3, #0
  }
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f94a:	b590      	push	{r4, r7, lr}
 800f94c:	b083      	sub	sp, #12
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	6039      	str	r1, [r7, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	f000 f97c 	bl	800fc54 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f95c:	683c      	ldr	r4, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f7ff feaa 	bl	800f6b8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f964:	4603      	mov	r3, r0
 800f966:	601c      	str	r4, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4618      	mov	r0, r3
 800f96c:	370c      	adds	r7, #12
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd90      	pop	{r4, r7, pc}

0800f972 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f972:	b580      	push	{r7, lr}
 800f974:	b082      	sub	sp, #8
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f000 f976 	bl	800fc6e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f982:	4603      	mov	r3, r0
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4618      	mov	r0, r3
 800f998:	f000 f975 	bl	800fc86 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f99c:	4603      	mov	r3, r0
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 f974 	bl	800fc9e <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f9c8:	687b      	ldr	r3, [r7, #4]
    }
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	370c      	adds	r7, #12
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b086      	sub	sp, #24
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800f9e6:	6838      	ldr	r0, [r7, #0]
 800f9e8:	f7ff ffdd 	bl	800f9a6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bf0c      	ite	eq
 800f9f2:	2301      	moveq	r3, #1
 800f9f4:	2300      	movne	r3, #0
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d128      	bne.n	800fa4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800f9fc:	f107 030c 	add.w	r3, r7, #12
 800fa00:	4618      	mov	r0, r3
 800fa02:	f000 f95a 	bl	800fcba <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800fa06:	f107 030c 	add.w	r3, r7, #12
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 f96c 	bl	800fcea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800fa12:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fa14:	6838      	ldr	r0, [r7, #0]
 800fa16:	f000 f977 	bl	800fd08 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800fa1e:	6838      	ldr	r0, [r7, #0]
 800fa20:	f7ff fe57 	bl	800f6d2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800fa24:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 f97b 	bl	800fd22 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f107 0210 	add.w	r2, r7, #16
 800fa32:	f107 000c 	add.w	r0, r7, #12
 800fa36:	6979      	ldr	r1, [r7, #20]
 800fa38:	f000 f97e 	bl	800fd38 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	601a      	str	r2, [r3, #0]
	}
 800fa42:	f107 030c 	add.w	r3, r7, #12
 800fa46:	4618      	mov	r0, r3
 800fa48:	f000 f943 	bl	800fcd2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fa4c:	e000      	b.n	800fa50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800fa4e:	bf00      	nop
	}
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b084      	sub	sp, #16
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d011      	beq.n	800fa98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800fa7a:	68f8      	ldr	r0, [r7, #12]
 800fa7c:	f7fa ffd4 	bl	800aa28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d004      	beq.n	800fa92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fa ffda 	bl	800aa46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	601a      	str	r2, [r3, #0]
	return *this;
 800fa98:	687b      	ldr	r3, [r7, #4]
      }
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800faa2:	b480      	push	{r7}
 800faa4:	b083      	sub	sp, #12
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	6039      	str	r1, [r7, #0]
	{ }
 800faac:	bf00      	nop
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f000 f94f 	bl	800fd68 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800faca:	683c      	ldr	r4, [r7, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7ff febf 	bl	800f850 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800fad2:	4603      	mov	r3, r0
 800fad4:	601c      	str	r4, [r3, #0]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd90      	pop	{r4, r7, pc}

0800fae0 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4618      	mov	r0, r3
 800faec:	f000 f949 	bl	800fd82 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800faf0:	4603      	mov	r3, r0
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 f948 	bl	800fd9a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 f947 	bl	800fdb2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fb24:	4603      	mov	r3, r0
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f6 fcf1 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800fb42:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	791b      	ldrb	r3, [r3, #4]
 800fb48:	3b04      	subs	r3, #4
 800fb4a:	2b1a      	cmp	r3, #26
 800fb4c:	d87c      	bhi.n	800fc48 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800fb4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb54 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800fb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb54:	0800fc07 	.word	0x0800fc07
 800fb58:	0800fc15 	.word	0x0800fc15
 800fb5c:	0800fbc1 	.word	0x0800fbc1
 800fb60:	0800fc49 	.word	0x0800fc49
 800fb64:	0800fc49 	.word	0x0800fc49
 800fb68:	0800fc49 	.word	0x0800fc49
 800fb6c:	0800fbc7 	.word	0x0800fbc7
 800fb70:	0800fc49 	.word	0x0800fc49
 800fb74:	0800fbd5 	.word	0x0800fbd5
 800fb78:	0800fc49 	.word	0x0800fc49
 800fb7c:	0800fc25 	.word	0x0800fc25
 800fb80:	0800fc49 	.word	0x0800fc49
 800fb84:	0800fc49 	.word	0x0800fc49
 800fb88:	0800fc49 	.word	0x0800fc49
 800fb8c:	0800fc49 	.word	0x0800fc49
 800fb90:	0800fc49 	.word	0x0800fc49
 800fb94:	0800fc49 	.word	0x0800fc49
 800fb98:	0800fc49 	.word	0x0800fc49
 800fb9c:	0800fc49 	.word	0x0800fc49
 800fba0:	0800fc49 	.word	0x0800fc49
 800fba4:	0800fc49 	.word	0x0800fc49
 800fba8:	0800fc49 	.word	0x0800fc49
 800fbac:	0800fbe3 	.word	0x0800fbe3
 800fbb0:	0800fc49 	.word	0x0800fc49
 800fbb4:	0800fbf5 	.word	0x0800fbf5
 800fbb8:	0800fc49 	.word	0x0800fc49
 800fbbc:	0800fc37 	.word	0x0800fc37
        return content_.asBoolean;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	e041      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f000 f8fe 	bl	800fdcc <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	e03a      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f000 f908 	bl	800fdee <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	e033      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4619      	mov	r1, r3
 800fbec:	f000 f910 	bl	800fe10 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	e02a      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	f000 f91a 	bl	800fe36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800fc02:	4603      	mov	r3, r0
 800fc04:	e021      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f000 f926 	bl	800fe5c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fc10:	4603      	mov	r3, r0
 800fc12:	e01a      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3308      	adds	r3, #8
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 f91e 	bl	800fe5c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fc20:	4603      	mov	r3, r0
 800fc22:	e012      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	edd3 7a00 	vldr	s15, [r3]
 800fc2a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc2e:	f000 f929 	bl	800fe84 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800fc32:	4603      	mov	r3, r0
 800fc34:	e009      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	ed93 7b00 	vldr	d7, [r3]
 800fc3c:	eeb0 0b47 	vmov.f64	d0, d7
 800fc40:	f000 f938 	bl	800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800fc44:	4603      	mov	r3, r0
 800fc46:	e000      	b.n	800fc4a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800fc48:	2300      	movs	r3, #0
  }
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop

0800fc54 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 f940 	bl	800fee4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b082      	sub	sp, #8
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f944 	bl	800ff04 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b082      	sub	sp, #8
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f945 	bl	800ff1e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fc94:	4603      	mov	r3, r0
 800fc96:	4618      	mov	r0, r3
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b082      	sub	sp, #8
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 f944 	bl	800ff36 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}

0800fcba <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b082      	sub	sp, #8
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f944 	bl	800ff50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f943 	bl	800ff66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4618      	mov	r0, r3
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b082      	sub	sp, #8
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 f93f 	bl	800ff7c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 f95c 	bl	800ffd0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd22:	b480      	push	{r7}
 800fd24:	b083      	sub	sp, #12
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fd38:	b590      	push	{r4, r7, lr}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
 800fd44:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 f957 	bl	800fffa <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	6838      	ldr	r0, [r7, #0]
 800fd50:	f7ff ffe7 	bl	800fd22 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fd54:	4603      	mov	r3, r0
 800fd56:	4622      	mov	r2, r4
 800fd58:	68b9      	ldr	r1, [r7, #8]
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	f000 f958 	bl	8010010 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800fd60:	bf00      	nop
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd90      	pop	{r4, r7, pc}

0800fd68 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f000 f96a 	bl	801004c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b082      	sub	sp, #8
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f96e 	bl	801006c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800fd90:	4603      	mov	r3, r0
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 f96f 	bl	8010086 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f000 f96e 	bl	801009e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f96e 	bl	80100b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	e000      	b.n	800fde6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f96f 	bl	80100da <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	e000      	b.n	800fe08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800fe06:	2300      	movs	r3, #0
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe1e:	f000 f967 	bl	80100f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	e000      	b.n	800fe2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3708      	adds	r7, #8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800fe36:	b580      	push	{r7, lr}
 800fe38:	b082      	sub	sp, #8
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe44:	f000 f96c 	bl	8010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d001      	beq.n	800fe52 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	e000      	b.n	800fe54 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800fe64:	f107 0308 	add.w	r3, r7, #8
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f6 fdbe 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800fe70:	f107 0308 	add.w	r3, r7, #8
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 f979 	bl	801016c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800fe7a:	4603      	mov	r3, r0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe8e:	ed97 0a01 	vldr	s0, [r7, #4]
 800fe92:	f000 f9b2 	bl	80101fa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d006      	beq.n	800feaa <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800fe9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800fea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fea4:	ee17 3a90 	vmov	r3, s15
 800fea8:	e000      	b.n	800feac <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800feaa:	2300      	movs	r3, #0
}
 800feac:	4618      	mov	r0, r3
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800febe:	ed97 0b00 	vldr	d0, [r7]
 800fec2:	f000 f9c7 	bl	8010254 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d006      	beq.n	800feda <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800fecc:	ed97 7b00 	vldr	d7, [r7]
 800fed0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fed4:	ee17 3a90 	vmov	r3, s15
 800fed8:	e000      	b.n	800fedc <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f9d7 	bl	80102a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4618      	mov	r0, r3
 800fef6:	f000 f9df 	bl	80102b8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f000 f9e0 	bl	80102d4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ff14:	4603      	mov	r3, r0
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b082      	sub	sp, #8
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 f9df 	bl	80102ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f000 f9de 	bl	8010302 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ff46:	4603      	mov	r3, r0
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ff66:	b480      	push	{r7}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 f9c6 	bl	801031a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	4293      	cmp	r3, r2
 800ff94:	bf8c      	ite	hi
 800ff96:	2301      	movhi	r3, #1
 800ff98:	2300      	movls	r3, #0
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	bf14      	ite	ne
 800ffa0:	2301      	movne	r3, #1
 800ffa2:	2300      	moveq	r3, #0
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d007      	beq.n	800ffba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffb0:	d301      	bcc.n	800ffb6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ffb2:	f018 fb7b 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ffb6:	f018 fb76 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	011b      	lsls	r3, r3, #4
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f018 fb5e 	bl	8028680 <_Znwj>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	bf00      	nop
      }
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7ff fb6d 	bl	800f6b8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff fb67 	bl	800f6b8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2200      	movs	r2, #0
 800ffee:	601a      	str	r2, [r3, #0]
	return __p;
 800fff0:	68fb      	ldr	r3, [r7, #12]
      }
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fffa:	b480      	push	{r7}
 800fffc:	b083      	sub	sp, #12
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	4619      	mov	r1, r3
 8010022:	2010      	movs	r0, #16
 8010024:	f7fa fcf4 	bl	800aa10 <_ZnwjPv>
 8010028:	4605      	mov	r5, r0
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7ff ffe5 	bl	800fffa <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 8010030:	4603      	mov	r3, r0
 8010032:	681c      	ldr	r4, [r3, #0]
 8010034:	6838      	ldr	r0, [r7, #0]
 8010036:	f7ff fe74 	bl	800fd22 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 801003a:	4632      	mov	r2, r6
 801003c:	4621      	mov	r1, r4
 801003e:	4628      	mov	r0, r5
 8010040:	f000 f978 	bl	8010334 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8010044:	bf00      	nop
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801004c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 f98f 	bl	8010378 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	f000 f997 	bl	8010390 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	f000 f998 	bl	80103ac <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 801007c:	4603      	mov	r3, r0
 801007e:	4618      	mov	r0, r3
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 f997 	bl	80103c2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 8010094:	4603      	mov	r3, r0
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f997 	bl	80103da <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 80100ac:	4603      	mov	r3, r0
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80100be:	f000 f8c1 	bl	8010244 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 80100c2:	4603      	mov	r3, r0
 80100c4:	461a      	mov	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4293      	cmp	r3, r2
 80100ca:	bf94      	ite	ls
 80100cc:	2301      	movls	r3, #1
 80100ce:	2300      	movhi	r3, #0
 80100d0:	b2db      	uxtb	r3, r3
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 80100da:	b480      	push	{r7}
 80100dc:	b083      	sub	sp, #12
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  return true;
 80100e2:	2301      	movs	r3, #1
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80100f0:	b5b0      	push	{r4, r5, r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 80100fa:	f000 f8a3 	bl	8010244 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 80100fe:	4603      	mov	r3, r0
 8010100:	17da      	asrs	r2, r3, #31
 8010102:	461c      	mov	r4, r3
 8010104:	4615      	mov	r5, r2
 8010106:	e9d7 2300 	ldrd	r2, r3, [r7]
 801010a:	4294      	cmp	r4, r2
 801010c:	eb75 0303 	sbcs.w	r3, r5, r3
 8010110:	bf2c      	ite	cs
 8010112:	2301      	movcs	r3, #1
 8010114:	2300      	movcc	r3, #0
 8010116:	b2db      	uxtb	r3, r3
}
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bdb0      	pop	{r4, r5, r7, pc}

08010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 801012c:	f000 f85c 	bl	80101e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010130:	4603      	mov	r3, r0
 8010132:	17da      	asrs	r2, r3, #31
 8010134:	4698      	mov	r8, r3
 8010136:	4691      	mov	r9, r2
 8010138:	e9d7 2300 	ldrd	r2, r3, [r7]
 801013c:	4542      	cmp	r2, r8
 801013e:	eb73 0309 	sbcs.w	r3, r3, r9
 8010142:	db0d      	blt.n	8010160 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8010144:	f000 f87e 	bl	8010244 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 8010148:	4603      	mov	r3, r0
 801014a:	17da      	asrs	r2, r3, #31
 801014c:	461c      	mov	r4, r3
 801014e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8010150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010154:	4294      	cmp	r4, r2
 8010156:	eb75 0303 	sbcs.w	r3, r5, r3
 801015a:	db01      	blt.n	8010160 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 801015c:	2301      	movs	r3, #1
 801015e:	e000      	b.n	8010162 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801016c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	3b01      	subs	r3, #1
 801017a:	2b03      	cmp	r3, #3
 801017c:	d82e      	bhi.n	80101dc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 801017e:	a201      	add	r2, pc, #4	@ (adr r2, 8010184 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 8010180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010184:	08010195 	.word	0x08010195
 8010188:	080101a7 	.word	0x080101a7
 801018c:	080101b9 	.word	0x080101b9
 8010190:	080101cb 	.word	0x080101cb
        return convertNumber<T>(value_.asFloat);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	edd3 7a02 	vldr	s15, [r3, #8]
 801019a:	eeb0 0a67 	vmov.f32	s0, s15
 801019e:	f7ff fe71 	bl	800fe84 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 80101a2:	4603      	mov	r3, r0
 80101a4:	e01b      	b.n	80101de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80101ac:	4610      	mov	r0, r2
 80101ae:	4619      	mov	r1, r3
 80101b0:	f7ff fe41 	bl	800fe36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 80101b4:	4603      	mov	r3, r0
 80101b6:	e012      	b.n	80101de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80101be:	4610      	mov	r0, r2
 80101c0:	4619      	mov	r1, r3
 80101c2:	f7ff fe25 	bl	800fe10 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 80101c6:	4603      	mov	r3, r0
 80101c8:	e009      	b.n	80101de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80101d0:	eeb0 0b47 	vmov.f64	d0, d7
 80101d4:	f7ff fe6e 	bl	800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 80101d8:	4603      	mov	r3, r0
 80101da:	e000      	b.n	80101de <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 80101dc:	2300      	movs	r3, #0
  }
 80101de:	4618      	mov	r0, r3
 80101e0:	3708      	adds	r7, #8
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop

080101e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 80101e8:	b480      	push	{r7}
 80101ea:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80101ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 80101f0:	4618      	mov	r0, r3
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b082      	sub	sp, #8
 80101fe:	af00      	add	r7, sp, #0
 8010200:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8010204:	f7ff fff0 	bl	80101e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010208:	ee07 0a90 	vmov	s15, r0
 801020c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010210:	ed97 7a01 	vldr	s14, [r7, #4]
 8010214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	db0d      	blt.n	801023a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 801021e:	2000      	movs	r0, #0
 8010220:	f000 f8e8 	bl	80103f4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 8010224:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8010228:	edd7 7a01 	vldr	s15, [r7, #4]
 801022c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010234:	d801      	bhi.n	801023a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8010236:	2301      	movs	r3, #1
 8010238:	e000      	b.n	801023c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 8010244:	b580      	push	{r7, lr}
 8010246:	af00      	add	r7, sp, #0
    return T(~lowest());
 8010248:	f7ff ffce 	bl	80101e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 801024c:	4603      	mov	r3, r0
 801024e:	43db      	mvns	r3, r3
  }
 8010250:	4618      	mov	r0, r3
 8010252:	bd80      	pop	{r7, pc}

08010254 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 801025e:	f7ff ffc3 	bl	80101e8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010262:	ee07 0a90 	vmov	s15, r0
 8010266:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801026a:	ed97 6b00 	vldr	d6, [r7]
 801026e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010276:	db0e      	blt.n	8010296 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8010278:	f7ff ffe4 	bl	8010244 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 801027c:	ee07 0a90 	vmov	s15, r0
 8010280:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8010284:	ed97 6b00 	vldr	d6, [r7]
 8010288:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801028c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010290:	d801      	bhi.n	8010296 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8010292:	2301      	movs	r3, #1
 8010294:	e000      	b.n	8010298 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3708      	adds	r7, #8
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f8b2 	bl	8010412 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4618      	mov	r0, r3
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	370c      	adds	r7, #12
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 f898 	bl	8010428 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 80102f8:	4603      	mov	r3, r0
 80102fa:	4618      	mov	r0, r3
 80102fc:	3708      	adds	r7, #8
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}

08010302 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010302:	b580      	push	{r7, lr}
 8010304:	b082      	sub	sp, #8
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f897 	bl	801043e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010310:	4603      	mov	r3, r0
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801031a:	b480      	push	{r7}
 801031c:	b083      	sub	sp, #12
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010322:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
	...

08010334 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	4618      	mov	r0, r3
 8010344:	f7fe f80c 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010348:	4a0a      	ldr	r2, [pc, #40]	@ (8010374 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	601a      	str	r2, [r3, #0]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f103 040c 	add.w	r4, r3, #12
 8010354:	1d3b      	adds	r3, r7, #4
 8010356:	4618      	mov	r0, r3
 8010358:	f000 f87e 	bl	8010458 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 801035c:	f107 0314 	add.w	r3, r7, #20
 8010360:	462a      	mov	r2, r5
 8010362:	68b9      	ldr	r1, [r7, #8]
 8010364:	4620      	mov	r0, r4
 8010366:	f000 f882 	bl	801046e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	4618      	mov	r0, r3
 801036e:	3718      	adds	r7, #24
 8010370:	46bd      	mov	sp, r7
 8010372:	bdb0      	pop	{r4, r5, r7, pc}
 8010374:	0802b450 	.word	0x0802b450

08010378 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f890 	bl	80104a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4618      	mov	r0, r3
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 f876 	bl	80104bc <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 80103d0:	4603      	mov	r3, r0
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80103da:	b580      	push	{r7, lr}
 80103dc:	b082      	sub	sp, #8
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f000 f874 	bl	80104d2 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 80103fc:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 8010400:	f7f9 faac 	bl	800995c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8010404:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010408:	eeb0 0a67 	vmov.f32	s0, s15
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 8010412:	b480      	push	{r7}
 8010414:	b083      	sub	sp, #12
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4618      	mov	r0, r3
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801043e:	b580      	push	{r7, lr}
 8010440:	b082      	sub	sp, #8
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4618      	mov	r0, r3
 801044a:	f000 f84d 	bl	80104e8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 801044e:	4603      	mov	r3, r0
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801046e:	b580      	push	{r7, lr}
 8010470:	b084      	sub	sp, #16
 8010472:	af00      	add	r7, sp, #0
 8010474:	60f8      	str	r0, [r7, #12]
 8010476:	60b9      	str	r1, [r7, #8]
 8010478:	713a      	strb	r2, [r7, #4]
 801047a:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 801047c:	1d3b      	adds	r3, r7, #4
 801047e:	4618      	mov	r0, r3
 8010480:	f7ff ffea 	bl	8010458 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 8010484:	4603      	mov	r3, r0
 8010486:	4619      	mov	r1, r3
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f838 	bl	80104fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 801048e:	6839      	ldr	r1, [r7, #0]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 f841 	bl	8010518 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	601a      	str	r2, [r3, #0]
	{ }
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 80104a6:	b480      	push	{r7}
 80104a8:	b083      	sub	sp, #12
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4618      	mov	r0, r3
 80104c8:	370c      	adds	r7, #12
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr

080104d2 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80104d2:	b480      	push	{r7}
 80104d4:	b083      	sub	sp, #12
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	4618      	mov	r0, r3
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 80104fe:	b580      	push	{r7, lr}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	6039      	str	r1, [r7, #0]
 8010508:	6838      	ldr	r0, [r7, #0]
 801050a:	f7ff ffa5 	bl	8010458 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	4a05      	ldr	r2, [pc, #20]	@ (8010550 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	601a      	str	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4618      	mov	r0, r3
 8010542:	f7fc f8cf 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	0802b450 	.word	0x0802b450

08010554 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ff ffe7 	bl	8010530 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010562:	2110      	movs	r1, #16
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f018 f87a 	bl	802865e <_ZdlPvj>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	330c      	adds	r3, #12
 8010580:	4618      	mov	r0, r3
 8010582:	f000 f83f 	bl	8010604 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8010586:	4602      	mov	r2, r0
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	4619      	mov	r1, r3
 801058e:	4610      	mov	r0, r2
 8010590:	f7ff f8e0 	bl	800f754 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 8010594:	bf00      	nop
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	330c      	adds	r3, #12
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 f837 	bl	801061c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80105ae:	4602      	mov	r2, r0
 80105b0:	f107 0314 	add.w	r3, r7, #20
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f000 f83c 	bl	8010634 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80105bc:	f107 0114 	add.w	r1, r7, #20
 80105c0:	f107 030c 	add.w	r3, r7, #12
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f000 f841 	bl	801064e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff ffaf 	bl	8010530 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80105d2:	f107 030c 	add.w	r3, r7, #12
 80105d6:	4618      	mov	r0, r3
 80105d8:	f000 f84d 	bl	8010676 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80105dc:	f107 0314 	add.w	r3, r7, #20
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff fb76 	bl	800fcd2 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
        return nullptr;
 80105f6:	2300      	movs	r3, #0
      }
 80105f8:	4618      	mov	r0, r3
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 f847 	bl	80106a0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 8010612:	4603      	mov	r3, r0
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f846 	bl	80106b6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801062a:	4603      	mov	r3, r0
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7ff fc86 	bl	800ff50 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801064e:	b580      	push	{r7, lr}
 8010650:	b084      	sub	sp, #16
 8010652:	af00      	add	r7, sp, #0
 8010654:	60f8      	str	r0, [r7, #12]
 8010656:	60b9      	str	r1, [r7, #8]
 8010658:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801065a:	68b8      	ldr	r0, [r7, #8]
 801065c:	f000 f836 	bl	80106cc <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8010660:	4602      	mov	r2, r0
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	605a      	str	r2, [r3, #4]
      { }
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d007      	beq.n	8010696 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6818      	ldr	r0, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	2201      	movs	r2, #1
 8010690:	4619      	mov	r1, r3
 8010692:	f000 f826 	bl	80106e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4618      	mov	r0, r3
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 80106b6:	b480      	push	{r7}
 80106b8:	b083      	sub	sp, #12
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4618      	mov	r0, r3
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b084      	sub	sp, #16
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	68b9      	ldr	r1, [r7, #8]
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f000 f804 	bl	8010700 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 80106f8:	bf00      	nop
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	011b      	lsls	r3, r3, #4
 8010710:	4619      	mov	r1, r3
 8010712:	68b8      	ldr	r0, [r7, #8]
 8010714:	f017 ffa3 	bl	802865e <_ZdlPvj>
      }
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 801071e:	b480      	push	{r7}
 8010720:	b083      	sub	sp, #12
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4618      	mov	r0, r3
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4618      	mov	r0, r3
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 801074a:	b580      	push	{r7, lr}
 801074c:	b082      	sub	sp, #8
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3318      	adds	r3, #24
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	4618      	mov	r0, r3
 801075c:	f000 f8e9 	bl	8010932 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 8010760:	bf00      	nop
 8010762:	3708      	adds	r7, #8
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	460b      	mov	r3, r1
 8010772:	70fb      	strb	r3, [r7, #3]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	78fa      	ldrb	r2, [r7, #3]
 8010778:	771a      	strb	r2, [r3, #28]
 801077a:	bf00      	nop
 801077c:	370c      	adds	r7, #12
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr
	...

08010788 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4618      	mov	r0, r3
 8010794:	f001 fb86 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8010798:	4a0a      	ldr	r2, [pc, #40]	@ (80107c4 <_ZN12CommsHandlerC1Ev+0x3c>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	601a      	str	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	3318      	adds	r3, #24
 80107a2:	4618      	mov	r0, r3
 80107a4:	f000 f8fa 	bl	801099c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	771a      	strb	r2, [r3, #28]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	775a      	strb	r2, [r3, #29]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	779a      	strb	r2, [r3, #30]

}
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	0802b490 	.word	0x0802b490

080107c8 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	4a08      	ldr	r2, [pc, #32]	@ (80107f4 <_ZN12CommsHandlerD1Ev+0x2c>)
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	3318      	adds	r3, #24
 80107da:	4618      	mov	r0, r3
 80107dc:	f7fb fd4a 	bl	800c274 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f001 fb7a 	bl	8011edc <_ZN6ModuleD1Ev>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4618      	mov	r0, r3
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	0802b490 	.word	0x0802b490

080107f8 <_ZN12CommsHandlerD0Ev>:
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7ff ffe1 	bl	80107c8 <_ZN12CommsHandlerD1Ev>
 8010806:	2120      	movs	r1, #32
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f017 ff28 	bl	802865e <_ZdlPvj>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4618      	mov	r0, r3
 8010812:	3708      	adds	r7, #8
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	460b      	mov	r3, r1
 8010822:	70fb      	strb	r3, [r7, #3]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 8010828:	78fa      	ldrb	r2, [r7, #3]
 801082a:	4611      	mov	r1, r2
 801082c:	4618      	mov	r0, r3
 801082e:	f7ff ff9b 	bl	8010768 <_ZN12CommsHandler7setDataEb>
    });
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 801083a:	b590      	push	{r4, r7, lr}
 801083c:	b089      	sub	sp, #36	@ 0x24
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	3318      	adds	r3, #24
 8010846:	4618      	mov	r0, r3
 8010848:	f000 f8b8 	bl	80109bc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 801084c:	4604      	mov	r4, r0
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	61fb      	str	r3, [r7, #28]
 8010852:	f107 021c 	add.w	r2, r7, #28
 8010856:	f107 030c 	add.w	r3, r7, #12
 801085a:	4611      	mov	r1, r2
 801085c:	4618      	mov	r0, r3
 801085e:	f000 f8b9 	bl	80109d4 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 8010862:	f107 030c 	add.w	r3, r7, #12
 8010866:	4619      	mov	r1, r3
 8010868:	4620      	mov	r0, r4
 801086a:	f7ff ff6e 	bl	801074a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 801086e:	f107 030c 	add.w	r3, r7, #12
 8010872:	4618      	mov	r0, r3
 8010874:	f7f0 fa6c 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	3318      	adds	r3, #24
 801087c:	4618      	mov	r0, r3
 801087e:	f000 f89d 	bl	80109bc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 8010882:	4603      	mov	r3, r0
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	321c      	adds	r2, #28
 8010888:	6812      	ldr	r2, [r2, #0]
 801088a:	4618      	mov	r0, r3
 801088c:	4790      	blx	r2
}
 801088e:	bf00      	nop
 8010890:	3724      	adds	r7, #36	@ 0x24
 8010892:	46bd      	mov	sp, r7
 8010894:	bd90      	pop	{r4, r7, pc}

08010896 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 8010896:	b580      	push	{r7, lr}
 8010898:	b082      	sub	sp, #8
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
	interface->start();
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	3318      	adds	r3, #24
 80108a2:	4618      	mov	r0, r3
 80108a4:	f000 f88a 	bl	80109bc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80108a8:	4603      	mov	r3, r0
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	3220      	adds	r2, #32
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	4618      	mov	r0, r3
 80108b2:	4790      	blx	r2
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
	interface->tasks();
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	3318      	adds	r3, #24
 80108c8:	4618      	mov	r0, r3
 80108ca:	f000 f877 	bl	80109bc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80108ce:	4603      	mov	r3, r0
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	3224      	adds	r2, #36	@ 0x24
 80108d4:	6812      	ldr	r2, [r2, #0]
 80108d6:	4618      	mov	r0, r3
 80108d8:	4790      	blx	r2
}
 80108da:	bf00      	nop
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 80108e2:	b480      	push	{r7}
 80108e4:	b083      	sub	sp, #12
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
	if (data)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	7f1b      	ldrb	r3, [r3, #28]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d006      	beq.n	8010900 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	775a      	strb	r2, [r3, #29]
		status = true;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2201      	movs	r2, #1
 80108fc:	779a      	strb	r2, [r3, #30]
 80108fe:	e005      	b.n	801090c <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	7f5b      	ldrb	r3, [r3, #29]
 8010904:	3301      	adds	r3, #1
 8010906:	b2da      	uxtb	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7f5b      	ldrb	r3, [r3, #29]
 8010910:	2b64      	cmp	r3, #100	@ 0x64
 8010912:	d905      	bls.n	8010920 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	775a      	strb	r2, [r3, #29]
		status = false;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	771a      	strb	r2, [r3, #28]
}
 8010926:	bf00      	nop
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8010932:	b580      	push	{r7, lr}
 8010934:	b086      	sub	sp, #24
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801093c:	f107 0308 	add.w	r3, r7, #8
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f000 f876 	bl	8010a34 <_ZNSt8functionIFvbEEC1ERKS1_>
 8010948:	f107 0308 	add.w	r3, r7, #8
 801094c:	6879      	ldr	r1, [r7, #4]
 801094e:	4618      	mov	r0, r3
 8010950:	f000 f89b 	bl	8010a8a <_ZNSt8functionIFvbEE4swapERS1_>
 8010954:	f107 0308 	add.w	r3, r7, #8
 8010958:	4618      	mov	r0, r3
 801095a:	f7f0 f9f9 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 801095e:	687b      	ldr	r3, [r7, #4]
      }
 8010960:	4618      	mov	r0, r3
 8010962:	3718      	adds	r7, #24
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f8aa 	bl	8010acc <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff ffeb 	bl	8010968 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
	: _M_t()
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff ffe8 	bl	8010982 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
	return get();
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 f88e 	bl	8010ae6 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 80109ca:	4603      	mov	r3, r0
      }
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 80109d4:	b590      	push	{r4, r7, lr}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	461a      	mov	r2, r3
 80109e2:	2300      	movs	r3, #0
 80109e4:	6013      	str	r3, [r2, #0]
 80109e6:	6053      	str	r3, [r2, #4]
 80109e8:	6093      	str	r3, [r2, #8]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7f1 fbd1 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 80109f8:	6838      	ldr	r0, [r7, #0]
 80109fa:	f000 f881 	bl	8010b00 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00e      	beq.n	8010a22 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8010a04:	687c      	ldr	r4, [r7, #4]
 8010a06:	6838      	ldr	r0, [r7, #0]
 8010a08:	f000 f885 	bl	8010b16 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	4619      	mov	r1, r3
 8010a10:	4620      	mov	r0, r4
 8010a12:	f000 f88b 	bl	8010b2c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4a04      	ldr	r2, [pc, #16]	@ (8010a2c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 8010a1a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a04      	ldr	r2, [pc, #16]	@ (8010a30 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 8010a20:	609a      	str	r2, [r3, #8]
	}
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4618      	mov	r0, r3
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd90      	pop	{r4, r7, pc}
 8010a2c:	08010b51 	.word	0x08010b51
 8010a30:	08010b7b 	.word	0x08010b7b

08010a34 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	461a      	mov	r2, r3
 8010a42:	2300      	movs	r3, #0
 8010a44:	6013      	str	r3, [r2, #0]
 8010a46:	6053      	str	r3, [r2, #4]
 8010a48:	6093      	str	r3, [r2, #8]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f1 fba1 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8010a58:	6838      	ldr	r0, [r7, #0]
 8010a5a:	f000 f8ad 	bl	8010bb8 <_ZNKSt8functionIFvbEEcvbEv>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00d      	beq.n	8010a80 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	6839      	ldr	r1, [r7, #0]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	68da      	ldr	r2, [r3, #12]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	689a      	ldr	r2, [r3, #8]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	609a      	str	r2, [r3, #8]
      }
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	4618      	mov	r0, r3
 8010a84:	3708      	adds	r7, #8
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b082      	sub	sp, #8
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f000 f89c 	bl	8010bd8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f103 0208 	add.w	r2, r3, #8
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	4619      	mov	r1, r3
 8010aac:	4610      	mov	r0, r2
 8010aae:	f000 f8ba 	bl	8010c26 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f103 020c 	add.w	r2, r3, #12
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	330c      	adds	r3, #12
 8010abc:	4619      	mov	r1, r3
 8010abe:	4610      	mov	r0, r2
 8010ac0:	f000 f8d0 	bl	8010c64 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8010ac4:	bf00      	nop
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f8e3 	bl	8010ca2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 f8e6 	bl	8010cc2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8010af6:	4603      	mov	r3, r0
 8010af8:	4618      	mov	r0, r3
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010b08:	2301      	movs	r3, #1
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b16:	b480      	push	{r7}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010b2c:	b590      	push	{r4, r7, lr}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010b36:	6838      	ldr	r0, [r7, #0]
 8010b38:	f7ff ffed 	bl	8010b16 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	4622      	mov	r2, r4
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f8cb 	bl	8010cde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010b48:	bf00      	nop
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd90      	pop	{r4, r7, pc}

08010b50 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010b50:	b590      	push	{r4, r7, lr}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 f8d8 	bl	8010d10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010b60:	4604      	mov	r4, r0
 8010b62:	6838      	ldr	r0, [r7, #0]
 8010b64:	f7f1 fa54 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	f000 f8df 	bl	8010d30 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010b72:	bf00      	nop
      }
 8010b74:	370c      	adds	r7, #12
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd90      	pop	{r4, r7, pc}

08010b7a <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010b7a:	b590      	push	{r4, r7, lr}
 8010b7c:	b085      	sub	sp, #20
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	60f8      	str	r0, [r7, #12]
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	4613      	mov	r3, r2
 8010b86:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010b88:	79fb      	ldrb	r3, [r7, #7]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d109      	bne.n	8010ba2 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010b8e:	68b8      	ldr	r0, [r7, #8]
 8010b90:	f000 f8be 	bl	8010d10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010b94:	4604      	mov	r4, r0
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f000 f8e0 	bl	8010d5c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	601c      	str	r4, [r3, #0]
	    break;
 8010ba0:	e005      	b.n	8010bae <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010ba2:	79fb      	ldrb	r3, [r7, #7]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	68b9      	ldr	r1, [r7, #8]
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 f8e3 	bl	8010d74 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010bae:	2300      	movs	r3, #0
      }
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3714      	adds	r7, #20
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd90      	pop	{r4, r7, pc}

08010bb8 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7f0 f883 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	f083 0301 	eor.w	r3, r3, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 f900 	bl	8010de8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010be8:	4602      	mov	r2, r0
 8010bea:	f107 0308 	add.w	r3, r7, #8
 8010bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bf2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8010bf6:	6838      	ldr	r0, [r7, #0]
 8010bf8:	f000 f8f6 	bl	8010de8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c04:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8010c08:	f107 0308 	add.w	r3, r7, #8
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 f8eb 	bl	8010de8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010c12:	4602      	mov	r2, r0
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c1a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010c1e:	bf00      	nop
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 f8e4 	bl	8010dfe <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c36:	4603      	mov	r3, r0
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010c3c:	6838      	ldr	r0, [r7, #0]
 8010c3e:	f000 f8de 	bl	8010dfe <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c42:	4603      	mov	r3, r0
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010c4a:	f107 030c 	add.w	r3, r7, #12
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 f8d5 	bl	8010dfe <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c54:	4603      	mov	r3, r0
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	601a      	str	r2, [r3, #0]
    }
 8010c5c:	bf00      	nop
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f8d0 	bl	8010e14 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010c74:	4603      	mov	r3, r0
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010c7a:	6838      	ldr	r0, [r7, #0]
 8010c7c:	f000 f8ca 	bl	8010e14 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010c80:	4603      	mov	r3, r0
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010c88:	f107 030c 	add.w	r3, r7, #12
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 f8c1 	bl	8010e14 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010c92:	4603      	mov	r3, r0
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	601a      	str	r2, [r3, #0]
    }
 8010c9a:	bf00      	nop
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b082      	sub	sp, #8
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 f8bd 	bl	8010e2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f000 f8c5 	bl	8010e42 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3708      	adds	r7, #8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 f8c6 	bl	8010e5e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010cde:	b590      	push	{r4, r7, lr}
 8010ce0:	b085      	sub	sp, #20
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	60f8      	str	r0, [r7, #12]
 8010ce6:	60b9      	str	r1, [r7, #8]
 8010ce8:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f7ff fd17 	bl	801071e <_ZNSt9_Any_data9_M_accessEv>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	2004      	movs	r0, #4
 8010cf6:	f7f9 fe8b 	bl	800aa10 <_ZnwjPv>
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	68b8      	ldr	r0, [r7, #8]
 8010cfe:	f7ff ff0a 	bl	8010b16 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010d02:	4603      	mov	r3, r0
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6023      	str	r3, [r4, #0]
	  }
 8010d08:	bf00      	nop
 8010d0a:	3714      	adds	r7, #20
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd90      	pop	{r4, r7, pc}

08010d10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f8ad 	bl	8010e78 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 8010d1e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f000 f8b5 	bl	8010e90 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 8010d26:	4603      	mov	r3, r0
	}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010d30:	b5b0      	push	{r4, r5, r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 f8b3 	bl	8010ea6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010d40:	4604      	mov	r4, r0
 8010d42:	6838      	ldr	r0, [r7, #0]
 8010d44:	f7f1 f964 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	4628      	mov	r0, r5
 8010d50:	f000 f8b4 	bl	8010ebc <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010d54:	bf00      	nop
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bdb0      	pop	{r4, r5, r7, pc}

08010d5c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fcda 	bl	801071e <_ZNSt9_Any_data9_M_accessEv>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010d74:	b590      	push	{r4, r7, lr}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010d82:	79fb      	ldrb	r3, [r7, #7]
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d82a      	bhi.n	8010dde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8010d88:	a201      	add	r2, pc, #4	@ (adr r2, 8010d90 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8010d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8e:	bf00      	nop
 8010d90:	08010da1 	.word	0x08010da1
 8010d94:	08010daf 	.word	0x08010daf
 8010d98:	08010dc3 	.word	0x08010dc3
 8010d9c:	08010dd5 	.word	0x08010dd5
	      __dest._M_access<const type_info*>() = nullptr;
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f000 f8a2 	bl	8010eea <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
	      break;
 8010dac:	e017      	b.n	8010dde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010dae:	68b8      	ldr	r0, [r7, #8]
 8010db0:	f7ff ffae 	bl	8010d10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010db4:	4604      	mov	r4, r0
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f7ff ffd0 	bl	8010d5c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	601c      	str	r4, [r3, #0]
	      break;
 8010dc0:	e00d      	b.n	8010dde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8010dc2:	68b8      	ldr	r0, [r7, #8]
 8010dc4:	f7ff ffa4 	bl	8010d10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010dc8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8010dca:	4619      	mov	r1, r3
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f000 f898 	bl	8010f02 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8010dd2:	e004      	b.n	8010dde <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f000 f8a5 	bl	8010f26 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010ddc:	bf00      	nop
	  return false;
 8010dde:	2300      	movs	r3, #0
	}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3714      	adds	r7, #20
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd90      	pop	{r4, r7, pc}

08010de8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4618      	mov	r0, r3
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfc:	4770      	bx	lr

08010dfe <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8010dfe:	b480      	push	{r7}
 8010e00:	b083      	sub	sp, #12
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr

08010e2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b082      	sub	sp, #8
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f883 	bl	8010f3e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 8010e42:	b480      	push	{r7}
 8010e44:	b083      	sub	sp, #12
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	4618      	mov	r0, r3
 8010e54:	370c      	adds	r7, #12
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 f873 	bl	8010f54 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	4618      	mov	r0, r3
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff fc57 	bl	8010734 <_ZNKSt9_Any_data9_M_accessEv>
 8010e86:	4603      	mov	r3, r0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010ea6:	b480      	push	{r7}
 8010ea8:	b083      	sub	sp, #12
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010ebc:	b590      	push	{r4, r7, lr}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	7338      	strb	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010ec8:	68b8      	ldr	r0, [r7, #8]
 8010eca:	f7ff ffec 	bl	8010ea6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010ece:	4604      	mov	r4, r0
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7f1 f89d 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	4619      	mov	r1, r3
 8010edc:	4620      	mov	r0, r4
 8010ede:	f7ff fc9b 	bl	8010818 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 8010ee2:	bf00      	nop
 8010ee4:	3714      	adds	r7, #20
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd90      	pop	{r4, r7, pc}

08010eea <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff fc13 	bl	801071e <_ZNSt9_Any_data9_M_accessEv>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	4618      	mov	r0, r3
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010f02:	b590      	push	{r4, r7, lr}
 8010f04:	b083      	sub	sp, #12
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	6078      	str	r0, [r7, #4]
 8010f0a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010f0c:	6838      	ldr	r0, [r7, #0]
 8010f0e:	f000 f82d 	bl	8010f6c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010f12:	4603      	mov	r3, r0
 8010f14:	4622      	mov	r2, r4
 8010f16:	4619      	mov	r1, r3
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f832 	bl	8010f82 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010f1e:	bf00      	nop
 8010f20:	370c      	adds	r7, #12
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd90      	pop	{r4, r7, pc}

08010f26 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b082      	sub	sp, #8
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
 8010f2e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 f83f 	bl	8010fb4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 8010f36:	bf00      	nop
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 8010f3e:	b480      	push	{r7}
 8010f40:	b083      	sub	sp, #12
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f000 f835 	bl	8010fcc <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010f62:	4603      	mov	r3, r0
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	370c      	adds	r7, #12
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010f82:	b590      	push	{r4, r7, lr}
 8010f84:	b085      	sub	sp, #20
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	60f8      	str	r0, [r7, #12]
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7ff fbc5 	bl	801071e <_ZNSt9_Any_data9_M_accessEv>
 8010f94:	4603      	mov	r3, r0
 8010f96:	4619      	mov	r1, r3
 8010f98:	2004      	movs	r0, #4
 8010f9a:	f7f9 fd39 	bl	800aa10 <_ZnwjPv>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	68b8      	ldr	r0, [r7, #8]
 8010fa2:	f7ff ffe3 	bl	8010f6c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	6023      	str	r3, [r4, #0]
	  }
 8010fac:	bf00      	nop
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd90      	pop	{r4, r7, pc}

08010fb4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f7ff fbae 	bl	801071e <_ZNSt9_Any_data9_M_accessEv>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 f805 	bl	8010fe6 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010fe6:	b480      	push	{r7}
 8010fe8:	b083      	sub	sp, #12
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	4b03      	ldr	r3, [pc, #12]	@ (8011014 <_ZN6Remora9getTxDataEv+0x18>)
 8011006:	4618      	mov	r0, r3
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	30000080 	.word	0x30000080

08011018 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	4b03      	ldr	r3, [pc, #12]	@ (8011030 <_ZN6Remora9getRxDataEv+0x18>)
 8011022:	4618      	mov	r0, r3
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	300000c0 	.word	0x300000c0

08011034 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 8011034:	b580      	push	{r7, lr}
 8011036:	b0b0      	sub	sp, #192	@ 0xc0
 8011038:	af04      	add	r7, sp, #16
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 8011040:	f107 0320 	add.w	r3, r7, #32
 8011044:	4a65      	ldr	r2, [pc, #404]	@ (80111dc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 8011046:	68b9      	ldr	r1, [r7, #8]
 8011048:	4618      	mov	r0, r3
 801104a:	f7fe f9a5 	bl	800f398 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801104e:	f107 0320 	add.w	r3, r7, #32
 8011052:	4618      	mov	r0, r3
 8011054:	f7f6 fd20 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011058:	4603      	mov	r3, r0
 801105a:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 801105c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011060:	4a5f      	ldr	r2, [pc, #380]	@ (80111e0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 8011062:	68b9      	ldr	r1, [r7, #8]
 8011064:	4618      	mov	r0, r3
 8011066:	f000 f985 	bl	8011374 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801106a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801106e:	4618      	mov	r0, r3
 8011070:	f7f6 fd12 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011074:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 8011078:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801107c:	4a59      	ldr	r2, [pc, #356]	@ (80111e4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 801107e:	68b9      	ldr	r1, [r7, #8]
 8011080:	4618      	mov	r0, r3
 8011082:	f7f6 fce4 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8011086:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801108a:	4618      	mov	r0, r3
 801108c:	f7f6 fd04 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011090:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 8011094:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011098:	4a53      	ldr	r2, [pc, #332]	@ (80111e8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 801109a:	68b9      	ldr	r1, [r7, #8]
 801109c:	4618      	mov	r0, r3
 801109e:	f000 f98e 	bl	80113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80110a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f6 fcf6 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80110ac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 80110b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80110b4:	4a4d      	ldr	r2, [pc, #308]	@ (80111ec <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 80110b6:	68b9      	ldr	r1, [r7, #8]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f000 f980 	bl	80113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80110be:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe f98d 	bl	800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 80110c8:	4603      	mov	r3, r0
 80110ca:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 80110cc:	4948      	ldr	r1, [pc, #288]	@ (80111f0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 80110ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80110d2:	f7ef f905 	bl	80002e0 <strcmp>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d102      	bne.n	80110e2 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 80110dc:	2301      	movs	r3, #1
 80110de:	617b      	str	r3, [r7, #20]
 80110e0:	e022      	b.n	8011128 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 80110e2:	4944      	ldr	r1, [pc, #272]	@ (80111f4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 80110e4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80110e8:	f7ef f8fa 	bl	80002e0 <strcmp>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d102      	bne.n	80110f8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 80110f2:	2302      	movs	r3, #2
 80110f4:	617b      	str	r3, [r7, #20]
 80110f6:	e017      	b.n	8011128 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 80110f8:	493f      	ldr	r1, [pc, #252]	@ (80111f8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 80110fa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80110fe:	f7ef f8ef 	bl	80002e0 <strcmp>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d102      	bne.n	801110e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 8011108:	2303      	movs	r3, #3
 801110a:	617b      	str	r3, [r7, #20]
 801110c:	e00c      	b.n	8011128 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 801110e:	493b      	ldr	r1, [pc, #236]	@ (80111fc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8011110:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8011114:	f7ef f8e4 	bl	80002e0 <strcmp>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d102      	bne.n	8011124 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 801111e:	2304      	movs	r3, #4
 8011120:	617b      	str	r3, [r7, #20]
 8011122:	e001      	b.n	8011128 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 8011124:	2300      	movs	r3, #0
 8011126:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 8011128:	4935      	ldr	r1, [pc, #212]	@ (8011200 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 801112a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801112e:	f7ef f8d7 	bl	80002e0 <strcmp>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	bf0c      	ite	eq
 8011138:	2301      	moveq	r3, #1
 801113a:	2300      	movne	r3, #0
 801113c:	b2db      	uxtb	r3, r3
 801113e:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 8011140:	4930      	ldr	r1, [pc, #192]	@ (8011204 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8011142:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8011146:	f7ef f8cb 	bl	80002e0 <strcmp>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d105      	bne.n	801115c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff ff61 	bl	8011018 <_ZN6Remora9getRxDataEv>
 8011156:	4603      	mov	r3, r0
 8011158:	333d      	adds	r3, #61	@ 0x3d
 801115a:	e004      	b.n	8011166 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff ff4d 	bl	8010ffc <_ZN6Remora9getTxDataEv>
 8011162:	4603      	mov	r3, r0
 8011164:	333c      	adds	r3, #60	@ 0x3c
 8011166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	461a      	mov	r2, r3
 801116e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8011172:	4825      	ldr	r0, [pc, #148]	@ (8011208 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8011174:	f018 f92e 	bl	80293d4 <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 8011178:	4922      	ldr	r1, [pc, #136]	@ (8011204 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 801117a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801117e:	f7ef f8af 	bl	80002e0 <strcmp>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d101      	bne.n	801118c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 8011188:	2301      	movs	r3, #1
 801118a:	e000      	b.n	801118e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 801118c:	2300      	movs	r3, #0
 801118e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011192:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8011196:	f107 011c 	add.w	r1, r7, #28
 801119a:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 801119e:	f107 0314 	add.w	r3, r7, #20
 80111a2:	9302      	str	r3, [sp, #8]
 80111a4:	f107 0313 	add.w	r3, r7, #19
 80111a8:	9301      	str	r3, [sp, #4]
 80111aa:	f107 0318 	add.w	r3, r7, #24
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	460b      	mov	r3, r1
 80111b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80111b6:	f000 f927 	bl	8011408 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80111ba:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80111be:	4619      	mov	r1, r3
 80111c0:	68f8      	ldr	r0, [r7, #12]
 80111c2:	f000 f999 	bl	80114f8 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 80111c6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 f972 	bl	80114b4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 80111d0:	bf00      	nop
}
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	37b0      	adds	r7, #176	@ 0xb0
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	0802a898 	.word	0x0802a898
 80111e0:	0802a89c 	.word	0x0802a89c
 80111e4:	0802a8a4 	.word	0x0802a8a4
 80111e8:	0802a8ac 	.word	0x0802a8ac
 80111ec:	0802a8b8 	.word	0x0802a8b8
 80111f0:	0802a8c4 	.word	0x0802a8c4
 80111f4:	0802a8d0 	.word	0x0802a8d0
 80111f8:	0802a8d8 	.word	0x0802a8d8
 80111fc:	0802a8e4 	.word	0x0802a8e4
 8011200:	0802a8f0 	.word	0x0802a8f0
 8011204:	0802a8f8 	.word	0x0802a8f8
 8011208:	0802a900 	.word	0x0802a900

0801120c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 801120c:	b590      	push	{r4, r7, lr}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	4618      	mov	r0, r3
 801121e:	f000 fe41 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8011222:	4a1c      	ldr	r2, [pc, #112]	@ (8011294 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	619a      	str	r2, [r3, #24]
    mode(_mode),
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f103 0420 	add.w	r4, r3, #32
 801123a:	6838      	ldr	r0, [r7, #0]
 801123c:	f000 f96f 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8011240:	4603      	mov	r3, r0
 8011242:	4619      	mov	r1, r3
 8011244:	4620      	mov	r0, r4
 8011246:	f017 faf7 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6a3a      	ldr	r2, [r7, #32]
 801124e:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8011256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801125e:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f103 0120 	add.w	r1, r3, #32
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f103 021c 	add.w	r2, r3, #28
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8011278:	4623      	mov	r3, r4
 801127a:	f000 f95b 	bl	8011534 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011282:	2201      	movs	r2, #1
 8011284:	409a      	lsls	r2, r3
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	4618      	mov	r0, r3
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}
 8011294:	0802b4d0 	.word	0x0802b4d0

08011298 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	69db      	ldr	r3, [r3, #28]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d136      	bne.n	8011316 <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3344      	adds	r3, #68	@ 0x44
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fe f982 	bl	800f5b6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f3 fdbb 	bl	8004e30 <_ZNK3Pin3getEv>
 80112ba:	4603      	mov	r3, r0
 80112bc:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d003      	beq.n	80112d0 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 80112c8:	7bfb      	ldrb	r3, [r7, #15]
 80112ca:	f083 0301 	eor.w	r3, r3, #1
 80112ce:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 80112d0:	7bfb      	ldrb	r3, [r7, #15]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00e      	beq.n	80112f4 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	881b      	ldrh	r3, [r3, #0]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	b21a      	sxth	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80112e4:	b21b      	sxth	r3, r3
 80112e6:	4313      	orrs	r3, r2
 80112e8:	b21a      	sxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	699b      	ldr	r3, [r3, #24]
 80112ee:	b292      	uxth	r2, r2
 80112f0:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 80112f2:	e031      	b.n	8011358 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	699b      	ldr	r3, [r3, #24]
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	b21a      	sxth	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011302:	b21b      	sxth	r3, r3
 8011304:	43db      	mvns	r3, r3
 8011306:	b21b      	sxth	r3, r3
 8011308:	4013      	ands	r3, r2
 801130a:	b21a      	sxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	699b      	ldr	r3, [r3, #24]
 8011310:	b292      	uxth	r2, r2
 8011312:	801a      	strh	r2, [r3, #0]
}
 8011314:	e020      	b.n	8011358 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	881b      	ldrh	r3, [r3, #0]
 801131c:	b29b      	uxth	r3, r3
 801131e:	461a      	mov	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011324:	4013      	ands	r3, r2
 8011326:	2b00      	cmp	r3, #0
 8011328:	bf14      	ite	ne
 801132a:	2301      	movne	r3, #1
 801132c:	2300      	moveq	r3, #0
 801132e:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011336:	2b00      	cmp	r3, #0
 8011338:	d003      	beq.n	8011342 <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	f083 0301 	eor.w	r3, r3, #1
 8011340:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	3344      	adds	r3, #68	@ 0x44
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe f935 	bl	800f5b6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 801134c:	4602      	mov	r2, r0
 801134e:	7bfb      	ldrb	r3, [r7, #15]
 8011350:	4619      	mov	r1, r3
 8011352:	4610      	mov	r0, r2
 8011354:	f7f3 fd82 	bl	8004e5c <_ZN3Pin3setEb>
}
 8011358:	bf00      	nop
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
    return;
 8011368:	bf00      	nop
}
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011374:	b580      	push	{r7, lr}
 8011376:	b08c      	sub	sp, #48	@ 0x30
 8011378:	af02      	add	r7, sp, #8
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	f107 0314 	add.w	r3, r7, #20
 8011386:	e892 0003 	ldmia.w	r2, {r0, r1}
 801138a:	e883 0003 	stmia.w	r3, {r0, r1}
 801138e:	f107 031c 	add.w	r3, r7, #28
 8011392:	6879      	ldr	r1, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f7fb fe66 	bl	800d066 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801139a:	466a      	mov	r2, sp
 801139c:	f107 0320 	add.w	r3, r7, #32
 80113a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	f107 0214 	add.w	r2, r7, #20
 80113ae:	ca06      	ldmia	r2, {r1, r2}
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f7f6 fce0 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	3728      	adds	r7, #40	@ 0x28
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80113be:	b580      	push	{r7, lr}
 80113c0:	b08c      	sub	sp, #48	@ 0x30
 80113c2:	af02      	add	r7, sp, #8
 80113c4:	60f8      	str	r0, [r7, #12]
 80113c6:	60b9      	str	r1, [r7, #8]
 80113c8:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	f107 0314 	add.w	r3, r7, #20
 80113d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80113d8:	f107 031c 	add.w	r3, r7, #28
 80113dc:	6879      	ldr	r1, [r7, #4]
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 f8cf 	bl	8011582 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80113e4:	466a      	mov	r2, sp
 80113e6:	f107 0320 	add.w	r3, r7, #32
 80113ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	f107 0214 	add.w	r2, r7, #20
 80113f8:	ca06      	ldmia	r2, {r1, r2}
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f7f6 fcbb 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	3728      	adds	r7, #40	@ 0x28
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8011408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801140c:	b091      	sub	sp, #68	@ 0x44
 801140e:	af04      	add	r7, sp, #16
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	607a      	str	r2, [r7, #4]
 8011416:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8011418:	204c      	movs	r0, #76	@ 0x4c
 801141a:	f017 f931 	bl	8028680 <_Znwj>
 801141e:	4603      	mov	r3, r0
 8011420:	4698      	mov	r8, r3
 8011422:	68b8      	ldr	r0, [r7, #8]
 8011424:	f000 f8c0 	bl	80115a8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 8011428:	4681      	mov	r9, r0
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f7fe f8cf 	bl	800f5ce <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8011430:	4603      	mov	r3, r0
 8011432:	681e      	ldr	r6, [r3, #0]
 8011434:	6838      	ldr	r0, [r7, #0]
 8011436:	f7fe f90a 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801143a:	4603      	mov	r3, r0
 801143c:	681c      	ldr	r4, [r3, #0]
 801143e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011442:	4618      	mov	r0, r3
 8011444:	f017 f92d 	bl	80286a2 <_ZNSaIcEC1Ev>
 8011448:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801144c:	f107 0314 	add.w	r3, r7, #20
 8011450:	4621      	mov	r1, r4
 8011452:	4618      	mov	r0, r3
 8011454:	f7f6 fa9a 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8011458:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801145a:	f7fe f903 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801145e:	4603      	mov	r3, r0
 8011460:	681c      	ldr	r4, [r3, #0]
 8011462:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011464:	f000 f8ab 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8011468:	4603      	mov	r3, r0
 801146a:	781d      	ldrb	r5, [r3, #0]
 801146c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801146e:	f7fe f8f9 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011472:	4603      	mov	r3, r0
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f107 0214 	add.w	r2, r7, #20
 801147a:	9302      	str	r3, [sp, #8]
 801147c:	9501      	str	r5, [sp, #4]
 801147e:	9400      	str	r4, [sp, #0]
 8011480:	4613      	mov	r3, r2
 8011482:	4632      	mov	r2, r6
 8011484:	4649      	mov	r1, r9
 8011486:	4640      	mov	r0, r8
 8011488:	f7ff fec0 	bl	801120c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 801148c:	4641      	mov	r1, r8
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f000 f8b0 	bl	80115f4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8011494:	f107 0314 	add.w	r3, r7, #20
 8011498:	4618      	mov	r0, r3
 801149a:	f017 f9ec 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801149e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80114a2:	4618      	mov	r0, r3
 80114a4:	f017 f8fe 	bl	80286a4 <_ZNSaIcED1Ev>
 80114a8:	bf00      	nop
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	3734      	adds	r7, #52	@ 0x34
 80114ae:	46bd      	mov	sp, r7
 80114b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080114b4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b085      	sub	sp, #20
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	f000 f8a7 	bl	8011612 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80114c4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00c      	beq.n	80114e8 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 f8ac 	bl	801162c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 80114d4:	4604      	mov	r4, r0
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f000 f8b5 	bl	8011646 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 80114dc:	4603      	mov	r3, r0
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4619      	mov	r1, r3
 80114e2:	4620      	mov	r0, r4
 80114e4:	f000 f8e6 	bl	80116b4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	601a      	str	r2, [r3, #0]
      }
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4618      	mov	r0, r3
 80114f2:	3714      	adds	r7, #20
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd90      	pop	{r4, r7, pc}

080114f8 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80114f8:	b590      	push	{r4, r7, lr}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8011502:	687c      	ldr	r4, [r7, #4]
 8011504:	6838      	ldr	r0, [r7, #0]
 8011506:	f000 f8e6 	bl	80116d6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801150a:	4603      	mov	r3, r0
 801150c:	4619      	mov	r1, r3
 801150e:	4620      	mov	r0, r4
 8011510:	f000 f8ec 	bl	80116ec <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	4618      	mov	r0, r3
 8011518:	370c      	adds	r7, #12
 801151a:	46bd      	mov	sp, r7
 801151c:	bd90      	pop	{r4, r7, pc}

0801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8011534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	607a      	str	r2, [r7, #4]
 8011540:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8011542:	2040      	movs	r0, #64	@ 0x40
 8011544:	f017 f89c 	bl	8028680 <_Znwj>
 8011548:	4603      	mov	r3, r0
 801154a:	461d      	mov	r5, r3
 801154c:	68b8      	ldr	r0, [r7, #8]
 801154e:	f7fe f955 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8011552:	4606      	mov	r6, r0
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7fe f885 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801155a:	4603      	mov	r3, r0
 801155c:	681c      	ldr	r4, [r3, #0]
 801155e:	6838      	ldr	r0, [r7, #0]
 8011560:	f7fe f880 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011564:	4603      	mov	r3, r0
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4622      	mov	r2, r4
 801156a:	4631      	mov	r1, r6
 801156c:	4628      	mov	r0, r5
 801156e:	f7f3 faf3 	bl	8004b58 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8011572:	4629      	mov	r1, r5
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f7fe f95c 	bl	800f832 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	3714      	adds	r7, #20
 801157e:	46bd      	mov	sp, r7
 8011580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011582 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8011582:	b580      	push	{r7, lr}
 8011584:	b082      	sub	sp, #8
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801158c:	6838      	ldr	r0, [r7, #0]
 801158e:	f000 f8e5 	bl	801175c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8011592:	4602      	mov	r2, r0
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4611      	mov	r1, r2
 8011598:	4618      	mov	r0, r3
 801159a:	f000 f8ea 	bl	8011772 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 801159e:	bf00      	nop
}
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	3708      	adds	r7, #8
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	4618      	mov	r0, r3
 80115b4:	370c      	adds	r7, #12
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr

080115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115be:	b480      	push	{r7}
 80115c0:	b083      	sub	sp, #12
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4618      	mov	r0, r3
 80115ca:	370c      	adds	r7, #12
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	4611      	mov	r1, r2
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 f8d3 	bl	8011790 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	4618      	mov	r0, r3
 8011604:	f7ff ffe6 	bl	80115d4 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4618      	mov	r0, r3
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8011612:	b580      	push	{r7, lr}
 8011614:	b082      	sub	sp, #8
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4618      	mov	r0, r3
 801161e:	f000 f8cb 	bl	80117b8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011622:	4603      	mov	r3, r0
 8011624:	4618      	mov	r0, r3
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4618      	mov	r0, r3
 8011638:	f000 f8cb 	bl	80117d2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 801163c:	4603      	mov	r3, r0
 801163e:	4618      	mov	r0, r3
 8011640:	3708      	adds	r7, #8
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011646:	b480      	push	{r7}
 8011648:	b083      	sub	sp, #12
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr

0801165c <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	4a0a      	ldr	r2, [pc, #40]	@ (8011690 <_ZN10DigitalPinD1Ev+0x34>)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3344      	adds	r3, #68	@ 0x44
 801166e:	4618      	mov	r0, r3
 8011670:	f7fd ff7f 	bl	800f572 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3320      	adds	r3, #32
 8011678:	4618      	mov	r0, r3
 801167a:	f017 f8fc 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	f000 fc2b 	bl	8011edc <_ZN6ModuleD1Ev>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4618      	mov	r0, r3
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	0802b4d0 	.word	0x0802b4d0

08011694 <_ZN10DigitalPinD0Ev>:
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff ffdd 	bl	801165c <_ZN10DigitalPinD1Ev>
 80116a2:	214c      	movs	r1, #76	@ 0x4c
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f016 ffda 	bl	802865e <_ZdlPvj>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d004      	beq.n	80116ce <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	3204      	adds	r2, #4
 80116c8:	6812      	ldr	r2, [r2, #0]
 80116ca:	4618      	mov	r0, r3
 80116cc:	4790      	blx	r2
      }
 80116ce:	bf00      	nop
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80116d6:	b480      	push	{r7}
 80116d8:	b083      	sub	sp, #12
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4618      	mov	r0, r3
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80116f6:	6838      	ldr	r0, [r7, #0]
 80116f8:	f000 f878 	bl	80117ec <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 80116fc:	4602      	mov	r2, r0
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	601a      	str	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3304      	adds	r3, #4
 8011706:	4618      	mov	r0, r3
 8011708:	f7fb fdb6 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 801170c:	6838      	ldr	r0, [r7, #0]
 801170e:	f000 f86d 	bl	80117ec <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011712:	4603      	mov	r3, r0
 8011714:	4618      	mov	r0, r3
 8011716:	f000 f876 	bl	8011806 <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 801171a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 801171c:	6838      	ldr	r0, [r7, #0]
 801171e:	f7ff ffda 	bl	80116d6 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8011722:	4602      	mov	r2, r0
 8011724:	f107 0308 	add.w	r3, r7, #8
 8011728:	4611      	mov	r1, r2
 801172a:	4618      	mov	r0, r3
 801172c:	f000 f876 	bl	801181c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	3304      	adds	r3, #4
 8011734:	f107 0208 	add.w	r2, r7, #8
 8011738:	4611      	mov	r1, r2
 801173a:	4618      	mov	r0, r3
 801173c:	f7fe f98d 	bl	800fa5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8011740:	f107 0308 	add.w	r3, r7, #8
 8011744:	4618      	mov	r0, r3
 8011746:	f7fa fb9a 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801174a:	68f9      	ldr	r1, [r7, #12]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 f8a7 	bl	80118a0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8011764:	687b      	ldr	r3, [r7, #4]
}
 8011766:	4618      	mov	r0, r3
 8011768:	370c      	adds	r7, #12
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr

08011772 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8011772:	b580      	push	{r7, lr}
 8011774:	b082      	sub	sp, #8
 8011776:	af00      	add	r7, sp, #0
 8011778:	6078      	str	r0, [r7, #4]
 801177a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801177c:	2301      	movs	r3, #1
 801177e:	2208      	movs	r2, #8
 8011780:	6839      	ldr	r1, [r7, #0]
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	f7f3 fd72 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4618      	mov	r0, r3
 801179e:	f000 f88a 	bl	80118b6 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80117a2:	683c      	ldr	r4, [r7, #0]
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7ff ff34 	bl	8011612 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80117aa:	4603      	mov	r3, r0
 80117ac:	601c      	str	r4, [r3, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd90      	pop	{r4, r7, pc}

080117b8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f000 f884 	bl	80118d0 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80117c8:	4603      	mov	r3, r0
 80117ca:	4618      	mov	r0, r3
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b082      	sub	sp, #8
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4618      	mov	r0, r3
 80117de:	f000 f883 	bl	80118e8 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80117e2:	4603      	mov	r3, r0
 80117e4:	4618      	mov	r0, r3
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 f882 	bl	8011900 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80117fc:	4603      	mov	r3, r0
 80117fe:	4618      	mov	r0, r3
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8011806:	b480      	push	{r7}
 8011808:	b083      	sub	sp, #12
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
      return __ptr;
 801180e:	687b      	ldr	r3, [r7, #4]
    }
 8011810:	4618      	mov	r0, r3
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 801182c:	6838      	ldr	r0, [r7, #0]
 801182e:	f7ff ffdd 	bl	80117ec <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	bf0c      	ite	eq
 8011838:	2301      	moveq	r3, #1
 801183a:	2300      	movne	r3, #0
 801183c:	b2db      	uxtb	r3, r3
 801183e:	2b00      	cmp	r3, #0
 8011840:	d128      	bne.n	8011894 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8011842:	f107 030c 	add.w	r3, r7, #12
 8011846:	4618      	mov	r0, r3
 8011848:	f000 f868 	bl	801191c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 801184c:	f107 030c 	add.w	r3, r7, #12
 8011850:	2101      	movs	r1, #1
 8011852:	4618      	mov	r0, r3
 8011854:	f000 f87a 	bl	801194c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8011858:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801185a:	6838      	ldr	r0, [r7, #0]
 801185c:	f000 f885 	bl	801196a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 8011860:	4603      	mov	r3, r0
 8011862:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8011864:	6838      	ldr	r0, [r7, #0]
 8011866:	f7ff fee1 	bl	801162c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 801186a:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f889 	bl	8011984 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011872:	4603      	mov	r3, r0
 8011874:	f107 0210 	add.w	r2, r7, #16
 8011878:	f107 000c 	add.w	r0, r7, #12
 801187c:	6979      	ldr	r1, [r7, #20]
 801187e:	f000 f88c 	bl	801199a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	697a      	ldr	r2, [r7, #20]
 8011886:	601a      	str	r2, [r3, #0]
	}
 8011888:	f107 030c 	add.w	r3, r7, #12
 801188c:	4618      	mov	r0, r3
 801188e:	f000 f851 	bl	8011934 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011892:	e000      	b.n	8011896 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8011894:	bf00      	nop
	}
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	4618      	mov	r0, r3
 801189a:	3718      	adds	r7, #24
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
	{ }
 80118aa:	bf00      	nop
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 f882 	bl	80119ca <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f886 	bl	80119ea <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 80118de:	4603      	mov	r3, r0
 80118e0:	4618      	mov	r0, r3
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 f887 	bl	8011a04 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80118f6:	4603      	mov	r3, r0
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4618      	mov	r0, r3
 801190c:	f000 f886 	bl	8011a1c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8011910:	4603      	mov	r3, r0
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4618      	mov	r0, r3
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f886 	bl	8011a36 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 f885 	bl	8011a4c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011956:	2200      	movs	r2, #0
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 f881 	bl	8011a62 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8011960:	4603      	mov	r3, r0
 8011962:	4618      	mov	r0, r3
 8011964:	3708      	adds	r7, #8
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 801196a:	b580      	push	{r7, lr}
 801196c:	b082      	sub	sp, #8
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4618      	mov	r0, r3
 8011976:	f000 f89e 	bl	8011ab6 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 801197a:	4603      	mov	r3, r0
 801197c:	4618      	mov	r0, r3
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4618      	mov	r0, r3
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801199a:	b590      	push	{r4, r7, lr}
 801199c:	b085      	sub	sp, #20
 801199e:	af00      	add	r7, sp, #0
 80119a0:	60f8      	str	r0, [r7, #12]
 80119a2:	60b9      	str	r1, [r7, #8]
 80119a4:	607a      	str	r2, [r7, #4]
 80119a6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 f899 	bl	8011ae0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80119ae:	4604      	mov	r4, r0
 80119b0:	6838      	ldr	r0, [r7, #0]
 80119b2:	f7ff ffe7 	bl	8011984 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80119b6:	4603      	mov	r3, r0
 80119b8:	4622      	mov	r2, r4
 80119ba:	68b9      	ldr	r1, [r7, #8]
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f000 f89a 	bl	8011af6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80119c2:	bf00      	nop
 80119c4:	3714      	adds	r7, #20
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd90      	pop	{r4, r7, pc}

080119ca <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b082      	sub	sp, #8
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 f8ad 	bl	8011b32 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4618      	mov	r0, r3
 80119dc:	f000 f8b5 	bl	8011b4a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b082      	sub	sp, #8
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f000 f8b6 	bl	8011b66 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 80119fa:	4603      	mov	r3, r0
 80119fc:	4618      	mov	r0, r3
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 f8b5 	bl	8011b7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 8011a12:	4603      	mov	r3, r0
 8011a14:	4618      	mov	r0, r3
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f000 f8b4 	bl	8011b94 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4618      	mov	r0, r3
 8011a58:	370c      	adds	r7, #12
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr

08011a62 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b084      	sub	sp, #16
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	60f8      	str	r0, [r7, #12]
 8011a6a:	60b9      	str	r1, [r7, #8]
 8011a6c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011a6e:	68f8      	ldr	r0, [r7, #12]
 8011a70:	f000 f89c 	bl	8011bac <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8011a74:	4602      	mov	r2, r0
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	bf8c      	ite	hi
 8011a7c:	2301      	movhi	r3, #1
 8011a7e:	2300      	movls	r3, #0
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	bf14      	ite	ne
 8011a86:	2301      	movne	r3, #1
 8011a88:	2300      	moveq	r3, #0
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d007      	beq.n	8011aa0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a96:	d301      	bcc.n	8011a9c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011a98:	f016 fe08 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011a9c:	f016 fe03 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	011b      	lsls	r3, r3, #4
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f016 fdeb 	bl	8028680 <_Znwj>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	bf00      	nop
      }
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	b084      	sub	sp, #16
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff fda7 	bl	8011612 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff fda1 	bl	8011612 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	601a      	str	r2, [r3, #0]
	return __p;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
      }
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3710      	adds	r7, #16
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	4618      	mov	r0, r3
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr

08011af6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af8:	b085      	sub	sp, #20
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	60f8      	str	r0, [r7, #12]
 8011afe:	60b9      	str	r1, [r7, #8]
 8011b00:	607a      	str	r2, [r7, #4]
 8011b02:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	4619      	mov	r1, r3
 8011b08:	2010      	movs	r0, #16
 8011b0a:	f7f8 ff81 	bl	800aa10 <_ZnwjPv>
 8011b0e:	4605      	mov	r5, r0
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f7ff ffe5 	bl	8011ae0 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b16:	4603      	mov	r3, r0
 8011b18:	681c      	ldr	r4, [r3, #0]
 8011b1a:	6838      	ldr	r0, [r7, #0]
 8011b1c:	f7ff ff32 	bl	8011984 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b20:	4632      	mov	r2, r6
 8011b22:	4621      	mov	r1, r4
 8011b24:	4628      	mov	r0, r5
 8011b26:	f000 f84d 	bl	8011bc4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8011b2a:	bf00      	nop
 8011b2c:	3714      	adds	r7, #20
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b32 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b082      	sub	sp, #8
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 f864 	bl	8011c08 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4618      	mov	r0, r3
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 8011b4a:	b480      	push	{r7}
 8011b4c:	b083      	sub	sp, #12
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2200      	movs	r2, #0
 8011b56:	601a      	str	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011b66:	b480      	push	{r7}
 8011b68:	b083      	sub	sp, #12
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b082      	sub	sp, #8
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f000 f84a 	bl	8011c1e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 f849 	bl	8011c34 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011bb4:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8011bb8:	4618      	mov	r0, r3
 8011bba:	370c      	adds	r7, #12
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011bc4:	b5b0      	push	{r4, r5, r7, lr}
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fc fbc4 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8011c04 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f103 040c 	add.w	r4, r3, #12
 8011be4:	1d3b      	adds	r3, r7, #4
 8011be6:	4618      	mov	r0, r3
 8011be8:	f000 f831 	bl	8011c4e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011bec:	f107 0314 	add.w	r3, r7, #20
 8011bf0:	462a      	mov	r2, r5
 8011bf2:	68b9      	ldr	r1, [r7, #8]
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f000 f835 	bl	8011c64 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bdb0      	pop	{r4, r5, r7, pc}
 8011c04:	0802b4b4 	.word	0x0802b4b4

08011c08 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 8011c08:	b480      	push	{r7}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr

08011c1e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011c1e:	b480      	push	{r7}
 8011c20:	b083      	sub	sp, #12
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 f82c 	bl	8011c9c <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8011c44:	4603      	mov	r3, r0
 8011c46:	4618      	mov	r0, r3
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	713a      	strb	r2, [r7, #4]
 8011c70:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8011c72:	1d3b      	adds	r3, r7, #4
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff ffea 	bl	8011c4e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	f000 f817 	bl	8011cb2 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 8011c84:	6839      	ldr	r1, [r7, #0]
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f7fe fc46 	bl	8010518 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	601a      	str	r2, [r3, #0]
	{ }
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	370c      	adds	r7, #12
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr

08011cb2 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011cb2:	b580      	push	{r7, lr}
 8011cb4:	b082      	sub	sp, #8
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
 8011cba:	6039      	str	r1, [r7, #0]
 8011cbc:	6838      	ldr	r0, [r7, #0]
 8011cbe:	f7ff ffc6 	bl	8011c4e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3708      	adds	r7, #8
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	4a05      	ldr	r2, [pc, #20]	@ (8011cec <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	601a      	str	r2, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fa fd01 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	0802b4b4 	.word	0x0802b4b4

08011cf0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7ff ffe7 	bl	8011ccc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011cfe:	2110      	movs	r1, #16
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f016 fcac 	bl	802865e <_ZdlPvj>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	330c      	adds	r3, #12
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f000 f83f 	bl	8011da0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011d22:	4602      	mov	r2, r0
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	4610      	mov	r0, r2
 8011d2c:	f7ff fcc2 	bl	80116b4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8011d30:	bf00      	nop
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b086      	sub	sp, #24
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	330c      	adds	r3, #12
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 f837 	bl	8011db8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	f107 0314 	add.w	r3, r7, #20
 8011d50:	4611      	mov	r1, r2
 8011d52:	4618      	mov	r0, r3
 8011d54:	f000 f83c 	bl	8011dd0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8011d58:	f107 0114 	add.w	r1, r7, #20
 8011d5c:	f107 030c 	add.w	r3, r7, #12
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f000 f841 	bl	8011dea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ffaf 	bl	8011ccc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8011d6e:	f107 030c 	add.w	r3, r7, #12
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 f84d 	bl	8011e12 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8011d78:	f107 0314 	add.w	r3, r7, #20
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff fdd9 	bl	8011934 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011d82:	3718      	adds	r7, #24
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8011d88:	b480      	push	{r7}
 8011d8a:	b083      	sub	sp, #12
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011d92:	2300      	movs	r3, #0
      }
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f000 f847 	bl	8011e3c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 8011dae:	4603      	mov	r3, r0
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7fe fc78 	bl	80106b6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff fe2b 	bl	8011a36 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b084      	sub	sp, #16
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	60b9      	str	r1, [r7, #8]
 8011df4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011df6:	68b8      	ldr	r0, [r7, #8]
 8011df8:	f000 f82b 	bl	8011e52 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	605a      	str	r2, [r3, #4]
      { }
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d007      	beq.n	8011e32 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6818      	ldr	r0, [r3, #0]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	f000 f81b 	bl	8011e68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4618      	mov	r0, r3
 8011e48:	370c      	adds	r7, #12
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr

08011e52 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011e52:	b480      	push	{r7}
 8011e54:	b083      	sub	sp, #12
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	68b9      	ldr	r1, [r7, #8]
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f000 f804 	bl	8011e86 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011e7e:	bf00      	nop
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b084      	sub	sp, #16
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	60f8      	str	r0, [r7, #12]
 8011e8e:	60b9      	str	r1, [r7, #8]
 8011e90:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	011b      	lsls	r3, r3, #4
 8011e96:	4619      	mov	r1, r3
 8011e98:	68b8      	ldr	r0, [r7, #8]
 8011e9a:	f016 fbe0 	bl	802865e <_ZdlPvj>
      }
 8011e9e:	3710      	adds	r7, #16
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	4a09      	ldr	r2, [pc, #36]	@ (8011ed4 <_ZN6ModuleC1Ev+0x30>)
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8011ec4:	4804      	ldr	r0, [pc, #16]	@ (8011ed8 <_ZN6ModuleC1Ev+0x34>)
 8011ec6:	f017 faf5 	bl	80294b4 <puts>
}
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	0802b4f4 	.word	0x0802b4f4
 8011ed8:	0802a964 	.word	0x0802a964

08011edc <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	4a04      	ldr	r2, [pc, #16]	@ (8011ef8 <_ZN6ModuleD1Ev+0x1c>)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	601a      	str	r2, [r3, #0]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	0802b4f4 	.word	0x0802b4f4

08011efc <_ZN6ModuleD0Ev>:
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7ff ffe9 	bl	8011edc <_ZN6ModuleD1Ev>
 8011f0a:	2118      	movs	r1, #24
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f016 fba6 	bl	802865e <_ZdlPvj>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	3708      	adds	r7, #8
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
	++this->counter;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	691a      	ldr	r2, [r3, #16]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	db08      	blt.n	8011f4c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	3310      	adds	r3, #16
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	4798      	blx	r3
		this->counter = 0;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3308      	adds	r3, #8
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	4798      	blx	r3
}
 8011f58:	bf00      	nop
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	bf00      	nop
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	bf00      	nop
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	bf00      	nop
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <_ZN6Module9configureEv>:
void Module::configure(){}
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	bf00      	nop
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
	...

08011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b094      	sub	sp, #80	@ 0x50
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8011fd6:	4969      	ldr	r1, [pc, #420]	@ (801217c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b4>)
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ee f981 	bl	80002e0 <strcmp>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d116      	bne.n	8012012 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8011fe4:	4966      	ldr	r1, [pc, #408]	@ (8012180 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b8>)
 8011fe6:	6838      	ldr	r0, [r7, #0]
 8011fe8:	f7ee f97a 	bl	80002e0 <strcmp>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f040 80bc 	bne.w	801216c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return Stepgen::create(config, instance);
 8011ff4:	f107 0310 	add.w	r3, r7, #16
 8011ff8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7f5 fd17 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f107 0110 	add.w	r1, r7, #16
 8012008:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801200a:	4618      	mov	r0, r3
 801200c:	f001 fe54 	bl	8013cb8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8012010:	e0b0      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "Servo") == 0) {
 8012012:	495c      	ldr	r1, [pc, #368]	@ (8012184 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1bc>)
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ee f963 	bl	80002e0 <strcmp>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d157      	bne.n	80120d0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8012020:	4959      	ldr	r1, [pc, #356]	@ (8012188 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c0>)
 8012022:	6838      	ldr	r0, [r7, #0]
 8012024:	f7ee f95c 	bl	80002e0 <strcmp>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d10e      	bne.n	801204c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 801202e:	f107 0318 	add.w	r3, r7, #24
 8012032:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012036:	4618      	mov	r0, r3
 8012038:	f7f5 fcfa 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f107 0118 	add.w	r1, r7, #24
 8012042:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012044:	4618      	mov	r0, r3
 8012046:	f7fd f8e3 	bl	800f210 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 801204a:	e093      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 801204c:	494f      	ldr	r1, [pc, #316]	@ (801218c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c4>)
 801204e:	6838      	ldr	r0, [r7, #0]
 8012050:	f7ee f946 	bl	80002e0 <strcmp>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10e      	bne.n	8012078 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 801205a:	f107 0320 	add.w	r3, r7, #32
 801205e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012062:	4618      	mov	r0, r3
 8012064:	f7f5 fce4 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f107 0120 	add.w	r1, r7, #32
 801206e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012070:	4618      	mov	r0, r3
 8012072:	f000 f903 	bl	801227c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012076:	e07d      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 8012078:	4945      	ldr	r1, [pc, #276]	@ (8012190 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c8>)
 801207a:	6838      	ldr	r0, [r7, #0]
 801207c:	f7ee f930 	bl	80002e0 <strcmp>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d10e      	bne.n	80120a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 8012086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801208a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801208e:	4618      	mov	r0, r3
 8012090:	f7f5 fcce 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801209a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801209c:	4618      	mov	r0, r3
 801209e:	f7fe ffc9 	bl	8011034 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80120a2:	e067      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 80120a4:	493b      	ldr	r1, [pc, #236]	@ (8012194 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1cc>)
 80120a6:	6838      	ldr	r0, [r7, #0]
 80120a8:	f7ee f91a 	bl	80002e0 <strcmp>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d15c      	bne.n	801216c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return SigmaDelta::create(config, instance);
 80120b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80120b6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7f5 fcb8 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80120c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120c8:	4618      	mov	r0, r3
 80120ca:	f000 fe71 	bl	8012db0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80120ce:	e051      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "On load") == 0) {
 80120d0:	4931      	ldr	r1, [pc, #196]	@ (8012198 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d0>)
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f7ee f904 	bl	80002e0 <strcmp>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d141      	bne.n	8012162 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19a>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 80120de:	492f      	ldr	r1, [pc, #188]	@ (801219c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d4>)
 80120e0:	6838      	ldr	r0, [r7, #0]
 80120e2:	f7ee f8fd 	bl	80002e0 <strcmp>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10e      	bne.n	801210a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 80120ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80120f0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7f5 fc9b 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8012100:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012102:	4618      	mov	r0, r3
 8012104:	f003 f822 	bl	801514c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012108:	e034      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
   	    } else if (strcmp(_mtype, "TMC2209") == 0) {
 801210a:	4925      	ldr	r1, [pc, #148]	@ (80121a0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d8>)
 801210c:	6838      	ldr	r0, [r7, #0]
 801210e:	f7ee f8e7 	bl	80002e0 <strcmp>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10e      	bne.n	8012136 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    		return TMC2209::create(config, instance);
 8012118:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801211c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012120:	4618      	mov	r0, r3
 8012122:	f7f5 fc85 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801212c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801212e:	4618      	mov	r0, r3
 8012130:	f005 fe0c 	bl	8017d4c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012134:	e01e      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    	} else if (strcmp(_mtype, "TMC5160") == 0) {
 8012136:	491b      	ldr	r1, [pc, #108]	@ (80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1dc>)
 8012138:	6838      	ldr	r0, [r7, #0]
 801213a:	f7ee f8d1 	bl	80002e0 <strcmp>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d113      	bne.n	801216c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
    		return TMC5160::create(config, instance);
 8012144:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012148:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801214c:	4618      	mov	r0, r3
 801214e:	f7f5 fc6f 	bl	8007a30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012158:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801215a:	4618      	mov	r0, r3
 801215c:	f007 fa1c 	bl	8019598 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012160:	e008      	b.n	8012174 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8012162:	683a      	ldr	r2, [r7, #0]
 8012164:	6879      	ldr	r1, [r7, #4]
 8012166:	4810      	ldr	r0, [pc, #64]	@ (80121a8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1e0>)
 8012168:	f017 f934 	bl	80293d4 <iprintf>
    return nullptr;
 801216c:	2100      	movs	r1, #0
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f000 f84c 	bl	801220c <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	3750      	adds	r7, #80	@ 0x50
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	0802a9bc 	.word	0x0802a9bc
 8012180:	0802a9c4 	.word	0x0802a9c4
 8012184:	0802a9cc 	.word	0x0802a9cc
 8012188:	0802a9d4 	.word	0x0802a9d4
 801218c:	0802a9dc 	.word	0x0802a9dc
 8012190:	0802a9e8 	.word	0x0802a9e8
 8012194:	0802a9f4 	.word	0x0802a9f4
 8012198:	0802aa00 	.word	0x0802aa00
 801219c:	0802aa08 	.word	0x0802aa08
 80121a0:	0802aa10 	.word	0x0802aa10
 80121a4:	0802aa18 	.word	0x0802aa18
 80121a8:	0802aa20 	.word	0x0802aa20

080121ac <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 80121ac:	b598      	push	{r3, r4, r7, lr}
 80121ae:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 80121b0:	4b14      	ldr	r3, [pc, #80]	@ (8012204 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f3bf 8f5b 	dmb	ish
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	bf0c      	ite	eq
 80121c0:	2301      	moveq	r3, #1
 80121c2:	2300      	movne	r3, #0
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d017      	beq.n	80121fa <_ZN13ModuleFactory11getInstanceEv+0x4e>
 80121ca:	480e      	ldr	r0, [pc, #56]	@ (8012204 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80121cc:	f016 fa49 	bl	8028662 <__cxa_guard_acquire>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	bf14      	ite	ne
 80121d6:	2301      	movne	r3, #1
 80121d8:	2300      	moveq	r3, #0
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00c      	beq.n	80121fa <_ZN13ModuleFactory11getInstanceEv+0x4e>
 80121e0:	2001      	movs	r0, #1
 80121e2:	f016 fa4d 	bl	8028680 <_Znwj>
 80121e6:	4603      	mov	r3, r0
 80121e8:	461c      	mov	r4, r3
 80121ea:	4620      	mov	r0, r4
 80121ec:	f7ff fee0 	bl	8011fb0 <_ZN13ModuleFactoryC1Ev>
 80121f0:	4b05      	ldr	r3, [pc, #20]	@ (8012208 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 80121f2:	601c      	str	r4, [r3, #0]
 80121f4:	4803      	ldr	r0, [pc, #12]	@ (8012204 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80121f6:	f016 fa40 	bl	802867a <__cxa_guard_release>
    return instance;
 80121fa:	4b03      	ldr	r3, [pc, #12]	@ (8012208 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 80121fc:	681b      	ldr	r3, [r3, #0]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	bd98      	pop	{r3, r4, r7, pc}
 8012202:	bf00      	nop
 8012204:	24000414 	.word	0x24000414
 8012208:	24000410 	.word	0x24000410

0801220c <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f805 	bl	8012226 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	4618      	mov	r0, r3
 8012220:	3708      	adds	r7, #8
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8012226:	b580      	push	{r7, lr}
 8012228:	b082      	sub	sp, #8
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f000 f805 	bl	8012240 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	3304      	adds	r3, #4
 8012252:	4618      	mov	r0, r3
 8012254:	f7fb f810 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	4618      	mov	r0, r3
 801225c:	3708      	adds	r7, #8
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 8012262:	b480      	push	{r7}
 8012264:	b083      	sub	sp, #12
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	330c      	adds	r3, #12
 801226e:	4618      	mov	r0, r3
 8012270:	370c      	adds	r7, #12
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
	...

0801227c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 801227c:	b580      	push	{r7, lr}
 801227e:	b094      	sub	sp, #80	@ 0x50
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 8012288:	f107 0314 	add.w	r3, r7, #20
 801228c:	4a1f      	ldr	r2, [pc, #124]	@ (801230c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 801228e:	68b9      	ldr	r1, [r7, #8]
 8012290:	4618      	mov	r0, r3
 8012292:	f000 f886 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012296:	f107 0314 	add.w	r3, r7, #20
 801229a:	4618      	mov	r0, r3
 801229c:	f7f5 fbfc 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80122a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 80122a2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80122a4:	f017 f906 	bl	80294b4 <puts>

	const char* pin = config["Pin"];
 80122a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122ac:	4a18      	ldr	r2, [pc, #96]	@ (8012310 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 80122ae:	68b9      	ldr	r1, [r7, #8]
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fd f871 	bl	800f398 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80122b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f5 fbec 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80122c0:	4603      	mov	r3, r0
 80122c2:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	4619      	mov	r1, r3
 80122c8:	4812      	ldr	r0, [pc, #72]	@ (8012314 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 80122ca:	f017 f883 	bl	80293d4 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7ff ffc7 	bl	8012262 <_ZN6Remora8getResetEv>
 80122d4:	4603      	mov	r3, r0
 80122d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80122d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80122dc:	f107 0210 	add.w	r2, r7, #16
 80122e0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 f881 	bl	80123ec <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80122ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80122ee:	4619      	mov	r1, r3
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	f000 f8d9 	bl	80124a8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 80122f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80122fa:	4618      	mov	r0, r3
 80122fc:	f000 f8b2 	bl	8012464 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 8012300:	bf00      	nop
}
 8012302:	68f8      	ldr	r0, [r7, #12]
 8012304:	3750      	adds	r7, #80	@ 0x50
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	0802aa58 	.word	0x0802aa58
 8012310:	0802aa60 	.word	0x0802aa60
 8012314:	0802aa64 	.word	0x0802aa64

08012318 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 8012318:	b590      	push	{r4, r7, lr}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff fdbc 	bl	8011ea4 <_ZN6ModuleC1Ev>
 801232c:	4a0e      	ldr	r2, [pc, #56]	@ (8012368 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	68ba      	ldr	r2, [r7, #8]
 8012336:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	331c      	adds	r3, #28
 801233c:	6879      	ldr	r1, [r7, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f016 fca9 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012344:	2040      	movs	r0, #64	@ 0x40
 8012346:	f016 f99b 	bl	8028680 <_Znwj>
 801234a:	4603      	mov	r3, r0
 801234c:	461c      	mov	r4, r3
 801234e:	2200      	movs	r2, #0
 8012350:	6879      	ldr	r1, [r7, #4]
 8012352:	4620      	mov	r0, r4
 8012354:	f7f2 fbd8 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	635c      	str	r4, [r3, #52]	@ 0x34
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	bd90      	pop	{r4, r7, pc}
 8012366:	bf00      	nop
 8012368:	0802b534 	.word	0x0802b534

0801236c <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 801236c:	b590      	push	{r4, r7, lr}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	699c      	ldr	r4, [r3, #24]
 801237c:	4610      	mov	r0, r2
 801237e:	f7f2 fd57 	bl	8004e30 <_ZNK3Pin3getEv>
 8012382:	4603      	mov	r3, r0
 8012384:	7023      	strb	r3, [r4, #0]
}
 8012386:	bf00      	nop
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	bd90      	pop	{r4, r7, pc}

0801238e <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 801238e:	b480      	push	{r7}
 8012390:	b083      	sub	sp, #12
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
    return;
 8012396:	bf00      	nop
}
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr

080123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b08c      	sub	sp, #48	@ 0x30
 80123a6:	af02      	add	r7, sp, #8
 80123a8:	60f8      	str	r0, [r7, #12]
 80123aa:	60b9      	str	r1, [r7, #8]
 80123ac:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80123ae:	68ba      	ldr	r2, [r7, #8]
 80123b0:	f107 0314 	add.w	r3, r7, #20
 80123b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80123bc:	f107 031c 	add.w	r3, r7, #28
 80123c0:	6879      	ldr	r1, [r7, #4]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7f5 feaa 	bl	800811c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80123c8:	466a      	mov	r2, sp
 80123ca:	f107 0320 	add.w	r3, r7, #32
 80123ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	f107 0214 	add.w	r2, r7, #20
 80123dc:	ca06      	ldmia	r2, {r1, r2}
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f7f5 fcc9 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	3728      	adds	r7, #40	@ 0x28
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80123ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ee:	b08d      	sub	sp, #52	@ 0x34
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80123f8:	2038      	movs	r0, #56	@ 0x38
 80123fa:	f016 f941 	bl	8028680 <_Znwj>
 80123fe:	4603      	mov	r3, r0
 8012400:	461e      	mov	r6, r3
 8012402:	68b8      	ldr	r0, [r7, #8]
 8012404:	f000 f863 	bl	80124ce <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 8012408:	4603      	mov	r3, r0
 801240a:	681c      	ldr	r4, [r3, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7fd f91e 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012412:	4603      	mov	r3, r0
 8012414:	681d      	ldr	r5, [r3, #0]
 8012416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801241a:	4618      	mov	r0, r3
 801241c:	f016 f941 	bl	80286a2 <_ZNSaIcEC1Ev>
 8012420:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012424:	f107 0314 	add.w	r3, r7, #20
 8012428:	4629      	mov	r1, r5
 801242a:	4618      	mov	r0, r3
 801242c:	f7f5 faae 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012430:	f107 0314 	add.w	r3, r7, #20
 8012434:	461a      	mov	r2, r3
 8012436:	4621      	mov	r1, r4
 8012438:	4630      	mov	r0, r6
 801243a:	f7ff ff6d 	bl	8012318 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801243e:	4631      	mov	r1, r6
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f000 f85f 	bl	8012504 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8012446:	f107 0314 	add.w	r3, r7, #20
 801244a:	4618      	mov	r0, r3
 801244c:	f016 fa13 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012454:	4618      	mov	r0, r3
 8012456:	f016 f925 	bl	80286a4 <_ZNSaIcED1Ev>
 801245a:	bf00      	nop
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	3734      	adds	r7, #52	@ 0x34
 8012460:	46bd      	mov	sp, r7
 8012462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012464 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8012464:	b590      	push	{r4, r7, lr}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	4618      	mov	r0, r3
 8012470:	f000 f857 	bl	8012522 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012474:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00c      	beq.n	8012498 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 f85c 	bl	801253c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 8012484:	4604      	mov	r4, r0
 8012486:	68f8      	ldr	r0, [r7, #12]
 8012488:	f000 f865 	bl	8012556 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 801248c:	4603      	mov	r3, r0
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4619      	mov	r1, r3
 8012492:	4620      	mov	r0, r4
 8012494:	f000 f892 	bl	80125bc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2200      	movs	r2, #0
 801249c:	601a      	str	r2, [r3, #0]
      }
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd90      	pop	{r4, r7, pc}

080124a8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80124a8:	b590      	push	{r4, r7, lr}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80124b2:	687c      	ldr	r4, [r7, #4]
 80124b4:	6838      	ldr	r0, [r7, #0]
 80124b6:	f000 f892 	bl	80125de <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80124ba:	4603      	mov	r3, r0
 80124bc:	4619      	mov	r1, r3
 80124be:	4620      	mov	r0, r4
 80124c0:	f000 f898 	bl	80125f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd90      	pop	{r4, r7, pc}

080124ce <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80124ce:	b480      	push	{r7}
 80124d0:	b083      	sub	sp, #12
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	683a      	ldr	r2, [r7, #0]
 80124f2:	4611      	mov	r1, r2
 80124f4:	4618      	mov	r0, r3
 80124f6:	f000 f8b5 	bl	8012664 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6839      	ldr	r1, [r7, #0]
 8012512:	4618      	mov	r0, r3
 8012514:	f7ff ffe6 	bl	80124e4 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8012522:	b580      	push	{r7, lr}
 8012524:	b082      	sub	sp, #8
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4618      	mov	r0, r3
 801252e:	f000 f8ad 	bl	801268c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8012532:	4603      	mov	r3, r0
 8012534:	4618      	mov	r0, r3
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801253c:	b580      	push	{r7, lr}
 801253e:	b082      	sub	sp, #8
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	4618      	mov	r0, r3
 8012548:	f000 f8ad 	bl	80126a6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 801254c:	4603      	mov	r3, r0
 801254e:	4618      	mov	r0, r3
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr

0801256c <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	4a08      	ldr	r2, [pc, #32]	@ (8012598 <_ZN8ResetPinD1Ev+0x2c>)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	331c      	adds	r3, #28
 801257e:	4618      	mov	r0, r3
 8012580:	f016 f979 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f7ff fca8 	bl	8011edc <_ZN6ModuleD1Ev>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	0802b534 	.word	0x0802b534

0801259c <_ZN8ResetPinD0Ev>:
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff ffe1 	bl	801256c <_ZN8ResetPinD1Ev>
 80125aa:	2138      	movs	r1, #56	@ 0x38
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f016 f856 	bl	802865e <_ZdlPvj>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	4618      	mov	r0, r3
 80125b6:	3708      	adds	r7, #8
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d004      	beq.n	80125d6 <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	3204      	adds	r2, #4
 80125d0:	6812      	ldr	r2, [r2, #0]
 80125d2:	4618      	mov	r0, r3
 80125d4:	4790      	blx	r2
      }
 80125d6:	bf00      	nop
 80125d8:	3708      	adds	r7, #8
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4618      	mov	r0, r3
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	f000 f85e 	bl	80126c0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8012604:	4602      	mov	r2, r0
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	3304      	adds	r3, #4
 801260e:	4618      	mov	r0, r3
 8012610:	f7fa fe32 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8012614:	6838      	ldr	r0, [r7, #0]
 8012616:	f000 f853 	bl	80126c0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 801261a:	4603      	mov	r3, r0
 801261c:	4618      	mov	r0, r3
 801261e:	f000 f85c 	bl	80126da <_ZSt12__to_addressI8ResetPinEPT_S2_>
 8012622:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8012624:	6838      	ldr	r0, [r7, #0]
 8012626:	f7ff ffda 	bl	80125de <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801262a:	4602      	mov	r2, r0
 801262c:	f107 0308 	add.w	r3, r7, #8
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f000 f85c 	bl	80126f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	3304      	adds	r3, #4
 801263c:	f107 0208 	add.w	r2, r7, #8
 8012640:	4611      	mov	r1, r2
 8012642:	4618      	mov	r0, r3
 8012644:	f7fd fa09 	bl	800fa5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8012648:	f107 0308 	add.w	r3, r7, #8
 801264c:	4618      	mov	r0, r3
 801264e:	f7f9 fc16 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8012652:	68f9      	ldr	r1, [r7, #12]
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f000 f88d 	bl	8012774 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4618      	mov	r0, r3
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8012664:	b590      	push	{r4, r7, lr}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f000 f88a 	bl	801278a <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8012676:	683c      	ldr	r4, [r7, #0]
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f7ff ff52 	bl	8012522 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 801267e:	4603      	mov	r3, r0
 8012680:	601c      	str	r4, [r3, #0]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	bd90      	pop	{r4, r7, pc}

0801268c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4618      	mov	r0, r3
 8012698:	f000 f884 	bl	80127a4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801269c:	4603      	mov	r3, r0
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b082      	sub	sp, #8
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f000 f883 	bl	80127bc <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80126b6:	4603      	mov	r3, r0
 80126b8:	4618      	mov	r0, r3
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f000 f882 	bl	80127d4 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80126d0:	4603      	mov	r3, r0
 80126d2:	4618      	mov	r0, r3
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 80126da:	b480      	push	{r7}
 80126dc:	b083      	sub	sp, #12
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
      return __ptr;
 80126e2:	687b      	ldr	r3, [r7, #4]
    }
 80126e4:	4618      	mov	r0, r3
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2200      	movs	r2, #0
 80126fe:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8012700:	6838      	ldr	r0, [r7, #0]
 8012702:	f7ff ffdd 	bl	80126c0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	bf0c      	ite	eq
 801270c:	2301      	moveq	r3, #1
 801270e:	2300      	movne	r3, #0
 8012710:	b2db      	uxtb	r3, r3
 8012712:	2b00      	cmp	r3, #0
 8012714:	d128      	bne.n	8012768 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8012716:	f107 030c 	add.w	r3, r7, #12
 801271a:	4618      	mov	r0, r3
 801271c:	f000 f868 	bl	80127f0 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8012720:	f107 030c 	add.w	r3, r7, #12
 8012724:	2101      	movs	r1, #1
 8012726:	4618      	mov	r0, r3
 8012728:	f000 f87a 	bl	8012820 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 801272c:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801272e:	6838      	ldr	r0, [r7, #0]
 8012730:	f000 f885 	bl	801283e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 8012734:	4603      	mov	r3, r0
 8012736:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8012738:	6838      	ldr	r0, [r7, #0]
 801273a:	f7ff feff 	bl	801253c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 801273e:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012740:	4618      	mov	r0, r3
 8012742:	f000 f889 	bl	8012858 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012746:	4603      	mov	r3, r0
 8012748:	f107 0210 	add.w	r2, r7, #16
 801274c:	f107 000c 	add.w	r0, r7, #12
 8012750:	6979      	ldr	r1, [r7, #20]
 8012752:	f000 f88c 	bl	801286e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	697a      	ldr	r2, [r7, #20]
 801275a:	601a      	str	r2, [r3, #0]
	}
 801275c:	f107 030c 	add.w	r3, r7, #12
 8012760:	4618      	mov	r0, r3
 8012762:	f000 f851 	bl	8012808 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012766:	e000      	b.n	801276a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8012768:	bf00      	nop
	}
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	3718      	adds	r7, #24
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
	{ }
 801277e:	bf00      	nop
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801278a:	b580      	push	{r7, lr}
 801278c:	b082      	sub	sp, #8
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4618      	mov	r0, r3
 8012796:	f000 f882 	bl	801289e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4618      	mov	r0, r3
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f000 f886 	bl	80128be <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 80127b2:	4603      	mov	r3, r0
 80127b4:	4618      	mov	r0, r3
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f000 f887 	bl	80128d8 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80127ca:	4603      	mov	r3, r0
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f886 	bl	80128f0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80127e4:	4603      	mov	r3, r0
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 f886 	bl	801290a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4618      	mov	r0, r3
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f000 f885 	bl	8012920 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801282a:	2200      	movs	r2, #0
 801282c:	6839      	ldr	r1, [r7, #0]
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 f881 	bl	8012936 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8012834:	4603      	mov	r3, r0
 8012836:	4618      	mov	r0, r3
 8012838:	3708      	adds	r7, #8
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 801283e:	b580      	push	{r7, lr}
 8012840:	b082      	sub	sp, #8
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	f000 f89e 	bl	801298a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 801284e:	4603      	mov	r3, r0
 8012850:	4618      	mov	r0, r3
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801286e:	b590      	push	{r4, r7, lr}
 8012870:	b085      	sub	sp, #20
 8012872:	af00      	add	r7, sp, #0
 8012874:	60f8      	str	r0, [r7, #12]
 8012876:	60b9      	str	r1, [r7, #8]
 8012878:	607a      	str	r2, [r7, #4]
 801287a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f000 f899 	bl	80129b4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012882:	4604      	mov	r4, r0
 8012884:	6838      	ldr	r0, [r7, #0]
 8012886:	f7ff ffe7 	bl	8012858 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 801288a:	4603      	mov	r3, r0
 801288c:	4622      	mov	r2, r4
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 f89a 	bl	80129ca <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8012896:	bf00      	nop
 8012898:	3714      	adds	r7, #20
 801289a:	46bd      	mov	sp, r7
 801289c:	bd90      	pop	{r4, r7, pc}

0801289e <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801289e:	b580      	push	{r7, lr}
 80128a0:	b082      	sub	sp, #8
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f8ad 	bl	8012a06 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 f8b5 	bl	8012a1e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	4618      	mov	r0, r3
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80128be:	b580      	push	{r7, lr}
 80128c0:	b082      	sub	sp, #8
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f000 f8b6 	bl	8012a3a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 80128ce:	4603      	mov	r3, r0
 80128d0:	4618      	mov	r0, r3
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}

080128d8 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 f8b5 	bl	8012a50 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 80128e6:	4603      	mov	r3, r0
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 f8b4 	bl	8012a68 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012900:	4603      	mov	r3, r0
 8012902:	4618      	mov	r0, r3
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801290a:	b480      	push	{r7}
 801290c:	b083      	sub	sp, #12
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	370c      	adds	r7, #12
 801292e:	46bd      	mov	sp, r7
 8012930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012934:	4770      	bx	lr

08012936 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012936:	b580      	push	{r7, lr}
 8012938:	b084      	sub	sp, #16
 801293a:	af00      	add	r7, sp, #0
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012942:	68f8      	ldr	r0, [r7, #12]
 8012944:	f000 f89c 	bl	8012a80 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8012948:	4602      	mov	r2, r0
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	4293      	cmp	r3, r2
 801294e:	bf8c      	ite	hi
 8012950:	2301      	movhi	r3, #1
 8012952:	2300      	movls	r3, #0
 8012954:	b2db      	uxtb	r3, r3
 8012956:	2b00      	cmp	r3, #0
 8012958:	bf14      	ite	ne
 801295a:	2301      	movne	r3, #1
 801295c:	2300      	moveq	r3, #0
 801295e:	b2db      	uxtb	r3, r3
 8012960:	2b00      	cmp	r3, #0
 8012962:	d007      	beq.n	8012974 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801296a:	d301      	bcc.n	8012970 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801296c:	f015 fe9e 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8012970:	f015 fe99 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	011b      	lsls	r3, r3, #4
 8012978:	4618      	mov	r0, r3
 801297a:	f015 fe81 	bl	8028680 <_Znwj>
 801297e:	4603      	mov	r3, r0
 8012980:	bf00      	nop
      }
 8012982:	4618      	mov	r0, r3
 8012984:	3710      	adds	r7, #16
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801298a:	b580      	push	{r7, lr}
 801298c:	b084      	sub	sp, #16
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff fdc5 	bl	8012522 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012998:	4603      	mov	r3, r0
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff fdbf 	bl	8012522 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2200      	movs	r2, #0
 80129a8:	601a      	str	r2, [r3, #0]
	return __p;
 80129aa:	68fb      	ldr	r3, [r7, #12]
      }
 80129ac:	4618      	mov	r0, r3
 80129ae:	3710      	adds	r7, #16
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80129ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129cc:	b085      	sub	sp, #20
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	60f8      	str	r0, [r7, #12]
 80129d2:	60b9      	str	r1, [r7, #8]
 80129d4:	607a      	str	r2, [r7, #4]
 80129d6:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	4619      	mov	r1, r3
 80129dc:	2010      	movs	r0, #16
 80129de:	f7f8 f817 	bl	800aa10 <_ZnwjPv>
 80129e2:	4605      	mov	r5, r0
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f7ff ffe5 	bl	80129b4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80129ea:	4603      	mov	r3, r0
 80129ec:	681c      	ldr	r4, [r3, #0]
 80129ee:	6838      	ldr	r0, [r7, #0]
 80129f0:	f7ff ff32 	bl	8012858 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80129f4:	4632      	mov	r2, r6
 80129f6:	4621      	mov	r1, r4
 80129f8:	4628      	mov	r0, r5
 80129fa:	f000 f84d 	bl	8012a98 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 80129fe:	bf00      	nop
 8012a00:	3714      	adds	r7, #20
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a06 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f864 	bl	8012adc <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	4618      	mov	r0, r3
 8012a18:	3708      	adds	r7, #8
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 8012a1e:	b480      	push	{r7}
 8012a20:	b083      	sub	sp, #12
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	370c      	adds	r7, #12
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr

08012a3a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 f84a 	bl	8012af2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	4618      	mov	r0, r3
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 f849 	bl	8012b08 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8012a76:	4603      	mov	r3, r0
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012a80:	b480      	push	{r7}
 8012a82:	b083      	sub	sp, #12
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012a88:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr

08012a98 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8012a98:	b5b0      	push	{r4, r5, r7, lr}
 8012a9a:	b086      	sub	sp, #24
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fb fc5a 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012aac:	4a0a      	ldr	r2, [pc, #40]	@ (8012ad8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	601a      	str	r2, [r3, #0]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f103 040c 	add.w	r4, r3, #12
 8012ab8:	1d3b      	adds	r3, r7, #4
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 f831 	bl	8012b22 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012ac0:	f107 0314 	add.w	r3, r7, #20
 8012ac4:	462a      	mov	r2, r5
 8012ac6:	68b9      	ldr	r1, [r7, #8]
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 f835 	bl	8012b38 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3718      	adds	r7, #24
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ad8:	0802b518 	.word	0x0802b518

08012adc <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	370c      	adds	r7, #12
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr

08012af2 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012af2:	b480      	push	{r7}
 8012af4:	b083      	sub	sp, #12
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	6078      	str	r0, [r7, #4]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f000 f82c 	bl	8012b70 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3708      	adds	r7, #8
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012b22:	b480      	push	{r7}
 8012b24:	b083      	sub	sp, #12
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	713a      	strb	r2, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8012b46:	1d3b      	adds	r3, r7, #4
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7ff ffea 	bl	8012b22 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	4619      	mov	r1, r3
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 f817 	bl	8012b86 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 8012b58:	6839      	ldr	r1, [r7, #0]
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7fd fcdc 	bl	8010518 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	68ba      	ldr	r2, [r7, #8]
 8012b64:	601a      	str	r2, [r3, #0]
	{ }
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3710      	adds	r7, #16
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b84:	4770      	bx	lr

08012b86 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
 8012b8e:	6039      	str	r1, [r7, #0]
 8012b90:	6838      	ldr	r0, [r7, #0]
 8012b92:	f7ff ffc6 	bl	8012b22 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	4a05      	ldr	r2, [pc, #20]	@ (8012bc0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	601a      	str	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f9 fd97 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	0802b518 	.word	0x0802b518

08012bc4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff ffe7 	bl	8012ba0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012bd2:	2110      	movs	r1, #16
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f015 fd42 	bl	802865e <_ZdlPvj>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	330c      	adds	r3, #12
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 f83f 	bl	8012c74 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	68db      	ldr	r3, [r3, #12]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4610      	mov	r0, r2
 8012c00:	f7ff fcdc 	bl	80125bc <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 8012c04:	bf00      	nop
 8012c06:	3708      	adds	r7, #8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	330c      	adds	r3, #12
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f000 f837 	bl	8012c8c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	f107 0314 	add.w	r3, r7, #20
 8012c24:	4611      	mov	r1, r2
 8012c26:	4618      	mov	r0, r3
 8012c28:	f000 f83c 	bl	8012ca4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8012c2c:	f107 0114 	add.w	r1, r7, #20
 8012c30:	f107 030c 	add.w	r3, r7, #12
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f000 f841 	bl	8012cbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff ffaf 	bl	8012ba0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012c42:	f107 030c 	add.w	r3, r7, #12
 8012c46:	4618      	mov	r0, r3
 8012c48:	f000 f84d 	bl	8012ce6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012c4c:	f107 0314 	add.w	r3, r7, #20
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7ff fdd9 	bl	8012808 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012c56:	3718      	adds	r7, #24
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
        return nullptr;
 8012c66:	2300      	movs	r3, #0
      }
 8012c68:	4618      	mov	r0, r3
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 f847 	bl	8012d10 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 8012c82:	4603      	mov	r3, r0
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7fd fd0e 	bl	80106b6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6039      	str	r1, [r7, #0]
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7ff fe2b 	bl	801290a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	60f8      	str	r0, [r7, #12]
 8012cc6:	60b9      	str	r1, [r7, #8]
 8012cc8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8012cca:	68b8      	ldr	r0, [r7, #8]
 8012ccc:	f000 f82b 	bl	8012d26 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	605a      	str	r2, [r3, #4]
      { }
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b082      	sub	sp, #8
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d007      	beq.n	8012d06 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	4619      	mov	r1, r3
 8012d02:	f000 f81b 	bl	8012d3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	370c      	adds	r7, #12
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr

08012d26 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012d26:	b480      	push	{r7}
 8012d28:	b083      	sub	sp, #12
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4618      	mov	r0, r3
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr

08012d3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	68b9      	ldr	r1, [r7, #8]
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f000 f804 	bl	8012d5a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8012d52:	bf00      	nop
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b084      	sub	sp, #16
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	60f8      	str	r0, [r7, #12]
 8012d62:	60b9      	str	r1, [r7, #8]
 8012d64:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	011b      	lsls	r3, r3, #4
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	68b8      	ldr	r0, [r7, #8]
 8012d6e:	f015 fc76 	bl	802865e <_ZdlPvj>
      }
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	3304      	adds	r3, #4
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f9 f87a 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff ffea 	bl	8012d78 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	4618      	mov	r0, r3
 8012da8:	3708      	adds	r7, #8
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
	...

08012db0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 8012db0:	b590      	push	{r4, r7, lr}
 8012db2:	b0b1      	sub	sp, #196	@ 0xc4
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 8012dbc:	f107 0320 	add.w	r3, r7, #32
 8012dc0:	4a55      	ldr	r2, [pc, #340]	@ (8012f18 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8012dc2:	68b9      	ldr	r1, [r7, #8]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff faec 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012dca:	f107 0320 	add.w	r3, r7, #32
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7f4 fe62 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012dd4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 8012dd8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8012ddc:	f016 fb6a 	bl	80294b4 <puts>

    int spIndex = config["SP[i]"];
 8012de0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012de4:	4a4d      	ldr	r2, [pc, #308]	@ (8012f1c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 f9bb 	bl	8013164 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012dee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fc faf5 	bl	800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012df8:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 8012dfc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e00:	4a47      	ldr	r2, [pc, #284]	@ (8012f20 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8012e02:	68b9      	ldr	r1, [r7, #8]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f4 fe22 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e0a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7f4 fe42 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012e14:	4603      	mov	r3, r0
 8012e16:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7fe f8fd 	bl	8011018 <_ZN6Remora9getRxDataEv>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e24:	3308      	adds	r3, #8
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	3304      	adds	r3, #4
 8012e2c:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012e34:	4619      	mov	r1, r3
 8012e36:	483b      	ldr	r0, [pc, #236]	@ (8012f24 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8012e38:	f016 facc 	bl	80293d4 <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 8012e3c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012e40:	4a39      	ldr	r2, [pc, #228]	@ (8012f28 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012e42:	68b9      	ldr	r1, [r7, #8]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f4 fe02 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8012e5a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012e5e:	f7f5 fe9c 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8012e62:	4604      	mov	r4, r0
 8012e64:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012e68:	f7f5 fd25 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012e72:	4621      	mov	r1, r4
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7f2 fdc0 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8012e7a:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8012e7c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012e80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e84:	f000 f9f4 	bl	8013270 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	bf00      	nop
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d028      	beq.n	8012ee2 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 8012e90:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012e94:	4a24      	ldr	r2, [pc, #144]	@ (8012f28 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012e96:	68b9      	ldr	r1, [r7, #8]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7f4 fdd8 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e9e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fc fa9d 	bl	800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	4619      	mov	r1, r3
 8012eb0:	481e      	ldr	r0, [pc, #120]	@ (8012f2c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 8012eb2:	f016 fa8f 	bl	80293d4 <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 8012eb6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8012eba:	f107 0314 	add.w	r3, r7, #20
 8012ebe:	f107 0218 	add.w	r2, r7, #24
 8012ec2:	f107 011c 	add.w	r1, r7, #28
 8012ec6:	f000 f972 	bl	80131ae <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 8012eca:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012ece:	4619      	mov	r1, r3
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f000 f98d 	bl	80131f0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012ed6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7ff ff5a 	bl	8012d94 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8012ee0:	e016      	b.n	8012f10 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8012ee2:	4813      	ldr	r0, [pc, #76]	@ (8012f30 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8012ee4:	f016 fae6 	bl	80294b4 <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8012ee8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012eec:	f107 0218 	add.w	r2, r7, #24
 8012ef0:	f107 011c 	add.w	r1, r7, #28
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 f98e 	bl	8013216 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 8012efa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012efe:	4619      	mov	r1, r3
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f000 f975 	bl	80131f0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012f06:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ff42 	bl	8012d94 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8012f10:	68f8      	ldr	r0, [r7, #12]
 8012f12:	37c4      	adds	r7, #196	@ 0xc4
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd90      	pop	{r4, r7, pc}
 8012f18:	0802aab4 	.word	0x0802aab4
 8012f1c:	0802aabc 	.word	0x0802aabc
 8012f20:	0802aac4 	.word	0x0802aac4
 8012f24:	0802aacc 	.word	0x0802aacc
 8012f28:	0802ab00 	.word	0x0802ab00
 8012f2c:	0802ab08 	.word	0x0802ab08
 8012f30:	0802ab1c 	.word	0x0802ab1c

08012f34 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8012f34:	b590      	push	{r4, r7, lr}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe ffae 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8012f48:	4a14      	ldr	r2, [pc, #80]	@ (8012f9c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	3318      	adds	r3, #24
 8012f52:	68b9      	ldr	r1, [r7, #8]
 8012f54:	4618      	mov	r0, r3
 8012f56:	f015 fe9e 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	22ff      	movs	r2, #255	@ 0xff
 8012f5e:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2200      	movs	r2, #0
 8012f64:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012f74:	2040      	movs	r0, #64	@ 0x40
 8012f76:	f015 fb83 	bl	8028680 <_Znwj>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	461c      	mov	r4, r3
 8012f7e:	2201      	movs	r2, #1
 8012f80:	68b9      	ldr	r1, [r7, #8]
 8012f82:	4620      	mov	r0, r4
 8012f84:	f7f1 fdc0 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	645a      	str	r2, [r3, #68]	@ 0x44
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	4618      	mov	r0, r3
 8012f96:	3714      	adds	r7, #20
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd90      	pop	{r4, r7, pc}
 8012f9c:	0802b574 	.word	0x0802b574

08012fa0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 8012fa0:	b590      	push	{r4, r7, lr}
 8012fa2:	b085      	sub	sp, #20
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]
 8012fac:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fe ff77 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8012fb6:	4a19      	ldr	r2, [pc, #100]	@ (801301c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	3318      	adds	r3, #24
 8012fc0:	68b9      	ldr	r1, [r7, #8]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f015 fe67 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	db04      	blt.n	8012fd8 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2bff      	cmp	r3, #255	@ 0xff
 8012fd2:	bfa8      	it	ge
 8012fd4:	23ff      	movge	r3, #255	@ 0xff
 8012fd6:	e000      	b.n	8012fda <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 8012fd8:	2300      	movs	r3, #0
 8012fda:	68fa      	ldr	r2, [r7, #12]
 8012fdc:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012ff2:	2040      	movs	r0, #64	@ 0x40
 8012ff4:	f015 fb44 	bl	8028680 <_Znwj>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	461c      	mov	r4, r3
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	68b9      	ldr	r1, [r7, #8]
 8013000:	4620      	mov	r0, r4
 8013002:	f7f1 fd81 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	645a      	str	r2, [r3, #68]	@ 0x44
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	4618      	mov	r0, r3
 8013014:	3714      	adds	r7, #20
 8013016:	46bd      	mov	sp, r7
 8013018:	bd90      	pop	{r4, r7, pc}
 801301a:	bf00      	nop
 801301c:	0802b574 	.word	0x0802b574

08013020 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8013020:	b580      	push	{r7, lr}
 8013022:	b084      	sub	sp, #16
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8013030:	edd7 7a03 	vldr	s15, [r7, #12]
 8013034:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801314c <_ZN10SigmaDelta6updateEv+0x12c>
 8013038:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013040:	ee07 3a90 	vmov	s15, r3
 8013044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013048:	ee67 7a27 	vmul.f32	s15, s14, s15
 801304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013050:	ee17 3a90 	vmov	r3, s15
 8013054:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	429a      	cmp	r2, r3
 801305e:	d00f      	beq.n	8013080 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	db09      	blt.n	801307a <_ZN10SigmaDelta6updateEv+0x5a>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	429a      	cmp	r2, r3
 801306e:	dd02      	ble.n	8013076 <_ZN10SigmaDelta6updateEv+0x56>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013074:	e002      	b.n	801307c <_ZN10SigmaDelta6updateEv+0x5c>
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	e000      	b.n	801307c <_ZN10SigmaDelta6updateEv+0x5c>
 801307a:	2300      	movs	r3, #0
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013084:	2b00      	cmp	r3, #0
 8013086:	dc06      	bgt.n	8013096 <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801308c:	2100      	movs	r1, #0
 801308e:	4618      	mov	r0, r3
 8013090:	f7f1 fee4 	bl	8004e5c <_ZN3Pin3setEb>
        return;
 8013094:	e057      	b.n	8013146 <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801309e:	429a      	cmp	r2, r3
 80130a0:	db06      	blt.n	80130b0 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130a6:	2101      	movs	r1, #1
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7f1 fed7 	bl	8004e5c <_ZN3Pin3setEb>
        return;
 80130ae:	e04a      	b.n	8013146 <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130b8:	425b      	negs	r3, r3
 80130ba:	429a      	cmp	r2, r3
 80130bc:	da03      	bge.n	80130c6 <_ZN10SigmaDelta6updateEv+0xa6>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130c2:	425b      	negs	r3, r3
 80130c4:	e007      	b.n	80130d6 <_ZN10SigmaDelta6updateEv+0xb6>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4293      	cmp	r3, r2
 80130d2:	bfa8      	it	ge
 80130d4:	4613      	movge	r3, r2
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80130e0:	f083 0301 	eor.w	r3, r3, #1
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d012      	beq.n	8013110 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130f2:	441a      	add	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013100:	105b      	asrs	r3, r3, #1
 8013102:	429a      	cmp	r2, r3
 8013104:	db16      	blt.n	8013134 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2201      	movs	r2, #1
 801310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801310e:	e011      	b.n	8013134 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801311c:	1acb      	subs	r3, r1, r3
 801311e:	1ad2      	subs	r2, r2, r3
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013128:	2b00      	cmp	r3, #0
 801312a:	dc03      	bgt.n	8013134 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801313e:	4619      	mov	r1, r3
 8013140:	4610      	mov	r0, r2
 8013142:	f7f1 fe8b 	bl	8004e5c <_ZN3Pin3setEb>
}
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	42c80000 	.word	0x42c80000

08013150 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	bf00      	nop
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013162:	4770      	bx	lr

08013164 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013164:	b580      	push	{r7, lr}
 8013166:	b08c      	sub	sp, #48	@ 0x30
 8013168:	af02      	add	r7, sp, #8
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	f107 0314 	add.w	r3, r7, #20
 8013176:	e892 0003 	ldmia.w	r2, {r0, r1}
 801317a:	e883 0003 	stmia.w	r3, {r0, r1}
 801317e:	f107 031c 	add.w	r3, r7, #28
 8013182:	6879      	ldr	r1, [r7, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	f000 f860 	bl	801324a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801318a:	466a      	mov	r2, sp
 801318c:	f107 0320 	add.w	r3, r7, #32
 8013190:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013194:	e882 0003 	stmia.w	r2, {r0, r1}
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	f107 0214 	add.w	r2, r7, #20
 801319e:	ca06      	ldmia	r2, {r1, r2}
 80131a0:	68f8      	ldr	r0, [r7, #12]
 80131a2:	f7f4 fde8 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	3728      	adds	r7, #40	@ 0x28
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80131ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131b0:	b089      	sub	sp, #36	@ 0x24
 80131b2:	af02      	add	r7, sp, #8
 80131b4:	60f8      	str	r0, [r7, #12]
 80131b6:	60b9      	str	r1, [r7, #8]
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80131bc:	f107 0314 	add.w	r3, r7, #20
 80131c0:	461e      	mov	r6, r3
 80131c2:	68b8      	ldr	r0, [r7, #8]
 80131c4:	f7fc fa43 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80131c8:	4604      	mov	r4, r0
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 f871 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80131d0:	4605      	mov	r5, r0
 80131d2:	6838      	ldr	r0, [r7, #0]
 80131d4:	f7fc fa46 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80131d8:	4603      	mov	r3, r0
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	462b      	mov	r3, r5
 80131de:	4622      	mov	r2, r4
 80131e0:	4631      	mov	r1, r6
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f000 f870 	bl	80132c8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80131e8:	68f8      	ldr	r0, [r7, #12]
 80131ea:	371c      	adds	r7, #28
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131f0 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80131f0:	b590      	push	{r4, r7, lr}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80131fa:	687c      	ldr	r4, [r7, #4]
 80131fc:	6838      	ldr	r0, [r7, #0]
 80131fe:	f000 f883 	bl	8013308 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 8013202:	4603      	mov	r3, r0
 8013204:	4619      	mov	r1, r3
 8013206:	4620      	mov	r0, r4
 8013208:	f000 f889 	bl	801331e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4618      	mov	r0, r3
 8013210:	370c      	adds	r7, #12
 8013212:	46bd      	mov	sp, r7
 8013214:	bd90      	pop	{r4, r7, pc}

08013216 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8013216:	b5b0      	push	{r4, r5, r7, lr}
 8013218:	b086      	sub	sp, #24
 801321a:	af00      	add	r7, sp, #0
 801321c:	60f8      	str	r0, [r7, #12]
 801321e:	60b9      	str	r1, [r7, #8]
 8013220:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8013222:	f107 0314 	add.w	r3, r7, #20
 8013226:	461d      	mov	r5, r3
 8013228:	68b8      	ldr	r0, [r7, #8]
 801322a:	f7fc fa10 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801322e:	4604      	mov	r4, r0
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 f83e 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013236:	4603      	mov	r3, r0
 8013238:	4622      	mov	r2, r4
 801323a:	4629      	mov	r1, r5
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f000 f88c 	bl	801335a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	3718      	adds	r7, #24
 8013246:	46bd      	mov	sp, r7
 8013248:	bdb0      	pop	{r4, r5, r7, pc}

0801324a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801324a:	b580      	push	{r7, lr}
 801324c:	b082      	sub	sp, #8
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
 8013252:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8013254:	6838      	ldr	r0, [r7, #0]
 8013256:	f000 f89a 	bl	801338e <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801325a:	4602      	mov	r2, r0
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	4611      	mov	r1, r2
 8013260:	4618      	mov	r0, r3
 8013262:	f000 f89f 	bl	80133a4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 8013266:	bf00      	nop
}
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	463b      	mov	r3, r7
 8013278:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 801327c:	463b      	mov	r3, r7
 801327e:	4618      	mov	r0, r3
 8013280:	f7f4 f93a 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8013284:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8013286:	463b      	mov	r3, r7
 8013288:	4618      	mov	r0, r3
 801328a:	f7f4 f941 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 801328e:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d008      	beq.n	80132a8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 8013296:	68b9      	ldr	r1, [r7, #8]
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	f000 f893 	bl	80133c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d001      	beq.n	80132a8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80132a4:	2301      	movs	r3, #1
 80132a6:	e000      	b.n	80132aa <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 80132a8:	2300      	movs	r3, #0
  }
 80132aa:	4618      	mov	r0, r3
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4618      	mov	r0, r3
 80132be:	370c      	adds	r7, #12
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80132c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ca:	b087      	sub	sp, #28
 80132cc:	af02      	add	r7, sp, #8
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80132d6:	68fc      	ldr	r4, [r7, #12]
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7fc f9b8 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80132de:	4605      	mov	r5, r0
 80132e0:	6838      	ldr	r0, [r7, #0]
 80132e2:	f7ff ffe6 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80132e6:	4606      	mov	r6, r0
 80132e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132ea:	f7fc f9bb 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80132ee:	4603      	mov	r3, r0
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4633      	mov	r3, r6
 80132f4:	462a      	mov	r2, r5
 80132f6:	68b9      	ldr	r1, [r7, #8]
 80132f8:	4620      	mov	r0, r4
 80132fa:	f000 f8c1 	bl	8013480 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	4618      	mov	r0, r3
 8013302:	3714      	adds	r7, #20
 8013304:	46bd      	mov	sp, r7
 8013306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013308 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4618      	mov	r0, r3
 8013314:	370c      	adds	r7, #12
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr

0801331e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801331e:	b580      	push	{r7, lr}
 8013320:	b082      	sub	sp, #8
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
 8013326:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	601a      	str	r2, [r3, #0]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	3304      	adds	r3, #4
 8013334:	4618      	mov	r0, r3
 8013336:	f7f9 ff9f 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	1d1a      	adds	r2, r3, #4
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	3304      	adds	r3, #4
 8013342:	4619      	mov	r1, r3
 8013344:	4610      	mov	r0, r2
 8013346:	f7fa fb56 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2200      	movs	r2, #0
 801334e:	601a      	str	r2, [r3, #0]
	}
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	4618      	mov	r0, r3
 8013354:	3708      	adds	r7, #8
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801335a:	b5b0      	push	{r4, r5, r7, lr}
 801335c:	b084      	sub	sp, #16
 801335e:	af00      	add	r7, sp, #0
 8013360:	60f8      	str	r0, [r7, #12]
 8013362:	60b9      	str	r1, [r7, #8]
 8013364:	607a      	str	r2, [r7, #4]
 8013366:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8013368:	68fc      	ldr	r4, [r7, #12]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f7fc f96f 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013370:	4605      	mov	r5, r0
 8013372:	6838      	ldr	r0, [r7, #0]
 8013374:	f7ff ff9d 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013378:	4603      	mov	r3, r0
 801337a:	462a      	mov	r2, r5
 801337c:	68b9      	ldr	r1, [r7, #8]
 801337e:	4620      	mov	r0, r4
 8013380:	f000 f8ac 	bl	80134dc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	4618      	mov	r0, r3
 8013388:	3710      	adds	r7, #16
 801338a:	46bd      	mov	sp, r7
 801338c:	bdb0      	pop	{r4, r5, r7, pc}

0801338e <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801338e:	b480      	push	{r7}
 8013390:	b083      	sub	sp, #12
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8013396:	687b      	ldr	r3, [r7, #4]
}
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80133ae:	2301      	movs	r3, #1
 80133b0:	2205      	movs	r2, #5
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7f1 ff59 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	3708      	adds	r7, #8
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
	...

080133c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80133ce:	6839      	ldr	r1, [r7, #0]
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f7f3 f8a7 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80133d6:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	791b      	ldrb	r3, [r3, #4]
 80133dc:	3b0a      	subs	r3, #10
 80133de:	2b12      	cmp	r3, #18
 80133e0:	d848      	bhi.n	8013474 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 80133e2:	a201      	add	r2, pc, #4	@ (adr r2, 80133e8 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 80133e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133e8:	08013435 	.word	0x08013435
 80133ec:	08013475 	.word	0x08013475
 80133f0:	08013443 	.word	0x08013443
 80133f4:	08013475 	.word	0x08013475
 80133f8:	08013475 	.word	0x08013475
 80133fc:	08013475 	.word	0x08013475
 8013400:	08013475 	.word	0x08013475
 8013404:	08013475 	.word	0x08013475
 8013408:	08013475 	.word	0x08013475
 801340c:	08013475 	.word	0x08013475
 8013410:	08013475 	.word	0x08013475
 8013414:	08013475 	.word	0x08013475
 8013418:	08013475 	.word	0x08013475
 801341c:	08013475 	.word	0x08013475
 8013420:	08013475 	.word	0x08013475
 8013424:	08013475 	.word	0x08013475
 8013428:	08013451 	.word	0x08013451
 801342c:	08013475 	.word	0x08013475
 8013430:	08013463 	.word	0x08013463
        return canConvertNumber<T>(content_.asUint32);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	4618      	mov	r0, r3
 801343a:	f7fc fe3c 	bl	80100b6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801343e:	4603      	mov	r3, r0
 8013440:	e019      	b.n	8013476 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4618      	mov	r0, r3
 8013448:	f7fc fe47 	bl	80100da <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 801344c:	4603      	mov	r3, r0
 801344e:	e012      	b.n	8013476 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013456:	4610      	mov	r0, r2
 8013458:	4619      	mov	r1, r3
 801345a:	f7fc fe49 	bl	80100f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801345e:	4603      	mov	r3, r0
 8013460:	e009      	b.n	8013476 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013468:	4610      	mov	r0, r2
 801346a:	4619      	mov	r1, r3
 801346c:	f7fc fe58 	bl	8010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8013470:	4603      	mov	r3, r0
 8013472:	e000      	b.n	8013476 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8013474:	2300      	movs	r3, #0
  }
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop

08013480 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8013480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013484:	b086      	sub	sp, #24
 8013486:	af02      	add	r7, sp, #8
 8013488:	60f8      	str	r0, [r7, #12]
 801348a:	60b9      	str	r1, [r7, #8]
 801348c:	607a      	str	r2, [r7, #4]
 801348e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	1d1c      	adds	r4, r3, #4
 801349a:	68fd      	ldr	r5, [r7, #12]
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7fc f8d6 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80134a2:	4680      	mov	r8, r0
 80134a4:	6838      	ldr	r0, [r7, #0]
 80134a6:	f7ff ff04 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80134aa:	4606      	mov	r6, r0
 80134ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134ae:	f7fc f8d9 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80134b2:	4603      	mov	r3, r0
 80134b4:	9301      	str	r3, [sp, #4]
 80134b6:	9600      	str	r6, [sp, #0]
 80134b8:	4643      	mov	r3, r8
 80134ba:	68ba      	ldr	r2, [r7, #8]
 80134bc:	4629      	mov	r1, r5
 80134be:	4620      	mov	r0, r4
 80134c0:	f000 f833 	bl	801352a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4619      	mov	r1, r3
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f000 f883 	bl	80135d6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	4618      	mov	r0, r3
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134dc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80134dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134de:	b087      	sub	sp, #28
 80134e0:	af02      	add	r7, sp, #8
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	1d1c      	adds	r4, r3, #4
 80134f4:	68fd      	ldr	r5, [r7, #12]
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7fc f8a9 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80134fc:	4606      	mov	r6, r0
 80134fe:	6838      	ldr	r0, [r7, #0]
 8013500:	f7ff fed7 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013504:	4603      	mov	r3, r0
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	4633      	mov	r3, r6
 801350a:	68ba      	ldr	r2, [r7, #8]
 801350c:	4629      	mov	r1, r5
 801350e:	4620      	mov	r0, r4
 8013510:	f000 f86c 	bl	80135ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4619      	mov	r1, r3
 801351a:	68f8      	ldr	r0, [r7, #12]
 801351c:	f000 f85b 	bl	80135d6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	4618      	mov	r0, r3
 8013524:	3714      	adds	r7, #20
 8013526:	46bd      	mov	sp, r7
 8013528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801352a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801352e:	b08c      	sub	sp, #48	@ 0x30
 8013530:	af02      	add	r7, sp, #8
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	f107 031c 	add.w	r3, r7, #28
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	f000 f8a0 	bl	8013688 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8013548:	f107 0314 	add.w	r3, r7, #20
 801354c:	f107 021c 	add.w	r2, r7, #28
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f000 f8b1 	bl	80136ba <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8013558:	f107 0314 	add.w	r3, r7, #20
 801355c:	4618      	mov	r0, r3
 801355e:	f000 f8d4 	bl	801370a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013562:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013566:	4619      	mov	r1, r3
 8013568:	2054      	movs	r0, #84	@ 0x54
 801356a:	f7f7 fa51 	bl	800aa10 <_ZnwjPv>
 801356e:	4604      	mov	r4, r0
 8013570:	6838      	ldr	r0, [r7, #0]
 8013572:	f7fc f86c 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013576:	4605      	mov	r5, r0
 8013578:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801357a:	f7ff fe9a 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801357e:	4606      	mov	r6, r0
 8013580:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013582:	f7fc f86f 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013586:	4603      	mov	r3, r0
 8013588:	9300      	str	r3, [sp, #0]
 801358a:	4633      	mov	r3, r6
 801358c:	462a      	mov	r2, r5
 801358e:	4641      	mov	r1, r8
 8013590:	4620      	mov	r0, r4
 8013592:	f000 f8c9 	bl	8013728 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 8013596:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8013598:	f107 0314 	add.w	r3, r7, #20
 801359c:	2100      	movs	r1, #0
 801359e:	4618      	mov	r0, r3
 80135a0:	f000 f8f6 	bl	8013790 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6a3a      	ldr	r2, [r7, #32]
 80135a8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80135aa:	6a38      	ldr	r0, [r7, #32]
 80135ac:	f000 f8ff 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80135b0:	4602      	mov	r2, r0
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	601a      	str	r2, [r3, #0]
	}
 80135b6:	f107 0314 	add.w	r3, r7, #20
 80135ba:	4618      	mov	r0, r3
 80135bc:	f000 f890 	bl	80136e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80135c0:	f107 031c 	add.w	r3, r7, #28
 80135c4:	4618      	mov	r0, r3
 80135c6:	f000 f86c 	bl	80136a2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	4618      	mov	r0, r3
 80135ce:	3728      	adds	r7, #40	@ 0x28
 80135d0:	46bd      	mov	sp, r7
 80135d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135d6 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80135d6:	b480      	push	{r7}
 80135d8:	b083      	sub	sp, #12
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
 80135de:	6039      	str	r1, [r7, #0]
	{ }
 80135e0:	bf00      	nop
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80135ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ee:	b08b      	sub	sp, #44	@ 0x2c
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
 80135f8:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	f107 031c 	add.w	r3, r7, #28
 8013600:	4611      	mov	r1, r2
 8013602:	4618      	mov	r0, r3
 8013604:	f000 f840 	bl	8013688 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8013608:	f107 0314 	add.w	r3, r7, #20
 801360c:	f107 021c 	add.w	r2, r7, #28
 8013610:	4611      	mov	r1, r2
 8013612:	4618      	mov	r0, r3
 8013614:	f000 f851 	bl	80136ba <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8013618:	f107 0314 	add.w	r3, r7, #20
 801361c:	4618      	mov	r0, r3
 801361e:	f000 f874 	bl	801370a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013622:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013626:	4619      	mov	r1, r3
 8013628:	2054      	movs	r0, #84	@ 0x54
 801362a:	f7f7 f9f1 	bl	800aa10 <_ZnwjPv>
 801362e:	4604      	mov	r4, r0
 8013630:	6838      	ldr	r0, [r7, #0]
 8013632:	f7fc f80c 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013636:	4605      	mov	r5, r0
 8013638:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801363a:	f7ff fe3a 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801363e:	4603      	mov	r3, r0
 8013640:	462a      	mov	r2, r5
 8013642:	4631      	mov	r1, r6
 8013644:	4620      	mov	r0, r4
 8013646:	f000 f8c1 	bl	80137cc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 801364a:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 801364c:	f107 0314 	add.w	r3, r7, #20
 8013650:	2100      	movs	r1, #0
 8013652:	4618      	mov	r0, r3
 8013654:	f000 f89c 	bl	8013790 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	6a3a      	ldr	r2, [r7, #32]
 801365c:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801365e:	6a38      	ldr	r0, [r7, #32]
 8013660:	f000 f8a5 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013664:	4602      	mov	r2, r0
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	601a      	str	r2, [r3, #0]
	}
 801366a:	f107 0314 	add.w	r3, r7, #20
 801366e:	4618      	mov	r0, r3
 8013670:	f000 f836 	bl	80136e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013674:	f107 031c 	add.w	r3, r7, #28
 8013678:	4618      	mov	r0, r3
 801367a:	f000 f812 	bl	80136a2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	4618      	mov	r0, r3
 8013682:	372c      	adds	r7, #44	@ 0x2c
 8013684:	46bd      	mov	sp, r7
 8013686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013688 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6039      	str	r1, [r7, #0]
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 f8c8 	bl	8013828 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b082      	sub	sp, #8
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 f8c7 	bl	801383e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	3708      	adds	r7, #8
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}

080136ba <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80136ba:	b580      	push	{r7, lr}
 80136bc:	b082      	sub	sp, #8
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
 80136c2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80136c4:	2101      	movs	r1, #1
 80136c6:	6838      	ldr	r0, [r7, #0]
 80136c8:	f000 f8c4 	bl	8013854 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80136cc:	4603      	mov	r3, r0
 80136ce:	461a      	mov	r2, r3
 80136d0:	6839      	ldr	r1, [r7, #0]
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f8cd 	bl	8013872 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d007      	beq.n	8013700 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	2201      	movs	r2, #1
 80136fa:	4619      	mov	r1, r3
 80136fc:	f000 f8cd 	bl	801389a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	4618      	mov	r0, r3
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801370a:	b580      	push	{r7, lr}
 801370c:	b082      	sub	sp, #8
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	4618      	mov	r0, r3
 8013718:	f000 f8ce 	bl	80138b8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801371c:	4603      	mov	r3, r0
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
	...

08013728 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8013728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801372a:	b087      	sub	sp, #28
 801372c:	af02      	add	r7, sp, #8
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	7239      	strb	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	4618      	mov	r0, r3
 801373a:	f7fa fe11 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801373e:	4a13      	ldr	r2, [pc, #76]	@ (801378c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	330c      	adds	r3, #12
 8013748:	4621      	mov	r1, r4
 801374a:	4618      	mov	r0, r3
 801374c:	f000 f8bf 	bl	80138ce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 f82c 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013756:	4604      	mov	r4, r0
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7fb ff78 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801375e:	4605      	mov	r5, r0
 8013760:	6838      	ldr	r0, [r7, #0]
 8013762:	f7ff fda6 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013766:	4606      	mov	r6, r0
 8013768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801376a:	f7fb ff7b 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801376e:	4603      	mov	r3, r0
 8013770:	f107 0008 	add.w	r0, r7, #8
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	4633      	mov	r3, r6
 8013778:	462a      	mov	r2, r5
 801377a:	4621      	mov	r1, r4
 801377c:	f000 f8b6 	bl	80138ec <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	4618      	mov	r0, r3
 8013784:	3714      	adds	r7, #20
 8013786:	46bd      	mov	sp, r7
 8013788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801378a:	bf00      	nop
 801378c:	0802b558 	.word	0x0802b558

08013790 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	605a      	str	r2, [r3, #4]
	return *this;
 80137a0:	687b      	ldr	r3, [r7, #4]
      }
 80137a2:	4618      	mov	r0, r3
 80137a4:	370c      	adds	r7, #12
 80137a6:	46bd      	mov	sp, r7
 80137a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ac:	4770      	bx	lr

080137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80137ae:	b580      	push	{r7, lr}
 80137b0:	b082      	sub	sp, #8
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	330c      	adds	r3, #12
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 f8b2 	bl	8013924 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 80137c0:	4603      	mov	r3, r0
 80137c2:	4618      	mov	r0, r3
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
	...

080137cc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80137cc:	b5b0      	push	{r4, r5, r7, lr}
 80137ce:	b084      	sub	sp, #16
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	7239      	strb	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
 80137d8:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fa fdbf 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80137e2:	4a10      	ldr	r2, [pc, #64]	@ (8013824 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	330c      	adds	r3, #12
 80137ec:	4621      	mov	r1, r4
 80137ee:	4618      	mov	r0, r3
 80137f0:	f000 f86d 	bl	80138ce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f7ff ffda 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80137fa:	4604      	mov	r4, r0
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7fb ff26 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013802:	4605      	mov	r5, r0
 8013804:	6838      	ldr	r0, [r7, #0]
 8013806:	f7ff fd54 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801380a:	4603      	mov	r3, r0
 801380c:	f107 0008 	add.w	r0, r7, #8
 8013810:	462a      	mov	r2, r5
 8013812:	4621      	mov	r1, r4
 8013814:	f000 f892 	bl	801393c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bdb0      	pop	{r4, r5, r7, pc}
 8013822:	bf00      	nop
 8013824:	0802b558 	.word	0x0802b558

08013828 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	4618      	mov	r0, r3
 8013834:	370c      	adds	r7, #12
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr

0801383e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801383e:	b480      	push	{r7}
 8013840:	b083      	sub	sp, #12
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4618      	mov	r0, r3
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801385e:	2200      	movs	r2, #0
 8013860:	6839      	ldr	r1, [r7, #0]
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f000 f882 	bl	801396c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8013868:	4603      	mov	r3, r0
 801386a:	4618      	mov	r0, r3
 801386c:	3708      	adds	r7, #8
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}

08013872 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8013872:	b580      	push	{r7, lr}
 8013874:	b084      	sub	sp, #16
 8013876:	af00      	add	r7, sp, #0
 8013878:	60f8      	str	r0, [r7, #12]
 801387a:	60b9      	str	r1, [r7, #8]
 801387c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801387e:	68b8      	ldr	r0, [r7, #8]
 8013880:	f000 f8a2 	bl	80139c8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8013884:	4602      	mov	r2, r0
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	601a      	str	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	605a      	str	r2, [r3, #4]
      { }
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	4618      	mov	r0, r3
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801389a:	b580      	push	{r7, lr}
 801389c:	b084      	sub	sp, #16
 801389e:	af00      	add	r7, sp, #0
 80138a0:	60f8      	str	r0, [r7, #12]
 80138a2:	60b9      	str	r1, [r7, #8]
 80138a4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	68b9      	ldr	r1, [r7, #8]
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f000 f897 	bl	80139de <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 80138b0:	bf00      	nop
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
      return __ptr;
 80138c0:	687b      	ldr	r3, [r7, #4]
    }
 80138c2:	4618      	mov	r0, r3
 80138c4:	370c      	adds	r7, #12
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr

080138ce <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b082      	sub	sp, #8
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	7039      	strb	r1, [r7, #0]
 80138d8:	463b      	mov	r3, r7
 80138da:	4619      	mov	r1, r3
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f7fa ff59 	bl	800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80138ec:	b5b0      	push	{r4, r5, r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
 80138f8:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7fb fea7 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013900:	4604      	mov	r4, r0
 8013902:	6838      	ldr	r0, [r7, #0]
 8013904:	f7ff fcd5 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013908:	4605      	mov	r5, r0
 801390a:	6a38      	ldr	r0, [r7, #32]
 801390c:	f7fb feaa 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013910:	4603      	mov	r3, r0
 8013912:	462a      	mov	r2, r5
 8013914:	4621      	mov	r1, r4
 8013916:	68b8      	ldr	r0, [r7, #8]
 8013918:	f000 f872 	bl	8013a00 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 801391c:	bf00      	nop
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bdb0      	pop	{r4, r5, r7, pc}

08013924 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 f8a4 	bl	8013a7a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 8013932:	4603      	mov	r3, r0
 8013934:	4618      	mov	r0, r3
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801393c:	b590      	push	{r4, r7, lr}
 801393e:	b085      	sub	sp, #20
 8013940:	af00      	add	r7, sp, #0
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7fb fe7f 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013950:	4604      	mov	r4, r0
 8013952:	6838      	ldr	r0, [r7, #0]
 8013954:	f7ff fcad 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013958:	4603      	mov	r3, r0
 801395a:	461a      	mov	r2, r3
 801395c:	4621      	mov	r1, r4
 801395e:	68b8      	ldr	r0, [r7, #8]
 8013960:	f000 f896 	bl	8013a90 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 8013964:	bf00      	nop
 8013966:	3714      	adds	r7, #20
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}

0801396c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f000 f8c1 	bl	8013b00 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801397e:	4602      	mov	r2, r0
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	4293      	cmp	r3, r2
 8013984:	bf8c      	ite	hi
 8013986:	2301      	movhi	r3, #1
 8013988:	2300      	movls	r3, #0
 801398a:	b2db      	uxtb	r3, r3
 801398c:	2b00      	cmp	r3, #0
 801398e:	bf14      	ite	ne
 8013990:	2301      	movne	r3, #1
 8013992:	2300      	moveq	r3, #0
 8013994:	b2db      	uxtb	r3, r3
 8013996:	2b00      	cmp	r3, #0
 8013998:	d007      	beq.n	80139aa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	4a09      	ldr	r2, [pc, #36]	@ (80139c4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d901      	bls.n	80139a6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80139a2:	f014 fe83 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80139a6:	f014 fe7e 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	2254      	movs	r2, #84	@ 0x54
 80139ae:	fb02 f303 	mul.w	r3, r2, r3
 80139b2:	4618      	mov	r0, r3
 80139b4:	f014 fe64 	bl	8028680 <_Znwj>
 80139b8:	4603      	mov	r3, r0
 80139ba:	bf00      	nop
      }
 80139bc:	4618      	mov	r0, r3
 80139be:	3710      	adds	r7, #16
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	030c30c3 	.word	0x030c30c3

080139c8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	370c      	adds	r7, #12
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr

080139de <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80139de:	b580      	push	{r7, lr}
 80139e0:	b084      	sub	sp, #16
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	60f8      	str	r0, [r7, #12]
 80139e6:	60b9      	str	r1, [r7, #8]
 80139e8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2254      	movs	r2, #84	@ 0x54
 80139ee:	fb02 f303 	mul.w	r3, r2, r3
 80139f2:	4619      	mov	r1, r3
 80139f4:	68b8      	ldr	r0, [r7, #8]
 80139f6:	f014 fe32 	bl	802865e <_ZdlPvj>
      }
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8013a00:	b5b0      	push	{r4, r5, r7, lr}
 8013a02:	b08c      	sub	sp, #48	@ 0x30
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	4619      	mov	r1, r3
 8013a12:	2048      	movs	r0, #72	@ 0x48
 8013a14:	f7f6 fffc 	bl	800aa10 <_ZnwjPv>
 8013a18:	4605      	mov	r5, r0
 8013a1a:	68b8      	ldr	r0, [r7, #8]
 8013a1c:	f7fb fe17 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a20:	4603      	mov	r3, r0
 8013a22:	681c      	ldr	r4, [r3, #0]
 8013a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f014 fe3a 	bl	80286a2 <_ZNSaIcEC1Ev>
 8013a2e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013a32:	f107 0314 	add.w	r3, r7, #20
 8013a36:	4621      	mov	r1, r4
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7f3 ffa7 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff fc37 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a44:	4603      	mov	r3, r0
 8013a46:	681c      	ldr	r4, [r3, #0]
 8013a48:	6838      	ldr	r0, [r7, #0]
 8013a4a:	f7fb fe0b 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f107 0114 	add.w	r1, r7, #20
 8013a56:	4622      	mov	r2, r4
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f7ff faa1 	bl	8012fa0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 8013a5e:	f107 0314 	add.w	r3, r7, #20
 8013a62:	4618      	mov	r0, r3
 8013a64:	f014 ff07 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f014 fe19 	bl	80286a4 <_ZNSaIcED1Ev>
    }
 8013a72:	bf00      	nop
 8013a74:	3730      	adds	r7, #48	@ 0x30
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bdb0      	pop	{r4, r5, r7, pc}

08013a7a <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 8013a7a:	b480      	push	{r7}
 8013a7c:	b083      	sub	sp, #12
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8013a82:	687b      	ldr	r3, [r7, #4]
      }
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8013a90:	b5b0      	push	{r4, r5, r7, lr}
 8013a92:	b08c      	sub	sp, #48	@ 0x30
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	60f8      	str	r0, [r7, #12]
 8013a98:	60b9      	str	r1, [r7, #8]
 8013a9a:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	2048      	movs	r0, #72	@ 0x48
 8013aa2:	f7f6 ffb5 	bl	800aa10 <_ZnwjPv>
 8013aa6:	4605      	mov	r5, r0
 8013aa8:	68b8      	ldr	r0, [r7, #8]
 8013aaa:	f7fb fdd0 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	681c      	ldr	r4, [r3, #0]
 8013ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f014 fdf3 	bl	80286a2 <_ZNSaIcEC1Ev>
 8013abc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013ac0:	f107 0314 	add.w	r3, r7, #20
 8013ac4:	4621      	mov	r1, r4
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f3 ff60 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7ff fbf0 	bl	80132b2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	f107 0314 	add.w	r3, r7, #20
 8013ada:	4619      	mov	r1, r3
 8013adc:	4628      	mov	r0, r5
 8013ade:	f7ff fa29 	bl	8012f34 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 8013ae2:	f107 0314 	add.w	r3, r7, #20
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f014 fec5 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013af0:	4618      	mov	r0, r3
 8013af2:	f014 fdd7 	bl	80286a4 <_ZNSaIcED1Ev>
    }
 8013af6:	bf00      	nop
 8013af8:	3730      	adds	r7, #48	@ 0x30
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013b00 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b08:	4b03      	ldr	r3, [pc, #12]	@ (8013b18 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	370c      	adds	r7, #12
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop
 8013b18:	01861861 	.word	0x01861861

08013b1c <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	4a08      	ldr	r2, [pc, #32]	@ (8013b48 <_ZN10SigmaDeltaD1Ev+0x2c>)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	601a      	str	r2, [r3, #0]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	3318      	adds	r3, #24
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f014 fea1 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fe f9d0 	bl	8011edc <_ZN6ModuleD1Ev>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3708      	adds	r7, #8
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}
 8013b46:	bf00      	nop
 8013b48:	0802b574 	.word	0x0802b574

08013b4c <_ZN10SigmaDeltaD0Ev>:
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7ff ffe1 	bl	8013b1c <_ZN10SigmaDeltaD1Ev>
 8013b5a:	2148      	movs	r1, #72	@ 0x48
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f014 fd7e 	bl	802865e <_ZdlPvj>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	4a05      	ldr	r2, [pc, #20]	@ (8013b8c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	601a      	str	r2, [r3, #0]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7f8 fdb1 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	0802b558 	.word	0x0802b558

08013b90 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f7ff ffe7 	bl	8013b6c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013b9e:	2154      	movs	r1, #84	@ 0x54
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f014 fd5c 	bl	802865e <_ZdlPvj>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3708      	adds	r7, #8
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8013bb0:	b590      	push	{r4, r7, lr}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	330c      	adds	r3, #12
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f000 f856 	bl	8013c6e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff fdf2 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	4619      	mov	r1, r3
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f000 f859 	bl	8013c86 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8013bd4:	bf00      	nop
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd90      	pop	{r4, r7, pc}

08013bdc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b086      	sub	sp, #24
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	330c      	adds	r3, #12
 8013be8:	4618      	mov	r0, r3
 8013bea:	f000 f840 	bl	8013c6e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	f107 0314 	add.w	r3, r7, #20
 8013bf4:	4611      	mov	r1, r2
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7ff fd46 	bl	8013688 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8013bfc:	f107 0114 	add.w	r1, r7, #20
 8013c00:	f107 030c 	add.w	r3, r7, #12
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7ff fe33 	bl	8013872 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7ff ffad 	bl	8013b6c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8013c12:	f107 030c 	add.w	r3, r7, #12
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff fd62 	bl	80136e0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013c1c:	f107 0314 	add.w	r3, r7, #20
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7ff fd3e 	bl	80136a2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff fdb9 	bl	80137ae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013c3c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013c3e:	f7f6 ff33 	bl	800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8013c42:	4602      	mov	r2, r0
	    ||
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	4293      	cmp	r3, r2
 8013c48:	d005      	beq.n	8013c56 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8013c4a:	6838      	ldr	r0, [r7, #0]
 8013c4c:	f014 fd44 	bl	80286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8013c50:	4603      	mov	r3, r0
	    ||
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d001      	beq.n	8013c5a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8013c56:	2301      	movs	r3, #1
 8013c58:	e000      	b.n	8013c5c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8013c5a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d001      	beq.n	8013c64 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	e000      	b.n	8013c66 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8013c64:	2300      	movs	r3, #0
      }
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7fb f807 	bl	800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b082      	sub	sp, #8
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
 8013c8e:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8013c90:	6838      	ldr	r0, [r7, #0]
 8013c92:	f000 f804 	bl	8013c9e <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 8013c96:	bf00      	nop
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b082      	sub	sp, #8
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	4798      	blx	r3
    }
 8013cb0:	bf00      	nop
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8013cb8:	b590      	push	{r4, r7, lr}
 8013cba:	b0bd      	sub	sp, #244	@ 0xf4
 8013cbc:	af08      	add	r7, sp, #32
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	60b9      	str	r1, [r7, #8]
 8013cc2:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 8013cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cc8:	4a50      	ldr	r2, [pc, #320]	@ (8013e0c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8013cca:	68b9      	ldr	r1, [r7, #8]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7fe fb68 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f3 fede 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013cdc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8013ce0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8013e10 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8013ce6:	68b9      	ldr	r1, [r7, #8]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fb fb86 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013cee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7f3 ff01 	bl	8007afa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 8013cfc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8013d00:	f015 fbd8 	bl	80294b4 <puts>

	    int joint = config["Joint Number"];
 8013d04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013d08:	4a42      	ldr	r2, [pc, #264]	@ (8013e14 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 8013d0a:	68b9      	ldr	r1, [r7, #8]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f000 fa1d 	bl	801414c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7fb fb63 	bl	800f3e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8013d20:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013d24:	4a3c      	ldr	r2, [pc, #240]	@ (8013e18 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 8013d26:	68b9      	ldr	r1, [r7, #8]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fb fb66 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7f3 feb0 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 8013d3c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d40:	4a36      	ldr	r2, [pc, #216]	@ (8013e1c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 8013d42:	68b9      	ldr	r1, [r7, #8]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fd fb3a 	bl	80113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d4a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f3 fea2 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d54:	4603      	mov	r3, r0
 8013d56:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8013d58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013d5c:	4a30      	ldr	r2, [pc, #192]	@ (8013e20 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8013d5e:	68b9      	ldr	r1, [r7, #8]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f000 fa18 	bl	8014196 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d66:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f3 fe94 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d70:	4603      	mov	r3, r0
 8013d72:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f7fd f94f 	bl	8011018 <_ZN6Remora9getRxDataEv>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	4413      	add	r3, r2
 8013d82:	3304      	adds	r3, #4
 8013d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7fd f937 	bl	8010ffc <_ZN6Remora9getTxDataEv>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	4413      	add	r3, r2
 8013d96:	3304      	adds	r3, #4
 8013d98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7fd f93b 	bl	8011018 <_ZN6Remora9getRxDataEv>
 8013da2:	4603      	mov	r3, r0
 8013da4:	333c      	adds	r3, #60	@ 0x3c
 8013da6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8013daa:	2301      	movs	r3, #1
 8013dac:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8013dae:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8013db2:	f107 0420 	add.w	r4, r7, #32
 8013db6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013dba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013dbe:	f107 0317 	add.w	r3, r7, #23
 8013dc2:	9306      	str	r3, [sp, #24]
 8013dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013dc8:	9305      	str	r3, [sp, #20]
 8013dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013dce:	9304      	str	r3, [sp, #16]
 8013dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013dd4:	9303      	str	r3, [sp, #12]
 8013dd6:	4b13      	ldr	r3, [pc, #76]	@ (8013e24 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8013dd8:	9302      	str	r3, [sp, #8]
 8013dda:	f107 0318 	add.w	r3, r7, #24
 8013dde:	9301      	str	r3, [sp, #4]
 8013de0:	f107 031c 	add.w	r3, r7, #28
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	4623      	mov	r3, r4
 8013de8:	f000 f9fa 	bl	80141e0 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8013dec:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013df0:	4619      	mov	r1, r3
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f000 fa70 	bl	80142d8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8013df8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f000 fa49 	bl	8014294 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8013e02:	bf00      	nop
	}
 8013e04:	68f8      	ldr	r0, [r7, #12]
 8013e06:	37d4      	adds	r7, #212	@ 0xd4
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd90      	pop	{r4, r7, pc}
 8013e0c:	0802ab68 	.word	0x0802ab68
 8013e10:	0802ab70 	.word	0x0802ab70
 8013e14:	0802ab7c 	.word	0x0802ab7c
 8013e18:	0802ab8c 	.word	0x0802ab8c
 8013e1c:	0802ab98 	.word	0x0802ab98
 8013e20:	0802aba4 	.word	0x0802aba4
 8013e24:	0802b590 	.word	0x0802b590

08013e28 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8013e28:	b590      	push	{r4, r7, lr}
 8013e2a:	b09b      	sub	sp, #108	@ 0x6c
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7fe f833 	bl	8011ea4 <_ZN6ModuleC1Ev>
 8013e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8013fb0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	683a      	ldr	r2, [r7, #0]
 8013e4e:	61da      	str	r2, [r3, #28]
      step(_step),
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013e54:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013e5a:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013e62:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013e72:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013e7a:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8013e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013e86:	4618      	mov	r0, r3
 8013e88:	f014 fc0b 	bl	80286a2 <_ZNSaIcEC1Ev>
 8013e8c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013e90:	f107 0314 	add.w	r3, r7, #20
 8013e94:	6839      	ldr	r1, [r7, #0]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7f3 fd78 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013e9c:	f107 0314 	add.w	r3, r7, #20
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f7f0 fe2f 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013eaa:	f107 0314 	add.w	r3, r7, #20
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f014 fce1 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f014 fbf3 	bl	80286a4 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8013ec4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f014 fbea 	bl	80286a2 <_ZNSaIcEC1Ev>
 8013ece:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013ed2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013ed6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f3 fd57 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013ede:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7f0 fe0e 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013eec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f014 fcc0 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013ef6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013efa:	4618      	mov	r0, r3
 8013efc:	f014 fbd2 	bl	80286a4 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8013f06:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f014 fbc9 	bl	80286a2 <_ZNSaIcEC1Ev>
 8013f10:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8013f14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7f3 fd36 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f24:	2201      	movs	r2, #1
 8013f26:	4619      	mov	r1, r3
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f7f0 fded 	bl	8004b08 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013f2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f32:	4618      	mov	r0, r3
 8013f34:	f014 fc9f 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013f38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f014 fbb1 	bl	80286a4 <_ZNSaIcED1Ev>
      rawCount(0),
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2200      	movs	r2, #0
 8013f46:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8013f52:	2201      	movs	r2, #1
 8013f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013f58:	fa02 f303 	lsl.w	r3, r2, r3
 8013f5c:	ee07 3a90 	vmov	s15, r3
 8013f60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	ee07 3a90 	vmov	s15, r3
 8013f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8013f78:	2201      	movs	r2, #1
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	409a      	lsls	r2, r3
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2200      	movs	r2, #0
 8013f88:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2200      	movs	r2, #0
 8013f98:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8013fa2:	751a      	strb	r2, [r3, #20]
}
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	376c      	adds	r7, #108	@ 0x6c
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd90      	pop	{r4, r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	0802b5b8 	.word	0x0802b5b8

08013fb4 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 f819 	bl	8013ff4 <_ZN7Stepgen10makePulsesEv>
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}

08013fca <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b082      	sub	sp, #8
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 f8a8 	bl	8014128 <_ZN7Stepgen10stopPulsesEv>
}
 8013fd8:	bf00      	nop
 8013fda:	3708      	adds	r7, #8
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8013fe8:	bf00      	nop
 8013fea:	370c      	adds	r7, #12
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr

08013ff4 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	b2db      	uxtb	r3, r3
 8014004:	461a      	mov	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801400c:	4013      	ands	r3, r2
 801400e:	2b00      	cmp	r3, #0
 8014010:	bf14      	ite	ne
 8014012:	2301      	movne	r3, #1
 8014014:	2300      	moveq	r3, #0
 8014016:	b2da      	uxtb	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8014024:	f083 0301 	eor.w	r3, r3, #1
 8014028:	b2db      	uxtb	r3, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	d006      	beq.n	801403c <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	3338      	adds	r3, #56	@ 0x38
 8014032:	2101      	movs	r1, #1
 8014034:	4618      	mov	r0, r3
 8014036:	f7f0 ff11 	bl	8004e5c <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 801403a:	e072      	b.n	8014122 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	3338      	adds	r3, #56	@ 0x38
 8014040:	2100      	movs	r1, #0
 8014042:	4618      	mov	r0, r3
 8014044:	f7f0 ff0a 	bl	8004e5c <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801405a:	ee07 3a90 	vmov	s15, r3
 801405e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8014068:	ee67 7a27 	vmul.f32	s15, s14, s15
 801406c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014070:	ee17 2a90 	vmov	r2, s15
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8014080:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801408e:	441a      	add	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801409c:	68fa      	ldr	r2, [r7, #12]
 801409e:	4053      	eors	r3, r2
 80140a0:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140a6:	2201      	movs	r2, #1
 80140a8:	fa02 f303 	lsl.w	r3, r2, r3
 80140ac:	68fa      	ldr	r2, [r7, #12]
 80140ae:	4013      	ands	r3, r2
 80140b0:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	bfcc      	ite	gt
 80140bc:	2301      	movgt	r3, #1
 80140be:	2300      	movle	r3, #0
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d029      	beq.n	8014122 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80140da:	4619      	mov	r1, r3
 80140dc:	4610      	mov	r0, r2
 80140de:	f7f0 febd 	bl	8004e5c <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	3378      	adds	r3, #120	@ 0x78
 80140e6:	2101      	movs	r1, #1
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7f0 feb7 	bl	8004e5c <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 80140fa:	2a00      	cmp	r2, #0
 80140fc:	d001      	beq.n	8014102 <_ZN7Stepgen10makePulsesEv+0x10e>
 80140fe:	2201      	movs	r2, #1
 8014100:	e001      	b.n	8014106 <_ZN7Stepgen10makePulsesEv+0x112>
 8014102:	f04f 32ff 	mov.w	r2, #4294967295
 8014106:	441a      	add	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8014118:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2201      	movs	r2, #1
 801411e:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8014122:	3710      	adds	r7, #16
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	3378      	adds	r3, #120	@ 0x78
 8014134:	2100      	movs	r1, #0
 8014136:	4618      	mov	r0, r3
 8014138:	f7f0 fe90 	bl	8004e5c <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8014144:	bf00      	nop
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801414c:	b580      	push	{r7, lr}
 801414e:	b08c      	sub	sp, #48	@ 0x30
 8014150:	af02      	add	r7, sp, #8
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8014158:	68ba      	ldr	r2, [r7, #8]
 801415a:	f107 0314 	add.w	r3, r7, #20
 801415e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014162:	e883 0003 	stmia.w	r3, {r0, r1}
 8014166:	f107 031c 	add.w	r3, r7, #28
 801416a:	6879      	ldr	r1, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	f000 f8c6 	bl	80142fe <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8014172:	466a      	mov	r2, sp
 8014174:	f107 0320 	add.w	r3, r7, #32
 8014178:	e893 0003 	ldmia.w	r3, {r0, r1}
 801417c:	e882 0003 	stmia.w	r2, {r0, r1}
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	f107 0214 	add.w	r2, r7, #20
 8014186:	ca06      	ldmia	r2, {r1, r2}
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f7f3 fdf4 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801418e:	68f8      	ldr	r0, [r7, #12]
 8014190:	3728      	adds	r7, #40	@ 0x28
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8014196:	b580      	push	{r7, lr}
 8014198:	b08c      	sub	sp, #48	@ 0x30
 801419a:	af02      	add	r7, sp, #8
 801419c:	60f8      	str	r0, [r7, #12]
 801419e:	60b9      	str	r1, [r7, #8]
 80141a0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	f107 0314 	add.w	r3, r7, #20
 80141a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80141b0:	f107 031c 	add.w	r3, r7, #28
 80141b4:	6879      	ldr	r1, [r7, #4]
 80141b6:	4618      	mov	r0, r3
 80141b8:	f000 f8b4 	bl	8014324 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80141bc:	466a      	mov	r2, sp
 80141be:	f107 0320 	add.w	r3, r7, #32
 80141c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	f107 0214 	add.w	r2, r7, #20
 80141d0:	ca06      	ldmia	r2, {r1, r2}
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7f3 fdcf 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80141d8:	68f8      	ldr	r0, [r7, #12]
 80141da:	3728      	adds	r7, #40	@ 0x28
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80141e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141e4:	b093      	sub	sp, #76	@ 0x4c
 80141e6:	af08      	add	r7, sp, #32
 80141e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80141ea:	6239      	str	r1, [r7, #32]
 80141ec:	61fa      	str	r2, [r7, #28]
 80141ee:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80141f0:	f44f 708a 	mov.w	r0, #276	@ 0x114
 80141f4:	f014 fa44 	bl	8028680 <_Znwj>
 80141f8:	4603      	mov	r3, r0
 80141fa:	4698      	mov	r8, r3
 80141fc:	6a38      	ldr	r0, [r7, #32]
 80141fe:	f7f8 fdf5 	bl	800cdec <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8014202:	4603      	mov	r3, r0
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	4699      	mov	r9, r3
 8014208:	69f8      	ldr	r0, [r7, #28]
 801420a:	f7fb fa2b 	bl	800f664 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801420e:	4603      	mov	r3, r0
 8014210:	681e      	ldr	r6, [r3, #0]
 8014212:	69b8      	ldr	r0, [r7, #24]
 8014214:	f7fb fa1b 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014218:	4603      	mov	r3, r0
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	617b      	str	r3, [r7, #20]
 801421e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8014220:	f7fb fa15 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014224:	4603      	mov	r3, r0
 8014226:	681c      	ldr	r4, [r3, #0]
 8014228:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801422a:	f7fb fa10 	bl	800f64e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801422e:	4603      	mov	r3, r0
 8014230:	681d      	ldr	r5, [r3, #0]
 8014232:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014234:	f7f8 fde5 	bl	800ce02 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8014238:	4603      	mov	r3, r0
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	613b      	str	r3, [r7, #16]
 801423e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014240:	f000 f883 	bl	801434a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8014244:	60f8      	str	r0, [r7, #12]
 8014246:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014248:	f000 f87f 	bl	801434a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 801424c:	60b8      	str	r0, [r7, #8]
 801424e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8014250:	f000 f886 	bl	8014360 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 8014254:	6078      	str	r0, [r7, #4]
 8014256:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014258:	f7fd f9b1 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801425c:	4603      	mov	r3, r0
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	9306      	str	r3, [sp, #24]
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	9205      	str	r2, [sp, #20]
 8014266:	68ba      	ldr	r2, [r7, #8]
 8014268:	9204      	str	r2, [sp, #16]
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	9203      	str	r2, [sp, #12]
 801426e:	693a      	ldr	r2, [r7, #16]
 8014270:	9202      	str	r2, [sp, #8]
 8014272:	9501      	str	r5, [sp, #4]
 8014274:	9400      	str	r4, [sp, #0]
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	4632      	mov	r2, r6
 801427a:	4649      	mov	r1, r9
 801427c:	4640      	mov	r0, r8
 801427e:	f7ff fdd3 	bl	8013e28 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 8014282:	4641      	mov	r1, r8
 8014284:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014286:	f000 f886 	bl	8014396 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 801428a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801428c:	372c      	adds	r7, #44	@ 0x2c
 801428e:	46bd      	mov	sp, r7
 8014290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014294 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8014294:	b590      	push	{r4, r7, lr}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	4618      	mov	r0, r3
 80142a0:	f000 f888 	bl	80143b4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80142a4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00c      	beq.n	80142c8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f000 f88d 	bl	80143ce <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80142b4:	4604      	mov	r4, r0
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f000 f896 	bl	80143e8 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 80142bc:	4603      	mov	r3, r0
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4619      	mov	r1, r3
 80142c2:	4620      	mov	r0, r4
 80142c4:	f000 f8cf 	bl	8014466 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2200      	movs	r2, #0
 80142cc:	601a      	str	r2, [r3, #0]
      }
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4618      	mov	r0, r3
 80142d2:	3714      	adds	r7, #20
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd90      	pop	{r4, r7, pc}

080142d8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80142e2:	687c      	ldr	r4, [r7, #4]
 80142e4:	6838      	ldr	r0, [r7, #0]
 80142e6:	f000 f8cf 	bl	8014488 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80142ea:	4603      	mov	r3, r0
 80142ec:	4619      	mov	r1, r3
 80142ee:	4620      	mov	r0, r4
 80142f0:	f000 f8d5 	bl	801449e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	370c      	adds	r7, #12
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd90      	pop	{r4, r7, pc}

080142fe <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80142fe:	b580      	push	{r7, lr}
 8014300:	b082      	sub	sp, #8
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
 8014306:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8014308:	6838      	ldr	r0, [r7, #0]
 801430a:	f000 f900 	bl	801450e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801430e:	4602      	mov	r2, r0
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	4611      	mov	r1, r2
 8014314:	4618      	mov	r0, r3
 8014316:	f000 f905 	bl	8014524 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 801431a:	bf00      	nop
}
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}

08014324 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801432e:	6838      	ldr	r0, [r7, #0]
 8014330:	f000 f907 	bl	8014542 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8014334:	4602      	mov	r2, r0
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	4611      	mov	r1, r2
 801433a:	4618      	mov	r0, r3
 801433c:	f000 f90c 	bl	8014558 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8014340:	bf00      	nop
}
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801434a:	b480      	push	{r7}
 801434c:	b083      	sub	sp, #12
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	370c      	adds	r7, #12
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr

08014376 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8014376:	b580      	push	{r7, lr}
 8014378:	b082      	sub	sp, #8
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
 801437e:	6039      	str	r1, [r7, #0]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	4611      	mov	r1, r2
 8014386:	4618      	mov	r0, r3
 8014388:	f000 f8f5 	bl	8014576 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	4618      	mov	r0, r3
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8014396:	b580      	push	{r7, lr}
 8014398:	b082      	sub	sp, #8
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
 801439e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff ffe6 	bl	8014376 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	4618      	mov	r0, r3
 80143ae:	3708      	adds	r7, #8
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 f8ed 	bl	801459e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80143c4:	4603      	mov	r3, r0
 80143c6:	4618      	mov	r0, r3
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}

080143ce <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80143ce:	b580      	push	{r7, lr}
 80143d0:	b082      	sub	sp, #8
 80143d2:	af00      	add	r7, sp, #0
 80143d4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4618      	mov	r0, r3
 80143da:	f000 f8ed 	bl	80145b8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 80143de:	4603      	mov	r3, r0
 80143e0:	4618      	mov	r0, r3
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	4618      	mov	r0, r3
 80143f4:	370c      	adds	r7, #12
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr
	...

08014400 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 8014400:	b580      	push	{r7, lr}
 8014402:	b082      	sub	sp, #8
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	4a0d      	ldr	r2, [pc, #52]	@ (8014440 <_ZN7StepgenD1Ev+0x40>)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	601a      	str	r2, [r3, #0]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	33b8      	adds	r3, #184	@ 0xb8
 8014412:	4618      	mov	r0, r3
 8014414:	f7ed ff04 	bl	8002220 <_ZN3PinD1Ev>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	3378      	adds	r3, #120	@ 0x78
 801441c:	4618      	mov	r0, r3
 801441e:	f7ed feff 	bl	8002220 <_ZN3PinD1Ev>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	3338      	adds	r3, #56	@ 0x38
 8014426:	4618      	mov	r0, r3
 8014428:	f7ed fefa 	bl	8002220 <_ZN3PinD1Ev>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd fd54 	bl	8011edc <_ZN6ModuleD1Ev>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	4618      	mov	r0, r3
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	0802b5b8 	.word	0x0802b5b8

08014444 <_ZN7StepgenD0Ev>:
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f7ff ffd7 	bl	8014400 <_ZN7StepgenD1Ev>
 8014452:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f014 f901 	bl	802865e <_ZdlPvj>
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	4618      	mov	r0, r3
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d004      	beq.n	8014480 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	3204      	adds	r2, #4
 801447a:	6812      	ldr	r2, [r2, #0]
 801447c:	4618      	mov	r0, r3
 801447e:	4790      	blx	r2
      }
 8014480:	bf00      	nop
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8014488:	b480      	push	{r7}
 801448a:	b083      	sub	sp, #12
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	4618      	mov	r0, r3
 8014494:	370c      	adds	r7, #12
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr

0801449e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801449e:	b580      	push	{r7, lr}
 80144a0:	b084      	sub	sp, #16
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
 80144a6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80144a8:	6838      	ldr	r0, [r7, #0]
 80144aa:	f000 f892 	bl	80145d2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80144ae:	4602      	mov	r2, r0
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3304      	adds	r3, #4
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7f8 fedd 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80144be:	6838      	ldr	r0, [r7, #0]
 80144c0:	f000 f887 	bl	80145d2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80144c4:	4603      	mov	r3, r0
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 f890 	bl	80145ec <_ZSt12__to_addressI7StepgenEPT_S2_>
 80144cc:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80144ce:	6838      	ldr	r0, [r7, #0]
 80144d0:	f7ff ffda 	bl	8014488 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80144d4:	4602      	mov	r2, r0
 80144d6:	f107 0308 	add.w	r3, r7, #8
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f000 f890 	bl	8014602 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	3304      	adds	r3, #4
 80144e6:	f107 0208 	add.w	r2, r7, #8
 80144ea:	4611      	mov	r1, r2
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7fb fab4 	bl	800fa5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80144f2:	f107 0308 	add.w	r3, r7, #8
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7f7 fcc1 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 80144fc:	68f9      	ldr	r1, [r7, #12]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 f8c1 	bl	8014686 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	4618      	mov	r0, r3
 8014508:	3710      	adds	r7, #16
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801450e:	b480      	push	{r7}
 8014510:	b083      	sub	sp, #12
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8014516:	687b      	ldr	r3, [r7, #4]
}
 8014518:	4618      	mov	r0, r3
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801452e:	2301      	movs	r3, #1
 8014530:	220c      	movs	r2, #12
 8014532:	6839      	ldr	r1, [r7, #0]
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f7f0 fe99 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	3708      	adds	r7, #8
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}

08014542 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8014542:	b480      	push	{r7}
 8014544:	b083      	sub	sp, #12
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801454a:	687b      	ldr	r3, [r7, #4]
}
 801454c:	4618      	mov	r0, r3
 801454e:	370c      	adds	r7, #12
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr

08014558 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8014562:	2301      	movs	r3, #1
 8014564:	220d      	movs	r2, #13
 8014566:	6839      	ldr	r1, [r7, #0]
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f7f0 fe7f 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	3708      	adds	r7, #8
 8014572:	46bd      	mov	sp, r7
 8014574:	bd80      	pop	{r7, pc}

08014576 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8014576:	b590      	push	{r4, r7, lr}
 8014578:	b083      	sub	sp, #12
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	6039      	str	r1, [r7, #0]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4618      	mov	r0, r3
 8014584:	f000 f88a 	bl	801469c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8014588:	683c      	ldr	r4, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f7ff ff12 	bl	80143b4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014590:	4603      	mov	r3, r0
 8014592:	601c      	str	r4, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	4618      	mov	r0, r3
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	bd90      	pop	{r4, r7, pc}

0801459e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	4618      	mov	r0, r3
 80145aa:	f000 f884 	bl	80146b6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80145ae:	4603      	mov	r3, r0
 80145b0:	4618      	mov	r0, r3
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f000 f883 	bl	80146ce <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80145c8:	4603      	mov	r3, r0
 80145ca:	4618      	mov	r0, r3
 80145cc:	3708      	adds	r7, #8
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b082      	sub	sp, #8
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4618      	mov	r0, r3
 80145de:	f000 f882 	bl	80146e6 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80145e2:	4603      	mov	r3, r0
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
      return __ptr;
 80145f4:	687b      	ldr	r3, [r7, #4]
    }
 80145f6:	4618      	mov	r0, r3
 80145f8:	370c      	adds	r7, #12
 80145fa:	46bd      	mov	sp, r7
 80145fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014600:	4770      	bx	lr

08014602 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8014602:	b580      	push	{r7, lr}
 8014604:	b086      	sub	sp, #24
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
 801460a:	6039      	str	r1, [r7, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8014612:	6838      	ldr	r0, [r7, #0]
 8014614:	f7ff ffdd 	bl	80145d2 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8014618:	4603      	mov	r3, r0
 801461a:	2b00      	cmp	r3, #0
 801461c:	bf0c      	ite	eq
 801461e:	2301      	moveq	r3, #1
 8014620:	2300      	movne	r3, #0
 8014622:	b2db      	uxtb	r3, r3
 8014624:	2b00      	cmp	r3, #0
 8014626:	d128      	bne.n	801467a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8014628:	f107 030c 	add.w	r3, r7, #12
 801462c:	4618      	mov	r0, r3
 801462e:	f000 f868 	bl	8014702 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8014632:	f107 030c 	add.w	r3, r7, #12
 8014636:	2101      	movs	r1, #1
 8014638:	4618      	mov	r0, r3
 801463a:	f000 f87a 	bl	8014732 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 801463e:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8014640:	6838      	ldr	r0, [r7, #0]
 8014642:	f000 f885 	bl	8014750 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8014646:	4603      	mov	r3, r0
 8014648:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 801464a:	6838      	ldr	r0, [r7, #0]
 801464c:	f7ff febf 	bl	80143ce <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8014650:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8014652:	4618      	mov	r0, r3
 8014654:	f000 f889 	bl	801476a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014658:	4603      	mov	r3, r0
 801465a:	f107 0210 	add.w	r2, r7, #16
 801465e:	f107 000c 	add.w	r0, r7, #12
 8014662:	6979      	ldr	r1, [r7, #20]
 8014664:	f000 f88c 	bl	8014780 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	697a      	ldr	r2, [r7, #20]
 801466c:	601a      	str	r2, [r3, #0]
	}
 801466e:	f107 030c 	add.w	r3, r7, #12
 8014672:	4618      	mov	r0, r3
 8014674:	f000 f851 	bl	801471a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014678:	e000      	b.n	801467c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 801467a:	bf00      	nop
	}
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	4618      	mov	r0, r3
 8014680:	3718      	adds	r7, #24
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8014686:	b480      	push	{r7}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
 801468e:	6039      	str	r1, [r7, #0]
	{ }
 8014690:	bf00      	nop
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	4618      	mov	r0, r3
 80146a8:	f000 f882 	bl	80147b0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	4618      	mov	r0, r3
 80146b0:	3708      	adds	r7, #8
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80146b6:	b580      	push	{r7, lr}
 80146b8:	b082      	sub	sp, #8
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f000 f886 	bl	80147d0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 80146c4:	4603      	mov	r3, r0
 80146c6:	4618      	mov	r0, r3
 80146c8:	3708      	adds	r7, #8
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}

080146ce <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80146ce:	b580      	push	{r7, lr}
 80146d0:	b082      	sub	sp, #8
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 f887 	bl	80147ea <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80146dc:	4603      	mov	r3, r0
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b082      	sub	sp, #8
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f000 f886 	bl	8014802 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80146f6:	4603      	mov	r3, r0
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4618      	mov	r0, r3
 80146fc:	3708      	adds	r7, #8
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014702:	b580      	push	{r7, lr}
 8014704:	b082      	sub	sp, #8
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 f886 	bl	801481c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	4618      	mov	r0, r3
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801471a:	b580      	push	{r7, lr}
 801471c:	b082      	sub	sp, #8
 801471e:	af00      	add	r7, sp, #0
 8014720:	6078      	str	r0, [r7, #4]
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 f885 	bl	8014832 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
 801473a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801473c:	2200      	movs	r2, #0
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 f881 	bl	8014848 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8014746:	4603      	mov	r3, r0
 8014748:	4618      	mov	r0, r3
 801474a:	3708      	adds	r7, #8
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	4618      	mov	r0, r3
 801475c:	f000 f89e 	bl	801489c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8014760:	4603      	mov	r3, r0
 8014762:	4618      	mov	r0, r3
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801476a:	b480      	push	{r7}
 801476c:	b083      	sub	sp, #12
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8014780:	b590      	push	{r4, r7, lr}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f899 	bl	80148c6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8014794:	4604      	mov	r4, r0
 8014796:	6838      	ldr	r0, [r7, #0]
 8014798:	f7ff ffe7 	bl	801476a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 801479c:	4603      	mov	r3, r0
 801479e:	4622      	mov	r2, r4
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f000 f89a 	bl	80148dc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80147a8:	bf00      	nop
 80147aa:	3714      	adds	r7, #20
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd90      	pop	{r4, r7, pc}

080147b0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 f8ad 	bl	8014918 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f000 f8b5 	bl	8014930 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	4618      	mov	r0, r3
 80147ca:	3708      	adds	r7, #8
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}

080147d0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	4618      	mov	r0, r3
 80147dc:	f000 f8b6 	bl	801494c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 80147e0:	4603      	mov	r3, r0
 80147e2:	4618      	mov	r0, r3
 80147e4:	3708      	adds	r7, #8
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}

080147ea <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b082      	sub	sp, #8
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 f8b5 	bl	8014962 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 80147f8:	4603      	mov	r3, r0
 80147fa:	4618      	mov	r0, r3
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}

08014802 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8014802:	b580      	push	{r7, lr}
 8014804:	b082      	sub	sp, #8
 8014806:	af00      	add	r7, sp, #0
 8014808:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4618      	mov	r0, r3
 801480e:	f000 f8b4 	bl	801497a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8014812:	4603      	mov	r3, r0
 8014814:	4618      	mov	r0, r3
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	4618      	mov	r0, r3
 8014828:	370c      	adds	r7, #12
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr

08014832 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014832:	b480      	push	{r7}
 8014834:	b083      	sub	sp, #12
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	370c      	adds	r7, #12
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f000 f89c 	bl	8014992 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801485a:	4602      	mov	r2, r0
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	4293      	cmp	r3, r2
 8014860:	bf8c      	ite	hi
 8014862:	2301      	movhi	r3, #1
 8014864:	2300      	movls	r3, #0
 8014866:	b2db      	uxtb	r3, r3
 8014868:	2b00      	cmp	r3, #0
 801486a:	bf14      	ite	ne
 801486c:	2301      	movne	r3, #1
 801486e:	2300      	moveq	r3, #0
 8014870:	b2db      	uxtb	r3, r3
 8014872:	2b00      	cmp	r3, #0
 8014874:	d007      	beq.n	8014886 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801487c:	d301      	bcc.n	8014882 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801487e:	f013 ff15 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8014882:	f013 ff10 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	011b      	lsls	r3, r3, #4
 801488a:	4618      	mov	r0, r3
 801488c:	f013 fef8 	bl	8028680 <_Znwj>
 8014890:	4603      	mov	r3, r0
 8014892:	bf00      	nop
      }
 8014894:	4618      	mov	r0, r3
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff fd85 	bl	80143b4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80148aa:	4603      	mov	r3, r0
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f7ff fd7f 	bl	80143b4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80148b6:	4603      	mov	r3, r0
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]
	return __p;
 80148bc:	68fb      	ldr	r3, [r7, #12]
      }
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}

080148c6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4618      	mov	r0, r3
 80148d2:	370c      	adds	r7, #12
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80148dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148de:	b085      	sub	sp, #20
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
 80148e8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	4619      	mov	r1, r3
 80148ee:	2010      	movs	r0, #16
 80148f0:	f7f6 f88e 	bl	800aa10 <_ZnwjPv>
 80148f4:	4605      	mov	r5, r0
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7ff ffe5 	bl	80148c6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 80148fc:	4603      	mov	r3, r0
 80148fe:	681c      	ldr	r4, [r3, #0]
 8014900:	6838      	ldr	r0, [r7, #0]
 8014902:	f7ff ff32 	bl	801476a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014906:	4632      	mov	r2, r6
 8014908:	4621      	mov	r1, r4
 801490a:	4628      	mov	r0, r5
 801490c:	f000 f84e 	bl	80149ac <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8014910:	bf00      	nop
 8014912:	3714      	adds	r7, #20
 8014914:	46bd      	mov	sp, r7
 8014916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014918 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f000 f865 	bl	80149f0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4618      	mov	r0, r3
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	2200      	movs	r2, #0
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4618      	mov	r0, r3
 8014942:	370c      	adds	r7, #12
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	4618      	mov	r0, r3
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr

08014962 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014962:	b580      	push	{r7, lr}
 8014964:	b082      	sub	sp, #8
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f000 f84b 	bl	8014a06 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 8014970:	4603      	mov	r3, r0
 8014972:	4618      	mov	r0, r3
 8014974:	3708      	adds	r7, #8
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}

0801497a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801497a:	b580      	push	{r7, lr}
 801497c:	b082      	sub	sp, #8
 801497e:	af00      	add	r7, sp, #0
 8014980:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 f84a 	bl	8014a1c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 8014988:	4603      	mov	r3, r0
 801498a:	4618      	mov	r0, r3
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8014992:	b480      	push	{r7}
 8014994:	b083      	sub	sp, #12
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801499a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801499e:	4618      	mov	r0, r3
 80149a0:	370c      	adds	r7, #12
 80149a2:	46bd      	mov	sp, r7
 80149a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a8:	4770      	bx	lr
	...

080149ac <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 80149ac:	b5b0      	push	{r4, r5, r7, lr}
 80149ae:	b086      	sub	sp, #24
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7f9 fcd0 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80149c0:	4a0a      	ldr	r2, [pc, #40]	@ (80149ec <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f103 040c 	add.w	r4, r3, #12
 80149cc:	1d3b      	adds	r3, r7, #4
 80149ce:	4618      	mov	r0, r3
 80149d0:	f000 f831 	bl	8014a36 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80149d4:	f107 0314 	add.w	r3, r7, #20
 80149d8:	462a      	mov	r2, r5
 80149da:	68b9      	ldr	r1, [r7, #8]
 80149dc:	4620      	mov	r0, r4
 80149de:	f000 f835 	bl	8014a4c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	4618      	mov	r0, r3
 80149e6:	3718      	adds	r7, #24
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bdb0      	pop	{r4, r5, r7, pc}
 80149ec:	0802b59c 	.word	0x0802b59c

080149f0 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 80149f0:	b480      	push	{r7}
 80149f2:	b083      	sub	sp, #12
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	370c      	adds	r7, #12
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr

08014a06 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a06:	b480      	push	{r7}
 8014a08:	b083      	sub	sp, #12
 8014a0a:	af00      	add	r7, sp, #0
 8014a0c:	6078      	str	r0, [r7, #4]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	4618      	mov	r0, r3
 8014a12:	370c      	adds	r7, #12
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f000 f82c 	bl	8014a84 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8014a36:	b480      	push	{r7}
 8014a38:	b083      	sub	sp, #12
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	713a      	strb	r2, [r7, #4]
 8014a58:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8014a5a:	1d3b      	adds	r3, r7, #4
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ff ffea 	bl	8014a36 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014a62:	4603      	mov	r3, r0
 8014a64:	4619      	mov	r1, r3
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f000 f817 	bl	8014a9a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f7fb fd52 	bl	8010518 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	68ba      	ldr	r2, [r7, #8]
 8014a78:	601a      	str	r2, [r3, #0]
	{ }
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3710      	adds	r7, #16
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	370c      	adds	r7, #12
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr

08014a9a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8014a9a:	b580      	push	{r7, lr}
 8014a9c:	b082      	sub	sp, #8
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	6078      	str	r0, [r7, #4]
 8014aa2:	6039      	str	r1, [r7, #0]
 8014aa4:	6838      	ldr	r0, [r7, #0]
 8014aa6:	f7ff ffc6 	bl	8014a36 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4618      	mov	r0, r3
 8014aae:	3708      	adds	r7, #8
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	4a05      	ldr	r2, [pc, #20]	@ (8014ad4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	601a      	str	r2, [r3, #0]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7f7 fe0d 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4618      	mov	r0, r3
 8014ace:	3708      	adds	r7, #8
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}
 8014ad4:	0802b59c 	.word	0x0802b59c

08014ad8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f7ff ffe7 	bl	8014ab4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014ae6:	2110      	movs	r1, #16
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f013 fdb8 	bl	802865e <_ZdlPvj>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	330c      	adds	r3, #12
 8014b04:	4618      	mov	r0, r3
 8014b06:	f000 f83f 	bl	8014b88 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	4619      	mov	r1, r3
 8014b12:	4610      	mov	r0, r2
 8014b14:	f7ff fca7 	bl	8014466 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b086      	sub	sp, #24
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	330c      	adds	r3, #12
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f000 f837 	bl	8014ba0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8014b32:	4602      	mov	r2, r0
 8014b34:	f107 0314 	add.w	r3, r7, #20
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 f83c 	bl	8014bb8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8014b40:	f107 0114 	add.w	r1, r7, #20
 8014b44:	f107 030c 	add.w	r3, r7, #12
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f000 f841 	bl	8014bd2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f7ff ffaf 	bl	8014ab4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8014b56:	f107 030c 	add.w	r3, r7, #12
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f000 f84d 	bl	8014bfa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8014b60:	f107 0314 	add.w	r3, r7, #20
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7ff fdd8 	bl	801471a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014b6a:	3718      	adds	r7, #24
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}

08014b70 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8014b70:	b480      	push	{r7}
 8014b72:	b083      	sub	sp, #12
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
        return nullptr;
 8014b7a:	2300      	movs	r3, #0
      }
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 f847 	bl	8014c24 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8014b96:	4603      	mov	r3, r0
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7fb fd84 	bl	80106b6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6039      	str	r1, [r7, #0]
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7ff fe2a 	bl	801481c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b084      	sub	sp, #16
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	60f8      	str	r0, [r7, #12]
 8014bda:	60b9      	str	r1, [r7, #8]
 8014bdc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014bde:	68b8      	ldr	r0, [r7, #8]
 8014be0:	f000 f82b 	bl	8014c3a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8014be4:	4602      	mov	r2, r0
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	601a      	str	r2, [r3, #0]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	605a      	str	r2, [r3, #4]
      { }
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b082      	sub	sp, #8
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d007      	beq.n	8014c1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6818      	ldr	r0, [r3, #0]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	2201      	movs	r2, #1
 8014c14:	4619      	mov	r1, r3
 8014c16:	f000 f81b 	bl	8014c50 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	370c      	adds	r7, #12
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014c3a:	b480      	push	{r7}
 8014c3c:	b083      	sub	sp, #12
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	4618      	mov	r0, r3
 8014c46:	370c      	adds	r7, #12
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b084      	sub	sp, #16
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	68b9      	ldr	r1, [r7, #8]
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f000 f804 	bl	8014c6e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8014c66:	bf00      	nop
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}

08014c6e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b084      	sub	sp, #16
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	60f8      	str	r0, [r7, #12]
 8014c76:	60b9      	str	r1, [r7, #8]
 8014c78:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	011b      	lsls	r3, r3, #4
 8014c7e:	4619      	mov	r1, r3
 8014c80:	68b8      	ldr	r0, [r7, #8]
 8014c82:	f013 fcec 	bl	802865e <_ZdlPvj>
      }
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <_ZSt20__throw_bad_weak_ptrv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	f014 f95e 	bl	8028f50 <abort>

08014c94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>:
    {
 8014c94:	b480      	push	{r7}
 8014c96:	b083      	sub	sp, #12
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
      if (_M_use_count == 0)
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x14>
	return false;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	e005      	b.n	8014cb4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x20>
      ++_M_use_count;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	1c5a      	adds	r2, r3, #1
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	605a      	str	r2, [r3, #4]
      return true;
 8014cb2:	2301      	movs	r3, #1
    }
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>:
    { ++_M_weak_count; }
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	1c5a      	adds	r2, r3, #1
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	609a      	str	r2, [r3, #8]
 8014cd2:	bf00      	nop
 8014cd4:	370c      	adds	r7, #12
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr

08014cde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>:
    {
 8014cde:	b580      	push	{r7, lr}
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
      if (--_M_weak_count == 0)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	1e5a      	subs	r2, r3, #1
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	609a      	str	r2, [r3, #8]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	689b      	ldr	r3, [r3, #8]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	bf0c      	ite	eq
 8014cf8:	2301      	moveq	r3, #1
 8014cfa:	2300      	movne	r3, #0
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d005      	beq.n	8014d0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv+0x30>
        _M_destroy();
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	330c      	adds	r3, #12
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	4798      	blx	r3
    }
 8014d0e:	bf00      	nop
 8014d10:	3708      	adds	r7, #8
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}

08014d16 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
    { return _M_use_count; }
 8014d16:	b480      	push	{r7}
 8014d18:	b083      	sub	sp, #12
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	4618      	mov	r0, r3
 8014d24:	370c      	adds	r7, #12
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 8014d2e:	b480      	push	{r7}
 8014d30:	af00      	add	r7, sp, #0
    return T(-1);
 8014d32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 8014d36:	4618      	mov	r0, r3
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr

08014d40 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>:
  size_t size() const {
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
    return str_.size();
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f0 fab6 	bl	80052bc <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8014d50:	4603      	mov	r3, r0
  }
 8014d52:	4618      	mov	r0, r3
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>:
  explicit operator bool() const {
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b082      	sub	sp, #8
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	6078      	str	r0, [r7, #4]
    return str_.data() != 0;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7f0 fab5 	bl	80052d4 <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	bf14      	ite	ne
 8014d70:	2301      	movne	r3, #1
 8014d72:	2300      	moveq	r3, #0
 8014d74:	b2db      	uxtb	r3, r3
  }
 8014d76:	4618      	mov	r0, r3
 8014d78:	3708      	adds	r7, #8
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>:
  SlotId head() const {
 8014d7e:	b480      	push	{r7}
 8014d80:	b083      	sub	sp, #12
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	6078      	str	r0, [r7, #4]
    return head_;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	881b      	ldrh	r3, [r3, #0]
  }
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	370c      	adds	r7, #12
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>:
  static char escapeChar(char c) {
 8014d96:	b580      	push	{r7, lr}
 8014d98:	b084      	sub	sp, #16
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8014da0:	2001      	movs	r0, #1
 8014da2:	f7f1 fa2d 	bl	8006200 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8014da6:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8014da8:	e002      	b.n	8014db0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	3302      	adds	r3, #2
 8014dae:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d005      	beq.n	8014dc4 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	79fa      	ldrb	r2, [r7, #7]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d1f2      	bne.n	8014daa <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x14>
    return p[0];
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	781b      	ldrb	r3, [r3, #0]
  }
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3710      	adds	r7, #16
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00a      	beq.n	8014df4 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x24>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	3b01      	subs	r3, #1
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7ff fff4 	bl	8014dd0 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014de8:	4602      	mov	r2, r0
 8014dea:	4613      	mov	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	4413      	add	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	e000      	b.n	8014df6 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x26>
 8014df4:	2301      	movs	r3, #1
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
	...

08014e00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b08c      	sub	sp, #48	@ 0x30
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	ed87 0b00 	vstr	d0, [r7]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8014e10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff ffdb 	bl	8014dd0 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014e1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8014e1c:	463b      	mov	r3, r7
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f000 fbe2 	bl	80155e8 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>
 8014e24:	4603      	mov	r3, r0
 8014e26:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8014e28:	ed97 7b00 	vldr	d7, [r7]
 8014e2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014e30:	ee17 3a90 	vmov	r3, s15
 8014e34:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e38:	623b      	str	r3, [r7, #32]
 8014e3a:	e011      	b.n	8014e60 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x60>
    maxDecimalPart /= 10;
 8014e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e3e:	4a44      	ldr	r2, [pc, #272]	@ (8014f50 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014e40:	fba2 2303 	umull	r2, r3, r2, r3
 8014e44:	08db      	lsrs	r3, r3, #3
 8014e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8014e48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014e54:	6a3b      	ldr	r3, [r7, #32]
 8014e56:	4a3e      	ldr	r2, [pc, #248]	@ (8014f50 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014e58:	fba2 2303 	umull	r2, r3, r2, r3
 8014e5c:	08db      	lsrs	r3, r3, #3
 8014e5e:	623b      	str	r3, [r7, #32]
 8014e60:	6a3b      	ldr	r3, [r7, #32]
 8014e62:	2b09      	cmp	r3, #9
 8014e64:	d8ea      	bhi.n	8014e3c <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x3c>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8014e66:	ed97 6b00 	vldr	d6, [r7]
 8014e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e6c:	ee07 3a90 	vmov	s15, r3
 8014e70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014e74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e7a:	ee07 3a90 	vmov	s15, r3
 8014e7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  JsonFloat remainder =
 8014e82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014e86:	ed87 7b04 	vstr	d7, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8014e8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8014e8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014e92:	ee17 3a90 	vmov	r3, s15
 8014e96:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	ee07 3a90 	vmov	s15, r3
 8014e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014ea2:	ed97 6b04 	vldr	d6, [r7, #16]
 8014ea6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014eaa:	ed87 7b04 	vstr	d7, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8014eae:	ed97 7b04 	vldr	d7, [r7, #16]
 8014eb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014eba:	ee17 2a90 	vmov	r2, s15
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8014ec4:	69fa      	ldr	r2, [r7, #28]
 8014ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d320      	bcc.n	8014f0e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal = 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	61fb      	str	r3, [r7, #28]
    integral++;
 8014ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8014ed6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d017      	beq.n	8014f0e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
 8014ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ee0:	2b09      	cmp	r3, #9
 8014ee2:	d914      	bls.n	8014f0e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
      exponent++;
 8014ee4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	3301      	adds	r3, #1
 8014eec:	b29b      	uxth	r3, r3
 8014eee:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014ef4:	e00b      	b.n	8014f0e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal /= 10;
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	4a15      	ldr	r2, [pc, #84]	@ (8014f50 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014efa:	fba2 2303 	umull	r2, r3, r2, r3
 8014efe:	08db      	lsrs	r3, r3, #3
 8014f00:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8014f02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f06:	b2db      	uxtb	r3, r3
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014f0e:	69f9      	ldr	r1, [r7, #28]
 8014f10:	4b0f      	ldr	r3, [pc, #60]	@ (8014f50 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014f12:	fba3 2301 	umull	r2, r3, r3, r1
 8014f16:	08da      	lsrs	r2, r3, #3
 8014f18:	4613      	mov	r3, r2
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	4413      	add	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	1aca      	subs	r2, r1, r3
 8014f22:	2a00      	cmp	r2, #0
 8014f24:	d103      	bne.n	8014f2e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x12e>
 8014f26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	dce3      	bgt.n	8014ef6 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0xf6>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f32:	601a      	str	r2, [r3, #0]
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	69fa      	ldr	r2, [r7, #28]
 8014f38:	605a      	str	r2, [r3, #4]
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8014f3e:	811a      	strh	r2, [r3, #8]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	7afa      	ldrb	r2, [r7, #11]
 8014f44:	729a      	strb	r2, [r3, #10]
}
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	3730      	adds	r7, #48	@ 0x30
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	cccccccd 	.word	0xcccccccd

08014f54 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(JsonString src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	1d3b      	adds	r3, r7, #4
 8014f5e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8014f62:	1d3b      	adds	r3, r7, #4
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f2 fac7 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014f6a:	6178      	str	r0, [r7, #20]
    return data ? data->asString() : JsonString();
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d005      	beq.n	8014f7e <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	6979      	ldr	r1, [r7, #20]
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7f0 fb68 	bl	800564c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8014f7c:	e002      	b.n	8014f84 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x30>
 8014f7e:	68f8      	ldr	r0, [r7, #12]
 8014f80:	f7f0 fa1e 	bl	80053c0 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
  }
 8014f84:	68f8      	ldr	r0, [r7, #12]
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8014f8c:	b590      	push	{r4, r7, lr}
 8014f8e:	b089      	sub	sp, #36	@ 0x24
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	f107 0308 	add.w	r3, r7, #8
 8014f96:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f9a:	607a      	str	r2, [r7, #4]
  JsonString str = src.as<JsonString>();
 8014f9c:	f107 0314 	add.w	r3, r7, #20
 8014fa0:	f107 0208 	add.w	r2, r7, #8
 8014fa4:	4611      	mov	r1, r2
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f000 fbea 	bl	8015780 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>
  if (str)
 8014fac:	f107 0314 	add.w	r3, r7, #20
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7ff fed2 	bl	8014d5a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d011      	beq.n	8014fe0 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    dst.assign(str.c_str(), str.size());
 8014fbc:	f107 0314 	add.w	r3, r7, #20
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7f0 fa27 	bl	8005414 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	f107 0314 	add.w	r3, r7, #20
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff feb7 	bl	8014d40 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f013 fdf1 	bl	8028bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 8014fde:	e006      	b.n	8014fee <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
    serializeJson(src, dst);
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	f107 0308 	add.w	r3, r7, #8
 8014fe6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014fea:	f000 fbd9 	bl	80157a0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>
}
 8014fee:	bf00      	nop
 8014ff0:	3724      	adds	r7, #36	@ 0x24
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd90      	pop	{r4, r7, pc}

08014ff6 <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b082      	sub	sp, #8
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	3324      	adds	r3, #36	@ 0x24
 8015002:	4618      	mov	r0, r3
 8015004:	f7f6 ff4d 	bl	800bea2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8015008:	4603      	mov	r3, r0
 801500a:	4618      	mov	r0, r3
 801500c:	3708      	adds	r7, #8
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
	...

08015014 <_ZN14TMC2208StepperD1Ev>:
		INIT_REGISTER(ENC_DEVIATION){.sr=0};

		static constexpr float default_RS = 0.075;
};

class TMC2208Stepper : public TMCStepper {
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	4a08      	ldr	r2, [pc, #32]	@ (8015040 <_ZN14TMC2208StepperD1Ev+0x2c>)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	601a      	str	r2, [r3, #0]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	334c      	adds	r3, #76	@ 0x4c
 8015026:	4618      	mov	r0, r3
 8015028:	f013 fc25 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	3334      	adds	r3, #52	@ 0x34
 8015030:	4618      	mov	r0, r3
 8015032:	f013 fc20 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	4618      	mov	r0, r3
 801503a:	3708      	adds	r7, #8
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	0802b1a8 	.word	0x0802b1a8

08015044 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 8015044:	b580      	push	{r7, lr}
 8015046:	b090      	sub	sp, #64	@ 0x40
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
 8015050:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 8015054:	f107 0310 	add.w	r3, r7, #16
 8015058:	68b9      	ldr	r1, [r7, #8]
 801505a:	4618      	mov	r0, r3
 801505c:	f013 fe1b 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8015060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015064:	6879      	ldr	r1, [r7, #4]
 8015066:	4618      	mov	r0, r3
 8015068:	f013 fe15 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801506c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8015070:	f107 0110 	add.w	r1, r7, #16
 8015074:	2300      	movs	r3, #0
 8015076:	ed97 0a00 	vldr	s0, [r7]
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7ee fdca 	bl	8003c14 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8015080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015084:	4618      	mov	r0, r3
 8015086:	f013 fbf6 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801508a:	f107 0310 	add.w	r3, r7, #16
 801508e:	4618      	mov	r0, r3
 8015090:	f013 fbf1 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	4618      	mov	r0, r3
 8015098:	3740      	adds	r7, #64	@ 0x40
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
	...

080150a0 <_ZN3TMCC1EP6Remoraf>:
	Remora* 	instance;
	float       Rsense;

public:

	TMC(Remora* _instance, float _Rsense) : instance(_instance), Rsense(_Rsense) {}
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7fc fef7 	bl	8011ea4 <_ZN6ModuleC1Ev>
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	3318      	adds	r3, #24
 80150ba:	4618      	mov	r0, r3
 80150bc:	f000 fbac 	bl	8015818 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>
 80150c0:	4a06      	ldr	r2, [pc, #24]	@ (80150dc <_ZN3TMCC1EP6Remoraf+0x3c>)
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	68ba      	ldr	r2, [r7, #8]
 80150ca:	621a      	str	r2, [r3, #32]
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	4618      	mov	r0, r3
 80150d6:	3710      	adds	r7, #16
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	0802b61c 	.word	0x0802b61c

080150e0 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3304      	adds	r3, #4
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f6 fec6 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	4618      	mov	r0, r3
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <_ZNSt10shared_ptrI3TMCED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	4618      	mov	r0, r3
 8015108:	f7ff ffea 	bl	80150e0 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	4618      	mov	r0, r3
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8015116:	b580      	push	{r7, lr}
 8015118:	b082      	sub	sp, #8
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	3304      	adds	r3, #4
 8015122:	4618      	mov	r0, r3
 8015124:	f7f6 feab 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4618      	mov	r0, r3
 801512c:	3708      	adds	r7, #8
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}

08015132 <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
 8015132:	b580      	push	{r7, lr}
 8015134:	b082      	sub	sp, #8
 8015136:	af00      	add	r7, sp, #0
 8015138:	6078      	str	r0, [r7, #4]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff ffea 	bl	8015116 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 801514c:	b590      	push	{r4, r7, lr}
 801514e:	b0b9      	sub	sp, #228	@ 0xe4
 8015150:	af04      	add	r7, sp, #16
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
    printf("Creating TMC2208 module\n");
 8015158:	484a      	ldr	r0, [pc, #296]	@ (8015284 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x138>)
 801515a:	f014 f9ab 	bl	80294b4 <puts>

    const char* comment = config["Comment"];
 801515e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015162:	4a49      	ldr	r2, [pc, #292]	@ (8015288 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x13c>)
 8015164:	68b9      	ldr	r1, [r7, #8]
 8015166:	4618      	mov	r0, r3
 8015168:	f7fd f91b 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801516c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015170:	4618      	mov	r0, r3
 8015172:	f7f2 fc91 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8015176:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    printf("Comment: %s\n", comment);
 801517a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801517e:	4843      	ldr	r0, [pc, #268]	@ (801528c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x140>)
 8015180:	f014 f928 	bl	80293d4 <iprintf>

    std::string RxPin = config["RX pin"];
 8015184:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015188:	4a41      	ldr	r2, [pc, #260]	@ (8015290 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x144>)
 801518a:	68b9      	ldr	r1, [r7, #8]
 801518c:	4618      	mov	r0, r3
 801518e:	f7f2 fc5e 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015192:	f107 031c 	add.w	r3, r7, #28
 8015196:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801519a:	4611      	mov	r1, r2
 801519c:	4618      	mov	r0, r3
 801519e:	f000 fb63 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 80151a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80151a6:	4a3b      	ldr	r2, [pc, #236]	@ (8015294 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x148>)
 80151a8:	68b9      	ldr	r1, [r7, #8]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f2 fc4f 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80151b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80151b4:	4618      	mov	r0, r3
 80151b6:	f000 fb65 	bl	8015884 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 80151ba:	eef0 7a40 	vmov.f32	s15, s0
 80151be:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t current = config["Current"];
 80151c2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80151c6:	4a34      	ldr	r2, [pc, #208]	@ (8015298 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x14c>)
 80151c8:	68b9      	ldr	r1, [r7, #8]
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fd f8e9 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80151d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80151d4:	4618      	mov	r0, r3
 80151d6:	f000 fb63 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80151da:	4603      	mov	r3, r0
 80151dc:	82fb      	strh	r3, [r7, #22]
    uint16_t microsteps = config["Microsteps"];
 80151de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80151e2:	4a2e      	ldr	r2, [pc, #184]	@ (801529c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x150>)
 80151e4:	68b9      	ldr	r1, [r7, #8]
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7fa f907 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80151ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80151f0:	4618      	mov	r0, r3
 80151f2:	f000 fb55 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80151f6:	4603      	mov	r3, r0
 80151f8:	82bb      	strh	r3, [r7, #20]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 80151fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80151fe:	4a28      	ldr	r2, [pc, #160]	@ (80152a0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8015200:	68b9      	ldr	r1, [r7, #8]
 8015202:	4618      	mov	r0, r3
 8015204:	f7fe ffa2 	bl	801414c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015208:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801520c:	4618      	mov	r0, r3
 801520e:	f7f2 fc43 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8015212:	4603      	mov	r3, r0
 8015214:	4923      	ldr	r1, [pc, #140]	@ (80152a4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8015216:	4618      	mov	r0, r3
 8015218:	f7eb f862 	bl	80002e0 <strcmp>
 801521c:	4603      	mov	r3, r0
 801521e:	2b00      	cmp	r3, #0
 8015220:	bf0c      	ite	eq
 8015222:	2301      	moveq	r3, #1
 8015224:	2300      	movne	r3, #0
 8015226:	b2db      	uxtb	r3, r3
 8015228:	74fb      	strb	r3, [r7, #19]

    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 801522a:	f107 031c 	add.w	r3, r7, #28
 801522e:	4618      	mov	r0, r3
 8015230:	f7fc f975 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015234:	4604      	mov	r4, r0
 8015236:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 801523a:	f107 0116 	add.w	r1, r7, #22
 801523e:	f107 0218 	add.w	r2, r7, #24
 8015242:	1d3b      	adds	r3, r7, #4
 8015244:	9302      	str	r3, [sp, #8]
 8015246:	f107 0313 	add.w	r3, r7, #19
 801524a:	9301      	str	r3, [sp, #4]
 801524c:	f107 0314 	add.w	r3, r7, #20
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	460b      	mov	r3, r1
 8015254:	4621      	mov	r1, r4
 8015256:	f000 fb2f 	bl	80158b8 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>
 801525a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801525e:	4619      	mov	r1, r3
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f000 fb5b 	bl	801591c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>
 8015266:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801526a:	4618      	mov	r0, r3
 801526c:	f7ff ff61 	bl	8015132 <_ZNSt10shared_ptrI7TMC2208ED1Ev>
}
 8015270:	f107 031c 	add.w	r3, r7, #28
 8015274:	4618      	mov	r0, r3
 8015276:	f013 fafe 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 801527a:	bf00      	nop
}
 801527c:	68f8      	ldr	r0, [r7, #12]
 801527e:	37d4      	adds	r7, #212	@ 0xd4
 8015280:	46bd      	mov	sp, r7
 8015282:	bd90      	pop	{r4, r7, pc}
 8015284:	0802abfc 	.word	0x0802abfc
 8015288:	0802ac14 	.word	0x0802ac14
 801528c:	0802ac1c 	.word	0x0802ac1c
 8015290:	0802ac2c 	.word	0x0802ac2c
 8015294:	0802ac34 	.word	0x0802ac34
 8015298:	0802ac3c 	.word	0x0802ac3c
 801529c:	0802ac44 	.word	0x0802ac44
 80152a0:	0802ac50 	.word	0x0802ac50
 80152a4:	0802ac60 	.word	0x0802ac60

080152a8 <_ZN3TMCD1Ev>:
class TMC : public Module, public std::enable_shared_from_this<TMC>
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	4a08      	ldr	r2, [pc, #32]	@ (80152d4 <_ZN3TMCD1Ev+0x2c>)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	601a      	str	r2, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	3318      	adds	r3, #24
 80152ba:	4618      	mov	r0, r3
 80152bc:	f000 fab9 	bl	8015832 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fc fe0a 	bl	8011edc <_ZN6ModuleD1Ev>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	4618      	mov	r0, r3
 80152cc:	3708      	adds	r7, #8
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	0802b61c 	.word	0x0802b61c

080152d8 <_ZN3TMCD0Ev>:
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f7ff ffe1 	bl	80152a8 <_ZN3TMCD1Ev>
 80152e6:	2128      	movs	r1, #40	@ 0x28
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f013 f9b8 	bl	802865e <_ZdlPvj>
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>:

TMC2208::TMC2208(std::string _rxtxPin, float _Rsense, uint16_t _mA, uint16_t _microsteps, bool _stealth, Remora* _instance)
 80152f8:	b590      	push	{r4, r7, lr}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	ed87 0a01 	vstr	s0, [r7, #4]
 8015306:	4611      	mov	r1, r2
 8015308:	461a      	mov	r2, r3
 801530a:	460b      	mov	r3, r1
 801530c:	807b      	strh	r3, [r7, #2]
 801530e:	4613      	mov	r3, r2
 8015310:	803b      	strh	r3, [r7, #0]
    : TMC{_instance, _Rsense},  // Call base class constructor
      rxtxPin(std::move(_rxtxPin)),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	ed97 0a01 	vldr	s0, [r7, #4]
 8015318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801531a:	4618      	mov	r0, r3
 801531c:	f7ff fec0 	bl	80150a0 <_ZN3TMCC1EP6Remoraf>
 8015320:	4a17      	ldr	r2, [pc, #92]	@ (8015380 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora+0x88>)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 801532c:	68b8      	ldr	r0, [r7, #8]
 801532e:	f7fc f8f6 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015332:	4603      	mov	r3, r0
 8015334:	4619      	mov	r1, r3
 8015336:	4620      	mov	r0, r4
 8015338:	f013 fa7e 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      mA(_mA),
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	887a      	ldrh	r2, [r7, #2]
 8015340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      microsteps(_microsteps),
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	883a      	ldrh	r2, [r7, #0]
 8015348:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      stealth(_stealth),
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801536e:	4623      	mov	r3, r4
 8015370:	f000 fae7 	bl	8015942 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	4618      	mov	r0, r3
 8015378:	3714      	adds	r7, #20
 801537a:	46bd      	mov	sp, r7
 801537c:	bd90      	pop	{r4, r7, pc}
 801537e:	bf00      	nop
 8015380:	0802b5f8 	.word	0x0802b5f8

08015384 <_ZN7TMC22089configureEv>:


void TMC2208::configure()
{
 8015384:	b590      	push	{r4, r7, lr}
 8015386:	b08b      	sub	sp, #44	@ 0x2c
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 801538c:	4877      	ldr	r0, [pc, #476]	@ (801556c <_ZN7TMC22089configureEv+0x1e8>)
 801538e:	f014 f891 	bl	80294b4 <puts>
    instance->getSerialThread()->startThread();
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6a1b      	ldr	r3, [r3, #32]
 8015396:	4618      	mov	r0, r3
 8015398:	f7ff fe2d 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 801539c:	4603      	mov	r3, r0
 801539e:	4618      	mov	r0, r3
 80153a0:	f005 fd56 	bl	801ae50 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f103 0218 	add.w	r2, r3, #24
 80153aa:	f107 030c 	add.w	r3, r7, #12
 80153ae:	4611      	mov	r1, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f000 fa4b 	bl	801584c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6a1b      	ldr	r3, [r3, #32]
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7ff fe1b 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 80153c0:	4604      	mov	r4, r0
 80153c2:	f107 020c 	add.w	r2, r7, #12
 80153c6:	f107 0314 	add.w	r3, r7, #20
 80153ca:	4611      	mov	r1, r2
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 fb1d 	bl	8015a0c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 80153d2:	f107 0314 	add.w	r3, r7, #20
 80153d6:	4619      	mov	r1, r3
 80153d8:	4620      	mov	r0, r4
 80153da:	f005 fca5 	bl	801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 80153de:	f107 0314 	add.w	r3, r7, #20
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7f5 ff1d 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	3348      	adds	r3, #72	@ 0x48
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 fb1d 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80153f2:	4603      	mov	r3, r0
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7ee fcbf 	bl	8003d78 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 80153fa:	485d      	ldr	r0, [pc, #372]	@ (8015570 <_ZN7TMC22089configureEv+0x1ec>)
 80153fc:	f013 ffea 	bl	80293d4 <iprintf>
    uint16_t result = driver->test_connection();
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	3348      	adds	r3, #72	@ 0x48
 8015404:	4618      	mov	r0, r3
 8015406:	f000 fb11 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801540a:	4603      	mov	r3, r0
 801540c:	4618      	mov	r0, r3
 801540e:	f7ef fa47 	bl	80048a0 <_ZN10TMCStepper15test_connectionEv>
 8015412:	4603      	mov	r3, r0
 8015414:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 8015416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015418:	2b00      	cmp	r3, #0
 801541a:	d018      	beq.n	801544e <_ZN7TMC22089configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 801541c:	4855      	ldr	r0, [pc, #340]	@ (8015574 <_ZN7TMC22089configureEv+0x1f0>)
 801541e:	f013 ffd9 	bl	80293d4 <iprintf>
        switch(result) {
 8015422:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015424:	2b01      	cmp	r3, #1
 8015426:	d002      	beq.n	801542e <_ZN7TMC22089configureEv+0xaa>
 8015428:	2b02      	cmp	r3, #2
 801542a:	d004      	beq.n	8015436 <_ZN7TMC22089configureEv+0xb2>
 801542c:	e007      	b.n	801543e <_ZN7TMC22089configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 801542e:	4852      	ldr	r0, [pc, #328]	@ (8015578 <_ZN7TMC22089configureEv+0x1f4>)
 8015430:	f014 f840 	bl	80294b4 <puts>
 8015434:	e007      	b.n	8015446 <_ZN7TMC22089configureEv+0xc2>
            case 2: printf("No power\n"); break;
 8015436:	4851      	ldr	r0, [pc, #324]	@ (801557c <_ZN7TMC22089configureEv+0x1f8>)
 8015438:	f014 f83c 	bl	80294b4 <puts>
 801543c:	e003      	b.n	8015446 <_ZN7TMC22089configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 801543e:	4850      	ldr	r0, [pc, #320]	@ (8015580 <_ZN7TMC22089configureEv+0x1fc>)
 8015440:	f014 f838 	bl	80294b4 <puts>
 8015444:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8015446:	484f      	ldr	r0, [pc, #316]	@ (8015584 <_ZN7TMC22089configureEv+0x200>)
 8015448:	f014 f834 	bl	80294b4 <puts>
 801544c:	e002      	b.n	8015454 <_ZN7TMC22089configureEv+0xd0>
    } else {
        printf("OK\n");
 801544e:	484e      	ldr	r0, [pc, #312]	@ (8015588 <_ZN7TMC22089configureEv+0x204>)
 8015450:	f014 f830 	bl	80294b4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	3348      	adds	r3, #72	@ 0x48
 8015458:	4618      	mov	r0, r3
 801545a:	f000 fae7 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801545e:	4603      	mov	r3, r0
 8015460:	2104      	movs	r1, #4
 8015462:	4618      	mov	r0, r3
 8015464:	f7ed fc53 	bl	8002d0e <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	3348      	adds	r3, #72	@ 0x48
 801546c:	4618      	mov	r0, r3
 801546e:	f000 fadd 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015472:	4603      	mov	r3, r0
 8015474:	2118      	movs	r1, #24
 8015476:	4618      	mov	r0, r3
 8015478:	f7ef fade 	bl	8004a38 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	3348      	adds	r3, #72	@ 0x48
 8015480:	4618      	mov	r0, r3
 8015482:	f000 fad3 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015486:	4603      	mov	r3, r0
 8015488:	461a      	mov	r2, r3
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8015490:	4619      	mov	r1, r3
 8015492:	4610      	mov	r0, r2
 8015494:	f7ef f968 	bl	8004768 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3348      	adds	r3, #72	@ 0x48
 801549c:	4618      	mov	r0, r3
 801549e:	f000 fac5 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154a2:	4603      	mov	r3, r0
 80154a4:	461a      	mov	r2, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80154ac:	4619      	mov	r1, r3
 80154ae:	4610      	mov	r0, r2
 80154b0:	f7ef fa12 	bl	80048d8 <_ZN10TMCStepper10microstepsEt>
    driver->en_spreadCycle(!stealth);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	3348      	adds	r3, #72	@ 0x48
 80154b8:	4618      	mov	r0, r3
 80154ba:	f000 fab7 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154be:	4602      	mov	r2, r0
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80154c6:	f083 0301 	eor.w	r3, r3, #1
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	4619      	mov	r1, r3
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7ed feab 	bl	800322a <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	3348      	adds	r3, #72	@ 0x48
 80154d8:	4618      	mov	r0, r3
 80154da:	f000 faa7 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154de:	4603      	mov	r3, r0
 80154e0:	2101      	movs	r1, #1
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7ed ffa4 	bl	8003430 <_ZN14TMC2208Stepper13pwm_autoscaleEb>
    driver->iholddelay(10);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	3348      	adds	r3, #72	@ 0x48
 80154ec:	4618      	mov	r0, r3
 80154ee:	f000 fa9d 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154f2:	4603      	mov	r3, r0
 80154f4:	210a      	movs	r1, #10
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7ed ff4f 	bl	800339a <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	3348      	adds	r3, #72	@ 0x48
 8015500:	4618      	mov	r0, r3
 8015502:	f000 fa93 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015506:	4603      	mov	r3, r0
 8015508:	2180      	movs	r1, #128	@ 0x80
 801550a:	4618      	mov	r0, r3
 801550c:	f7ef facc 	bl	8004aa8 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 8015510:	481e      	ldr	r0, [pc, #120]	@ (801558c <_ZN7TMC22089configureEv+0x208>)
 8015512:	f013 ffcf 	bl	80294b4 <puts>
    instance->getSerialThread()->stopThread();
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a1b      	ldr	r3, [r3, #32]
 801551a:	4618      	mov	r0, r3
 801551c:	f7ff fd6b 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 8015520:	4603      	mov	r3, r0
 8015522:	4618      	mov	r0, r3
 8015524:	f005 fcc1 	bl	801aeaa <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6a1b      	ldr	r3, [r3, #32]
 801552c:	4618      	mov	r0, r3
 801552e:	f7ff fd62 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 8015532:	4604      	mov	r4, r0
 8015534:	f107 020c 	add.w	r2, r7, #12
 8015538:	f107 031c 	add.w	r3, r7, #28
 801553c:	4611      	mov	r1, r2
 801553e:	4618      	mov	r0, r3
 8015540:	f000 fa64 	bl	8015a0c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8015544:	f107 031c 	add.w	r3, r7, #28
 8015548:	4619      	mov	r1, r3
 801554a:	4620      	mov	r0, r4
 801554c:	f005 fc38 	bl	801adc0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 8015550:	f107 031c 	add.w	r3, r7, #28
 8015554:	4618      	mov	r0, r3
 8015556:	f7f5 fe64 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 801555a:	f107 030c 	add.w	r3, r7, #12
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff fdcc 	bl	80150fc <_ZNSt10shared_ptrI3TMCED1Ev>
 8015564:	372c      	adds	r7, #44	@ 0x2c
 8015566:	46bd      	mov	sp, r7
 8015568:	bd90      	pop	{r4, r7, pc}
 801556a:	bf00      	nop
 801556c:	0802ac64 	.word	0x0802ac64
 8015570:	0802ac80 	.word	0x0802ac80
 8015574:	0802aca8 	.word	0x0802aca8
 8015578:	0802acc0 	.word	0x0802acc0
 801557c:	0802acd4 	.word	0x0802acd4
 8015580:	0802ace0 	.word	0x0802ace0
 8015584:	0802acf0 	.word	0x0802acf0
 8015588:	0802ad18 	.word	0x0802ad18
 801558c:	0802ad1c 	.word	0x0802ad1c

08015590 <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	3348      	adds	r3, #72	@ 0x48
 801559c:	4618      	mov	r0, r3
 801559e:	f000 fa45 	bl	8015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80155a2:	4603      	mov	r3, r0
 80155a4:	695b      	ldr	r3, [r3, #20]
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7ed f8bf 	bl	800272a <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80155ac:	bf00      	nop
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 80155b4:	b480      	push	{r7}
 80155b6:	b083      	sub	sp, #12
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
    return size_;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	685b      	ldr	r3, [r3, #4]
  }
 80155c0:	4618      	mov	r0, r3
 80155c2:	370c      	adds	r7, #12
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
    return data_;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
  }
 80155d8:	4618      	mov	r0, r3
 80155da:	370c      	adds	r7, #12
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr
 80155e4:	0000      	movs	r0, r0
	...

080155e8 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 80155e8:	b580      	push	{r7, lr}
 80155ea:	ed2d 8b02 	vpush	{d8}
 80155ee:	b088      	sub	sp, #32
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 80155f8:	2308      	movs	r3, #8
 80155fa:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 80155fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015600:	2201      	movs	r2, #1
 8015602:	fa02 f303 	lsl.w	r3, r2, r3
 8015606:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	ed93 7b00 	vldr	d7, [r3]
 801560e:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8015770 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x188>
 8015612:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	db44      	blt.n	80156a6 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xbe>
    for (; index >= 0; index--) {
 801561c:	e03f      	b.n	801569e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xb6>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	ed93 8b00 	vldr	d8, [r3]
 8015624:	f7f2 fc8c 	bl	8007f40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8015628:	4603      	mov	r3, r0
 801562a:	60bb      	str	r3, [r7, #8]
 801562c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015630:	f107 0308 	add.w	r3, r7, #8
 8015634:	4611      	mov	r1, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f7f2 fc92 	bl	8007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801563c:	eeb0 7b40 	vmov.f64	d7, d0
 8015640:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015648:	bfac      	ite	ge
 801564a:	2301      	movge	r3, #1
 801564c:	2300      	movlt	r3, #0
 801564e:	b2db      	uxtb	r3, r3
 8015650:	2b00      	cmp	r3, #0
 8015652:	d01b      	beq.n	801568c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xa4>
        value *= traits::negativeBinaryPowersOfTen()[index];
 8015654:	f7f2 fc98 	bl	8007f88 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8015658:	4603      	mov	r3, r0
 801565a:	60fb      	str	r3, [r7, #12]
 801565c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015660:	f107 030c 	add.w	r3, r7, #12
 8015664:	4611      	mov	r1, r2
 8015666:	4618      	mov	r0, r3
 8015668:	f7f2 fc7a 	bl	8007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801566c:	eeb0 6b40 	vmov.f64	d6, d0
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	ed93 7b00 	vldr	d7, [r3]
 8015676:	ee26 7b07 	vmul.f64	d7, d6, d7
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 + bit);
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	b29a      	uxth	r2, r3
 8015684:	8bfb      	ldrh	r3, [r7, #30]
 8015686:	4413      	add	r3, r2
 8015688:	b29b      	uxth	r3, r3
 801568a:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	105b      	asrs	r3, r3, #1
 8015690:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8015692:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015696:	b2db      	uxtb	r3, r3
 8015698:	3b01      	subs	r3, #1
 801569a:	b2db      	uxtb	r3, r3
 801569c:	777b      	strb	r3, [r7, #29]
 801569e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	dabb      	bge.n	801561e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x36>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	ed93 7b00 	vldr	d7, [r3]
 80156ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80156b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b4:	dd52      	ble.n	801575c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	ed93 7b00 	vldr	d7, [r3]
 80156bc:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8015778 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x190>
 80156c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80156c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c8:	d848      	bhi.n	801575c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
    for (; index >= 0; index--) {
 80156ca:	e043      	b.n	8015754 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x16c>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	ed93 8b00 	vldr	d8, [r3]
 80156d2:	f7f2 fc59 	bl	8007f88 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80156d6:	4603      	mov	r3, r0
 80156d8:	613b      	str	r3, [r7, #16]
 80156da:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80156de:	f107 0310 	add.w	r3, r7, #16
 80156e2:	4611      	mov	r1, r2
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7f2 fc3b 	bl	8007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80156ea:	eeb0 7b40 	vmov.f64	d7, d0
 80156ee:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80156f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80156f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80156fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fe:	bf4c      	ite	mi
 8015700:	2301      	movmi	r3, #1
 8015702:	2300      	movpl	r3, #0
 8015704:	b2db      	uxtb	r3, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	d01b      	beq.n	8015742 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x15a>
        value *= traits::positiveBinaryPowersOfTen()[index];
 801570a:	f7f2 fc19 	bl	8007f40 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 801570e:	4603      	mov	r3, r0
 8015710:	617b      	str	r3, [r7, #20]
 8015712:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015716:	f107 0314 	add.w	r3, r7, #20
 801571a:	4611      	mov	r1, r2
 801571c:	4618      	mov	r0, r3
 801571e:	f7f2 fc1f 	bl	8007f60 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8015722:	eeb0 6b40 	vmov.f64	d6, d0
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	ed93 7b00 	vldr	d7, [r3]
 801572c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 - bit);
 8015736:	8bfa      	ldrh	r2, [r7, #30]
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	b29b      	uxth	r3, r3
 801573c:	1ad3      	subs	r3, r2, r3
 801573e:	b29b      	uxth	r3, r3
 8015740:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	105b      	asrs	r3, r3, #1
 8015746:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8015748:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801574c:	b2db      	uxtb	r3, r3
 801574e:	3b01      	subs	r3, #1
 8015750:	b2db      	uxtb	r3, r3
 8015752:	777b      	strb	r3, [r7, #29]
 8015754:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015758:	2b00      	cmp	r3, #0
 801575a:	dab7      	bge.n	80156cc <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xe4>
  return powersOf10;
 801575c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8015760:	4618      	mov	r0, r3
 8015762:	3720      	adds	r7, #32
 8015764:	46bd      	mov	sp, r7
 8015766:	ecbd 8b02 	vpop	{d8}
 801576a:	bd80      	pop	{r7, pc}
 801576c:	f3af 8000 	nop.w
 8015770:	00000000 	.word	0x00000000
 8015774:	416312d0 	.word	0x416312d0
 8015778:	88e368f1 	.word	0x88e368f1
 801577c:	3ee4f8b5 	.word	0x3ee4f8b5

08015780 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>:
  T as() const {
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015792:	f7ff fbdf 	bl	8014f54 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 8015796:	bf00      	nop
  }
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>:
// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <
    typename TDestination,
    detail::enable_if_t<!detail::is_pointer<TDestination>::value, int> = 0>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b084      	sub	sp, #16
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	f107 0308 	add.w	r3, r7, #8
 80157aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80157ae:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 80157b0:	687a      	ldr	r2, [r7, #4]
 80157b2:	f107 0308 	add.w	r3, r7, #8
 80157b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157ba:	f000 f943 	bl	8015a44 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 80157be:	4603      	mov	r3, r0
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3710      	adds	r7, #16
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b082      	sub	sp, #8
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	3304      	adds	r3, #4
 80157d4:	4618      	mov	r0, r3
 80157d6:	f000 f960 	bl	8015a9a <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	4618      	mov	r0, r3
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <_ZNSt8weak_ptrI3TMCEC1Ev>:
      constexpr weak_ptr() noexcept = default;
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 f942 	bl	8015a78 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	4618      	mov	r0, r3
 80157f8:	3708      	adds	r7, #8
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}

080157fe <_ZNSt8weak_ptrI3TMCED1Ev>:
    class weak_ptr : public __weak_ptr<_Tp>
 80157fe:	b580      	push	{r7, lr}
 8015800:	b082      	sub	sp, #8
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	4618      	mov	r0, r3
 801580a:	f7ff ffdd 	bl	80157c8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	4618      	mov	r0, r3
 8015812:	3708      	adds	r7, #8
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>:
      constexpr enable_shared_from_this() noexcept { }
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4618      	mov	r0, r3
 8015824:	f7ff ffde 	bl	80157e4 <_ZNSt8weak_ptrI3TMCEC1Ev>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	4618      	mov	r0, r3
 801582c:	3708      	adds	r7, #8
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}

08015832 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>:
      ~enable_shared_from_this() { }
 8015832:	b580      	push	{r7, lr}
 8015834:	b082      	sub	sp, #8
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	f7ff ffde 	bl	80157fe <_ZNSt8weak_ptrI3TMCED1Ev>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	4618      	mov	r0, r3
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>:
      shared_from_this()
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
      { return shared_ptr<_Tp>(this->_M_weak_this); }
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	4619      	mov	r1, r3
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f000 f92f 	bl	8015abe <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	3708      	adds	r7, #8
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}

08015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>:
  operator T() const {
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
    return as<T>();
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6839      	ldr	r1, [r7, #0]
 8015876:	4618      	mov	r0, r3
 8015878:	f000 f931 	bl	8015ade <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>
  }
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	3708      	adds	r7, #8
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
    return as<T>();
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 f949 	bl	8015b24 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 8015892:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015896:	eeb0 0a67 	vmov.f32	s0, s15
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f000 f95f 	bl	8015b6c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 80158ae:	4603      	mov	r3, r0
  }
 80158b0:	4618      	mov	r0, r3
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80158b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158bc:	b08a      	sub	sp, #40	@ 0x28
 80158be:	af04      	add	r7, sp, #16
 80158c0:	60f8      	str	r0, [r7, #12]
 80158c2:	60b9      	str	r1, [r7, #8]
 80158c4:	607a      	str	r2, [r7, #4]
 80158c6:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80158c8:	f107 0314 	add.w	r3, r7, #20
 80158cc:	469a      	mov	sl, r3
 80158ce:	68b8      	ldr	r0, [r7, #8]
 80158d0:	f000 f96e 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80158d4:	4680      	mov	r8, r0
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 f975 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80158dc:	4681      	mov	r9, r0
 80158de:	6838      	ldr	r0, [r7, #0]
 80158e0:	f000 f97c 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80158e4:	4604      	mov	r4, r0
 80158e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80158e8:	f000 f978 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80158ec:	4605      	mov	r5, r0
 80158ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80158f0:	f7fb fe65 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80158f4:	4606      	mov	r6, r0
 80158f6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80158f8:	f000 f97b 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80158fc:	4603      	mov	r3, r0
 80158fe:	9303      	str	r3, [sp, #12]
 8015900:	9602      	str	r6, [sp, #8]
 8015902:	9501      	str	r5, [sp, #4]
 8015904:	9400      	str	r4, [sp, #0]
 8015906:	464b      	mov	r3, r9
 8015908:	4642      	mov	r2, r8
 801590a:	4651      	mov	r1, sl
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f000 f97b 	bl	8015c08 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	3718      	adds	r7, #24
 8015916:	46bd      	mov	sp, r7
 8015918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801591c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8015926:	687c      	ldr	r4, [r7, #4]
 8015928:	6838      	ldr	r0, [r7, #0]
 801592a:	f000 f99f 	bl	8015c6c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>
 801592e:	4603      	mov	r3, r0
 8015930:	4619      	mov	r1, r3
 8015932:	4620      	mov	r0, r4
 8015934:	f000 f9a5 	bl	8015c82 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	4618      	mov	r0, r3
 801593c:	370c      	adds	r7, #12
 801593e:	46bd      	mov	sp, r7
 8015940:	bd90      	pop	{r4, r7, pc}

08015942 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8015942:	b590      	push	{r4, r7, lr}
 8015944:	b091      	sub	sp, #68	@ 0x44
 8015946:	af00      	add	r7, sp, #0
 8015948:	60f8      	str	r0, [r7, #12]
 801594a:	60b9      	str	r1, [r7, #8]
 801594c:	607a      	str	r2, [r7, #4]
 801594e:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8015950:	2068      	movs	r0, #104	@ 0x68
 8015952:	f012 fe95 	bl	8028680 <_Znwj>
 8015956:	4603      	mov	r3, r0
 8015958:	461c      	mov	r4, r3
 801595a:	68b8      	ldr	r0, [r7, #8]
 801595c:	f7f9 ff4e 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015960:	4602      	mov	r2, r0
 8015962:	f107 0310 	add.w	r3, r7, #16
 8015966:	4611      	mov	r1, r2
 8015968:	4618      	mov	r0, r3
 801596a:	f013 f994 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7f9 ff44 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015974:	4602      	mov	r2, r0
 8015976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801597a:	4611      	mov	r1, r2
 801597c:	4618      	mov	r0, r3
 801597e:	f013 f98a 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8015982:	6838      	ldr	r0, [r7, #0]
 8015984:	f000 f91f 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015988:	4603      	mov	r3, r0
 801598a:	edd3 7a00 	vldr	s15, [r3]
 801598e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8015992:	f107 0310 	add.w	r3, r7, #16
 8015996:	eeb0 0a67 	vmov.f32	s0, s15
 801599a:	4619      	mov	r1, r3
 801599c:	4620      	mov	r0, r4
 801599e:	f7ff fb51 	bl	8015044 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 80159a2:	4621      	mov	r1, r4
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f000 f99a 	bl	8015cde <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80159aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80159ae:	4618      	mov	r0, r3
 80159b0:	f012 ff61 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159b4:	f107 0310 	add.w	r3, r7, #16
 80159b8:	4618      	mov	r0, r3
 80159ba:	f012 ff5c 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159be:	bf00      	nop
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	3744      	adds	r7, #68	@ 0x44
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd90      	pop	{r4, r7, pc}

080159c8 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80159c8:	b590      	push	{r4, r7, lr}
 80159ca:	b085      	sub	sp, #20
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 f992 	bl	8015cfc <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80159d8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d00c      	beq.n	80159fc <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 f997 	bl	8015d16 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>
 80159e8:	4604      	mov	r4, r0
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f000 f9a0 	bl	8015d30 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>
 80159f0:	4603      	mov	r3, r0
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4619      	mov	r1, r3
 80159f6:	4620      	mov	r0, r4
 80159f8:	f000 f9a5 	bl	8015d46 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>
	__ptr = pointer();
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2200      	movs	r2, #0
 8015a00:	601a      	str	r2, [r3, #0]
      }
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4618      	mov	r0, r3
 8015a06:	3714      	adds	r7, #20
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd90      	pop	{r4, r7, pc}

08015a0c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	683a      	ldr	r2, [r7, #0]
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f000 f9a5 	bl	8015d6c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	4618      	mov	r0, r3
 8015a26:	3708      	adds	r7, #8
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}

08015a2c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
	return get();
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f000 f9af 	bl	8015d98 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>
 8015a3a:	4603      	mov	r3, r0
      }
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3708      	adds	r7, #8
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}

08015a44 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b086      	sub	sp, #24
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	f107 0308 	add.w	r3, r7, #8
 8015a4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a52:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8015a54:	f107 0314 	add.w	r3, r7, #20
 8015a58:	6879      	ldr	r1, [r7, #4]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f000 f9a9 	bl	8015db2 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8015a60:	697a      	ldr	r2, [r7, #20]
 8015a62:	f107 0308 	add.w	r3, r7, #8
 8015a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a6a:	f000 f9b2 	bl	8015dd2 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8015a6e:	4603      	mov	r3, r0
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3718      	adds	r7, #24
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_ptr() noexcept
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
      : _M_ptr(nullptr), _M_refcount()
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	601a      	str	r2, [r3, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	3304      	adds	r3, #4
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f000 f9db 	bl	8015e46 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	4618      	mov	r0, r3
 8015a94:	3708      	adds	r7, #8
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__weak_count() noexcept
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b082      	sub	sp, #8
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d004      	beq.n	8015ab4 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_weak_release();
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7ff f915 	bl	8014cde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
      }
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3708      	adds	r7, #8
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>:
	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b082      	sub	sp, #8
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	6078      	str	r0, [r7, #4]
 8015ac6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__r) { }
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 f9c7 	bl	8015e62 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3708      	adds	r7, #8
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}

08015ade <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 8015ade:	b590      	push	{r4, r7, lr}
 8015ae0:	b087      	sub	sp, #28
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
 8015ae6:	6039      	str	r1, [r7, #0]
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	617b      	str	r3, [r7, #20]
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015af0:	6938      	ldr	r0, [r7, #16]
 8015af2:	f7f3 f852 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015af6:	4604      	mov	r4, r0
 8015af8:	6938      	ldr	r0, [r7, #16]
 8015afa:	f7f2 fedc 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015afe:	4602      	mov	r2, r0
 8015b00:	f107 0308 	add.w	r3, r7, #8
 8015b04:	4621      	mov	r1, r4
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ef ff77 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015b0c:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f107 0308 	add.w	r3, r7, #8
 8015b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015b18:	f000 f9b9 	bl	8015e8e <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
}
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	371c      	adds	r7, #28
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd90      	pop	{r4, r7, pc}

08015b24 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015b24:	b590      	push	{r4, r7, lr}
 8015b26:	b087      	sub	sp, #28
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	617b      	str	r3, [r7, #20]
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015b34:	6938      	ldr	r0, [r7, #16]
 8015b36:	f7f3 f830 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	6938      	ldr	r0, [r7, #16]
 8015b3e:	f7f2 feba 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015b42:	4602      	mov	r2, r0
 8015b44:	f107 0308 	add.w	r3, r7, #8
 8015b48:	4621      	mov	r1, r4
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7ef ff55 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015b50:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015b52:	f107 0308 	add.w	r3, r7, #8
 8015b56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b5a:	f000 f9ad 	bl	8015eb8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 8015b5e:	eef0 7a40 	vmov.f32	s15, s0
}
 8015b62:	eeb0 0a67 	vmov.f32	s0, s15
 8015b66:	371c      	adds	r7, #28
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd90      	pop	{r4, r7, pc}

08015b6c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015b6c:	b590      	push	{r4, r7, lr}
 8015b6e:	b087      	sub	sp, #28
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	617b      	str	r3, [r7, #20]
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015b7c:	6938      	ldr	r0, [r7, #16]
 8015b7e:	f7f3 f80c 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015b82:	4604      	mov	r4, r0
 8015b84:	6938      	ldr	r0, [r7, #16]
 8015b86:	f7f2 fe96 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015b8a:	4602      	mov	r2, r0
 8015b8c:	f107 0308 	add.w	r3, r7, #8
 8015b90:	4621      	mov	r1, r4
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ef ff31 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015b98:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015b9a:	f107 0308 	add.w	r3, r7, #8
 8015b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ba2:	f000 f9ad 	bl	8015f00 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 8015ba6:	4603      	mov	r3, r0
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	371c      	adds	r7, #28
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd90      	pop	{r4, r7, pc}

08015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	4618      	mov	r0, r3
 8015bbc:	370c      	adds	r7, #12
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc4:	4770      	bx	lr

08015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015bc6:	b480      	push	{r7}
 8015bc8:	b083      	sub	sp, #12
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	370c      	adds	r7, #12
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bda:	4770      	bx	lr

08015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	4618      	mov	r0, r3
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr

08015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015bf2:	b480      	push	{r7}
 8015bf4:	b083      	sub	sp, #12
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr

08015c08 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c0c:	b08b      	sub	sp, #44	@ 0x2c
 8015c0e:	af04      	add	r7, sp, #16
 8015c10:	6178      	str	r0, [r7, #20]
 8015c12:	6139      	str	r1, [r7, #16]
 8015c14:	60fa      	str	r2, [r7, #12]
 8015c16:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8015c18:	697c      	ldr	r4, [r7, #20]
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	f7ff ffc8 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015c20:	4680      	mov	r8, r0
 8015c22:	68b8      	ldr	r0, [r7, #8]
 8015c24:	f7ff ffcf 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c28:	4681      	mov	r9, r0
 8015c2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015c2c:	f7ff ffd6 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c30:	4605      	mov	r5, r0
 8015c32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015c34:	f7ff ffd2 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c38:	4606      	mov	r6, r0
 8015c3a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015c3c:	f7fb fcbf 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c40:	6078      	str	r0, [r7, #4]
 8015c42:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015c44:	f7ff ffd5 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	9303      	str	r3, [sp, #12]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	9302      	str	r3, [sp, #8]
 8015c50:	9601      	str	r6, [sp, #4]
 8015c52:	9500      	str	r5, [sp, #0]
 8015c54:	464b      	mov	r3, r9
 8015c56:	4642      	mov	r2, r8
 8015c58:	6939      	ldr	r1, [r7, #16]
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f000 f96e 	bl	8015f3c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	4618      	mov	r0, r3
 8015c64:	371c      	adds	r7, #28
 8015c66:	46bd      	mov	sp, r7
 8015c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015c6c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	4618      	mov	r0, r3
 8015c78:	370c      	adds	r7, #12
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr

08015c82 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b082      	sub	sp, #8
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	601a      	str	r2, [r3, #0]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	3304      	adds	r3, #4
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7f7 faed 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	1d1a      	adds	r2, r3, #4
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	3304      	adds	r3, #4
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	4610      	mov	r0, r2
 8015caa:	f7f7 fea4 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	601a      	str	r2, [r3, #0]
	}
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3708      	adds	r7, #8
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}

08015cbe <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8015cbe:	b580      	push	{r7, lr}
 8015cc0:	b082      	sub	sp, #8
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	6078      	str	r0, [r7, #4]
 8015cc6:	6039      	str	r1, [r7, #0]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	683a      	ldr	r2, [r7, #0]
 8015ccc:	4611      	mov	r1, r2
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f000 f974 	bl	8015fbc <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3708      	adds	r7, #8
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}

08015cde <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8015cde:	b580      	push	{r7, lr}
 8015ce0:	b082      	sub	sp, #8
 8015ce2:	af00      	add	r7, sp, #0
 8015ce4:	6078      	str	r0, [r7, #4]
 8015ce6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6839      	ldr	r1, [r7, #0]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7ff ffe6 	bl	8015cbe <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3708      	adds	r7, #8
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd80      	pop	{r7, pc}

08015cfc <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 f96c 	bl	8015fe4 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3708      	adds	r7, #8
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}

08015d16 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8015d16:	b580      	push	{r7, lr}
 8015d18:	b082      	sub	sp, #8
 8015d1a:	af00      	add	r7, sp, #0
 8015d1c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	4618      	mov	r0, r3
 8015d22:	f000 f96c 	bl	8015ffe <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8015d26:	4603      	mov	r3, r0
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3708      	adds	r7, #8
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}

08015d30 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8015d30:	b480      	push	{r7}
 8015d32:	b083      	sub	sp, #12
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	370c      	adds	r7, #12
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr

08015d46 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8015d46:	b590      	push	{r4, r7, lr}
 8015d48:	b083      	sub	sp, #12
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
 8015d4e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8015d50:	683c      	ldr	r4, [r7, #0]
 8015d52:	2c00      	cmp	r4, #0
 8015d54:	d006      	beq.n	8015d64 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_+0x1e>
 8015d56:	4620      	mov	r0, r4
 8015d58:	f7ff f95c 	bl	8015014 <_ZN14TMC2208StepperD1Ev>
 8015d5c:	2168      	movs	r1, #104	@ 0x68
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f012 fc7d 	bl	802865e <_ZdlPvj>
      }
 8015d64:	bf00      	nop
 8015d66:	370c      	adds	r7, #12
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd90      	pop	{r4, r7, pc}

08015d6c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b082      	sub	sp, #8
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	681a      	ldr	r2, [r3, #0]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	601a      	str	r2, [r3, #0]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	1d1a      	adds	r2, r3, #4
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	3304      	adds	r3, #4
 8015d86:	4619      	mov	r1, r3
 8015d88:	4610      	mov	r0, r2
 8015d8a:	f7f6 fc78 	bl	800c67e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	4618      	mov	r0, r3
 8015d92:	3708      	adds	r7, #8
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f000 f938 	bl	8016018 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015da8:	4603      	mov	r3, r0
 8015daa:	4618      	mov	r0, r3
 8015dac:	3708      	adds	r7, #8
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}

08015db2 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 8015db2:	b580      	push	{r7, lr}
 8015db4:	b082      	sub	sp, #8
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
 8015dba:	6039      	str	r1, [r7, #0]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	683a      	ldr	r2, [r7, #0]
 8015dc0:	601a      	str	r2, [r3, #0]
    str.clear();
 8015dc2:	6838      	ldr	r0, [r7, #0]
 8015dc4:	f012 fe12 	bl	80289ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8015dd2:	b580      	push	{r7, lr}
 8015dd4:	b08a      	sub	sp, #40	@ 0x28
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	f107 0308 	add.w	r3, r7, #8
 8015ddc:	e883 0003 	stmia.w	r3, {r0, r1}
 8015de0:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 8015de2:	f107 0308 	add.w	r3, r7, #8
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f1 fb86 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015dec:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 8015dee:	f107 0308 	add.w	r3, r7, #8
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7f1 fb8c 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015df8:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8015dfa:	f107 0314 	add.w	r3, r7, #20
 8015dfe:	6a3a      	ldr	r2, [r7, #32]
 8015e00:	6879      	ldr	r1, [r7, #4]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f000 f916 	bl	8016034 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8015e08:	f107 0314 	add.w	r3, r7, #20
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	6a39      	ldr	r1, [r7, #32]
 8015e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e12:	f000 f922 	bl	801605a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8015e16:	4603      	mov	r3, r0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3728      	adds	r7, #40	@ 0x28
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 8015e20:	b480      	push	{r7}
 8015e22:	b085      	sub	sp, #20
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	68ba      	ldr	r2, [r7, #8]
 8015e30:	601a      	str	r2, [r3, #0]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	605a      	str	r2, [r3, #4]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e44:	4770      	bx	lr

08015e46 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
 8015e46:	b480      	push	{r7}
 8015e48:	b083      	sub	sp, #12
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	6078      	str	r0, [r7, #4]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	601a      	str	r2, [r3, #0]
      { }
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	4618      	mov	r0, r3
 8015e58:	370c      	adds	r7, #12
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e60:	4770      	bx	lr

08015e62 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>:
	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b082      	sub	sp, #8
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
 8015e6a:	6039      	str	r1, [r7, #0]
	: _M_refcount(__r._M_refcount) // may throw
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	1d1a      	adds	r2, r3, #4
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	3304      	adds	r3, #4
 8015e74:	4619      	mov	r1, r3
 8015e76:	4610      	mov	r0, r2
 8015e78:	f000 f909 	bl	801608e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>
	  _M_ptr = __r._M_ptr;
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	601a      	str	r2, [r3, #0]
	}
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static detail::decay_t<T> fromJson(JsonVariantConst src) {
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b084      	sub	sp, #16
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	60f8      	str	r0, [r7, #12]
 8015e96:	1d3b      	adds	r3, r7, #4
 8015e98:	e883 0006 	stmia.w	r3, {r1, r2}
    T result; // Error here? See https://arduinojson.org/v7/non-default-constructible/
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f012 fcc4 	bl	802882a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v7/unsupported-as/
 8015ea2:	68fa      	ldr	r2, [r7, #12]
 8015ea4:	1d3b      	adds	r3, r7, #4
 8015ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015eaa:	f7ff f86f 	bl	8014f8c <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 8015eae:	bf00      	nop
  }
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	3710      	adds	r7, #16
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b084      	sub	sp, #16
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	463b      	mov	r3, r7
 8015ec0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015ec4:	463b      	mov	r3, r7
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7f1 fb16 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015ecc:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015ece:	463b      	mov	r3, r7
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f1 fb1d 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015ed6:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d006      	beq.n	8015eec <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015ede:	68b9      	ldr	r1, [r7, #8]
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f000 f8f9 	bl	80160d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 8015ee6:	eef0 7a40 	vmov.f32	s15, s0
 8015eea:	e001      	b.n	8015ef0 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8015eec:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015efc <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 8015ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8015ef4:	3710      	adds	r7, #16
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	00000000 	.word	0x00000000

08015f00 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b084      	sub	sp, #16
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	463b      	mov	r3, r7
 8015f08:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015f0c:	463b      	mov	r3, r7
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f1 faf2 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015f14:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015f16:	463b      	mov	r3, r7
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7f1 faf9 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015f1e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d005      	beq.n	8015f32 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8015f26:	68b9      	ldr	r1, [r7, #8]
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f000 f963 	bl	80161f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	e000      	b.n	8015f34 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015f32:	2300      	movs	r3, #0
  }
 8015f34:	4618      	mov	r0, r3
 8015f36:	3710      	adds	r7, #16
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f40:	b08e      	sub	sp, #56	@ 0x38
 8015f42:	af06      	add	r7, sp, #24
 8015f44:	61f8      	str	r0, [r7, #28]
 8015f46:	61b9      	str	r1, [r7, #24]
 8015f48:	617a      	str	r2, [r7, #20]
 8015f4a:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	2200      	movs	r2, #0
 8015f50:	601a      	str	r2, [r3, #0]
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	1d1c      	adds	r4, r3, #4
 8015f56:	69fd      	ldr	r5, [r7, #28]
 8015f58:	6978      	ldr	r0, [r7, #20]
 8015f5a:	f7ff fe29 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015f5e:	4680      	mov	r8, r0
 8015f60:	6938      	ldr	r0, [r7, #16]
 8015f62:	f7ff fe30 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f66:	4606      	mov	r6, r0
 8015f68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015f6a:	f7ff fe37 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015f72:	f7ff fe33 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f76:	60b8      	str	r0, [r7, #8]
 8015f78:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015f7a:	f7fb fb20 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015f82:	f7ff fe36 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015f86:	4603      	mov	r3, r0
 8015f88:	9304      	str	r3, [sp, #16]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	9303      	str	r3, [sp, #12]
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	9302      	str	r3, [sp, #8]
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	9600      	str	r6, [sp, #0]
 8015f98:	4643      	mov	r3, r8
 8015f9a:	69ba      	ldr	r2, [r7, #24]
 8015f9c:	4629      	mov	r1, r5
 8015f9e:	4620      	mov	r0, r4
 8015fa0:	f000 f9ba 	bl	8016318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8015fa4:	69fb      	ldr	r3, [r7, #28]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	4619      	mov	r1, r3
 8015faa:	69f8      	ldr	r0, [r7, #28]
 8015fac:	f000 fa1a 	bl	80163e4 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3720      	adds	r7, #32
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015fbc <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8015fbc:	b590      	push	{r4, r7, lr}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f000 fa2c 	bl	8016426 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8015fce:	683c      	ldr	r4, [r7, #0]
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7ff fe93 	bl	8015cfc <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	601c      	str	r4, [r3, #0]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	4618      	mov	r0, r3
 8015fde:	370c      	adds	r7, #12
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd90      	pop	{r4, r7, pc}

08015fe4 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f000 fa26 	bl	8016440 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3708      	adds	r7, #8
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}

08015ffe <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8015ffe:	b580      	push	{r7, lr}
 8016000:	b082      	sub	sp, #8
 8016002:	af00      	add	r7, sp, #0
 8016004:	6078      	str	r0, [r7, #4]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	4618      	mov	r0, r3
 801600a:	f000 fa25 	bl	8016458 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801600e:	4603      	mov	r3, r0
 8016010:	4618      	mov	r0, r3
 8016012:	3708      	adds	r7, #8
 8016014:	46bd      	mov	sp, r7
 8016016:	bd80      	pop	{r7, pc}

08016018 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8016018:	b580      	push	{r7, lr}
 801601a:	b082      	sub	sp, #8
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	4618      	mov	r0, r3
 8016024:	f000 fa24 	bl	8016470 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8016028:	4603      	mov	r3, r0
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	68b9      	ldr	r1, [r7, #8]
 8016044:	4618      	mov	r0, r3
 8016046:	f000 fa20 	bl	801648a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	609a      	str	r2, [r3, #8]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	4618      	mov	r0, r3
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
  static typename TVisitor::result_type accept(const VariantData* var,
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	60f8      	str	r0, [r7, #12]
 8016062:	60b9      	str	r1, [r7, #8]
 8016064:	607a      	str	r2, [r7, #4]
    if (var != 0)
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d006      	beq.n	801607a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 801606c:	68ba      	ldr	r2, [r7, #8]
 801606e:	6879      	ldr	r1, [r7, #4]
 8016070:	68f8      	ldr	r0, [r7, #12]
 8016072:	f000 fa1b 	bl	80164ac <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 8016076:	4603      	mov	r3, r0
 8016078:	e005      	b.n	8016086 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
      return visit.visit(nullptr);
 801607a:	2100      	movs	r1, #0
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f000 fb43 	bl	8016708 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8016082:	4603      	mov	r3, r0
 8016084:	bf00      	nop
  }
 8016086:	4618      	mov	r0, r3
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>:
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 801608e:	b580      	push	{r7, lr}
 8016090:	b082      	sub	sp, #8
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
 8016096:	6039      	str	r1, [r7, #0]
    : _M_pi(__r._M_pi)
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	601a      	str	r2, [r3, #0]
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d00a      	beq.n	80160be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x30>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fe fdf1 	bl	8014c94 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>
 80160b2:	4603      	mov	r3, r0
 80160b4:	f083 0301 	eor.w	r3, r3, #1
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d001      	beq.n	80160c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x34>
 80160be:	2301      	movs	r3, #1
 80160c0:	e000      	b.n	80160c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x36>
 80160c2:	2300      	movs	r3, #0
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x3e>
	__throw_bad_weak_ptr();
 80160c8:	f7fe fde0 	bl	8014c8c <_ZSt20__throw_bad_weak_ptrv>
    }
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	4618      	mov	r0, r3
 80160d0:	3708      	adds	r7, #8
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
	...

080160d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 80160d8:	b580      	push	{r7, lr}
 80160da:	b084      	sub	sp, #16
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80160e2:	6839      	ldr	r1, [r7, #0]
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f7f0 fa1d 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80160ea:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	791b      	ldrb	r3, [r3, #4]
 80160f0:	3b04      	subs	r3, #4
 80160f2:	2b1a      	cmp	r3, #26
 80160f4:	d874      	bhi.n	80161e0 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 80160f6:	a201      	add	r2, pc, #4	@ (adr r2, 80160fc <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 80160f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160fc:	080161bb 	.word	0x080161bb
 8016100:	080161bb 	.word	0x080161bb
 8016104:	08016169 	.word	0x08016169
 8016108:	080161e1 	.word	0x080161e1
 801610c:	080161e1 	.word	0x080161e1
 8016110:	080161e1 	.word	0x080161e1
 8016114:	08016177 	.word	0x08016177
 8016118:	080161e1 	.word	0x080161e1
 801611c:	08016185 	.word	0x08016185
 8016120:	080161e1 	.word	0x080161e1
 8016124:	080161cd 	.word	0x080161cd
 8016128:	080161e1 	.word	0x080161e1
 801612c:	080161e1 	.word	0x080161e1
 8016130:	080161e1 	.word	0x080161e1
 8016134:	080161e1 	.word	0x080161e1
 8016138:	080161e1 	.word	0x080161e1
 801613c:	080161e1 	.word	0x080161e1
 8016140:	080161e1 	.word	0x080161e1
 8016144:	080161e1 	.word	0x080161e1
 8016148:	080161e1 	.word	0x080161e1
 801614c:	080161e1 	.word	0x080161e1
 8016150:	080161e1 	.word	0x080161e1
 8016154:	08016193 	.word	0x08016193
 8016158:	080161e1 	.word	0x080161e1
 801615c:	080161a7 	.word	0x080161a7
 8016160:	080161e1 	.word	0x080161e1
 8016164:	080161d5 	.word	0x080161d5
        return static_cast<T>(content_.asBoolean);
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	ee07 3a90 	vmov	s15, r3
 8016170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016174:	e036      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	ee07 3a90 	vmov	s15, r3
 801617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016182:	e02f      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	ee07 3a90 	vmov	s15, r3
 801618c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016190:	e028      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016198:	4610      	mov	r0, r2
 801619a:	4619      	mov	r1, r3
 801619c:	f7ea fb8c 	bl	80008b8 <__aeabi_ul2f>
 80161a0:	ee07 0a90 	vmov	s15, r0
 80161a4:	e01e      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ac:	4610      	mov	r0, r2
 80161ae:	4619      	mov	r1, r3
 80161b0:	f7ea fb8a 	bl	80008c8 <__aeabi_l2f>
 80161b4:	ee07 0a90 	vmov	s15, r0
 80161b8:	e014      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	3308      	adds	r3, #8
 80161c0:	4618      	mov	r0, r3
 80161c2:	f000 fab5 	bl	8016730 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 80161c6:	eef0 7a40 	vmov.f32	s15, s0
 80161ca:	e00b      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	edd3 7a00 	vldr	s15, [r3]
 80161d2:	e007      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	ed93 7b00 	vldr	d7, [r3]
 80161da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80161de:	e001      	b.n	80161e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 80161e0:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80161f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 80161e4:	eeb0 0a67 	vmov.f32	s0, s15
 80161e8:	3710      	adds	r7, #16
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}
 80161ee:	bf00      	nop
 80161f0:	00000000 	.word	0x00000000

080161f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b084      	sub	sp, #16
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80161fe:	6839      	ldr	r1, [r7, #0]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7f0 f98f 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8016206:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	791b      	ldrb	r3, [r3, #4]
 801620c:	3b04      	subs	r3, #4
 801620e:	2b1a      	cmp	r3, #26
 8016210:	d87c      	bhi.n	801630c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 8016212:	a201      	add	r2, pc, #4	@ (adr r2, 8016218 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 8016214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016218:	080162cb 	.word	0x080162cb
 801621c:	080162d9 	.word	0x080162d9
 8016220:	08016285 	.word	0x08016285
 8016224:	0801630d 	.word	0x0801630d
 8016228:	0801630d 	.word	0x0801630d
 801622c:	0801630d 	.word	0x0801630d
 8016230:	0801628b 	.word	0x0801628b
 8016234:	0801630d 	.word	0x0801630d
 8016238:	08016299 	.word	0x08016299
 801623c:	0801630d 	.word	0x0801630d
 8016240:	080162e9 	.word	0x080162e9
 8016244:	0801630d 	.word	0x0801630d
 8016248:	0801630d 	.word	0x0801630d
 801624c:	0801630d 	.word	0x0801630d
 8016250:	0801630d 	.word	0x0801630d
 8016254:	0801630d 	.word	0x0801630d
 8016258:	0801630d 	.word	0x0801630d
 801625c:	0801630d 	.word	0x0801630d
 8016260:	0801630d 	.word	0x0801630d
 8016264:	0801630d 	.word	0x0801630d
 8016268:	0801630d 	.word	0x0801630d
 801626c:	0801630d 	.word	0x0801630d
 8016270:	080162a7 	.word	0x080162a7
 8016274:	0801630d 	.word	0x0801630d
 8016278:	080162b9 	.word	0x080162b9
 801627c:	0801630d 	.word	0x0801630d
 8016280:	080162fb 	.word	0x080162fb
        return content_.asBoolean;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	e041      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	4618      	mov	r0, r3
 8016290:	f000 fa64 	bl	801675c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 8016294:	4603      	mov	r3, r0
 8016296:	e03a      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	4618      	mov	r0, r3
 801629e:	f000 fa6f 	bl	8016780 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 80162a2:	4603      	mov	r3, r0
 80162a4:	e033      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ac:	4610      	mov	r0, r2
 80162ae:	4619      	mov	r1, r3
 80162b0:	f000 fa78 	bl	80167a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 80162b4:	4603      	mov	r3, r0
 80162b6:	e02a      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162be:	4610      	mov	r0, r2
 80162c0:	4619      	mov	r1, r3
 80162c2:	f000 fa82 	bl	80167ca <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 80162c6:	4603      	mov	r3, r0
 80162c8:	e021      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4618      	mov	r0, r3
 80162d0:	f000 fa8e 	bl	80167f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 80162d4:	4603      	mov	r3, r0
 80162d6:	e01a      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	3308      	adds	r3, #8
 80162de:	4618      	mov	r0, r3
 80162e0:	f000 fa86 	bl	80167f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 80162e4:	4603      	mov	r3, r0
 80162e6:	e012      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	edd3 7a00 	vldr	s15, [r3]
 80162ee:	eeb0 0a67 	vmov.f32	s0, s15
 80162f2:	f000 fa91 	bl	8016818 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 80162f6:	4603      	mov	r3, r0
 80162f8:	e009      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	ed93 7b00 	vldr	d7, [r3]
 8016300:	eeb0 0b47 	vmov.f64	d0, d7
 8016304:	f000 faa1 	bl	801684a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016308:	4603      	mov	r3, r0
 801630a:	e000      	b.n	801630e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 801630c:	2300      	movs	r3, #0
  }
 801630e:	4618      	mov	r0, r3
 8016310:	3710      	adds	r7, #16
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop

08016318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8016318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801631c:	b090      	sub	sp, #64	@ 0x40
 801631e:	af04      	add	r7, sp, #16
 8016320:	6178      	str	r0, [r7, #20]
 8016322:	6139      	str	r1, [r7, #16]
 8016324:	60fa      	str	r2, [r7, #12]
 8016326:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8016328:	68fa      	ldr	r2, [r7, #12]
 801632a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801632e:	4611      	mov	r1, r2
 8016330:	4618      	mov	r0, r3
 8016332:	f000 faa3 	bl	801687c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8016336:	f107 031c 	add.w	r3, r7, #28
 801633a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801633e:	4611      	mov	r1, r2
 8016340:	4618      	mov	r0, r3
 8016342:	f000 fab4 	bl	80168ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8016346:	f107 031c 	add.w	r3, r7, #28
 801634a:	4618      	mov	r0, r3
 801634c:	f000 fad7 	bl	80168fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8016350:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 8016352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016354:	4619      	mov	r1, r3
 8016356:	2058      	movs	r0, #88	@ 0x58
 8016358:	f7f4 fb5a 	bl	800aa10 <_ZnwjPv>
 801635c:	4604      	mov	r4, r0
 801635e:	68b8      	ldr	r0, [r7, #8]
 8016360:	f7ff fc26 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016364:	4680      	mov	r8, r0
 8016366:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016368:	f7ff fc2d 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801636c:	4681      	mov	r9, r0
 801636e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016370:	f7ff fc34 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016374:	4605      	mov	r5, r0
 8016376:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016378:	f7ff fc30 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801637c:	4606      	mov	r6, r0
 801637e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8016380:	f7fb f91d 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016384:	6078      	str	r0, [r7, #4]
 8016386:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016388:	f7ff fc33 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801638c:	4603      	mov	r3, r0
 801638e:	9303      	str	r3, [sp, #12]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	9302      	str	r3, [sp, #8]
 8016394:	9601      	str	r6, [sp, #4]
 8016396:	9500      	str	r5, [sp, #0]
 8016398:	464b      	mov	r3, r9
 801639a:	4642      	mov	r2, r8
 801639c:	4651      	mov	r1, sl
 801639e:	4620      	mov	r0, r4
 80163a0:	f000 fabc 	bl	801691c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>
 80163a4:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 80163a6:	f107 031c 	add.w	r3, r7, #28
 80163aa:	2100      	movs	r1, #0
 80163ac:	4618      	mov	r0, r3
 80163ae:	f000 faf9 	bl	80169a4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163b6:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80163b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163ba:	f000 fb02 	bl	80169c2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80163be:	4602      	mov	r2, r0
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	601a      	str	r2, [r3, #0]
	}
 80163c4:	f107 031c 	add.w	r3, r7, #28
 80163c8:	4618      	mov	r0, r3
 80163ca:	f000 fa83 	bl	80168d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80163ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80163d2:	4618      	mov	r0, r3
 80163d4:	f000 fa5f 	bl	8016896 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80163d8:	697b      	ldr	r3, [r7, #20]
 80163da:	4618      	mov	r0, r3
 80163dc:	3730      	adds	r7, #48	@ 0x30
 80163de:	46bd      	mov	sp, r7
 80163e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080163e4 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	1d1a      	adds	r2, r3, #4
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d002      	beq.n	80163fe <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	3318      	adds	r3, #24
 80163fc:	e000      	b.n	8016400 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 80163fe:	2300      	movs	r3, #0
 8016400:	4619      	mov	r1, r3
 8016402:	4610      	mov	r0, r2
 8016404:	f000 faeb 	bl	80169de <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8016408:	60f8      	str	r0, [r7, #12]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d006      	beq.n	801641e <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	3304      	adds	r3, #4
 8016414:	461a      	mov	r2, r3
 8016416:	6839      	ldr	r1, [r7, #0]
 8016418:	68f8      	ldr	r0, [r7, #12]
 801641a:	f000 faec 	bl	80169f6 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801641e:	bf00      	nop
 8016420:	3710      	adds	r7, #16
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}

08016426 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8016426:	b580      	push	{r7, lr}
 8016428:	b082      	sub	sp, #8
 801642a:	af00      	add	r7, sp, #0
 801642c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	4618      	mov	r0, r3
 8016432:	f000 faf0 	bl	8016a16 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	4618      	mov	r0, r3
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 faf4 	bl	8016a36 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801644e:	4603      	mov	r3, r0
 8016450:	4618      	mov	r0, r3
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f000 faf5 	bl	8016a50 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8016466:	4603      	mov	r3, r0
 8016468:	4618      	mov	r0, r3
 801646a:	3708      	adds	r7, #8
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}

08016470 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	4618      	mov	r0, r3
 801647c:	f000 faf4 	bl	8016a68 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8016480:	4603      	mov	r3, r0
 8016482:	4618      	mov	r0, r3
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 801648a:	b580      	push	{r7, lr}
 801648c:	b082      	sub	sp, #8
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
 8016492:	6039      	str	r1, [r7, #0]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	463a      	mov	r2, r7
 8016498:	4611      	mov	r1, r2
 801649a:	4618      	mov	r0, r3
 801649c:	f000 faf0 	bl	8016a80 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	4618      	mov	r0, r3
 80164a4:	3708      	adds	r7, #8
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
	...

080164ac <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 80164ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80164b0:	b08e      	sub	sp, #56	@ 0x38
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	60f8      	str	r0, [r7, #12]
 80164b6:	60b9      	str	r1, [r7, #8]
 80164b8:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 80164ba:	6879      	ldr	r1, [r7, #4]
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f7f0 f831 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80164c2:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	791b      	ldrb	r3, [r3, #4]
 80164c8:	3b03      	subs	r3, #3
 80164ca:	2b3d      	cmp	r3, #61	@ 0x3d
 80164cc:	f200 8111 	bhi.w	80166f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x246>
 80164d0:	a201      	add	r2, pc, #4	@ (adr r2, 80164d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 80164d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164d6:	bf00      	nop
 80164d8:	0801665d 	.word	0x0801665d
 80164dc:	08016615 	.word	0x08016615
 80164e0:	08016635 	.word	0x08016635
 80164e4:	080166d9 	.word	0x080166d9
 80164e8:	080166f3 	.word	0x080166f3
 80164ec:	080166f3 	.word	0x080166f3
 80164f0:	080166f3 	.word	0x080166f3
 80164f4:	080166a1 	.word	0x080166a1
 80164f8:	080166f3 	.word	0x080166f3
 80164fc:	08016689 	.word	0x08016689
 8016500:	080166f3 	.word	0x080166f3
 8016504:	080165d1 	.word	0x080165d1
 8016508:	080166f3 	.word	0x080166f3
 801650c:	080166f3 	.word	0x080166f3
 8016510:	080166f3 	.word	0x080166f3
 8016514:	080166f3 	.word	0x080166f3
 8016518:	080166f3 	.word	0x080166f3
 801651c:	080166f3 	.word	0x080166f3
 8016520:	080166f3 	.word	0x080166f3
 8016524:	080166f3 	.word	0x080166f3
 8016528:	080166f3 	.word	0x080166f3
 801652c:	080166f3 	.word	0x080166f3
 8016530:	080166f3 	.word	0x080166f3
 8016534:	080166c9 	.word	0x080166c9
 8016538:	080166f3 	.word	0x080166f3
 801653c:	080166b9 	.word	0x080166b9
 8016540:	080166f3 	.word	0x080166f3
 8016544:	080165e5 	.word	0x080165e5
 8016548:	080166f3 	.word	0x080166f3
 801654c:	08016607 	.word	0x08016607
 8016550:	080166f3 	.word	0x080166f3
 8016554:	080166f3 	.word	0x080166f3
 8016558:	080166f3 	.word	0x080166f3
 801655c:	080166f3 	.word	0x080166f3
 8016560:	080166f3 	.word	0x080166f3
 8016564:	080166f3 	.word	0x080166f3
 8016568:	080166f3 	.word	0x080166f3
 801656c:	080166f3 	.word	0x080166f3
 8016570:	080166f3 	.word	0x080166f3
 8016574:	080166f3 	.word	0x080166f3
 8016578:	080166f3 	.word	0x080166f3
 801657c:	080166f3 	.word	0x080166f3
 8016580:	080166f3 	.word	0x080166f3
 8016584:	080166f3 	.word	0x080166f3
 8016588:	080166f3 	.word	0x080166f3
 801658c:	080166f3 	.word	0x080166f3
 8016590:	080166f3 	.word	0x080166f3
 8016594:	080166f3 	.word	0x080166f3
 8016598:	080166f3 	.word	0x080166f3
 801659c:	080166f3 	.word	0x080166f3
 80165a0:	080166f3 	.word	0x080166f3
 80165a4:	080166f3 	.word	0x080166f3
 80165a8:	080166f3 	.word	0x080166f3
 80165ac:	080166f3 	.word	0x080166f3
 80165b0:	080166f3 	.word	0x080166f3
 80165b4:	080166f3 	.word	0x080166f3
 80165b8:	080166f3 	.word	0x080166f3
 80165bc:	080166f3 	.word	0x080166f3
 80165c0:	080166f3 	.word	0x080166f3
 80165c4:	080166f3 	.word	0x080166f3
 80165c8:	080166f3 	.word	0x080166f3
 80165cc:	080165f9 	.word	0x080165f9
        return visit.visit(content_.asFloat);
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	edd3 7a00 	vldr	s15, [r3]
 80165d6:	eeb0 0a67 	vmov.f32	s0, s15
 80165da:	68b8      	ldr	r0, [r7, #8]
 80165dc:	f000 fa63 	bl	8016aa6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 80165e0:	4603      	mov	r3, r0
 80165e2:	e08c      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asDouble);
 80165e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165e6:	ed93 7b00 	vldr	d7, [r3]
 80165ea:	eeb0 0b47 	vmov.f64	d0, d7
 80165ee:	68b8      	ldr	r0, [r7, #8]
 80165f0:	f000 fa6d 	bl	8016ace <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 80165f4:	4603      	mov	r3, r0
 80165f6:	e082      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asArray);
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	4619      	mov	r1, r3
 80165fc:	68b8      	ldr	r0, [r7, #8]
 80165fe:	f000 fa7a 	bl	8016af6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 8016602:	4603      	mov	r3, r0
 8016604:	e07b      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asObject);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	4619      	mov	r1, r3
 801660a:	68b8      	ldr	r0, [r7, #8]
 801660c:	f000 fab1 	bl	8016b72 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 8016610:	4603      	mov	r3, r0
 8016612:	e074      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asLinkedString, true));
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	6819      	ldr	r1, [r3, #0]
 8016618:	f107 0314 	add.w	r3, r7, #20
 801661c:	2201      	movs	r2, #1
 801661e:	4618      	mov	r0, r3
 8016620:	f7ee fedd 	bl	80053de <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8016624:	f107 0314 	add.w	r3, r7, #20
 8016628:	cb0e      	ldmia	r3, {r1, r2, r3}
 801662a:	68b8      	ldr	r0, [r7, #8]
 801662c:	f000 faeb 	bl	8016c06 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8016630:	4603      	mov	r3, r0
 8016632:	e064      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length));
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016640:	88da      	ldrh	r2, [r3, #6]
 8016642:	f107 0020 	add.w	r0, r7, #32
 8016646:	2300      	movs	r3, #0
 8016648:	f7f0 fec4 	bl	80073d4 <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 801664c:	f107 0320 	add.w	r3, r7, #32
 8016650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016652:	68b8      	ldr	r0, [r7, #8]
 8016654:	f000 fad7 	bl	8016c06 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8016658:	4603      	mov	r3, r0
                                      content_.asOwnedString->length));
 801665a:	e050      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(RawString(content_.asOwnedString->data,
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 801666a:	461a      	mov	r2, r3
 801666c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016670:	4618      	mov	r0, r3
 8016672:	f7ff fbd5 	bl	8015e20 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>
 8016676:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801667a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801667e:	68b8      	ldr	r0, [r7, #8]
 8016680:	f000 fae0 	bl	8016c44 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 8016684:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 8016686:	e03a      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	17da      	asrs	r2, r3, #31
 801668e:	4698      	mov	r8, r3
 8016690:	4691      	mov	r9, r2
 8016692:	4642      	mov	r2, r8
 8016694:	464b      	mov	r3, r9
 8016696:	68b8      	ldr	r0, [r7, #8]
 8016698:	f000 faf3 	bl	8016c82 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 801669c:	4603      	mov	r3, r0
 801669e:	e02e      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2200      	movs	r2, #0
 80166a6:	461c      	mov	r4, r3
 80166a8:	4615      	mov	r5, r2
 80166aa:	4622      	mov	r2, r4
 80166ac:	462b      	mov	r3, r5
 80166ae:	68b8      	ldr	r0, [r7, #8]
 80166b0:	f000 fafb 	bl	8016caa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 80166b4:	4603      	mov	r3, r0
 80166b6:	e022      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asInt64);
 80166b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166be:	68b8      	ldr	r0, [r7, #8]
 80166c0:	f000 fadf 	bl	8016c82 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 80166c4:	4603      	mov	r3, r0
 80166c6:	e01a      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asUint64);
 80166c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ce:	68b8      	ldr	r0, [r7, #8]
 80166d0:	f000 faeb 	bl	8016caa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 80166d4:	4603      	mov	r3, r0
 80166d6:	e012      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asBoolean != 0);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	bf14      	ite	ne
 80166e0:	2301      	movne	r3, #1
 80166e2:	2300      	moveq	r3, #0
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	4619      	mov	r1, r3
 80166e8:	68b8      	ldr	r0, [r7, #8]
 80166ea:	f000 faf2 	bl	8016cd2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 80166ee:	4603      	mov	r3, r0
 80166f0:	e005      	b.n	80166fe <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(nullptr);
 80166f2:	2100      	movs	r1, #0
 80166f4:	68b8      	ldr	r0, [r7, #8]
 80166f6:	f000 f807 	bl	8016708 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 80166fa:	4603      	mov	r3, r0
 80166fc:	bf00      	nop
  }
 80166fe:	4618      	mov	r0, r3
 8016700:	3738      	adds	r7, #56	@ 0x38
 8016702:	46bd      	mov	sp, r7
 8016704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08016708 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	4905      	ldr	r1, [pc, #20]	@ (801672c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 8016716:	4618      	mov	r0, r3
 8016718:	f000 faef 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f000 faff 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016722:	4603      	mov	r3, r0
  }
 8016724:	4618      	mov	r0, r3
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	0802ad38 	.word	0x0802ad38

08016730 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 8016730:	b580      	push	{r7, lr}
 8016732:	b086      	sub	sp, #24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016738:	f107 0308 	add.w	r3, r7, #8
 801673c:	6879      	ldr	r1, [r7, #4]
 801673e:	4618      	mov	r0, r3
 8016740:	f7f0 f954 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016744:	f107 0308 	add.w	r3, r7, #8
 8016748:	4618      	mov	r0, r3
 801674a:	f000 faf7 	bl	8016d3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 801674e:	eef0 7a40 	vmov.f32	s15, s0
}
 8016752:	eeb0 0a67 	vmov.f32	s0, s15
 8016756:	3718      	adds	r7, #24
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f000 fb2f 	bl	8016dc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d002      	beq.n	8016776 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	b29b      	uxth	r3, r3
 8016774:	e000      	b.n	8016778 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f000 fb2f 	bl	8016dec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	d002      	beq.n	801679a <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	b29b      	uxth	r3, r3
 8016798:	e000      	b.n	801679c <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 801679a:	2300      	movs	r3, #0
}
 801679c:	4618      	mov	r0, r3
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80167ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167b2:	f000 fb32 	bl	8016e1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80167b6:	4603      	mov	r3, r0
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d001      	beq.n	80167c0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 80167bc:	883b      	ldrh	r3, [r7, #0]
 80167be:	e000      	b.n	80167c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b082      	sub	sp, #8
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80167d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167d8:	f000 fb38 	bl	8016e4c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d001      	beq.n	80167e6 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 80167e2:	883b      	ldrh	r3, [r7, #0]
 80167e4:	e000      	b.n	80167e8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 80167e6:	2300      	movs	r3, #0
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b086      	sub	sp, #24
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80167f8:	f107 0308 	add.w	r3, r7, #8
 80167fc:	6879      	ldr	r1, [r7, #4]
 80167fe:	4618      	mov	r0, r3
 8016800:	f7f0 f8f4 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016804:	f107 0308 	add.w	r3, r7, #8
 8016808:	4618      	mov	r0, r3
 801680a:	f000 fb3f 	bl	8016e8c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 801680e:	4603      	mov	r3, r0
}
 8016810:	4618      	mov	r0, r3
 8016812:	3718      	adds	r7, #24
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}

08016818 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 8016818:	b580      	push	{r7, lr}
 801681a:	b082      	sub	sp, #8
 801681c:	af00      	add	r7, sp, #0
 801681e:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016822:	ed97 0a01 	vldr	s0, [r7, #4]
 8016826:	f000 fb77 	bl	8016f18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801682a:	4603      	mov	r3, r0
 801682c:	2b00      	cmp	r3, #0
 801682e:	d007      	beq.n	8016840 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 8016830:	edd7 7a01 	vldr	s15, [r7, #4]
 8016834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016838:	ee17 3a90 	vmov	r3, s15
 801683c:	b29b      	uxth	r3, r3
 801683e:	e000      	b.n	8016842 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 8016840:	2300      	movs	r3, #0
}
 8016842:	4618      	mov	r0, r3
 8016844:	3708      	adds	r7, #8
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 801684a:	b580      	push	{r7, lr}
 801684c:	b082      	sub	sp, #8
 801684e:	af00      	add	r7, sp, #0
 8016850:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016854:	ed97 0b00 	vldr	d0, [r7]
 8016858:	f000 fb86 	bl	8016f68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801685c:	4603      	mov	r3, r0
 801685e:	2b00      	cmp	r3, #0
 8016860:	d007      	beq.n	8016872 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 8016862:	ed97 7b00 	vldr	d7, [r7]
 8016866:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801686a:	ee17 3a90 	vmov	r3, s15
 801686e:	b29b      	uxth	r3, r3
 8016870:	e000      	b.n	8016874 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 8016872:	2300      	movs	r3, #0
}
 8016874:	4618      	mov	r0, r3
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f000 fb96 	bl	8016fb8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	4618      	mov	r0, r3
 8016890:	3708      	adds	r7, #8
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}

08016896 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8016896:	b580      	push	{r7, lr}
 8016898:	b082      	sub	sp, #8
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 fb95 	bl	8016fce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	4618      	mov	r0, r3
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b082      	sub	sp, #8
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80168b8:	2101      	movs	r1, #1
 80168ba:	6838      	ldr	r0, [r7, #0]
 80168bc:	f000 fb92 	bl	8016fe4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80168c0:	4603      	mov	r3, r0
 80168c2:	461a      	mov	r2, r3
 80168c4:	6839      	ldr	r1, [r7, #0]
 80168c6:	6878      	ldr	r0, [r7, #4]
 80168c8:	f000 fb9b 	bl	8017002 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d007      	beq.n	80168f4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	6818      	ldr	r0, [r3, #0]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	2201      	movs	r2, #1
 80168ee:	4619      	mov	r1, r3
 80168f0:	f000 fb9b 	bl	801702a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	4618      	mov	r0, r3
 80168f8:	3708      	adds	r7, #8
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}

080168fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80168fe:	b580      	push	{r7, lr}
 8016900:	b082      	sub	sp, #8
 8016902:	af00      	add	r7, sp, #0
 8016904:	6078      	str	r0, [r7, #4]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	4618      	mov	r0, r3
 801690c:	f000 fb9c 	bl	8017048 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8016910:	4603      	mov	r3, r0
 8016912:	4618      	mov	r0, r3
 8016914:	3708      	adds	r7, #8
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
	...

0801691c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016920:	b088      	sub	sp, #32
 8016922:	af04      	add	r7, sp, #16
 8016924:	60f8      	str	r0, [r7, #12]
 8016926:	7239      	strb	r1, [r7, #8]
 8016928:	607a      	str	r2, [r7, #4]
 801692a:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	4618      	mov	r0, r3
 8016930:	f7f7 fd16 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8016934:	4a1a      	ldr	r2, [pc, #104]	@ (80169a0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_+0x84>)
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	601a      	str	r2, [r3, #0]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	330c      	adds	r3, #12
 801693e:	4621      	mov	r1, r4
 8016940:	4618      	mov	r0, r3
 8016942:	f000 fb8c 	bl	801705e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8016946:	68f8      	ldr	r0, [r7, #12]
 8016948:	f000 f83b 	bl	80169c2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801694c:	4680      	mov	r8, r0
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f7ff f92e 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016954:	4681      	mov	r9, r0
 8016956:	6838      	ldr	r0, [r7, #0]
 8016958:	f7ff f935 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801695c:	4682      	mov	sl, r0
 801695e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016960:	f7ff f93c 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016964:	4604      	mov	r4, r0
 8016966:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016968:	f7ff f938 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801696c:	4605      	mov	r5, r0
 801696e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016970:	f7fa fe25 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016974:	4606      	mov	r6, r0
 8016976:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016978:	f7ff f93b 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801697c:	4603      	mov	r3, r0
 801697e:	f107 0008 	add.w	r0, r7, #8
 8016982:	9303      	str	r3, [sp, #12]
 8016984:	9602      	str	r6, [sp, #8]
 8016986:	9501      	str	r5, [sp, #4]
 8016988:	9400      	str	r4, [sp, #0]
 801698a:	4653      	mov	r3, sl
 801698c:	464a      	mov	r2, r9
 801698e:	4641      	mov	r1, r8
 8016990:	f000 fb74 	bl	801707c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	4618      	mov	r0, r3
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169a0:	0802b5dc 	.word	0x0802b5dc

080169a4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80169a4:	b480      	push	{r7}
 80169a6:	b083      	sub	sp, #12
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
 80169ac:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2200      	movs	r2, #0
 80169b2:	605a      	str	r2, [r3, #4]
	return *this;
 80169b4:	687b      	ldr	r3, [r7, #4]
      }
 80169b6:	4618      	mov	r0, r3
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr

080169c2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b082      	sub	sp, #8
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	330c      	adds	r3, #12
 80169ce:	4618      	mov	r0, r3
 80169d0:	f000 fb82 	bl	80170d8 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 80169d4:	4603      	mov	r3, r0
 80169d6:	4618      	mov	r0, r3
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>:
      __enable_shared_from_this_base(const __shared_count<>&,
 80169de:	b480      	push	{r7}
 80169e0:	b083      	sub	sp, #12
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
      { return __p; }
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	4618      	mov	r0, r3
 80169ec:	370c      	adds	r7, #12
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr

080169f6 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b084      	sub	sp, #16
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	60f8      	str	r0, [r7, #12]
 80169fe:	60b9      	str	r1, [r7, #8]
 8016a00:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	68b9      	ldr	r1, [r7, #8]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f000 fb71 	bl	80170f0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8016a0e:	bf00      	nop
 8016a10:	3710      	adds	r7, #16
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}

08016a16 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8016a16:	b580      	push	{r7, lr}
 8016a18:	b082      	sub	sp, #8
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8016a1e:	6878      	ldr	r0, [r7, #4]
 8016a20:	f000 fb84 	bl	801712c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f000 fb8c 	bl	8017144 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3708      	adds	r7, #8
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}

08016a36 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b082      	sub	sp, #8
 8016a3a:	af00      	add	r7, sp, #0
 8016a3c:	6078      	str	r0, [r7, #4]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	4618      	mov	r0, r3
 8016a42:	f000 fb8d 	bl	8017160 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>
 8016a46:	4603      	mov	r3, r0
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f000 fb8c 	bl	8017176 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	4618      	mov	r0, r3
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f000 fb8c 	bl	801718e <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8016a76:	4603      	mov	r3, r0
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3708      	adds	r7, #8
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8016a80:	b480      	push	{r7}
 8016a82:	b083      	sub	sp, #12
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	6039      	str	r1, [r7, #0]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	683a      	ldr	r2, [r7, #0]
 8016a8e:	6812      	ldr	r2, [r2, #0]
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	605a      	str	r2, [r3, #4]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	370c      	adds	r7, #12
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa4:	4770      	bx	lr

08016aa6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b082      	sub	sp, #8
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	ed97 0a00 	vldr	s0, [r7]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f000 fbac 	bl	8017216 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 f92e 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016ac4:	4603      	mov	r3, r0
  }
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}

08016ace <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8016ace:	b580      	push	{r7, lr}
 8016ad0:	b084      	sub	sp, #16
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	60f8      	str	r0, [r7, #12]
 8016ad6:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	ed97 0b00 	vldr	d0, [r7]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f000 fbac 	bl	801723e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f000 f91a 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016aec:	4603      	mov	r3, r0
  }
 8016aee:	4618      	mov	r0, r3
 8016af0:	3710      	adds	r7, #16
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}

08016af6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 8016af6:	b580      	push	{r7, lr}
 8016af8:	b084      	sub	sp, #16
 8016afa:	af00      	add	r7, sp, #0
 8016afc:	6078      	str	r0, [r7, #4]
 8016afe:	6039      	str	r1, [r7, #0]
    write('[');
 8016b00:	215b      	movs	r1, #91	@ 0x5b
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f000 fbab 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fe f937 	bl	8014d7e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016b10:	4603      	mov	r3, r0
 8016b12:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 8016b14:	e01c      	b.n	8016b50 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	689b      	ldr	r3, [r3, #8]
 8016b1a:	89fa      	ldrh	r2, [r7, #14]
 8016b1c:	4611      	mov	r1, r2
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7ef fad1 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016b24:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	689b      	ldr	r3, [r3, #8]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	6879      	ldr	r1, [r7, #4]
 8016b2e:	68b8      	ldr	r0, [r7, #8]
 8016b30:	f7ff fcbc 	bl	80164ac <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016b34:	68b8      	ldr	r0, [r7, #8]
 8016b36:	f7ee fd2f 	bl	8005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016b3e:	89fb      	ldrh	r3, [r7, #14]
 8016b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b44:	4293      	cmp	r3, r2
 8016b46:	d003      	beq.n	8016b50 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 8016b48:	212c      	movs	r1, #44	@ 0x2c
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f000 fb87 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 8016b50:	89fb      	ldrh	r3, [r7, #14]
 8016b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b56:	4293      	cmp	r3, r2
 8016b58:	d1dd      	bne.n	8016b16 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 8016b5a:	215d      	movs	r1, #93	@ 0x5d
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f000 fb7e 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 f8dc 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b68:	4603      	mov	r3, r0
  }
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}

08016b72 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 8016b72:	b580      	push	{r7, lr}
 8016b74:	b084      	sub	sp, #16
 8016b76:	af00      	add	r7, sp, #0
 8016b78:	6078      	str	r0, [r7, #4]
 8016b7a:	6039      	str	r1, [r7, #0]
    write('{');
 8016b7c:	217b      	movs	r1, #123	@ 0x7b
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f000 fb6d 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f7fe f8f9 	bl	8014d7e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 8016b90:	2301      	movs	r3, #1
 8016b92:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016b94:	e026      	b.n	8016be4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	689b      	ldr	r3, [r3, #8]
 8016b9a:	89fa      	ldrh	r2, [r7, #14]
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7ef fa91 	bl	80060c6 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016ba4:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	689b      	ldr	r3, [r3, #8]
 8016baa:	461a      	mov	r2, r3
 8016bac:	6879      	ldr	r1, [r7, #4]
 8016bae:	68b8      	ldr	r0, [r7, #8]
 8016bb0:	f7ff fc7c 	bl	80164ac <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016bb4:	68b8      	ldr	r0, [r7, #8]
 8016bb6:	f7ee fcef 	bl	8005598 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016bbe:	89fb      	ldrh	r3, [r7, #14]
 8016bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016bc4:	4293      	cmp	r3, r2
 8016bc6:	d009      	beq.n	8016bdc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8016bc8:	7b7b      	ldrb	r3, [r7, #13]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d001      	beq.n	8016bd2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8016bce:	233a      	movs	r3, #58	@ 0x3a
 8016bd0:	e000      	b.n	8016bd4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 8016bd2:	232c      	movs	r3, #44	@ 0x2c
 8016bd4:	4619      	mov	r1, r3
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fb41 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8016bdc:	7b7b      	ldrb	r3, [r7, #13]
 8016bde:	f083 0301 	eor.w	r3, r3, #1
 8016be2:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016be4:	89fb      	ldrh	r3, [r7, #14]
 8016be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016bea:	4293      	cmp	r3, r2
 8016bec:	d1d3      	bne.n	8016b96 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8016bee:	217d      	movs	r1, #125	@ 0x7d
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f000 fb34 	bl	801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 f892 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016bfc:	4603      	mov	r3, r0
  }
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}

08016c06 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 8016c06:	b5b0      	push	{r4, r5, r7, lr}
 8016c08:	b084      	sub	sp, #16
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	60f8      	str	r0, [r7, #12]
 8016c0e:	4638      	mov	r0, r7
 8016c10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 8016c14:	68fc      	ldr	r4, [r7, #12]
 8016c16:	463b      	mov	r3, r7
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7ee fbfb 	bl	8005414 <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8016c1e:	4605      	mov	r5, r0
 8016c20:	463b      	mov	r3, r7
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7fe f88c 	bl	8014d40 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f000 fb25 	bl	801727e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 8016c34:	68f8      	ldr	r0, [r7, #12]
 8016c36:	f000 f873 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016c3a:	4603      	mov	r3, r0
  }
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3710      	adds	r7, #16
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bdb0      	pop	{r4, r5, r7, pc}

08016c44 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 8016c44:	b5b0      	push	{r4, r5, r7, lr}
 8016c46:	b084      	sub	sp, #16
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	1d3b      	adds	r3, r7, #4
 8016c4e:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 8016c52:	68fc      	ldr	r4, [r7, #12]
 8016c54:	1d3b      	adds	r3, r7, #4
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7fe fcb8 	bl	80155cc <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>
 8016c5c:	4605      	mov	r5, r0
 8016c5e:	1d3b      	adds	r3, r7, #4
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7fe fca7 	bl	80155b4 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>
 8016c66:	4603      	mov	r3, r0
 8016c68:	461a      	mov	r2, r3
 8016c6a:	4629      	mov	r1, r5
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f000 fb2b 	bl	80172c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8016c72:	68f8      	ldr	r0, [r7, #12]
 8016c74:	f000 f854 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016c78:	4603      	mov	r3, r0
  }
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3710      	adds	r7, #16
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bdb0      	pop	{r4, r5, r7, pc}

08016c82 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 8016c82:	b580      	push	{r7, lr}
 8016c84:	b084      	sub	sp, #16
 8016c86:	af00      	add	r7, sp, #0
 8016c88:	60f8      	str	r0, [r7, #12]
 8016c8a:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016c8e:	68f9      	ldr	r1, [r7, #12]
 8016c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c94:	4608      	mov	r0, r1
 8016c96:	f000 fb27 	bl	80172e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016c9a:	68f8      	ldr	r0, [r7, #12]
 8016c9c:	f000 f840 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016ca0:	4603      	mov	r3, r0
  }
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3710      	adds	r7, #16
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}

08016caa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 8016caa:	b580      	push	{r7, lr}
 8016cac:	b084      	sub	sp, #16
 8016cae:	af00      	add	r7, sp, #0
 8016cb0:	60f8      	str	r0, [r7, #12]
 8016cb2:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016cb6:	68f9      	ldr	r1, [r7, #12]
 8016cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cbc:	4608      	mov	r0, r1
 8016cbe:	f000 fb37 	bl	8017330 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016cc2:	68f8      	ldr	r0, [r7, #12]
 8016cc4:	f000 f82c 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016cc8:	4603      	mov	r3, r0
  }
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3710      	adds	r7, #16
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b082      	sub	sp, #8
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	6078      	str	r0, [r7, #4]
 8016cda:	460b      	mov	r3, r1
 8016cdc:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	78fa      	ldrb	r2, [r7, #3]
 8016ce2:	4611      	mov	r1, r2
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f000 fb59 	bl	801739c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f000 f818 	bl	8016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016cf0:	4603      	mov	r3, r0
  }
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}

08016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8016cfa:	b590      	push	{r4, r7, lr}
 8016cfc:	b083      	sub	sp, #12
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
 8016d02:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8016d04:	687c      	ldr	r4, [r7, #4]
 8016d06:	6838      	ldr	r0, [r7, #0]
 8016d08:	f7e9 fb4a 	bl	80003a0 <strlen>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	461a      	mov	r2, r3
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	4620      	mov	r0, r4
 8016d14:	f000 fb5c 	bl	80173d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8016d18:	bf00      	nop
 8016d1a:	370c      	adds	r7, #12
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd90      	pop	{r4, r7, pc}

08016d20 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f000 fb66 	bl	80173fc <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016d30:	4603      	mov	r3, r0
  }
 8016d32:	4618      	mov	r0, r3
 8016d34:	3708      	adds	r7, #8
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
	...

08016d3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	3b01      	subs	r3, #1
 8016d4a:	2b03      	cmp	r3, #3
 8016d4c:	d832      	bhi.n	8016db4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 8016d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d54 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8016d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d54:	08016d65 	.word	0x08016d65
 8016d58:	08016d79 	.word	0x08016d79
 8016d5c:	08016d8d 	.word	0x08016d8d
 8016d60:	08016da1 	.word	0x08016da1
        return convertNumber<T>(value_.asFloat);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8016d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8016d6e:	f000 fb52 	bl	8017416 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8016d72:	eef0 7a40 	vmov.f32	s15, s0
 8016d76:	e01f      	b.n	8016db8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d7e:	4610      	mov	r0, r2
 8016d80:	4619      	mov	r1, r3
 8016d82:	f000 fb5f 	bl	8017444 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8016d86:	eef0 7a40 	vmov.f32	s15, s0
 8016d8a:	e015      	b.n	8016db8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d92:	4610      	mov	r0, r2
 8016d94:	4619      	mov	r1, r3
 8016d96:	f000 fb70 	bl	801747a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 8016d9a:	eef0 7a40 	vmov.f32	s15, s0
 8016d9e:	e00b      	b.n	8016db8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	ed93 7b02 	vldr	d7, [r3, #8]
 8016da6:	eeb0 0b47 	vmov.f64	d0, d7
 8016daa:	f000 fb81 	bl	80174b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 8016dae:	eef0 7a40 	vmov.f32	s15, s0
 8016db2:	e001      	b.n	8016db8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 8016db4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016dc4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 8016db8:	eeb0 0a67 	vmov.f32	s0, s15
 8016dbc:	3708      	adds	r7, #8
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	00000000 	.word	0x00000000

08016dc8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016dd0:	f7fd ffad 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	bf94      	ite	ls
 8016dde:	2301      	movls	r3, #1
 8016de0:	2300      	movhi	r3, #0
 8016de2:	b2db      	uxtb	r3, r3
}
 8016de4:	4618      	mov	r0, r3
 8016de6:	3708      	adds	r7, #8
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	da01      	bge.n	8016dfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	e009      	b.n	8016e12 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016dfe:	f7fd ff96 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e02:	4603      	mov	r3, r0
 8016e04:	461a      	mov	r2, r3
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	bfd4      	ite	le
 8016e0c:	2301      	movle	r3, #1
 8016e0e:	2300      	movgt	r3, #0
 8016e10:	b2db      	uxtb	r3, r3
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3708      	adds	r7, #8
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}

08016e1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e1a:	b5b0      	push	{r4, r5, r7, lr}
 8016e1c:	b082      	sub	sp, #8
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e24:	f7fd ff83 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	461c      	mov	r4, r3
 8016e30:	4615      	mov	r5, r2
 8016e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e36:	4294      	cmp	r4, r2
 8016e38:	eb75 0303 	sbcs.w	r3, r5, r3
 8016e3c:	bf2c      	ite	cs
 8016e3e:	2301      	movcs	r3, #1
 8016e40:	2300      	movcc	r3, #0
 8016e42:	b2db      	uxtb	r3, r3
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	3708      	adds	r7, #8
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bdb0      	pop	{r4, r5, r7, pc}

08016e4c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e4c:	b5b0      	push	{r4, r5, r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8016e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	da01      	bge.n	8016e62 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	e00f      	b.n	8016e82 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e62:	f7fd ff64 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e66:	4603      	mov	r3, r0
 8016e68:	b29b      	uxth	r3, r3
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	461c      	mov	r4, r3
 8016e6e:	4615      	mov	r5, r2
 8016e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e74:	4294      	cmp	r4, r2
 8016e76:	eb75 0303 	sbcs.w	r3, r5, r3
 8016e7a:	bfac      	ite	ge
 8016e7c:	2301      	movge	r3, #1
 8016e7e:	2300      	movlt	r3, #0
 8016e80:	b2db      	uxtb	r3, r3
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3708      	adds	r7, #8
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016e8c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	2b03      	cmp	r3, #3
 8016e9c:	d82e      	bhi.n	8016efc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 8016e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8016ea4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8016ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ea4:	08016eb5 	.word	0x08016eb5
 8016ea8:	08016ec7 	.word	0x08016ec7
 8016eac:	08016ed9 	.word	0x08016ed9
 8016eb0:	08016eeb 	.word	0x08016eeb
        return convertNumber<T>(value_.asFloat);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8016eba:	eeb0 0a67 	vmov.f32	s0, s15
 8016ebe:	f7ff fcab 	bl	8016818 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	e01b      	b.n	8016efe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016ecc:	4610      	mov	r0, r2
 8016ece:	4619      	mov	r1, r3
 8016ed0:	f7ff fc7b 	bl	80167ca <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	e012      	b.n	8016efe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016ede:	4610      	mov	r0, r2
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	f7ff fc5f 	bl	80167a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	e009      	b.n	8016efe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	ed93 7b02 	vldr	d7, [r3, #8]
 8016ef0:	eeb0 0b47 	vmov.f64	d0, d7
 8016ef4:	f7ff fca9 	bl	801684a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	e000      	b.n	8016efe <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 8016efc:	2300      	movs	r3, #0
  }
 8016efe:	4618      	mov	r0, r3
 8016f00:	3708      	adds	r7, #8
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
 8016f06:	bf00      	nop

08016f08 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 8016f08:	b480      	push	{r7}
 8016f0a:	af00      	add	r7, sp, #0
    return 0;
 8016f0c:	2300      	movs	r3, #0
  }
 8016f0e:	4618      	mov	r0, r3
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr

08016f18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8016f22:	f7ff fff1 	bl	8016f08 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016f26:	4603      	mov	r3, r0
 8016f28:	ee07 3a90 	vmov	s15, r3
 8016f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f30:	ed97 7a01 	vldr	s14, [r7, #4]
 8016f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f3c:	db0f      	blt.n	8016f5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016f3e:	f7fd fef6 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016f42:	4603      	mov	r3, r0
 8016f44:	ee07 3a90 	vmov	s15, r3
 8016f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016f4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8016f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f58:	d801      	bhi.n	8016f5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	e000      	b.n	8016f60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016f5e:	2300      	movs	r3, #0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3708      	adds	r7, #8
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b082      	sub	sp, #8
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8016f72:	f7ff ffc9 	bl	8016f08 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016f76:	4603      	mov	r3, r0
 8016f78:	ee07 3a90 	vmov	s15, r3
 8016f7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016f80:	ed97 6b00 	vldr	d6, [r7]
 8016f84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f8c:	db0f      	blt.n	8016fae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016f8e:	f7fd fece 	bl	8014d2e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016f92:	4603      	mov	r3, r0
 8016f94:	ee07 3a90 	vmov	s15, r3
 8016f98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016f9c:	ed97 6b00 	vldr	d6, [r7]
 8016fa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa8:	d801      	bhi.n	8016fae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016faa:	2301      	movs	r3, #1
 8016fac:	e000      	b.n	8016fb0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016fae:	2300      	movs	r3, #0
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	3708      	adds	r7, #8
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}

08016fb8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016fb8:	b480      	push	{r7}
 8016fba:	b083      	sub	sp, #12
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	370c      	adds	r7, #12
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fcc:	4770      	bx	lr

08016fce <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016fce:	b480      	push	{r7}
 8016fd0:	b083      	sub	sp, #12
 8016fd2:	af00      	add	r7, sp, #0
 8016fd4:	6078      	str	r0, [r7, #4]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	370c      	adds	r7, #12
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8016fee:	2200      	movs	r2, #0
 8016ff0:	6839      	ldr	r1, [r7, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 fa76 	bl	80174e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3708      	adds	r7, #8
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}

08017002 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8017002:	b580      	push	{r7, lr}
 8017004:	b084      	sub	sp, #16
 8017006:	af00      	add	r7, sp, #0
 8017008:	60f8      	str	r0, [r7, #12]
 801700a:	60b9      	str	r1, [r7, #8]
 801700c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801700e:	68b8      	ldr	r0, [r7, #8]
 8017010:	f000 fa96 	bl	8017540 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8017014:	4602      	mov	r2, r0
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	601a      	str	r2, [r3, #0]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	687a      	ldr	r2, [r7, #4]
 801701e:	605a      	str	r2, [r3, #4]
      { }
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}

0801702a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	60f8      	str	r0, [r7, #12]
 8017032:	60b9      	str	r1, [r7, #8]
 8017034:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	68b9      	ldr	r1, [r7, #8]
 801703a:	68f8      	ldr	r0, [r7, #12]
 801703c:	f000 fa8b 	bl	8017556 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8017040:	bf00      	nop
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8017048:	b480      	push	{r7}
 801704a:	b083      	sub	sp, #12
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8017050:	687b      	ldr	r3, [r7, #4]
    }
 8017052:	4618      	mov	r0, r3
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705c:	4770      	bx	lr

0801705e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801705e:	b580      	push	{r7, lr}
 8017060:	b082      	sub	sp, #8
 8017062:	af00      	add	r7, sp, #0
 8017064:	6078      	str	r0, [r7, #4]
 8017066:	7039      	strb	r1, [r7, #0]
 8017068:	463b      	mov	r3, r7
 801706a:	4619      	mov	r1, r3
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f7f7 fb91 	bl	800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	4618      	mov	r0, r3
 8017076:	3708      	adds	r7, #8
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}

0801707c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801707c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017080:	b089      	sub	sp, #36	@ 0x24
 8017082:	af04      	add	r7, sp, #16
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
 801708a:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f7fe fd8f 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017092:	4606      	mov	r6, r0
 8017094:	6838      	ldr	r0, [r7, #0]
 8017096:	f7fe fd96 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801709a:	4680      	mov	r8, r0
 801709c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801709e:	f7fe fd9d 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80170a2:	4681      	mov	r9, r0
 80170a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80170a6:	f7fe fd99 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80170aa:	4604      	mov	r4, r0
 80170ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80170ae:	f7fa fa86 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80170b2:	4605      	mov	r5, r0
 80170b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80170b6:	f7fe fd9c 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80170ba:	4603      	mov	r3, r0
 80170bc:	9302      	str	r3, [sp, #8]
 80170be:	9501      	str	r5, [sp, #4]
 80170c0:	9400      	str	r4, [sp, #0]
 80170c2:	464b      	mov	r3, r9
 80170c4:	4642      	mov	r2, r8
 80170c6:	4631      	mov	r1, r6
 80170c8:	68b8      	ldr	r0, [r7, #8]
 80170ca:	f000 fa55 	bl	8017578 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>
 80170ce:	bf00      	nop
 80170d0:	3714      	adds	r7, #20
 80170d2:	46bd      	mov	sp, r7
 80170d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080170d8 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f000 fa94 	bl	801760e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 80170e6:	4603      	mov	r3, r0
 80170e8:	4618      	mov	r0, r3
 80170ea:	3708      	adds	r7, #8
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd80      	pop	{r7, pc}

080170f0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>:
      }

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
 80170f0:	b580      	push	{r7, lr}
 80170f2:	b084      	sub	sp, #16
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	60b9      	str	r1, [r7, #8]
 80170fa:	607a      	str	r2, [r7, #4]
      {
	if (use_count() == 0)
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f000 fa91 	bl	8017624 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>
 8017102:	4603      	mov	r3, r0
 8017104:	2b00      	cmp	r3, #0
 8017106:	bf0c      	ite	eq
 8017108:	2301      	moveq	r3, #1
 801710a:	2300      	movne	r3, #0
 801710c:	b2db      	uxtb	r3, r3
 801710e:	2b00      	cmp	r3, #0
 8017110:	d008      	beq.n	8017124 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE+0x34>
	  {
	    _M_ptr = __ptr;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	68ba      	ldr	r2, [r7, #8]
 8017116:	601a      	str	r2, [r3, #0]
	    _M_refcount = __refcount;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	3304      	adds	r3, #4
 801711c:	6879      	ldr	r1, [r7, #4]
 801711e:	4618      	mov	r0, r3
 8017120:	f000 fa8e 	bl	8017640 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>
	  }
      }
 8017124:	bf00      	nop
 8017126:	3710      	adds	r7, #16
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>:
      _Tuple_impl()
 801712c:	b580      	push	{r7, lr}
 801712e:	b082      	sub	sp, #8
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f000 faa2 	bl	801767e <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	4618      	mov	r0, r3
 801713e:	3708      	adds	r7, #8
 8017140:	46bd      	mov	sp, r7
 8017142:	bd80      	pop	{r7, pc}

08017144 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8017144:	b480      	push	{r7}
 8017146:	b083      	sub	sp, #12
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2200      	movs	r2, #0
 8017150:	601a      	str	r2, [r3, #0]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4618      	mov	r0, r3
 8017156:	370c      	adds	r7, #12
 8017158:	46bd      	mov	sp, r7
 801715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715e:	4770      	bx	lr

08017160 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	4618      	mov	r0, r3
 801716c:	370c      	adds	r7, #12
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr

08017176 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017176:	b580      	push	{r7, lr}
 8017178:	b082      	sub	sp, #8
 801717a:	af00      	add	r7, sp, #0
 801717c:	6078      	str	r0, [r7, #4]
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f000 fa88 	bl	8017694 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>
 8017184:	4603      	mov	r3, r0
 8017186:	4618      	mov	r0, r3
 8017188:	3708      	adds	r7, #8
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}

0801718e <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801718e:	b580      	push	{r7, lr}
 8017190:	b082      	sub	sp, #8
 8017192:	af00      	add	r7, sp, #0
 8017194:	6078      	str	r0, [r7, #4]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	4618      	mov	r0, r3
 801719a:	f000 fa86 	bl	80176aa <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>
 801719e:	4603      	mov	r3, r0
 80171a0:	4618      	mov	r0, r3
 80171a2:	3708      	adds	r7, #8
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 80171a8:	b480      	push	{r7}
 80171aa:	b083      	sub	sp, #12
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 80171b2:	ed97 6b00 	vldr	d6, [r7]
 80171b6:	ed97 7b00 	vldr	d7, [r7]
 80171ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80171be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c2:	bf14      	ite	ne
 80171c4:	2301      	movne	r3, #1
 80171c6:	2300      	moveq	r3, #0
 80171c8:	b2db      	uxtb	r3, r3
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	370c      	adds	r7, #12
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr

080171d6 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 80171d6:	b480      	push	{r7}
 80171d8:	b083      	sub	sp, #12
 80171da:	af00      	add	r7, sp, #0
 80171dc:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 80171e0:	ed97 7b00 	vldr	d7, [r7]
 80171e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80171e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ec:	d00c      	beq.n	8017208 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 80171ee:	ed97 7b00 	vldr	d7, [r7]
 80171f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80171f6:	ed97 6b00 	vldr	d6, [r7]
 80171fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80171fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017202:	d101      	bne.n	8017208 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8017204:	2301      	movs	r3, #1
 8017206:	e000      	b.n	801720a <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x34>
 8017208:	2300      	movs	r3, #0
}
 801720a:	4618      	mov	r0, r3
 801720c:	370c      	adds	r7, #12
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr

08017216 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 8017216:	b580      	push	{r7, lr}
 8017218:	b082      	sub	sp, #8
 801721a:	af00      	add	r7, sp, #0
 801721c:	6078      	str	r0, [r7, #4]
 801721e:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8017222:	edd7 7a00 	vldr	s15, [r7]
 8017226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801722a:	2106      	movs	r1, #6
 801722c:	eeb0 0b47 	vmov.f64	d0, d7
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fa45 	bl	80176c0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8017236:	bf00      	nop
 8017238:	3708      	adds	r7, #8
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}

0801723e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 801723e:	b580      	push	{r7, lr}
 8017240:	b084      	sub	sp, #16
 8017242:	af00      	add	r7, sp, #0
 8017244:	60f8      	str	r0, [r7, #12]
 8017246:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 801724a:	2109      	movs	r1, #9
 801724c:	ed97 0b00 	vldr	d0, [r7]
 8017250:	68f8      	ldr	r0, [r7, #12]
 8017252:	f000 fa35 	bl	80176c0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8017256:	bf00      	nop
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}

0801725e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 801725e:	b580      	push	{r7, lr}
 8017260:	b082      	sub	sp, #8
 8017262:	af00      	add	r7, sp, #0
 8017264:	6078      	str	r0, [r7, #4]
 8017266:	460b      	mov	r3, r1
 8017268:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	78fa      	ldrb	r2, [r7, #3]
 801726e:	4611      	mov	r1, r2
 8017270:	4618      	mov	r0, r3
 8017272:	f000 fa83 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8017276:	bf00      	nop
 8017278:	3708      	adds	r7, #8
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}

0801727e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 801727e:	b580      	push	{r7, lr}
 8017280:	b084      	sub	sp, #16
 8017282:	af00      	add	r7, sp, #0
 8017284:	60f8      	str	r0, [r7, #12]
 8017286:	60b9      	str	r1, [r7, #8]
 8017288:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 801728a:	2122      	movs	r1, #34	@ 0x22
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f000 fa75 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 8017292:	e007      	b.n	80172a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	1c5a      	adds	r2, r3, #1
 8017298:	60ba      	str	r2, [r7, #8]
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	4619      	mov	r1, r3
 801729e:	68f8      	ldr	r0, [r7, #12]
 80172a0:	f000 fa7c 	bl	801779c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	1e5a      	subs	r2, r3, #1
 80172a8:	607a      	str	r2, [r7, #4]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	bf14      	ite	ne
 80172ae:	2301      	movne	r3, #1
 80172b0:	2300      	moveq	r3, #0
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d1ed      	bne.n	8017294 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 80172b8:	2122      	movs	r1, #34	@ 0x22
 80172ba:	68f8      	ldr	r0, [r7, #12]
 80172bc:	f000 fa5e 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80172c0:	bf00      	nop
 80172c2:	3710      	adds	r7, #16
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b084      	sub	sp, #16
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	60f8      	str	r0, [r7, #12]
 80172d0:	60b9      	str	r1, [r7, #8]
 80172d2:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	68b9      	ldr	r1, [r7, #8]
 80172da:	4618      	mov	r0, r3
 80172dc:	f000 f878 	bl	80173d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80172e0:	bf00      	nop
 80172e2:	3710      	adds	r7, #16
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}

080172e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 80172e8:	b5b0      	push	{r4, r5, r7, lr}
 80172ea:	b086      	sub	sp, #24
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 80172f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	da0c      	bge.n	8017316 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 80172fc:	212d      	movs	r1, #45	@ 0x2d
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f000 fa3c 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017308:	2100      	movs	r1, #0
 801730a:	4254      	negs	r4, r2
 801730c:	eb61 0503 	sbc.w	r5, r1, r3
 8017310:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8017314:	e003      	b.n	801731e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 8017316:	e9d7 2300 	ldrd	r2, r3, [r7]
 801731a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 801731e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017322:	68f8      	ldr	r0, [r7, #12]
 8017324:	f000 f804 	bl	8017330 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017328:	bf00      	nop
 801732a:	3718      	adds	r7, #24
 801732c:	46bd      	mov	sp, r7
 801732e:	bdb0      	pop	{r4, r5, r7, pc}

08017330 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017330:	b580      	push	{r7, lr}
 8017332:	b08c      	sub	sp, #48	@ 0x30
 8017334:	af00      	add	r7, sp, #0
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 801733c:	f107 0310 	add.w	r3, r7, #16
 8017340:	3316      	adds	r3, #22
 8017342:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 8017344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017346:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8017348:	e9d7 0100 	ldrd	r0, r1, [r7]
 801734c:	f04f 020a 	mov.w	r2, #10
 8017350:	f04f 0300 	mov.w	r3, #0
 8017354:	f7e9 faf6 	bl	8000944 <__aeabi_uldivmod>
 8017358:	b2d3      	uxtb	r3, r2
 801735a:	3330      	adds	r3, #48	@ 0x30
 801735c:	b2da      	uxtb	r2, r3
 801735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017360:	3b01      	subs	r3, #1
 8017362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017366:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017368:	e9d7 0100 	ldrd	r0, r1, [r7]
 801736c:	f04f 020a 	mov.w	r2, #10
 8017370:	f04f 0300 	mov.w	r3, #0
 8017374:	f7e9 fae6 	bl	8000944 <__aeabi_uldivmod>
 8017378:	4602      	mov	r2, r0
 801737a:	460b      	mov	r3, r1
 801737c:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8017380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017384:	4313      	orrs	r3, r2
 8017386:	d1df      	bne.n	8017348 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8017388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801738a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f000 fa31 	bl	80177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017392:	bf00      	nop
 8017394:	3730      	adds	r7, #48	@ 0x30
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
	...

0801739c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	460b      	mov	r3, r1
 80173a6:	70fb      	strb	r3, [r7, #3]
    if (value)
 80173a8:	78fb      	ldrb	r3, [r7, #3]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d004      	beq.n	80173b8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 80173ae:	4906      	ldr	r1, [pc, #24]	@ (80173c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7ff fca2 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80173b6:	e003      	b.n	80173c0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 80173b8:	4904      	ldr	r1, [pc, #16]	@ (80173cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f7ff fc9d 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80173c0:	bf00      	nop
 80173c2:	3708      	adds	r7, #8
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	0802ad40 	.word	0x0802ad40
 80173cc:	0802ad48 	.word	0x0802ad48

080173d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	60f8      	str	r0, [r7, #12]
 80173d8:	60b9      	str	r1, [r7, #8]
 80173da:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	68b9      	ldr	r1, [r7, #8]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f000 fa18 	bl	8017818 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 80173e8:	4602      	mov	r2, r0
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	685b      	ldr	r3, [r3, #4]
 80173ee:	441a      	add	r2, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	605a      	str	r2, [r3, #4]
  }
 80173f4:	bf00      	nop
 80173f6:	3710      	adds	r7, #16
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}

080173fc <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
    return writer_.count();
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	4618      	mov	r0, r3
 8017408:	f000 fa18 	bl	801783c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 801740c:	4603      	mov	r3, r0
  }
 801740e:	4618      	mov	r0, r3
 8017410:	3708      	adds	r7, #8
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}

08017416 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 8017416:	b580      	push	{r7, lr}
 8017418:	b082      	sub	sp, #8
 801741a:	af00      	add	r7, sp, #0
 801741c:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017420:	ed97 0a01 	vldr	s0, [r7, #4]
 8017424:	f000 fa16 	bl	8017854 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8017428:	4603      	mov	r3, r0
 801742a:	2b00      	cmp	r3, #0
 801742c:	d001      	beq.n	8017432 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	e001      	b.n	8017436 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 8017432:	f04f 0300 	mov.w	r3, #0
 8017436:	ee07 3a90 	vmov	s15, r3
}
 801743a:	eeb0 0a67 	vmov.f32	s0, s15
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801744e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017452:	f000 fa0b 	bl	801786c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d005      	beq.n	8017468 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 801745c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017460:	f7e9 fa32 	bl	80008c8 <__aeabi_l2f>
 8017464:	4603      	mov	r3, r0
 8017466:	e001      	b.n	801746c <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 8017468:	f04f 0300 	mov.w	r3, #0
 801746c:	ee07 3a90 	vmov	s15, r3
}
 8017470:	eeb0 0a67 	vmov.f32	s0, s15
 8017474:	3708      	adds	r7, #8
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}

0801747a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 801747a:	b580      	push	{r7, lr}
 801747c:	b082      	sub	sp, #8
 801747e:	af00      	add	r7, sp, #0
 8017480:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017488:	f000 f9fc 	bl	8017884 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 801748c:	4603      	mov	r3, r0
 801748e:	2b00      	cmp	r3, #0
 8017490:	d005      	beq.n	801749e <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 8017492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017496:	f7e9 fa0f 	bl	80008b8 <__aeabi_ul2f>
 801749a:	4603      	mov	r3, r0
 801749c:	e001      	b.n	80174a2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 801749e:	f04f 0300 	mov.w	r3, #0
 80174a2:	ee07 3a90 	vmov	s15, r3
}
 80174a6:	eeb0 0a67 	vmov.f32	s0, s15
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80174ba:	ed97 0b00 	vldr	d0, [r7]
 80174be:	f000 f9ed 	bl	801789c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 80174c2:	4603      	mov	r3, r0
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d004      	beq.n	80174d2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 80174c8:	ed97 7b00 	vldr	d7, [r7]
 80174cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80174d0:	e001      	b.n	80174d6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 80174d2:	eddf 7a03 	vldr	s15, [pc, #12]	@ 80174e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 80174d6:	eeb0 0a67 	vmov.f32	s0, s15
 80174da:	3708      	adds	r7, #8
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	00000000 	.word	0x00000000

080174e4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	f000 f9df 	bl	80178b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80174f6:	4602      	mov	r2, r0
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	4293      	cmp	r3, r2
 80174fc:	bf8c      	ite	hi
 80174fe:	2301      	movhi	r3, #1
 8017500:	2300      	movls	r3, #0
 8017502:	b2db      	uxtb	r3, r3
 8017504:	2b00      	cmp	r3, #0
 8017506:	bf14      	ite	ne
 8017508:	2301      	movne	r3, #1
 801750a:	2300      	moveq	r3, #0
 801750c:	b2db      	uxtb	r3, r3
 801750e:	2b00      	cmp	r3, #0
 8017510:	d007      	beq.n	8017522 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	4a09      	ldr	r2, [pc, #36]	@ (801753c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8017516:	4293      	cmp	r3, r2
 8017518:	d901      	bls.n	801751e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801751a:	f011 f8c7 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801751e:	f011 f8c2 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	2258      	movs	r2, #88	@ 0x58
 8017526:	fb02 f303 	mul.w	r3, r2, r3
 801752a:	4618      	mov	r0, r3
 801752c:	f011 f8a8 	bl	8028680 <_Znwj>
 8017530:	4603      	mov	r3, r0
 8017532:	bf00      	nop
      }
 8017534:	4618      	mov	r0, r3
 8017536:	3710      	adds	r7, #16
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	02e8ba2e 	.word	0x02e8ba2e

08017540 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8017540:	b480      	push	{r7}
 8017542:	b083      	sub	sp, #12
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	4618      	mov	r0, r3
 801754c:	370c      	adds	r7, #12
 801754e:	46bd      	mov	sp, r7
 8017550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017554:	4770      	bx	lr

08017556 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8017556:	b580      	push	{r7, lr}
 8017558:	b084      	sub	sp, #16
 801755a:	af00      	add	r7, sp, #0
 801755c:	60f8      	str	r0, [r7, #12]
 801755e:	60b9      	str	r1, [r7, #8]
 8017560:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2258      	movs	r2, #88	@ 0x58
 8017566:	fb02 f303 	mul.w	r3, r2, r3
 801756a:	4619      	mov	r1, r3
 801756c:	68b8      	ldr	r0, [r7, #8]
 801756e:	f011 f876 	bl	802865e <_ZdlPvj>
      }
 8017572:	3710      	adds	r7, #16
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}

08017578 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8017578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801757c:	ed2d 8b02 	vpush	{d8}
 8017580:	b08c      	sub	sp, #48	@ 0x30
 8017582:	af02      	add	r7, sp, #8
 8017584:	60f8      	str	r0, [r7, #12]
 8017586:	60b9      	str	r1, [r7, #8]
 8017588:	607a      	str	r2, [r7, #4]
 801758a:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	4619      	mov	r1, r3
 8017590:	204c      	movs	r0, #76	@ 0x4c
 8017592:	f7f3 fa3d 	bl	800aa10 <_ZnwjPv>
 8017596:	4680      	mov	r8, r0
 8017598:	68b8      	ldr	r0, [r7, #8]
 801759a:	f7fe fb09 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801759e:	4602      	mov	r2, r0
 80175a0:	f107 0310 	add.w	r3, r7, #16
 80175a4:	4611      	mov	r1, r2
 80175a6:	4618      	mov	r0, r3
 80175a8:	f011 f946 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80175ac:	6878      	ldr	r0, [r7, #4]
 80175ae:	f7fe fb0a 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80175b2:	4603      	mov	r3, r0
 80175b4:	ed93 8a00 	vldr	s16, [r3]
 80175b8:	6838      	ldr	r0, [r7, #0]
 80175ba:	f7fe fb0f 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80175be:	4603      	mov	r3, r0
 80175c0:	881d      	ldrh	r5, [r3, #0]
 80175c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80175c4:	f7fe fb0a 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80175c8:	4603      	mov	r3, r0
 80175ca:	881e      	ldrh	r6, [r3, #0]
 80175cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80175ce:	f7f9 fff6 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80175d2:	4603      	mov	r3, r0
 80175d4:	781c      	ldrb	r4, [r3, #0]
 80175d6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80175d8:	f7fe fb0b 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80175dc:	4603      	mov	r3, r0
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f107 0110 	add.w	r1, r7, #16
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	9400      	str	r4, [sp, #0]
 80175e8:	4633      	mov	r3, r6
 80175ea:	462a      	mov	r2, r5
 80175ec:	eeb0 0a48 	vmov.f32	s0, s16
 80175f0:	4640      	mov	r0, r8
 80175f2:	f7fd fe81 	bl	80152f8 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>
 80175f6:	f107 0310 	add.w	r3, r7, #16
 80175fa:	4618      	mov	r0, r3
 80175fc:	f011 f93b 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8017600:	bf00      	nop
 8017602:	3728      	adds	r7, #40	@ 0x28
 8017604:	46bd      	mov	sp, r7
 8017606:	ecbd 8b02 	vpop	{d8}
 801760a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801760e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 801760e:	b480      	push	{r7}
 8017610:	b083      	sub	sp, #12
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8017616:	687b      	ldr	r3, [r7, #4]
      }
 8017618:	4618      	mov	r0, r3
 801761a:	370c      	adds	r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>:
      use_count() const noexcept
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
      { return _M_refcount._M_get_use_count(); }
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	3304      	adds	r3, #4
 8017630:	4618      	mov	r0, r3
 8017632:	f000 f94d 	bl	80178d0 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 8017636:	4603      	mov	r3, r0
 8017638:	4618      	mov	r0, r3
 801763a:	3708      	adds	r7, #8
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}

08017640 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>:
      operator=(const __shared_count<_Lp>& __r) noexcept
 8017640:	b580      	push	{r7, lr}
 8017642:	b084      	sub	sp, #16
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	60fb      	str	r3, [r7, #12]
	if (__tmp != nullptr)
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d002      	beq.n	801765c <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x1c>
	  __tmp->_M_weak_add_ref();
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f7fd fb32 	bl	8014cc0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>
	if (_M_pi != nullptr)
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d004      	beq.n	801766e <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x2e>
	  _M_pi->_M_weak_release();
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4618      	mov	r0, r3
 801766a:	f7fd fb38 	bl	8014cde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
	_M_pi = __tmp;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	601a      	str	r2, [r3, #0]
	return *this;
 8017674:	687b      	ldr	r3, [r7, #4]
      }
 8017676:	4618      	mov	r0, r3
 8017678:	3710      	adds	r7, #16
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}

0801767e <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801767e:	b480      	push	{r7}
 8017680:	b083      	sub	sp, #12
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	4618      	mov	r0, r3
 801768a:	370c      	adds	r7, #12
 801768c:	46bd      	mov	sp, r7
 801768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017692:	4770      	bx	lr

08017694 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8017694:	b480      	push	{r7}
 8017696:	b083      	sub	sp, #12
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	4618      	mov	r0, r3
 80176a0:	370c      	adds	r7, #12
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr

080176aa <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80176aa:	b480      	push	{r7}
 80176ac:	b083      	sub	sp, #12
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	6078      	str	r0, [r7, #4]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	4618      	mov	r0, r3
 80176b6:	370c      	adds	r7, #12
 80176b8:	46bd      	mov	sp, r7
 80176ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176be:	4770      	bx	lr

080176c0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b088      	sub	sp, #32
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	ed87 0b00 	vstr	d0, [r7]
 80176cc:	460b      	mov	r3, r1
 80176ce:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 80176d0:	ed97 0b00 	vldr	d0, [r7]
 80176d4:	f7ff fd68 	bl	80171a8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>
 80176d8:	4603      	mov	r3, r0
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d004      	beq.n	80176e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 80176de:	4926      	ldr	r1, [pc, #152]	@ (8017778 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f7ff fb0a 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 80176e6:	e044      	b.n	8017772 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (isinf(value))
 80176e8:	ed97 0b00 	vldr	d0, [r7]
 80176ec:	f7ff fd73 	bl	80171d6 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d004      	beq.n	8017700 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 80176f6:	4920      	ldr	r1, [pc, #128]	@ (8017778 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7ff fafe 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 80176fe:	e038      	b.n	8017772 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (value < 0.0) {
 8017700:	ed97 7b00 	vldr	d7, [r7]
 8017704:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770c:	d509      	bpl.n	8017722 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x62>
      writeRaw('-');
 801770e:	212d      	movs	r1, #45	@ 0x2d
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	f000 f833 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 8017716:	ed97 7b00 	vldr	d7, [r7]
 801771a:	eeb1 7b47 	vneg.f64	d7, d7
 801771e:	ed87 7b00 	vstr	d7, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 8017722:	f107 0314 	add.w	r3, r7, #20
 8017726:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801772a:	4611      	mov	r1, r2
 801772c:	ed97 0b00 	vldr	d0, [r7]
 8017730:	4618      	mov	r0, r3
 8017732:	f7fd fb65 	bl	8014e00 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	4619      	mov	r1, r3
 801773a:	68f8      	ldr	r0, [r7, #12]
 801773c:	f000 f8dc 	bl	80178f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 8017740:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d006      	beq.n	8017756 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x96>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8017748:	69bb      	ldr	r3, [r7, #24]
 801774a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801774e:	4619      	mov	r1, r3
 8017750:	68f8      	ldr	r0, [r7, #12]
 8017752:	f000 f903 	bl	801795c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 8017756:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d009      	beq.n	8017772 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
      writeRaw('e');
 801775e:	2165      	movs	r1, #101	@ 0x65
 8017760:	68f8      	ldr	r0, [r7, #12]
 8017762:	f000 f80b 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 8017766:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801776a:	4619      	mov	r1, r3
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	f000 f939 	bl	80179e4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 8017772:	3720      	adds	r7, #32
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}
 8017778:	0802ad38 	.word	0x0802ad38

0801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 801777c:	b580      	push	{r7, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
 8017784:	460b      	mov	r3, r1
 8017786:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	78fa      	ldrb	r2, [r7, #3]
 801778c:	4611      	mov	r1, r2
 801778e:	4618      	mov	r0, r3
 8017790:	f000 f945 	bl	8017a1e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}

0801779c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 801779c:	b580      	push	{r7, lr}
 801779e:	b084      	sub	sp, #16
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	460b      	mov	r3, r1
 80177a6:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 80177a8:	78fb      	ldrb	r3, [r7, #3]
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7fd faf3 	bl	8014d96 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>
 80177b0:	4603      	mov	r3, r0
 80177b2:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 80177b4:	7bfb      	ldrb	r3, [r7, #15]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d009      	beq.n	80177ce <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 80177ba:	215c      	movs	r1, #92	@ 0x5c
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f7ff ffdd 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 80177c2:	7bfb      	ldrb	r3, [r7, #15]
 80177c4:	4619      	mov	r1, r3
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f7ff ffd8 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80177cc:	e00c      	b.n	80177e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 80177ce:	78fb      	ldrb	r3, [r7, #3]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d005      	beq.n	80177e0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 80177d4:	78fb      	ldrb	r3, [r7, #3]
 80177d6:	4619      	mov	r1, r3
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7ff ffcf 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80177de:	e003      	b.n	80177e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 80177e0:	4903      	ldr	r1, [pc, #12]	@ (80177f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f7ff fa89 	bl	8016cfa <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80177e8:	bf00      	nop
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	0802ad50 	.word	0x0802ad50

080177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b084      	sub	sp, #16
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017800:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8017802:	687a      	ldr	r2, [r7, #4]
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017808:	461a      	mov	r2, r3
 801780a:	68b9      	ldr	r1, [r7, #8]
 801780c:	f7ff fde0 	bl	80173d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017810:	bf00      	nop
 8017812:	3710      	adds	r7, #16
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}

08017818 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8017818:	b580      	push	{r7, lr}
 801781a:	b084      	sub	sp, #16
 801781c:	af00      	add	r7, sp, #0
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	68b9      	ldr	r1, [r7, #8]
 801782c:	4618      	mov	r0, r3
 801782e:	f011 f9f5 	bl	8028c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8017832:	687b      	ldr	r3, [r7, #4]
  }
 8017834:	4618      	mov	r0, r3
 8017836:	3710      	adds	r7, #16
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 801783c:	b480      	push	{r7}
 801783e:	b083      	sub	sp, #12
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
    return count_;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	685b      	ldr	r3, [r3, #4]
  }
 8017848:	4618      	mov	r0, r3
 801784a:	370c      	adds	r7, #12
 801784c:	46bd      	mov	sp, r7
 801784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017852:	4770      	bx	lr

08017854 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 801785e:	2301      	movs	r3, #1
}
 8017860:	4618      	mov	r0, r3
 8017862:	370c      	adds	r7, #12
 8017864:	46bd      	mov	sp, r7
 8017866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786a:	4770      	bx	lr

0801786c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8017876:	2301      	movs	r3, #1
}
 8017878:	4618      	mov	r0, r3
 801787a:	370c      	adds	r7, #12
 801787c:	46bd      	mov	sp, r7
 801787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017882:	4770      	bx	lr

08017884 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8017884:	b480      	push	{r7}
 8017886:	b083      	sub	sp, #12
 8017888:	af00      	add	r7, sp, #0
 801788a:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 801788e:	2301      	movs	r3, #1
}
 8017890:	4618      	mov	r0, r3
 8017892:	370c      	adds	r7, #12
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801789c:	b480      	push	{r7}
 801789e:	b083      	sub	sp, #12
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	ed87 0b00 	vstr	d0, [r7]
  return true;
 80178a6:	2301      	movs	r3, #1
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	370c      	adds	r7, #12
 80178ac:	46bd      	mov	sp, r7
 80178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b2:	4770      	bx	lr

080178b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80178b4:	b480      	push	{r7}
 80178b6:	b083      	sub	sp, #12
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80178bc:	4b03      	ldr	r3, [pc, #12]	@ (80178cc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80178be:	4618      	mov	r0, r3
 80178c0:	370c      	adds	r7, #12
 80178c2:	46bd      	mov	sp, r7
 80178c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c8:	4770      	bx	lr
 80178ca:	bf00      	nop
 80178cc:	01745d17 	.word	0x01745d17

080178d0 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
      _M_get_use_count() const noexcept
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d006      	beq.n	80178ee <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x1e>
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7fd fa16 	bl	8014d16 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 80178ea:	4603      	mov	r3, r0
 80178ec:	e000      	b.n	80178f0 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x20>
 80178ee:	2300      	movs	r3, #0
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b08a      	sub	sp, #40	@ 0x28
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8017902:	f107 0308 	add.w	r3, r7, #8
 8017906:	3316      	adds	r3, #22
 8017908:	623b      	str	r3, [r7, #32]
    char* begin = end;
 801790a:	6a3b      	ldr	r3, [r7, #32]
 801790c:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 801790e:	6839      	ldr	r1, [r7, #0]
 8017910:	4b11      	ldr	r3, [pc, #68]	@ (8017958 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017912:	fba3 2301 	umull	r2, r3, r3, r1
 8017916:	08da      	lsrs	r2, r3, #3
 8017918:	4613      	mov	r3, r2
 801791a:	009b      	lsls	r3, r3, #2
 801791c:	4413      	add	r3, r2
 801791e:	005b      	lsls	r3, r3, #1
 8017920:	1aca      	subs	r2, r1, r3
 8017922:	b2d3      	uxtb	r3, r2
 8017924:	3330      	adds	r3, #48	@ 0x30
 8017926:	b2da      	uxtb	r2, r3
 8017928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801792a:	3b01      	subs	r3, #1
 801792c:	627b      	str	r3, [r7, #36]	@ 0x24
 801792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017930:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017932:	683b      	ldr	r3, [r7, #0]
 8017934:	4a08      	ldr	r2, [pc, #32]	@ (8017958 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017936:	fba2 2303 	umull	r2, r3, r2, r3
 801793a:	08db      	lsrs	r3, r3, #3
 801793c:	603b      	str	r3, [r7, #0]
    } while (value);
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d1e4      	bne.n	801790e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8017944:	6a3a      	ldr	r2, [r7, #32]
 8017946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7ff ff53 	bl	80177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801794e:	bf00      	nop
 8017950:	3728      	adds	r7, #40	@ 0x28
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	cccccccd 	.word	0xcccccccd

0801795c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 801795c:	b580      	push	{r7, lr}
 801795e:	b08a      	sub	sp, #40	@ 0x28
 8017960:	af00      	add	r7, sp, #0
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	4613      	mov	r3, r2
 8017968:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 801796a:	f107 0310 	add.w	r3, r7, #16
 801796e:	3310      	adds	r3, #16
 8017970:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8017972:	6a3b      	ldr	r3, [r7, #32]
 8017974:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 8017976:	e017      	b.n	80179a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8017978:	68b9      	ldr	r1, [r7, #8]
 801797a:	4b19      	ldr	r3, [pc, #100]	@ (80179e0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 801797c:	fba3 2301 	umull	r2, r3, r3, r1
 8017980:	08da      	lsrs	r2, r3, #3
 8017982:	4613      	mov	r3, r2
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	4413      	add	r3, r2
 8017988:	005b      	lsls	r3, r3, #1
 801798a:	1aca      	subs	r2, r1, r3
 801798c:	b2d3      	uxtb	r3, r2
 801798e:	3330      	adds	r3, #48	@ 0x30
 8017990:	b2da      	uxtb	r2, r3
 8017992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017994:	3b01      	subs	r3, #1
 8017996:	627b      	str	r3, [r7, #36]	@ 0x24
 8017998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799a:	701a      	strb	r2, [r3, #0]
      value /= 10;
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	4a10      	ldr	r2, [pc, #64]	@ (80179e0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80179a0:	fba2 2303 	umull	r2, r3, r2, r3
 80179a4:	08db      	lsrs	r3, r3, #3
 80179a6:	60bb      	str	r3, [r7, #8]
    while (width--) {
 80179a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179ac:	b2da      	uxtb	r2, r3
 80179ae:	3a01      	subs	r2, #1
 80179b0:	b2d2      	uxtb	r2, r2
 80179b2:	71fa      	strb	r2, [r7, #7]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	bf14      	ite	ne
 80179b8:	2301      	movne	r3, #1
 80179ba:	2300      	moveq	r3, #0
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d1da      	bne.n	8017978 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 80179c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c4:	3b01      	subs	r3, #1
 80179c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80179c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ca:	222e      	movs	r2, #46	@ 0x2e
 80179cc:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 80179ce:	6a3a      	ldr	r2, [r7, #32]
 80179d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80179d2:	68f8      	ldr	r0, [r7, #12]
 80179d4:	f7ff ff0e 	bl	80177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80179d8:	bf00      	nop
 80179da:	3728      	adds	r7, #40	@ 0x28
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}
 80179e0:	cccccccd 	.word	0xcccccccd

080179e4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	460b      	mov	r3, r1
 80179ee:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 80179f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	da07      	bge.n	8017a08 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 80179f8:	212d      	movs	r1, #45	@ 0x2d
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f7ff febe 	bl	801777c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017a00:	887b      	ldrh	r3, [r7, #2]
 8017a02:	425b      	negs	r3, r3
 8017a04:	81fb      	strh	r3, [r7, #14]
 8017a06:	e001      	b.n	8017a0c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8017a08:	887b      	ldrh	r3, [r7, #2]
 8017a0a:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8017a0c:	89fb      	ldrh	r3, [r7, #14]
 8017a0e:	4619      	mov	r1, r3
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f000 f81b 	bl	8017a4c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017a16:	bf00      	nop
 8017a18:	3710      	adds	r7, #16
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}

08017a1e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b082      	sub	sp, #8
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	460b      	mov	r3, r1
 8017a28:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	78fa      	ldrb	r2, [r7, #3]
 8017a2e:	4611      	mov	r1, r2
 8017a30:	4618      	mov	r0, r3
 8017a32:	f000 f83f 	bl	8017ab4 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8017a36:	4602      	mov	r2, r0
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	685b      	ldr	r3, [r3, #4]
 8017a3c:	441a      	add	r2, r3
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	605a      	str	r2, [r3, #4]
  }
 8017a42:	bf00      	nop
 8017a44:	3708      	adds	r7, #8
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
	...

08017a4c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b08a      	sub	sp, #40	@ 0x28
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	460b      	mov	r3, r1
 8017a56:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8017a58:	f107 0308 	add.w	r3, r7, #8
 8017a5c:	3316      	adds	r3, #22
 8017a5e:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8017a60:	6a3b      	ldr	r3, [r7, #32]
 8017a62:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8017a64:	887a      	ldrh	r2, [r7, #2]
 8017a66:	4b12      	ldr	r3, [pc, #72]	@ (8017ab0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017a68:	fba3 1302 	umull	r1, r3, r3, r2
 8017a6c:	08d9      	lsrs	r1, r3, #3
 8017a6e:	460b      	mov	r3, r1
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	440b      	add	r3, r1
 8017a74:	005b      	lsls	r3, r3, #1
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	b29b      	uxth	r3, r3
 8017a7a:	b2db      	uxtb	r3, r3
 8017a7c:	3330      	adds	r3, #48	@ 0x30
 8017a7e:	b2da      	uxtb	r2, r3
 8017a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a82:	3b01      	subs	r3, #1
 8017a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a88:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017a8a:	887b      	ldrh	r3, [r7, #2]
 8017a8c:	4a08      	ldr	r2, [pc, #32]	@ (8017ab0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8017a92:	08db      	lsrs	r3, r3, #3
 8017a94:	807b      	strh	r3, [r7, #2]
    } while (value);
 8017a96:	887b      	ldrh	r3, [r7, #2]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d1e3      	bne.n	8017a64 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8017a9c:	6a3a      	ldr	r2, [r7, #32]
 8017a9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f7ff fea7 	bl	80177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017aa6:	bf00      	nop
 8017aa8:	3728      	adds	r7, #40	@ 0x28
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	cccccccd 	.word	0xcccccccd

08017ab4 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b082      	sub	sp, #8
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
 8017abc:	460b      	mov	r3, r1
 8017abe:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	78fa      	ldrb	r2, [r7, #3]
 8017ac6:	4611      	mov	r1, r2
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f010 ff9c 	bl	8028a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8017ace:	2301      	movs	r3, #1
  }
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3708      	adds	r7, #8
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <_ZN7TMC2208D1Ev>:

public:

	TMC2208(std::string, float, uint16_t, uint16_t, bool, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2208() = default;
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8017b0c <_ZN7TMC2208D1Ev+0x34>)
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	601a      	str	r2, [r3, #0]
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	3348      	adds	r3, #72	@ 0x48
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7fd ff6c 	bl	80159c8 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	3328      	adds	r3, #40	@ 0x28
 8017af4:	4618      	mov	r0, r3
 8017af6:	f010 febe 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7fd fbd3 	bl	80152a8 <_ZN3TMCD1Ev>
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	4618      	mov	r0, r3
 8017b06:	3708      	adds	r7, #8
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}
 8017b0c:	0802b5f8 	.word	0x0802b5f8

08017b10 <_ZN7TMC2208D0Ev>:
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b082      	sub	sp, #8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	6878      	ldr	r0, [r7, #4]
 8017b1a:	f7ff ffdd 	bl	8017ad8 <_ZN7TMC2208D1Ev>
 8017b1e:	214c      	movs	r1, #76	@ 0x4c
 8017b20:	6878      	ldr	r0, [r7, #4]
 8017b22:	f010 fd9c 	bl	802865e <_ZdlPvj>
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	4a05      	ldr	r2, [pc, #20]	@ (8017b50 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	601a      	str	r2, [r3, #0]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7f4 fdcf 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	0802b5dc 	.word	0x0802b5dc

08017b54 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	f7ff ffe7 	bl	8017b30 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b62:	2158      	movs	r1, #88	@ 0x58
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f010 fd7a 	bl	802865e <_ZdlPvj>
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3708      	adds	r7, #8
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8017b74:	b590      	push	{r4, r7, lr}
 8017b76:	b083      	sub	sp, #12
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	330c      	adds	r3, #12
 8017b80:	4618      	mov	r0, r3
 8017b82:	f000 f856 	bl	8017c32 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017b86:	4604      	mov	r4, r0
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f7fe ff1a 	bl	80169c2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	4619      	mov	r1, r3
 8017b92:	4620      	mov	r0, r4
 8017b94:	f000 f859 	bl	8017c4a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 8017b98:	bf00      	nop
 8017b9a:	370c      	adds	r7, #12
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd90      	pop	{r4, r7, pc}

08017ba0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b086      	sub	sp, #24
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	330c      	adds	r3, #12
 8017bac:	4618      	mov	r0, r3
 8017bae:	f000 f840 	bl	8017c32 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	f107 0314 	add.w	r3, r7, #20
 8017bb8:	4611      	mov	r1, r2
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fe fe5e 	bl	801687c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8017bc0:	f107 0114 	add.w	r1, r7, #20
 8017bc4:	f107 030c 	add.w	r3, r7, #12
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f7ff fa19 	bl	8017002 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f7ff ffad 	bl	8017b30 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8017bd6:	f107 030c 	add.w	r3, r7, #12
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7fe fe7a 	bl	80168d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8017be0:	f107 0314 	add.w	r3, r7, #20
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7fe fe56 	bl	8016896 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8017bea:	3718      	adds	r7, #24
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b084      	sub	sp, #16
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
 8017bf8:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f7fe fee1 	bl	80169c2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017c00:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017c02:	f7f2 ff51 	bl	800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8017c06:	4602      	mov	r2, r0
	    ||
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d005      	beq.n	8017c1a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8017c0e:	6838      	ldr	r0, [r7, #0]
 8017c10:	f010 fd62 	bl	80286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8017c14:	4603      	mov	r3, r0
	    ||
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d001      	beq.n	8017c1e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	e000      	b.n	8017c20 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8017c1e:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d001      	beq.n	8017c28 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	e000      	b.n	8017c2a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8017c28:	2300      	movs	r3, #0
      }
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3710      	adds	r7, #16
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}

08017c32 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8017c32:	b580      	push	{r7, lr}
 8017c34:	b082      	sub	sp, #8
 8017c36:	af00      	add	r7, sp, #0
 8017c38:	6078      	str	r0, [r7, #4]
 8017c3a:	6878      	ldr	r0, [r7, #4]
 8017c3c:	f7f7 f825 	bl	800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8017c40:	4603      	mov	r3, r0
 8017c42:	4618      	mov	r0, r3
 8017c44:	3708      	adds	r7, #8
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8017c4a:	b580      	push	{r7, lr}
 8017c4c:	b082      	sub	sp, #8
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
 8017c52:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8017c54:	6838      	ldr	r0, [r7, #0]
 8017c56:	f000 f804 	bl	8017c62 <_ZSt8_DestroyI7TMC2208EvPT_>
 8017c5a:	bf00      	nop
 8017c5c:	3708      	adds	r7, #8
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}

08017c62 <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8017c62:	b580      	push	{r7, lr}
 8017c64:	b082      	sub	sp, #8
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	4798      	blx	r3
    }
 8017c74:	bf00      	nop
 8017c76:	3708      	adds	r7, #8
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}

08017c7c <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8017c7c:	b590      	push	{r4, r7, lr}
 8017c7e:	b093      	sub	sp, #76	@ 0x4c
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6178      	str	r0, [r7, #20]
 8017c84:	6139      	str	r1, [r7, #16]
 8017c86:	60fa      	str	r2, [r7, #12]
 8017c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8017c8c:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 8017c8e:	697c      	ldr	r4, [r7, #20]
 8017c90:	f107 0318 	add.w	r3, r7, #24
 8017c94:	6939      	ldr	r1, [r7, #16]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f010 fffd 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017c9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017ca0:	68f9      	ldr	r1, [r7, #12]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f010 fff7 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017ca8:	79fb      	ldrb	r3, [r7, #7]
 8017caa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017cae:	f107 0118 	add.w	r1, r7, #24
 8017cb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f7eb ffac 	bl	8003c14 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8017cbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f010 fdd8 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017cc6:	f107 0318 	add.w	r3, r7, #24
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f010 fdd3 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8017d10 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8017cd2:	697b      	ldr	r3, [r7, #20]
 8017cd4:	601a      	str	r2, [r3, #0]
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8017cde:	2200      	movs	r2, #0
 8017ce0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8017ce4:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8017ce8:	f022 020f 	bic.w	r2, r2, #15
 8017cec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8017cf8:	697b      	ldr	r3, [r7, #20]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8017d00:	2200      	movs	r2, #0
 8017d02:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	374c      	adds	r7, #76	@ 0x4c
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd90      	pop	{r4, r7, pc}
 8017d10:	0802b680 	.word	0x0802b680

08017d14 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b082      	sub	sp, #8
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	3304      	adds	r3, #4
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7f4 f8ac 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3708      	adds	r7, #8
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}

08017d30 <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b082      	sub	sp, #8
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7ff ffea 	bl	8017d14 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	4618      	mov	r0, r3
 8017d44:	3708      	adds	r7, #8
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
	...

08017d4c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 8017d4c:	b590      	push	{r4, r7, lr}
 8017d4e:	b0c9      	sub	sp, #292	@ 0x124
 8017d50:	af06      	add	r7, sp, #24
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017d5c:	6019      	str	r1, [r3, #0]
 8017d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017d66:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8017d68:	4868      	ldr	r0, [pc, #416]	@ (8017f0c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8017d6a:	f011 fba3 	bl	80294b4 <puts>

    const char* comment = config["Comment"];
 8017d6e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8017d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017d7a:	4a65      	ldr	r2, [pc, #404]	@ (8017f10 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8017d7c:	6819      	ldr	r1, [r3, #0]
 8017d7e:	f7fa fb10 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017d82:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7ef fe86 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017d8c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("Comment: %s\n", comment);
 8017d90:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8017d94:	485f      	ldr	r0, [pc, #380]	@ (8017f14 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8017d96:	f011 fb1d 	bl	80293d4 <iprintf>

    std::string RxPin = config["RX pin"];
 8017d9a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8017d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017da2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017da6:	4a5c      	ldr	r2, [pc, #368]	@ (8017f18 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8017da8:	6819      	ldr	r1, [r3, #0]
 8017daa:	f7ef fe50 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017db2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8017db6:	4611      	mov	r1, r2
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7fd fd55 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8017dbe:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8017dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017dc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017dca:	4a54      	ldr	r2, [pc, #336]	@ (8017f1c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8017dcc:	6819      	ldr	r1, [r3, #0]
 8017dce:	f7ef fe3e 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017dd2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7fd fd54 	bl	8015884 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8017ddc:	eef0 7a40 	vmov.f32	s15, s0
 8017de0:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8017de4:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017dec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017df0:	4a4b      	ldr	r2, [pc, #300]	@ (8017f20 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8017df2:	6819      	ldr	r1, [r3, #0]
 8017df4:	f7fa fad5 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017df8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f000 fa47 	bl	8018290 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8017e02:	4603      	mov	r3, r0
 8017e04:	77fb      	strb	r3, [r7, #31]
    uint16_t current = config["Current"];
 8017e06:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8017e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e12:	4a44      	ldr	r2, [pc, #272]	@ (8017f24 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d8>)
 8017e14:	6819      	ldr	r1, [r3, #0]
 8017e16:	f7fa fac4 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7fd fd3e 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e24:	4603      	mov	r3, r0
 8017e26:	83bb      	strh	r3, [r7, #28]
    uint16_t microsteps = config["Microsteps"];
 8017e28:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8017e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e34:	4a3c      	ldr	r2, [pc, #240]	@ (8017f28 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1dc>)
 8017e36:	6819      	ldr	r1, [r3, #0]
 8017e38:	f7f7 fadf 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7fd fd2d 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e46:	4603      	mov	r3, r0
 8017e48:	837b      	strh	r3, [r7, #26]
    uint16_t stall = config["Stall sensitivity"];
 8017e4a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8017e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e52:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e56:	4a35      	ldr	r2, [pc, #212]	@ (8017f2c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e0>)
 8017e58:	6819      	ldr	r1, [r3, #0]
 8017e5a:	f000 fa25 	bl	80182a8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7fd fd1c 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	833b      	strh	r3, [r7, #24]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8017e6c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8017e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e78:	4a2d      	ldr	r2, [pc, #180]	@ (8017f30 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e4>)
 8017e7a:	6819      	ldr	r1, [r3, #0]
 8017e7c:	f7fc f966 	bl	801414c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7ef fe07 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	4929      	ldr	r1, [pc, #164]	@ (8017f34 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e8>)
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7e8 fa26 	bl	80002e0 <strcmp>
 8017e94:	4603      	mov	r3, r0
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	bf0c      	ite	eq
 8017e9a:	2301      	moveq	r3, #1
 8017e9c:	2300      	movne	r3, #0
 8017e9e:	b2db      	uxtb	r3, r3
 8017ea0:	75fb      	strb	r3, [r7, #23]

    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7f9 fb39 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017eac:	4604      	mov	r4, r0
 8017eae:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8017eb2:	f107 011f 	add.w	r1, r7, #31
 8017eb6:	f107 0220 	add.w	r2, r7, #32
 8017eba:	1d3b      	adds	r3, r7, #4
 8017ebc:	9304      	str	r3, [sp, #16]
 8017ebe:	f107 0318 	add.w	r3, r7, #24
 8017ec2:	9303      	str	r3, [sp, #12]
 8017ec4:	f107 0317 	add.w	r3, r7, #23
 8017ec8:	9302      	str	r3, [sp, #8]
 8017eca:	f107 031a 	add.w	r3, r7, #26
 8017ece:	9301      	str	r3, [sp, #4]
 8017ed0:	f107 031c 	add.w	r3, r7, #28
 8017ed4:	9300      	str	r3, [sp, #0]
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	4621      	mov	r1, r4
 8017eda:	f000 fa0a 	bl	80182f2 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8017ede:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017ee2:	4619      	mov	r1, r3
 8017ee4:	68f8      	ldr	r0, [r7, #12]
 8017ee6:	f000 fa42 	bl	801836e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>
 8017eea:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7ff ff1e 	bl	8017d30 <_ZNSt10shared_ptrI7TMC2209ED1Ev>
}
 8017ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f010 fcbc 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017efe:	bf00      	nop
}
 8017f00:	68f8      	ldr	r0, [r7, #12]
 8017f02:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd90      	pop	{r4, r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	0802ad6c 	.word	0x0802ad6c
 8017f10:	0802ad84 	.word	0x0802ad84
 8017f14:	0802ad8c 	.word	0x0802ad8c
 8017f18:	0802ad9c 	.word	0x0802ad9c
 8017f1c:	0802ada4 	.word	0x0802ada4
 8017f20:	0802adac 	.word	0x0802adac
 8017f24:	0802adb4 	.word	0x0802adb4
 8017f28:	0802adbc 	.word	0x0802adbc
 8017f2c:	0802adc8 	.word	0x0802adc8
 8017f30:	0802addc 	.word	0x0802addc
 8017f34:	0802adec 	.word	0x0802adec

08017f38 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>:

TMC2209::TMC2209(std::string _rxtxPin, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8017f38:	b5b0      	push	{r4, r5, r7, lr}
 8017f3a:	b086      	sub	sp, #24
 8017f3c:	af02      	add	r7, sp, #8
 8017f3e:	60f8      	str	r0, [r7, #12]
 8017f40:	60b9      	str	r1, [r7, #8]
 8017f42:	ed87 0a01 	vstr	s0, [r7, #4]
 8017f46:	4611      	mov	r1, r2
 8017f48:	461a      	mov	r2, r3
 8017f4a:	460b      	mov	r3, r1
 8017f4c:	70fb      	strb	r3, [r7, #3]
 8017f4e:	4613      	mov	r3, r2
 8017f50:	803b      	strh	r3, [r7, #0]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	ed97 0a01 	vldr	s0, [r7, #4]
 8017f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7fd f8a0 	bl	80150a0 <_ZN3TMCC1EP6Remoraf>
 8017f60:	4a1d      	ldr	r2, [pc, #116]	@ (8017fd8 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora+0xa0>)
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017f6c:	68b8      	ldr	r0, [r7, #8]
 8017f6e:	f7f9 fad6 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017f72:	4603      	mov	r3, r0
 8017f74:	4619      	mov	r1, r3
 8017f76:	4620      	mov	r0, r4
 8017f78:	f010 fc5e 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	78fa      	ldrb	r2, [r7, #3]
 8017f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      mA(_mA),
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	883a      	ldrh	r2, [r7, #0]
 8017f88:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      microsteps(_microsteps),
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	8c3a      	ldrh	r2, [r7, #32]
 8017f90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      stealth(_stealth),
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017f9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      stall(_stall),
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8017fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	3340      	adds	r3, #64	@ 0x40
 8017fbc:	68fa      	ldr	r2, [r7, #12]
 8017fbe:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8017fc2:	9300      	str	r3, [sp, #0]
 8017fc4:	462b      	mov	r3, r5
 8017fc6:	4622      	mov	r2, r4
 8017fc8:	f000 f9e4 	bl	8018394 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3710      	adds	r7, #16
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	0802b65c 	.word	0x0802b65c

08017fdc <_ZN7TMC22099configureEv>:


void TMC2209::configure()
{
 8017fdc:	b590      	push	{r4, r7, lr}
 8017fde:	b08b      	sub	sp, #44	@ 0x2c
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8017fe4:	4897      	ldr	r0, [pc, #604]	@ (8018244 <_ZN7TMC22099configureEv+0x268>)
 8017fe6:	f011 fa65 	bl	80294b4 <puts>
    instance->getSerialThread()->startThread();
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	6a1b      	ldr	r3, [r3, #32]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7fd f801 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f002 ff2a 	bl	801ae50 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f103 0218 	add.w	r2, r3, #24
 8018002:	f107 030c 	add.w	r3, r7, #12
 8018006:	4611      	mov	r1, r2
 8018008:	4618      	mov	r0, r3
 801800a:	f7fd fc1f 	bl	801584c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	6a1b      	ldr	r3, [r3, #32]
 8018012:	4618      	mov	r0, r3
 8018014:	f7fc ffef 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 8018018:	4604      	mov	r4, r0
 801801a:	f107 020c 	add.w	r2, r7, #12
 801801e:	f107 0314 	add.w	r3, r7, #20
 8018022:	4611      	mov	r1, r2
 8018024:	4618      	mov	r0, r3
 8018026:	f7fd fcf1 	bl	8015a0c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801802a:	f107 0314 	add.w	r3, r7, #20
 801802e:	4619      	mov	r1, r3
 8018030:	4620      	mov	r0, r4
 8018032:	f002 fe79 	bl	801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8018036:	f107 0314 	add.w	r3, r7, #20
 801803a:	4618      	mov	r0, r3
 801803c:	f7f3 f8f1 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	334c      	adds	r3, #76	@ 0x4c
 8018044:	4618      	mov	r0, r3
 8018046:	f000 fa12 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801804a:	4603      	mov	r3, r0
 801804c:	4618      	mov	r0, r3
 801804e:	f7eb fe93 	bl	8003d78 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8018052:	487d      	ldr	r0, [pc, #500]	@ (8018248 <_ZN7TMC22099configureEv+0x26c>)
 8018054:	f011 f9be 	bl	80293d4 <iprintf>
    uint16_t result = driver->test_connection();
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	334c      	adds	r3, #76	@ 0x4c
 801805c:	4618      	mov	r0, r3
 801805e:	f000 fa06 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018062:	4603      	mov	r3, r0
 8018064:	4618      	mov	r0, r3
 8018066:	f7ec fc1b 	bl	80048a0 <_ZN10TMCStepper15test_connectionEv>
 801806a:	4603      	mov	r3, r0
 801806c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 801806e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018070:	2b00      	cmp	r3, #0
 8018072:	d018      	beq.n	80180a6 <_ZN7TMC22099configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 8018074:	4875      	ldr	r0, [pc, #468]	@ (801824c <_ZN7TMC22099configureEv+0x270>)
 8018076:	f011 f9ad 	bl	80293d4 <iprintf>
        switch(result) {
 801807a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801807c:	2b01      	cmp	r3, #1
 801807e:	d002      	beq.n	8018086 <_ZN7TMC22099configureEv+0xaa>
 8018080:	2b02      	cmp	r3, #2
 8018082:	d004      	beq.n	801808e <_ZN7TMC22099configureEv+0xb2>
 8018084:	e007      	b.n	8018096 <_ZN7TMC22099configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 8018086:	4872      	ldr	r0, [pc, #456]	@ (8018250 <_ZN7TMC22099configureEv+0x274>)
 8018088:	f011 fa14 	bl	80294b4 <puts>
 801808c:	e007      	b.n	801809e <_ZN7TMC22099configureEv+0xc2>
            case 2: printf("No power\n"); break;
 801808e:	4871      	ldr	r0, [pc, #452]	@ (8018254 <_ZN7TMC22099configureEv+0x278>)
 8018090:	f011 fa10 	bl	80294b4 <puts>
 8018094:	e003      	b.n	801809e <_ZN7TMC22099configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 8018096:	4870      	ldr	r0, [pc, #448]	@ (8018258 <_ZN7TMC22099configureEv+0x27c>)
 8018098:	f011 fa0c 	bl	80294b4 <puts>
 801809c:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 801809e:	486f      	ldr	r0, [pc, #444]	@ (801825c <_ZN7TMC22099configureEv+0x280>)
 80180a0:	f011 fa08 	bl	80294b4 <puts>
 80180a4:	e002      	b.n	80180ac <_ZN7TMC22099configureEv+0xd0>
    } else {
        printf("OK\n");
 80180a6:	486e      	ldr	r0, [pc, #440]	@ (8018260 <_ZN7TMC22099configureEv+0x284>)
 80180a8:	f011 fa04 	bl	80294b4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	334c      	adds	r3, #76	@ 0x4c
 80180b0:	4618      	mov	r0, r3
 80180b2:	f000 f9dc 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180b6:	4603      	mov	r3, r0
 80180b8:	2104      	movs	r1, #4
 80180ba:	4618      	mov	r0, r3
 80180bc:	f7ea fe27 	bl	8002d0e <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	334c      	adds	r3, #76	@ 0x4c
 80180c4:	4618      	mov	r0, r3
 80180c6:	f000 f9d2 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2118      	movs	r1, #24
 80180ce:	4618      	mov	r0, r3
 80180d0:	f7ec fcb2 	bl	8004a38 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	334c      	adds	r3, #76	@ 0x4c
 80180d8:	4618      	mov	r0, r3
 80180da:	f000 f9c8 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180de:	4603      	mov	r3, r0
 80180e0:	461a      	mov	r2, r3
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80180e8:	4619      	mov	r1, r3
 80180ea:	4610      	mov	r0, r2
 80180ec:	f7ec fb3c 	bl	8004768 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	334c      	adds	r3, #76	@ 0x4c
 80180f4:	4618      	mov	r0, r3
 80180f6:	f000 f9ba 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180fa:	4603      	mov	r3, r0
 80180fc:	461a      	mov	r2, r3
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8018104:	4619      	mov	r1, r3
 8018106:	4610      	mov	r0, r2
 8018108:	f7ec fbe6 	bl	80048d8 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	334c      	adds	r3, #76	@ 0x4c
 8018110:	4618      	mov	r0, r3
 8018112:	f000 f9ac 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018116:	4603      	mov	r3, r0
 8018118:	4952      	ldr	r1, [pc, #328]	@ (8018264 <_ZN7TMC22099configureEv+0x288>)
 801811a:	4618      	mov	r0, r3
 801811c:	f7ec f946 	bl	80043ac <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	334c      	adds	r3, #76	@ 0x4c
 8018124:	4618      	mov	r0, r3
 8018126:	f000 f9a2 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801812a:	4603      	mov	r3, r0
 801812c:	2105      	movs	r1, #5
 801812e:	4618      	mov	r0, r3
 8018130:	f7ea ffd2 	bl	80030d8 <_ZN14TMC2209Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	334c      	adds	r3, #76	@ 0x4c
 8018138:	4618      	mov	r0, r3
 801813a:	f000 f998 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801813e:	4603      	mov	r3, r0
 8018140:	2102      	movs	r1, #2
 8018142:	4618      	mov	r0, r3
 8018144:	f7ea ffe7 	bl	8003116 <_ZN14TMC2209Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	334c      	adds	r3, #76	@ 0x4c
 801814c:	4618      	mov	r0, r3
 801814e:	f000 f98e 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018152:	4603      	mov	r3, r0
 8018154:	2101      	movs	r1, #1
 8018156:	4618      	mov	r0, r3
 8018158:	f7ea fffc 	bl	8003154 <_ZN14TMC2209Stepper4sednEh>
    driver->en_spreadCycle(!stealth);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	334c      	adds	r3, #76	@ 0x4c
 8018160:	4618      	mov	r0, r3
 8018162:	f000 f984 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018166:	4603      	mov	r3, r0
 8018168:	461a      	mov	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018170:	f083 0301 	eor.w	r3, r3, #1
 8018174:	b2db      	uxtb	r3, r3
 8018176:	4619      	mov	r1, r3
 8018178:	4610      	mov	r0, r2
 801817a:	f7eb f856 	bl	800322a <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	334c      	adds	r3, #76	@ 0x4c
 8018182:	4618      	mov	r0, r3
 8018184:	f000 f973 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018188:	4603      	mov	r3, r0
 801818a:	2101      	movs	r1, #1
 801818c:	4618      	mov	r0, r3
 801818e:	f7eb f94f 	bl	8003430 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018198:	2b00      	cmp	r3, #0
 801819a:	d012      	beq.n	80181c2 <_ZN7TMC22099configureEv+0x1e6>
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d00d      	beq.n	80181c2 <_ZN7TMC22099configureEv+0x1e6>
        // StallGuard sensitivity threshold (higher = more sensitive)
        driver->SGTHRS(stall);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	334c      	adds	r3, #76	@ 0x4c
 80181aa:	4618      	mov	r0, r3
 80181ac:	f000 f95f 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181b0:	4602      	mov	r2, r0
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	4619      	mov	r1, r3
 80181bc:	4610      	mov	r0, r2
 80181be:	f7ec f8de 	bl	800437e <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	334c      	adds	r3, #76	@ 0x4c
 80181c6:	4618      	mov	r0, r3
 80181c8:	f000 f951 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181cc:	4603      	mov	r3, r0
 80181ce:	210a      	movs	r1, #10
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7eb f8e2 	bl	800339a <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	334c      	adds	r3, #76	@ 0x4c
 80181da:	4618      	mov	r0, r3
 80181dc:	f000 f947 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181e0:	4603      	mov	r3, r0
 80181e2:	2180      	movs	r1, #128	@ 0x80
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7ec fc5f 	bl	8004aa8 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 80181ea:	481f      	ldr	r0, [pc, #124]	@ (8018268 <_ZN7TMC22099configureEv+0x28c>)
 80181ec:	f011 f962 	bl	80294b4 <puts>
    instance->getSerialThread()->stopThread();
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	6a1b      	ldr	r3, [r3, #32]
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7fc fefe 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 80181fa:	4603      	mov	r3, r0
 80181fc:	4618      	mov	r0, r3
 80181fe:	f002 fe54 	bl	801aeaa <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6a1b      	ldr	r3, [r3, #32]
 8018206:	4618      	mov	r0, r3
 8018208:	f7fc fef5 	bl	8014ff6 <_ZN6Remora15getSerialThreadEv>
 801820c:	4604      	mov	r4, r0
 801820e:	f107 020c 	add.w	r2, r7, #12
 8018212:	f107 031c 	add.w	r3, r7, #28
 8018216:	4611      	mov	r1, r2
 8018218:	4618      	mov	r0, r3
 801821a:	f7fd fbf7 	bl	8015a0c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801821e:	f107 031c 	add.w	r3, r7, #28
 8018222:	4619      	mov	r1, r3
 8018224:	4620      	mov	r0, r4
 8018226:	f002 fdcb 	bl	801adc0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 801822a:	f107 031c 	add.w	r3, r7, #28
 801822e:	4618      	mov	r0, r3
 8018230:	f7f2 fff7 	bl	800b222 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8018234:	f107 030c 	add.w	r3, r7, #12
 8018238:	4618      	mov	r0, r3
 801823a:	f7fc ff5f 	bl	80150fc <_ZNSt10shared_ptrI3TMCED1Ev>
 801823e:	372c      	adds	r7, #44	@ 0x2c
 8018240:	46bd      	mov	sp, r7
 8018242:	bd90      	pop	{r4, r7, pc}
 8018244:	0802adf0 	.word	0x0802adf0
 8018248:	0802ae0c 	.word	0x0802ae0c
 801824c:	0802ae34 	.word	0x0802ae34
 8018250:	0802ae4c 	.word	0x0802ae4c
 8018254:	0802ae60 	.word	0x0802ae60
 8018258:	0802ae6c 	.word	0x0802ae6c
 801825c:	0802ae7c 	.word	0x0802ae7c
 8018260:	0802aea4 	.word	0x0802aea4
 8018264:	000fffff 	.word	0x000fffff
 8018268:	0802aea8 	.word	0x0802aea8

0801826c <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b082      	sub	sp, #8
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	334c      	adds	r3, #76	@ 0x4c
 8018278:	4618      	mov	r0, r3
 801827a:	f000 f8f8 	bl	801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801827e:	4603      	mov	r3, r0
 8018280:	695b      	ldr	r3, [r3, #20]
 8018282:	4618      	mov	r0, r3
 8018284:	f7ea fa51 	bl	800272a <_ZN14SoftwareSerial13tickerHandlerEv>
}
 8018288:	bf00      	nop
 801828a:	3708      	adds	r7, #8
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}

08018290 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
    return as<T>();
 8018298:	6878      	ldr	r0, [r7, #4]
 801829a:	f000 f8f4 	bl	8018486 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 801829e:	4603      	mov	r3, r0
  }
 80182a0:	4618      	mov	r0, r3
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b08c      	sub	sp, #48	@ 0x30
 80182ac:	af02      	add	r7, sp, #8
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80182b4:	68ba      	ldr	r2, [r7, #8]
 80182b6:	f107 0314 	add.w	r3, r7, #20
 80182ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182be:	e883 0003 	stmia.w	r3, {r0, r1}
 80182c2:	f107 031c 	add.w	r3, r7, #28
 80182c6:	6879      	ldr	r1, [r7, #4]
 80182c8:	4618      	mov	r0, r3
 80182ca:	f000 f8fe 	bl	80184ca <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80182ce:	466a      	mov	r2, sp
 80182d0:	f107 0320 	add.w	r3, r7, #32
 80182d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80182dc:	69fb      	ldr	r3, [r7, #28]
 80182de:	f107 0214 	add.w	r2, r7, #20
 80182e2:	ca06      	ldmia	r2, {r1, r2}
 80182e4:	68f8      	ldr	r0, [r7, #12]
 80182e6:	f7ef fd46 	bl	8007d76 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80182ea:	68f8      	ldr	r0, [r7, #12]
 80182ec:	3728      	adds	r7, #40	@ 0x28
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}

080182f2 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80182f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182f6:	b08e      	sub	sp, #56	@ 0x38
 80182f8:	af06      	add	r7, sp, #24
 80182fa:	6178      	str	r0, [r7, #20]
 80182fc:	6139      	str	r1, [r7, #16]
 80182fe:	60fa      	str	r2, [r7, #12]
 8018300:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 8018302:	f107 031c 	add.w	r3, r7, #28
 8018306:	469a      	mov	sl, r3
 8018308:	6938      	ldr	r0, [r7, #16]
 801830a:	f7fd fc51 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801830e:	4680      	mov	r8, r0
 8018310:	68f8      	ldr	r0, [r7, #12]
 8018312:	f7fd fc58 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018316:	4681      	mov	r9, r0
 8018318:	68b8      	ldr	r0, [r7, #8]
 801831a:	f000 f8e9 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801831e:	4604      	mov	r4, r0
 8018320:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018322:	f7fd fc5b 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018326:	4605      	mov	r5, r0
 8018328:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801832a:	f7fd fc57 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801832e:	4606      	mov	r6, r0
 8018330:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018332:	f7f9 f944 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801833a:	f7fd fc4f 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801833e:	6038      	str	r0, [r7, #0]
 8018340:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018342:	f7fd fc56 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018346:	4603      	mov	r3, r0
 8018348:	9305      	str	r3, [sp, #20]
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	9304      	str	r3, [sp, #16]
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	9303      	str	r3, [sp, #12]
 8018352:	9602      	str	r6, [sp, #8]
 8018354:	9501      	str	r5, [sp, #4]
 8018356:	9400      	str	r4, [sp, #0]
 8018358:	464b      	mov	r3, r9
 801835a:	4642      	mov	r2, r8
 801835c:	4651      	mov	r1, sl
 801835e:	6978      	ldr	r0, [r7, #20]
 8018360:	f000 f8d1 	bl	8018506 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8018364:	6978      	ldr	r0, [r7, #20]
 8018366:	3720      	adds	r7, #32
 8018368:	46bd      	mov	sp, r7
 801836a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801836e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801836e:	b590      	push	{r4, r7, lr}
 8018370:	b083      	sub	sp, #12
 8018372:	af00      	add	r7, sp, #0
 8018374:	6078      	str	r0, [r7, #4]
 8018376:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8018378:	687c      	ldr	r4, [r7, #4]
 801837a:	6838      	ldr	r0, [r7, #0]
 801837c:	f000 f901 	bl	8018582 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>
 8018380:	4603      	mov	r3, r0
 8018382:	4619      	mov	r1, r3
 8018384:	4620      	mov	r0, r4
 8018386:	f000 f907 	bl	8018598 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	4618      	mov	r0, r3
 801838e:	370c      	adds	r7, #12
 8018390:	46bd      	mov	sp, r7
 8018392:	bd90      	pop	{r4, r7, pc}

08018394 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8018394:	b590      	push	{r4, r7, lr}
 8018396:	ed2d 8b02 	vpush	{d8}
 801839a:	b091      	sub	sp, #68	@ 0x44
 801839c:	af00      	add	r7, sp, #0
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	607a      	str	r2, [r7, #4]
 80183a4:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80183a6:	206c      	movs	r0, #108	@ 0x6c
 80183a8:	f010 f96a 	bl	8028680 <_Znwj>
 80183ac:	4603      	mov	r3, r0
 80183ae:	461c      	mov	r4, r3
 80183b0:	68b8      	ldr	r0, [r7, #8]
 80183b2:	f7f7 fa23 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80183b6:	4602      	mov	r2, r0
 80183b8:	f107 0310 	add.w	r3, r7, #16
 80183bc:	4611      	mov	r1, r2
 80183be:	4618      	mov	r0, r3
 80183c0:	f010 fc69 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80183c4:	6878      	ldr	r0, [r7, #4]
 80183c6:	f7f7 fa19 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80183ca:	4602      	mov	r2, r0
 80183cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80183d0:	4611      	mov	r1, r2
 80183d2:	4618      	mov	r0, r3
 80183d4:	f010 fc5f 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80183d8:	6838      	ldr	r0, [r7, #0]
 80183da:	f7fd fbf4 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80183de:	4603      	mov	r3, r0
 80183e0:	ed93 8a00 	vldr	s16, [r3]
 80183e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80183e6:	f000 f883 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80183ea:	4603      	mov	r3, r0
 80183ec:	781b      	ldrb	r3, [r3, #0]
 80183ee:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80183f2:	f107 0110 	add.w	r1, r7, #16
 80183f6:	eeb0 0a48 	vmov.f32	s0, s16
 80183fa:	4620      	mov	r0, r4
 80183fc:	f7ff fc3e 	bl	8017c7c <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8018400:	4621      	mov	r1, r4
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f000 f8f6 	bl	80185f4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8018408:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801840c:	4618      	mov	r0, r3
 801840e:	f010 fa32 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8018412:	f107 0310 	add.w	r3, r7, #16
 8018416:	4618      	mov	r0, r3
 8018418:	f010 fa2d 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801841c:	bf00      	nop
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	3744      	adds	r7, #68	@ 0x44
 8018422:	46bd      	mov	sp, r7
 8018424:	ecbd 8b02 	vpop	{d8}
 8018428:	bd90      	pop	{r4, r7, pc}

0801842a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 801842a:	b590      	push	{r4, r7, lr}
 801842c:	b085      	sub	sp, #20
 801842e:	af00      	add	r7, sp, #0
 8018430:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	4618      	mov	r0, r3
 8018436:	f000 f8ec 	bl	8018612 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 801843a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d00c      	beq.n	801845e <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f000 f8f1 	bl	801862c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>
 801844a:	4604      	mov	r4, r0
 801844c:	68f8      	ldr	r0, [r7, #12]
 801844e:	f000 f8fa 	bl	8018646 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8018452:	4603      	mov	r3, r0
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	4619      	mov	r1, r3
 8018458:	4620      	mov	r0, r4
 801845a:	f000 f911 	bl	8018680 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>
	__ptr = pointer();
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	2200      	movs	r2, #0
 8018462:	601a      	str	r2, [r3, #0]
      }
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	4618      	mov	r0, r3
 8018468:	3714      	adds	r7, #20
 801846a:	46bd      	mov	sp, r7
 801846c:	bd90      	pop	{r4, r7, pc}

0801846e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 801846e:	b580      	push	{r7, lr}
 8018470:	b082      	sub	sp, #8
 8018472:	af00      	add	r7, sp, #0
 8018474:	6078      	str	r0, [r7, #4]
	return get();
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f000 f915 	bl	80186a6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>
 801847c:	4603      	mov	r3, r0
      }
 801847e:	4618      	mov	r0, r3
 8018480:	3708      	adds	r7, #8
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}

08018486 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8018486:	b590      	push	{r4, r7, lr}
 8018488:	b087      	sub	sp, #28
 801848a:	af00      	add	r7, sp, #0
 801848c:	6078      	str	r0, [r7, #4]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	617b      	str	r3, [r7, #20]
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8018496:	6938      	ldr	r0, [r7, #16]
 8018498:	f7f0 fb7f 	bl	8008b9a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 801849c:	4604      	mov	r4, r0
 801849e:	6938      	ldr	r0, [r7, #16]
 80184a0:	f7f0 fa09 	bl	80088b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80184a4:	4602      	mov	r2, r0
 80184a6:	f107 0308 	add.w	r3, r7, #8
 80184aa:	4621      	mov	r1, r4
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7ed faa4 	bl	80059fa <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80184b2:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80184b4:	f107 0308 	add.w	r3, r7, #8
 80184b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184bc:	f000 f900 	bl	80186c0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 80184c0:	4603      	mov	r3, r0
}
 80184c2:	4618      	mov	r0, r3
 80184c4:	371c      	adds	r7, #28
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd90      	pop	{r4, r7, pc}

080184ca <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b082      	sub	sp, #8
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
 80184d2:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80184d4:	6838      	ldr	r0, [r7, #0]
 80184d6:	f000 f911 	bl	80186fc <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80184da:	4602      	mov	r2, r0
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	4611      	mov	r1, r2
 80184e0:	4618      	mov	r0, r3
 80184e2:	f000 f916 	bl	8018712 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 80184e6:	bf00      	nop
}
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	4618      	mov	r0, r3
 80184fc:	370c      	adds	r7, #12
 80184fe:	46bd      	mov	sp, r7
 8018500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018504:	4770      	bx	lr

08018506 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801850a:	b08f      	sub	sp, #60	@ 0x3c
 801850c:	af06      	add	r7, sp, #24
 801850e:	61f8      	str	r0, [r7, #28]
 8018510:	61b9      	str	r1, [r7, #24]
 8018512:	617a      	str	r2, [r7, #20]
 8018514:	613b      	str	r3, [r7, #16]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8018516:	69fc      	ldr	r4, [r7, #28]
 8018518:	6978      	ldr	r0, [r7, #20]
 801851a:	f7fd fb49 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801851e:	4680      	mov	r8, r0
 8018520:	6938      	ldr	r0, [r7, #16]
 8018522:	f7fd fb50 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018526:	4681      	mov	r9, r0
 8018528:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801852a:	f7ff ffe1 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801852e:	4605      	mov	r5, r0
 8018530:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018532:	f7fd fb53 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018536:	4606      	mov	r6, r0
 8018538:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801853a:	f7fd fb4f 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801853e:	60f8      	str	r0, [r7, #12]
 8018540:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018542:	f7f9 f83c 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018546:	60b8      	str	r0, [r7, #8]
 8018548:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801854a:	f7fd fb47 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801854e:	6078      	str	r0, [r7, #4]
 8018550:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018552:	f7fd fb4e 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018556:	4603      	mov	r3, r0
 8018558:	9305      	str	r3, [sp, #20]
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	9304      	str	r3, [sp, #16]
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	9303      	str	r3, [sp, #12]
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	9302      	str	r3, [sp, #8]
 8018566:	9601      	str	r6, [sp, #4]
 8018568:	9500      	str	r5, [sp, #0]
 801856a:	464b      	mov	r3, r9
 801856c:	4642      	mov	r2, r8
 801856e:	69b9      	ldr	r1, [r7, #24]
 8018570:	4620      	mov	r0, r4
 8018572:	f000 f8dd 	bl	8018730 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	4618      	mov	r0, r3
 801857a:	3724      	adds	r7, #36	@ 0x24
 801857c:	46bd      	mov	sp, r7
 801857e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018582 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8018582:	b480      	push	{r7}
 8018584:	b083      	sub	sp, #12
 8018586:	af00      	add	r7, sp, #0
 8018588:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	4618      	mov	r0, r3
 801858e:	370c      	adds	r7, #12
 8018590:	46bd      	mov	sp, r7
 8018592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018596:	4770      	bx	lr

08018598 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	601a      	str	r2, [r3, #0]
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	3304      	adds	r3, #4
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7f4 fe62 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	1d1a      	adds	r2, r3, #4
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	3304      	adds	r3, #4
 80185bc:	4619      	mov	r1, r3
 80185be:	4610      	mov	r0, r2
 80185c0:	f7f5 fa19 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	2200      	movs	r2, #0
 80185c8:	601a      	str	r2, [r3, #0]
	}
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	4618      	mov	r0, r3
 80185ce:	3708      	adds	r7, #8
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	6039      	str	r1, [r7, #0]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	683a      	ldr	r2, [r7, #0]
 80185e2:	4611      	mov	r1, r2
 80185e4:	4618      	mov	r0, r3
 80185e6:	f000 f8ef 	bl	80187c8 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	4618      	mov	r0, r3
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
 80185fc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6839      	ldr	r1, [r7, #0]
 8018602:	4618      	mov	r0, r3
 8018604:	f7ff ffe6 	bl	80185d4 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	4618      	mov	r0, r3
 801860c:	3708      	adds	r7, #8
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}

08018612 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8018612:	b580      	push	{r7, lr}
 8018614:	b082      	sub	sp, #8
 8018616:	af00      	add	r7, sp, #0
 8018618:	6078      	str	r0, [r7, #4]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	4618      	mov	r0, r3
 801861e:	f000 f8e7 	bl	80187f0 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8018622:	4603      	mov	r3, r0
 8018624:	4618      	mov	r0, r3
 8018626:	3708      	adds	r7, #8
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}

0801862c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801862c:	b580      	push	{r7, lr}
 801862e:	b082      	sub	sp, #8
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	4618      	mov	r0, r3
 8018638:	f000 f8e7 	bl	801880a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>
 801863c:	4603      	mov	r3, r0
 801863e:	4618      	mov	r0, r3
 8018640:	3708      	adds	r7, #8
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}

08018646 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8018646:	b480      	push	{r7}
 8018648:	b083      	sub	sp, #12
 801864a:	af00      	add	r7, sp, #0
 801864c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	4618      	mov	r0, r3
 8018652:	370c      	adds	r7, #12
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr

0801865c <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	4a05      	ldr	r2, [pc, #20]	@ (801867c <_ZN14TMC2209StepperD1Ev+0x20>)
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	601a      	str	r2, [r3, #0]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	4618      	mov	r0, r3
 801866e:	f7fc fcd1 	bl	8015014 <_ZN14TMC2208StepperD1Ev>
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	4618      	mov	r0, r3
 8018676:	3708      	adds	r7, #8
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	0802b680 	.word	0x0802b680

08018680 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8018680:	b590      	push	{r4, r7, lr}
 8018682:	b083      	sub	sp, #12
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
 8018688:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801868a:	683c      	ldr	r4, [r7, #0]
 801868c:	2c00      	cmp	r4, #0
 801868e:	d006      	beq.n	801869e <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_+0x1e>
 8018690:	4620      	mov	r0, r4
 8018692:	f7ff ffe3 	bl	801865c <_ZN14TMC2209StepperD1Ev>
 8018696:	216c      	movs	r1, #108	@ 0x6c
 8018698:	4620      	mov	r0, r4
 801869a:	f00f ffe0 	bl	802865e <_ZdlPvj>
      }
 801869e:	bf00      	nop
 80186a0:	370c      	adds	r7, #12
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd90      	pop	{r4, r7, pc}

080186a6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80186a6:	b580      	push	{r7, lr}
 80186a8:	b082      	sub	sp, #8
 80186aa:	af00      	add	r7, sp, #0
 80186ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	4618      	mov	r0, r3
 80186b2:	f000 f8b7 	bl	8018824 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80186b6:	4603      	mov	r3, r0
 80186b8:	4618      	mov	r0, r3
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	463b      	mov	r3, r7
 80186c8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80186cc:	463b      	mov	r3, r7
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7ee ff12 	bl	80074f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80186d4:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80186d6:	463b      	mov	r3, r7
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ee ff19 	bl	8007510 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80186de:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d005      	beq.n	80186f2 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80186e6:	68b9      	ldr	r1, [r7, #8]
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f000 f8a9 	bl	8018840 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 80186ee:	4603      	mov	r3, r0
 80186f0:	e000      	b.n	80186f4 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 80186f2:	2300      	movs	r3, #0
  }
 80186f4:	4618      	mov	r0, r3
 80186f6:	3710      	adds	r7, #16
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80186fc:	b480      	push	{r7}
 80186fe:	b083      	sub	sp, #12
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8018704:	687b      	ldr	r3, [r7, #4]
}
 8018706:	4618      	mov	r0, r3
 8018708:	370c      	adds	r7, #12
 801870a:	46bd      	mov	sp, r7
 801870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018710:	4770      	bx	lr

08018712 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8018712:	b580      	push	{r7, lr}
 8018714:	b082      	sub	sp, #8
 8018716:	af00      	add	r7, sp, #0
 8018718:	6078      	str	r0, [r7, #4]
 801871a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801871c:	2301      	movs	r3, #1
 801871e:	2211      	movs	r2, #17
 8018720:	6839      	ldr	r1, [r7, #0]
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7ec fda2 	bl	800526c <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	3708      	adds	r7, #8
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018734:	b092      	sub	sp, #72	@ 0x48
 8018736:	af08      	add	r7, sp, #32
 8018738:	6278      	str	r0, [r7, #36]	@ 0x24
 801873a:	6239      	str	r1, [r7, #32]
 801873c:	61fa      	str	r2, [r7, #28]
 801873e:	61bb      	str	r3, [r7, #24]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8018740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018742:	2200      	movs	r2, #0
 8018744:	601a      	str	r2, [r3, #0]
 8018746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018748:	1d1c      	adds	r4, r3, #4
 801874a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801874c:	69f8      	ldr	r0, [r7, #28]
 801874e:	f7fd fa2f 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018752:	4680      	mov	r8, r0
 8018754:	69b8      	ldr	r0, [r7, #24]
 8018756:	f7fd fa36 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801875a:	4606      	mov	r6, r0
 801875c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801875e:	f7ff fec7 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018762:	6178      	str	r0, [r7, #20]
 8018764:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018766:	f7fd fa39 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801876a:	6138      	str	r0, [r7, #16]
 801876c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801876e:	f7fd fa35 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018772:	60f8      	str	r0, [r7, #12]
 8018774:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018776:	f7f8 ff22 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801877a:	60b8      	str	r0, [r7, #8]
 801877c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801877e:	f7fd fa2d 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018782:	6078      	str	r0, [r7, #4]
 8018784:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018786:	f7fd fa34 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801878a:	4603      	mov	r3, r0
 801878c:	9306      	str	r3, [sp, #24]
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	9305      	str	r3, [sp, #20]
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	9304      	str	r3, [sp, #16]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	9303      	str	r3, [sp, #12]
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	9302      	str	r3, [sp, #8]
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	9301      	str	r3, [sp, #4]
 80187a2:	9600      	str	r6, [sp, #0]
 80187a4:	4643      	mov	r3, r8
 80187a6:	6a3a      	ldr	r2, [r7, #32]
 80187a8:	4629      	mov	r1, r5
 80187aa:	4620      	mov	r0, r4
 80187ac:	f000 f8da 	bl	8018964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80187b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	4619      	mov	r1, r3
 80187b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80187b8:	f000 f946 	bl	8018a48 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80187bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187be:	4618      	mov	r0, r3
 80187c0:	3728      	adds	r7, #40	@ 0x28
 80187c2:	46bd      	mov	sp, r7
 80187c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187c8 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80187c8:	b590      	push	{r4, r7, lr}
 80187ca:	b083      	sub	sp, #12
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
 80187d0:	6039      	str	r1, [r7, #0]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	4618      	mov	r0, r3
 80187d6:	f000 f958 	bl	8018a8a <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80187da:	683c      	ldr	r4, [r7, #0]
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	f7ff ff18 	bl	8018612 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80187e2:	4603      	mov	r3, r0
 80187e4:	601c      	str	r4, [r3, #0]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	4618      	mov	r0, r3
 80187ea:	370c      	adds	r7, #12
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd90      	pop	{r4, r7, pc}

080187f0 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	4618      	mov	r0, r3
 80187fc:	f000 f952 	bl	8018aa4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018800:	4603      	mov	r3, r0
 8018802:	4618      	mov	r0, r3
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}

0801880a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801880a:	b580      	push	{r7, lr}
 801880c:	b082      	sub	sp, #8
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	4618      	mov	r0, r3
 8018816:	f000 f951 	bl	8018abc <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801881a:	4603      	mov	r3, r0
 801881c:	4618      	mov	r0, r3
 801881e:	3708      	adds	r7, #8
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8018824:	b580      	push	{r7, lr}
 8018826:	b082      	sub	sp, #8
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	4618      	mov	r0, r3
 8018830:	f000 f950 	bl	8018ad4 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8018834:	4603      	mov	r3, r0
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4618      	mov	r0, r3
 801883a:	3708      	adds	r7, #8
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}

08018840 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801884a:	6839      	ldr	r1, [r7, #0]
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f7ed fe69 	bl	8006524 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8018852:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	791b      	ldrb	r3, [r3, #4]
 8018858:	3b04      	subs	r3, #4
 801885a:	2b1a      	cmp	r3, #26
 801885c:	d87c      	bhi.n	8018958 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 801885e:	a201      	add	r2, pc, #4	@ (adr r2, 8018864 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 8018860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018864:	08018917 	.word	0x08018917
 8018868:	08018925 	.word	0x08018925
 801886c:	080188d1 	.word	0x080188d1
 8018870:	08018959 	.word	0x08018959
 8018874:	08018959 	.word	0x08018959
 8018878:	08018959 	.word	0x08018959
 801887c:	080188d7 	.word	0x080188d7
 8018880:	08018959 	.word	0x08018959
 8018884:	080188e5 	.word	0x080188e5
 8018888:	08018959 	.word	0x08018959
 801888c:	08018935 	.word	0x08018935
 8018890:	08018959 	.word	0x08018959
 8018894:	08018959 	.word	0x08018959
 8018898:	08018959 	.word	0x08018959
 801889c:	08018959 	.word	0x08018959
 80188a0:	08018959 	.word	0x08018959
 80188a4:	08018959 	.word	0x08018959
 80188a8:	08018959 	.word	0x08018959
 80188ac:	08018959 	.word	0x08018959
 80188b0:	08018959 	.word	0x08018959
 80188b4:	08018959 	.word	0x08018959
 80188b8:	08018959 	.word	0x08018959
 80188bc:	080188f3 	.word	0x080188f3
 80188c0:	08018959 	.word	0x08018959
 80188c4:	08018905 	.word	0x08018905
 80188c8:	08018959 	.word	0x08018959
 80188cc:	08018947 	.word	0x08018947
        return content_.asBoolean;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	e041      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4618      	mov	r0, r3
 80188dc:	f000 f907 	bl	8018aee <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 80188e0:	4603      	mov	r3, r0
 80188e2:	e03a      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	4618      	mov	r0, r3
 80188ea:	f000 f912 	bl	8018b12 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 80188ee:	4603      	mov	r3, r0
 80188f0:	e033      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f8:	4610      	mov	r0, r2
 80188fa:	4619      	mov	r1, r3
 80188fc:	f000 f91b 	bl	8018b36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018900:	4603      	mov	r3, r0
 8018902:	e02a      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801890a:	4610      	mov	r0, r2
 801890c:	4619      	mov	r1, r3
 801890e:	f000 f925 	bl	8018b5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018912:	4603      	mov	r3, r0
 8018914:	e021      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	4618      	mov	r0, r3
 801891c:	f000 f931 	bl	8018b82 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018920:	4603      	mov	r3, r0
 8018922:	e01a      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	3308      	adds	r3, #8
 801892a:	4618      	mov	r0, r3
 801892c:	f000 f929 	bl	8018b82 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018930:	4603      	mov	r3, r0
 8018932:	e012      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	edd3 7a00 	vldr	s15, [r3]
 801893a:	eeb0 0a67 	vmov.f32	s0, s15
 801893e:	f000 f934 	bl	8018baa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018942:	4603      	mov	r3, r0
 8018944:	e009      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	ed93 7b00 	vldr	d7, [r3]
 801894c:	eeb0 0b47 	vmov.f64	d0, d7
 8018950:	f000 f945 	bl	8018bde <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018954:	4603      	mov	r3, r0
 8018956:	e000      	b.n	801895a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8018958:	2300      	movs	r3, #0
  }
 801895a:	4618      	mov	r0, r3
 801895c:	3710      	adds	r7, #16
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop

08018964 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8018964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018968:	b094      	sub	sp, #80	@ 0x50
 801896a:	af06      	add	r7, sp, #24
 801896c:	61f8      	str	r0, [r7, #28]
 801896e:	61b9      	str	r1, [r7, #24]
 8018970:	617a      	str	r2, [r7, #20]
 8018972:	613b      	str	r3, [r7, #16]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8018974:	697a      	ldr	r2, [r7, #20]
 8018976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801897a:	4611      	mov	r1, r2
 801897c:	4618      	mov	r0, r3
 801897e:	f000 f948 	bl	8018c12 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8018982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018986:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801898a:	4611      	mov	r1, r2
 801898c:	4618      	mov	r0, r3
 801898e:	f000 f959 	bl	8018c44 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8018992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018996:	4618      	mov	r0, r3
 8018998:	f000 f97c 	bl	8018c94 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801899c:	6378      	str	r0, [r7, #52]	@ 0x34
	  auto __pi = ::new (__mem)
 801899e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189a0:	4619      	mov	r1, r3
 80189a2:	205c      	movs	r0, #92	@ 0x5c
 80189a4:	f7f2 f834 	bl	800aa10 <_ZnwjPv>
 80189a8:	4604      	mov	r4, r0
 80189aa:	6938      	ldr	r0, [r7, #16]
 80189ac:	f7fd f900 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80189b0:	4680      	mov	r8, r0
 80189b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80189b4:	f7fd f907 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80189b8:	4681      	mov	r9, r0
 80189ba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80189bc:	f7ff fd98 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80189c0:	4605      	mov	r5, r0
 80189c2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80189c4:	f7fd f90a 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80189c8:	4606      	mov	r6, r0
 80189ca:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80189cc:	f7fd f906 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80189d0:	60f8      	str	r0, [r7, #12]
 80189d2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80189d4:	f7f8 fdf3 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80189d8:	60b8      	str	r0, [r7, #8]
 80189da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80189dc:	f7fd f8fe 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80189e0:	6078      	str	r0, [r7, #4]
 80189e2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80189e4:	f7fd f905 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80189e8:	4603      	mov	r3, r0
 80189ea:	9305      	str	r3, [sp, #20]
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	9304      	str	r3, [sp, #16]
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	9303      	str	r3, [sp, #12]
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	9302      	str	r3, [sp, #8]
 80189f8:	9601      	str	r6, [sp, #4]
 80189fa:	9500      	str	r5, [sp, #0]
 80189fc:	464b      	mov	r3, r9
 80189fe:	4642      	mov	r2, r8
 8018a00:	4651      	mov	r1, sl
 8018a02:	4620      	mov	r0, r4
 8018a04:	f000 f954 	bl	8018cb0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 8018a08:	633c      	str	r4, [r7, #48]	@ 0x30
	  __guard = nullptr;
 8018a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a0e:	2100      	movs	r1, #0
 8018a10:	4618      	mov	r0, r3
 8018a12:	f000 f99d 	bl	8018d50 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8018a16:	69fb      	ldr	r3, [r7, #28]
 8018a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a1a:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8018a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018a1e:	f000 f9a6 	bl	8018d6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018a22:	4602      	mov	r2, r0
 8018a24:	69bb      	ldr	r3, [r7, #24]
 8018a26:	601a      	str	r2, [r3, #0]
	}
 8018a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f000 f91c 	bl	8018c6a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8018a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a36:	4618      	mov	r0, r3
 8018a38:	f000 f8f8 	bl	8018c2c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018a3c:	69fb      	ldr	r3, [r7, #28]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3738      	adds	r7, #56	@ 0x38
 8018a42:	46bd      	mov	sp, r7
 8018a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018a48 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b084      	sub	sp, #16
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
 8018a50:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	1d1a      	adds	r2, r3, #4
 8018a56:	683b      	ldr	r3, [r7, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d002      	beq.n	8018a62 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8018a5c:	683b      	ldr	r3, [r7, #0]
 8018a5e:	3318      	adds	r3, #24
 8018a60:	e000      	b.n	8018a64 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 8018a62:	2300      	movs	r3, #0
 8018a64:	4619      	mov	r1, r3
 8018a66:	4610      	mov	r0, r2
 8018a68:	f7fd ffb9 	bl	80169de <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8018a6c:	60f8      	str	r0, [r7, #12]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d006      	beq.n	8018a82 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	3304      	adds	r3, #4
 8018a78:	461a      	mov	r2, r3
 8018a7a:	6839      	ldr	r1, [r7, #0]
 8018a7c:	68f8      	ldr	r0, [r7, #12]
 8018a7e:	f000 f984 	bl	8018d8a <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 8018a82:	bf00      	nop
 8018a84:	3710      	adds	r7, #16
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}

08018a8a <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8018a8a:	b580      	push	{r7, lr}
 8018a8c:	b082      	sub	sp, #8
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	4618      	mov	r0, r3
 8018a96:	f000 f988 	bl	8018daa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}

08018aa4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b082      	sub	sp, #8
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f000 f98c 	bl	8018dca <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	3708      	adds	r7, #8
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}

08018abc <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 f98d 	bl	8018de4 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8018aca:	4603      	mov	r3, r0
 8018acc:	4618      	mov	r0, r3
 8018ace:	3708      	adds	r7, #8
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}

08018ad4 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b082      	sub	sp, #8
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f000 f98c 	bl	8018dfc <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}

08018aee <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 8018aee:	b580      	push	{r7, lr}
 8018af0:	b082      	sub	sp, #8
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	f000 f98c 	bl	8018e14 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018afc:	4603      	mov	r3, r0
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d002      	beq.n	8018b08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	e000      	b.n	8018b0a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 8018b08:	2300      	movs	r3, #0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3708      	adds	r7, #8
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}

08018b12 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 8018b12:	b580      	push	{r7, lr}
 8018b14:	b082      	sub	sp, #8
 8018b16:	af00      	add	r7, sp, #0
 8018b18:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f000 f98c 	bl	8018e38 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d002      	beq.n	8018b2c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	e000      	b.n	8018b2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 8018b2c:	2300      	movs	r3, #0
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3708      	adds	r7, #8
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}

08018b36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 8018b36:	b580      	push	{r7, lr}
 8018b38:	b082      	sub	sp, #8
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b44:	f000 f98f 	bl	8018e66 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d001      	beq.n	8018b52 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 8018b4e:	783b      	ldrb	r3, [r7, #0]
 8018b50:	e000      	b.n	8018b54 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 8018b52:	2300      	movs	r3, #0
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3708      	adds	r7, #8
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}

08018b5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b6a:	f000 f995 	bl	8018e98 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d001      	beq.n	8018b78 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 8018b74:	783b      	ldrb	r3, [r7, #0]
 8018b76:	e000      	b.n	8018b7a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 8018b78:	2300      	movs	r3, #0
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}

08018b82 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 8018b82:	b580      	push	{r7, lr}
 8018b84:	b086      	sub	sp, #24
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8018b8a:	f107 0308 	add.w	r3, r7, #8
 8018b8e:	6879      	ldr	r1, [r7, #4]
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7ed ff2b 	bl	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8018b96:	f107 0308 	add.w	r3, r7, #8
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f000 f99c 	bl	8018ed8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 8018ba0:	4603      	mov	r3, r0
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3718      	adds	r7, #24
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 8018baa:	b580      	push	{r7, lr}
 8018bac:	b082      	sub	sp, #8
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018bb4:	ed97 0a01 	vldr	s0, [r7, #4]
 8018bb8:	f000 f9dc 	bl	8018f74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d008      	beq.n	8018bd4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8018bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8018bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018bca:	edc7 7a00 	vstr	s15, [r7]
 8018bce:	783b      	ldrb	r3, [r7, #0]
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	e000      	b.n	8018bd6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8018bd4:	2300      	movs	r3, #0
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	3708      	adds	r7, #8
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}

08018bde <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8018bde:	b580      	push	{r7, lr}
 8018be0:	b084      	sub	sp, #16
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018be8:	ed97 0b02 	vldr	d0, [r7, #8]
 8018bec:	f000 f9ea 	bl	8018fc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d008      	beq.n	8018c08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 8018bf6:	ed97 7b02 	vldr	d7, [r7, #8]
 8018bfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018bfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8018c02:	793b      	ldrb	r3, [r7, #4]
 8018c04:	b2db      	uxtb	r3, r3
 8018c06:	e000      	b.n	8018c0a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 8018c08:	2300      	movs	r3, #0
}
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	3710      	adds	r7, #16
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}

08018c12 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8018c12:	b580      	push	{r7, lr}
 8018c14:	b082      	sub	sp, #8
 8018c16:	af00      	add	r7, sp, #0
 8018c18:	6078      	str	r0, [r7, #4]
 8018c1a:	6039      	str	r1, [r7, #0]
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f000 f9f9 	bl	8019014 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6878      	ldr	r0, [r7, #4]
 8018c36:	f000 f9f8 	bl	801902a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3708      	adds	r7, #8
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8018c4e:	2101      	movs	r1, #1
 8018c50:	6838      	ldr	r0, [r7, #0]
 8018c52:	f000 f9f5 	bl	8019040 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8018c56:	4603      	mov	r3, r0
 8018c58:	461a      	mov	r2, r3
 8018c5a:	6839      	ldr	r1, [r7, #0]
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f000 f9fe 	bl	801905e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	3708      	adds	r7, #8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}

08018c6a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8018c6a:	b580      	push	{r7, lr}
 8018c6c:	b082      	sub	sp, #8
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d007      	beq.n	8018c8a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6818      	ldr	r0, [r3, #0]
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	685b      	ldr	r3, [r3, #4]
 8018c82:	2201      	movs	r2, #1
 8018c84:	4619      	mov	r1, r3
 8018c86:	f000 f9fe 	bl	8019086 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3708      	adds	r7, #8
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}

08018c94 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f000 f9ff 	bl	80190a4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3708      	adds	r7, #8
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8018cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cb4:	b08c      	sub	sp, #48	@ 0x30
 8018cb6:	af06      	add	r7, sp, #24
 8018cb8:	6178      	str	r0, [r7, #20]
 8018cba:	7439      	strb	r1, [r7, #16]
 8018cbc:	60fa      	str	r2, [r7, #12]
 8018cbe:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7f5 fb4c 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8018cc8:	4a20      	ldr	r2, [pc, #128]	@ (8018d4c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0x9c>)
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	601a      	str	r2, [r3, #0]
 8018cce:	697b      	ldr	r3, [r7, #20]
 8018cd0:	330c      	adds	r3, #12
 8018cd2:	4621      	mov	r1, r4
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f000 f9f0 	bl	80190ba <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8018cda:	6978      	ldr	r0, [r7, #20]
 8018cdc:	f000 f847 	bl	8018d6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018ce0:	4680      	mov	r8, r0
 8018ce2:	68f8      	ldr	r0, [r7, #12]
 8018ce4:	f7fc ff64 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018ce8:	4681      	mov	r9, r0
 8018cea:	68b8      	ldr	r0, [r7, #8]
 8018cec:	f7fc ff6b 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018cf0:	4682      	mov	sl, r0
 8018cf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018cf4:	f7ff fbfc 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018cf8:	4604      	mov	r4, r0
 8018cfa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018cfc:	f7fc ff6e 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d00:	4605      	mov	r5, r0
 8018d02:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018d04:	f7fc ff6a 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d08:	4606      	mov	r6, r0
 8018d0a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018d0c:	f7f8 fc57 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d10:	6078      	str	r0, [r7, #4]
 8018d12:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018d14:	f7fc ff62 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d18:	6038      	str	r0, [r7, #0]
 8018d1a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018d1c:	f7fc ff69 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018d20:	4603      	mov	r3, r0
 8018d22:	f107 0010 	add.w	r0, r7, #16
 8018d26:	9305      	str	r3, [sp, #20]
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	9304      	str	r3, [sp, #16]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	9303      	str	r3, [sp, #12]
 8018d30:	9602      	str	r6, [sp, #8]
 8018d32:	9501      	str	r5, [sp, #4]
 8018d34:	9400      	str	r4, [sp, #0]
 8018d36:	4653      	mov	r3, sl
 8018d38:	464a      	mov	r2, r9
 8018d3a:	4641      	mov	r1, r8
 8018d3c:	f000 f9cc 	bl	80190d8 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	4618      	mov	r0, r3
 8018d44:	3718      	adds	r7, #24
 8018d46:	46bd      	mov	sp, r7
 8018d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d4c:	0802b640 	.word	0x0802b640

08018d50 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
 8018d58:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	605a      	str	r2, [r3, #4]
	return *this;
 8018d60:	687b      	ldr	r3, [r7, #4]
      }
 8018d62:	4618      	mov	r0, r3
 8018d64:	370c      	adds	r7, #12
 8018d66:	46bd      	mov	sp, r7
 8018d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6c:	4770      	bx	lr

08018d6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8018d6e:	b580      	push	{r7, lr}
 8018d70:	b082      	sub	sp, #8
 8018d72:	af00      	add	r7, sp, #0
 8018d74:	6078      	str	r0, [r7, #4]
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	330c      	adds	r3, #12
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f000 f9e5 	bl	801914a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8018d80:	4603      	mov	r3, r0
 8018d82:	4618      	mov	r0, r3
 8018d84:	3708      	adds	r7, #8
 8018d86:	46bd      	mov	sp, r7
 8018d88:	bd80      	pop	{r7, pc}

08018d8a <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8018d8a:	b580      	push	{r7, lr}
 8018d8c:	b084      	sub	sp, #16
 8018d8e:	af00      	add	r7, sp, #0
 8018d90:	60f8      	str	r0, [r7, #12]
 8018d92:	60b9      	str	r1, [r7, #8]
 8018d94:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	687a      	ldr	r2, [r7, #4]
 8018d9a:	68b9      	ldr	r1, [r7, #8]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fe f9a7 	bl	80170f0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8018da2:	bf00      	nop
 8018da4:	3710      	adds	r7, #16
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}

08018daa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8018daa:	b580      	push	{r7, lr}
 8018dac:	b082      	sub	sp, #8
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f000 f9d5 	bl	8019162 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f000 f9dd 	bl	801917a <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3708      	adds	r7, #8
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}

08018dca <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018dca:	b580      	push	{r7, lr}
 8018dcc:	b082      	sub	sp, #8
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	6078      	str	r0, [r7, #4]
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f000 f9de 	bl	8019196 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b082      	sub	sp, #8
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	f000 f9dd 	bl	80191ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>
 8018df2:	4603      	mov	r3, r0
 8018df4:	4618      	mov	r0, r3
 8018df6:	3708      	adds	r7, #8
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	bd80      	pop	{r7, pc}

08018dfc <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b082      	sub	sp, #8
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f000 f9dd 	bl	80191c4 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	3708      	adds	r7, #8
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}

08018e14 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018e1c:	f000 f8a2 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e20:	4603      	mov	r3, r0
 8018e22:	461a      	mov	r2, r3
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	4293      	cmp	r3, r2
 8018e28:	bf94      	ite	ls
 8018e2a:	2301      	movls	r3, #1
 8018e2c:	2300      	movhi	r3, #0
 8018e2e:	b2db      	uxtb	r3, r3
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3708      	adds	r7, #8
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}

08018e38 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b082      	sub	sp, #8
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	da01      	bge.n	8018e4a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8018e46:	2300      	movs	r3, #0
 8018e48:	e009      	b.n	8018e5e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018e4a:	f000 f88b 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e4e:	4603      	mov	r3, r0
 8018e50:	461a      	mov	r2, r3
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	4293      	cmp	r3, r2
 8018e56:	bfd4      	ite	le
 8018e58:	2301      	movle	r3, #1
 8018e5a:	2300      	movgt	r3, #0
 8018e5c:	b2db      	uxtb	r3, r3
}
 8018e5e:	4618      	mov	r0, r3
 8018e60:	3708      	adds	r7, #8
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}

08018e66 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e66:	b5b0      	push	{r4, r5, r7, lr}
 8018e68:	b082      	sub	sp, #8
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018e70:	f000 f878 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e74:	4603      	mov	r3, r0
 8018e76:	b2db      	uxtb	r3, r3
 8018e78:	2200      	movs	r2, #0
 8018e7a:	461c      	mov	r4, r3
 8018e7c:	4615      	mov	r5, r2
 8018e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018e82:	4294      	cmp	r4, r2
 8018e84:	eb75 0303 	sbcs.w	r3, r5, r3
 8018e88:	bf2c      	ite	cs
 8018e8a:	2301      	movcs	r3, #1
 8018e8c:	2300      	movcc	r3, #0
 8018e8e:	b2db      	uxtb	r3, r3
}
 8018e90:	4618      	mov	r0, r3
 8018e92:	3708      	adds	r7, #8
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bdb0      	pop	{r4, r5, r7, pc}

08018e98 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e98:	b5b0      	push	{r4, r5, r7, lr}
 8018e9a:	b082      	sub	sp, #8
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8018ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	da01      	bge.n	8018eae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	e00f      	b.n	8018ece <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018eae:	f000 f859 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	b2db      	uxtb	r3, r3
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	461c      	mov	r4, r3
 8018eba:	4615      	mov	r5, r2
 8018ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ec0:	4294      	cmp	r4, r2
 8018ec2:	eb75 0303 	sbcs.w	r3, r5, r3
 8018ec6:	bfac      	ite	ge
 8018ec8:	2301      	movge	r3, #1
 8018eca:	2300      	movlt	r3, #0
 8018ecc:	b2db      	uxtb	r3, r3
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3708      	adds	r7, #8
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018ed8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b082      	sub	sp, #8
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	781b      	ldrb	r3, [r3, #0]
 8018ee4:	3b01      	subs	r3, #1
 8018ee6:	2b03      	cmp	r3, #3
 8018ee8:	d82e      	bhi.n	8018f48 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 8018eea:	a201      	add	r2, pc, #4	@ (adr r2, 8018ef0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8018eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef0:	08018f01 	.word	0x08018f01
 8018ef4:	08018f13 	.word	0x08018f13
 8018ef8:	08018f25 	.word	0x08018f25
 8018efc:	08018f37 	.word	0x08018f37
        return convertNumber<T>(value_.asFloat);
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	edd3 7a02 	vldr	s15, [r3, #8]
 8018f06:	eeb0 0a67 	vmov.f32	s0, s15
 8018f0a:	f7ff fe4e 	bl	8018baa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	e01b      	b.n	8018f4a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018f18:	4610      	mov	r0, r2
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	f7ff fe1e 	bl	8018b5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018f20:	4603      	mov	r3, r0
 8018f22:	e012      	b.n	8018f4a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018f2a:	4610      	mov	r0, r2
 8018f2c:	4619      	mov	r1, r3
 8018f2e:	f7ff fe02 	bl	8018b36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018f32:	4603      	mov	r3, r0
 8018f34:	e009      	b.n	8018f4a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	ed93 7b02 	vldr	d7, [r3, #8]
 8018f3c:	eeb0 0b47 	vmov.f64	d0, d7
 8018f40:	f7ff fe4d 	bl	8018bde <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018f44:	4603      	mov	r3, r0
 8018f46:	e000      	b.n	8018f4a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 8018f48:	2300      	movs	r3, #0
  }
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	3708      	adds	r7, #8
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop

08018f54 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8018f54:	b480      	push	{r7}
 8018f56:	af00      	add	r7, sp, #0
    return 0;
 8018f58:	2300      	movs	r3, #0
  }
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f62:	4770      	bx	lr

08018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8018f64:	b480      	push	{r7}
 8018f66:	af00      	add	r7, sp, #0
    return T(-1);
 8018f68:	23ff      	movs	r3, #255	@ 0xff
  }
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f72:	4770      	bx	lr

08018f74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8018f7e:	f7ff ffe9 	bl	8018f54 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018f82:	4603      	mov	r3, r0
 8018f84:	ee07 3a90 	vmov	s15, r3
 8018f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8018f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f98:	db0f      	blt.n	8018fba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018f9a:	f7ff ffe3 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	ee07 3a90 	vmov	s15, r3
 8018fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018fa8:	ed97 7a01 	vldr	s14, [r7, #4]
 8018fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb4:	d801      	bhi.n	8018fba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018fb6:	2301      	movs	r3, #1
 8018fb8:	e000      	b.n	8018fbc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018fba:	2300      	movs	r3, #0
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	3708      	adds	r7, #8
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd80      	pop	{r7, pc}

08018fc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b082      	sub	sp, #8
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8018fce:	f7ff ffc1 	bl	8018f54 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	ee07 3a90 	vmov	s15, r3
 8018fd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018fdc:	ed97 6b00 	vldr	d6, [r7]
 8018fe0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe8:	db0f      	blt.n	801900a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018fea:	f7ff ffbb 	bl	8018f64 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	ee07 3a90 	vmov	s15, r3
 8018ff4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018ff8:	ed97 6b00 	vldr	d6, [r7]
 8018ffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019004:	d801      	bhi.n	801900a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8019006:	2301      	movs	r3, #1
 8019008:	e000      	b.n	801900c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 801900a:	2300      	movs	r3, #0
}
 801900c:	4618      	mov	r0, r3
 801900e:	3708      	adds	r7, #8
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	4618      	mov	r0, r3
 8019020:	370c      	adds	r7, #12
 8019022:	46bd      	mov	sp, r7
 8019024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019028:	4770      	bx	lr

0801902a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801902a:	b480      	push	{r7}
 801902c:	b083      	sub	sp, #12
 801902e:	af00      	add	r7, sp, #0
 8019030:	6078      	str	r0, [r7, #4]
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	4618      	mov	r0, r3
 8019036:	370c      	adds	r7, #12
 8019038:	46bd      	mov	sp, r7
 801903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903e:	4770      	bx	lr

08019040 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
 8019048:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801904a:	2200      	movs	r2, #0
 801904c:	6839      	ldr	r1, [r7, #0]
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f000 f8c6 	bl	80191e0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8019054:	4603      	mov	r3, r0
 8019056:	4618      	mov	r0, r3
 8019058:	3708      	adds	r7, #8
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}

0801905e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801905e:	b580      	push	{r7, lr}
 8019060:	b084      	sub	sp, #16
 8019062:	af00      	add	r7, sp, #0
 8019064:	60f8      	str	r0, [r7, #12]
 8019066:	60b9      	str	r1, [r7, #8]
 8019068:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801906a:	68b8      	ldr	r0, [r7, #8]
 801906c:	f000 f8e6 	bl	801923c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8019070:	4602      	mov	r2, r0
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	601a      	str	r2, [r3, #0]
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	605a      	str	r2, [r3, #4]
      { }
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	4618      	mov	r0, r3
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8019086:	b580      	push	{r7, lr}
 8019088:	b084      	sub	sp, #16
 801908a:	af00      	add	r7, sp, #0
 801908c:	60f8      	str	r0, [r7, #12]
 801908e:	60b9      	str	r1, [r7, #8]
 8019090:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8019092:	687a      	ldr	r2, [r7, #4]
 8019094:	68b9      	ldr	r1, [r7, #8]
 8019096:	68f8      	ldr	r0, [r7, #12]
 8019098:	f000 f8db 	bl	8019252 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801909c:	bf00      	nop
 801909e:	3710      	adds	r7, #16
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 80190a4:	b480      	push	{r7}
 80190a6:	b083      	sub	sp, #12
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
      return __ptr;
 80190ac:	687b      	ldr	r3, [r7, #4]
    }
 80190ae:	4618      	mov	r0, r3
 80190b0:	370c      	adds	r7, #12
 80190b2:	46bd      	mov	sp, r7
 80190b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 80190ba:	b580      	push	{r7, lr}
 80190bc:	b082      	sub	sp, #8
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
 80190c2:	7039      	strb	r1, [r7, #0]
 80190c4:	463b      	mov	r3, r7
 80190c6:	4619      	mov	r1, r3
 80190c8:	6878      	ldr	r0, [r7, #4]
 80190ca:	f7f5 fb63 	bl	800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	4618      	mov	r0, r3
 80190d2:	3708      	adds	r7, #8
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}

080190d8 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80190d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190dc:	b08c      	sub	sp, #48	@ 0x30
 80190de:	af06      	add	r7, sp, #24
 80190e0:	6178      	str	r0, [r7, #20]
 80190e2:	6139      	str	r1, [r7, #16]
 80190e4:	60fa      	str	r2, [r7, #12]
 80190e6:	60bb      	str	r3, [r7, #8]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80190e8:	68f8      	ldr	r0, [r7, #12]
 80190ea:	f7fc fd61 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80190ee:	4680      	mov	r8, r0
 80190f0:	68b8      	ldr	r0, [r7, #8]
 80190f2:	f7fc fd68 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80190f6:	4681      	mov	r9, r0
 80190f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80190fa:	f7ff f9f9 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80190fe:	4682      	mov	sl, r0
 8019100:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019102:	f7fc fd6b 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019106:	4604      	mov	r4, r0
 8019108:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801910a:	f7fc fd67 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801910e:	4605      	mov	r5, r0
 8019110:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019112:	f7f8 fa54 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019116:	4606      	mov	r6, r0
 8019118:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801911a:	f7fc fd5f 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801911e:	6078      	str	r0, [r7, #4]
 8019120:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019122:	f7fc fd66 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019126:	4603      	mov	r3, r0
 8019128:	9304      	str	r3, [sp, #16]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	9303      	str	r3, [sp, #12]
 801912e:	9602      	str	r6, [sp, #8]
 8019130:	9501      	str	r5, [sp, #4]
 8019132:	9400      	str	r4, [sp, #0]
 8019134:	4653      	mov	r3, sl
 8019136:	464a      	mov	r2, r9
 8019138:	4641      	mov	r1, r8
 801913a:	6938      	ldr	r0, [r7, #16]
 801913c:	f000 f89a 	bl	8019274 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 8019140:	bf00      	nop
 8019142:	3718      	adds	r7, #24
 8019144:	46bd      	mov	sp, r7
 8019146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801914a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 801914a:	b580      	push	{r7, lr}
 801914c:	b082      	sub	sp, #8
 801914e:	af00      	add	r7, sp, #0
 8019150:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f000 f8e7 	bl	8019326 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 8019158:	4603      	mov	r3, r0
 801915a:	4618      	mov	r0, r3
 801915c:	3708      	adds	r7, #8
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}

08019162 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>:
      _Tuple_impl()
 8019162:	b580      	push	{r7, lr}
 8019164:	b082      	sub	sp, #8
 8019166:	af00      	add	r7, sp, #0
 8019168:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801916a:	6878      	ldr	r0, [r7, #4]
 801916c:	f000 f8e6 	bl	801933c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	4618      	mov	r0, r3
 8019174:	3708      	adds	r7, #8
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}

0801917a <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>:
      constexpr _Head_base()
 801917a:	b480      	push	{r7}
 801917c:	b083      	sub	sp, #12
 801917e:	af00      	add	r7, sp, #0
 8019180:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2200      	movs	r2, #0
 8019186:	601a      	str	r2, [r3, #0]
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	4618      	mov	r0, r3
 801918c:	370c      	adds	r7, #12
 801918e:	46bd      	mov	sp, r7
 8019190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019194:	4770      	bx	lr

08019196 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8019196:	b480      	push	{r7}
 8019198:	b083      	sub	sp, #12
 801919a:	af00      	add	r7, sp, #0
 801919c:	6078      	str	r0, [r7, #4]
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	4618      	mov	r0, r3
 80191a2:	370c      	adds	r7, #12
 80191a4:	46bd      	mov	sp, r7
 80191a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191aa:	4770      	bx	lr

080191ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b082      	sub	sp, #8
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	6878      	ldr	r0, [r7, #4]
 80191b6:	f000 f8cc 	bl	8019352 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>
 80191ba:	4603      	mov	r3, r0
 80191bc:	4618      	mov	r0, r3
 80191be:	3708      	adds	r7, #8
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	4618      	mov	r0, r3
 80191d0:	f000 f8ca 	bl	8019368 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>
 80191d4:	4603      	mov	r3, r0
 80191d6:	4618      	mov	r0, r3
 80191d8:	3708      	adds	r7, #8
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}
	...

080191e0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b084      	sub	sp, #16
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	60f8      	str	r0, [r7, #12]
 80191e8:	60b9      	str	r1, [r7, #8]
 80191ea:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80191ec:	68f8      	ldr	r0, [r7, #12]
 80191ee:	f000 f8c7 	bl	8019380 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80191f2:	4602      	mov	r2, r0
 80191f4:	68bb      	ldr	r3, [r7, #8]
 80191f6:	4293      	cmp	r3, r2
 80191f8:	bf8c      	ite	hi
 80191fa:	2301      	movhi	r3, #1
 80191fc:	2300      	movls	r3, #0
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	2b00      	cmp	r3, #0
 8019202:	bf14      	ite	ne
 8019204:	2301      	movne	r3, #1
 8019206:	2300      	moveq	r3, #0
 8019208:	b2db      	uxtb	r3, r3
 801920a:	2b00      	cmp	r3, #0
 801920c:	d007      	beq.n	801921e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	4a09      	ldr	r2, [pc, #36]	@ (8019238 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8019212:	4293      	cmp	r3, r2
 8019214:	d901      	bls.n	801921a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8019216:	f00f fa49 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801921a:	f00f fa44 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	225c      	movs	r2, #92	@ 0x5c
 8019222:	fb02 f303 	mul.w	r3, r2, r3
 8019226:	4618      	mov	r0, r3
 8019228:	f00f fa2a 	bl	8028680 <_Znwj>
 801922c:	4603      	mov	r3, r0
 801922e:	bf00      	nop
      }
 8019230:	4618      	mov	r0, r3
 8019232:	3710      	adds	r7, #16
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	02c8590b 	.word	0x02c8590b

0801923c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801923c:	b480      	push	{r7}
 801923e:	b083      	sub	sp, #12
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	4618      	mov	r0, r3
 8019248:	370c      	adds	r7, #12
 801924a:	46bd      	mov	sp, r7
 801924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019250:	4770      	bx	lr

08019252 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8019252:	b580      	push	{r7, lr}
 8019254:	b084      	sub	sp, #16
 8019256:	af00      	add	r7, sp, #0
 8019258:	60f8      	str	r0, [r7, #12]
 801925a:	60b9      	str	r1, [r7, #8]
 801925c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	225c      	movs	r2, #92	@ 0x5c
 8019262:	fb02 f303 	mul.w	r3, r2, r3
 8019266:	4619      	mov	r1, r3
 8019268:	68b8      	ldr	r0, [r7, #8]
 801926a:	f00f f9f8 	bl	802865e <_ZdlPvj>
      }
 801926e:	3710      	adds	r7, #16
 8019270:	46bd      	mov	sp, r7
 8019272:	bd80      	pop	{r7, pc}

08019274 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8019274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019278:	ed2d 8b02 	vpush	{d8}
 801927c:	b08e      	sub	sp, #56	@ 0x38
 801927e:	af04      	add	r7, sp, #16
 8019280:	60f8      	str	r0, [r7, #12]
 8019282:	60b9      	str	r1, [r7, #8]
 8019284:	607a      	str	r2, [r7, #4]
 8019286:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	4619      	mov	r1, r3
 801928c:	2050      	movs	r0, #80	@ 0x50
 801928e:	f7f1 fbbf 	bl	800aa10 <_ZnwjPv>
 8019292:	4682      	mov	sl, r0
 8019294:	68b8      	ldr	r0, [r7, #8]
 8019296:	f7fc fc8b 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801929a:	4602      	mov	r2, r0
 801929c:	f107 0310 	add.w	r3, r7, #16
 80192a0:	4611      	mov	r1, r2
 80192a2:	4618      	mov	r0, r3
 80192a4:	f00f fac8 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80192a8:	6878      	ldr	r0, [r7, #4]
 80192aa:	f7fc fc8c 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80192ae:	4603      	mov	r3, r0
 80192b0:	ed93 8a00 	vldr	s16, [r3]
 80192b4:	6838      	ldr	r0, [r7, #0]
 80192b6:	f7ff f91b 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80192ba:	4603      	mov	r3, r0
 80192bc:	f893 8000 	ldrb.w	r8, [r3]
 80192c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80192c2:	f7fc fc8b 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80192c6:	4603      	mov	r3, r0
 80192c8:	f8b3 9000 	ldrh.w	r9, [r3]
 80192cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80192ce:	f7fc fc85 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80192d2:	4603      	mov	r3, r0
 80192d4:	881c      	ldrh	r4, [r3, #0]
 80192d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80192d8:	f7f8 f971 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80192dc:	4603      	mov	r3, r0
 80192de:	781d      	ldrb	r5, [r3, #0]
 80192e0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80192e2:	f7fc fc7b 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80192e6:	4603      	mov	r3, r0
 80192e8:	881e      	ldrh	r6, [r3, #0]
 80192ea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80192ec:	f7fc fc81 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80192f0:	4603      	mov	r3, r0
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f107 0110 	add.w	r1, r7, #16
 80192f8:	9303      	str	r3, [sp, #12]
 80192fa:	9602      	str	r6, [sp, #8]
 80192fc:	9501      	str	r5, [sp, #4]
 80192fe:	9400      	str	r4, [sp, #0]
 8019300:	464b      	mov	r3, r9
 8019302:	4642      	mov	r2, r8
 8019304:	eeb0 0a48 	vmov.f32	s0, s16
 8019308:	4650      	mov	r0, sl
 801930a:	f7fe fe15 	bl	8017f38 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>
 801930e:	f107 0310 	add.w	r3, r7, #16
 8019312:	4618      	mov	r0, r3
 8019314:	f00f faaf 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8019318:	bf00      	nop
 801931a:	3728      	adds	r7, #40	@ 0x28
 801931c:	46bd      	mov	sp, r7
 801931e:	ecbd 8b02 	vpop	{d8}
 8019322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019326 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 8019326:	b480      	push	{r7}
 8019328:	b083      	sub	sp, #12
 801932a:	af00      	add	r7, sp, #0
 801932c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801932e:	687b      	ldr	r3, [r7, #4]
      }
 8019330:	4618      	mov	r0, r3
 8019332:	370c      	adds	r7, #12
 8019334:	46bd      	mov	sp, r7
 8019336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801933a:	4770      	bx	lr

0801933c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801933c:	b480      	push	{r7}
 801933e:	b083      	sub	sp, #12
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	4618      	mov	r0, r3
 8019348:	370c      	adds	r7, #12
 801934a:	46bd      	mov	sp, r7
 801934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019350:	4770      	bx	lr

08019352 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8019352:	b480      	push	{r7}
 8019354:	b083      	sub	sp, #12
 8019356:	af00      	add	r7, sp, #0
 8019358:	6078      	str	r0, [r7, #4]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	4618      	mov	r0, r3
 801935e:	370c      	adds	r7, #12
 8019360:	46bd      	mov	sp, r7
 8019362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019366:	4770      	bx	lr

08019368 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8019368:	b480      	push	{r7}
 801936a:	b083      	sub	sp, #12
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	4618      	mov	r0, r3
 8019374:	370c      	adds	r7, #12
 8019376:	46bd      	mov	sp, r7
 8019378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937c:	4770      	bx	lr
	...

08019380 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8019380:	b480      	push	{r7}
 8019382:	b083      	sub	sp, #12
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8019388:	4b03      	ldr	r3, [pc, #12]	@ (8019398 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801938a:	4618      	mov	r0, r3
 801938c:	370c      	adds	r7, #12
 801938e:	46bd      	mov	sp, r7
 8019390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019394:	4770      	bx	lr
 8019396:	bf00      	nop
 8019398:	01642c85 	.word	0x01642c85

0801939c <_ZN7TMC2209D1Ev>:

public:

	TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2209() = default;
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
 80193a4:	4a0a      	ldr	r2, [pc, #40]	@ (80193d0 <_ZN7TMC2209D1Ev+0x34>)
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	601a      	str	r2, [r3, #0]
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	334c      	adds	r3, #76	@ 0x4c
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7ff f83b 	bl	801842a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	3328      	adds	r3, #40	@ 0x28
 80193b8:	4618      	mov	r0, r3
 80193ba:	f00f fa5c 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	4618      	mov	r0, r3
 80193c2:	f7fb ff71 	bl	80152a8 <_ZN3TMCD1Ev>
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	4618      	mov	r0, r3
 80193ca:	3708      	adds	r7, #8
 80193cc:	46bd      	mov	sp, r7
 80193ce:	bd80      	pop	{r7, pc}
 80193d0:	0802b65c 	.word	0x0802b65c

080193d4 <_ZN7TMC2209D0Ev>:
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7ff ffdd 	bl	801939c <_ZN7TMC2209D1Ev>
 80193e2:	2150      	movs	r1, #80	@ 0x50
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f00f f93a 	bl	802865e <_ZdlPvj>
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	4618      	mov	r0, r3
 80193ee:	3708      	adds	r7, #8
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}

080193f4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	4a05      	ldr	r2, [pc, #20]	@ (8019414 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	601a      	str	r2, [r3, #0]
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	4618      	mov	r0, r3
 8019406:	f7f3 f96d 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	4618      	mov	r0, r3
 801940e:	3708      	adds	r7, #8
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}
 8019414:	0802b640 	.word	0x0802b640

08019418 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	6878      	ldr	r0, [r7, #4]
 8019422:	f7ff ffe7 	bl	80193f4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8019426:	215c      	movs	r1, #92	@ 0x5c
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	f00f f918 	bl	802865e <_ZdlPvj>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	4618      	mov	r0, r3
 8019432:	3708      	adds	r7, #8
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}

08019438 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8019438:	b590      	push	{r4, r7, lr}
 801943a:	b083      	sub	sp, #12
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	330c      	adds	r3, #12
 8019444:	4618      	mov	r0, r3
 8019446:	f000 f856 	bl	80194f6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801944a:	4604      	mov	r4, r0
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7ff fc8e 	bl	8018d6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8019452:	4603      	mov	r3, r0
 8019454:	4619      	mov	r1, r3
 8019456:	4620      	mov	r0, r4
 8019458:	f000 f859 	bl	801950e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 801945c:	bf00      	nop
 801945e:	370c      	adds	r7, #12
 8019460:	46bd      	mov	sp, r7
 8019462:	bd90      	pop	{r4, r7, pc}

08019464 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8019464:	b580      	push	{r7, lr}
 8019466:	b086      	sub	sp, #24
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	330c      	adds	r3, #12
 8019470:	4618      	mov	r0, r3
 8019472:	f000 f840 	bl	80194f6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8019476:	4602      	mov	r2, r0
 8019478:	f107 0314 	add.w	r3, r7, #20
 801947c:	4611      	mov	r1, r2
 801947e:	4618      	mov	r0, r3
 8019480:	f7ff fbc7 	bl	8018c12 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8019484:	f107 0114 	add.w	r1, r7, #20
 8019488:	f107 030c 	add.w	r3, r7, #12
 801948c:	687a      	ldr	r2, [r7, #4]
 801948e:	4618      	mov	r0, r3
 8019490:	f7ff fde5 	bl	801905e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f7ff ffad 	bl	80193f4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801949a:	f107 030c 	add.w	r3, r7, #12
 801949e:	4618      	mov	r0, r3
 80194a0:	f7ff fbe3 	bl	8018c6a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80194a4:	f107 0314 	add.w	r3, r7, #20
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7ff fbbf 	bl	8018c2c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80194ae:	3718      	adds	r7, #24
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}

080194b4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b084      	sub	sp, #16
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
 80194bc:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f7ff fc55 	bl	8018d6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80194c4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80194c6:	f7f1 faef 	bl	800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80194ca:	4602      	mov	r2, r0
	    ||
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	4293      	cmp	r3, r2
 80194d0:	d005      	beq.n	80194de <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80194d2:	6838      	ldr	r0, [r7, #0]
 80194d4:	f00f f900 	bl	80286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 80194d8:	4603      	mov	r3, r0
	    ||
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d001      	beq.n	80194e2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 80194de:	2301      	movs	r3, #1
 80194e0:	e000      	b.n	80194e4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 80194e2:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d001      	beq.n	80194ec <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	e000      	b.n	80194ee <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 80194ec:	2300      	movs	r3, #0
      }
 80194ee:	4618      	mov	r0, r3
 80194f0:	3710      	adds	r7, #16
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}

080194f6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 80194f6:	b580      	push	{r7, lr}
 80194f8:	b082      	sub	sp, #8
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	6078      	str	r0, [r7, #4]
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f7f5 fbc3 	bl	800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8019504:	4603      	mov	r3, r0
 8019506:	4618      	mov	r0, r3
 8019508:	3708      	adds	r7, #8
 801950a:	46bd      	mov	sp, r7
 801950c:	bd80      	pop	{r7, pc}

0801950e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801950e:	b580      	push	{r7, lr}
 8019510:	b082      	sub	sp, #8
 8019512:	af00      	add	r7, sp, #0
 8019514:	6078      	str	r0, [r7, #4]
 8019516:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8019518:	6838      	ldr	r0, [r7, #0]
 801951a:	f000 f804 	bl	8019526 <_ZSt8_DestroyI7TMC2209EvPT_>
 801951e:	bf00      	nop
 8019520:	3708      	adds	r7, #8
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}

08019526 <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 8019526:	b580      	push	{r7, lr}
 8019528:	b082      	sub	sp, #8
 801952a:	af00      	add	r7, sp, #0
 801952c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	4798      	blx	r3
    }
 8019538:	bf00      	nop
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <_ZN14TMC5160Stepper11rms_currentEt>:
		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	460b      	mov	r3, r1
 801954a:	807b      	strh	r3, [r7, #2]
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	887a      	ldrh	r2, [r7, #2]
 8019550:	4611      	mov	r1, r2
 8019552:	4618      	mov	r0, r3
 8019554:	f7ea fac6 	bl	8003ae4 <_ZN14TMC2160Stepper11rms_currentEt>
 8019558:	bf00      	nop
 801955a:	3708      	adds	r7, #8
 801955c:	46bd      	mov	sp, r7
 801955e:	bd80      	pop	{r7, pc}

08019560 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	3304      	adds	r3, #4
 801956c:	4618      	mov	r0, r3
 801956e:	f7f2 fc86 	bl	800be7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	4618      	mov	r0, r3
 8019576:	3708      	adds	r7, #8
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}

0801957c <_ZNSt10shared_ptrI7TMC5160ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	4618      	mov	r0, r3
 8019588:	f7ff ffea 	bl	8019560 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	4618      	mov	r0, r3
 8019590:	3708      	adds	r7, #8
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
	...

08019598 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC5160::create(const JsonObject& config, Remora* instance) {
 8019598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801959a:	b0ef      	sub	sp, #444	@ 0x1bc
 801959c:	af08      	add	r7, sp, #32
 801959e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195a2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80195a6:	6018      	str	r0, [r3, #0]
 80195a8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195b0:	6019      	str	r1, [r3, #0]
 80195b2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80195ba:	601a      	str	r2, [r3, #0]
    printf("Creating TMC5160 module\n");
 80195bc:	48b1      	ldr	r0, [pc, #708]	@ (8019884 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2ec>)
 80195be:	f00f ff79 	bl	80294b4 <puts>

    const char* comment = config["Comment"];
 80195c2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195c6:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80195ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195d2:	4aad      	ldr	r2, [pc, #692]	@ (8019888 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f0>)
 80195d4:	6819      	ldr	r1, [r3, #0]
 80195d6:	f7f8 fee4 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80195da:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80195de:	4618      	mov	r0, r3
 80195e0:	f7ee fa5a 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80195e4:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    printf("Comment: %s\n", comment);
 80195e8:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 80195ec:	48a7      	ldr	r0, [pc, #668]	@ (801988c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f4>)
 80195ee:	f00f fef1 	bl	80293d4 <iprintf>

    std::string pinCS = config["CS pin"];
 80195f2:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80195f6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195fa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195fe:	4aa4      	ldr	r2, [pc, #656]	@ (8019890 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f8>)
 8019600:	6819      	ldr	r1, [r3, #0]
 8019602:	f7ee fa24 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019606:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801960a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801960e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8019612:	4611      	mov	r1, r2
 8019614:	4618      	mov	r0, r3
 8019616:	f7fc f927 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMOSI = config["MOSI pin"];
 801961a:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 801961e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019622:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019626:	4a9b      	ldr	r2, [pc, #620]	@ (8019894 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2fc>)
 8019628:	6819      	ldr	r1, [r3, #0]
 801962a:	f7f7 fec8 	bl	80113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801962e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019632:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8019636:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801963a:	4611      	mov	r1, r2
 801963c:	4618      	mov	r0, r3
 801963e:	f7fc f913 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMISO = config["MISO pin"];
 8019642:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8019646:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801964a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801964e:	4a92      	ldr	r2, [pc, #584]	@ (8019898 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x300>)
 8019650:	6819      	ldr	r1, [r3, #0]
 8019652:	f7f7 feb4 	bl	80113be <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019656:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801965a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801965e:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8019662:	4611      	mov	r1, r2
 8019664:	4618      	mov	r0, r3
 8019666:	f7fc f8ff 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinSCK = config["SCK pin"];
 801966a:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 801966e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019672:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019676:	4a89      	ldr	r2, [pc, #548]	@ (801989c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x304>)
 8019678:	6819      	ldr	r1, [r3, #0]
 801967a:	f7f8 fe92 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801967e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019682:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8019686:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 801968a:	4611      	mov	r1, r2
 801968c:	4618      	mov	r0, r3
 801968e:	f7fc f8eb 	bl	8015868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8019692:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8019696:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801969a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801969e:	4a80      	ldr	r2, [pc, #512]	@ (80198a0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x308>)
 80196a0:	6819      	ldr	r1, [r3, #0]
 80196a2:	f7ee f9d4 	bl	8007a4e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80196a6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7fc f8ea 	bl	8015884 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 80196b0:	eef0 7a40 	vmov.f32	s15, s0
 80196b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196b8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80196bc:	edc3 7a00 	vstr	s15, [r3]
    uint8_t address = config["Address"];
 80196c0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80196c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80196cc:	4a75      	ldr	r2, [pc, #468]	@ (80198a4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x30c>)
 80196ce:	6819      	ldr	r1, [r3, #0]
 80196d0:	f7f8 fe67 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80196d4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80196d8:	4618      	mov	r0, r3
 80196da:	f7fe fdd9 	bl	8018290 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 80196de:	4603      	mov	r3, r0
 80196e0:	461a      	mov	r2, r3
 80196e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196e6:	f2a3 1379 	subw	r3, r3, #377	@ 0x179
 80196ea:	701a      	strb	r2, [r3, #0]
    uint16_t current = config["Current"];
 80196ec:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 80196f0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80196f8:	4a6b      	ldr	r2, [pc, #428]	@ (80198a8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x310>)
 80196fa:	6819      	ldr	r1, [r3, #0]
 80196fc:	f7f8 fe51 	bl	80123a2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019700:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8019704:	4618      	mov	r0, r3
 8019706:	f7fc f8cb 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801970a:	4603      	mov	r3, r0
 801970c:	461a      	mov	r2, r3
 801970e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019712:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8019716:	801a      	strh	r2, [r3, #0]
    uint16_t microsteps = config["Microsteps"];
 8019718:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 801971c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019720:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019724:	4a61      	ldr	r2, [pc, #388]	@ (80198ac <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x314>)
 8019726:	6819      	ldr	r1, [r3, #0]
 8019728:	f7f5 fe67 	bl	800f3fa <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801972c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019730:	4618      	mov	r0, r3
 8019732:	f7fc f8b5 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8019736:	4603      	mov	r3, r0
 8019738:	461a      	mov	r2, r3
 801973a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801973e:	f5a3 73bf 	sub.w	r3, r3, #382	@ 0x17e
 8019742:	801a      	strh	r2, [r3, #0]
    uint16_t stall = config["Stall sensitivity"];
 8019744:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 8019748:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801974c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019750:	4a57      	ldr	r2, [pc, #348]	@ (80198b0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x318>)
 8019752:	6819      	ldr	r1, [r3, #0]
 8019754:	f7fe fda8 	bl	80182a8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019758:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801975c:	4618      	mov	r0, r3
 801975e:	f7fc f89f 	bl	80158a0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8019762:	4603      	mov	r3, r0
 8019764:	461a      	mov	r2, r3
 8019766:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801976a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801976e:	801a      	strh	r2, [r3, #0]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8019770:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8019774:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019778:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801977c:	4a4d      	ldr	r2, [pc, #308]	@ (80198b4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x31c>)
 801977e:	6819      	ldr	r1, [r3, #0]
 8019780:	f7fa fce4 	bl	801414c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019784:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8019788:	4618      	mov	r0, r3
 801978a:	f7ee f985 	bl	8007a98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 801978e:	4603      	mov	r3, r0
 8019790:	4949      	ldr	r1, [pc, #292]	@ (80198b8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x320>)
 8019792:	4618      	mov	r0, r3
 8019794:	f7e6 fda4 	bl	80002e0 <strcmp>
 8019798:	4603      	mov	r3, r0
 801979a:	2b00      	cmp	r3, #0
 801979c:	bf0c      	ite	eq
 801979e:	2301      	moveq	r3, #1
 80197a0:	2300      	movne	r3, #0
 80197a2:	b2da      	uxtb	r2, r3
 80197a4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80197a8:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80197ac:	701a      	strb	r2, [r3, #0]

    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 80197ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7f7 feb3 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197b8:	4604      	mov	r4, r0
 80197ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80197be:	4618      	mov	r0, r3
 80197c0:	f7f7 fead 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197c4:	4605      	mov	r5, r0
 80197c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80197ca:	4618      	mov	r0, r3
 80197cc:	f7f7 fea7 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197d0:	4606      	mov	r6, r0
 80197d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7f7 fea1 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197dc:	4602      	mov	r2, r0
 80197de:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 80197e2:	1d3b      	adds	r3, r7, #4
 80197e4:	9307      	str	r3, [sp, #28]
 80197e6:	f107 0318 	add.w	r3, r7, #24
 80197ea:	9306      	str	r3, [sp, #24]
 80197ec:	f107 0317 	add.w	r3, r7, #23
 80197f0:	9305      	str	r3, [sp, #20]
 80197f2:	f107 031a 	add.w	r3, r7, #26
 80197f6:	9304      	str	r3, [sp, #16]
 80197f8:	f107 031c 	add.w	r3, r7, #28
 80197fc:	9303      	str	r3, [sp, #12]
 80197fe:	f107 031f 	add.w	r3, r7, #31
 8019802:	9302      	str	r3, [sp, #8]
 8019804:	f107 0320 	add.w	r3, r7, #32
 8019808:	9301      	str	r3, [sp, #4]
 801980a:	9200      	str	r2, [sp, #0]
 801980c:	4633      	mov	r3, r6
 801980e:	462a      	mov	r2, r5
 8019810:	4621      	mov	r1, r4
 8019812:	f000 f999 	bl	8019b48 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8019816:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 801981a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801981e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019822:	4611      	mov	r1, r2
 8019824:	6818      	ldr	r0, [r3, #0]
 8019826:	f000 f9df 	bl	8019be8 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>
 801982a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 801982e:	4618      	mov	r0, r3
 8019830:	f7ff fea4 	bl	801957c <_ZNSt10shared_ptrI7TMC5160ED1Ev>
}
 8019834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019838:	4618      	mov	r0, r3
 801983a:	f00f f81c 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801983e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019842:	4618      	mov	r0, r3
 8019844:	f00f f817 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019848:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801984c:	4618      	mov	r0, r3
 801984e:	f00f f812 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019852:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8019856:	4618      	mov	r0, r3
 8019858:	f00f f80d 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 801985c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019860:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019864:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8019868:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 801986c:	6812      	ldr	r2, [r2, #0]
 801986e:	601a      	str	r2, [r3, #0]
}
 8019870:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019874:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019878:	6818      	ldr	r0, [r3, #0]
 801987a:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 801987e:	46bd      	mov	sp, r7
 8019880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019882:	bf00      	nop
 8019884:	0802aef8 	.word	0x0802aef8
 8019888:	0802af10 	.word	0x0802af10
 801988c:	0802af18 	.word	0x0802af18
 8019890:	0802af28 	.word	0x0802af28
 8019894:	0802af30 	.word	0x0802af30
 8019898:	0802af3c 	.word	0x0802af3c
 801989c:	0802af48 	.word	0x0802af48
 80198a0:	0802af50 	.word	0x0802af50
 80198a4:	0802af58 	.word	0x0802af58
 80198a8:	0802af60 	.word	0x0802af60
 80198ac:	0802af68 	.word	0x0802af68
 80198b0:	0802af74 	.word	0x0802af74
 80198b4:	0802af88 	.word	0x0802af88
 80198b8:	0802af98 	.word	0x0802af98

080198bc <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>:

TMC5160::TMC5160(std::string _pinCS, std::string _pinMOSI, std::string _pinMISO, std::string _pinSCK, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 80198bc:	b5b0      	push	{r4, r5, r7, lr}
 80198be:	b088      	sub	sp, #32
 80198c0:	af02      	add	r7, sp, #8
 80198c2:	6178      	str	r0, [r7, #20]
 80198c4:	6139      	str	r1, [r7, #16]
 80198c6:	60fa      	str	r2, [r7, #12]
 80198c8:	60bb      	str	r3, [r7, #8]
 80198ca:	ed87 0a01 	vstr	s0, [r7, #4]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 80198ce:	697b      	ldr	r3, [r7, #20]
 80198d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80198d4:	eeb0 0a67 	vmov.f32	s0, s15
 80198d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80198da:	4618      	mov	r0, r3
 80198dc:	f7fb fbe0 	bl	80150a0 <_ZN3TMCC1EP6Remoraf>
 80198e0:	4a2f      	ldr	r2, [pc, #188]	@ (80199a0 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora+0xe4>)
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	601a      	str	r2, [r3, #0]
      pinCS(std::move(_pinCS)),
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80198ec:	6938      	ldr	r0, [r7, #16]
 80198ee:	f7f7 fe16 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80198f2:	4603      	mov	r3, r0
 80198f4:	4619      	mov	r1, r3
 80198f6:	4620      	mov	r0, r4
 80198f8:	f00e ff9e 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMOSI(std::move(_pinMOSI)),
 80198fc:	697b      	ldr	r3, [r7, #20]
 80198fe:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8019902:	68f8      	ldr	r0, [r7, #12]
 8019904:	f7f7 fe0b 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019908:	4603      	mov	r3, r0
 801990a:	4619      	mov	r1, r3
 801990c:	4620      	mov	r0, r4
 801990e:	f00e ff93 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMISO(std::move(_pinMISO)),
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8019918:	68b8      	ldr	r0, [r7, #8]
 801991a:	f7f7 fe00 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801991e:	4603      	mov	r3, r0
 8019920:	4619      	mov	r1, r3
 8019922:	4620      	mov	r0, r4
 8019924:	f00e ff88 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinSCK(std::move(_pinSCK)),
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 801992e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019930:	f7f7 fdf5 	bl	801151e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019934:	4603      	mov	r3, r0
 8019936:	4619      	mov	r1, r3
 8019938:	4620      	mov	r0, r4
 801993a:	f00e ff7d 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019944:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      mA(_mA),
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801994c:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      microsteps(_microsteps),
 8019950:	697b      	ldr	r3, [r7, #20]
 8019952:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019954:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      stealth(_stealth),
 8019958:	697b      	ldr	r3, [r7, #20]
 801995a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801995e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
      stall(_stall),
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8019966:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	3358      	adds	r3, #88	@ 0x58
 801997a:	697a      	ldr	r2, [r7, #20]
 801997c:	3270      	adds	r2, #112	@ 0x70
 801997e:	6979      	ldr	r1, [r7, #20]
 8019980:	f101 0094 	add.w	r0, r1, #148	@ 0x94
 8019984:	1d39      	adds	r1, r7, #4
 8019986:	9201      	str	r2, [sp, #4]
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	462b      	mov	r3, r5
 801998c:	460a      	mov	r2, r1
 801998e:	4621      	mov	r1, r4
 8019990:	f000 f93d 	bl	8019c0e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	4618      	mov	r0, r3
 8019998:	3718      	adds	r7, #24
 801999a:	46bd      	mov	sp, r7
 801999c:	bdb0      	pop	{r4, r5, r7, pc}
 801999e:	bf00      	nop
 80199a0:	0802b6d8 	.word	0x0802b6d8

080199a4 <_ZN7TMC51609configureEv>:


void TMC5160::configure()
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b084      	sub	sp, #16
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
    driver->begin();
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	3394      	adds	r3, #148	@ 0x94
 80199b0:	4618      	mov	r0, r3
 80199b2:	f000 f98a 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80199b6:	4603      	mov	r3, r0
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7ea fdcf 	bl	800455c <_ZN14TMC5130Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 80199be:	4855      	ldr	r0, [pc, #340]	@ (8019b14 <_ZN7TMC51609configureEv+0x170>)
 80199c0:	f00f fd08 	bl	80293d4 <iprintf>
    uint16_t result = driver->test_connection();
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	3394      	adds	r3, #148	@ 0x94
 80199c8:	4618      	mov	r0, r3
 80199ca:	f000 f97e 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80199ce:	4603      	mov	r3, r0
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7ea ff65 	bl	80048a0 <_ZN10TMCStepper15test_connectionEv>
 80199d6:	4603      	mov	r3, r0
 80199d8:	81fb      	strh	r3, [r7, #14]
    
    if (result) {
 80199da:	89fb      	ldrh	r3, [r7, #14]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d018      	beq.n	8019a12 <_ZN7TMC51609configureEv+0x6e>
        printf("Failed!\nLikely cause: ");
 80199e0:	484d      	ldr	r0, [pc, #308]	@ (8019b18 <_ZN7TMC51609configureEv+0x174>)
 80199e2:	f00f fcf7 	bl	80293d4 <iprintf>
        switch(result) {
 80199e6:	89fb      	ldrh	r3, [r7, #14]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d002      	beq.n	80199f2 <_ZN7TMC51609configureEv+0x4e>
 80199ec:	2b02      	cmp	r3, #2
 80199ee:	d004      	beq.n	80199fa <_ZN7TMC51609configureEv+0x56>
 80199f0:	e007      	b.n	8019a02 <_ZN7TMC51609configureEv+0x5e>
            case 1: printf("Loose connection\n"); break;
 80199f2:	484a      	ldr	r0, [pc, #296]	@ (8019b1c <_ZN7TMC51609configureEv+0x178>)
 80199f4:	f00f fd5e 	bl	80294b4 <puts>
 80199f8:	e007      	b.n	8019a0a <_ZN7TMC51609configureEv+0x66>
            case 2: printf("No power\n"); break;
 80199fa:	4849      	ldr	r0, [pc, #292]	@ (8019b20 <_ZN7TMC51609configureEv+0x17c>)
 80199fc:	f00f fd5a 	bl	80294b4 <puts>
 8019a00:	e003      	b.n	8019a0a <_ZN7TMC51609configureEv+0x66>
            default: printf("Unknown issue\n"); break;
 8019a02:	4848      	ldr	r0, [pc, #288]	@ (8019b24 <_ZN7TMC51609configureEv+0x180>)
 8019a04:	f00f fd56 	bl	80294b4 <puts>
 8019a08:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8019a0a:	4847      	ldr	r0, [pc, #284]	@ (8019b28 <_ZN7TMC51609configureEv+0x184>)
 8019a0c:	f00f fd52 	bl	80294b4 <puts>
 8019a10:	e002      	b.n	8019a18 <_ZN7TMC51609configureEv+0x74>
    } else {
        printf("OK\n");
 8019a12:	4846      	ldr	r0, [pc, #280]	@ (8019b2c <_ZN7TMC51609configureEv+0x188>)
 8019a14:	f00f fd4e 	bl	80294b4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	3394      	adds	r3, #148	@ 0x94
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f000 f954 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a22:	4603      	mov	r3, r0
 8019a24:	2104      	movs	r1, #4
 8019a26:	4618      	mov	r0, r3
 8019a28:	f7e9 f827 	bl	8002a7a <_ZN14TMC2130Stepper4toffEh>
    driver->blank_time(24);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	3394      	adds	r3, #148	@ 0x94
 8019a30:	4618      	mov	r0, r3
 8019a32:	f000 f94a 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a36:	4603      	mov	r3, r0
 8019a38:	2118      	movs	r1, #24
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7ea fffc 	bl	8004a38 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	3394      	adds	r3, #148	@ 0x94
 8019a44:	4618      	mov	r0, r3
 8019a46:	f000 f940 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a4a:	4602      	mov	r2, r0
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8019a52:	4619      	mov	r1, r3
 8019a54:	4610      	mov	r0, r2
 8019a56:	f7ff fd73 	bl	8019540 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->microsteps(microsteps);
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	3394      	adds	r3, #148	@ 0x94
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f000 f933 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a64:	4603      	mov	r3, r0
 8019a66:	461a      	mov	r2, r3
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8019a6e:	4619      	mov	r1, r3
 8019a70:	4610      	mov	r0, r2
 8019a72:	f7ea ff31 	bl	80048d8 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	3394      	adds	r3, #148	@ 0x94
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f000 f925 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a80:	4603      	mov	r3, r0
 8019a82:	492b      	ldr	r1, [pc, #172]	@ (8019b30 <_ZN7TMC51609configureEv+0x18c>)
 8019a84:	4618      	mov	r0, r3
 8019a86:	f7e9 ff14 	bl	80038b2 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	3394      	adds	r3, #148	@ 0x94
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f000 f91b 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a94:	4603      	mov	r3, r0
 8019a96:	2105      	movs	r1, #5
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7e9 faae 	bl	8002ffa <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	3394      	adds	r3, #148	@ 0x94
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f000 f911 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	2102      	movs	r1, #2
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7e9 fac9 	bl	8003044 <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	3394      	adds	r3, #148	@ 0x94
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f000 f907 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019abc:	4603      	mov	r3, r0
 8019abe:	2101      	movs	r1, #1
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7e9 fae4 	bl	800308e <_ZN14TMC2130Stepper4sednEh>
    //driver->en_spreadCycle(!stealth);
    driver->pwm_autoscale(true);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	3394      	adds	r3, #148	@ 0x94
 8019aca:	4618      	mov	r0, r3
 8019acc:	f000 f8fd 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	2101      	movs	r1, #1
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7e9 fc91 	bl	80033fc <_ZN14TMC2160Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8019ae0:	2b00      	cmp	r3, #0
        // StallGuard sensitivity threshold (higher = more sensitive)
        //driver->SGTHRS(stall);
    }

    driver->iholddelay(10);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	3394      	adds	r3, #148	@ 0x94
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f000 f8ef 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019aec:	4603      	mov	r3, r0
 8019aee:	210a      	movs	r1, #10
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7e9 fc52 	bl	800339a <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	3394      	adds	r3, #148	@ 0x94
 8019afa:	4618      	mov	r0, r3
 8019afc:	f000 f8e5 	bl	8019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019b00:	4603      	mov	r3, r0
 8019b02:	2180      	movs	r1, #128	@ 0x80
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7ea ffcf 	bl	8004aa8 <_ZN10TMCStepper10TPOWERDOWNEh>
}
 8019b0a:	bf00      	nop
 8019b0c:	3710      	adds	r7, #16
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
 8019b12:	bf00      	nop
 8019b14:	0802af9c 	.word	0x0802af9c
 8019b18:	0802afc4 	.word	0x0802afc4
 8019b1c:	0802afdc 	.word	0x0802afdc
 8019b20:	0802aff0 	.word	0x0802aff0
 8019b24:	0802affc 	.word	0x0802affc
 8019b28:	0802b00c 	.word	0x0802b00c
 8019b2c:	0802b034 	.word	0x0802b034
 8019b30:	000fffff 	.word	0x000fffff

08019b34 <_ZN7TMC51606updateEv>:

void TMC5160::update(){}
 8019b34:	b480      	push	{r7}
 8019b36:	b083      	sub	sp, #12
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
 8019b3c:	bf00      	nop
 8019b3e:	370c      	adds	r7, #12
 8019b40:	46bd      	mov	sp, r7
 8019b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b46:	4770      	bx	lr

08019b48 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8019b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b4c:	b096      	sub	sp, #88	@ 0x58
 8019b4e:	af0a      	add	r7, sp, #40	@ 0x28
 8019b50:	6278      	str	r0, [r7, #36]	@ 0x24
 8019b52:	6239      	str	r1, [r7, #32]
 8019b54:	61fa      	str	r2, [r7, #28]
 8019b56:	61bb      	str	r3, [r7, #24]
			     std::forward<_Args>(__args)...);
 8019b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019b5c:	469a      	mov	sl, r3
 8019b5e:	6a38      	ldr	r0, [r7, #32]
 8019b60:	f7fc f826 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b64:	4680      	mov	r8, r0
 8019b66:	69f8      	ldr	r0, [r7, #28]
 8019b68:	f7fc f822 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b6c:	4681      	mov	r9, r0
 8019b6e:	69b8      	ldr	r0, [r7, #24]
 8019b70:	f7fc f81e 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b74:	4604      	mov	r4, r0
 8019b76:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019b78:	f7fc f81a 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b7c:	4605      	mov	r5, r0
 8019b7e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019b80:	f7fc f821 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b84:	4606      	mov	r6, r0
 8019b86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019b88:	f7fe fcb2 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b8c:	6178      	str	r0, [r7, #20]
 8019b8e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019b90:	f7fc f824 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b94:	6138      	str	r0, [r7, #16]
 8019b96:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019b98:	f7fc f820 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b9c:	60f8      	str	r0, [r7, #12]
 8019b9e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019ba0:	f7f7 fd0d 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ba4:	60b8      	str	r0, [r7, #8]
 8019ba6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019ba8:	f7fc f818 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bac:	6078      	str	r0, [r7, #4]
 8019bae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019bb0:	f7fc f81f 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	9308      	str	r3, [sp, #32]
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	9307      	str	r3, [sp, #28]
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	9306      	str	r3, [sp, #24]
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	9305      	str	r3, [sp, #20]
 8019bc4:	693b      	ldr	r3, [r7, #16]
 8019bc6:	9304      	str	r3, [sp, #16]
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	9303      	str	r3, [sp, #12]
 8019bcc:	9602      	str	r6, [sp, #8]
 8019bce:	9501      	str	r5, [sp, #4]
 8019bd0:	9400      	str	r4, [sp, #0]
 8019bd2:	464b      	mov	r3, r9
 8019bd4:	4642      	mov	r2, r8
 8019bd6:	4651      	mov	r1, sl
 8019bd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019bda:	f000 f882 	bl	8019ce2 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8019bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019be0:	3730      	adds	r7, #48	@ 0x30
 8019be2:	46bd      	mov	sp, r7
 8019be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019be8 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8019be8:	b590      	push	{r4, r7, lr}
 8019bea:	b083      	sub	sp, #12
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8019bf2:	687c      	ldr	r4, [r7, #4]
 8019bf4:	6838      	ldr	r0, [r7, #0]
 8019bf6:	f000 f8c4 	bl	8019d82 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	4619      	mov	r1, r3
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f000 f8ca 	bl	8019d98 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	4618      	mov	r0, r3
 8019c08:	370c      	adds	r7, #12
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd90      	pop	{r4, r7, pc}

08019c0e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8019c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c12:	ed2d 8b02 	vpush	{d8}
 8019c16:	b086      	sub	sp, #24
 8019c18:	af02      	add	r7, sp, #8
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
 8019c20:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8019c22:	2078      	movs	r0, #120	@ 0x78
 8019c24:	f00e fd2c 	bl	8028680 <_Znwj>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	461c      	mov	r4, r3
 8019c2c:	68b8      	ldr	r0, [r7, #8]
 8019c2e:	f7f5 fde5 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c32:	4605      	mov	r5, r0
 8019c34:	6878      	ldr	r0, [r7, #4]
 8019c36:	f7fb ffc6 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	ed93 8a00 	vldr	s16, [r3]
 8019c40:	6838      	ldr	r0, [r7, #0]
 8019c42:	f7f5 fddb 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c46:	4606      	mov	r6, r0
 8019c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c4a:	f7f5 fdd7 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c4e:	4680      	mov	r8, r0
 8019c50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019c52:	f7f5 fdd3 	bl	800f7fc <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c56:	4603      	mov	r3, r0
 8019c58:	f04f 32ff 	mov.w	r2, #4294967295
 8019c5c:	9201      	str	r2, [sp, #4]
 8019c5e:	9300      	str	r3, [sp, #0]
 8019c60:	4643      	mov	r3, r8
 8019c62:	4632      	mov	r2, r6
 8019c64:	eeb0 0a48 	vmov.f32	s0, s16
 8019c68:	4629      	mov	r1, r5
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	f7ea fcca 	bl	8004604 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8019c70:	4621      	mov	r1, r4
 8019c72:	68f8      	ldr	r0, [r7, #12]
 8019c74:	f000 f8be 	bl	8019df4 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8019c78:	68f8      	ldr	r0, [r7, #12]
 8019c7a:	3710      	adds	r7, #16
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	ecbd 8b02 	vpop	{d8}
 8019c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019c86 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8019c86:	b590      	push	{r4, r7, lr}
 8019c88:	b085      	sub	sp, #20
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f000 f8be 	bl	8019e12 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019c96:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d00c      	beq.n	8019cba <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f000 f8c3 	bl	8019e2c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>
 8019ca6:	4604      	mov	r4, r0
 8019ca8:	68f8      	ldr	r0, [r7, #12]
 8019caa:	f000 f8cc 	bl	8019e46 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	4619      	mov	r1, r3
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	f000 f8d1 	bl	8019e5c <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>
	__ptr = pointer();
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	2200      	movs	r2, #0
 8019cbe:	601a      	str	r2, [r3, #0]
      }
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	3714      	adds	r7, #20
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd90      	pop	{r4, r7, pc}

08019cca <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8019cca:	b580      	push	{r7, lr}
 8019ccc:	b082      	sub	sp, #8
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	6078      	str	r0, [r7, #4]
	return get();
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f000 f8d2 	bl	8019e7c <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>
 8019cd8:	4603      	mov	r3, r0
      }
 8019cda:	4618      	mov	r0, r3
 8019cdc:	3708      	adds	r7, #8
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bd80      	pop	{r7, pc}

08019ce2 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ce6:	b095      	sub	sp, #84	@ 0x54
 8019ce8:	af0a      	add	r7, sp, #40	@ 0x28
 8019cea:	6278      	str	r0, [r7, #36]	@ 0x24
 8019cec:	6239      	str	r1, [r7, #32]
 8019cee:	61fa      	str	r2, [r7, #28]
 8019cf0:	61bb      	str	r3, [r7, #24]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8019cf2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8019cf4:	69f8      	ldr	r0, [r7, #28]
 8019cf6:	f7fb ff5b 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019cfa:	4680      	mov	r8, r0
 8019cfc:	69b8      	ldr	r0, [r7, #24]
 8019cfe:	f7fb ff57 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d02:	4681      	mov	r9, r0
 8019d04:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019d06:	f7fb ff53 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d0a:	4605      	mov	r5, r0
 8019d0c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019d0e:	f7fb ff4f 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d12:	4606      	mov	r6, r0
 8019d14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019d16:	f7fb ff56 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d1a:	6178      	str	r0, [r7, #20]
 8019d1c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019d1e:	f7fe fbe7 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d22:	6138      	str	r0, [r7, #16]
 8019d24:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019d26:	f7fb ff59 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d2a:	60f8      	str	r0, [r7, #12]
 8019d2c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019d2e:	f7fb ff55 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d32:	60b8      	str	r0, [r7, #8]
 8019d34:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019d36:	f7f7 fc42 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019d3e:	f7fb ff4d 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d42:	6038      	str	r0, [r7, #0]
 8019d44:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019d46:	f7fb ff54 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	9308      	str	r3, [sp, #32]
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	9307      	str	r3, [sp, #28]
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	9306      	str	r3, [sp, #24]
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	9305      	str	r3, [sp, #20]
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	9304      	str	r3, [sp, #16]
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	9303      	str	r3, [sp, #12]
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	9302      	str	r3, [sp, #8]
 8019d66:	9601      	str	r6, [sp, #4]
 8019d68:	9500      	str	r5, [sp, #0]
 8019d6a:	464b      	mov	r3, r9
 8019d6c:	4642      	mov	r2, r8
 8019d6e:	6a39      	ldr	r1, [r7, #32]
 8019d70:	4620      	mov	r0, r4
 8019d72:	f000 f890 	bl	8019e96 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8019d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d78:	4618      	mov	r0, r3
 8019d7a:	372c      	adds	r7, #44	@ 0x2c
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019d82 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8019d82:	b480      	push	{r7}
 8019d84:	b083      	sub	sp, #12
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	370c      	adds	r7, #12
 8019d90:	46bd      	mov	sp, r7
 8019d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d96:	4770      	bx	lr

08019d98 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	681a      	ldr	r2, [r3, #0]
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	601a      	str	r2, [r3, #0]
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	3304      	adds	r3, #4
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7f3 fa62 	bl	800d278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	1d1a      	adds	r2, r3, #4
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	3304      	adds	r3, #4
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	4610      	mov	r0, r2
 8019dc0:	f7f3 fe19 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	601a      	str	r2, [r3, #0]
	}
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	4618      	mov	r0, r3
 8019dce:	3708      	adds	r7, #8
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}

08019dd4 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b082      	sub	sp, #8
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	6039      	str	r1, [r7, #0]
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	683a      	ldr	r2, [r7, #0]
 8019de2:	4611      	mov	r1, r2
 8019de4:	4618      	mov	r0, r3
 8019de6:	f000 f8b4 	bl	8019f52 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	4618      	mov	r0, r3
 8019dee:	3708      	adds	r7, #8
 8019df0:	46bd      	mov	sp, r7
 8019df2:	bd80      	pop	{r7, pc}

08019df4 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
 8019dfc:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6839      	ldr	r1, [r7, #0]
 8019e02:	4618      	mov	r0, r3
 8019e04:	f7ff ffe6 	bl	8019dd4 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	3708      	adds	r7, #8
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}

08019e12 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8019e12:	b580      	push	{r7, lr}
 8019e14:	b082      	sub	sp, #8
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	6078      	str	r0, [r7, #4]
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f000 f8ac 	bl	8019f7a <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019e22:	4603      	mov	r3, r0
 8019e24:	4618      	mov	r0, r3
 8019e26:	3708      	adds	r7, #8
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}

08019e2c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	4618      	mov	r0, r3
 8019e38:	f000 f8ac 	bl	8019f94 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	4618      	mov	r0, r3
 8019e40:	3708      	adds	r7, #8
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}

08019e46 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8019e46:	b480      	push	{r7}
 8019e48:	b083      	sub	sp, #12
 8019e4a:	af00      	add	r7, sp, #0
 8019e4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	4618      	mov	r0, r3
 8019e52:	370c      	adds	r7, #12
 8019e54:	46bd      	mov	sp, r7
 8019e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5a:	4770      	bx	lr

08019e5c <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b082      	sub	sp, #8
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
 8019e64:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d003      	beq.n	8019e74 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_+0x18>
 8019e6c:	2178      	movs	r1, #120	@ 0x78
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f00e fbf5 	bl	802865e <_ZdlPvj>
      }
 8019e74:	bf00      	nop
 8019e76:	3708      	adds	r7, #8
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}

08019e7c <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b082      	sub	sp, #8
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	4618      	mov	r0, r3
 8019e88:	f000 f891 	bl	8019fae <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	4618      	mov	r0, r3
 8019e90:	3708      	adds	r7, #8
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}

08019e96 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e9a:	b096      	sub	sp, #88	@ 0x58
 8019e9c:	af0a      	add	r7, sp, #40	@ 0x28
 8019e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8019ea0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8019ea2:	627a      	str	r2, [r7, #36]	@ 0x24
 8019ea4:	623b      	str	r3, [r7, #32]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8019ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	601a      	str	r2, [r3, #0]
 8019eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019eae:	1d1d      	adds	r5, r3, #4
 8019eb0:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8019eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019eb4:	f7fb fe7c 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019eb8:	4680      	mov	r8, r0
 8019eba:	6a38      	ldr	r0, [r7, #32]
 8019ebc:	f7fb fe78 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ec0:	61f8      	str	r0, [r7, #28]
 8019ec2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019ec4:	f7fb fe74 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ec8:	61b8      	str	r0, [r7, #24]
 8019eca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019ecc:	f7fb fe70 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ed0:	6178      	str	r0, [r7, #20]
 8019ed2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019ed4:	f7fb fe77 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ed8:	6138      	str	r0, [r7, #16]
 8019eda:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019edc:	f7fe fb08 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ee0:	60f8      	str	r0, [r7, #12]
 8019ee2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019ee4:	f7fb fe7a 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ee8:	60b8      	str	r0, [r7, #8]
 8019eea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019eec:	f7fb fe76 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ef0:	6078      	str	r0, [r7, #4]
 8019ef2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019ef4:	f7f7 fb63 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ef8:	6038      	str	r0, [r7, #0]
 8019efa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019efc:	f7fb fe6e 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f00:	4604      	mov	r4, r0
 8019f02:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019f04:	f7fb fe75 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f0c:	9408      	str	r4, [sp, #32]
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	9307      	str	r3, [sp, #28]
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	9306      	str	r3, [sp, #24]
 8019f16:	68bb      	ldr	r3, [r7, #8]
 8019f18:	9305      	str	r3, [sp, #20]
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	9304      	str	r3, [sp, #16]
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	9303      	str	r3, [sp, #12]
 8019f22:	697b      	ldr	r3, [r7, #20]
 8019f24:	9302      	str	r3, [sp, #8]
 8019f26:	69bb      	ldr	r3, [r7, #24]
 8019f28:	9301      	str	r3, [sp, #4]
 8019f2a:	69fb      	ldr	r3, [r7, #28]
 8019f2c:	9300      	str	r3, [sp, #0]
 8019f2e:	4643      	mov	r3, r8
 8019f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019f32:	4631      	mov	r1, r6
 8019f34:	4628      	mov	r0, r5
 8019f36:	f000 f848 	bl	8019fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8019f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	4619      	mov	r1, r3
 8019f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019f42:	f000 f8c8 	bl	801a0d6 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8019f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3730      	adds	r7, #48	@ 0x30
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f52 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8019f52:	b590      	push	{r4, r7, lr}
 8019f54:	b083      	sub	sp, #12
 8019f56:	af00      	add	r7, sp, #0
 8019f58:	6078      	str	r0, [r7, #4]
 8019f5a:	6039      	str	r1, [r7, #0]
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f000 f8da 	bl	801a118 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8019f64:	683c      	ldr	r4, [r7, #0]
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7ff ff53 	bl	8019e12 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	601c      	str	r4, [r3, #0]
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	4618      	mov	r0, r3
 8019f74:	370c      	adds	r7, #12
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bd90      	pop	{r4, r7, pc}

08019f7a <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8019f7a:	b580      	push	{r7, lr}
 8019f7c:	b082      	sub	sp, #8
 8019f7e:	af00      	add	r7, sp, #0
 8019f80:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	4618      	mov	r0, r3
 8019f86:	f000 f8d4 	bl	801a132 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3708      	adds	r7, #8
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b082      	sub	sp, #8
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f000 f8d3 	bl	801a14a <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019fa4:	4603      	mov	r3, r0
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	3708      	adds	r7, #8
 8019faa:	46bd      	mov	sp, r7
 8019fac:	bd80      	pop	{r7, pc}

08019fae <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8019fae:	b580      	push	{r7, lr}
 8019fb0:	b082      	sub	sp, #8
 8019fb2:	af00      	add	r7, sp, #0
 8019fb4:	6078      	str	r0, [r7, #4]
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f000 f8d2 	bl	801a162 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	3708      	adds	r7, #8
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}

08019fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8019fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fce:	b09a      	sub	sp, #104	@ 0x68
 8019fd0:	af0a      	add	r7, sp, #40	@ 0x28
 8019fd2:	6278      	str	r0, [r7, #36]	@ 0x24
 8019fd4:	6239      	str	r1, [r7, #32]
 8019fd6:	61fa      	str	r2, [r7, #28]
 8019fd8:	61bb      	str	r3, [r7, #24]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8019fda:	69fa      	ldr	r2, [r7, #28]
 8019fdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019fe0:	4611      	mov	r1, r2
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f000 f8ca 	bl	801a17c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8019fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019fec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019ff0:	4611      	mov	r1, r2
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f000 f8db 	bl	801a1ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8019ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	f000 f8fe 	bl	801a1fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801a002:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  auto __pi = ::new (__mem)
 801a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a006:	4619      	mov	r1, r3
 801a008:	20a4      	movs	r0, #164	@ 0xa4
 801a00a:	f7f0 fd01 	bl	800aa10 <_ZnwjPv>
 801a00e:	4605      	mov	r5, r0
 801a010:	69b8      	ldr	r0, [r7, #24]
 801a012:	f7fb fdcd 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a016:	4680      	mov	r8, r0
 801a018:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a01a:	f7fb fdc9 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a01e:	4681      	mov	r9, r0
 801a020:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a022:	f7fb fdc5 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a026:	4606      	mov	r6, r0
 801a028:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a02a:	f7fb fdc1 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a02e:	6178      	str	r0, [r7, #20]
 801a030:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801a032:	f7fb fdc8 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a036:	6138      	str	r0, [r7, #16]
 801a038:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 801a03a:	f7fe fa59 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a03e:	60f8      	str	r0, [r7, #12]
 801a040:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801a042:	f7fb fdcb 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a046:	60b8      	str	r0, [r7, #8]
 801a048:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801a04a:	f7fb fdc7 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801a052:	f7f7 fab4 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a056:	6038      	str	r0, [r7, #0]
 801a058:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801a05c:	f7fb fdbe 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a060:	4604      	mov	r4, r0
 801a062:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801a066:	f7fb fdc4 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a06a:	4603      	mov	r3, r0
 801a06c:	9308      	str	r3, [sp, #32]
 801a06e:	9407      	str	r4, [sp, #28]
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	9306      	str	r3, [sp, #24]
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	9305      	str	r3, [sp, #20]
 801a078:	68bb      	ldr	r3, [r7, #8]
 801a07a:	9304      	str	r3, [sp, #16]
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	9303      	str	r3, [sp, #12]
 801a080:	693b      	ldr	r3, [r7, #16]
 801a082:	9302      	str	r3, [sp, #8]
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	9301      	str	r3, [sp, #4]
 801a088:	9600      	str	r6, [sp, #0]
 801a08a:	464b      	mov	r3, r9
 801a08c:	4642      	mov	r2, r8
 801a08e:	4651      	mov	r1, sl
 801a090:	4628      	mov	r0, r5
 801a092:	f000 f8c3 	bl	801a21c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 801a096:	63bd      	str	r5, [r7, #56]	@ 0x38
	  __guard = nullptr;
 801a098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a09c:	2100      	movs	r1, #0
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f000 f920 	bl	801a2e4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 801a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a0a8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801a0aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a0ac:	f000 f929 	bl	801a302 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	6a3b      	ldr	r3, [r7, #32]
 801a0b4:	601a      	str	r2, [r3, #0]
	}
 801a0b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	f000 f88a 	bl	801a1d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a0c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f000 f866 	bl	801a196 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3740      	adds	r7, #64	@ 0x40
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a0d6 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 801a0d6:	b580      	push	{r7, lr}
 801a0d8:	b084      	sub	sp, #16
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	6078      	str	r0, [r7, #4]
 801a0de:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	1d1a      	adds	r2, r3, #4
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d002      	beq.n	801a0f0 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	3318      	adds	r3, #24
 801a0ee:	e000      	b.n	801a0f2 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	4619      	mov	r1, r3
 801a0f4:	4610      	mov	r0, r2
 801a0f6:	f7fc fc72 	bl	80169de <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 801a0fa:	60f8      	str	r0, [r7, #12]
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d006      	beq.n	801a110 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	3304      	adds	r3, #4
 801a106:	461a      	mov	r2, r3
 801a108:	6839      	ldr	r1, [r7, #0]
 801a10a:	68f8      	ldr	r0, [r7, #12]
 801a10c:	f000 f907 	bl	801a31e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801a110:	bf00      	nop
 801a112:	3710      	adds	r7, #16
 801a114:	46bd      	mov	sp, r7
 801a116:	bd80      	pop	{r7, pc}

0801a118 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	4618      	mov	r0, r3
 801a124:	f000 f90b 	bl	801a33e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	4618      	mov	r0, r3
 801a12c:	3708      	adds	r7, #8
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd80      	pop	{r7, pc}

0801a132 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a132:	b580      	push	{r7, lr}
 801a134:	b082      	sub	sp, #8
 801a136:	af00      	add	r7, sp, #0
 801a138:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a13a:	6878      	ldr	r0, [r7, #4]
 801a13c:	f000 f90f 	bl	801a35e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801a140:	4603      	mov	r3, r0
 801a142:	4618      	mov	r0, r3
 801a144:	3708      	adds	r7, #8
 801a146:	46bd      	mov	sp, r7
 801a148:	bd80      	pop	{r7, pc}

0801a14a <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801a14a:	b580      	push	{r7, lr}
 801a14c:	b082      	sub	sp, #8
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f000 f910 	bl	801a378 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801a158:	4603      	mov	r3, r0
 801a15a:	4618      	mov	r0, r3
 801a15c:	3708      	adds	r7, #8
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}

0801a162 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801a162:	b580      	push	{r7, lr}
 801a164:	b082      	sub	sp, #8
 801a166:	af00      	add	r7, sp, #0
 801a168:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	4618      	mov	r0, r3
 801a16e:	f000 f90f 	bl	801a390 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801a172:	4603      	mov	r3, r0
 801a174:	4618      	mov	r0, r3
 801a176:	3708      	adds	r7, #8
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}

0801a17c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b082      	sub	sp, #8
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
 801a184:	6039      	str	r1, [r7, #0]
 801a186:	6878      	ldr	r0, [r7, #4]
 801a188:	f000 f90e 	bl	801a3a8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	4618      	mov	r0, r3
 801a190:	3708      	adds	r7, #8
 801a192:	46bd      	mov	sp, r7
 801a194:	bd80      	pop	{r7, pc}

0801a196 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801a196:	b580      	push	{r7, lr}
 801a198:	b082      	sub	sp, #8
 801a19a:	af00      	add	r7, sp, #0
 801a19c:	6078      	str	r0, [r7, #4]
 801a19e:	6878      	ldr	r0, [r7, #4]
 801a1a0:	f000 f90d 	bl	801a3be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	3708      	adds	r7, #8
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}

0801a1ae <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801a1ae:	b580      	push	{r7, lr}
 801a1b0:	b082      	sub	sp, #8
 801a1b2:	af00      	add	r7, sp, #0
 801a1b4:	6078      	str	r0, [r7, #4]
 801a1b6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801a1b8:	2101      	movs	r1, #1
 801a1ba:	6838      	ldr	r0, [r7, #0]
 801a1bc:	f000 f90a 	bl	801a3d4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	6839      	ldr	r1, [r7, #0]
 801a1c6:	6878      	ldr	r0, [r7, #4]
 801a1c8:	f000 f913 	bl	801a3f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	3708      	adds	r7, #8
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}

0801a1d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b082      	sub	sp, #8
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d007      	beq.n	801a1f4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	6818      	ldr	r0, [r3, #0]
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	685b      	ldr	r3, [r3, #4]
 801a1ec:	2201      	movs	r2, #1
 801a1ee:	4619      	mov	r1, r3
 801a1f0:	f000 f913 	bl	801a41a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3708      	adds	r7, #8
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b082      	sub	sp, #8
 801a202:	af00      	add	r7, sp, #0
 801a204:	6078      	str	r0, [r7, #4]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	4618      	mov	r0, r3
 801a20c:	f000 f914 	bl	801a438 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801a210:	4603      	mov	r3, r0
 801a212:	4618      	mov	r0, r3
 801a214:	3708      	adds	r7, #8
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}
	...

0801a21c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a220:	b094      	sub	sp, #80	@ 0x50
 801a222:	af0a      	add	r7, sp, #40	@ 0x28
 801a224:	6278      	str	r0, [r7, #36]	@ 0x24
 801a226:	f887 1020 	strb.w	r1, [r7, #32]
 801a22a:	61fa      	str	r2, [r7, #28]
 801a22c:	61bb      	str	r3, [r7, #24]
	: _M_impl(__a)
 801a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a230:	4618      	mov	r0, r3
 801a232:	f7f4 f895 	bl	800e360 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801a236:	4a2a      	ldr	r2, [pc, #168]	@ (801a2e0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0xc4>)
 801a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a23a:	601a      	str	r2, [r3, #0]
 801a23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a23e:	330c      	adds	r3, #12
 801a240:	4621      	mov	r1, r4
 801a242:	4618      	mov	r0, r3
 801a244:	f000 f903 	bl	801a44e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801a248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a24a:	f000 f85a 	bl	801a302 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a24e:	4680      	mov	r8, r0
 801a250:	69f8      	ldr	r0, [r7, #28]
 801a252:	f7fb fcad 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a256:	4681      	mov	r9, r0
 801a258:	69b8      	ldr	r0, [r7, #24]
 801a25a:	f7fb fca9 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a25e:	4682      	mov	sl, r0
 801a260:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a262:	f7fb fca5 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a266:	4604      	mov	r4, r0
 801a268:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a26a:	f7fb fca1 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a26e:	4605      	mov	r5, r0
 801a270:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a272:	f7fb fca8 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a276:	4606      	mov	r6, r0
 801a278:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a27a:	f7fe f939 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a27e:	6178      	str	r0, [r7, #20]
 801a280:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a282:	f7fb fcab 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a286:	6138      	str	r0, [r7, #16]
 801a288:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a28a:	f7fb fca7 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a28e:	60f8      	str	r0, [r7, #12]
 801a290:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a292:	f7f7 f994 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a296:	60b8      	str	r0, [r7, #8]
 801a298:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a29a:	f7fb fc9f 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a29e:	6078      	str	r0, [r7, #4]
 801a2a0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a2a2:	f7fb fca6 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	f107 0020 	add.w	r0, r7, #32
 801a2ac:	9308      	str	r3, [sp, #32]
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	9307      	str	r3, [sp, #28]
 801a2b2:	68bb      	ldr	r3, [r7, #8]
 801a2b4:	9306      	str	r3, [sp, #24]
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	9305      	str	r3, [sp, #20]
 801a2ba:	693b      	ldr	r3, [r7, #16]
 801a2bc:	9304      	str	r3, [sp, #16]
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	9303      	str	r3, [sp, #12]
 801a2c2:	9602      	str	r6, [sp, #8]
 801a2c4:	9501      	str	r5, [sp, #4]
 801a2c6:	9400      	str	r4, [sp, #0]
 801a2c8:	4653      	mov	r3, sl
 801a2ca:	464a      	mov	r2, r9
 801a2cc:	4641      	mov	r1, r8
 801a2ce:	f000 f8cd 	bl	801a46c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 801a2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	3728      	adds	r7, #40	@ 0x28
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2de:	bf00      	nop
 801a2e0:	0802b6bc 	.word	0x0802b6bc

0801a2e4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801a2e4:	b480      	push	{r7}
 801a2e6:	b083      	sub	sp, #12
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
 801a2ec:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	605a      	str	r2, [r3, #4]
	return *this;
 801a2f4:	687b      	ldr	r3, [r7, #4]
      }
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	370c      	adds	r7, #12
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a300:	4770      	bx	lr

0801a302 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801a302:	b580      	push	{r7, lr}
 801a304:	b082      	sub	sp, #8
 801a306:	af00      	add	r7, sp, #0
 801a308:	6078      	str	r0, [r7, #4]
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	330c      	adds	r3, #12
 801a30e:	4618      	mov	r0, r3
 801a310:	f000 f8f7 	bl	801a502 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>
 801a314:	4603      	mov	r3, r0
 801a316:	4618      	mov	r0, r3
 801a318:	3708      	adds	r7, #8
 801a31a:	46bd      	mov	sp, r7
 801a31c:	bd80      	pop	{r7, pc}

0801a31e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 801a31e:	b580      	push	{r7, lr}
 801a320:	b084      	sub	sp, #16
 801a322:	af00      	add	r7, sp, #0
 801a324:	60f8      	str	r0, [r7, #12]
 801a326:	60b9      	str	r1, [r7, #8]
 801a328:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	687a      	ldr	r2, [r7, #4]
 801a32e:	68b9      	ldr	r1, [r7, #8]
 801a330:	4618      	mov	r0, r3
 801a332:	f7fc fedd 	bl	80170f0 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 801a336:	bf00      	nop
 801a338:	3710      	adds	r7, #16
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}

0801a33e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801a33e:	b580      	push	{r7, lr}
 801a340:	b082      	sub	sp, #8
 801a342:	af00      	add	r7, sp, #0
 801a344:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801a346:	6878      	ldr	r0, [r7, #4]
 801a348:	f000 f8e7 	bl	801a51a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	4618      	mov	r0, r3
 801a350:	f000 f8ef 	bl	801a532 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	4618      	mov	r0, r3
 801a358:	3708      	adds	r7, #8
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd80      	pop	{r7, pc}

0801a35e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a35e:	b580      	push	{r7, lr}
 801a360:	b082      	sub	sp, #8
 801a362:	af00      	add	r7, sp, #0
 801a364:	6078      	str	r0, [r7, #4]
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	4618      	mov	r0, r3
 801a36a:	f000 f8f0 	bl	801a54e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>
 801a36e:	4603      	mov	r3, r0
 801a370:	4618      	mov	r0, r3
 801a372:	3708      	adds	r7, #8
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}

0801a378 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a378:	b580      	push	{r7, lr}
 801a37a:	b082      	sub	sp, #8
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a380:	6878      	ldr	r0, [r7, #4]
 801a382:	f000 f8ef 	bl	801a564 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>
 801a386:	4603      	mov	r3, r0
 801a388:	4618      	mov	r0, r3
 801a38a:	3708      	adds	r7, #8
 801a38c:	46bd      	mov	sp, r7
 801a38e:	bd80      	pop	{r7, pc}

0801a390 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a390:	b580      	push	{r7, lr}
 801a392:	b082      	sub	sp, #8
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a398:	6878      	ldr	r0, [r7, #4]
 801a39a:	f000 f8ef 	bl	801a57c <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3708      	adds	r7, #8
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}

0801a3a8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a3a8:	b480      	push	{r7}
 801a3aa:	b083      	sub	sp, #12
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	370c      	adds	r7, #12
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3bc:	4770      	bx	lr

0801a3be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a3be:	b480      	push	{r7}
 801a3c0:	b083      	sub	sp, #12
 801a3c2:	af00      	add	r7, sp, #0
 801a3c4:	6078      	str	r0, [r7, #4]
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	370c      	adds	r7, #12
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d2:	4770      	bx	lr

0801a3d4 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b082      	sub	sp, #8
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
 801a3dc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801a3de:	2200      	movs	r2, #0
 801a3e0:	6839      	ldr	r1, [r7, #0]
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f000 f8d8 	bl	801a598 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3708      	adds	r7, #8
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}

0801a3f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801a3f2:	b580      	push	{r7, lr}
 801a3f4:	b084      	sub	sp, #16
 801a3f6:	af00      	add	r7, sp, #0
 801a3f8:	60f8      	str	r0, [r7, #12]
 801a3fa:	60b9      	str	r1, [r7, #8]
 801a3fc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801a3fe:	68b8      	ldr	r0, [r7, #8]
 801a400:	f000 f8f8 	bl	801a5f4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 801a404:	4602      	mov	r2, r0
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	601a      	str	r2, [r3, #0]
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	687a      	ldr	r2, [r7, #4]
 801a40e:	605a      	str	r2, [r3, #4]
      { }
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	4618      	mov	r0, r3
 801a414:	3710      	adds	r7, #16
 801a416:	46bd      	mov	sp, r7
 801a418:	bd80      	pop	{r7, pc}

0801a41a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a41a:	b580      	push	{r7, lr}
 801a41c:	b084      	sub	sp, #16
 801a41e:	af00      	add	r7, sp, #0
 801a420:	60f8      	str	r0, [r7, #12]
 801a422:	60b9      	str	r1, [r7, #8]
 801a424:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	68b9      	ldr	r1, [r7, #8]
 801a42a:	68f8      	ldr	r0, [r7, #12]
 801a42c:	f000 f8ed 	bl	801a60a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801a430:	bf00      	nop
 801a432:	3710      	adds	r7, #16
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 801a438:	b480      	push	{r7}
 801a43a:	b083      	sub	sp, #12
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
      return __ptr;
 801a440:	687b      	ldr	r3, [r7, #4]
    }
 801a442:	4618      	mov	r0, r3
 801a444:	370c      	adds	r7, #12
 801a446:	46bd      	mov	sp, r7
 801a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44c:	4770      	bx	lr

0801a44e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801a44e:	b580      	push	{r7, lr}
 801a450:	b082      	sub	sp, #8
 801a452:	af00      	add	r7, sp, #0
 801a454:	6078      	str	r0, [r7, #4]
 801a456:	7039      	strb	r1, [r7, #0]
 801a458:	463b      	mov	r3, r7
 801a45a:	4619      	mov	r1, r3
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f7f4 f999 	bl	800e794 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	4618      	mov	r0, r3
 801a466:	3708      	adds	r7, #8
 801a468:	46bd      	mov	sp, r7
 801a46a:	bd80      	pop	{r7, pc}

0801a46c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801a46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a470:	b090      	sub	sp, #64	@ 0x40
 801a472:	af08      	add	r7, sp, #32
 801a474:	61f8      	str	r0, [r7, #28]
 801a476:	61b9      	str	r1, [r7, #24]
 801a478:	617a      	str	r2, [r7, #20]
 801a47a:	613b      	str	r3, [r7, #16]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801a47c:	6978      	ldr	r0, [r7, #20]
 801a47e:	f7fb fb97 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a482:	4680      	mov	r8, r0
 801a484:	6938      	ldr	r0, [r7, #16]
 801a486:	f7fb fb93 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a48a:	4681      	mov	r9, r0
 801a48c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801a48e:	f7fb fb8f 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a492:	4682      	mov	sl, r0
 801a494:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a496:	f7fb fb8b 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a49a:	4604      	mov	r4, r0
 801a49c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a49e:	f7fb fb92 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4a2:	4605      	mov	r5, r0
 801a4a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a4a6:	f7fe f823 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4aa:	4606      	mov	r6, r0
 801a4ac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a4ae:	f7fb fb95 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4b2:	60f8      	str	r0, [r7, #12]
 801a4b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a4b6:	f7fb fb91 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4ba:	60b8      	str	r0, [r7, #8]
 801a4bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a4be:	f7f7 f87e 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4c2:	6078      	str	r0, [r7, #4]
 801a4c4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a4c6:	f7fb fb89 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4ca:	6038      	str	r0, [r7, #0]
 801a4cc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a4ce:	f7fb fb90 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	9307      	str	r3, [sp, #28]
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	9306      	str	r3, [sp, #24]
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	9305      	str	r3, [sp, #20]
 801a4de:	68bb      	ldr	r3, [r7, #8]
 801a4e0:	9304      	str	r3, [sp, #16]
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	9303      	str	r3, [sp, #12]
 801a4e6:	9602      	str	r6, [sp, #8]
 801a4e8:	9501      	str	r5, [sp, #4]
 801a4ea:	9400      	str	r4, [sp, #0]
 801a4ec:	4653      	mov	r3, sl
 801a4ee:	464a      	mov	r2, r9
 801a4f0:	4641      	mov	r1, r8
 801a4f2:	69b8      	ldr	r0, [r7, #24]
 801a4f4:	f000 f89a 	bl	801a62c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 801a4f8:	bf00      	nop
 801a4fa:	3720      	adds	r7, #32
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a502 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>:
      _M_ptr() noexcept
 801a502:	b580      	push	{r7, lr}
 801a504:	b082      	sub	sp, #8
 801a506:	af00      	add	r7, sp, #0
 801a508:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	f000 f926 	bl	801a75c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>
 801a510:	4603      	mov	r3, r0
 801a512:	4618      	mov	r0, r3
 801a514:	3708      	adds	r7, #8
 801a516:	46bd      	mov	sp, r7
 801a518:	bd80      	pop	{r7, pc}

0801a51a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>:
      _Tuple_impl()
 801a51a:	b580      	push	{r7, lr}
 801a51c:	b082      	sub	sp, #8
 801a51e:	af00      	add	r7, sp, #0
 801a520:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801a522:	6878      	ldr	r0, [r7, #4]
 801a524:	f000 f925 	bl	801a772 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	4618      	mov	r0, r3
 801a52c:	3708      	adds	r7, #8
 801a52e:	46bd      	mov	sp, r7
 801a530:	bd80      	pop	{r7, pc}

0801a532 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>:
      constexpr _Head_base()
 801a532:	b480      	push	{r7}
 801a534:	b083      	sub	sp, #12
 801a536:	af00      	add	r7, sp, #0
 801a538:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	2200      	movs	r2, #0
 801a53e:	601a      	str	r2, [r3, #0]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	4618      	mov	r0, r3
 801a544:	370c      	adds	r7, #12
 801a546:	46bd      	mov	sp, r7
 801a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54c:	4770      	bx	lr

0801a54e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a54e:	b480      	push	{r7}
 801a550:	b083      	sub	sp, #12
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	4618      	mov	r0, r3
 801a55a:	370c      	adds	r7, #12
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr

0801a564 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
 801a56c:	6878      	ldr	r0, [r7, #4]
 801a56e:	f000 f90b 	bl	801a788 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>
 801a572:	4603      	mov	r3, r0
 801a574:	4618      	mov	r0, r3
 801a576:	3708      	adds	r7, #8
 801a578:	46bd      	mov	sp, r7
 801a57a:	bd80      	pop	{r7, pc}

0801a57c <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b082      	sub	sp, #8
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	4618      	mov	r0, r3
 801a588:	f000 f909 	bl	801a79e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>
 801a58c:	4603      	mov	r3, r0
 801a58e:	4618      	mov	r0, r3
 801a590:	3708      	adds	r7, #8
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}
	...

0801a598 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	60f8      	str	r0, [r7, #12]
 801a5a0:	60b9      	str	r1, [r7, #8]
 801a5a2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801a5a4:	68f8      	ldr	r0, [r7, #12]
 801a5a6:	f000 f905 	bl	801a7b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801a5aa:	4602      	mov	r2, r0
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	4293      	cmp	r3, r2
 801a5b0:	bf8c      	ite	hi
 801a5b2:	2301      	movhi	r3, #1
 801a5b4:	2300      	movls	r3, #0
 801a5b6:	b2db      	uxtb	r3, r3
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	bf14      	ite	ne
 801a5bc:	2301      	movne	r3, #1
 801a5be:	2300      	moveq	r3, #0
 801a5c0:	b2db      	uxtb	r3, r3
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d007      	beq.n	801a5d6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	4a09      	ldr	r2, [pc, #36]	@ (801a5f0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d901      	bls.n	801a5d2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801a5ce:	f00e f86d 	bl	80286ac <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801a5d2:	f00e f868 	bl	80286a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a5d6:	68bb      	ldr	r3, [r7, #8]
 801a5d8:	22a4      	movs	r2, #164	@ 0xa4
 801a5da:	fb02 f303 	mul.w	r3, r2, r3
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f00e f84e 	bl	8028680 <_Znwj>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	bf00      	nop
      }
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3710      	adds	r7, #16
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	018f9c18 	.word	0x018f9c18

0801a5f4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801a5f4:	b480      	push	{r7}
 801a5f6:	b083      	sub	sp, #12
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	4618      	mov	r0, r3
 801a600:	370c      	adds	r7, #12
 801a602:	46bd      	mov	sp, r7
 801a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a608:	4770      	bx	lr

0801a60a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801a60a:	b580      	push	{r7, lr}
 801a60c:	b084      	sub	sp, #16
 801a60e:	af00      	add	r7, sp, #0
 801a610:	60f8      	str	r0, [r7, #12]
 801a612:	60b9      	str	r1, [r7, #8]
 801a614:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	22a4      	movs	r2, #164	@ 0xa4
 801a61a:	fb02 f303 	mul.w	r3, r2, r3
 801a61e:	4619      	mov	r1, r3
 801a620:	68b8      	ldr	r0, [r7, #8]
 801a622:	f00e f81c 	bl	802865e <_ZdlPvj>
      }
 801a626:	3710      	adds	r7, #16
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a630:	ed2d 8b02 	vpush	{d8}
 801a634:	b0a6      	sub	sp, #152	@ 0x98
 801a636:	af08      	add	r7, sp, #32
 801a638:	6178      	str	r0, [r7, #20]
 801a63a:	6139      	str	r1, [r7, #16]
 801a63c:	60fa      	str	r2, [r7, #12]
 801a63e:	60bb      	str	r3, [r7, #8]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801a640:	697b      	ldr	r3, [r7, #20]
 801a642:	4619      	mov	r1, r3
 801a644:	2098      	movs	r0, #152	@ 0x98
 801a646:	f7f0 f9e3 	bl	800aa10 <_ZnwjPv>
 801a64a:	4680      	mov	r8, r0
 801a64c:	6938      	ldr	r0, [r7, #16]
 801a64e:	f7fb faaf 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a652:	4602      	mov	r2, r0
 801a654:	f107 0318 	add.w	r3, r7, #24
 801a658:	4611      	mov	r1, r2
 801a65a:	4618      	mov	r0, r3
 801a65c:	f00e f8ec 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a660:	68f8      	ldr	r0, [r7, #12]
 801a662:	f7fb faa5 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a666:	4602      	mov	r2, r0
 801a668:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a66c:	4611      	mov	r1, r2
 801a66e:	4618      	mov	r0, r3
 801a670:	f00e f8e2 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a674:	68b8      	ldr	r0, [r7, #8]
 801a676:	f7fb fa9b 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a67a:	4602      	mov	r2, r0
 801a67c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a680:	4611      	mov	r1, r2
 801a682:	4618      	mov	r0, r3
 801a684:	f00e f8d8 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a688:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801a68c:	f7fb fa90 	bl	8015bb0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a690:	4602      	mov	r2, r0
 801a692:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a696:	4611      	mov	r1, r2
 801a698:	4618      	mov	r0, r3
 801a69a:	f00e f8cd 	bl	8028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a69e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801a6a2:	f7fb fa90 	bl	8015bc6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	ed93 8a00 	vldr	s16, [r3]
 801a6ac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a6b0:	f7fd ff1e 	bl	80184f0 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	781c      	ldrb	r4, [r3, #0]
 801a6b8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801a6bc:	f7fb fa8e 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	881d      	ldrh	r5, [r3, #0]
 801a6c4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801a6c8:	f7fb fa88 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	881e      	ldrh	r6, [r3, #0]
 801a6d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801a6d4:	f7f6 ff73 	bl	80115be <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6d8:	4603      	mov	r3, r0
 801a6da:	781b      	ldrb	r3, [r3, #0]
 801a6dc:	607b      	str	r3, [r7, #4]
 801a6de:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801a6e2:	f7fb fa7b 	bl	8015bdc <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	881a      	ldrh	r2, [r3, #0]
 801a6ea:	603a      	str	r2, [r7, #0]
 801a6ec:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801a6f0:	f7fb fa7f 	bl	8015bf2 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a6f4:	4603      	mov	r3, r0
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 801a6fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801a700:	f107 0118 	add.w	r1, r7, #24
 801a704:	9306      	str	r3, [sp, #24]
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	9305      	str	r3, [sp, #20]
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	9304      	str	r3, [sp, #16]
 801a70e:	9603      	str	r6, [sp, #12]
 801a710:	9502      	str	r5, [sp, #8]
 801a712:	9401      	str	r4, [sp, #4]
 801a714:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a718:	9300      	str	r3, [sp, #0]
 801a71a:	eeb0 0a48 	vmov.f32	s0, s16
 801a71e:	4603      	mov	r3, r0
 801a720:	4640      	mov	r0, r8
 801a722:	f7ff f8cb 	bl	80198bc <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>
 801a726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a72a:	4618      	mov	r0, r3
 801a72c:	f00e f8a3 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a730:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a734:	4618      	mov	r0, r3
 801a736:	f00e f89e 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a73a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a73e:	4618      	mov	r0, r3
 801a740:	f00e f899 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a744:	f107 0318 	add.w	r3, r7, #24
 801a748:	4618      	mov	r0, r3
 801a74a:	f00e f894 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 801a74e:	bf00      	nop
 801a750:	3778      	adds	r7, #120	@ 0x78
 801a752:	46bd      	mov	sp, r7
 801a754:	ecbd 8b02 	vpop	{d8}
 801a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a75c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>:
      _M_addr() noexcept
 801a75c:	b480      	push	{r7}
 801a75e:	b083      	sub	sp, #12
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801a764:	687b      	ldr	r3, [r7, #4]
      }
 801a766:	4618      	mov	r0, r3
 801a768:	370c      	adds	r7, #12
 801a76a:	46bd      	mov	sp, r7
 801a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a770:	4770      	bx	lr

0801a772 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801a772:	b480      	push	{r7}
 801a774:	b083      	sub	sp, #12
 801a776:	af00      	add	r7, sp, #0
 801a778:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	4618      	mov	r0, r3
 801a77e:	370c      	adds	r7, #12
 801a780:	46bd      	mov	sp, r7
 801a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a786:	4770      	bx	lr

0801a788 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a788:	b480      	push	{r7}
 801a78a:	b083      	sub	sp, #12
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	4618      	mov	r0, r3
 801a794:	370c      	adds	r7, #12
 801a796:	46bd      	mov	sp, r7
 801a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a79c:	4770      	bx	lr

0801a79e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801a79e:	b480      	push	{r7}
 801a7a0:	b083      	sub	sp, #12
 801a7a2:	af00      	add	r7, sp, #0
 801a7a4:	6078      	str	r0, [r7, #4]
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	370c      	adds	r7, #12
 801a7ac:	46bd      	mov	sp, r7
 801a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b2:	4770      	bx	lr

0801a7b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a7b4:	b480      	push	{r7}
 801a7b6:	b083      	sub	sp, #12
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a7bc:	4b03      	ldr	r3, [pc, #12]	@ (801a7cc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801a7be:	4618      	mov	r0, r3
 801a7c0:	370c      	adds	r7, #12
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c8:	4770      	bx	lr
 801a7ca:	bf00      	nop
 801a7cc:	00c7ce0c 	.word	0x00c7ce0c

0801a7d0 <_ZN7TMC5160D1Ev>:

public:

	TMC5160(std::string, std::string, std::string, std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC5160() = default;
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	4a12      	ldr	r2, [pc, #72]	@ (801a824 <_ZN7TMC5160D1Ev+0x54>)
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	601a      	str	r2, [r3, #0]
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	3394      	adds	r3, #148	@ 0x94
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7ff fa4f 	bl	8019c86 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	3370      	adds	r3, #112	@ 0x70
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f00e f842 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	3358      	adds	r3, #88	@ 0x58
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	f00e f83d 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	3340      	adds	r3, #64	@ 0x40
 801a800:	4618      	mov	r0, r3
 801a802:	f00e f838 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	3328      	adds	r3, #40	@ 0x28
 801a80a:	4618      	mov	r0, r3
 801a80c:	f00e f833 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	4618      	mov	r0, r3
 801a814:	f7fa fd48 	bl	80152a8 <_ZN3TMCD1Ev>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	4618      	mov	r0, r3
 801a81c:	3708      	adds	r7, #8
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
 801a822:	bf00      	nop
 801a824:	0802b6d8 	.word	0x0802b6d8

0801a828 <_ZN7TMC5160D0Ev>:
 801a828:	b580      	push	{r7, lr}
 801a82a:	b082      	sub	sp, #8
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f7ff ffcd 	bl	801a7d0 <_ZN7TMC5160D1Ev>
 801a836:	2198      	movs	r1, #152	@ 0x98
 801a838:	6878      	ldr	r0, [r7, #4]
 801a83a:	f00d ff10 	bl	802865e <_ZdlPvj>
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	4618      	mov	r0, r3
 801a842:	3708      	adds	r7, #8
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801a848:	b580      	push	{r7, lr}
 801a84a:	b082      	sub	sp, #8
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	4a05      	ldr	r2, [pc, #20]	@ (801a868 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	601a      	str	r2, [r3, #0]
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	4618      	mov	r0, r3
 801a85a:	f7f1 ff43 	bl	800c6e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	4618      	mov	r0, r3
 801a862:	3708      	adds	r7, #8
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}
 801a868:	0802b6bc 	.word	0x0802b6bc

0801a86c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b082      	sub	sp, #8
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
 801a874:	6878      	ldr	r0, [r7, #4]
 801a876:	f7ff ffe7 	bl	801a848 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a87a:	21a4      	movs	r1, #164	@ 0xa4
 801a87c:	6878      	ldr	r0, [r7, #4]
 801a87e:	f00d feee 	bl	802865e <_ZdlPvj>
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	4618      	mov	r0, r3
 801a886:	3708      	adds	r7, #8
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd80      	pop	{r7, pc}

0801a88c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801a88c:	b590      	push	{r4, r7, lr}
 801a88e:	b083      	sub	sp, #12
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	330c      	adds	r3, #12
 801a898:	4618      	mov	r0, r3
 801a89a:	f000 f856 	bl	801a94a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a89e:	4604      	mov	r4, r0
 801a8a0:	6878      	ldr	r0, [r7, #4]
 801a8a2:	f7ff fd2e 	bl	801a302 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	4619      	mov	r1, r3
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	f000 f859 	bl	801a962 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>
      }
 801a8b0:	bf00      	nop
 801a8b2:	370c      	adds	r7, #12
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd90      	pop	{r4, r7, pc}

0801a8b8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b086      	sub	sp, #24
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	330c      	adds	r3, #12
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f000 f840 	bl	801a94a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a8ca:	4602      	mov	r2, r0
 801a8cc:	f107 0314 	add.w	r3, r7, #20
 801a8d0:	4611      	mov	r1, r2
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f7ff fc52 	bl	801a17c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801a8d8:	f107 0114 	add.w	r1, r7, #20
 801a8dc:	f107 030c 	add.w	r3, r7, #12
 801a8e0:	687a      	ldr	r2, [r7, #4]
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f7ff fd85 	bl	801a3f2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f7ff ffad 	bl	801a848 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801a8ee:	f107 030c 	add.w	r3, r7, #12
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	f7ff fc6e 	bl	801a1d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a8f8:	f107 0314 	add.w	r3, r7, #20
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7ff fc4a 	bl	801a196 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a902:	3718      	adds	r7, #24
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}

0801a908 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801a908:	b580      	push	{r7, lr}
 801a90a:	b084      	sub	sp, #16
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
 801a910:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801a912:	6878      	ldr	r0, [r7, #4]
 801a914:	f7ff fcf5 	bl	801a302 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a918:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a91a:	f7f0 f8c5 	bl	800aaa8 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801a91e:	4602      	mov	r2, r0
	    ||
 801a920:	683b      	ldr	r3, [r7, #0]
 801a922:	4293      	cmp	r3, r2
 801a924:	d005      	beq.n	801a932 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801a926:	6838      	ldr	r0, [r7, #0]
 801a928:	f00d fed6 	bl	80286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 801a92c:	4603      	mov	r3, r0
	    ||
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d001      	beq.n	801a936 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801a932:	2301      	movs	r3, #1
 801a934:	e000      	b.n	801a938 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801a936:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d001      	beq.n	801a940 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	e000      	b.n	801a942 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801a940:	2300      	movs	r3, #0
      }
 801a942:	4618      	mov	r0, r3
 801a944:	3710      	adds	r7, #16
 801a946:	46bd      	mov	sp, r7
 801a948:	bd80      	pop	{r7, pc}

0801a94a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801a94a:	b580      	push	{r7, lr}
 801a94c:	b082      	sub	sp, #8
 801a94e:	af00      	add	r7, sp, #0
 801a950:	6078      	str	r0, [r7, #4]
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f7f4 f999 	bl	800ec8a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801a958:	4603      	mov	r3, r0
 801a95a:	4618      	mov	r0, r3
 801a95c:	3708      	adds	r7, #8
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}

0801a962 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801a962:	b580      	push	{r7, lr}
 801a964:	b082      	sub	sp, #8
 801a966:	af00      	add	r7, sp, #0
 801a968:	6078      	str	r0, [r7, #4]
 801a96a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 801a96c:	6838      	ldr	r0, [r7, #0]
 801a96e:	f000 f804 	bl	801a97a <_ZSt8_DestroyI7TMC5160EvPT_>
 801a972:	bf00      	nop
 801a974:	3708      	adds	r7, #8
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}

0801a97a <_ZSt8_DestroyI7TMC5160EvPT_>:
    _Destroy(_Tp* __pointer)
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b082      	sub	sp, #8
 801a97e:	af00      	add	r7, sp, #0
 801a980:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	6878      	ldr	r0, [r7, #4]
 801a98a:	4798      	blx	r3
    }
 801a98c:	bf00      	nop
 801a98e:	3708      	adds	r7, #8
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}

0801a994 <__NVIC_SetPriority>:
{
 801a994:	b480      	push	{r7}
 801a996:	b083      	sub	sp, #12
 801a998:	af00      	add	r7, sp, #0
 801a99a:	4603      	mov	r3, r0
 801a99c:	6039      	str	r1, [r7, #0]
 801a99e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a9a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	db0a      	blt.n	801a9be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	b2da      	uxtb	r2, r3
 801a9ac:	490c      	ldr	r1, [pc, #48]	@ (801a9e0 <__NVIC_SetPriority+0x4c>)
 801a9ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9b2:	0112      	lsls	r2, r2, #4
 801a9b4:	b2d2      	uxtb	r2, r2
 801a9b6:	440b      	add	r3, r1
 801a9b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a9bc:	e00a      	b.n	801a9d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9be:	683b      	ldr	r3, [r7, #0]
 801a9c0:	b2da      	uxtb	r2, r3
 801a9c2:	4908      	ldr	r1, [pc, #32]	@ (801a9e4 <__NVIC_SetPriority+0x50>)
 801a9c4:	88fb      	ldrh	r3, [r7, #6]
 801a9c6:	f003 030f 	and.w	r3, r3, #15
 801a9ca:	3b04      	subs	r3, #4
 801a9cc:	0112      	lsls	r2, r2, #4
 801a9ce:	b2d2      	uxtb	r2, r2
 801a9d0:	440b      	add	r3, r1
 801a9d2:	761a      	strb	r2, [r3, #24]
}
 801a9d4:	bf00      	nop
 801a9d6:	370c      	adds	r7, #12
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9de:	4770      	bx	lr
 801a9e0:	e000e100 	.word	0xe000e100
 801a9e4:	e000ed00 	.word	0xe000ed00

0801a9e8 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 801a9e8:	b480      	push	{r7}
 801a9ea:	b083      	sub	sp, #12
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	6039      	str	r1, [r7, #0]
 801a9f2:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	b25a      	sxtb	r2, r3
 801a9f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a9fc:	4013      	ands	r3, r2
 801a9fe:	b25b      	sxtb	r3, r3
 801aa00:	b2db      	uxtb	r3, r3
  }
 801aa02:	4618      	mov	r0, r3
 801aa04:	370c      	adds	r7, #12
 801aa06:	46bd      	mov	sp, r7
 801aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0c:	4770      	bx	lr

0801aa0e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801aa0e:	b580      	push	{r7, lr}
 801aa10:	b082      	sub	sp, #8
 801aa12:	af00      	add	r7, sp, #0
 801aa14:	6078      	str	r0, [r7, #4]
 801aa16:	460b      	mov	r3, r1
 801aa18:	70fb      	strb	r3, [r7, #3]
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	78fa      	ldrb	r2, [r7, #3]
 801aa1e:	4611      	mov	r1, r2
 801aa20:	4618      	mov	r0, r3
 801aa22:	f000 fa7c 	bl	801af1e <_ZNSt13__atomic_baseIbEC1Eb>
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3708      	adds	r7, #8
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}

0801aa30 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b084      	sub	sp, #16
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	460b      	mov	r3, r1
 801aa3a:	70fb      	strb	r3, [r7, #3]
 801aa3c:	4613      	mov	r3, r2
 801aa3e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	60fb      	str	r3, [r7, #12]
 801aa44:	78fb      	ldrb	r3, [r7, #3]
 801aa46:	72fb      	strb	r3, [r7, #11]
 801aa48:	78bb      	ldrb	r3, [r7, #2]
 801aa4a:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801aa4c:	7abb      	ldrb	r3, [r7, #10]
 801aa4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7ff ffc8 	bl	801a9e8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 801aa5c:	f7ea fb3e 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 801aa60:	4603      	mov	r3, r0
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d004      	beq.n	801aa70 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801aa66:	7a7b      	ldrb	r3, [r7, #9]
 801aa68:	2b02      	cmp	r3, #2
 801aa6a:	d101      	bne.n	801aa70 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801aa6c:	2301      	movs	r3, #1
 801aa6e:	e000      	b.n	801aa72 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 801aa70:	2300      	movs	r3, #0
 801aa72:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801aa74:	f7ea fb32 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 801aa78:	4603      	mov	r3, r0
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d004      	beq.n	801aa88 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801aa7e:	7a7b      	ldrb	r3, [r7, #9]
 801aa80:	2b04      	cmp	r3, #4
 801aa82:	d101      	bne.n	801aa88 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801aa84:	2301      	movs	r3, #1
 801aa86:	e000      	b.n	801aa8a <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 801aa88:	2300      	movs	r3, #0
 801aa8a:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 801aa8c:	f7ea fb26 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 801aa90:	4603      	mov	r3, r0
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d004      	beq.n	801aaa0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801aa96:	7a7b      	ldrb	r3, [r7, #9]
 801aa98:	2b01      	cmp	r3, #1
 801aa9a:	d101      	bne.n	801aaa0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801aa9c:	2301      	movs	r3, #1
 801aa9e:	e000      	b.n	801aaa2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	7afa      	ldrb	r2, [r7, #11]
 801aaa8:	f3bf 8f5b 	dmb	ish
 801aaac:	701a      	strb	r2, [r3, #0]
 801aaae:	f3bf 8f5b 	dmb	ish
      }
 801aab2:	bf00      	nop
 801aab4:	bf00      	nop
 801aab6:	3710      	adds	r7, #16
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	460b      	mov	r3, r1
 801aac6:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	60fb      	str	r3, [r7, #12]
 801aacc:	78fb      	ldrb	r3, [r7, #3]
 801aace:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801aad0:	7afb      	ldrb	r3, [r7, #11]
 801aad2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7ff ff86 	bl	801a9e8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801aadc:	4603      	mov	r3, r0
 801aade:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 801aae0:	f7ea fafc 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 801aae4:	4603      	mov	r3, r0
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d004      	beq.n	801aaf4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801aaea:	7abb      	ldrb	r3, [r7, #10]
 801aaec:	2b03      	cmp	r3, #3
 801aaee:	d101      	bne.n	801aaf4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	e000      	b.n	801aaf6 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801aaf8:	f7ea faf0 	bl	80050dc <_ZSt23__is_constant_evaluatedv>
 801aafc:	4603      	mov	r3, r0
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d004      	beq.n	801ab0c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801ab02:	7abb      	ldrb	r3, [r7, #10]
 801ab04:	2b04      	cmp	r3, #4
 801ab06:	d101      	bne.n	801ab0c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801ab08:	2301      	movs	r3, #1
 801ab0a:	e000      	b.n	801ab0e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	f3bf 8f5b 	dmb	ish
 801ab16:	781b      	ldrb	r3, [r3, #0]
 801ab18:	f3bf 8f5b 	dmb	ish
 801ab1c:	b2db      	uxtb	r3, r3
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	bf14      	ite	ne
 801ab22:	2301      	movne	r3, #1
 801ab24:	2300      	moveq	r3, #0
 801ab26:	b2db      	uxtb	r3, r3
 801ab28:	4618      	mov	r0, r3
 801ab2a:	3710      	adds	r7, #16
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}

0801ab30 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	460b      	mov	r3, r1
 801ab3a:	70fb      	strb	r3, [r7, #3]
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	3329      	adds	r3, #41	@ 0x29
 801ab40:	78f9      	ldrb	r1, [r7, #3]
 801ab42:	2203      	movs	r2, #3
 801ab44:	4618      	mov	r0, r3
 801ab46:	f7ff ff73 	bl	801aa30 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801ab4a:	bf00      	nop
 801ab4c:	3708      	adds	r7, #8
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}

0801ab52 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 801ab52:	b580      	push	{r7, lr}
 801ab54:	b082      	sub	sp, #8
 801ab56:	af00      	add	r7, sp, #0
 801ab58:	6078      	str	r0, [r7, #4]
 801ab5a:	460b      	mov	r3, r1
 801ab5c:	70fb      	strb	r3, [r7, #3]
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	332a      	adds	r3, #42	@ 0x2a
 801ab62:	78f9      	ldrb	r1, [r7, #3]
 801ab64:	2203      	movs	r2, #3
 801ab66:	4618      	mov	r0, r3
 801ab68:	f7ff ff62 	bl	801aa30 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801ab6c:	bf00      	nop
 801ab6e:	3708      	adds	r7, #8
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}

0801ab74 <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	3329      	adds	r3, #41	@ 0x29
 801ab80:	2102      	movs	r1, #2
 801ab82:	4618      	mov	r0, r3
 801ab84:	f7ff ff9a 	bl	801aabc <_ZNKSt6atomicIbE4loadESt12memory_order>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	3708      	adds	r7, #8
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bd80      	pop	{r7, pc}

0801ab92 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 801ab92:	b580      	push	{r7, lr}
 801ab94:	b082      	sub	sp, #8
 801ab96:	af00      	add	r7, sp, #0
 801ab98:	6078      	str	r0, [r7, #4]
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	332a      	adds	r3, #42	@ 0x2a
 801ab9e:	2102      	movs	r1, #2
 801aba0:	4618      	mov	r0, r3
 801aba2:	f7ff ff8b 	bl	801aabc <_ZNKSt6atomicIbE4loadESt12memory_order>
 801aba6:	4603      	mov	r3, r0
 801aba8:	4618      	mov	r0, r3
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bd80      	pop	{r7, pc}

0801abb0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b084      	sub	sp, #16
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60f8      	str	r0, [r7, #12]
 801abb8:	60b9      	str	r1, [r7, #8]
 801abba:	607a      	str	r2, [r7, #4]
 801abbc:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	68b9      	ldr	r1, [r7, #8]
 801abc2:	4618      	mov	r0, r3
 801abc4:	f00e f867 	bl	8028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	887a      	ldrh	r2, [r7, #2]
 801abd2:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	69ba      	ldr	r2, [r7, #24]
 801abd8:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	2200      	movs	r2, #0
 801abde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	3329      	adds	r3, #41	@ 0x29
 801abe6:	2100      	movs	r1, #0
 801abe8:	4618      	mov	r0, r3
 801abea:	f7ff ff10 	bl	801aa0e <_ZNSt6atomicIbEC1Eb>
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	332a      	adds	r3, #42	@ 0x2a
 801abf2:	2100      	movs	r1, #0
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7ff ff0a 	bl	801aa0e <_ZNSt6atomicIbEC1Eb>
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	332c      	adds	r3, #44	@ 0x2c
 801abfe:	4618      	mov	r0, r3
 801ac00:	f7f0 fab4 	bl	800b16c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	3338      	adds	r3, #56	@ 0x38
 801ac08:	4618      	mov	r0, r3
 801ac0a:	f7f0 faaf 	bl	800b16c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	4618      	mov	r0, r3
 801ac12:	f00e f813 	bl	8028c3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801ac16:	4601      	mov	r1, r0
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	6a1b      	ldr	r3, [r3, #32]
 801ac1c:	461a      	mov	r2, r3
 801ac1e:	4808      	ldr	r0, [pc, #32]	@ (801ac40 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 801ac20:	f00e fbd8 	bl	80293d4 <iprintf>
    NVIC_SetPriority(irq, _prio);
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ac2a:	7f3a      	ldrb	r2, [r7, #28]
 801ac2c:	4611      	mov	r1, r2
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f7ff feb0 	bl	801a994 <__NVIC_SetPriority>
}
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	4618      	mov	r0, r3
 801ac38:	3710      	adds	r7, #16
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bd80      	pop	{r7, pc}
 801ac3e:	bf00      	nop
 801ac40:	0802b058 	.word	0x0802b058

0801ac44 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b08a      	sub	sp, #40	@ 0x28
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	332c      	adds	r3, #44	@ 0x2c
 801ac50:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac54:	f7f1 fc5b 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	617b      	str	r3, [r7, #20]
 801ac5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac5e:	f7f1 fc66 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ac62:	4603      	mov	r3, r0
 801ac64:	613b      	str	r3, [r7, #16]
 801ac66:	e018      	b.n	801ac9a <_ZN9pruThread14executeModulesEv+0x56>
 801ac68:	f107 0314 	add.w	r3, r7, #20
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	f7f1 fc98 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801ac72:	61b8      	str	r0, [r7, #24]
        if (module) {
 801ac74:	69bb      	ldr	r3, [r7, #24]
 801ac76:	4618      	mov	r0, r3
 801ac78:	f7f1 fc9f 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ac7c:	4603      	mov	r3, r0
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d006      	beq.n	801ac90 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 801ac82:	69b8      	ldr	r0, [r7, #24]
 801ac84:	f7f1 fcaa 	bl	800c5dc <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801ac88:	4603      	mov	r3, r0
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7f7 f946 	bl	8011f1c <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 801ac90:	f107 0314 	add.w	r3, r7, #20
 801ac94:	4618      	mov	r0, r3
 801ac96:	f7f1 fc73 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801ac9a:	f107 0210 	add.w	r2, r7, #16
 801ac9e:	f107 0314 	add.w	r3, r7, #20
 801aca2:	4611      	mov	r1, r2
 801aca4:	4618      	mov	r0, r3
 801aca6:	f7f1 fc53 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801acaa:	4603      	mov	r3, r0
 801acac:	2b00      	cmp	r3, #0
 801acae:	d1db      	bne.n	801ac68 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d031      	beq.n	801ad1e <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	3338      	adds	r3, #56	@ 0x38
 801acbe:	623b      	str	r3, [r7, #32]
 801acc0:	6a38      	ldr	r0, [r7, #32]
 801acc2:	f7f1 fc24 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801acc6:	4603      	mov	r3, r0
 801acc8:	60fb      	str	r3, [r7, #12]
 801acca:	6a38      	ldr	r0, [r7, #32]
 801accc:	f7f1 fc2f 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801acd0:	4603      	mov	r3, r0
 801acd2:	60bb      	str	r3, [r7, #8]
 801acd4:	e018      	b.n	801ad08 <_ZN9pruThread14executeModulesEv+0xc4>
 801acd6:	f107 030c 	add.w	r3, r7, #12
 801acda:	4618      	mov	r0, r3
 801acdc:	f7f1 fc61 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801ace0:	61f8      	str	r0, [r7, #28]
			if (module) {
 801ace2:	69fb      	ldr	r3, [r7, #28]
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7f1 fc68 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801acea:	4603      	mov	r3, r0
 801acec:	2b00      	cmp	r3, #0
 801acee:	d006      	beq.n	801acfe <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 801acf0:	69f8      	ldr	r0, [r7, #28]
 801acf2:	f7f1 fc73 	bl	800c5dc <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801acf6:	4603      	mov	r3, r0
 801acf8:	4618      	mov	r0, r3
 801acfa:	f7f7 f90f 	bl	8011f1c <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 801acfe:	f107 030c 	add.w	r3, r7, #12
 801ad02:	4618      	mov	r0, r3
 801ad04:	f7f1 fc3c 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801ad08:	f107 0208 	add.w	r2, r7, #8
 801ad0c:	f107 030c 	add.w	r3, r7, #12
 801ad10:	4611      	mov	r1, r2
 801ad12:	4618      	mov	r0, r3
 801ad14:	f7f1 fc1c 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d1db      	bne.n	801acd6 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 801ad1e:	2301      	movs	r3, #1
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3728      	adds	r7, #40	@ 0x28
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}

0801ad28 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b082      	sub	sp, #8
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
 801ad30:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f1 fc40 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	f083 0301 	eor.w	r3, r3, #1
 801ad40:	b2db      	uxtb	r3, r3
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d001      	beq.n	801ad4a <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ad46:	2300      	movs	r3, #0
 801ad48:	e006      	b.n	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	332c      	adds	r3, #44	@ 0x2c
 801ad4e:	6839      	ldr	r1, [r7, #0]
 801ad50:	4618      	mov	r0, r3
 801ad52:	f000 f8f4 	bl	801af3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ad56:	2301      	movs	r3, #1
}
 801ad58:	4618      	mov	r0, r3
 801ad5a:	3708      	adds	r7, #8
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	bd80      	pop	{r7, pc}

0801ad60 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b082      	sub	sp, #8
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	6078      	str	r0, [r7, #4]
 801ad68:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f7f1 fc24 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ad72:	4603      	mov	r3, r0
 801ad74:	f083 0301 	eor.w	r3, r3, #1
 801ad78:	b2db      	uxtb	r3, r3
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d001      	beq.n	801ad82 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	e00a      	b.n	801ad98 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	2201      	movs	r2, #1
 801ad86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	3338      	adds	r3, #56	@ 0x38
 801ad8e:	6839      	ldr	r1, [r7, #0]
 801ad90:	4618      	mov	r0, r3
 801ad92:	f000 f8d4 	bl	801af3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ad96:	2301      	movs	r3, #1
}
 801ad98:	4618      	mov	r0, r3
 801ad9a:	3708      	adds	r7, #8
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b082      	sub	sp, #8
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	6039      	str	r1, [r7, #0]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 801adae:	4619      	mov	r1, r3
 801adb0:	6838      	ldr	r0, [r7, #0]
 801adb2:	f000 f8ea 	bl	801af8a <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 801adb6:	4603      	mov	r3, r0
        });
 801adb8:	4618      	mov	r0, r3
 801adba:	3708      	adds	r7, #8
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}

0801adc0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 801adc0:	b590      	push	{r4, r7, lr}
 801adc2:	b087      	sub	sp, #28
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	6078      	str	r0, [r7, #4]
 801adc8:	6039      	str	r1, [r7, #0]
    if (!module) {
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	4618      	mov	r0, r3
 801adce:	f7f1 fbf4 	bl	800c5ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801add2:	4603      	mov	r3, r0
 801add4:	f083 0301 	eor.w	r3, r3, #1
 801add8:	b2db      	uxtb	r3, r3
 801adda:	2b00      	cmp	r3, #0
 801addc:	d001      	beq.n	801ade2 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801adde:	2300      	movs	r3, #0
 801ade0:	e032      	b.n	801ae48 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	332c      	adds	r3, #44	@ 0x2c
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7f1 fb91 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801adec:	4604      	mov	r4, r0
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	332c      	adds	r3, #44	@ 0x2c
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7f1 fb9b 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801adf8:	4601      	mov	r1, r0
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	461a      	mov	r2, r3
 801adfe:	4620      	mov	r0, r4
 801ae00:	f000 f8db 	bl	801afba <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 801ae04:	4603      	mov	r3, r0
 801ae06:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801ae0e:	f107 0208 	add.w	r2, r7, #8
 801ae12:	f107 030c 	add.w	r3, r7, #12
 801ae16:	4611      	mov	r1, r2
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f000 f8e2 	bl	801afe2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	332c      	adds	r3, #44	@ 0x2c
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7f1 fb83 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ae28:	4603      	mov	r3, r0
 801ae2a:	617b      	str	r3, [r7, #20]
 801ae2c:	f107 0214 	add.w	r2, r7, #20
 801ae30:	f107 0310 	add.w	r3, r7, #16
 801ae34:	4611      	mov	r1, r2
 801ae36:	4618      	mov	r0, r3
 801ae38:	f000 f8d3 	bl	801afe2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ae3c:	693a      	ldr	r2, [r7, #16]
 801ae3e:	68f9      	ldr	r1, [r7, #12]
 801ae40:	4620      	mov	r0, r4
 801ae42:	f000 f8df 	bl	801b004 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 801ae46:	2301      	movs	r3, #1
}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	371c      	adds	r7, #28
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd90      	pop	{r4, r7, pc}

0801ae50 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 801ae50:	b590      	push	{r4, r7, lr}
 801ae52:	b085      	sub	sp, #20
 801ae54:	af02      	add	r7, sp, #8
 801ae56:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7ff fe8b 	bl	801ab74 <_ZNK9pruThread9isRunningEv>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d001      	beq.n	801ae68 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 801ae64:	2301      	movs	r3, #1
 801ae66:	e01c      	b.n	801aea2 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 801ae68:	2101      	movs	r1, #1
 801ae6a:	6878      	ldr	r0, [r7, #4]
 801ae6c:	f7ff fe60 	bl	801ab30 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801ae70:	2100      	movs	r1, #0
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f7ff fe6d 	bl	801ab52 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 801ae78:	2014      	movs	r0, #20
 801ae7a:	f00d fc01 	bl	8028680 <_Znwj>
 801ae7e:	4603      	mov	r3, r0
 801ae80:	461c      	mov	r4, r3
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	6999      	ldr	r1, [r3, #24]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	6a18      	ldr	r0, [r3, #32]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	9300      	str	r3, [sp, #0]
 801ae94:	4603      	mov	r3, r0
 801ae96:	4620      	mov	r0, r4
 801ae98:	f000 fd1a 	bl	801b8d0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 801aea0:	2301      	movs	r3, #1
}
 801aea2:	4618      	mov	r0, r3
 801aea4:	370c      	adds	r7, #12
 801aea6:	46bd      	mov	sp, r7
 801aea8:	bd90      	pop	{r4, r7, pc}

0801aeaa <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 801aeaa:	b580      	push	{r7, lr}
 801aeac:	b082      	sub	sp, #8
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 801aeb2:	2100      	movs	r1, #0
 801aeb4:	6878      	ldr	r0, [r7, #4]
 801aeb6:	f7ff fe3b 	bl	801ab30 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801aeba:	2100      	movs	r1, #0
 801aebc:	6878      	ldr	r0, [r7, #4]
 801aebe:	f7ff fe48 	bl	801ab52 <_ZN9pruThread15setThreadPausedEb>
}
 801aec2:	bf00      	nop
 801aec4:	3708      	adds	r7, #8
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}

0801aeca <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 801aeca:	b580      	push	{r7, lr}
 801aecc:	b082      	sub	sp, #8
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 801aed2:	6878      	ldr	r0, [r7, #4]
 801aed4:	f7ff fe4e 	bl	801ab74 <_ZNK9pruThread9isRunningEv>
 801aed8:	4603      	mov	r3, r0
 801aeda:	f083 0301 	eor.w	r3, r3, #1
 801aede:	b2db      	uxtb	r3, r3
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d105      	bne.n	801aef0 <_ZN9pruThread6updateEv+0x26>
 801aee4:	6878      	ldr	r0, [r7, #4]
 801aee6:	f7ff fe54 	bl	801ab92 <_ZNK9pruThread8isPausedEv>
 801aeea:	4603      	mov	r3, r0
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d001      	beq.n	801aef4 <_ZN9pruThread6updateEv+0x2a>
 801aef0:	2301      	movs	r3, #1
 801aef2:	e000      	b.n	801aef6 <_ZN9pruThread6updateEv+0x2c>
 801aef4:	2300      	movs	r3, #0
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d001      	beq.n	801aefe <_ZN9pruThread6updateEv+0x34>
        return true;
 801aefa:	2301      	movs	r3, #1
 801aefc:	e00b      	b.n	801af16 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 801aefe:	6878      	ldr	r0, [r7, #4]
 801af00:	f7ff fea0 	bl	801ac44 <_ZN9pruThread14executeModulesEv>
 801af04:	4603      	mov	r3, r0
 801af06:	f083 0301 	eor.w	r3, r3, #1
 801af0a:	b2db      	uxtb	r3, r3
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d001      	beq.n	801af14 <_ZN9pruThread6updateEv+0x4a>
        return false;
 801af10:	2300      	movs	r3, #0
 801af12:	e000      	b.n	801af16 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 801af14:	2301      	movs	r3, #1
}
 801af16:	4618      	mov	r0, r3
 801af18:	3708      	adds	r7, #8
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}

0801af1e <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 801af1e:	b480      	push	{r7}
 801af20:	b083      	sub	sp, #12
 801af22:	af00      	add	r7, sp, #0
 801af24:	6078      	str	r0, [r7, #4]
 801af26:	460b      	mov	r3, r1
 801af28:	70fb      	strb	r3, [r7, #3]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	78fa      	ldrb	r2, [r7, #3]
 801af2e:	701a      	strb	r2, [r3, #0]
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	4618      	mov	r0, r3
 801af34:	370c      	adds	r7, #12
 801af36:	46bd      	mov	sp, r7
 801af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3c:	4770      	bx	lr

0801af3e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801af3e:	b580      	push	{r7, lr}
 801af40:	b082      	sub	sp, #8
 801af42:	af00      	add	r7, sp, #0
 801af44:	6078      	str	r0, [r7, #4]
 801af46:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	685a      	ldr	r2, [r3, #4]
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	689b      	ldr	r3, [r3, #8]
 801af50:	429a      	cmp	r2, r3
 801af52:	d00d      	beq.n	801af70 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	683a      	ldr	r2, [r7, #0]
 801af5c:	4619      	mov	r1, r3
 801af5e:	f000 f88a 	bl	801b076 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	685b      	ldr	r3, [r3, #4]
 801af66:	f103 0208 	add.w	r2, r3, #8
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	605a      	str	r2, [r3, #4]
      }
 801af6e:	e008      	b.n	801af82 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 801af70:	6878      	ldr	r0, [r7, #4]
 801af72:	f7f1 fadc 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801af76:	4603      	mov	r3, r0
 801af78:	683a      	ldr	r2, [r7, #0]
 801af7a:	4619      	mov	r1, r3
 801af7c:	6878      	ldr	r0, [r7, #4]
 801af7e:	f000 f88d 	bl	801b09c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801af82:	bf00      	nop
 801af84:	3708      	adds	r7, #8
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}

0801af8a <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 801af8a:	b590      	push	{r4, r7, lr}
 801af8c:	b083      	sub	sp, #12
 801af8e:	af00      	add	r7, sp, #0
 801af90:	6078      	str	r0, [r7, #4]
 801af92:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	4618      	mov	r0, r3
 801af98:	f7f2 facf 	bl	800d53a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801af9c:	4604      	mov	r4, r0
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7f2 faca 	bl	800d53a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801afa6:	4603      	mov	r3, r0
 801afa8:	429c      	cmp	r4, r3
 801afaa:	bf0c      	ite	eq
 801afac:	2301      	moveq	r3, #1
 801afae:	2300      	movne	r3, #0
 801afb0:	b2db      	uxtb	r3, r3
 801afb2:	4618      	mov	r0, r3
 801afb4:	370c      	adds	r7, #12
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd90      	pop	{r4, r7, pc}

0801afba <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801afba:	b580      	push	{r7, lr}
 801afbc:	b084      	sub	sp, #16
 801afbe:	af00      	add	r7, sp, #0
 801afc0:	60f8      	str	r0, [r7, #12]
 801afc2:	60b9      	str	r1, [r7, #8]
 801afc4:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 801afc6:	6878      	ldr	r0, [r7, #4]
 801afc8:	f000 f8e4 	bl	801b194 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 801afcc:	4603      	mov	r3, r0
 801afce:	461a      	mov	r2, r3
 801afd0:	68b9      	ldr	r1, [r7, #8]
 801afd2:	68f8      	ldr	r0, [r7, #12]
 801afd4:	f000 f8f2 	bl	801b1bc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801afd8:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 801afda:	4618      	mov	r0, r3
 801afdc:	3710      	adds	r7, #16
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}

0801afe2 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 801afe2:	b580      	push	{r7, lr}
 801afe4:	b082      	sub	sp, #8
 801afe6:	af00      	add	r7, sp, #0
 801afe8:	6078      	str	r0, [r7, #4]
 801afea:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 801afec:	6838      	ldr	r0, [r7, #0]
 801afee:	f7f1 ffbb 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801aff2:	4603      	mov	r3, r0
 801aff4:	681a      	ldr	r2, [r3, #0]
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	601a      	str	r2, [r3, #0]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	4618      	mov	r0, r3
 801affe:	3708      	adds	r7, #8
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}

0801b004 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
      erase(const_iterator __first, const_iterator __last)
 801b004:	b590      	push	{r4, r7, lr}
 801b006:	b087      	sub	sp, #28
 801b008:	af00      	add	r7, sp, #0
 801b00a:	60f8      	str	r0, [r7, #12]
 801b00c:	60b9      	str	r1, [r7, #8]
 801b00e:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 801b010:	68f8      	ldr	r0, [r7, #12]
 801b012:	f7f1 fa7c 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801b016:	4603      	mov	r3, r0
 801b018:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 801b01a:	68f8      	ldr	r0, [r7, #12]
 801b01c:	f000 f929 	bl	801b272 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 801b020:	4603      	mov	r3, r0
 801b022:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 801b024:	f107 0210 	add.w	r2, r7, #16
 801b028:	f107 0308 	add.w	r3, r7, #8
 801b02c:	4611      	mov	r1, r2
 801b02e:	4618      	mov	r0, r3
 801b030:	f000 f92f 	bl	801b292 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801b034:	4602      	mov	r2, r0
 801b036:	f107 0314 	add.w	r3, r7, #20
 801b03a:	4611      	mov	r1, r2
 801b03c:	4618      	mov	r0, r3
 801b03e:	f000 f93d 	bl	801b2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b042:	4604      	mov	r4, r0
 801b044:	f107 0210 	add.w	r2, r7, #16
 801b048:	1d3b      	adds	r3, r7, #4
 801b04a:	4611      	mov	r1, r2
 801b04c:	4618      	mov	r0, r3
 801b04e:	f000 f920 	bl	801b292 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801b052:	4602      	mov	r2, r0
 801b054:	f107 0314 	add.w	r3, r7, #20
 801b058:	4611      	mov	r1, r2
 801b05a:	4618      	mov	r0, r3
 801b05c:	f000 f92e 	bl	801b2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b060:	4603      	mov	r3, r0
 801b062:	461a      	mov	r2, r3
 801b064:	4621      	mov	r1, r4
 801b066:	68f8      	ldr	r0, [r7, #12]
 801b068:	f000 f940 	bl	801b2ec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 801b06c:	4603      	mov	r3, r0
      }
 801b06e:	4618      	mov	r0, r3
 801b070:	371c      	adds	r7, #28
 801b072:	46bd      	mov	sp, r7
 801b074:	bd90      	pop	{r4, r7, pc}

0801b076 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801b076:	b580      	push	{r7, lr}
 801b078:	b084      	sub	sp, #16
 801b07a:	af00      	add	r7, sp, #0
 801b07c:	60f8      	str	r0, [r7, #12]
 801b07e:	60b9      	str	r1, [r7, #8]
 801b080:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801b082:	6878      	ldr	r0, [r7, #4]
 801b084:	f000 f979 	bl	801b37a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b088:	4603      	mov	r3, r0
 801b08a:	461a      	mov	r2, r3
 801b08c:	68b9      	ldr	r1, [r7, #8]
 801b08e:	68f8      	ldr	r0, [r7, #12]
 801b090:	f000 f97e 	bl	801b390 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 801b094:	bf00      	nop
 801b096:	3710      	adds	r7, #16
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}

0801b09c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b09c:	b5b0      	push	{r4, r5, r7, lr}
 801b09e:	b08c      	sub	sp, #48	@ 0x30
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	60f8      	str	r0, [r7, #12]
 801b0a4:	60b9      	str	r1, [r7, #8]
 801b0a6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801b0a8:	4a39      	ldr	r2, [pc, #228]	@ (801b190 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801b0aa:	2101      	movs	r1, #1
 801b0ac:	68f8      	ldr	r0, [r7, #12]
 801b0ae:	f7f2 fd74 	bl	800db9a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 801b0b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	f7f1 fa24 	bl	800c50e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	617b      	str	r3, [r7, #20]
 801b0ca:	f107 0214 	add.w	r2, r7, #20
 801b0ce:	f107 0308 	add.w	r3, r7, #8
 801b0d2:	4611      	mov	r1, r2
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	f7f2 fda7 	bl	800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f7f2 fdb5 	bl	800dc52 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 801b0e8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801b0ee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801b0f0:	6a3b      	ldr	r3, [r7, #32]
 801b0f2:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801b0f4:	69fa      	ldr	r2, [r7, #28]
 801b0f6:	18d5      	adds	r5, r2, r3
 801b0f8:	6878      	ldr	r0, [r7, #4]
 801b0fa:	f000 f93e 	bl	801b37a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b0fe:	4603      	mov	r3, r0
 801b100:	461a      	mov	r2, r3
 801b102:	4629      	mov	r1, r5
 801b104:	4620      	mov	r0, r4
 801b106:	f7ff ffb6 	bl	801b076 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 801b10a:	2300      	movs	r3, #0
 801b10c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b10e:	f107 0308 	add.w	r3, r7, #8
 801b112:	4618      	mov	r0, r3
 801b114:	f7f1 ff28 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b118:	4603      	mov	r3, r0
 801b11a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	4618      	mov	r0, r3
 801b120:	f7f1 fc94 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b124:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b126:	69fa      	ldr	r2, [r7, #28]
 801b128:	4621      	mov	r1, r4
 801b12a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b12c:	f7f2 fda5 	bl	800dc7a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b130:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801b132:	69bb      	ldr	r3, [r7, #24]
 801b134:	3308      	adds	r3, #8
 801b136:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b138:	f107 0308 	add.w	r3, r7, #8
 801b13c:	4618      	mov	r0, r3
 801b13e:	f7f1 ff13 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b142:	4603      	mov	r3, r0
 801b144:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	4618      	mov	r0, r3
 801b14a:	f7f1 fc7f 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b14e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b150:	69ba      	ldr	r2, [r7, #24]
 801b152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b154:	4620      	mov	r0, r4
 801b156:	f7f2 fd90 	bl	800dc7a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b15a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801b15c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	689a      	ldr	r2, [r3, #8]
 801b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801b168:	461a      	mov	r2, r3
 801b16a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b16c:	f7f1 fc5b 	bl	800ca26 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	69fa      	ldr	r2, [r7, #28]
 801b174:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	69ba      	ldr	r2, [r7, #24]
 801b17a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b17e:	00db      	lsls	r3, r3, #3
 801b180:	69fa      	ldr	r2, [r7, #28]
 801b182:	441a      	add	r2, r3
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	609a      	str	r2, [r3, #8]
    }
 801b188:	bf00      	nop
 801b18a:	3730      	adds	r7, #48	@ 0x30
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bdb0      	pop	{r4, r5, r7, pc}
 801b190:	0802b078 	.word	0x0802b078

0801b194 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 801b194:	b580      	push	{r7, lr}
 801b196:	b084      	sub	sp, #16
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 801b19c:	1d3b      	adds	r3, r7, #4
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f000 f90e 	bl	801b3c0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	f107 030c 	add.w	r3, r7, #12
 801b1aa:	6811      	ldr	r1, [r2, #0]
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f000 f912 	bl	801b3d6 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	3710      	adds	r7, #16
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801b1bc:	b590      	push	{r4, r7, lr}
 801b1be:	b087      	sub	sp, #28
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	60f8      	str	r0, [r7, #12]
 801b1c4:	60b9      	str	r1, [r7, #8]
 801b1c6:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 801b1c8:	687a      	ldr	r2, [r7, #4]
 801b1ca:	68b9      	ldr	r1, [r7, #8]
 801b1cc:	68f8      	ldr	r0, [r7, #12]
 801b1ce:	f000 f914 	bl	801b3fa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 801b1d6:	f107 0208 	add.w	r2, r7, #8
 801b1da:	f107 030c 	add.w	r3, r7, #12
 801b1de:	4611      	mov	r1, r2
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f000 f920 	bl	801b426 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d001      	beq.n	801b1f0 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	e03c      	b.n	801b26a <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	617b      	str	r3, [r7, #20]
      ++__first;
 801b1f4:	f107 030c 	add.w	r3, r7, #12
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f7f1 f9c1 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b1fe:	e028      	b.n	801b252 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 801b200:	1d3b      	adds	r3, r7, #4
 801b202:	68f9      	ldr	r1, [r7, #12]
 801b204:	4618      	mov	r0, r3
 801b206:	f000 f926 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b20a:	4603      	mov	r3, r0
 801b20c:	f083 0301 	eor.w	r3, r3, #1
 801b210:	b2db      	uxtb	r3, r3
 801b212:	2b00      	cmp	r3, #0
 801b214:	d018      	beq.n	801b248 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801b216:	f107 030c 	add.w	r3, r7, #12
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7f1 f9c1 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b220:	4603      	mov	r3, r0
 801b222:	4618      	mov	r0, r3
 801b224:	f7f1 fa42 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b228:	4604      	mov	r4, r0
 801b22a:	f107 0314 	add.w	r3, r7, #20
 801b22e:	4618      	mov	r0, r3
 801b230:	f7f1 f9b7 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b234:	4603      	mov	r3, r0
 801b236:	4621      	mov	r1, r4
 801b238:	4618      	mov	r0, r3
 801b23a:	f000 f920 	bl	801b47e <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 801b23e:	f107 0314 	add.w	r3, r7, #20
 801b242:	4618      	mov	r0, r3
 801b244:	f7f1 f99c 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b248:	f107 030c 	add.w	r3, r7, #12
 801b24c:	4618      	mov	r0, r3
 801b24e:	f7f1 f997 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801b252:	f107 0208 	add.w	r2, r7, #8
 801b256:	f107 030c 	add.w	r3, r7, #12
 801b25a:	4611      	mov	r1, r2
 801b25c:	4618      	mov	r0, r3
 801b25e:	f7f1 f977 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b262:	4603      	mov	r3, r0
 801b264:	2b00      	cmp	r3, #0
 801b266:	d1cb      	bne.n	801b200 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 801b268:	697b      	ldr	r3, [r7, #20]
    }
 801b26a:	4618      	mov	r0, r3
 801b26c:	371c      	adds	r7, #28
 801b26e:	46bd      	mov	sp, r7
 801b270:	bd90      	pop	{r4, r7, pc}

0801b272 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 801b272:	b580      	push	{r7, lr}
 801b274:	b084      	sub	sp, #16
 801b276:	af00      	add	r7, sp, #0
 801b278:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 801b27a:	687a      	ldr	r2, [r7, #4]
 801b27c:	f107 030c 	add.w	r3, r7, #12
 801b280:	4611      	mov	r1, r2
 801b282:	4618      	mov	r0, r3
 801b284:	f000 f90e 	bl	801b4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	4618      	mov	r0, r3
 801b28c:	3710      	adds	r7, #16
 801b28e:	46bd      	mov	sp, r7
 801b290:	bd80      	pop	{r7, pc}

0801b292 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b292:	b590      	push	{r4, r7, lr}
 801b294:	b083      	sub	sp, #12
 801b296:	af00      	add	r7, sp, #0
 801b298:	6078      	str	r0, [r7, #4]
 801b29a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801b29c:	6878      	ldr	r0, [r7, #4]
 801b29e:	f000 f911 	bl	801b4c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b2a2:	4603      	mov	r3, r0
 801b2a4:	681c      	ldr	r4, [r3, #0]
 801b2a6:	6838      	ldr	r0, [r7, #0]
 801b2a8:	f000 f90c 	bl	801b4c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	1ae3      	subs	r3, r4, r3
 801b2b2:	10db      	asrs	r3, r3, #3
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	370c      	adds	r7, #12
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd90      	pop	{r4, r7, pc}

0801b2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
 801b2c4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	00db      	lsls	r3, r3, #3
 801b2ce:	4413      	add	r3, r2
 801b2d0:	60fb      	str	r3, [r7, #12]
 801b2d2:	f107 020c 	add.w	r2, r7, #12
 801b2d6:	f107 0308 	add.w	r3, r7, #8
 801b2da:	4611      	mov	r1, r2
 801b2dc:	4618      	mov	r0, r3
 801b2de:	f7f1 fe33 	bl	800cf48 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	3710      	adds	r7, #16
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd80      	pop	{r7, pc}

0801b2ec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 801b2ec:	b590      	push	{r4, r7, lr}
 801b2ee:	b087      	sub	sp, #28
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	60f8      	str	r0, [r7, #12]
 801b2f4:	60b9      	str	r1, [r7, #8]
 801b2f6:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 801b2f8:	1d3a      	adds	r2, r7, #4
 801b2fa:	f107 0308 	add.w	r3, r7, #8
 801b2fe:	4611      	mov	r1, r2
 801b300:	4618      	mov	r0, r3
 801b302:	f7f1 f925 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b306:	4603      	mov	r3, r0
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d031      	beq.n	801b370 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 801b30c:	68f8      	ldr	r0, [r7, #12]
 801b30e:	f7f1 f90e 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b312:	4603      	mov	r3, r0
 801b314:	613b      	str	r3, [r7, #16]
 801b316:	f107 0210 	add.w	r2, r7, #16
 801b31a:	1d3b      	adds	r3, r7, #4
 801b31c:	4611      	mov	r1, r2
 801b31e:	4618      	mov	r0, r3
 801b320:	f7f1 f916 	bl	800c550 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b324:	4603      	mov	r3, r0
 801b326:	2b00      	cmp	r3, #0
 801b328:	d008      	beq.n	801b33c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 801b32a:	68f8      	ldr	r0, [r7, #12]
 801b32c:	f7f1 f8ff 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b330:	4603      	mov	r3, r0
 801b332:	68ba      	ldr	r2, [r7, #8]
 801b334:	4619      	mov	r1, r3
 801b336:	6878      	ldr	r0, [r7, #4]
 801b338:	f000 f8cf 	bl	801b4da <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 801b33c:	f107 0308 	add.w	r3, r7, #8
 801b340:	4618      	mov	r0, r3
 801b342:	f7f1 fe11 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b346:	4603      	mov	r3, r0
 801b348:	681c      	ldr	r4, [r3, #0]
 801b34a:	68f8      	ldr	r0, [r7, #12]
 801b34c:	f7f1 f8ef 	bl	800c52e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b350:	4603      	mov	r3, r0
 801b352:	617b      	str	r3, [r7, #20]
 801b354:	1d3a      	adds	r2, r7, #4
 801b356:	f107 0314 	add.w	r3, r7, #20
 801b35a:	4611      	mov	r1, r2
 801b35c:	4618      	mov	r0, r3
 801b35e:	f7f2 fc63 	bl	800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b362:	4603      	mov	r3, r0
 801b364:	00db      	lsls	r3, r3, #3
 801b366:	4423      	add	r3, r4
 801b368:	4619      	mov	r1, r3
 801b36a:	68f8      	ldr	r0, [r7, #12]
 801b36c:	f000 f8cd 	bl	801b50a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 801b370:	68bb      	ldr	r3, [r7, #8]
    }
 801b372:	4618      	mov	r0, r3
 801b374:	371c      	adds	r7, #28
 801b376:	46bd      	mov	sp, r7
 801b378:	bd90      	pop	{r4, r7, pc}

0801b37a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b37a:	b480      	push	{r7}
 801b37c:	b083      	sub	sp, #12
 801b37e:	af00      	add	r7, sp, #0
 801b380:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	4618      	mov	r0, r3
 801b386:	370c      	adds	r7, #12
 801b388:	46bd      	mov	sp, r7
 801b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38e:	4770      	bx	lr

0801b390 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801b390:	b590      	push	{r4, r7, lr}
 801b392:	b085      	sub	sp, #20
 801b394:	af00      	add	r7, sp, #0
 801b396:	60f8      	str	r0, [r7, #12]
 801b398:	60b9      	str	r1, [r7, #8]
 801b39a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	4619      	mov	r1, r3
 801b3a0:	2008      	movs	r0, #8
 801b3a2:	f7ef fb35 	bl	800aa10 <_ZnwjPv>
 801b3a6:	4604      	mov	r4, r0
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f7ff ffe6 	bl	801b37a <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	4619      	mov	r1, r3
 801b3b2:	4620      	mov	r0, r4
 801b3b4:	f7f0 fa52 	bl	800b85c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 801b3b8:	bf00      	nop
 801b3ba:	3714      	adds	r7, #20
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd90      	pop	{r4, r7, pc}

0801b3c0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801b3c0:	b480      	push	{r7}
 801b3c2:	b083      	sub	sp, #12
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	370c      	adds	r7, #12
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d4:	4770      	bx	lr

0801b3d6 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 801b3d6:	b580      	push	{r7, lr}
 801b3d8:	b082      	sub	sp, #8
 801b3da:	af00      	add	r7, sp, #0
 801b3dc:	6078      	str	r0, [r7, #4]
 801b3de:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801b3e0:	463b      	mov	r3, r7
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	f7ff ffec 	bl	801b3c0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b3e8:	4602      	mov	r2, r0
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6812      	ldr	r2, [r2, #0]
 801b3ee:	601a      	str	r2, [r3, #0]
      { }
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	3708      	adds	r7, #8
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	bd80      	pop	{r7, pc}

0801b3fa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 801b3fa:	b590      	push	{r4, r7, lr}
 801b3fc:	b085      	sub	sp, #20
 801b3fe:	af00      	add	r7, sp, #0
 801b400:	60f8      	str	r0, [r7, #12]
 801b402:	60b9      	str	r1, [r7, #8]
 801b404:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 801b406:	f107 030c 	add.w	r3, r7, #12
 801b40a:	4618      	mov	r0, r3
 801b40c:	f000 f89e 	bl	801b54c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 801b410:	4623      	mov	r3, r4
 801b412:	687a      	ldr	r2, [r7, #4]
 801b414:	68b9      	ldr	r1, [r7, #8]
 801b416:	68f8      	ldr	r0, [r7, #12]
 801b418:	f000 f8a2 	bl	801b560 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 801b41c:	4603      	mov	r3, r0
    }
 801b41e:	4618      	mov	r0, r3
 801b420:	3714      	adds	r7, #20
 801b422:	46bd      	mov	sp, r7
 801b424:	bd90      	pop	{r4, r7, pc}

0801b426 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b426:	b590      	push	{r4, r7, lr}
 801b428:	b083      	sub	sp, #12
 801b42a:	af00      	add	r7, sp, #0
 801b42c:	6078      	str	r0, [r7, #4]
 801b42e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f7f1 fd99 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b436:	4603      	mov	r3, r0
 801b438:	681c      	ldr	r4, [r3, #0]
 801b43a:	6838      	ldr	r0, [r7, #0]
 801b43c:	f7f1 fd94 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b440:	4603      	mov	r3, r0
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	429c      	cmp	r4, r3
 801b446:	bf0c      	ite	eq
 801b448:	2301      	moveq	r3, #1
 801b44a:	2300      	movne	r3, #0
 801b44c:	b2db      	uxtb	r3, r3
 801b44e:	4618      	mov	r0, r3
 801b450:	370c      	adds	r7, #12
 801b452:	46bd      	mov	sp, r7
 801b454:	bd90      	pop	{r4, r7, pc}

0801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 801b456:	b590      	push	{r4, r7, lr}
 801b458:	b083      	sub	sp, #12
 801b45a:	af00      	add	r7, sp, #0
 801b45c:	6078      	str	r0, [r7, #4]
 801b45e:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 801b460:	687c      	ldr	r4, [r7, #4]
 801b462:	463b      	mov	r3, r7
 801b464:	4618      	mov	r0, r3
 801b466:	f7f1 f89c 	bl	800c5a2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b46a:	4603      	mov	r3, r0
 801b46c:	4619      	mov	r1, r3
 801b46e:	4620      	mov	r0, r4
 801b470:	f7ff fc96 	bl	801ada0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 801b474:	4603      	mov	r3, r0
 801b476:	4618      	mov	r0, r3
 801b478:	370c      	adds	r7, #12
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd90      	pop	{r4, r7, pc}

0801b47e <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 801b47e:	b590      	push	{r4, r7, lr}
 801b480:	b083      	sub	sp, #12
 801b482:	af00      	add	r7, sp, #0
 801b484:	6078      	str	r0, [r7, #4]
 801b486:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 801b488:	687c      	ldr	r4, [r7, #4]
 801b48a:	6838      	ldr	r0, [r7, #0]
 801b48c:	f7f1 f90e 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b490:	4603      	mov	r3, r0
 801b492:	4619      	mov	r1, r3
 801b494:	4620      	mov	r0, r4
 801b496:	f000 f8fc 	bl	801b692 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 801b49a:	687b      	ldr	r3, [r7, #4]
      }
 801b49c:	4618      	mov	r0, r3
 801b49e:	370c      	adds	r7, #12
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd90      	pop	{r4, r7, pc}

0801b4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b4a4:	b480      	push	{r7}
 801b4a6:	b083      	sub	sp, #12
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
 801b4ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801b4ae:	683b      	ldr	r3, [r7, #0]
 801b4b0:	681a      	ldr	r2, [r3, #0]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	601a      	str	r2, [r3, #0]
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	370c      	adds	r7, #12
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c2:	4770      	bx	lr

0801b4c4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801b4c4:	b480      	push	{r7}
 801b4c6:	b083      	sub	sp, #12
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	370c      	adds	r7, #12
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d8:	4770      	bx	lr

0801b4da <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 801b4da:	b590      	push	{r4, r7, lr}
 801b4dc:	b085      	sub	sp, #20
 801b4de:	af00      	add	r7, sp, #0
 801b4e0:	60f8      	str	r0, [r7, #12]
 801b4e2:	60b9      	str	r1, [r7, #8]
 801b4e4:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 801b4e6:	68f8      	ldr	r0, [r7, #12]
 801b4e8:	f000 f8f2 	bl	801b6d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b4ec:	4604      	mov	r4, r0
 801b4ee:	68b8      	ldr	r0, [r7, #8]
 801b4f0:	f000 f8ee 	bl	801b6d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	687a      	ldr	r2, [r7, #4]
 801b4f8:	4619      	mov	r1, r3
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f000 f8f3 	bl	801b6e6 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 801b500:	4603      	mov	r3, r0
    }
 801b502:	4618      	mov	r0, r3
 801b504:	3714      	adds	r7, #20
 801b506:	46bd      	mov	sp, r7
 801b508:	bd90      	pop	{r4, r7, pc}

0801b50a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801b50a:	b590      	push	{r4, r7, lr}
 801b50c:	b085      	sub	sp, #20
 801b50e:	af00      	add	r7, sp, #0
 801b510:	6078      	str	r0, [r7, #4]
 801b512:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	685a      	ldr	r2, [r3, #4]
 801b518:	683b      	ldr	r3, [r7, #0]
 801b51a:	1ad3      	subs	r3, r2, r3
 801b51c:	10db      	asrs	r3, r3, #3
 801b51e:	60fb      	str	r3, [r7, #12]
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d00e      	beq.n	801b544 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7f1 fa8d 	bl	800ca4c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b532:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b534:	461a      	mov	r2, r3
 801b536:	4621      	mov	r1, r4
 801b538:	6838      	ldr	r0, [r7, #0]
 801b53a:	f7f1 fa92 	bl	800ca62 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	683a      	ldr	r2, [r7, #0]
 801b542:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801b544:	bf00      	nop
 801b546:	3714      	adds	r7, #20
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd90      	pop	{r4, r7, pc}

0801b54c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 801b54c:	b480      	push	{r7}
 801b54e:	b083      	sub	sp, #12
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801b554:	4618      	mov	r0, r3
 801b556:	370c      	adds	r7, #12
 801b558:	46bd      	mov	sp, r7
 801b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b55e:	4770      	bx	lr

0801b560 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801b560:	b580      	push	{r7, lr}
 801b562:	b086      	sub	sp, #24
 801b564:	af00      	add	r7, sp, #0
 801b566:	60f8      	str	r0, [r7, #12]
 801b568:	60b9      	str	r1, [r7, #8]
 801b56a:	607a      	str	r2, [r7, #4]
 801b56c:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 801b56e:	f107 020c 	add.w	r2, r7, #12
 801b572:	f107 0308 	add.w	r3, r7, #8
 801b576:	4611      	mov	r1, r2
 801b578:	4618      	mov	r0, r3
 801b57a:	f7f2 fb55 	bl	800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b57e:	4603      	mov	r3, r0
 801b580:	109b      	asrs	r3, r3, #2
 801b582:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 801b584:	e03e      	b.n	801b604 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 801b586:	1d3b      	adds	r3, r7, #4
 801b588:	68f9      	ldr	r1, [r7, #12]
 801b58a:	4618      	mov	r0, r3
 801b58c:	f7ff ff63 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b590:	4603      	mov	r3, r0
 801b592:	2b00      	cmp	r3, #0
 801b594:	d001      	beq.n	801b59a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	e077      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b59a:	f107 030c 	add.w	r3, r7, #12
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f7f0 ffee 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b5a4:	1d3b      	adds	r3, r7, #4
 801b5a6:	68f9      	ldr	r1, [r7, #12]
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7ff ff54 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d001      	beq.n	801b5b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	e068      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5b8:	f107 030c 	add.w	r3, r7, #12
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7f0 ffdf 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b5c2:	1d3b      	adds	r3, r7, #4
 801b5c4:	68f9      	ldr	r1, [r7, #12]
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7ff ff45 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d001      	beq.n	801b5d6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	e059      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5d6:	f107 030c 	add.w	r3, r7, #12
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7f0 ffd0 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b5e0:	1d3b      	adds	r3, r7, #4
 801b5e2:	68f9      	ldr	r1, [r7, #12]
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7ff ff36 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d001      	beq.n	801b5f4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	e04a      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5f4:	f107 030c 	add.w	r3, r7, #12
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7f0 ffc1 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	3b01      	subs	r3, #1
 801b602:	617b      	str	r3, [r7, #20]
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	2b00      	cmp	r3, #0
 801b608:	dcbd      	bgt.n	801b586 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 801b60a:	f107 020c 	add.w	r2, r7, #12
 801b60e:	f107 0308 	add.w	r3, r7, #8
 801b612:	4611      	mov	r1, r2
 801b614:	4618      	mov	r0, r3
 801b616:	f7f2 fb07 	bl	800dc28 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b61a:	4603      	mov	r3, r0
 801b61c:	2b03      	cmp	r3, #3
 801b61e:	d006      	beq.n	801b62e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 801b620:	2b03      	cmp	r3, #3
 801b622:	dc31      	bgt.n	801b688 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 801b624:	2b01      	cmp	r3, #1
 801b626:	d020      	beq.n	801b66a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 801b628:	2b02      	cmp	r3, #2
 801b62a:	d00f      	beq.n	801b64c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 801b62c:	e02c      	b.n	801b688 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 801b62e:	1d3b      	adds	r3, r7, #4
 801b630:	68f9      	ldr	r1, [r7, #12]
 801b632:	4618      	mov	r0, r3
 801b634:	f7ff ff0f 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b638:	4603      	mov	r3, r0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d001      	beq.n	801b642 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	e023      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b642:	f107 030c 	add.w	r3, r7, #12
 801b646:	4618      	mov	r0, r3
 801b648:	f7f0 ff9a 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b64c:	1d3b      	adds	r3, r7, #4
 801b64e:	68f9      	ldr	r1, [r7, #12]
 801b650:	4618      	mov	r0, r3
 801b652:	f7ff ff00 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b656:	4603      	mov	r3, r0
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d001      	beq.n	801b660 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	e014      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b660:	f107 030c 	add.w	r3, r7, #12
 801b664:	4618      	mov	r0, r3
 801b666:	f7f0 ff8b 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b66a:	1d3b      	adds	r3, r7, #4
 801b66c:	68f9      	ldr	r1, [r7, #12]
 801b66e:	4618      	mov	r0, r3
 801b670:	f7ff fef1 	bl	801b456 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b674:	4603      	mov	r3, r0
 801b676:	2b00      	cmp	r3, #0
 801b678:	d001      	beq.n	801b67e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	e005      	b.n	801b68a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b67e:	f107 030c 	add.w	r3, r7, #12
 801b682:	4618      	mov	r0, r3
 801b684:	f7f0 ff7c 	bl	800c580 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 801b688:	68bb      	ldr	r3, [r7, #8]
    }
 801b68a:	4618      	mov	r0, r3
 801b68c:	3718      	adds	r7, #24
 801b68e:	46bd      	mov	sp, r7
 801b690:	bd80      	pop	{r7, pc}

0801b692 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 801b692:	b580      	push	{r7, lr}
 801b694:	b084      	sub	sp, #16
 801b696:	af00      	add	r7, sp, #0
 801b698:	6078      	str	r0, [r7, #4]
 801b69a:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 801b69c:	6838      	ldr	r0, [r7, #0]
 801b69e:	f000 f843 	bl	801b728 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 801b6a2:	4602      	mov	r2, r0
 801b6a4:	f107 0308 	add.w	r3, r7, #8
 801b6a8:	4611      	mov	r1, r2
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f7f2 ff73 	bl	800e596 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 801b6b0:	f107 0308 	add.w	r3, r7, #8
 801b6b4:	6879      	ldr	r1, [r7, #4]
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f000 f841 	bl	801b73e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 801b6bc:	f107 0308 	add.w	r3, r7, #8
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	f7ef fda0 	bl	800b206 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 801b6c6:	687b      	ldr	r3, [r7, #4]
      }
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	3710      	adds	r7, #16
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	bd80      	pop	{r7, pc}

0801b6d0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801b6d0:	b480      	push	{r7}
 801b6d2:	b083      	sub	sp, #12
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
    { return __it; }
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	4618      	mov	r0, r3
 801b6dc:	370c      	adds	r7, #12
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e4:	4770      	bx	lr

0801b6e6 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801b6e6:	b5b0      	push	{r4, r5, r7, lr}
 801b6e8:	b084      	sub	sp, #16
 801b6ea:	af00      	add	r7, sp, #0
 801b6ec:	60f8      	str	r0, [r7, #12]
 801b6ee:	60b9      	str	r1, [r7, #8]
 801b6f0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801b6f2:	68f8      	ldr	r0, [r7, #12]
 801b6f4:	f000 f83a 	bl	801b76c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	68b8      	ldr	r0, [r7, #8]
 801b6fc:	f000 f836 	bl	801b76c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b700:	4605      	mov	r5, r0
 801b702:	6878      	ldr	r0, [r7, #4]
 801b704:	f000 f832 	bl	801b76c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b708:	4603      	mov	r3, r0
 801b70a:	461a      	mov	r2, r3
 801b70c:	4629      	mov	r1, r5
 801b70e:	4620      	mov	r0, r4
 801b710:	f000 f83a 	bl	801b788 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b714:	4603      	mov	r3, r0
 801b716:	4619      	mov	r1, r3
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	f000 f845 	bl	801b7a8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 801b71e:	4603      	mov	r3, r0
    }
 801b720:	4618      	mov	r0, r3
 801b722:	3710      	adds	r7, #16
 801b724:	46bd      	mov	sp, r7
 801b726:	bdb0      	pop	{r4, r5, r7, pc}

0801b728 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801b728:	b480      	push	{r7}
 801b72a:	b083      	sub	sp, #12
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	4618      	mov	r0, r3
 801b734:	370c      	adds	r7, #12
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr

0801b73e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 801b73e:	b580      	push	{r7, lr}
 801b740:	b082      	sub	sp, #8
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
 801b746:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	683a      	ldr	r2, [r7, #0]
 801b74c:	4611      	mov	r1, r2
 801b74e:	4618      	mov	r0, r3
 801b750:	f000 f841 	bl	801b7d6 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	1d1a      	adds	r2, r3, #4
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	3304      	adds	r3, #4
 801b75c:	4619      	mov	r1, r3
 801b75e:	4610      	mov	r0, r2
 801b760:	f7f2 f949 	bl	800d9f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 801b764:	bf00      	nop
 801b766:	3708      	adds	r7, #8
 801b768:	46bd      	mov	sp, r7
 801b76a:	bd80      	pop	{r7, pc}

0801b76c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801b76c:	b580      	push	{r7, lr}
 801b76e:	b082      	sub	sp, #8
 801b770:	af00      	add	r7, sp, #0
 801b772:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801b774:	1d3b      	adds	r3, r7, #4
 801b776:	4618      	mov	r0, r3
 801b778:	f7f1 fbf6 	bl	800cf68 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b77c:	4603      	mov	r3, r0
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	4618      	mov	r0, r3
 801b782:	3708      	adds	r7, #8
 801b784:	46bd      	mov	sp, r7
 801b786:	bd80      	pop	{r7, pc}

0801b788 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801b788:	b580      	push	{r7, lr}
 801b78a:	b084      	sub	sp, #16
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	60f8      	str	r0, [r7, #12]
 801b790:	60b9      	str	r1, [r7, #8]
 801b792:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801b794:	687a      	ldr	r2, [r7, #4]
 801b796:	68b9      	ldr	r1, [r7, #8]
 801b798:	68f8      	ldr	r0, [r7, #12]
 801b79a:	f000 f83b 	bl	801b814 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	3710      	adds	r7, #16
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	bd80      	pop	{r7, pc}

0801b7a8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
 801b7b0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801b7b2:	6878      	ldr	r0, [r7, #4]
 801b7b4:	f7ff ffda 	bl	801b76c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b7b8:	4602      	mov	r2, r0
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	1a9b      	subs	r3, r3, r2
 801b7be:	10db      	asrs	r3, r3, #3
 801b7c0:	461a      	mov	r2, r3
 801b7c2:	1d3b      	adds	r3, r7, #4
 801b7c4:	4611      	mov	r1, r2
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7ff fd78 	bl	801b2bc <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3708      	adds	r7, #8
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b084      	sub	sp, #16
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
 801b7de:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801b7e0:	6878      	ldr	r0, [r7, #4]
 801b7e2:	f000 f827 	bl	801b834 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801b7ec:	6838      	ldr	r0, [r7, #0]
 801b7ee:	f000 f821 	bl	801b834 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	681a      	ldr	r2, [r3, #0]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801b7fa:	f107 030c 	add.w	r3, r7, #12
 801b7fe:	4618      	mov	r0, r3
 801b800:	f000 f818 	bl	801b834 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b804:	4603      	mov	r3, r0
 801b806:	681a      	ldr	r2, [r3, #0]
 801b808:	683b      	ldr	r3, [r7, #0]
 801b80a:	601a      	str	r2, [r3, #0]
    }
 801b80c:	bf00      	nop
 801b80e:	3710      	adds	r7, #16
 801b810:	46bd      	mov	sp, r7
 801b812:	bd80      	pop	{r7, pc}

0801b814 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	60f8      	str	r0, [r7, #12]
 801b81c:	60b9      	str	r1, [r7, #8]
 801b81e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801b820:	687a      	ldr	r2, [r7, #4]
 801b822:	68b9      	ldr	r1, [r7, #8]
 801b824:	68f8      	ldr	r0, [r7, #12]
 801b826:	f000 f810 	bl	801b84a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 801b82a:	4603      	mov	r3, r0
    }
 801b82c:	4618      	mov	r0, r3
 801b82e:	3710      	adds	r7, #16
 801b830:	46bd      	mov	sp, r7
 801b832:	bd80      	pop	{r7, pc}

0801b834 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801b834:	b480      	push	{r7}
 801b836:	b083      	sub	sp, #12
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	4618      	mov	r0, r3
 801b840:	370c      	adds	r7, #12
 801b842:	46bd      	mov	sp, r7
 801b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b848:	4770      	bx	lr

0801b84a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801b84a:	b580      	push	{r7, lr}
 801b84c:	b086      	sub	sp, #24
 801b84e:	af00      	add	r7, sp, #0
 801b850:	60f8      	str	r0, [r7, #12]
 801b852:	60b9      	str	r1, [r7, #8]
 801b854:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b856:	68ba      	ldr	r2, [r7, #8]
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	1ad3      	subs	r3, r2, r3
 801b85c:	10db      	asrs	r3, r3, #3
 801b85e:	617b      	str	r3, [r7, #20]
 801b860:	e010      	b.n	801b884 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 801b862:	68f8      	ldr	r0, [r7, #12]
 801b864:	f7f0 ff22 	bl	800c6ac <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b868:	4603      	mov	r3, r0
 801b86a:	4619      	mov	r1, r3
 801b86c:	6878      	ldr	r0, [r7, #4]
 801b86e:	f7ff fe06 	bl	801b47e <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	3308      	adds	r3, #8
 801b876:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	3308      	adds	r3, #8
 801b87c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b87e:	697b      	ldr	r3, [r7, #20]
 801b880:	3b01      	subs	r3, #1
 801b882:	617b      	str	r3, [r7, #20]
 801b884:	697b      	ldr	r3, [r7, #20]
 801b886:	2b00      	cmp	r3, #0
 801b888:	dceb      	bgt.n	801b862 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 801b88a:	687b      	ldr	r3, [r7, #4]
	}
 801b88c:	4618      	mov	r0, r3
 801b88e:	3718      	adds	r7, #24
 801b890:	46bd      	mov	sp, r7
 801b892:	bd80      	pop	{r7, pc}

0801b894 <__NVIC_EnableIRQ>:
{
 801b894:	b480      	push	{r7}
 801b896:	b083      	sub	sp, #12
 801b898:	af00      	add	r7, sp, #0
 801b89a:	4603      	mov	r3, r0
 801b89c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b89e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	db0b      	blt.n	801b8be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b8a6:	88fb      	ldrh	r3, [r7, #6]
 801b8a8:	f003 021f 	and.w	r2, r3, #31
 801b8ac:	4907      	ldr	r1, [pc, #28]	@ (801b8cc <__NVIC_EnableIRQ+0x38>)
 801b8ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8b2:	095b      	lsrs	r3, r3, #5
 801b8b4:	2001      	movs	r0, #1
 801b8b6:	fa00 f202 	lsl.w	r2, r0, r2
 801b8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b8be:	bf00      	nop
 801b8c0:	370c      	adds	r7, #12
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8c8:	4770      	bx	lr
 801b8ca:	bf00      	nop
 801b8cc:	e000e100 	.word	0xe000e100

0801b8d0 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 801b8d0:	b590      	push	{r4, r7, lr}
 801b8d2:	b085      	sub	sp, #20
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	60f8      	str	r0, [r7, #12]
 801b8d8:	60b9      	str	r1, [r7, #8]
 801b8da:	603b      	str	r3, [r7, #0]
 801b8dc:	4613      	mov	r3, r2
 801b8de:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	68ba      	ldr	r2, [r7, #8]
 801b8e4:	605a      	str	r2, [r3, #4]
	irq(_irq),
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	88fa      	ldrh	r2, [r7, #6]
 801b8ea:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	683a      	ldr	r2, [r7, #0]
 801b8f0:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	6a3a      	ldr	r2, [r7, #32]
 801b8f6:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 801b8f8:	2008      	movs	r0, #8
 801b8fa:	f00c fec1 	bl	8028680 <_Znwj>
 801b8fe:	4603      	mov	r3, r0
 801b900:	461c      	mov	r4, r3
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b908:	68fa      	ldr	r2, [r7, #12]
 801b90a:	4619      	mov	r1, r3
 801b90c:	4620      	mov	r0, r4
 801b90e:	f000 f8af 	bl	801ba70 <_ZN14TimerInterruptC1EiP8pruTimer>
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	601c      	str	r4, [r3, #0]

	startTimer();
 801b916:	68f8      	ldr	r0, [r7, #12]
 801b918:	f000 f812 	bl	801b940 <_ZN8pruTimer10startTimerEv>
}
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	4618      	mov	r0, r3
 801b920:	3714      	adds	r7, #20
 801b922:	46bd      	mov	sp, r7
 801b924:	bd90      	pop	{r4, r7, pc}

0801b926 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 801b926:	b580      	push	{r7, lr}
 801b928:	b082      	sub	sp, #8
 801b92a:	af00      	add	r7, sp, #0
 801b92c:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	691b      	ldr	r3, [r3, #16]
 801b932:	4618      	mov	r0, r3
 801b934:	f7ff fac9 	bl	801aeca <_ZN9pruThread6updateEv>
}
 801b938:	bf00      	nop
 801b93a:	3708      	adds	r7, #8
 801b93c:	46bd      	mov	sp, r7
 801b93e:	bd80      	pop	{r7, pc}

0801b940 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b086      	sub	sp, #24
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b950:	d116      	bne.n	801b980 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801b952:	483f      	ldr	r0, [pc, #252]	@ (801ba50 <_ZN8pruTimer10startTimerEv+0x110>)
 801b954:	f00d fd3e 	bl	80293d4 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 801b958:	4b3e      	ldr	r3, [pc, #248]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b95a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b95e:	4a3d      	ldr	r2, [pc, #244]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b960:	f043 0301 	orr.w	r3, r3, #1
 801b964:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b968:	4b3a      	ldr	r3, [pc, #232]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b96a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b96e:	f003 0301 	and.w	r3, r3, #1
 801b972:	613b      	str	r3, [r7, #16]
 801b974:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 801b976:	4b38      	ldr	r3, [pc, #224]	@ (801ba58 <_ZN8pruTimer10startTimerEv+0x118>)
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	085b      	lsrs	r3, r3, #1
 801b97c:	617b      	str	r3, [r7, #20]
 801b97e:	e036      	b.n	801b9ee <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	685b      	ldr	r3, [r3, #4]
 801b984:	4a35      	ldr	r2, [pc, #212]	@ (801ba5c <_ZN8pruTimer10startTimerEv+0x11c>)
 801b986:	4293      	cmp	r3, r2
 801b988:	d116      	bne.n	801b9b8 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 801b98a:	4835      	ldr	r0, [pc, #212]	@ (801ba60 <_ZN8pruTimer10startTimerEv+0x120>)
 801b98c:	f00d fd22 	bl	80293d4 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 801b990:	4b30      	ldr	r3, [pc, #192]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b996:	4a2f      	ldr	r2, [pc, #188]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b998:	f043 0302 	orr.w	r3, r3, #2
 801b99c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b9a0:	4b2c      	ldr	r3, [pc, #176]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9a6:	f003 0302 	and.w	r3, r3, #2
 801b9aa:	60fb      	str	r3, [r7, #12]
 801b9ac:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801b9ae:	4b2a      	ldr	r3, [pc, #168]	@ (801ba58 <_ZN8pruTimer10startTimerEv+0x118>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	085b      	lsrs	r3, r3, #1
 801b9b4:	617b      	str	r3, [r7, #20]
 801b9b6:	e01a      	b.n	801b9ee <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	685b      	ldr	r3, [r3, #4]
 801b9bc:	4a29      	ldr	r2, [pc, #164]	@ (801ba64 <_ZN8pruTimer10startTimerEv+0x124>)
 801b9be:	4293      	cmp	r3, r2
 801b9c0:	d115      	bne.n	801b9ee <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801b9c2:	4829      	ldr	r0, [pc, #164]	@ (801ba68 <_ZN8pruTimer10startTimerEv+0x128>)
 801b9c4:	f00d fd06 	bl	80293d4 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 801b9c8:	4b22      	ldr	r3, [pc, #136]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9ce:	4a21      	ldr	r2, [pc, #132]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9d0:	f043 0304 	orr.w	r3, r3, #4
 801b9d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b9d8:	4b1e      	ldr	r3, [pc, #120]	@ (801ba54 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9de:	f003 0304 	and.w	r3, r3, #4
 801b9e2:	60bb      	str	r3, [r7, #8]
 801b9e4:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 801b9e6:	4b1c      	ldr	r3, [pc, #112]	@ (801ba58 <_ZN8pruTimer10startTimerEv+0x118>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	085b      	lsrs	r3, r3, #1
 801b9ec:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	685b      	ldr	r3, [r3, #4]
 801b9f2:	685b      	ldr	r3, [r3, #4]
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	685b      	ldr	r3, [r3, #4]
 801ba00:	2200      	movs	r2, #0
 801ba02:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	68db      	ldr	r3, [r3, #12]
 801ba08:	697a      	ldr	r2, [r7, #20]
 801ba0a:	fbb2 f2f3 	udiv	r2, r2, r3
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	685b      	ldr	r3, [r3, #4]
 801ba12:	3a01      	subs	r2, #1
 801ba14:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	685b      	ldr	r3, [r3, #4]
 801ba1a:	2201      	movs	r2, #1
 801ba1c:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	2201      	movs	r2, #1
 801ba24:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	685b      	ldr	r3, [r3, #4]
 801ba2a:	681a      	ldr	r2, [r3, #0]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	f042 0201 	orr.w	r2, r2, #1
 801ba34:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	f7ff ff29 	bl	801b894 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801ba42:	480a      	ldr	r0, [pc, #40]	@ (801ba6c <_ZN8pruTimer10startTimerEv+0x12c>)
 801ba44:	f00d fd36 	bl	80294b4 <puts>
}
 801ba48:	bf00      	nop
 801ba4a:	3718      	adds	r7, #24
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	bd80      	pop	{r7, pc}
 801ba50:	0802b094 	.word	0x0802b094
 801ba54:	58024400 	.word	0x58024400
 801ba58:	2400001c 	.word	0x2400001c
 801ba5c:	40000400 	.word	0x40000400
 801ba60:	0802b0a8 	.word	0x0802b0a8
 801ba64:	40000800 	.word	0x40000800
 801ba68:	0802b0bc 	.word	0x0802b0bc
 801ba6c:	0802b0d0 	.word	0x0802b0d0

0801ba70 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b084      	sub	sp, #16
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	60f8      	str	r0, [r7, #12]
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	4618      	mov	r0, r3
 801ba80:	f7e9 fab2 	bl	8004fe8 <_ZN9InterruptC1Ev>
 801ba84:	4a07      	ldr	r2, [pc, #28]	@ (801baa4 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	687a      	ldr	r2, [r7, #4]
 801ba8e:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	4619      	mov	r1, r3
 801ba94:	68b8      	ldr	r0, [r7, #8]
 801ba96:	f7e9 fab7 	bl	8005008 <_ZN9Interrupt8RegisterEiPS_>
}
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	3710      	adds	r7, #16
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}
 801baa4:	0802b6fc 	.word	0x0802b6fc

0801baa8 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b082      	sub	sp, #8
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	685b      	ldr	r3, [r3, #4]
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7ff ff36 	bl	801b926 <_ZN8pruTimer9timerTickEv>
}
 801baba:	bf00      	nop
 801babc:	3708      	adds	r7, #8
 801babe:	46bd      	mov	sp, r7
 801bac0:	bd80      	pop	{r7, pc}
	...

0801bac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801bac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801bafc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801bac8:	f7f3 fb1a 	bl	800f100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801bacc:	480c      	ldr	r0, [pc, #48]	@ (801bb00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801bace:	490d      	ldr	r1, [pc, #52]	@ (801bb04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801bad0:	4a0d      	ldr	r2, [pc, #52]	@ (801bb08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801bad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801bad4:	e002      	b.n	801badc <LoopCopyDataInit>

0801bad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801bad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801bad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801bada:	3304      	adds	r3, #4

0801badc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801badc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801bade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801bae0:	d3f9      	bcc.n	801bad6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801bae2:	4a0a      	ldr	r2, [pc, #40]	@ (801bb0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801bae4:	4c0a      	ldr	r4, [pc, #40]	@ (801bb10 <LoopFillZerobss+0x22>)
  movs r3, #0
 801bae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 801bae8:	e001      	b.n	801baee <LoopFillZerobss>

0801baea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801baea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801baec:	3204      	adds	r2, #4

0801baee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801baee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801baf0:	d3fb      	bcc.n	801baea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801baf2:	f00d fe91 	bl	8029818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801baf6:	f7ee fcdd 	bl	800a4b4 <main>
  bx  lr
 801bafa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801bafc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801bb00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801bb04:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 801bb08:	0802bacc 	.word	0x0802bacc
  ldr r2, =_sbss
 801bb0c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801bb10:	24000c10 	.word	0x24000c10

0801bb14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801bb14:	e7fe      	b.n	801bb14 <ADC3_IRQHandler>
	...

0801bb18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b082      	sub	sp, #8
 801bb1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bb1e:	2003      	movs	r0, #3
 801bb20:	f000 f9a2 	bl	801be68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801bb24:	f003 fdc8 	bl	801f6b8 <HAL_RCC_GetSysClockFreq>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	4b15      	ldr	r3, [pc, #84]	@ (801bb80 <HAL_Init+0x68>)
 801bb2c:	699b      	ldr	r3, [r3, #24]
 801bb2e:	0a1b      	lsrs	r3, r3, #8
 801bb30:	f003 030f 	and.w	r3, r3, #15
 801bb34:	4913      	ldr	r1, [pc, #76]	@ (801bb84 <HAL_Init+0x6c>)
 801bb36:	5ccb      	ldrb	r3, [r1, r3]
 801bb38:	f003 031f 	and.w	r3, r3, #31
 801bb3c:	fa22 f303 	lsr.w	r3, r2, r3
 801bb40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bb42:	4b0f      	ldr	r3, [pc, #60]	@ (801bb80 <HAL_Init+0x68>)
 801bb44:	699b      	ldr	r3, [r3, #24]
 801bb46:	f003 030f 	and.w	r3, r3, #15
 801bb4a:	4a0e      	ldr	r2, [pc, #56]	@ (801bb84 <HAL_Init+0x6c>)
 801bb4c:	5cd3      	ldrb	r3, [r2, r3]
 801bb4e:	f003 031f 	and.w	r3, r3, #31
 801bb52:	687a      	ldr	r2, [r7, #4]
 801bb54:	fa22 f303 	lsr.w	r3, r2, r3
 801bb58:	4a0b      	ldr	r2, [pc, #44]	@ (801bb88 <HAL_Init+0x70>)
 801bb5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bb5c:	4a0b      	ldr	r2, [pc, #44]	@ (801bb8c <HAL_Init+0x74>)
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801bb62:	200f      	movs	r0, #15
 801bb64:	f000 f814 	bl	801bb90 <HAL_InitTick>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d001      	beq.n	801bb72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801bb6e:	2301      	movs	r3, #1
 801bb70:	e002      	b.n	801bb78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801bb72:	f7f3 f8ab 	bl	800eccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bb76:	2300      	movs	r3, #0
}
 801bb78:	4618      	mov	r0, r3
 801bb7a:	3708      	adds	r7, #8
 801bb7c:	46bd      	mov	sp, r7
 801bb7e:	bd80      	pop	{r7, pc}
 801bb80:	58024400 	.word	0x58024400
 801bb84:	0802b438 	.word	0x0802b438
 801bb88:	24000020 	.word	0x24000020
 801bb8c:	2400001c 	.word	0x2400001c

0801bb90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b082      	sub	sp, #8
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801bb98:	4b15      	ldr	r3, [pc, #84]	@ (801bbf0 <HAL_InitTick+0x60>)
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d101      	bne.n	801bba4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801bba0:	2301      	movs	r3, #1
 801bba2:	e021      	b.n	801bbe8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801bba4:	4b13      	ldr	r3, [pc, #76]	@ (801bbf4 <HAL_InitTick+0x64>)
 801bba6:	681a      	ldr	r2, [r3, #0]
 801bba8:	4b11      	ldr	r3, [pc, #68]	@ (801bbf0 <HAL_InitTick+0x60>)
 801bbaa:	781b      	ldrb	r3, [r3, #0]
 801bbac:	4619      	mov	r1, r3
 801bbae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bbb2:	fbb3 f3f1 	udiv	r3, r3, r1
 801bbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f000 f98b 	bl	801bed6 <HAL_SYSTICK_Config>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d001      	beq.n	801bbca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e00e      	b.n	801bbe8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	2b0f      	cmp	r3, #15
 801bbce:	d80a      	bhi.n	801bbe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	6879      	ldr	r1, [r7, #4]
 801bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 801bbd8:	f000 f951 	bl	801be7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bbdc:	4a06      	ldr	r2, [pc, #24]	@ (801bbf8 <HAL_InitTick+0x68>)
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	e000      	b.n	801bbe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801bbe6:	2301      	movs	r3, #1
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3708      	adds	r7, #8
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}
 801bbf0:	24000028 	.word	0x24000028
 801bbf4:	2400001c 	.word	0x2400001c
 801bbf8:	24000024 	.word	0x24000024

0801bbfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bbfc:	b480      	push	{r7}
 801bbfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801bc00:	4b06      	ldr	r3, [pc, #24]	@ (801bc1c <HAL_IncTick+0x20>)
 801bc02:	781b      	ldrb	r3, [r3, #0]
 801bc04:	461a      	mov	r2, r3
 801bc06:	4b06      	ldr	r3, [pc, #24]	@ (801bc20 <HAL_IncTick+0x24>)
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	4413      	add	r3, r2
 801bc0c:	4a04      	ldr	r2, [pc, #16]	@ (801bc20 <HAL_IncTick+0x24>)
 801bc0e:	6013      	str	r3, [r2, #0]
}
 801bc10:	bf00      	nop
 801bc12:	46bd      	mov	sp, r7
 801bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc18:	4770      	bx	lr
 801bc1a:	bf00      	nop
 801bc1c:	24000028 	.word	0x24000028
 801bc20:	24000418 	.word	0x24000418

0801bc24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bc24:	b480      	push	{r7}
 801bc26:	af00      	add	r7, sp, #0
  return uwTick;
 801bc28:	4b03      	ldr	r3, [pc, #12]	@ (801bc38 <HAL_GetTick+0x14>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
}
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	46bd      	mov	sp, r7
 801bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc34:	4770      	bx	lr
 801bc36:	bf00      	nop
 801bc38:	24000418 	.word	0x24000418

0801bc3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b084      	sub	sp, #16
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801bc44:	f7ff ffee 	bl	801bc24 <HAL_GetTick>
 801bc48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc54:	d005      	beq.n	801bc62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801bc56:	4b0a      	ldr	r3, [pc, #40]	@ (801bc80 <HAL_Delay+0x44>)
 801bc58:	781b      	ldrb	r3, [r3, #0]
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	4413      	add	r3, r2
 801bc60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801bc62:	bf00      	nop
 801bc64:	f7ff ffde 	bl	801bc24 <HAL_GetTick>
 801bc68:	4602      	mov	r2, r0
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	1ad3      	subs	r3, r2, r3
 801bc6e:	68fa      	ldr	r2, [r7, #12]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	d8f7      	bhi.n	801bc64 <HAL_Delay+0x28>
  {
  }
}
 801bc74:	bf00      	nop
 801bc76:	bf00      	nop
 801bc78:	3710      	adds	r7, #16
 801bc7a:	46bd      	mov	sp, r7
 801bc7c:	bd80      	pop	{r7, pc}
 801bc7e:	bf00      	nop
 801bc80:	24000028 	.word	0x24000028

0801bc84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801bc84:	b480      	push	{r7}
 801bc86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801bc88:	4b03      	ldr	r3, [pc, #12]	@ (801bc98 <HAL_GetREVID+0x14>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	0c1b      	lsrs	r3, r3, #16
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	46bd      	mov	sp, r7
 801bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc96:	4770      	bx	lr
 801bc98:	5c001000 	.word	0x5c001000

0801bc9c <__NVIC_SetPriorityGrouping>:
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	b085      	sub	sp, #20
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	f003 0307 	and.w	r3, r3, #7
 801bcaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bcac:	4b0b      	ldr	r3, [pc, #44]	@ (801bcdc <__NVIC_SetPriorityGrouping+0x40>)
 801bcae:	68db      	ldr	r3, [r3, #12]
 801bcb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bcb2:	68ba      	ldr	r2, [r7, #8]
 801bcb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801bcb8:	4013      	ands	r3, r2
 801bcba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bcc0:	68bb      	ldr	r3, [r7, #8]
 801bcc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801bcc4:	4b06      	ldr	r3, [pc, #24]	@ (801bce0 <__NVIC_SetPriorityGrouping+0x44>)
 801bcc6:	4313      	orrs	r3, r2
 801bcc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bcca:	4a04      	ldr	r2, [pc, #16]	@ (801bcdc <__NVIC_SetPriorityGrouping+0x40>)
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	60d3      	str	r3, [r2, #12]
}
 801bcd0:	bf00      	nop
 801bcd2:	3714      	adds	r7, #20
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcda:	4770      	bx	lr
 801bcdc:	e000ed00 	.word	0xe000ed00
 801bce0:	05fa0000 	.word	0x05fa0000

0801bce4 <__NVIC_GetPriorityGrouping>:
{
 801bce4:	b480      	push	{r7}
 801bce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bce8:	4b04      	ldr	r3, [pc, #16]	@ (801bcfc <__NVIC_GetPriorityGrouping+0x18>)
 801bcea:	68db      	ldr	r3, [r3, #12]
 801bcec:	0a1b      	lsrs	r3, r3, #8
 801bcee:	f003 0307 	and.w	r3, r3, #7
}
 801bcf2:	4618      	mov	r0, r3
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcfa:	4770      	bx	lr
 801bcfc:	e000ed00 	.word	0xe000ed00

0801bd00 <__NVIC_EnableIRQ>:
{
 801bd00:	b480      	push	{r7}
 801bd02:	b083      	sub	sp, #12
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	4603      	mov	r3, r0
 801bd08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bd0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	db0b      	blt.n	801bd2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bd12:	88fb      	ldrh	r3, [r7, #6]
 801bd14:	f003 021f 	and.w	r2, r3, #31
 801bd18:	4907      	ldr	r1, [pc, #28]	@ (801bd38 <__NVIC_EnableIRQ+0x38>)
 801bd1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd1e:	095b      	lsrs	r3, r3, #5
 801bd20:	2001      	movs	r0, #1
 801bd22:	fa00 f202 	lsl.w	r2, r0, r2
 801bd26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801bd2a:	bf00      	nop
 801bd2c:	370c      	adds	r7, #12
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd34:	4770      	bx	lr
 801bd36:	bf00      	nop
 801bd38:	e000e100 	.word	0xe000e100

0801bd3c <__NVIC_SetPriority>:
{
 801bd3c:	b480      	push	{r7}
 801bd3e:	b083      	sub	sp, #12
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	4603      	mov	r3, r0
 801bd44:	6039      	str	r1, [r7, #0]
 801bd46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bd48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	db0a      	blt.n	801bd66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bd50:	683b      	ldr	r3, [r7, #0]
 801bd52:	b2da      	uxtb	r2, r3
 801bd54:	490c      	ldr	r1, [pc, #48]	@ (801bd88 <__NVIC_SetPriority+0x4c>)
 801bd56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd5a:	0112      	lsls	r2, r2, #4
 801bd5c:	b2d2      	uxtb	r2, r2
 801bd5e:	440b      	add	r3, r1
 801bd60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801bd64:	e00a      	b.n	801bd7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bd66:	683b      	ldr	r3, [r7, #0]
 801bd68:	b2da      	uxtb	r2, r3
 801bd6a:	4908      	ldr	r1, [pc, #32]	@ (801bd8c <__NVIC_SetPriority+0x50>)
 801bd6c:	88fb      	ldrh	r3, [r7, #6]
 801bd6e:	f003 030f 	and.w	r3, r3, #15
 801bd72:	3b04      	subs	r3, #4
 801bd74:	0112      	lsls	r2, r2, #4
 801bd76:	b2d2      	uxtb	r2, r2
 801bd78:	440b      	add	r3, r1
 801bd7a:	761a      	strb	r2, [r3, #24]
}
 801bd7c:	bf00      	nop
 801bd7e:	370c      	adds	r7, #12
 801bd80:	46bd      	mov	sp, r7
 801bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd86:	4770      	bx	lr
 801bd88:	e000e100 	.word	0xe000e100
 801bd8c:	e000ed00 	.word	0xe000ed00

0801bd90 <NVIC_EncodePriority>:
{
 801bd90:	b480      	push	{r7}
 801bd92:	b089      	sub	sp, #36	@ 0x24
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	60f8      	str	r0, [r7, #12]
 801bd98:	60b9      	str	r1, [r7, #8]
 801bd9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	f003 0307 	and.w	r3, r3, #7
 801bda2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bda4:	69fb      	ldr	r3, [r7, #28]
 801bda6:	f1c3 0307 	rsb	r3, r3, #7
 801bdaa:	2b04      	cmp	r3, #4
 801bdac:	bf28      	it	cs
 801bdae:	2304      	movcs	r3, #4
 801bdb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bdb2:	69fb      	ldr	r3, [r7, #28]
 801bdb4:	3304      	adds	r3, #4
 801bdb6:	2b06      	cmp	r3, #6
 801bdb8:	d902      	bls.n	801bdc0 <NVIC_EncodePriority+0x30>
 801bdba:	69fb      	ldr	r3, [r7, #28]
 801bdbc:	3b03      	subs	r3, #3
 801bdbe:	e000      	b.n	801bdc2 <NVIC_EncodePriority+0x32>
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bdc4:	f04f 32ff 	mov.w	r2, #4294967295
 801bdc8:	69bb      	ldr	r3, [r7, #24]
 801bdca:	fa02 f303 	lsl.w	r3, r2, r3
 801bdce:	43da      	mvns	r2, r3
 801bdd0:	68bb      	ldr	r3, [r7, #8]
 801bdd2:	401a      	ands	r2, r3
 801bdd4:	697b      	ldr	r3, [r7, #20]
 801bdd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bdd8:	f04f 31ff 	mov.w	r1, #4294967295
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	fa01 f303 	lsl.w	r3, r1, r3
 801bde2:	43d9      	mvns	r1, r3
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bde8:	4313      	orrs	r3, r2
}
 801bdea:	4618      	mov	r0, r3
 801bdec:	3724      	adds	r7, #36	@ 0x24
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf4:	4770      	bx	lr
	...

0801bdf8 <__NVIC_SystemReset>:
{
 801bdf8:	b480      	push	{r7}
 801bdfa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801bdfc:	f3bf 8f4f 	dsb	sy
}
 801be00:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801be02:	4b06      	ldr	r3, [pc, #24]	@ (801be1c <__NVIC_SystemReset+0x24>)
 801be04:	68db      	ldr	r3, [r3, #12]
 801be06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801be0a:	4904      	ldr	r1, [pc, #16]	@ (801be1c <__NVIC_SystemReset+0x24>)
 801be0c:	4b04      	ldr	r3, [pc, #16]	@ (801be20 <__NVIC_SystemReset+0x28>)
 801be0e:	4313      	orrs	r3, r2
 801be10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801be12:	f3bf 8f4f 	dsb	sy
}
 801be16:	bf00      	nop
    __NOP();
 801be18:	bf00      	nop
 801be1a:	e7fd      	b.n	801be18 <__NVIC_SystemReset+0x20>
 801be1c:	e000ed00 	.word	0xe000ed00
 801be20:	05fa0004 	.word	0x05fa0004

0801be24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801be24:	b580      	push	{r7, lr}
 801be26:	b082      	sub	sp, #8
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	3b01      	subs	r3, #1
 801be30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801be34:	d301      	bcc.n	801be3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801be36:	2301      	movs	r3, #1
 801be38:	e00f      	b.n	801be5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801be3a:	4a0a      	ldr	r2, [pc, #40]	@ (801be64 <SysTick_Config+0x40>)
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	3b01      	subs	r3, #1
 801be40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801be42:	210f      	movs	r1, #15
 801be44:	f04f 30ff 	mov.w	r0, #4294967295
 801be48:	f7ff ff78 	bl	801bd3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801be4c:	4b05      	ldr	r3, [pc, #20]	@ (801be64 <SysTick_Config+0x40>)
 801be4e:	2200      	movs	r2, #0
 801be50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801be52:	4b04      	ldr	r3, [pc, #16]	@ (801be64 <SysTick_Config+0x40>)
 801be54:	2207      	movs	r2, #7
 801be56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801be58:	2300      	movs	r3, #0
}
 801be5a:	4618      	mov	r0, r3
 801be5c:	3708      	adds	r7, #8
 801be5e:	46bd      	mov	sp, r7
 801be60:	bd80      	pop	{r7, pc}
 801be62:	bf00      	nop
 801be64:	e000e010 	.word	0xe000e010

0801be68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b082      	sub	sp, #8
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801be70:	6878      	ldr	r0, [r7, #4]
 801be72:	f7ff ff13 	bl	801bc9c <__NVIC_SetPriorityGrouping>
}
 801be76:	bf00      	nop
 801be78:	3708      	adds	r7, #8
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bd80      	pop	{r7, pc}

0801be7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801be7e:	b580      	push	{r7, lr}
 801be80:	b086      	sub	sp, #24
 801be82:	af00      	add	r7, sp, #0
 801be84:	4603      	mov	r3, r0
 801be86:	60b9      	str	r1, [r7, #8]
 801be88:	607a      	str	r2, [r7, #4]
 801be8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801be8c:	f7ff ff2a 	bl	801bce4 <__NVIC_GetPriorityGrouping>
 801be90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	68b9      	ldr	r1, [r7, #8]
 801be96:	6978      	ldr	r0, [r7, #20]
 801be98:	f7ff ff7a 	bl	801bd90 <NVIC_EncodePriority>
 801be9c:	4602      	mov	r2, r0
 801be9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bea2:	4611      	mov	r1, r2
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7ff ff49 	bl	801bd3c <__NVIC_SetPriority>
}
 801beaa:	bf00      	nop
 801beac:	3718      	adds	r7, #24
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}

0801beb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801beb2:	b580      	push	{r7, lr}
 801beb4:	b082      	sub	sp, #8
 801beb6:	af00      	add	r7, sp, #0
 801beb8:	4603      	mov	r3, r0
 801beba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7ff ff1d 	bl	801bd00 <__NVIC_EnableIRQ>
}
 801bec6:	bf00      	nop
 801bec8:	3708      	adds	r7, #8
 801beca:	46bd      	mov	sp, r7
 801becc:	bd80      	pop	{r7, pc}

0801bece <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801bece:	b580      	push	{r7, lr}
 801bed0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801bed2:	f7ff ff91 	bl	801bdf8 <__NVIC_SystemReset>

0801bed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bed6:	b580      	push	{r7, lr}
 801bed8:	b082      	sub	sp, #8
 801beda:	af00      	add	r7, sp, #0
 801bedc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bede:	6878      	ldr	r0, [r7, #4]
 801bee0:	f7ff ffa0 	bl	801be24 <SysTick_Config>
 801bee4:	4603      	mov	r3, r0
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	3708      	adds	r7, #8
 801beea:	46bd      	mov	sp, r7
 801beec:	bd80      	pop	{r7, pc}
	...

0801bef0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801bef0:	b480      	push	{r7}
 801bef2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801bef4:	f3bf 8f5f 	dmb	sy
}
 801bef8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801befa:	4b07      	ldr	r3, [pc, #28]	@ (801bf18 <HAL_MPU_Disable+0x28>)
 801befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801befe:	4a06      	ldr	r2, [pc, #24]	@ (801bf18 <HAL_MPU_Disable+0x28>)
 801bf00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bf04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801bf06:	4b05      	ldr	r3, [pc, #20]	@ (801bf1c <HAL_MPU_Disable+0x2c>)
 801bf08:	2200      	movs	r2, #0
 801bf0a:	605a      	str	r2, [r3, #4]
}
 801bf0c:	bf00      	nop
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf14:	4770      	bx	lr
 801bf16:	bf00      	nop
 801bf18:	e000ed00 	.word	0xe000ed00
 801bf1c:	e000ed90 	.word	0xe000ed90

0801bf20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801bf20:	b480      	push	{r7}
 801bf22:	b083      	sub	sp, #12
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801bf28:	4a0b      	ldr	r2, [pc, #44]	@ (801bf58 <HAL_MPU_Enable+0x38>)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	f043 0301 	orr.w	r3, r3, #1
 801bf30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801bf32:	4b0a      	ldr	r3, [pc, #40]	@ (801bf5c <HAL_MPU_Enable+0x3c>)
 801bf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf36:	4a09      	ldr	r2, [pc, #36]	@ (801bf5c <HAL_MPU_Enable+0x3c>)
 801bf38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bf3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801bf3e:	f3bf 8f4f 	dsb	sy
}
 801bf42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801bf44:	f3bf 8f6f 	isb	sy
}
 801bf48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801bf4a:	bf00      	nop
 801bf4c:	370c      	adds	r7, #12
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	e000ed90 	.word	0xe000ed90
 801bf5c:	e000ed00 	.word	0xe000ed00

0801bf60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801bf60:	b480      	push	{r7}
 801bf62:	b083      	sub	sp, #12
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	785a      	ldrb	r2, [r3, #1]
 801bf6c:	4b1b      	ldr	r3, [pc, #108]	@ (801bfdc <HAL_MPU_ConfigRegion+0x7c>)
 801bf6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801bf70:	4b1a      	ldr	r3, [pc, #104]	@ (801bfdc <HAL_MPU_ConfigRegion+0x7c>)
 801bf72:	691b      	ldr	r3, [r3, #16]
 801bf74:	4a19      	ldr	r2, [pc, #100]	@ (801bfdc <HAL_MPU_ConfigRegion+0x7c>)
 801bf76:	f023 0301 	bic.w	r3, r3, #1
 801bf7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801bf7c:	4a17      	ldr	r2, [pc, #92]	@ (801bfdc <HAL_MPU_ConfigRegion+0x7c>)
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	685b      	ldr	r3, [r3, #4]
 801bf82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	7b1b      	ldrb	r3, [r3, #12]
 801bf88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	7adb      	ldrb	r3, [r3, #11]
 801bf8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bf90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	7a9b      	ldrb	r3, [r3, #10]
 801bf96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801bf98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	7b5b      	ldrb	r3, [r3, #13]
 801bf9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801bfa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	7b9b      	ldrb	r3, [r3, #14]
 801bfa6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801bfa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	7bdb      	ldrb	r3, [r3, #15]
 801bfae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801bfb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	7a5b      	ldrb	r3, [r3, #9]
 801bfb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801bfb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	7a1b      	ldrb	r3, [r3, #8]
 801bfbe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801bfc0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801bfc2:	687a      	ldr	r2, [r7, #4]
 801bfc4:	7812      	ldrb	r2, [r2, #0]
 801bfc6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bfc8:	4a04      	ldr	r2, [pc, #16]	@ (801bfdc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801bfca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bfcc:	6113      	str	r3, [r2, #16]
}
 801bfce:	bf00      	nop
 801bfd0:	370c      	adds	r7, #12
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd8:	4770      	bx	lr
 801bfda:	bf00      	nop
 801bfdc:	e000ed90 	.word	0xe000ed90

0801bfe0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b086      	sub	sp, #24
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801bfe8:	f7ff fe1c 	bl	801bc24 <HAL_GetTick>
 801bfec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d101      	bne.n	801bff8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801bff4:	2301      	movs	r3, #1
 801bff6:	e316      	b.n	801c626 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	4a66      	ldr	r2, [pc, #408]	@ (801c198 <HAL_DMA_Init+0x1b8>)
 801bffe:	4293      	cmp	r3, r2
 801c000:	d04a      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	4a65      	ldr	r2, [pc, #404]	@ (801c19c <HAL_DMA_Init+0x1bc>)
 801c008:	4293      	cmp	r3, r2
 801c00a:	d045      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	4a63      	ldr	r2, [pc, #396]	@ (801c1a0 <HAL_DMA_Init+0x1c0>)
 801c012:	4293      	cmp	r3, r2
 801c014:	d040      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	4a62      	ldr	r2, [pc, #392]	@ (801c1a4 <HAL_DMA_Init+0x1c4>)
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d03b      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a60      	ldr	r2, [pc, #384]	@ (801c1a8 <HAL_DMA_Init+0x1c8>)
 801c026:	4293      	cmp	r3, r2
 801c028:	d036      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	4a5f      	ldr	r2, [pc, #380]	@ (801c1ac <HAL_DMA_Init+0x1cc>)
 801c030:	4293      	cmp	r3, r2
 801c032:	d031      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	4a5d      	ldr	r2, [pc, #372]	@ (801c1b0 <HAL_DMA_Init+0x1d0>)
 801c03a:	4293      	cmp	r3, r2
 801c03c:	d02c      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	4a5c      	ldr	r2, [pc, #368]	@ (801c1b4 <HAL_DMA_Init+0x1d4>)
 801c044:	4293      	cmp	r3, r2
 801c046:	d027      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	4a5a      	ldr	r2, [pc, #360]	@ (801c1b8 <HAL_DMA_Init+0x1d8>)
 801c04e:	4293      	cmp	r3, r2
 801c050:	d022      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	4a59      	ldr	r2, [pc, #356]	@ (801c1bc <HAL_DMA_Init+0x1dc>)
 801c058:	4293      	cmp	r3, r2
 801c05a:	d01d      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	4a57      	ldr	r2, [pc, #348]	@ (801c1c0 <HAL_DMA_Init+0x1e0>)
 801c062:	4293      	cmp	r3, r2
 801c064:	d018      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	4a56      	ldr	r2, [pc, #344]	@ (801c1c4 <HAL_DMA_Init+0x1e4>)
 801c06c:	4293      	cmp	r3, r2
 801c06e:	d013      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4a54      	ldr	r2, [pc, #336]	@ (801c1c8 <HAL_DMA_Init+0x1e8>)
 801c076:	4293      	cmp	r3, r2
 801c078:	d00e      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	4a53      	ldr	r2, [pc, #332]	@ (801c1cc <HAL_DMA_Init+0x1ec>)
 801c080:	4293      	cmp	r3, r2
 801c082:	d009      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	4a51      	ldr	r2, [pc, #324]	@ (801c1d0 <HAL_DMA_Init+0x1f0>)
 801c08a:	4293      	cmp	r3, r2
 801c08c:	d004      	beq.n	801c098 <HAL_DMA_Init+0xb8>
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	4a50      	ldr	r2, [pc, #320]	@ (801c1d4 <HAL_DMA_Init+0x1f4>)
 801c094:	4293      	cmp	r3, r2
 801c096:	d101      	bne.n	801c09c <HAL_DMA_Init+0xbc>
 801c098:	2301      	movs	r3, #1
 801c09a:	e000      	b.n	801c09e <HAL_DMA_Init+0xbe>
 801c09c:	2300      	movs	r3, #0
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	f000 813b 	beq.w	801c31a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2202      	movs	r2, #2
 801c0a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	4a37      	ldr	r2, [pc, #220]	@ (801c198 <HAL_DMA_Init+0x1b8>)
 801c0ba:	4293      	cmp	r3, r2
 801c0bc:	d04a      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	4a36      	ldr	r2, [pc, #216]	@ (801c19c <HAL_DMA_Init+0x1bc>)
 801c0c4:	4293      	cmp	r3, r2
 801c0c6:	d045      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	4a34      	ldr	r2, [pc, #208]	@ (801c1a0 <HAL_DMA_Init+0x1c0>)
 801c0ce:	4293      	cmp	r3, r2
 801c0d0:	d040      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	4a33      	ldr	r2, [pc, #204]	@ (801c1a4 <HAL_DMA_Init+0x1c4>)
 801c0d8:	4293      	cmp	r3, r2
 801c0da:	d03b      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	4a31      	ldr	r2, [pc, #196]	@ (801c1a8 <HAL_DMA_Init+0x1c8>)
 801c0e2:	4293      	cmp	r3, r2
 801c0e4:	d036      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	4a30      	ldr	r2, [pc, #192]	@ (801c1ac <HAL_DMA_Init+0x1cc>)
 801c0ec:	4293      	cmp	r3, r2
 801c0ee:	d031      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	4a2e      	ldr	r2, [pc, #184]	@ (801c1b0 <HAL_DMA_Init+0x1d0>)
 801c0f6:	4293      	cmp	r3, r2
 801c0f8:	d02c      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	4a2d      	ldr	r2, [pc, #180]	@ (801c1b4 <HAL_DMA_Init+0x1d4>)
 801c100:	4293      	cmp	r3, r2
 801c102:	d027      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	4a2b      	ldr	r2, [pc, #172]	@ (801c1b8 <HAL_DMA_Init+0x1d8>)
 801c10a:	4293      	cmp	r3, r2
 801c10c:	d022      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	4a2a      	ldr	r2, [pc, #168]	@ (801c1bc <HAL_DMA_Init+0x1dc>)
 801c114:	4293      	cmp	r3, r2
 801c116:	d01d      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	4a28      	ldr	r2, [pc, #160]	@ (801c1c0 <HAL_DMA_Init+0x1e0>)
 801c11e:	4293      	cmp	r3, r2
 801c120:	d018      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	4a27      	ldr	r2, [pc, #156]	@ (801c1c4 <HAL_DMA_Init+0x1e4>)
 801c128:	4293      	cmp	r3, r2
 801c12a:	d013      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	4a25      	ldr	r2, [pc, #148]	@ (801c1c8 <HAL_DMA_Init+0x1e8>)
 801c132:	4293      	cmp	r3, r2
 801c134:	d00e      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	4a24      	ldr	r2, [pc, #144]	@ (801c1cc <HAL_DMA_Init+0x1ec>)
 801c13c:	4293      	cmp	r3, r2
 801c13e:	d009      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	4a22      	ldr	r2, [pc, #136]	@ (801c1d0 <HAL_DMA_Init+0x1f0>)
 801c146:	4293      	cmp	r3, r2
 801c148:	d004      	beq.n	801c154 <HAL_DMA_Init+0x174>
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4a21      	ldr	r2, [pc, #132]	@ (801c1d4 <HAL_DMA_Init+0x1f4>)
 801c150:	4293      	cmp	r3, r2
 801c152:	d108      	bne.n	801c166 <HAL_DMA_Init+0x186>
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	681a      	ldr	r2, [r3, #0]
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	f022 0201 	bic.w	r2, r2, #1
 801c162:	601a      	str	r2, [r3, #0]
 801c164:	e007      	b.n	801c176 <HAL_DMA_Init+0x196>
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	681a      	ldr	r2, [r3, #0]
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	f022 0201 	bic.w	r2, r2, #1
 801c174:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c176:	e02f      	b.n	801c1d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c178:	f7ff fd54 	bl	801bc24 <HAL_GetTick>
 801c17c:	4602      	mov	r2, r0
 801c17e:	693b      	ldr	r3, [r7, #16]
 801c180:	1ad3      	subs	r3, r2, r3
 801c182:	2b05      	cmp	r3, #5
 801c184:	d928      	bls.n	801c1d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	2220      	movs	r2, #32
 801c18a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	2203      	movs	r2, #3
 801c190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801c194:	2301      	movs	r3, #1
 801c196:	e246      	b.n	801c626 <HAL_DMA_Init+0x646>
 801c198:	40020010 	.word	0x40020010
 801c19c:	40020028 	.word	0x40020028
 801c1a0:	40020040 	.word	0x40020040
 801c1a4:	40020058 	.word	0x40020058
 801c1a8:	40020070 	.word	0x40020070
 801c1ac:	40020088 	.word	0x40020088
 801c1b0:	400200a0 	.word	0x400200a0
 801c1b4:	400200b8 	.word	0x400200b8
 801c1b8:	40020410 	.word	0x40020410
 801c1bc:	40020428 	.word	0x40020428
 801c1c0:	40020440 	.word	0x40020440
 801c1c4:	40020458 	.word	0x40020458
 801c1c8:	40020470 	.word	0x40020470
 801c1cc:	40020488 	.word	0x40020488
 801c1d0:	400204a0 	.word	0x400204a0
 801c1d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	681b      	ldr	r3, [r3, #0]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	f003 0301 	and.w	r3, r3, #1
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d1c8      	bne.n	801c178 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c1ee:	697a      	ldr	r2, [r7, #20]
 801c1f0:	4b83      	ldr	r3, [pc, #524]	@ (801c400 <HAL_DMA_Init+0x420>)
 801c1f2:	4013      	ands	r3, r2
 801c1f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801c1fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	691b      	ldr	r3, [r3, #16]
 801c204:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c20a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	699b      	ldr	r3, [r3, #24]
 801c210:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c216:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	6a1b      	ldr	r3, [r3, #32]
 801c21c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801c21e:	697a      	ldr	r2, [r7, #20]
 801c220:	4313      	orrs	r3, r2
 801c222:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c228:	2b04      	cmp	r3, #4
 801c22a:	d107      	bne.n	801c23c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c234:	4313      	orrs	r3, r2
 801c236:	697a      	ldr	r2, [r7, #20]
 801c238:	4313      	orrs	r3, r2
 801c23a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801c23c:	4b71      	ldr	r3, [pc, #452]	@ (801c404 <HAL_DMA_Init+0x424>)
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	4b71      	ldr	r3, [pc, #452]	@ (801c408 <HAL_DMA_Init+0x428>)
 801c242:	4013      	ands	r3, r2
 801c244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c248:	d328      	bcc.n	801c29c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	685b      	ldr	r3, [r3, #4]
 801c24e:	2b28      	cmp	r3, #40	@ 0x28
 801c250:	d903      	bls.n	801c25a <HAL_DMA_Init+0x27a>
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	685b      	ldr	r3, [r3, #4]
 801c256:	2b2e      	cmp	r3, #46	@ 0x2e
 801c258:	d917      	bls.n	801c28a <HAL_DMA_Init+0x2aa>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	685b      	ldr	r3, [r3, #4]
 801c25e:	2b3e      	cmp	r3, #62	@ 0x3e
 801c260:	d903      	bls.n	801c26a <HAL_DMA_Init+0x28a>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	2b42      	cmp	r3, #66	@ 0x42
 801c268:	d90f      	bls.n	801c28a <HAL_DMA_Init+0x2aa>
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	2b46      	cmp	r3, #70	@ 0x46
 801c270:	d903      	bls.n	801c27a <HAL_DMA_Init+0x29a>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	685b      	ldr	r3, [r3, #4]
 801c276:	2b48      	cmp	r3, #72	@ 0x48
 801c278:	d907      	bls.n	801c28a <HAL_DMA_Init+0x2aa>
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	685b      	ldr	r3, [r3, #4]
 801c27e:	2b4e      	cmp	r3, #78	@ 0x4e
 801c280:	d905      	bls.n	801c28e <HAL_DMA_Init+0x2ae>
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	685b      	ldr	r3, [r3, #4]
 801c286:	2b52      	cmp	r3, #82	@ 0x52
 801c288:	d801      	bhi.n	801c28e <HAL_DMA_Init+0x2ae>
 801c28a:	2301      	movs	r3, #1
 801c28c:	e000      	b.n	801c290 <HAL_DMA_Init+0x2b0>
 801c28e:	2300      	movs	r3, #0
 801c290:	2b00      	cmp	r3, #0
 801c292:	d003      	beq.n	801c29c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801c294:	697b      	ldr	r3, [r7, #20]
 801c296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c29a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	697a      	ldr	r2, [r7, #20]
 801c2a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	695b      	ldr	r3, [r3, #20]
 801c2aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	f023 0307 	bic.w	r3, r3, #7
 801c2b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2b8:	697a      	ldr	r2, [r7, #20]
 801c2ba:	4313      	orrs	r3, r2
 801c2bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2c2:	2b04      	cmp	r3, #4
 801c2c4:	d117      	bne.n	801c2f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2ca:	697a      	ldr	r2, [r7, #20]
 801c2cc:	4313      	orrs	r3, r2
 801c2ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d00e      	beq.n	801c2f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f001 fc23 	bl	801db24 <DMA_CheckFifoParam>
 801c2de:	4603      	mov	r3, r0
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d008      	beq.n	801c2f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	2240      	movs	r2, #64	@ 0x40
 801c2e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	2201      	movs	r2, #1
 801c2ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801c2f2:	2301      	movs	r3, #1
 801c2f4:	e197      	b.n	801c626 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	697a      	ldr	r2, [r7, #20]
 801c2fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c2fe:	6878      	ldr	r0, [r7, #4]
 801c300:	f001 fb5e 	bl	801d9c0 <DMA_CalcBaseAndBitshift>
 801c304:	4603      	mov	r3, r0
 801c306:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c30c:	f003 031f 	and.w	r3, r3, #31
 801c310:	223f      	movs	r2, #63	@ 0x3f
 801c312:	409a      	lsls	r2, r3
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	609a      	str	r2, [r3, #8]
 801c318:	e0cd      	b.n	801c4b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	4a3b      	ldr	r2, [pc, #236]	@ (801c40c <HAL_DMA_Init+0x42c>)
 801c320:	4293      	cmp	r3, r2
 801c322:	d022      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	4a39      	ldr	r2, [pc, #228]	@ (801c410 <HAL_DMA_Init+0x430>)
 801c32a:	4293      	cmp	r3, r2
 801c32c:	d01d      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	4a38      	ldr	r2, [pc, #224]	@ (801c414 <HAL_DMA_Init+0x434>)
 801c334:	4293      	cmp	r3, r2
 801c336:	d018      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	4a36      	ldr	r2, [pc, #216]	@ (801c418 <HAL_DMA_Init+0x438>)
 801c33e:	4293      	cmp	r3, r2
 801c340:	d013      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	4a35      	ldr	r2, [pc, #212]	@ (801c41c <HAL_DMA_Init+0x43c>)
 801c348:	4293      	cmp	r3, r2
 801c34a:	d00e      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	4a33      	ldr	r2, [pc, #204]	@ (801c420 <HAL_DMA_Init+0x440>)
 801c352:	4293      	cmp	r3, r2
 801c354:	d009      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	4a32      	ldr	r2, [pc, #200]	@ (801c424 <HAL_DMA_Init+0x444>)
 801c35c:	4293      	cmp	r3, r2
 801c35e:	d004      	beq.n	801c36a <HAL_DMA_Init+0x38a>
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	4a30      	ldr	r2, [pc, #192]	@ (801c428 <HAL_DMA_Init+0x448>)
 801c366:	4293      	cmp	r3, r2
 801c368:	d101      	bne.n	801c36e <HAL_DMA_Init+0x38e>
 801c36a:	2301      	movs	r3, #1
 801c36c:	e000      	b.n	801c370 <HAL_DMA_Init+0x390>
 801c36e:	2300      	movs	r3, #0
 801c370:	2b00      	cmp	r3, #0
 801c372:	f000 8097 	beq.w	801c4a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	4a24      	ldr	r2, [pc, #144]	@ (801c40c <HAL_DMA_Init+0x42c>)
 801c37c:	4293      	cmp	r3, r2
 801c37e:	d021      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	4a22      	ldr	r2, [pc, #136]	@ (801c410 <HAL_DMA_Init+0x430>)
 801c386:	4293      	cmp	r3, r2
 801c388:	d01c      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	4a21      	ldr	r2, [pc, #132]	@ (801c414 <HAL_DMA_Init+0x434>)
 801c390:	4293      	cmp	r3, r2
 801c392:	d017      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	4a1f      	ldr	r2, [pc, #124]	@ (801c418 <HAL_DMA_Init+0x438>)
 801c39a:	4293      	cmp	r3, r2
 801c39c:	d012      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	4a1e      	ldr	r2, [pc, #120]	@ (801c41c <HAL_DMA_Init+0x43c>)
 801c3a4:	4293      	cmp	r3, r2
 801c3a6:	d00d      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	4a1c      	ldr	r2, [pc, #112]	@ (801c420 <HAL_DMA_Init+0x440>)
 801c3ae:	4293      	cmp	r3, r2
 801c3b0:	d008      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	4a1b      	ldr	r2, [pc, #108]	@ (801c424 <HAL_DMA_Init+0x444>)
 801c3b8:	4293      	cmp	r3, r2
 801c3ba:	d003      	beq.n	801c3c4 <HAL_DMA_Init+0x3e4>
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	4a19      	ldr	r2, [pc, #100]	@ (801c428 <HAL_DMA_Init+0x448>)
 801c3c2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	2202      	movs	r2, #2
 801c3c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801c3dc:	697a      	ldr	r2, [r7, #20]
 801c3de:	4b13      	ldr	r3, [pc, #76]	@ (801c42c <HAL_DMA_Init+0x44c>)
 801c3e0:	4013      	ands	r3, r2
 801c3e2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	689b      	ldr	r3, [r3, #8]
 801c3e8:	2b40      	cmp	r3, #64	@ 0x40
 801c3ea:	d021      	beq.n	801c430 <HAL_DMA_Init+0x450>
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	689b      	ldr	r3, [r3, #8]
 801c3f0:	2b80      	cmp	r3, #128	@ 0x80
 801c3f2:	d102      	bne.n	801c3fa <HAL_DMA_Init+0x41a>
 801c3f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c3f8:	e01b      	b.n	801c432 <HAL_DMA_Init+0x452>
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	e019      	b.n	801c432 <HAL_DMA_Init+0x452>
 801c3fe:	bf00      	nop
 801c400:	fe10803f 	.word	0xfe10803f
 801c404:	5c001000 	.word	0x5c001000
 801c408:	ffff0000 	.word	0xffff0000
 801c40c:	58025408 	.word	0x58025408
 801c410:	5802541c 	.word	0x5802541c
 801c414:	58025430 	.word	0x58025430
 801c418:	58025444 	.word	0x58025444
 801c41c:	58025458 	.word	0x58025458
 801c420:	5802546c 	.word	0x5802546c
 801c424:	58025480 	.word	0x58025480
 801c428:	58025494 	.word	0x58025494
 801c42c:	fffe000f 	.word	0xfffe000f
 801c430:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c432:	687a      	ldr	r2, [r7, #4]
 801c434:	68d2      	ldr	r2, [r2, #12]
 801c436:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	691b      	ldr	r3, [r3, #16]
 801c43e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	695b      	ldr	r3, [r3, #20]
 801c446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	699b      	ldr	r3, [r3, #24]
 801c44e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	69db      	ldr	r3, [r3, #28]
 801c456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	6a1b      	ldr	r3, [r3, #32]
 801c45e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c460:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c462:	697a      	ldr	r2, [r7, #20]
 801c464:	4313      	orrs	r3, r2
 801c466:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	697a      	ldr	r2, [r7, #20]
 801c46e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	461a      	mov	r2, r3
 801c476:	4b6e      	ldr	r3, [pc, #440]	@ (801c630 <HAL_DMA_Init+0x650>)
 801c478:	4413      	add	r3, r2
 801c47a:	4a6e      	ldr	r2, [pc, #440]	@ (801c634 <HAL_DMA_Init+0x654>)
 801c47c:	fba2 2303 	umull	r2, r3, r2, r3
 801c480:	091b      	lsrs	r3, r3, #4
 801c482:	009a      	lsls	r2, r3, #2
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c488:	6878      	ldr	r0, [r7, #4]
 801c48a:	f001 fa99 	bl	801d9c0 <DMA_CalcBaseAndBitshift>
 801c48e:	4603      	mov	r3, r0
 801c490:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c496:	f003 031f 	and.w	r3, r3, #31
 801c49a:	2201      	movs	r2, #1
 801c49c:	409a      	lsls	r2, r3
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	605a      	str	r2, [r3, #4]
 801c4a2:	e008      	b.n	801c4b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	2240      	movs	r2, #64	@ 0x40
 801c4a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	2203      	movs	r2, #3
 801c4ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801c4b2:	2301      	movs	r3, #1
 801c4b4:	e0b7      	b.n	801c626 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	4a5f      	ldr	r2, [pc, #380]	@ (801c638 <HAL_DMA_Init+0x658>)
 801c4bc:	4293      	cmp	r3, r2
 801c4be:	d072      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	4a5d      	ldr	r2, [pc, #372]	@ (801c63c <HAL_DMA_Init+0x65c>)
 801c4c6:	4293      	cmp	r3, r2
 801c4c8:	d06d      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	4a5c      	ldr	r2, [pc, #368]	@ (801c640 <HAL_DMA_Init+0x660>)
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	d068      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	4a5a      	ldr	r2, [pc, #360]	@ (801c644 <HAL_DMA_Init+0x664>)
 801c4da:	4293      	cmp	r3, r2
 801c4dc:	d063      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	4a59      	ldr	r2, [pc, #356]	@ (801c648 <HAL_DMA_Init+0x668>)
 801c4e4:	4293      	cmp	r3, r2
 801c4e6:	d05e      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4a57      	ldr	r2, [pc, #348]	@ (801c64c <HAL_DMA_Init+0x66c>)
 801c4ee:	4293      	cmp	r3, r2
 801c4f0:	d059      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	4a56      	ldr	r2, [pc, #344]	@ (801c650 <HAL_DMA_Init+0x670>)
 801c4f8:	4293      	cmp	r3, r2
 801c4fa:	d054      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4a54      	ldr	r2, [pc, #336]	@ (801c654 <HAL_DMA_Init+0x674>)
 801c502:	4293      	cmp	r3, r2
 801c504:	d04f      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	4a53      	ldr	r2, [pc, #332]	@ (801c658 <HAL_DMA_Init+0x678>)
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d04a      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	4a51      	ldr	r2, [pc, #324]	@ (801c65c <HAL_DMA_Init+0x67c>)
 801c516:	4293      	cmp	r3, r2
 801c518:	d045      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	4a50      	ldr	r2, [pc, #320]	@ (801c660 <HAL_DMA_Init+0x680>)
 801c520:	4293      	cmp	r3, r2
 801c522:	d040      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	4a4e      	ldr	r2, [pc, #312]	@ (801c664 <HAL_DMA_Init+0x684>)
 801c52a:	4293      	cmp	r3, r2
 801c52c:	d03b      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	4a4d      	ldr	r2, [pc, #308]	@ (801c668 <HAL_DMA_Init+0x688>)
 801c534:	4293      	cmp	r3, r2
 801c536:	d036      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	4a4b      	ldr	r2, [pc, #300]	@ (801c66c <HAL_DMA_Init+0x68c>)
 801c53e:	4293      	cmp	r3, r2
 801c540:	d031      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	4a4a      	ldr	r2, [pc, #296]	@ (801c670 <HAL_DMA_Init+0x690>)
 801c548:	4293      	cmp	r3, r2
 801c54a:	d02c      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	4a48      	ldr	r2, [pc, #288]	@ (801c674 <HAL_DMA_Init+0x694>)
 801c552:	4293      	cmp	r3, r2
 801c554:	d027      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	4a47      	ldr	r2, [pc, #284]	@ (801c678 <HAL_DMA_Init+0x698>)
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d022      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	4a45      	ldr	r2, [pc, #276]	@ (801c67c <HAL_DMA_Init+0x69c>)
 801c566:	4293      	cmp	r3, r2
 801c568:	d01d      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	4a44      	ldr	r2, [pc, #272]	@ (801c680 <HAL_DMA_Init+0x6a0>)
 801c570:	4293      	cmp	r3, r2
 801c572:	d018      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	4a42      	ldr	r2, [pc, #264]	@ (801c684 <HAL_DMA_Init+0x6a4>)
 801c57a:	4293      	cmp	r3, r2
 801c57c:	d013      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	4a41      	ldr	r2, [pc, #260]	@ (801c688 <HAL_DMA_Init+0x6a8>)
 801c584:	4293      	cmp	r3, r2
 801c586:	d00e      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	4a3f      	ldr	r2, [pc, #252]	@ (801c68c <HAL_DMA_Init+0x6ac>)
 801c58e:	4293      	cmp	r3, r2
 801c590:	d009      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	4a3e      	ldr	r2, [pc, #248]	@ (801c690 <HAL_DMA_Init+0x6b0>)
 801c598:	4293      	cmp	r3, r2
 801c59a:	d004      	beq.n	801c5a6 <HAL_DMA_Init+0x5c6>
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	4a3c      	ldr	r2, [pc, #240]	@ (801c694 <HAL_DMA_Init+0x6b4>)
 801c5a2:	4293      	cmp	r3, r2
 801c5a4:	d101      	bne.n	801c5aa <HAL_DMA_Init+0x5ca>
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	e000      	b.n	801c5ac <HAL_DMA_Init+0x5cc>
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d032      	beq.n	801c616 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801c5b0:	6878      	ldr	r0, [r7, #4]
 801c5b2:	f001 fb33 	bl	801dc1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	689b      	ldr	r3, [r3, #8]
 801c5ba:	2b80      	cmp	r3, #128	@ 0x80
 801c5bc:	d102      	bne.n	801c5c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	685a      	ldr	r2, [r3, #4]
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c5cc:	b2d2      	uxtb	r2, r2
 801c5ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c5d4:	687a      	ldr	r2, [r7, #4]
 801c5d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801c5d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	685b      	ldr	r3, [r3, #4]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d010      	beq.n	801c604 <HAL_DMA_Init+0x624>
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	685b      	ldr	r3, [r3, #4]
 801c5e6:	2b08      	cmp	r3, #8
 801c5e8:	d80c      	bhi.n	801c604 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801c5ea:	6878      	ldr	r0, [r7, #4]
 801c5ec:	f001 fbb0 	bl	801dd50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c5fc:	687a      	ldr	r2, [r7, #4]
 801c5fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801c600:	605a      	str	r2, [r3, #4]
 801c602:	e008      	b.n	801c616 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2200      	movs	r2, #0
 801c608:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	2200      	movs	r2, #0
 801c60e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	2200      	movs	r2, #0
 801c614:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	2200      	movs	r2, #0
 801c61a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	2201      	movs	r2, #1
 801c620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801c624:	2300      	movs	r3, #0
}
 801c626:	4618      	mov	r0, r3
 801c628:	3718      	adds	r7, #24
 801c62a:	46bd      	mov	sp, r7
 801c62c:	bd80      	pop	{r7, pc}
 801c62e:	bf00      	nop
 801c630:	a7fdabf8 	.word	0xa7fdabf8
 801c634:	cccccccd 	.word	0xcccccccd
 801c638:	40020010 	.word	0x40020010
 801c63c:	40020028 	.word	0x40020028
 801c640:	40020040 	.word	0x40020040
 801c644:	40020058 	.word	0x40020058
 801c648:	40020070 	.word	0x40020070
 801c64c:	40020088 	.word	0x40020088
 801c650:	400200a0 	.word	0x400200a0
 801c654:	400200b8 	.word	0x400200b8
 801c658:	40020410 	.word	0x40020410
 801c65c:	40020428 	.word	0x40020428
 801c660:	40020440 	.word	0x40020440
 801c664:	40020458 	.word	0x40020458
 801c668:	40020470 	.word	0x40020470
 801c66c:	40020488 	.word	0x40020488
 801c670:	400204a0 	.word	0x400204a0
 801c674:	400204b8 	.word	0x400204b8
 801c678:	58025408 	.word	0x58025408
 801c67c:	5802541c 	.word	0x5802541c
 801c680:	58025430 	.word	0x58025430
 801c684:	58025444 	.word	0x58025444
 801c688:	58025458 	.word	0x58025458
 801c68c:	5802546c 	.word	0x5802546c
 801c690:	58025480 	.word	0x58025480
 801c694:	58025494 	.word	0x58025494

0801c698 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c698:	b580      	push	{r7, lr}
 801c69a:	b086      	sub	sp, #24
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	60f8      	str	r0, [r7, #12]
 801c6a0:	60b9      	str	r1, [r7, #8]
 801c6a2:	607a      	str	r2, [r7, #4]
 801c6a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d101      	bne.n	801c6b4 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	e0ec      	b.n	801c88e <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c6ba:	2b01      	cmp	r3, #1
 801c6bc:	d101      	bne.n	801c6c2 <HAL_DMA_Start+0x2a>
 801c6be:	2302      	movs	r3, #2
 801c6c0:	e0e5      	b.n	801c88e <HAL_DMA_Start+0x1f6>
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	2201      	movs	r2, #1
 801c6c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c6d0:	b2db      	uxtb	r3, r3
 801c6d2:	2b01      	cmp	r3, #1
 801c6d4:	f040 80d0 	bne.w	801c878 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	2202      	movs	r2, #2
 801c6dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	4a6b      	ldr	r2, [pc, #428]	@ (801c898 <HAL_DMA_Start+0x200>)
 801c6ec:	4293      	cmp	r3, r2
 801c6ee:	d04a      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	4a69      	ldr	r2, [pc, #420]	@ (801c89c <HAL_DMA_Start+0x204>)
 801c6f6:	4293      	cmp	r3, r2
 801c6f8:	d045      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4a68      	ldr	r2, [pc, #416]	@ (801c8a0 <HAL_DMA_Start+0x208>)
 801c700:	4293      	cmp	r3, r2
 801c702:	d040      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	4a66      	ldr	r2, [pc, #408]	@ (801c8a4 <HAL_DMA_Start+0x20c>)
 801c70a:	4293      	cmp	r3, r2
 801c70c:	d03b      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	4a65      	ldr	r2, [pc, #404]	@ (801c8a8 <HAL_DMA_Start+0x210>)
 801c714:	4293      	cmp	r3, r2
 801c716:	d036      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	4a63      	ldr	r2, [pc, #396]	@ (801c8ac <HAL_DMA_Start+0x214>)
 801c71e:	4293      	cmp	r3, r2
 801c720:	d031      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	4a62      	ldr	r2, [pc, #392]	@ (801c8b0 <HAL_DMA_Start+0x218>)
 801c728:	4293      	cmp	r3, r2
 801c72a:	d02c      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	4a60      	ldr	r2, [pc, #384]	@ (801c8b4 <HAL_DMA_Start+0x21c>)
 801c732:	4293      	cmp	r3, r2
 801c734:	d027      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4a5f      	ldr	r2, [pc, #380]	@ (801c8b8 <HAL_DMA_Start+0x220>)
 801c73c:	4293      	cmp	r3, r2
 801c73e:	d022      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	4a5d      	ldr	r2, [pc, #372]	@ (801c8bc <HAL_DMA_Start+0x224>)
 801c746:	4293      	cmp	r3, r2
 801c748:	d01d      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	4a5c      	ldr	r2, [pc, #368]	@ (801c8c0 <HAL_DMA_Start+0x228>)
 801c750:	4293      	cmp	r3, r2
 801c752:	d018      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4a5a      	ldr	r2, [pc, #360]	@ (801c8c4 <HAL_DMA_Start+0x22c>)
 801c75a:	4293      	cmp	r3, r2
 801c75c:	d013      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a59      	ldr	r2, [pc, #356]	@ (801c8c8 <HAL_DMA_Start+0x230>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d00e      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	4a57      	ldr	r2, [pc, #348]	@ (801c8cc <HAL_DMA_Start+0x234>)
 801c76e:	4293      	cmp	r3, r2
 801c770:	d009      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	4a56      	ldr	r2, [pc, #344]	@ (801c8d0 <HAL_DMA_Start+0x238>)
 801c778:	4293      	cmp	r3, r2
 801c77a:	d004      	beq.n	801c786 <HAL_DMA_Start+0xee>
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4a54      	ldr	r2, [pc, #336]	@ (801c8d4 <HAL_DMA_Start+0x23c>)
 801c782:	4293      	cmp	r3, r2
 801c784:	d108      	bne.n	801c798 <HAL_DMA_Start+0x100>
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	681a      	ldr	r2, [r3, #0]
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	f022 0201 	bic.w	r2, r2, #1
 801c794:	601a      	str	r2, [r3, #0]
 801c796:	e007      	b.n	801c7a8 <HAL_DMA_Start+0x110>
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	681a      	ldr	r2, [r3, #0]
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	f022 0201 	bic.w	r2, r2, #1
 801c7a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	687a      	ldr	r2, [r7, #4]
 801c7ac:	68b9      	ldr	r1, [r7, #8]
 801c7ae:	68f8      	ldr	r0, [r7, #12]
 801c7b0:	f000 ff5a 	bl	801d668 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	4a37      	ldr	r2, [pc, #220]	@ (801c898 <HAL_DMA_Start+0x200>)
 801c7ba:	4293      	cmp	r3, r2
 801c7bc:	d04a      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	4a36      	ldr	r2, [pc, #216]	@ (801c89c <HAL_DMA_Start+0x204>)
 801c7c4:	4293      	cmp	r3, r2
 801c7c6:	d045      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	4a34      	ldr	r2, [pc, #208]	@ (801c8a0 <HAL_DMA_Start+0x208>)
 801c7ce:	4293      	cmp	r3, r2
 801c7d0:	d040      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	4a33      	ldr	r2, [pc, #204]	@ (801c8a4 <HAL_DMA_Start+0x20c>)
 801c7d8:	4293      	cmp	r3, r2
 801c7da:	d03b      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	4a31      	ldr	r2, [pc, #196]	@ (801c8a8 <HAL_DMA_Start+0x210>)
 801c7e2:	4293      	cmp	r3, r2
 801c7e4:	d036      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	4a30      	ldr	r2, [pc, #192]	@ (801c8ac <HAL_DMA_Start+0x214>)
 801c7ec:	4293      	cmp	r3, r2
 801c7ee:	d031      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	4a2e      	ldr	r2, [pc, #184]	@ (801c8b0 <HAL_DMA_Start+0x218>)
 801c7f6:	4293      	cmp	r3, r2
 801c7f8:	d02c      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	4a2d      	ldr	r2, [pc, #180]	@ (801c8b4 <HAL_DMA_Start+0x21c>)
 801c800:	4293      	cmp	r3, r2
 801c802:	d027      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	4a2b      	ldr	r2, [pc, #172]	@ (801c8b8 <HAL_DMA_Start+0x220>)
 801c80a:	4293      	cmp	r3, r2
 801c80c:	d022      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	4a2a      	ldr	r2, [pc, #168]	@ (801c8bc <HAL_DMA_Start+0x224>)
 801c814:	4293      	cmp	r3, r2
 801c816:	d01d      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	4a28      	ldr	r2, [pc, #160]	@ (801c8c0 <HAL_DMA_Start+0x228>)
 801c81e:	4293      	cmp	r3, r2
 801c820:	d018      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	4a27      	ldr	r2, [pc, #156]	@ (801c8c4 <HAL_DMA_Start+0x22c>)
 801c828:	4293      	cmp	r3, r2
 801c82a:	d013      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	4a25      	ldr	r2, [pc, #148]	@ (801c8c8 <HAL_DMA_Start+0x230>)
 801c832:	4293      	cmp	r3, r2
 801c834:	d00e      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	4a24      	ldr	r2, [pc, #144]	@ (801c8cc <HAL_DMA_Start+0x234>)
 801c83c:	4293      	cmp	r3, r2
 801c83e:	d009      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	4a22      	ldr	r2, [pc, #136]	@ (801c8d0 <HAL_DMA_Start+0x238>)
 801c846:	4293      	cmp	r3, r2
 801c848:	d004      	beq.n	801c854 <HAL_DMA_Start+0x1bc>
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4a21      	ldr	r2, [pc, #132]	@ (801c8d4 <HAL_DMA_Start+0x23c>)
 801c850:	4293      	cmp	r3, r2
 801c852:	d108      	bne.n	801c866 <HAL_DMA_Start+0x1ce>
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	681a      	ldr	r2, [r3, #0]
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	f042 0201 	orr.w	r2, r2, #1
 801c862:	601a      	str	r2, [r3, #0]
 801c864:	e012      	b.n	801c88c <HAL_DMA_Start+0x1f4>
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	681a      	ldr	r2, [r3, #0]
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	f042 0201 	orr.w	r2, r2, #1
 801c874:	601a      	str	r2, [r3, #0]
 801c876:	e009      	b.n	801c88c <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c87e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	2200      	movs	r2, #0
 801c884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 801c888:	2301      	movs	r3, #1
 801c88a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801c88c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c88e:	4618      	mov	r0, r3
 801c890:	3718      	adds	r7, #24
 801c892:	46bd      	mov	sp, r7
 801c894:	bd80      	pop	{r7, pc}
 801c896:	bf00      	nop
 801c898:	40020010 	.word	0x40020010
 801c89c:	40020028 	.word	0x40020028
 801c8a0:	40020040 	.word	0x40020040
 801c8a4:	40020058 	.word	0x40020058
 801c8a8:	40020070 	.word	0x40020070
 801c8ac:	40020088 	.word	0x40020088
 801c8b0:	400200a0 	.word	0x400200a0
 801c8b4:	400200b8 	.word	0x400200b8
 801c8b8:	40020410 	.word	0x40020410
 801c8bc:	40020428 	.word	0x40020428
 801c8c0:	40020440 	.word	0x40020440
 801c8c4:	40020458 	.word	0x40020458
 801c8c8:	40020470 	.word	0x40020470
 801c8cc:	40020488 	.word	0x40020488
 801c8d0:	400204a0 	.word	0x400204a0
 801c8d4:	400204b8 	.word	0x400204b8

0801c8d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b086      	sub	sp, #24
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801c8e0:	f7ff f9a0 	bl	801bc24 <HAL_GetTick>
 801c8e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d101      	bne.n	801c8f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801c8ec:	2301      	movs	r3, #1
 801c8ee:	e2dc      	b.n	801ceaa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c8f6:	b2db      	uxtb	r3, r3
 801c8f8:	2b02      	cmp	r3, #2
 801c8fa:	d008      	beq.n	801c90e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	2280      	movs	r2, #128	@ 0x80
 801c900:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	2200      	movs	r2, #0
 801c906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801c90a:	2301      	movs	r3, #1
 801c90c:	e2cd      	b.n	801ceaa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	4a76      	ldr	r2, [pc, #472]	@ (801caec <HAL_DMA_Abort+0x214>)
 801c914:	4293      	cmp	r3, r2
 801c916:	d04a      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	4a74      	ldr	r2, [pc, #464]	@ (801caf0 <HAL_DMA_Abort+0x218>)
 801c91e:	4293      	cmp	r3, r2
 801c920:	d045      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	4a73      	ldr	r2, [pc, #460]	@ (801caf4 <HAL_DMA_Abort+0x21c>)
 801c928:	4293      	cmp	r3, r2
 801c92a:	d040      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	4a71      	ldr	r2, [pc, #452]	@ (801caf8 <HAL_DMA_Abort+0x220>)
 801c932:	4293      	cmp	r3, r2
 801c934:	d03b      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	4a70      	ldr	r2, [pc, #448]	@ (801cafc <HAL_DMA_Abort+0x224>)
 801c93c:	4293      	cmp	r3, r2
 801c93e:	d036      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	4a6e      	ldr	r2, [pc, #440]	@ (801cb00 <HAL_DMA_Abort+0x228>)
 801c946:	4293      	cmp	r3, r2
 801c948:	d031      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	4a6d      	ldr	r2, [pc, #436]	@ (801cb04 <HAL_DMA_Abort+0x22c>)
 801c950:	4293      	cmp	r3, r2
 801c952:	d02c      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	681b      	ldr	r3, [r3, #0]
 801c958:	4a6b      	ldr	r2, [pc, #428]	@ (801cb08 <HAL_DMA_Abort+0x230>)
 801c95a:	4293      	cmp	r3, r2
 801c95c:	d027      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	4a6a      	ldr	r2, [pc, #424]	@ (801cb0c <HAL_DMA_Abort+0x234>)
 801c964:	4293      	cmp	r3, r2
 801c966:	d022      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	4a68      	ldr	r2, [pc, #416]	@ (801cb10 <HAL_DMA_Abort+0x238>)
 801c96e:	4293      	cmp	r3, r2
 801c970:	d01d      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	4a67      	ldr	r2, [pc, #412]	@ (801cb14 <HAL_DMA_Abort+0x23c>)
 801c978:	4293      	cmp	r3, r2
 801c97a:	d018      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	4a65      	ldr	r2, [pc, #404]	@ (801cb18 <HAL_DMA_Abort+0x240>)
 801c982:	4293      	cmp	r3, r2
 801c984:	d013      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	4a64      	ldr	r2, [pc, #400]	@ (801cb1c <HAL_DMA_Abort+0x244>)
 801c98c:	4293      	cmp	r3, r2
 801c98e:	d00e      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	4a62      	ldr	r2, [pc, #392]	@ (801cb20 <HAL_DMA_Abort+0x248>)
 801c996:	4293      	cmp	r3, r2
 801c998:	d009      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	4a61      	ldr	r2, [pc, #388]	@ (801cb24 <HAL_DMA_Abort+0x24c>)
 801c9a0:	4293      	cmp	r3, r2
 801c9a2:	d004      	beq.n	801c9ae <HAL_DMA_Abort+0xd6>
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	4a5f      	ldr	r2, [pc, #380]	@ (801cb28 <HAL_DMA_Abort+0x250>)
 801c9aa:	4293      	cmp	r3, r2
 801c9ac:	d101      	bne.n	801c9b2 <HAL_DMA_Abort+0xda>
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	e000      	b.n	801c9b4 <HAL_DMA_Abort+0xdc>
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d013      	beq.n	801c9e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	681a      	ldr	r2, [r3, #0]
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	f022 021e 	bic.w	r2, r2, #30
 801c9c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	695a      	ldr	r2, [r3, #20]
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801c9d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	617b      	str	r3, [r7, #20]
 801c9de:	e00a      	b.n	801c9f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	681a      	ldr	r2, [r3, #0]
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	f022 020e 	bic.w	r2, r2, #14
 801c9ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	4a3c      	ldr	r2, [pc, #240]	@ (801caec <HAL_DMA_Abort+0x214>)
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	d072      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	4a3a      	ldr	r2, [pc, #232]	@ (801caf0 <HAL_DMA_Abort+0x218>)
 801ca06:	4293      	cmp	r3, r2
 801ca08:	d06d      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	4a39      	ldr	r2, [pc, #228]	@ (801caf4 <HAL_DMA_Abort+0x21c>)
 801ca10:	4293      	cmp	r3, r2
 801ca12:	d068      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	4a37      	ldr	r2, [pc, #220]	@ (801caf8 <HAL_DMA_Abort+0x220>)
 801ca1a:	4293      	cmp	r3, r2
 801ca1c:	d063      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	4a36      	ldr	r2, [pc, #216]	@ (801cafc <HAL_DMA_Abort+0x224>)
 801ca24:	4293      	cmp	r3, r2
 801ca26:	d05e      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4a34      	ldr	r2, [pc, #208]	@ (801cb00 <HAL_DMA_Abort+0x228>)
 801ca2e:	4293      	cmp	r3, r2
 801ca30:	d059      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	4a33      	ldr	r2, [pc, #204]	@ (801cb04 <HAL_DMA_Abort+0x22c>)
 801ca38:	4293      	cmp	r3, r2
 801ca3a:	d054      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	4a31      	ldr	r2, [pc, #196]	@ (801cb08 <HAL_DMA_Abort+0x230>)
 801ca42:	4293      	cmp	r3, r2
 801ca44:	d04f      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	4a30      	ldr	r2, [pc, #192]	@ (801cb0c <HAL_DMA_Abort+0x234>)
 801ca4c:	4293      	cmp	r3, r2
 801ca4e:	d04a      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	4a2e      	ldr	r2, [pc, #184]	@ (801cb10 <HAL_DMA_Abort+0x238>)
 801ca56:	4293      	cmp	r3, r2
 801ca58:	d045      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	4a2d      	ldr	r2, [pc, #180]	@ (801cb14 <HAL_DMA_Abort+0x23c>)
 801ca60:	4293      	cmp	r3, r2
 801ca62:	d040      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	4a2b      	ldr	r2, [pc, #172]	@ (801cb18 <HAL_DMA_Abort+0x240>)
 801ca6a:	4293      	cmp	r3, r2
 801ca6c:	d03b      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	4a2a      	ldr	r2, [pc, #168]	@ (801cb1c <HAL_DMA_Abort+0x244>)
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d036      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	4a28      	ldr	r2, [pc, #160]	@ (801cb20 <HAL_DMA_Abort+0x248>)
 801ca7e:	4293      	cmp	r3, r2
 801ca80:	d031      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	4a27      	ldr	r2, [pc, #156]	@ (801cb24 <HAL_DMA_Abort+0x24c>)
 801ca88:	4293      	cmp	r3, r2
 801ca8a:	d02c      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	4a25      	ldr	r2, [pc, #148]	@ (801cb28 <HAL_DMA_Abort+0x250>)
 801ca92:	4293      	cmp	r3, r2
 801ca94:	d027      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	4a24      	ldr	r2, [pc, #144]	@ (801cb2c <HAL_DMA_Abort+0x254>)
 801ca9c:	4293      	cmp	r3, r2
 801ca9e:	d022      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	4a22      	ldr	r2, [pc, #136]	@ (801cb30 <HAL_DMA_Abort+0x258>)
 801caa6:	4293      	cmp	r3, r2
 801caa8:	d01d      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	4a21      	ldr	r2, [pc, #132]	@ (801cb34 <HAL_DMA_Abort+0x25c>)
 801cab0:	4293      	cmp	r3, r2
 801cab2:	d018      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	4a1f      	ldr	r2, [pc, #124]	@ (801cb38 <HAL_DMA_Abort+0x260>)
 801caba:	4293      	cmp	r3, r2
 801cabc:	d013      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	4a1e      	ldr	r2, [pc, #120]	@ (801cb3c <HAL_DMA_Abort+0x264>)
 801cac4:	4293      	cmp	r3, r2
 801cac6:	d00e      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	4a1c      	ldr	r2, [pc, #112]	@ (801cb40 <HAL_DMA_Abort+0x268>)
 801cace:	4293      	cmp	r3, r2
 801cad0:	d009      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	4a1b      	ldr	r2, [pc, #108]	@ (801cb44 <HAL_DMA_Abort+0x26c>)
 801cad8:	4293      	cmp	r3, r2
 801cada:	d004      	beq.n	801cae6 <HAL_DMA_Abort+0x20e>
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	4a19      	ldr	r2, [pc, #100]	@ (801cb48 <HAL_DMA_Abort+0x270>)
 801cae2:	4293      	cmp	r3, r2
 801cae4:	d132      	bne.n	801cb4c <HAL_DMA_Abort+0x274>
 801cae6:	2301      	movs	r3, #1
 801cae8:	e031      	b.n	801cb4e <HAL_DMA_Abort+0x276>
 801caea:	bf00      	nop
 801caec:	40020010 	.word	0x40020010
 801caf0:	40020028 	.word	0x40020028
 801caf4:	40020040 	.word	0x40020040
 801caf8:	40020058 	.word	0x40020058
 801cafc:	40020070 	.word	0x40020070
 801cb00:	40020088 	.word	0x40020088
 801cb04:	400200a0 	.word	0x400200a0
 801cb08:	400200b8 	.word	0x400200b8
 801cb0c:	40020410 	.word	0x40020410
 801cb10:	40020428 	.word	0x40020428
 801cb14:	40020440 	.word	0x40020440
 801cb18:	40020458 	.word	0x40020458
 801cb1c:	40020470 	.word	0x40020470
 801cb20:	40020488 	.word	0x40020488
 801cb24:	400204a0 	.word	0x400204a0
 801cb28:	400204b8 	.word	0x400204b8
 801cb2c:	58025408 	.word	0x58025408
 801cb30:	5802541c 	.word	0x5802541c
 801cb34:	58025430 	.word	0x58025430
 801cb38:	58025444 	.word	0x58025444
 801cb3c:	58025458 	.word	0x58025458
 801cb40:	5802546c 	.word	0x5802546c
 801cb44:	58025480 	.word	0x58025480
 801cb48:	58025494 	.word	0x58025494
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d007      	beq.n	801cb62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cb56:	681a      	ldr	r2, [r3, #0]
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cb5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cb60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	4a6d      	ldr	r2, [pc, #436]	@ (801cd1c <HAL_DMA_Abort+0x444>)
 801cb68:	4293      	cmp	r3, r2
 801cb6a:	d04a      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	4a6b      	ldr	r2, [pc, #428]	@ (801cd20 <HAL_DMA_Abort+0x448>)
 801cb72:	4293      	cmp	r3, r2
 801cb74:	d045      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	4a6a      	ldr	r2, [pc, #424]	@ (801cd24 <HAL_DMA_Abort+0x44c>)
 801cb7c:	4293      	cmp	r3, r2
 801cb7e:	d040      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	4a68      	ldr	r2, [pc, #416]	@ (801cd28 <HAL_DMA_Abort+0x450>)
 801cb86:	4293      	cmp	r3, r2
 801cb88:	d03b      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	4a67      	ldr	r2, [pc, #412]	@ (801cd2c <HAL_DMA_Abort+0x454>)
 801cb90:	4293      	cmp	r3, r2
 801cb92:	d036      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	4a65      	ldr	r2, [pc, #404]	@ (801cd30 <HAL_DMA_Abort+0x458>)
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d031      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4a64      	ldr	r2, [pc, #400]	@ (801cd34 <HAL_DMA_Abort+0x45c>)
 801cba4:	4293      	cmp	r3, r2
 801cba6:	d02c      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	4a62      	ldr	r2, [pc, #392]	@ (801cd38 <HAL_DMA_Abort+0x460>)
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	d027      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	4a61      	ldr	r2, [pc, #388]	@ (801cd3c <HAL_DMA_Abort+0x464>)
 801cbb8:	4293      	cmp	r3, r2
 801cbba:	d022      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	4a5f      	ldr	r2, [pc, #380]	@ (801cd40 <HAL_DMA_Abort+0x468>)
 801cbc2:	4293      	cmp	r3, r2
 801cbc4:	d01d      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	4a5e      	ldr	r2, [pc, #376]	@ (801cd44 <HAL_DMA_Abort+0x46c>)
 801cbcc:	4293      	cmp	r3, r2
 801cbce:	d018      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	4a5c      	ldr	r2, [pc, #368]	@ (801cd48 <HAL_DMA_Abort+0x470>)
 801cbd6:	4293      	cmp	r3, r2
 801cbd8:	d013      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	4a5b      	ldr	r2, [pc, #364]	@ (801cd4c <HAL_DMA_Abort+0x474>)
 801cbe0:	4293      	cmp	r3, r2
 801cbe2:	d00e      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	4a59      	ldr	r2, [pc, #356]	@ (801cd50 <HAL_DMA_Abort+0x478>)
 801cbea:	4293      	cmp	r3, r2
 801cbec:	d009      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	4a58      	ldr	r2, [pc, #352]	@ (801cd54 <HAL_DMA_Abort+0x47c>)
 801cbf4:	4293      	cmp	r3, r2
 801cbf6:	d004      	beq.n	801cc02 <HAL_DMA_Abort+0x32a>
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	4a56      	ldr	r2, [pc, #344]	@ (801cd58 <HAL_DMA_Abort+0x480>)
 801cbfe:	4293      	cmp	r3, r2
 801cc00:	d108      	bne.n	801cc14 <HAL_DMA_Abort+0x33c>
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	681a      	ldr	r2, [r3, #0]
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	f022 0201 	bic.w	r2, r2, #1
 801cc10:	601a      	str	r2, [r3, #0]
 801cc12:	e007      	b.n	801cc24 <HAL_DMA_Abort+0x34c>
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	681a      	ldr	r2, [r3, #0]
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	f022 0201 	bic.w	r2, r2, #1
 801cc22:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cc24:	e013      	b.n	801cc4e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cc26:	f7fe fffd 	bl	801bc24 <HAL_GetTick>
 801cc2a:	4602      	mov	r2, r0
 801cc2c:	693b      	ldr	r3, [r7, #16]
 801cc2e:	1ad3      	subs	r3, r2, r3
 801cc30:	2b05      	cmp	r3, #5
 801cc32:	d90c      	bls.n	801cc4e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2220      	movs	r2, #32
 801cc38:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	2203      	movs	r2, #3
 801cc3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	2200      	movs	r2, #0
 801cc46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801cc4a:	2301      	movs	r3, #1
 801cc4c:	e12d      	b.n	801ceaa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	f003 0301 	and.w	r3, r3, #1
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d1e5      	bne.n	801cc26 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	4a2f      	ldr	r2, [pc, #188]	@ (801cd1c <HAL_DMA_Abort+0x444>)
 801cc60:	4293      	cmp	r3, r2
 801cc62:	d04a      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	4a2d      	ldr	r2, [pc, #180]	@ (801cd20 <HAL_DMA_Abort+0x448>)
 801cc6a:	4293      	cmp	r3, r2
 801cc6c:	d045      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	4a2c      	ldr	r2, [pc, #176]	@ (801cd24 <HAL_DMA_Abort+0x44c>)
 801cc74:	4293      	cmp	r3, r2
 801cc76:	d040      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	4a2a      	ldr	r2, [pc, #168]	@ (801cd28 <HAL_DMA_Abort+0x450>)
 801cc7e:	4293      	cmp	r3, r2
 801cc80:	d03b      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	4a29      	ldr	r2, [pc, #164]	@ (801cd2c <HAL_DMA_Abort+0x454>)
 801cc88:	4293      	cmp	r3, r2
 801cc8a:	d036      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	4a27      	ldr	r2, [pc, #156]	@ (801cd30 <HAL_DMA_Abort+0x458>)
 801cc92:	4293      	cmp	r3, r2
 801cc94:	d031      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	4a26      	ldr	r2, [pc, #152]	@ (801cd34 <HAL_DMA_Abort+0x45c>)
 801cc9c:	4293      	cmp	r3, r2
 801cc9e:	d02c      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	4a24      	ldr	r2, [pc, #144]	@ (801cd38 <HAL_DMA_Abort+0x460>)
 801cca6:	4293      	cmp	r3, r2
 801cca8:	d027      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	4a23      	ldr	r2, [pc, #140]	@ (801cd3c <HAL_DMA_Abort+0x464>)
 801ccb0:	4293      	cmp	r3, r2
 801ccb2:	d022      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	4a21      	ldr	r2, [pc, #132]	@ (801cd40 <HAL_DMA_Abort+0x468>)
 801ccba:	4293      	cmp	r3, r2
 801ccbc:	d01d      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	4a20      	ldr	r2, [pc, #128]	@ (801cd44 <HAL_DMA_Abort+0x46c>)
 801ccc4:	4293      	cmp	r3, r2
 801ccc6:	d018      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	4a1e      	ldr	r2, [pc, #120]	@ (801cd48 <HAL_DMA_Abort+0x470>)
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d013      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a1d      	ldr	r2, [pc, #116]	@ (801cd4c <HAL_DMA_Abort+0x474>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d00e      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	4a1b      	ldr	r2, [pc, #108]	@ (801cd50 <HAL_DMA_Abort+0x478>)
 801cce2:	4293      	cmp	r3, r2
 801cce4:	d009      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	4a1a      	ldr	r2, [pc, #104]	@ (801cd54 <HAL_DMA_Abort+0x47c>)
 801ccec:	4293      	cmp	r3, r2
 801ccee:	d004      	beq.n	801ccfa <HAL_DMA_Abort+0x422>
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	4a18      	ldr	r2, [pc, #96]	@ (801cd58 <HAL_DMA_Abort+0x480>)
 801ccf6:	4293      	cmp	r3, r2
 801ccf8:	d101      	bne.n	801ccfe <HAL_DMA_Abort+0x426>
 801ccfa:	2301      	movs	r3, #1
 801ccfc:	e000      	b.n	801cd00 <HAL_DMA_Abort+0x428>
 801ccfe:	2300      	movs	r3, #0
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d02b      	beq.n	801cd5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cd08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cd0e:	f003 031f 	and.w	r3, r3, #31
 801cd12:	223f      	movs	r2, #63	@ 0x3f
 801cd14:	409a      	lsls	r2, r3
 801cd16:	68bb      	ldr	r3, [r7, #8]
 801cd18:	609a      	str	r2, [r3, #8]
 801cd1a:	e02a      	b.n	801cd72 <HAL_DMA_Abort+0x49a>
 801cd1c:	40020010 	.word	0x40020010
 801cd20:	40020028 	.word	0x40020028
 801cd24:	40020040 	.word	0x40020040
 801cd28:	40020058 	.word	0x40020058
 801cd2c:	40020070 	.word	0x40020070
 801cd30:	40020088 	.word	0x40020088
 801cd34:	400200a0 	.word	0x400200a0
 801cd38:	400200b8 	.word	0x400200b8
 801cd3c:	40020410 	.word	0x40020410
 801cd40:	40020428 	.word	0x40020428
 801cd44:	40020440 	.word	0x40020440
 801cd48:	40020458 	.word	0x40020458
 801cd4c:	40020470 	.word	0x40020470
 801cd50:	40020488 	.word	0x40020488
 801cd54:	400204a0 	.word	0x400204a0
 801cd58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cd60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cd66:	f003 031f 	and.w	r3, r3, #31
 801cd6a:	2201      	movs	r2, #1
 801cd6c:	409a      	lsls	r2, r3
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	4a4f      	ldr	r2, [pc, #316]	@ (801ceb4 <HAL_DMA_Abort+0x5dc>)
 801cd78:	4293      	cmp	r3, r2
 801cd7a:	d072      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	4a4d      	ldr	r2, [pc, #308]	@ (801ceb8 <HAL_DMA_Abort+0x5e0>)
 801cd82:	4293      	cmp	r3, r2
 801cd84:	d06d      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	4a4c      	ldr	r2, [pc, #304]	@ (801cebc <HAL_DMA_Abort+0x5e4>)
 801cd8c:	4293      	cmp	r3, r2
 801cd8e:	d068      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	4a4a      	ldr	r2, [pc, #296]	@ (801cec0 <HAL_DMA_Abort+0x5e8>)
 801cd96:	4293      	cmp	r3, r2
 801cd98:	d063      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	4a49      	ldr	r2, [pc, #292]	@ (801cec4 <HAL_DMA_Abort+0x5ec>)
 801cda0:	4293      	cmp	r3, r2
 801cda2:	d05e      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	4a47      	ldr	r2, [pc, #284]	@ (801cec8 <HAL_DMA_Abort+0x5f0>)
 801cdaa:	4293      	cmp	r3, r2
 801cdac:	d059      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	4a46      	ldr	r2, [pc, #280]	@ (801cecc <HAL_DMA_Abort+0x5f4>)
 801cdb4:	4293      	cmp	r3, r2
 801cdb6:	d054      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	681b      	ldr	r3, [r3, #0]
 801cdbc:	4a44      	ldr	r2, [pc, #272]	@ (801ced0 <HAL_DMA_Abort+0x5f8>)
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d04f      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	4a43      	ldr	r2, [pc, #268]	@ (801ced4 <HAL_DMA_Abort+0x5fc>)
 801cdc8:	4293      	cmp	r3, r2
 801cdca:	d04a      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	4a41      	ldr	r2, [pc, #260]	@ (801ced8 <HAL_DMA_Abort+0x600>)
 801cdd2:	4293      	cmp	r3, r2
 801cdd4:	d045      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	4a40      	ldr	r2, [pc, #256]	@ (801cedc <HAL_DMA_Abort+0x604>)
 801cddc:	4293      	cmp	r3, r2
 801cdde:	d040      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4a3e      	ldr	r2, [pc, #248]	@ (801cee0 <HAL_DMA_Abort+0x608>)
 801cde6:	4293      	cmp	r3, r2
 801cde8:	d03b      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	4a3d      	ldr	r2, [pc, #244]	@ (801cee4 <HAL_DMA_Abort+0x60c>)
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	d036      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	4a3b      	ldr	r2, [pc, #236]	@ (801cee8 <HAL_DMA_Abort+0x610>)
 801cdfa:	4293      	cmp	r3, r2
 801cdfc:	d031      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	4a3a      	ldr	r2, [pc, #232]	@ (801ceec <HAL_DMA_Abort+0x614>)
 801ce04:	4293      	cmp	r3, r2
 801ce06:	d02c      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	4a38      	ldr	r2, [pc, #224]	@ (801cef0 <HAL_DMA_Abort+0x618>)
 801ce0e:	4293      	cmp	r3, r2
 801ce10:	d027      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	4a37      	ldr	r2, [pc, #220]	@ (801cef4 <HAL_DMA_Abort+0x61c>)
 801ce18:	4293      	cmp	r3, r2
 801ce1a:	d022      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	4a35      	ldr	r2, [pc, #212]	@ (801cef8 <HAL_DMA_Abort+0x620>)
 801ce22:	4293      	cmp	r3, r2
 801ce24:	d01d      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	4a34      	ldr	r2, [pc, #208]	@ (801cefc <HAL_DMA_Abort+0x624>)
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	d018      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	4a32      	ldr	r2, [pc, #200]	@ (801cf00 <HAL_DMA_Abort+0x628>)
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d013      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	4a31      	ldr	r2, [pc, #196]	@ (801cf04 <HAL_DMA_Abort+0x62c>)
 801ce40:	4293      	cmp	r3, r2
 801ce42:	d00e      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	4a2f      	ldr	r2, [pc, #188]	@ (801cf08 <HAL_DMA_Abort+0x630>)
 801ce4a:	4293      	cmp	r3, r2
 801ce4c:	d009      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	4a2e      	ldr	r2, [pc, #184]	@ (801cf0c <HAL_DMA_Abort+0x634>)
 801ce54:	4293      	cmp	r3, r2
 801ce56:	d004      	beq.n	801ce62 <HAL_DMA_Abort+0x58a>
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	4a2c      	ldr	r2, [pc, #176]	@ (801cf10 <HAL_DMA_Abort+0x638>)
 801ce5e:	4293      	cmp	r3, r2
 801ce60:	d101      	bne.n	801ce66 <HAL_DMA_Abort+0x58e>
 801ce62:	2301      	movs	r3, #1
 801ce64:	e000      	b.n	801ce68 <HAL_DMA_Abort+0x590>
 801ce66:	2300      	movs	r3, #0
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d015      	beq.n	801ce98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ce70:	687a      	ldr	r2, [r7, #4]
 801ce72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801ce74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d00c      	beq.n	801ce98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ce82:	681a      	ldr	r2, [r3, #0]
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ce88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ce8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ce92:	687a      	ldr	r2, [r7, #4]
 801ce94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801ce96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	2201      	movs	r2, #1
 801ce9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2200      	movs	r2, #0
 801cea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801cea8:	2300      	movs	r3, #0
}
 801ceaa:	4618      	mov	r0, r3
 801ceac:	3718      	adds	r7, #24
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	bd80      	pop	{r7, pc}
 801ceb2:	bf00      	nop
 801ceb4:	40020010 	.word	0x40020010
 801ceb8:	40020028 	.word	0x40020028
 801cebc:	40020040 	.word	0x40020040
 801cec0:	40020058 	.word	0x40020058
 801cec4:	40020070 	.word	0x40020070
 801cec8:	40020088 	.word	0x40020088
 801cecc:	400200a0 	.word	0x400200a0
 801ced0:	400200b8 	.word	0x400200b8
 801ced4:	40020410 	.word	0x40020410
 801ced8:	40020428 	.word	0x40020428
 801cedc:	40020440 	.word	0x40020440
 801cee0:	40020458 	.word	0x40020458
 801cee4:	40020470 	.word	0x40020470
 801cee8:	40020488 	.word	0x40020488
 801ceec:	400204a0 	.word	0x400204a0
 801cef0:	400204b8 	.word	0x400204b8
 801cef4:	58025408 	.word	0x58025408
 801cef8:	5802541c 	.word	0x5802541c
 801cefc:	58025430 	.word	0x58025430
 801cf00:	58025444 	.word	0x58025444
 801cf04:	58025458 	.word	0x58025458
 801cf08:	5802546c 	.word	0x5802546c
 801cf0c:	58025480 	.word	0x58025480
 801cf10:	58025494 	.word	0x58025494

0801cf14 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b08a      	sub	sp, #40	@ 0x28
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	460b      	mov	r3, r1
 801cf1e:	607a      	str	r2, [r7, #4]
 801cf20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801cf22:	2300      	movs	r3, #0
 801cf24:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 801cf26:	f7fe fe7d 	bl	801bc24 <HAL_GetTick>
 801cf2a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d101      	bne.n	801cf36 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801cf32:	2301      	movs	r3, #1
 801cf34:	e374      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801cf3c:	b2db      	uxtb	r3, r3
 801cf3e:	2b02      	cmp	r3, #2
 801cf40:	d008      	beq.n	801cf54 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	2280      	movs	r2, #128	@ 0x80
 801cf46:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801cf50:	2301      	movs	r3, #1
 801cf52:	e365      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	4a7b      	ldr	r2, [pc, #492]	@ (801d148 <HAL_DMA_PollForTransfer+0x234>)
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	d04a      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	4a7a      	ldr	r2, [pc, #488]	@ (801d14c <HAL_DMA_PollForTransfer+0x238>)
 801cf64:	4293      	cmp	r3, r2
 801cf66:	d045      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	4a78      	ldr	r2, [pc, #480]	@ (801d150 <HAL_DMA_PollForTransfer+0x23c>)
 801cf6e:	4293      	cmp	r3, r2
 801cf70:	d040      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	4a77      	ldr	r2, [pc, #476]	@ (801d154 <HAL_DMA_PollForTransfer+0x240>)
 801cf78:	4293      	cmp	r3, r2
 801cf7a:	d03b      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	4a75      	ldr	r2, [pc, #468]	@ (801d158 <HAL_DMA_PollForTransfer+0x244>)
 801cf82:	4293      	cmp	r3, r2
 801cf84:	d036      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4a74      	ldr	r2, [pc, #464]	@ (801d15c <HAL_DMA_PollForTransfer+0x248>)
 801cf8c:	4293      	cmp	r3, r2
 801cf8e:	d031      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	4a72      	ldr	r2, [pc, #456]	@ (801d160 <HAL_DMA_PollForTransfer+0x24c>)
 801cf96:	4293      	cmp	r3, r2
 801cf98:	d02c      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	4a71      	ldr	r2, [pc, #452]	@ (801d164 <HAL_DMA_PollForTransfer+0x250>)
 801cfa0:	4293      	cmp	r3, r2
 801cfa2:	d027      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	4a6f      	ldr	r2, [pc, #444]	@ (801d168 <HAL_DMA_PollForTransfer+0x254>)
 801cfaa:	4293      	cmp	r3, r2
 801cfac:	d022      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	4a6e      	ldr	r2, [pc, #440]	@ (801d16c <HAL_DMA_PollForTransfer+0x258>)
 801cfb4:	4293      	cmp	r3, r2
 801cfb6:	d01d      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfb8:	68fb      	ldr	r3, [r7, #12]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	4a6c      	ldr	r2, [pc, #432]	@ (801d170 <HAL_DMA_PollForTransfer+0x25c>)
 801cfbe:	4293      	cmp	r3, r2
 801cfc0:	d018      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	4a6b      	ldr	r2, [pc, #428]	@ (801d174 <HAL_DMA_PollForTransfer+0x260>)
 801cfc8:	4293      	cmp	r3, r2
 801cfca:	d013      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	4a69      	ldr	r2, [pc, #420]	@ (801d178 <HAL_DMA_PollForTransfer+0x264>)
 801cfd2:	4293      	cmp	r3, r2
 801cfd4:	d00e      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	4a68      	ldr	r2, [pc, #416]	@ (801d17c <HAL_DMA_PollForTransfer+0x268>)
 801cfdc:	4293      	cmp	r3, r2
 801cfde:	d009      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	4a66      	ldr	r2, [pc, #408]	@ (801d180 <HAL_DMA_PollForTransfer+0x26c>)
 801cfe6:	4293      	cmp	r3, r2
 801cfe8:	d004      	beq.n	801cff4 <HAL_DMA_PollForTransfer+0xe0>
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	4a65      	ldr	r2, [pc, #404]	@ (801d184 <HAL_DMA_PollForTransfer+0x270>)
 801cff0:	4293      	cmp	r3, r2
 801cff2:	d101      	bne.n	801cff8 <HAL_DMA_PollForTransfer+0xe4>
 801cff4:	2301      	movs	r3, #1
 801cff6:	e000      	b.n	801cffa <HAL_DMA_PollForTransfer+0xe6>
 801cff8:	2300      	movs	r3, #0
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d028      	beq.n	801d050 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d005      	beq.n	801d018 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d012:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801d014:	2301      	movs	r3, #1
 801d016:	e303      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d018:	7afb      	ldrb	r3, [r7, #11]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d108      	bne.n	801d030 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d022:	f003 031f 	and.w	r3, r3, #31
 801d026:	2220      	movs	r2, #32
 801d028:	fa02 f303 	lsl.w	r3, r2, r3
 801d02c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d02e:	e007      	b.n	801d040 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d034:	f003 031f 	and.w	r3, r3, #31
 801d038:	2210      	movs	r2, #16
 801d03a:	fa02 f303 	lsl.w	r3, r2, r3
 801d03e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d044:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d04a:	3308      	adds	r3, #8
 801d04c:	61fb      	str	r3, [r7, #28]
 801d04e:	e1d5      	b.n	801d3fc <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801d050:	68fb      	ldr	r3, [r7, #12]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	f003 0320 	and.w	r3, r3, #32
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d005      	beq.n	801d06a <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d064:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801d066:	2301      	movs	r3, #1
 801d068:	e2da      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d06a:	7afb      	ldrb	r3, [r7, #11]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d108      	bne.n	801d082 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d074:	f003 031f 	and.w	r3, r3, #31
 801d078:	2202      	movs	r2, #2
 801d07a:	fa02 f303 	lsl.w	r3, r2, r3
 801d07e:	627b      	str	r3, [r7, #36]	@ 0x24
 801d080:	e007      	b.n	801d092 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d086:	f003 031f 	and.w	r3, r3, #31
 801d08a:	2204      	movs	r2, #4
 801d08c:	fa02 f303 	lsl.w	r3, r2, r3
 801d090:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d096:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d09c:	3304      	adds	r3, #4
 801d09e:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d0a0:	e1ac      	b.n	801d3fc <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	4a28      	ldr	r2, [pc, #160]	@ (801d148 <HAL_DMA_PollForTransfer+0x234>)
 801d0a8:	4293      	cmp	r3, r2
 801d0aa:	d04a      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	4a26      	ldr	r2, [pc, #152]	@ (801d14c <HAL_DMA_PollForTransfer+0x238>)
 801d0b2:	4293      	cmp	r3, r2
 801d0b4:	d045      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	4a25      	ldr	r2, [pc, #148]	@ (801d150 <HAL_DMA_PollForTransfer+0x23c>)
 801d0bc:	4293      	cmp	r3, r2
 801d0be:	d040      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	4a23      	ldr	r2, [pc, #140]	@ (801d154 <HAL_DMA_PollForTransfer+0x240>)
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	d03b      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	4a22      	ldr	r2, [pc, #136]	@ (801d158 <HAL_DMA_PollForTransfer+0x244>)
 801d0d0:	4293      	cmp	r3, r2
 801d0d2:	d036      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	4a20      	ldr	r2, [pc, #128]	@ (801d15c <HAL_DMA_PollForTransfer+0x248>)
 801d0da:	4293      	cmp	r3, r2
 801d0dc:	d031      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	4a1f      	ldr	r2, [pc, #124]	@ (801d160 <HAL_DMA_PollForTransfer+0x24c>)
 801d0e4:	4293      	cmp	r3, r2
 801d0e6:	d02c      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	4a1d      	ldr	r2, [pc, #116]	@ (801d164 <HAL_DMA_PollForTransfer+0x250>)
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	d027      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0f2:	68fb      	ldr	r3, [r7, #12]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	4a1c      	ldr	r2, [pc, #112]	@ (801d168 <HAL_DMA_PollForTransfer+0x254>)
 801d0f8:	4293      	cmp	r3, r2
 801d0fa:	d022      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	4a1a      	ldr	r2, [pc, #104]	@ (801d16c <HAL_DMA_PollForTransfer+0x258>)
 801d102:	4293      	cmp	r3, r2
 801d104:	d01d      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	4a19      	ldr	r2, [pc, #100]	@ (801d170 <HAL_DMA_PollForTransfer+0x25c>)
 801d10c:	4293      	cmp	r3, r2
 801d10e:	d018      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	4a17      	ldr	r2, [pc, #92]	@ (801d174 <HAL_DMA_PollForTransfer+0x260>)
 801d116:	4293      	cmp	r3, r2
 801d118:	d013      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	4a16      	ldr	r2, [pc, #88]	@ (801d178 <HAL_DMA_PollForTransfer+0x264>)
 801d120:	4293      	cmp	r3, r2
 801d122:	d00e      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	4a14      	ldr	r2, [pc, #80]	@ (801d17c <HAL_DMA_PollForTransfer+0x268>)
 801d12a:	4293      	cmp	r3, r2
 801d12c:	d009      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	4a13      	ldr	r2, [pc, #76]	@ (801d180 <HAL_DMA_PollForTransfer+0x26c>)
 801d134:	4293      	cmp	r3, r2
 801d136:	d004      	beq.n	801d142 <HAL_DMA_PollForTransfer+0x22e>
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	4a11      	ldr	r2, [pc, #68]	@ (801d184 <HAL_DMA_PollForTransfer+0x270>)
 801d13e:	4293      	cmp	r3, r2
 801d140:	d122      	bne.n	801d188 <HAL_DMA_PollForTransfer+0x274>
 801d142:	2301      	movs	r3, #1
 801d144:	e021      	b.n	801d18a <HAL_DMA_PollForTransfer+0x276>
 801d146:	bf00      	nop
 801d148:	40020010 	.word	0x40020010
 801d14c:	40020028 	.word	0x40020028
 801d150:	40020040 	.word	0x40020040
 801d154:	40020058 	.word	0x40020058
 801d158:	40020070 	.word	0x40020070
 801d15c:	40020088 	.word	0x40020088
 801d160:	400200a0 	.word	0x400200a0
 801d164:	400200b8 	.word	0x400200b8
 801d168:	40020410 	.word	0x40020410
 801d16c:	40020428 	.word	0x40020428
 801d170:	40020440 	.word	0x40020440
 801d174:	40020458 	.word	0x40020458
 801d178:	40020470 	.word	0x40020470
 801d17c:	40020488 	.word	0x40020488
 801d180:	400204a0 	.word	0x400204a0
 801d184:	400204b8 	.word	0x400204b8
 801d188:	2300      	movs	r3, #0
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d057      	beq.n	801d23e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d18e:	6a3b      	ldr	r3, [r7, #32]
 801d190:	681a      	ldr	r2, [r3, #0]
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d196:	f003 031f 	and.w	r3, r3, #31
 801d19a:	fa22 f303 	lsr.w	r3, r2, r3
 801d19e:	f003 0301 	and.w	r3, r3, #1
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d00d      	beq.n	801d1c2 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d1aa:	f043 0202 	orr.w	r2, r3, #2
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1b6:	f003 031f 	and.w	r3, r3, #31
 801d1ba:	2201      	movs	r2, #1
 801d1bc:	409a      	lsls	r2, r3
 801d1be:	69fb      	ldr	r3, [r7, #28]
 801d1c0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d1c2:	6a3b      	ldr	r3, [r7, #32]
 801d1c4:	681a      	ldr	r2, [r3, #0]
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1ca:	f003 031f 	and.w	r3, r3, #31
 801d1ce:	2104      	movs	r1, #4
 801d1d0:	fa01 f303 	lsl.w	r3, r1, r3
 801d1d4:	4013      	ands	r3, r2
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d00d      	beq.n	801d1f6 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d1de:	f043 0204 	orr.w	r2, r3, #4
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1ea:	f003 031f 	and.w	r3, r3, #31
 801d1ee:	2204      	movs	r2, #4
 801d1f0:	409a      	lsls	r2, r3
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d1f6:	6a3b      	ldr	r3, [r7, #32]
 801d1f8:	681a      	ldr	r2, [r3, #0]
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d1fe:	f003 031f 	and.w	r3, r3, #31
 801d202:	2108      	movs	r1, #8
 801d204:	fa01 f303 	lsl.w	r3, r1, r3
 801d208:	4013      	ands	r3, r2
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d038      	beq.n	801d280 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d212:	f043 0201 	orr.w	r2, r3, #1
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d21e:	f003 031f 	and.w	r3, r3, #31
 801d222:	2208      	movs	r2, #8
 801d224:	409a      	lsls	r2, r3
 801d226:	69fb      	ldr	r3, [r7, #28]
 801d228:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	2201      	movs	r2, #1
 801d22e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	2200      	movs	r2, #0
 801d236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d23a:	2301      	movs	r3, #1
 801d23c:	e1f0      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d23e:	6a3b      	ldr	r3, [r7, #32]
 801d240:	681a      	ldr	r2, [r3, #0]
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d246:	f003 031f 	and.w	r3, r3, #31
 801d24a:	2108      	movs	r1, #8
 801d24c:	fa01 f303 	lsl.w	r3, r1, r3
 801d250:	4013      	ands	r3, r2
 801d252:	2b00      	cmp	r3, #0
 801d254:	d014      	beq.n	801d280 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d25a:	f003 031f 	and.w	r3, r3, #31
 801d25e:	2201      	movs	r2, #1
 801d260:	409a      	lsls	r2, r3
 801d262:	6a3b      	ldr	r3, [r7, #32]
 801d264:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	2201      	movs	r2, #1
 801d26a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	2201      	movs	r2, #1
 801d270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	2200      	movs	r2, #0
 801d278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d27c:	2301      	movs	r3, #1
 801d27e:	e1cf      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d286:	d012      	beq.n	801d2ae <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 801d288:	f7fe fccc 	bl	801bc24 <HAL_GetTick>
 801d28c:	4602      	mov	r2, r0
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	1ad3      	subs	r3, r2, r3
 801d292:	687a      	ldr	r2, [r7, #4]
 801d294:	429a      	cmp	r2, r3
 801d296:	d302      	bcc.n	801d29e <HAL_DMA_PollForTransfer+0x38a>
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d107      	bne.n	801d2ae <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	2220      	movs	r2, #32
 801d2a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801d2a4:	68f8      	ldr	r0, [r7, #12]
 801d2a6:	f7ff fb17 	bl	801c8d8 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	e1b8      	b.n	801d620 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	4a81      	ldr	r2, [pc, #516]	@ (801d4b8 <HAL_DMA_PollForTransfer+0x5a4>)
 801d2b4:	4293      	cmp	r3, r2
 801d2b6:	d072      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	4a7f      	ldr	r2, [pc, #508]	@ (801d4bc <HAL_DMA_PollForTransfer+0x5a8>)
 801d2be:	4293      	cmp	r3, r2
 801d2c0:	d06d      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	4a7e      	ldr	r2, [pc, #504]	@ (801d4c0 <HAL_DMA_PollForTransfer+0x5ac>)
 801d2c8:	4293      	cmp	r3, r2
 801d2ca:	d068      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	4a7c      	ldr	r2, [pc, #496]	@ (801d4c4 <HAL_DMA_PollForTransfer+0x5b0>)
 801d2d2:	4293      	cmp	r3, r2
 801d2d4:	d063      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	4a7b      	ldr	r2, [pc, #492]	@ (801d4c8 <HAL_DMA_PollForTransfer+0x5b4>)
 801d2dc:	4293      	cmp	r3, r2
 801d2de:	d05e      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	4a79      	ldr	r2, [pc, #484]	@ (801d4cc <HAL_DMA_PollForTransfer+0x5b8>)
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	d059      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	4a78      	ldr	r2, [pc, #480]	@ (801d4d0 <HAL_DMA_PollForTransfer+0x5bc>)
 801d2f0:	4293      	cmp	r3, r2
 801d2f2:	d054      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	4a76      	ldr	r2, [pc, #472]	@ (801d4d4 <HAL_DMA_PollForTransfer+0x5c0>)
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	d04f      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	4a75      	ldr	r2, [pc, #468]	@ (801d4d8 <HAL_DMA_PollForTransfer+0x5c4>)
 801d304:	4293      	cmp	r3, r2
 801d306:	d04a      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	4a73      	ldr	r2, [pc, #460]	@ (801d4dc <HAL_DMA_PollForTransfer+0x5c8>)
 801d30e:	4293      	cmp	r3, r2
 801d310:	d045      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	4a72      	ldr	r2, [pc, #456]	@ (801d4e0 <HAL_DMA_PollForTransfer+0x5cc>)
 801d318:	4293      	cmp	r3, r2
 801d31a:	d040      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	4a70      	ldr	r2, [pc, #448]	@ (801d4e4 <HAL_DMA_PollForTransfer+0x5d0>)
 801d322:	4293      	cmp	r3, r2
 801d324:	d03b      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	4a6f      	ldr	r2, [pc, #444]	@ (801d4e8 <HAL_DMA_PollForTransfer+0x5d4>)
 801d32c:	4293      	cmp	r3, r2
 801d32e:	d036      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	4a6d      	ldr	r2, [pc, #436]	@ (801d4ec <HAL_DMA_PollForTransfer+0x5d8>)
 801d336:	4293      	cmp	r3, r2
 801d338:	d031      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	4a6c      	ldr	r2, [pc, #432]	@ (801d4f0 <HAL_DMA_PollForTransfer+0x5dc>)
 801d340:	4293      	cmp	r3, r2
 801d342:	d02c      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	4a6a      	ldr	r2, [pc, #424]	@ (801d4f4 <HAL_DMA_PollForTransfer+0x5e0>)
 801d34a:	4293      	cmp	r3, r2
 801d34c:	d027      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	4a69      	ldr	r2, [pc, #420]	@ (801d4f8 <HAL_DMA_PollForTransfer+0x5e4>)
 801d354:	4293      	cmp	r3, r2
 801d356:	d022      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	4a67      	ldr	r2, [pc, #412]	@ (801d4fc <HAL_DMA_PollForTransfer+0x5e8>)
 801d35e:	4293      	cmp	r3, r2
 801d360:	d01d      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	4a66      	ldr	r2, [pc, #408]	@ (801d500 <HAL_DMA_PollForTransfer+0x5ec>)
 801d368:	4293      	cmp	r3, r2
 801d36a:	d018      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	4a64      	ldr	r2, [pc, #400]	@ (801d504 <HAL_DMA_PollForTransfer+0x5f0>)
 801d372:	4293      	cmp	r3, r2
 801d374:	d013      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	4a63      	ldr	r2, [pc, #396]	@ (801d508 <HAL_DMA_PollForTransfer+0x5f4>)
 801d37c:	4293      	cmp	r3, r2
 801d37e:	d00e      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	4a61      	ldr	r2, [pc, #388]	@ (801d50c <HAL_DMA_PollForTransfer+0x5f8>)
 801d386:	4293      	cmp	r3, r2
 801d388:	d009      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d38a:	68fb      	ldr	r3, [r7, #12]
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	4a60      	ldr	r2, [pc, #384]	@ (801d510 <HAL_DMA_PollForTransfer+0x5fc>)
 801d390:	4293      	cmp	r3, r2
 801d392:	d004      	beq.n	801d39e <HAL_DMA_PollForTransfer+0x48a>
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	4a5e      	ldr	r2, [pc, #376]	@ (801d514 <HAL_DMA_PollForTransfer+0x600>)
 801d39a:	4293      	cmp	r3, r2
 801d39c:	d101      	bne.n	801d3a2 <HAL_DMA_PollForTransfer+0x48e>
 801d39e:	2301      	movs	r3, #1
 801d3a0:	e000      	b.n	801d3a4 <HAL_DMA_PollForTransfer+0x490>
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d029      	beq.n	801d3fc <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d012      	beq.n	801d3d6 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3b4:	681a      	ldr	r2, [r3, #0]
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3ba:	4013      	ands	r3, r2
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d00a      	beq.n	801d3d6 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3c4:	68fa      	ldr	r2, [r7, #12]
 801d3c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d3c8:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d3ce:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d3da:	681a      	ldr	r2, [r3, #0]
 801d3dc:	68fb      	ldr	r3, [r7, #12]
 801d3de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d3e0:	4013      	ands	r3, r2
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d00a      	beq.n	801d3fc <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d3ea:	68fa      	ldr	r2, [r7, #12]
 801d3ec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d3ee:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d3f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d3fc:	6a3b      	ldr	r3, [r7, #32]
 801d3fe:	681a      	ldr	r2, [r3, #0]
 801d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d402:	4013      	ands	r3, r2
 801d404:	2b00      	cmp	r3, #0
 801d406:	f43f ae4c 	beq.w	801d0a2 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d40a:	7afb      	ldrb	r3, [r7, #11]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	f040 80a0 	bne.w	801d552 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	4a28      	ldr	r2, [pc, #160]	@ (801d4b8 <HAL_DMA_PollForTransfer+0x5a4>)
 801d418:	4293      	cmp	r3, r2
 801d41a:	d04a      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	4a26      	ldr	r2, [pc, #152]	@ (801d4bc <HAL_DMA_PollForTransfer+0x5a8>)
 801d422:	4293      	cmp	r3, r2
 801d424:	d045      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	4a25      	ldr	r2, [pc, #148]	@ (801d4c0 <HAL_DMA_PollForTransfer+0x5ac>)
 801d42c:	4293      	cmp	r3, r2
 801d42e:	d040      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	4a23      	ldr	r2, [pc, #140]	@ (801d4c4 <HAL_DMA_PollForTransfer+0x5b0>)
 801d436:	4293      	cmp	r3, r2
 801d438:	d03b      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	4a22      	ldr	r2, [pc, #136]	@ (801d4c8 <HAL_DMA_PollForTransfer+0x5b4>)
 801d440:	4293      	cmp	r3, r2
 801d442:	d036      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	4a20      	ldr	r2, [pc, #128]	@ (801d4cc <HAL_DMA_PollForTransfer+0x5b8>)
 801d44a:	4293      	cmp	r3, r2
 801d44c:	d031      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	4a1f      	ldr	r2, [pc, #124]	@ (801d4d0 <HAL_DMA_PollForTransfer+0x5bc>)
 801d454:	4293      	cmp	r3, r2
 801d456:	d02c      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	4a1d      	ldr	r2, [pc, #116]	@ (801d4d4 <HAL_DMA_PollForTransfer+0x5c0>)
 801d45e:	4293      	cmp	r3, r2
 801d460:	d027      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	4a1c      	ldr	r2, [pc, #112]	@ (801d4d8 <HAL_DMA_PollForTransfer+0x5c4>)
 801d468:	4293      	cmp	r3, r2
 801d46a:	d022      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	4a1a      	ldr	r2, [pc, #104]	@ (801d4dc <HAL_DMA_PollForTransfer+0x5c8>)
 801d472:	4293      	cmp	r3, r2
 801d474:	d01d      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4a19      	ldr	r2, [pc, #100]	@ (801d4e0 <HAL_DMA_PollForTransfer+0x5cc>)
 801d47c:	4293      	cmp	r3, r2
 801d47e:	d018      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	4a17      	ldr	r2, [pc, #92]	@ (801d4e4 <HAL_DMA_PollForTransfer+0x5d0>)
 801d486:	4293      	cmp	r3, r2
 801d488:	d013      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	4a16      	ldr	r2, [pc, #88]	@ (801d4e8 <HAL_DMA_PollForTransfer+0x5d4>)
 801d490:	4293      	cmp	r3, r2
 801d492:	d00e      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	4a14      	ldr	r2, [pc, #80]	@ (801d4ec <HAL_DMA_PollForTransfer+0x5d8>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d009      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	4a13      	ldr	r2, [pc, #76]	@ (801d4f0 <HAL_DMA_PollForTransfer+0x5dc>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d004      	beq.n	801d4b2 <HAL_DMA_PollForTransfer+0x59e>
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	4a11      	ldr	r2, [pc, #68]	@ (801d4f4 <HAL_DMA_PollForTransfer+0x5e0>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d132      	bne.n	801d518 <HAL_DMA_PollForTransfer+0x604>
 801d4b2:	2301      	movs	r3, #1
 801d4b4:	e031      	b.n	801d51a <HAL_DMA_PollForTransfer+0x606>
 801d4b6:	bf00      	nop
 801d4b8:	40020010 	.word	0x40020010
 801d4bc:	40020028 	.word	0x40020028
 801d4c0:	40020040 	.word	0x40020040
 801d4c4:	40020058 	.word	0x40020058
 801d4c8:	40020070 	.word	0x40020070
 801d4cc:	40020088 	.word	0x40020088
 801d4d0:	400200a0 	.word	0x400200a0
 801d4d4:	400200b8 	.word	0x400200b8
 801d4d8:	40020410 	.word	0x40020410
 801d4dc:	40020428 	.word	0x40020428
 801d4e0:	40020440 	.word	0x40020440
 801d4e4:	40020458 	.word	0x40020458
 801d4e8:	40020470 	.word	0x40020470
 801d4ec:	40020488 	.word	0x40020488
 801d4f0:	400204a0 	.word	0x400204a0
 801d4f4:	400204b8 	.word	0x400204b8
 801d4f8:	58025408 	.word	0x58025408
 801d4fc:	5802541c 	.word	0x5802541c
 801d500:	58025430 	.word	0x58025430
 801d504:	58025444 	.word	0x58025444
 801d508:	58025458 	.word	0x58025458
 801d50c:	5802546c 	.word	0x5802546c
 801d510:	58025480 	.word	0x58025480
 801d514:	58025494 	.word	0x58025494
 801d518:	2300      	movs	r3, #0
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d008      	beq.n	801d530 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d522:	f003 031f 	and.w	r3, r3, #31
 801d526:	2230      	movs	r2, #48	@ 0x30
 801d528:	409a      	lsls	r2, r3
 801d52a:	69fb      	ldr	r3, [r7, #28]
 801d52c:	601a      	str	r2, [r3, #0]
 801d52e:	e007      	b.n	801d540 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d534:	f003 031f 	and.w	r3, r3, #31
 801d538:	2202      	movs	r2, #2
 801d53a:	409a      	lsls	r2, r3
 801d53c:	69fb      	ldr	r3, [r7, #28]
 801d53e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	2201      	movs	r2, #1
 801d544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	2200      	movs	r2, #0
 801d54c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801d550:	e065      	b.n	801d61e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	4a34      	ldr	r2, [pc, #208]	@ (801d628 <HAL_DMA_PollForTransfer+0x714>)
 801d558:	4293      	cmp	r3, r2
 801d55a:	d04a      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d55c:	68fb      	ldr	r3, [r7, #12]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	4a32      	ldr	r2, [pc, #200]	@ (801d62c <HAL_DMA_PollForTransfer+0x718>)
 801d562:	4293      	cmp	r3, r2
 801d564:	d045      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	4a31      	ldr	r2, [pc, #196]	@ (801d630 <HAL_DMA_PollForTransfer+0x71c>)
 801d56c:	4293      	cmp	r3, r2
 801d56e:	d040      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	4a2f      	ldr	r2, [pc, #188]	@ (801d634 <HAL_DMA_PollForTransfer+0x720>)
 801d576:	4293      	cmp	r3, r2
 801d578:	d03b      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	4a2e      	ldr	r2, [pc, #184]	@ (801d638 <HAL_DMA_PollForTransfer+0x724>)
 801d580:	4293      	cmp	r3, r2
 801d582:	d036      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	4a2c      	ldr	r2, [pc, #176]	@ (801d63c <HAL_DMA_PollForTransfer+0x728>)
 801d58a:	4293      	cmp	r3, r2
 801d58c:	d031      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	4a2b      	ldr	r2, [pc, #172]	@ (801d640 <HAL_DMA_PollForTransfer+0x72c>)
 801d594:	4293      	cmp	r3, r2
 801d596:	d02c      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	4a29      	ldr	r2, [pc, #164]	@ (801d644 <HAL_DMA_PollForTransfer+0x730>)
 801d59e:	4293      	cmp	r3, r2
 801d5a0:	d027      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	4a28      	ldr	r2, [pc, #160]	@ (801d648 <HAL_DMA_PollForTransfer+0x734>)
 801d5a8:	4293      	cmp	r3, r2
 801d5aa:	d022      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	4a26      	ldr	r2, [pc, #152]	@ (801d64c <HAL_DMA_PollForTransfer+0x738>)
 801d5b2:	4293      	cmp	r3, r2
 801d5b4:	d01d      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	4a25      	ldr	r2, [pc, #148]	@ (801d650 <HAL_DMA_PollForTransfer+0x73c>)
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	d018      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	4a23      	ldr	r2, [pc, #140]	@ (801d654 <HAL_DMA_PollForTransfer+0x740>)
 801d5c6:	4293      	cmp	r3, r2
 801d5c8:	d013      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	4a22      	ldr	r2, [pc, #136]	@ (801d658 <HAL_DMA_PollForTransfer+0x744>)
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d00e      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	4a20      	ldr	r2, [pc, #128]	@ (801d65c <HAL_DMA_PollForTransfer+0x748>)
 801d5da:	4293      	cmp	r3, r2
 801d5dc:	d009      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	4a1f      	ldr	r2, [pc, #124]	@ (801d660 <HAL_DMA_PollForTransfer+0x74c>)
 801d5e4:	4293      	cmp	r3, r2
 801d5e6:	d004      	beq.n	801d5f2 <HAL_DMA_PollForTransfer+0x6de>
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	4a1d      	ldr	r2, [pc, #116]	@ (801d664 <HAL_DMA_PollForTransfer+0x750>)
 801d5ee:	4293      	cmp	r3, r2
 801d5f0:	d101      	bne.n	801d5f6 <HAL_DMA_PollForTransfer+0x6e2>
 801d5f2:	2301      	movs	r3, #1
 801d5f4:	e000      	b.n	801d5f8 <HAL_DMA_PollForTransfer+0x6e4>
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d008      	beq.n	801d60e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d600:	f003 031f 	and.w	r3, r3, #31
 801d604:	2210      	movs	r2, #16
 801d606:	409a      	lsls	r2, r3
 801d608:	69fb      	ldr	r3, [r7, #28]
 801d60a:	601a      	str	r2, [r3, #0]
 801d60c:	e007      	b.n	801d61e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d612:	f003 031f 	and.w	r3, r3, #31
 801d616:	2204      	movs	r2, #4
 801d618:	409a      	lsls	r2, r3
 801d61a:	69fb      	ldr	r3, [r7, #28]
 801d61c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801d61e:	7efb      	ldrb	r3, [r7, #27]
}
 801d620:	4618      	mov	r0, r3
 801d622:	3728      	adds	r7, #40	@ 0x28
 801d624:	46bd      	mov	sp, r7
 801d626:	bd80      	pop	{r7, pc}
 801d628:	40020010 	.word	0x40020010
 801d62c:	40020028 	.word	0x40020028
 801d630:	40020040 	.word	0x40020040
 801d634:	40020058 	.word	0x40020058
 801d638:	40020070 	.word	0x40020070
 801d63c:	40020088 	.word	0x40020088
 801d640:	400200a0 	.word	0x400200a0
 801d644:	400200b8 	.word	0x400200b8
 801d648:	40020410 	.word	0x40020410
 801d64c:	40020428 	.word	0x40020428
 801d650:	40020440 	.word	0x40020440
 801d654:	40020458 	.word	0x40020458
 801d658:	40020470 	.word	0x40020470
 801d65c:	40020488 	.word	0x40020488
 801d660:	400204a0 	.word	0x400204a0
 801d664:	400204b8 	.word	0x400204b8

0801d668 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d668:	b480      	push	{r7}
 801d66a:	b087      	sub	sp, #28
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	60f8      	str	r0, [r7, #12]
 801d670:	60b9      	str	r1, [r7, #8]
 801d672:	607a      	str	r2, [r7, #4]
 801d674:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d67a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d680:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d682:	68fb      	ldr	r3, [r7, #12]
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	4a7f      	ldr	r2, [pc, #508]	@ (801d884 <DMA_SetConfig+0x21c>)
 801d688:	4293      	cmp	r3, r2
 801d68a:	d072      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	4a7d      	ldr	r2, [pc, #500]	@ (801d888 <DMA_SetConfig+0x220>)
 801d692:	4293      	cmp	r3, r2
 801d694:	d06d      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	4a7c      	ldr	r2, [pc, #496]	@ (801d88c <DMA_SetConfig+0x224>)
 801d69c:	4293      	cmp	r3, r2
 801d69e:	d068      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	4a7a      	ldr	r2, [pc, #488]	@ (801d890 <DMA_SetConfig+0x228>)
 801d6a6:	4293      	cmp	r3, r2
 801d6a8:	d063      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6aa:	68fb      	ldr	r3, [r7, #12]
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	4a79      	ldr	r2, [pc, #484]	@ (801d894 <DMA_SetConfig+0x22c>)
 801d6b0:	4293      	cmp	r3, r2
 801d6b2:	d05e      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	4a77      	ldr	r2, [pc, #476]	@ (801d898 <DMA_SetConfig+0x230>)
 801d6ba:	4293      	cmp	r3, r2
 801d6bc:	d059      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	4a76      	ldr	r2, [pc, #472]	@ (801d89c <DMA_SetConfig+0x234>)
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	d054      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	4a74      	ldr	r2, [pc, #464]	@ (801d8a0 <DMA_SetConfig+0x238>)
 801d6ce:	4293      	cmp	r3, r2
 801d6d0:	d04f      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	4a73      	ldr	r2, [pc, #460]	@ (801d8a4 <DMA_SetConfig+0x23c>)
 801d6d8:	4293      	cmp	r3, r2
 801d6da:	d04a      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	4a71      	ldr	r2, [pc, #452]	@ (801d8a8 <DMA_SetConfig+0x240>)
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	d045      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	4a70      	ldr	r2, [pc, #448]	@ (801d8ac <DMA_SetConfig+0x244>)
 801d6ec:	4293      	cmp	r3, r2
 801d6ee:	d040      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	4a6e      	ldr	r2, [pc, #440]	@ (801d8b0 <DMA_SetConfig+0x248>)
 801d6f6:	4293      	cmp	r3, r2
 801d6f8:	d03b      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	4a6d      	ldr	r2, [pc, #436]	@ (801d8b4 <DMA_SetConfig+0x24c>)
 801d700:	4293      	cmp	r3, r2
 801d702:	d036      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	4a6b      	ldr	r2, [pc, #428]	@ (801d8b8 <DMA_SetConfig+0x250>)
 801d70a:	4293      	cmp	r3, r2
 801d70c:	d031      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	4a6a      	ldr	r2, [pc, #424]	@ (801d8bc <DMA_SetConfig+0x254>)
 801d714:	4293      	cmp	r3, r2
 801d716:	d02c      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	4a68      	ldr	r2, [pc, #416]	@ (801d8c0 <DMA_SetConfig+0x258>)
 801d71e:	4293      	cmp	r3, r2
 801d720:	d027      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	4a67      	ldr	r2, [pc, #412]	@ (801d8c4 <DMA_SetConfig+0x25c>)
 801d728:	4293      	cmp	r3, r2
 801d72a:	d022      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	4a65      	ldr	r2, [pc, #404]	@ (801d8c8 <DMA_SetConfig+0x260>)
 801d732:	4293      	cmp	r3, r2
 801d734:	d01d      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	4a64      	ldr	r2, [pc, #400]	@ (801d8cc <DMA_SetConfig+0x264>)
 801d73c:	4293      	cmp	r3, r2
 801d73e:	d018      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	4a62      	ldr	r2, [pc, #392]	@ (801d8d0 <DMA_SetConfig+0x268>)
 801d746:	4293      	cmp	r3, r2
 801d748:	d013      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4a61      	ldr	r2, [pc, #388]	@ (801d8d4 <DMA_SetConfig+0x26c>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d00e      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4a5f      	ldr	r2, [pc, #380]	@ (801d8d8 <DMA_SetConfig+0x270>)
 801d75a:	4293      	cmp	r3, r2
 801d75c:	d009      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	4a5e      	ldr	r2, [pc, #376]	@ (801d8dc <DMA_SetConfig+0x274>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d004      	beq.n	801d772 <DMA_SetConfig+0x10a>
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	4a5c      	ldr	r2, [pc, #368]	@ (801d8e0 <DMA_SetConfig+0x278>)
 801d76e:	4293      	cmp	r3, r2
 801d770:	d101      	bne.n	801d776 <DMA_SetConfig+0x10e>
 801d772:	2301      	movs	r3, #1
 801d774:	e000      	b.n	801d778 <DMA_SetConfig+0x110>
 801d776:	2300      	movs	r3, #0
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d00d      	beq.n	801d798 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d780:	68fa      	ldr	r2, [r7, #12]
 801d782:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d784:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d004      	beq.n	801d798 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d792:	68fa      	ldr	r2, [r7, #12]
 801d794:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d796:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	4a39      	ldr	r2, [pc, #228]	@ (801d884 <DMA_SetConfig+0x21c>)
 801d79e:	4293      	cmp	r3, r2
 801d7a0:	d04a      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	4a38      	ldr	r2, [pc, #224]	@ (801d888 <DMA_SetConfig+0x220>)
 801d7a8:	4293      	cmp	r3, r2
 801d7aa:	d045      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	4a36      	ldr	r2, [pc, #216]	@ (801d88c <DMA_SetConfig+0x224>)
 801d7b2:	4293      	cmp	r3, r2
 801d7b4:	d040      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	4a35      	ldr	r2, [pc, #212]	@ (801d890 <DMA_SetConfig+0x228>)
 801d7bc:	4293      	cmp	r3, r2
 801d7be:	d03b      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	4a33      	ldr	r2, [pc, #204]	@ (801d894 <DMA_SetConfig+0x22c>)
 801d7c6:	4293      	cmp	r3, r2
 801d7c8:	d036      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	4a32      	ldr	r2, [pc, #200]	@ (801d898 <DMA_SetConfig+0x230>)
 801d7d0:	4293      	cmp	r3, r2
 801d7d2:	d031      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	4a30      	ldr	r2, [pc, #192]	@ (801d89c <DMA_SetConfig+0x234>)
 801d7da:	4293      	cmp	r3, r2
 801d7dc:	d02c      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	4a2f      	ldr	r2, [pc, #188]	@ (801d8a0 <DMA_SetConfig+0x238>)
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	d027      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	4a2d      	ldr	r2, [pc, #180]	@ (801d8a4 <DMA_SetConfig+0x23c>)
 801d7ee:	4293      	cmp	r3, r2
 801d7f0:	d022      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	4a2c      	ldr	r2, [pc, #176]	@ (801d8a8 <DMA_SetConfig+0x240>)
 801d7f8:	4293      	cmp	r3, r2
 801d7fa:	d01d      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	4a2a      	ldr	r2, [pc, #168]	@ (801d8ac <DMA_SetConfig+0x244>)
 801d802:	4293      	cmp	r3, r2
 801d804:	d018      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	4a29      	ldr	r2, [pc, #164]	@ (801d8b0 <DMA_SetConfig+0x248>)
 801d80c:	4293      	cmp	r3, r2
 801d80e:	d013      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	4a27      	ldr	r2, [pc, #156]	@ (801d8b4 <DMA_SetConfig+0x24c>)
 801d816:	4293      	cmp	r3, r2
 801d818:	d00e      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	4a26      	ldr	r2, [pc, #152]	@ (801d8b8 <DMA_SetConfig+0x250>)
 801d820:	4293      	cmp	r3, r2
 801d822:	d009      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	4a24      	ldr	r2, [pc, #144]	@ (801d8bc <DMA_SetConfig+0x254>)
 801d82a:	4293      	cmp	r3, r2
 801d82c:	d004      	beq.n	801d838 <DMA_SetConfig+0x1d0>
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	4a23      	ldr	r2, [pc, #140]	@ (801d8c0 <DMA_SetConfig+0x258>)
 801d834:	4293      	cmp	r3, r2
 801d836:	d101      	bne.n	801d83c <DMA_SetConfig+0x1d4>
 801d838:	2301      	movs	r3, #1
 801d83a:	e000      	b.n	801d83e <DMA_SetConfig+0x1d6>
 801d83c:	2300      	movs	r3, #0
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d059      	beq.n	801d8f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d846:	f003 031f 	and.w	r3, r3, #31
 801d84a:	223f      	movs	r2, #63	@ 0x3f
 801d84c:	409a      	lsls	r2, r3
 801d84e:	697b      	ldr	r3, [r7, #20]
 801d850:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	681a      	ldr	r2, [r3, #0]
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801d860:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	683a      	ldr	r2, [r7, #0]
 801d868:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	689b      	ldr	r3, [r3, #8]
 801d86e:	2b40      	cmp	r3, #64	@ 0x40
 801d870:	d138      	bne.n	801d8e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	68ba      	ldr	r2, [r7, #8]
 801d880:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801d882:	e086      	b.n	801d992 <DMA_SetConfig+0x32a>
 801d884:	40020010 	.word	0x40020010
 801d888:	40020028 	.word	0x40020028
 801d88c:	40020040 	.word	0x40020040
 801d890:	40020058 	.word	0x40020058
 801d894:	40020070 	.word	0x40020070
 801d898:	40020088 	.word	0x40020088
 801d89c:	400200a0 	.word	0x400200a0
 801d8a0:	400200b8 	.word	0x400200b8
 801d8a4:	40020410 	.word	0x40020410
 801d8a8:	40020428 	.word	0x40020428
 801d8ac:	40020440 	.word	0x40020440
 801d8b0:	40020458 	.word	0x40020458
 801d8b4:	40020470 	.word	0x40020470
 801d8b8:	40020488 	.word	0x40020488
 801d8bc:	400204a0 	.word	0x400204a0
 801d8c0:	400204b8 	.word	0x400204b8
 801d8c4:	58025408 	.word	0x58025408
 801d8c8:	5802541c 	.word	0x5802541c
 801d8cc:	58025430 	.word	0x58025430
 801d8d0:	58025444 	.word	0x58025444
 801d8d4:	58025458 	.word	0x58025458
 801d8d8:	5802546c 	.word	0x5802546c
 801d8dc:	58025480 	.word	0x58025480
 801d8e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	68ba      	ldr	r2, [r7, #8]
 801d8ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	687a      	ldr	r2, [r7, #4]
 801d8f2:	60da      	str	r2, [r3, #12]
}
 801d8f4:	e04d      	b.n	801d992 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	4a29      	ldr	r2, [pc, #164]	@ (801d9a0 <DMA_SetConfig+0x338>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d022      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	4a27      	ldr	r2, [pc, #156]	@ (801d9a4 <DMA_SetConfig+0x33c>)
 801d906:	4293      	cmp	r3, r2
 801d908:	d01d      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	4a26      	ldr	r2, [pc, #152]	@ (801d9a8 <DMA_SetConfig+0x340>)
 801d910:	4293      	cmp	r3, r2
 801d912:	d018      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	4a24      	ldr	r2, [pc, #144]	@ (801d9ac <DMA_SetConfig+0x344>)
 801d91a:	4293      	cmp	r3, r2
 801d91c:	d013      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	4a23      	ldr	r2, [pc, #140]	@ (801d9b0 <DMA_SetConfig+0x348>)
 801d924:	4293      	cmp	r3, r2
 801d926:	d00e      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	4a21      	ldr	r2, [pc, #132]	@ (801d9b4 <DMA_SetConfig+0x34c>)
 801d92e:	4293      	cmp	r3, r2
 801d930:	d009      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	4a20      	ldr	r2, [pc, #128]	@ (801d9b8 <DMA_SetConfig+0x350>)
 801d938:	4293      	cmp	r3, r2
 801d93a:	d004      	beq.n	801d946 <DMA_SetConfig+0x2de>
 801d93c:	68fb      	ldr	r3, [r7, #12]
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	4a1e      	ldr	r2, [pc, #120]	@ (801d9bc <DMA_SetConfig+0x354>)
 801d942:	4293      	cmp	r3, r2
 801d944:	d101      	bne.n	801d94a <DMA_SetConfig+0x2e2>
 801d946:	2301      	movs	r3, #1
 801d948:	e000      	b.n	801d94c <DMA_SetConfig+0x2e4>
 801d94a:	2300      	movs	r3, #0
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d020      	beq.n	801d992 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d954:	f003 031f 	and.w	r3, r3, #31
 801d958:	2201      	movs	r2, #1
 801d95a:	409a      	lsls	r2, r3
 801d95c:	693b      	ldr	r3, [r7, #16]
 801d95e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	683a      	ldr	r2, [r7, #0]
 801d966:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	689b      	ldr	r3, [r3, #8]
 801d96c:	2b40      	cmp	r3, #64	@ 0x40
 801d96e:	d108      	bne.n	801d982 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	687a      	ldr	r2, [r7, #4]
 801d976:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	68ba      	ldr	r2, [r7, #8]
 801d97e:	60da      	str	r2, [r3, #12]
}
 801d980:	e007      	b.n	801d992 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	68ba      	ldr	r2, [r7, #8]
 801d988:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	687a      	ldr	r2, [r7, #4]
 801d990:	60da      	str	r2, [r3, #12]
}
 801d992:	bf00      	nop
 801d994:	371c      	adds	r7, #28
 801d996:	46bd      	mov	sp, r7
 801d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d99c:	4770      	bx	lr
 801d99e:	bf00      	nop
 801d9a0:	58025408 	.word	0x58025408
 801d9a4:	5802541c 	.word	0x5802541c
 801d9a8:	58025430 	.word	0x58025430
 801d9ac:	58025444 	.word	0x58025444
 801d9b0:	58025458 	.word	0x58025458
 801d9b4:	5802546c 	.word	0x5802546c
 801d9b8:	58025480 	.word	0x58025480
 801d9bc:	58025494 	.word	0x58025494

0801d9c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801d9c0:	b480      	push	{r7}
 801d9c2:	b085      	sub	sp, #20
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	4a42      	ldr	r2, [pc, #264]	@ (801dad8 <DMA_CalcBaseAndBitshift+0x118>)
 801d9ce:	4293      	cmp	r3, r2
 801d9d0:	d04a      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	4a41      	ldr	r2, [pc, #260]	@ (801dadc <DMA_CalcBaseAndBitshift+0x11c>)
 801d9d8:	4293      	cmp	r3, r2
 801d9da:	d045      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	4a3f      	ldr	r2, [pc, #252]	@ (801dae0 <DMA_CalcBaseAndBitshift+0x120>)
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d040      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	4a3e      	ldr	r2, [pc, #248]	@ (801dae4 <DMA_CalcBaseAndBitshift+0x124>)
 801d9ec:	4293      	cmp	r3, r2
 801d9ee:	d03b      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	4a3c      	ldr	r2, [pc, #240]	@ (801dae8 <DMA_CalcBaseAndBitshift+0x128>)
 801d9f6:	4293      	cmp	r3, r2
 801d9f8:	d036      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	4a3b      	ldr	r2, [pc, #236]	@ (801daec <DMA_CalcBaseAndBitshift+0x12c>)
 801da00:	4293      	cmp	r3, r2
 801da02:	d031      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	4a39      	ldr	r2, [pc, #228]	@ (801daf0 <DMA_CalcBaseAndBitshift+0x130>)
 801da0a:	4293      	cmp	r3, r2
 801da0c:	d02c      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	681b      	ldr	r3, [r3, #0]
 801da12:	4a38      	ldr	r2, [pc, #224]	@ (801daf4 <DMA_CalcBaseAndBitshift+0x134>)
 801da14:	4293      	cmp	r3, r2
 801da16:	d027      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	4a36      	ldr	r2, [pc, #216]	@ (801daf8 <DMA_CalcBaseAndBitshift+0x138>)
 801da1e:	4293      	cmp	r3, r2
 801da20:	d022      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	4a35      	ldr	r2, [pc, #212]	@ (801dafc <DMA_CalcBaseAndBitshift+0x13c>)
 801da28:	4293      	cmp	r3, r2
 801da2a:	d01d      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	4a33      	ldr	r2, [pc, #204]	@ (801db00 <DMA_CalcBaseAndBitshift+0x140>)
 801da32:	4293      	cmp	r3, r2
 801da34:	d018      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	4a32      	ldr	r2, [pc, #200]	@ (801db04 <DMA_CalcBaseAndBitshift+0x144>)
 801da3c:	4293      	cmp	r3, r2
 801da3e:	d013      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	4a30      	ldr	r2, [pc, #192]	@ (801db08 <DMA_CalcBaseAndBitshift+0x148>)
 801da46:	4293      	cmp	r3, r2
 801da48:	d00e      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	4a2f      	ldr	r2, [pc, #188]	@ (801db0c <DMA_CalcBaseAndBitshift+0x14c>)
 801da50:	4293      	cmp	r3, r2
 801da52:	d009      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	4a2d      	ldr	r2, [pc, #180]	@ (801db10 <DMA_CalcBaseAndBitshift+0x150>)
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d004      	beq.n	801da68 <DMA_CalcBaseAndBitshift+0xa8>
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	4a2c      	ldr	r2, [pc, #176]	@ (801db14 <DMA_CalcBaseAndBitshift+0x154>)
 801da64:	4293      	cmp	r3, r2
 801da66:	d101      	bne.n	801da6c <DMA_CalcBaseAndBitshift+0xac>
 801da68:	2301      	movs	r3, #1
 801da6a:	e000      	b.n	801da6e <DMA_CalcBaseAndBitshift+0xae>
 801da6c:	2300      	movs	r3, #0
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d024      	beq.n	801dabc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	b2db      	uxtb	r3, r3
 801da78:	3b10      	subs	r3, #16
 801da7a:	4a27      	ldr	r2, [pc, #156]	@ (801db18 <DMA_CalcBaseAndBitshift+0x158>)
 801da7c:	fba2 2303 	umull	r2, r3, r2, r3
 801da80:	091b      	lsrs	r3, r3, #4
 801da82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	f003 0307 	and.w	r3, r3, #7
 801da8a:	4a24      	ldr	r2, [pc, #144]	@ (801db1c <DMA_CalcBaseAndBitshift+0x15c>)
 801da8c:	5cd3      	ldrb	r3, [r2, r3]
 801da8e:	461a      	mov	r2, r3
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	2b03      	cmp	r3, #3
 801da98:	d908      	bls.n	801daac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	461a      	mov	r2, r3
 801daa0:	4b1f      	ldr	r3, [pc, #124]	@ (801db20 <DMA_CalcBaseAndBitshift+0x160>)
 801daa2:	4013      	ands	r3, r2
 801daa4:	1d1a      	adds	r2, r3, #4
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	659a      	str	r2, [r3, #88]	@ 0x58
 801daaa:	e00d      	b.n	801dac8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	461a      	mov	r2, r3
 801dab2:	4b1b      	ldr	r3, [pc, #108]	@ (801db20 <DMA_CalcBaseAndBitshift+0x160>)
 801dab4:	4013      	ands	r3, r2
 801dab6:	687a      	ldr	r2, [r7, #4]
 801dab8:	6593      	str	r3, [r2, #88]	@ 0x58
 801daba:	e005      	b.n	801dac8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801dacc:	4618      	mov	r0, r3
 801dace:	3714      	adds	r7, #20
 801dad0:	46bd      	mov	sp, r7
 801dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad6:	4770      	bx	lr
 801dad8:	40020010 	.word	0x40020010
 801dadc:	40020028 	.word	0x40020028
 801dae0:	40020040 	.word	0x40020040
 801dae4:	40020058 	.word	0x40020058
 801dae8:	40020070 	.word	0x40020070
 801daec:	40020088 	.word	0x40020088
 801daf0:	400200a0 	.word	0x400200a0
 801daf4:	400200b8 	.word	0x400200b8
 801daf8:	40020410 	.word	0x40020410
 801dafc:	40020428 	.word	0x40020428
 801db00:	40020440 	.word	0x40020440
 801db04:	40020458 	.word	0x40020458
 801db08:	40020470 	.word	0x40020470
 801db0c:	40020488 	.word	0x40020488
 801db10:	400204a0 	.word	0x400204a0
 801db14:	400204b8 	.word	0x400204b8
 801db18:	aaaaaaab 	.word	0xaaaaaaab
 801db1c:	0802b700 	.word	0x0802b700
 801db20:	fffffc00 	.word	0xfffffc00

0801db24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801db24:	b480      	push	{r7}
 801db26:	b085      	sub	sp, #20
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801db2c:	2300      	movs	r3, #0
 801db2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	699b      	ldr	r3, [r3, #24]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d120      	bne.n	801db7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db3c:	2b03      	cmp	r3, #3
 801db3e:	d858      	bhi.n	801dbf2 <DMA_CheckFifoParam+0xce>
 801db40:	a201      	add	r2, pc, #4	@ (adr r2, 801db48 <DMA_CheckFifoParam+0x24>)
 801db42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db46:	bf00      	nop
 801db48:	0801db59 	.word	0x0801db59
 801db4c:	0801db6b 	.word	0x0801db6b
 801db50:	0801db59 	.word	0x0801db59
 801db54:	0801dbf3 	.word	0x0801dbf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801db60:	2b00      	cmp	r3, #0
 801db62:	d048      	beq.n	801dbf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801db64:	2301      	movs	r3, #1
 801db66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801db68:	e045      	b.n	801dbf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801db72:	d142      	bne.n	801dbfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801db74:	2301      	movs	r3, #1
 801db76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801db78:	e03f      	b.n	801dbfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	699b      	ldr	r3, [r3, #24]
 801db7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801db82:	d123      	bne.n	801dbcc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db88:	2b03      	cmp	r3, #3
 801db8a:	d838      	bhi.n	801dbfe <DMA_CheckFifoParam+0xda>
 801db8c:	a201      	add	r2, pc, #4	@ (adr r2, 801db94 <DMA_CheckFifoParam+0x70>)
 801db8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db92:	bf00      	nop
 801db94:	0801dba5 	.word	0x0801dba5
 801db98:	0801dbab 	.word	0x0801dbab
 801db9c:	0801dba5 	.word	0x0801dba5
 801dba0:	0801dbbd 	.word	0x0801dbbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801dba4:	2301      	movs	r3, #1
 801dba6:	73fb      	strb	r3, [r7, #15]
        break;
 801dba8:	e030      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d025      	beq.n	801dc02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dbba:	e022      	b.n	801dc02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801dbc4:	d11f      	bne.n	801dc06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801dbc6:	2301      	movs	r3, #1
 801dbc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dbca:	e01c      	b.n	801dc06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbd0:	2b02      	cmp	r3, #2
 801dbd2:	d902      	bls.n	801dbda <DMA_CheckFifoParam+0xb6>
 801dbd4:	2b03      	cmp	r3, #3
 801dbd6:	d003      	beq.n	801dbe0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801dbd8:	e018      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801dbda:	2301      	movs	r3, #1
 801dbdc:	73fb      	strb	r3, [r7, #15]
        break;
 801dbde:	e015      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d00e      	beq.n	801dc0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801dbec:	2301      	movs	r3, #1
 801dbee:	73fb      	strb	r3, [r7, #15]
    break;
 801dbf0:	e00b      	b.n	801dc0a <DMA_CheckFifoParam+0xe6>
        break;
 801dbf2:	bf00      	nop
 801dbf4:	e00a      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        break;
 801dbf6:	bf00      	nop
 801dbf8:	e008      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        break;
 801dbfa:	bf00      	nop
 801dbfc:	e006      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        break;
 801dbfe:	bf00      	nop
 801dc00:	e004      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        break;
 801dc02:	bf00      	nop
 801dc04:	e002      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
        break;
 801dc06:	bf00      	nop
 801dc08:	e000      	b.n	801dc0c <DMA_CheckFifoParam+0xe8>
    break;
 801dc0a:	bf00      	nop
    }
  }

  return status;
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc0e:	4618      	mov	r0, r3
 801dc10:	3714      	adds	r7, #20
 801dc12:	46bd      	mov	sp, r7
 801dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc18:	4770      	bx	lr
 801dc1a:	bf00      	nop

0801dc1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801dc1c:	b480      	push	{r7}
 801dc1e:	b085      	sub	sp, #20
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	4a38      	ldr	r2, [pc, #224]	@ (801dd10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801dc30:	4293      	cmp	r3, r2
 801dc32:	d022      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	4a36      	ldr	r2, [pc, #216]	@ (801dd14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801dc3a:	4293      	cmp	r3, r2
 801dc3c:	d01d      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	4a35      	ldr	r2, [pc, #212]	@ (801dd18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801dc44:	4293      	cmp	r3, r2
 801dc46:	d018      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	4a33      	ldr	r2, [pc, #204]	@ (801dd1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801dc4e:	4293      	cmp	r3, r2
 801dc50:	d013      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	4a32      	ldr	r2, [pc, #200]	@ (801dd20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801dc58:	4293      	cmp	r3, r2
 801dc5a:	d00e      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	4a30      	ldr	r2, [pc, #192]	@ (801dd24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801dc62:	4293      	cmp	r3, r2
 801dc64:	d009      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	4a2f      	ldr	r2, [pc, #188]	@ (801dd28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d004      	beq.n	801dc7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	4a2d      	ldr	r2, [pc, #180]	@ (801dd2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801dc76:	4293      	cmp	r3, r2
 801dc78:	d101      	bne.n	801dc7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	e000      	b.n	801dc80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801dc7e:	2300      	movs	r3, #0
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d01a      	beq.n	801dcba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	b2db      	uxtb	r3, r3
 801dc8a:	3b08      	subs	r3, #8
 801dc8c:	4a28      	ldr	r2, [pc, #160]	@ (801dd30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801dc8e:	fba2 2303 	umull	r2, r3, r2, r3
 801dc92:	091b      	lsrs	r3, r3, #4
 801dc94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801dc96:	68fa      	ldr	r2, [r7, #12]
 801dc98:	4b26      	ldr	r3, [pc, #152]	@ (801dd34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801dc9a:	4413      	add	r3, r2
 801dc9c:	009b      	lsls	r3, r3, #2
 801dc9e:	461a      	mov	r2, r3
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	4a24      	ldr	r2, [pc, #144]	@ (801dd38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801dca8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	f003 031f 	and.w	r3, r3, #31
 801dcb0:	2201      	movs	r2, #1
 801dcb2:	409a      	lsls	r2, r3
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801dcb8:	e024      	b.n	801dd04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	b2db      	uxtb	r3, r3
 801dcc0:	3b10      	subs	r3, #16
 801dcc2:	4a1e      	ldr	r2, [pc, #120]	@ (801dd3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801dcc4:	fba2 2303 	umull	r2, r3, r2, r3
 801dcc8:	091b      	lsrs	r3, r3, #4
 801dcca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801dccc:	68bb      	ldr	r3, [r7, #8]
 801dcce:	4a1c      	ldr	r2, [pc, #112]	@ (801dd40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	d806      	bhi.n	801dce2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801dcd4:	68bb      	ldr	r3, [r7, #8]
 801dcd6:	4a1b      	ldr	r2, [pc, #108]	@ (801dd44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801dcd8:	4293      	cmp	r3, r2
 801dcda:	d902      	bls.n	801dce2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	3308      	adds	r3, #8
 801dce0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801dce2:	68fa      	ldr	r2, [r7, #12]
 801dce4:	4b18      	ldr	r3, [pc, #96]	@ (801dd48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801dce6:	4413      	add	r3, r2
 801dce8:	009b      	lsls	r3, r3, #2
 801dcea:	461a      	mov	r2, r3
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	4a16      	ldr	r2, [pc, #88]	@ (801dd4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801dcf4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	f003 031f 	and.w	r3, r3, #31
 801dcfc:	2201      	movs	r2, #1
 801dcfe:	409a      	lsls	r2, r3
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dd04:	bf00      	nop
 801dd06:	3714      	adds	r7, #20
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0e:	4770      	bx	lr
 801dd10:	58025408 	.word	0x58025408
 801dd14:	5802541c 	.word	0x5802541c
 801dd18:	58025430 	.word	0x58025430
 801dd1c:	58025444 	.word	0x58025444
 801dd20:	58025458 	.word	0x58025458
 801dd24:	5802546c 	.word	0x5802546c
 801dd28:	58025480 	.word	0x58025480
 801dd2c:	58025494 	.word	0x58025494
 801dd30:	cccccccd 	.word	0xcccccccd
 801dd34:	16009600 	.word	0x16009600
 801dd38:	58025880 	.word	0x58025880
 801dd3c:	aaaaaaab 	.word	0xaaaaaaab
 801dd40:	400204b8 	.word	0x400204b8
 801dd44:	4002040f 	.word	0x4002040f
 801dd48:	10008200 	.word	0x10008200
 801dd4c:	40020880 	.word	0x40020880

0801dd50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801dd50:	b480      	push	{r7}
 801dd52:	b085      	sub	sp, #20
 801dd54:	af00      	add	r7, sp, #0
 801dd56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	685b      	ldr	r3, [r3, #4]
 801dd5c:	b2db      	uxtb	r3, r3
 801dd5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d04a      	beq.n	801ddfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	2b08      	cmp	r3, #8
 801dd6a:	d847      	bhi.n	801ddfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	4a25      	ldr	r2, [pc, #148]	@ (801de08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801dd72:	4293      	cmp	r3, r2
 801dd74:	d022      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	4a24      	ldr	r2, [pc, #144]	@ (801de0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801dd7c:	4293      	cmp	r3, r2
 801dd7e:	d01d      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	4a22      	ldr	r2, [pc, #136]	@ (801de10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801dd86:	4293      	cmp	r3, r2
 801dd88:	d018      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	4a21      	ldr	r2, [pc, #132]	@ (801de14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801dd90:	4293      	cmp	r3, r2
 801dd92:	d013      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	4a1f      	ldr	r2, [pc, #124]	@ (801de18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801dd9a:	4293      	cmp	r3, r2
 801dd9c:	d00e      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	4a1e      	ldr	r2, [pc, #120]	@ (801de1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801dda4:	4293      	cmp	r3, r2
 801dda6:	d009      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	4a1c      	ldr	r2, [pc, #112]	@ (801de20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801ddae:	4293      	cmp	r3, r2
 801ddb0:	d004      	beq.n	801ddbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	4a1b      	ldr	r2, [pc, #108]	@ (801de24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801ddb8:	4293      	cmp	r3, r2
 801ddba:	d101      	bne.n	801ddc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801ddbc:	2301      	movs	r3, #1
 801ddbe:	e000      	b.n	801ddc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d00a      	beq.n	801dddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801ddc6:	68fa      	ldr	r2, [r7, #12]
 801ddc8:	4b17      	ldr	r3, [pc, #92]	@ (801de28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801ddca:	4413      	add	r3, r2
 801ddcc:	009b      	lsls	r3, r3, #2
 801ddce:	461a      	mov	r2, r3
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	4a15      	ldr	r2, [pc, #84]	@ (801de2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801ddd8:	671a      	str	r2, [r3, #112]	@ 0x70
 801ddda:	e009      	b.n	801ddf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801dddc:	68fa      	ldr	r2, [r7, #12]
 801ddde:	4b14      	ldr	r3, [pc, #80]	@ (801de30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801dde0:	4413      	add	r3, r2
 801dde2:	009b      	lsls	r3, r3, #2
 801dde4:	461a      	mov	r2, r3
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	4a11      	ldr	r2, [pc, #68]	@ (801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801ddee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	3b01      	subs	r3, #1
 801ddf4:	2201      	movs	r2, #1
 801ddf6:	409a      	lsls	r2, r3
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801ddfc:	bf00      	nop
 801ddfe:	3714      	adds	r7, #20
 801de00:	46bd      	mov	sp, r7
 801de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de06:	4770      	bx	lr
 801de08:	58025408 	.word	0x58025408
 801de0c:	5802541c 	.word	0x5802541c
 801de10:	58025430 	.word	0x58025430
 801de14:	58025444 	.word	0x58025444
 801de18:	58025458 	.word	0x58025458
 801de1c:	5802546c 	.word	0x5802546c
 801de20:	58025480 	.word	0x58025480
 801de24:	58025494 	.word	0x58025494
 801de28:	1600963f 	.word	0x1600963f
 801de2c:	58025940 	.word	0x58025940
 801de30:	1000823f 	.word	0x1000823f
 801de34:	40020940 	.word	0x40020940

0801de38 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 801de38:	b580      	push	{r7, lr}
 801de3a:	b086      	sub	sp, #24
 801de3c:	af00      	add	r7, sp, #0
 801de3e:	60f8      	str	r0, [r7, #12]
 801de40:	60b9      	str	r1, [r7, #8]
 801de42:	607a      	str	r2, [r7, #4]
 801de44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801de46:	2300      	movs	r3, #0
 801de48:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	689b      	ldr	r3, [r3, #8]
 801de4e:	2b80      	cmp	r3, #128	@ 0x80
 801de50:	d105      	bne.n	801de5e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801de52:	68fb      	ldr	r3, [r7, #12]
 801de54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801de58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801de5a:	2301      	movs	r3, #1
 801de5c:	e315      	b.n	801e48a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801de64:	2b01      	cmp	r3, #1
 801de66:	d101      	bne.n	801de6c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 801de68:	2302      	movs	r3, #2
 801de6a:	e30e      	b.n	801e48a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	2201      	movs	r2, #1
 801de70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801de7a:	b2db      	uxtb	r3, r3
 801de7c:	2b01      	cmp	r3, #1
 801de7e:	f040 82fd 	bne.w	801e47c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	2202      	movs	r2, #2
 801de86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	2200      	movs	r2, #0
 801de8e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	4a82      	ldr	r2, [pc, #520]	@ (801e0a0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801de96:	4293      	cmp	r3, r2
 801de98:	d04a      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	4a81      	ldr	r2, [pc, #516]	@ (801e0a4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801dea0:	4293      	cmp	r3, r2
 801dea2:	d045      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	4a7f      	ldr	r2, [pc, #508]	@ (801e0a8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801deaa:	4293      	cmp	r3, r2
 801deac:	d040      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	4a7e      	ldr	r2, [pc, #504]	@ (801e0ac <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801deb4:	4293      	cmp	r3, r2
 801deb6:	d03b      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	4a7c      	ldr	r2, [pc, #496]	@ (801e0b0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801debe:	4293      	cmp	r3, r2
 801dec0:	d036      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	4a7b      	ldr	r2, [pc, #492]	@ (801e0b4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801dec8:	4293      	cmp	r3, r2
 801deca:	d031      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	4a79      	ldr	r2, [pc, #484]	@ (801e0b8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801ded2:	4293      	cmp	r3, r2
 801ded4:	d02c      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	4a78      	ldr	r2, [pc, #480]	@ (801e0bc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801dedc:	4293      	cmp	r3, r2
 801dede:	d027      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	4a76      	ldr	r2, [pc, #472]	@ (801e0c0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801dee6:	4293      	cmp	r3, r2
 801dee8:	d022      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	4a75      	ldr	r2, [pc, #468]	@ (801e0c4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801def0:	4293      	cmp	r3, r2
 801def2:	d01d      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	4a73      	ldr	r2, [pc, #460]	@ (801e0c8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801defa:	4293      	cmp	r3, r2
 801defc:	d018      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	4a72      	ldr	r2, [pc, #456]	@ (801e0cc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801df04:	4293      	cmp	r3, r2
 801df06:	d013      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	4a70      	ldr	r2, [pc, #448]	@ (801e0d0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801df0e:	4293      	cmp	r3, r2
 801df10:	d00e      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	4a6f      	ldr	r2, [pc, #444]	@ (801e0d4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801df18:	4293      	cmp	r3, r2
 801df1a:	d009      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	4a6d      	ldr	r2, [pc, #436]	@ (801e0d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801df22:	4293      	cmp	r3, r2
 801df24:	d004      	beq.n	801df30 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	4a6c      	ldr	r2, [pc, #432]	@ (801e0dc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801df2c:	4293      	cmp	r3, r2
 801df2e:	d101      	bne.n	801df34 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801df30:	2301      	movs	r3, #1
 801df32:	e000      	b.n	801df36 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801df34:	2300      	movs	r3, #0
 801df36:	2b00      	cmp	r3, #0
 801df38:	d018      	beq.n	801df6c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	681a      	ldr	r2, [r3, #0]
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801df48:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	683a      	ldr	r2, [r7, #0]
 801df50:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df56:	3308      	adds	r3, #8
 801df58:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801df5e:	f003 031f 	and.w	r3, r3, #31
 801df62:	223f      	movs	r2, #63	@ 0x3f
 801df64:	409a      	lsls	r2, r3
 801df66:	693b      	ldr	r3, [r7, #16]
 801df68:	601a      	str	r2, [r3, #0]
 801df6a:	e018      	b.n	801df9e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	6819      	ldr	r1, [r3, #0]
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	681a      	ldr	r2, [r3, #0]
 801df76:	f248 0320 	movw	r3, #32800	@ 0x8020
 801df7a:	430b      	orrs	r3, r1
 801df7c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	681b      	ldr	r3, [r3, #0]
 801df82:	683a      	ldr	r2, [r7, #0]
 801df84:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df8a:	3304      	adds	r3, #4
 801df8c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801df92:	f003 031f 	and.w	r3, r3, #31
 801df96:	2201      	movs	r2, #1
 801df98:	409a      	lsls	r2, r3
 801df9a:	693b      	ldr	r3, [r7, #16]
 801df9c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801df9e:	6a3b      	ldr	r3, [r7, #32]
 801dfa0:	687a      	ldr	r2, [r7, #4]
 801dfa2:	68b9      	ldr	r1, [r7, #8]
 801dfa4:	68f8      	ldr	r0, [r7, #12]
 801dfa6:	f000 faa5 	bl	801e4f4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	4a3c      	ldr	r2, [pc, #240]	@ (801e0a0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801dfb0:	4293      	cmp	r3, r2
 801dfb2:	d072      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	4a3a      	ldr	r2, [pc, #232]	@ (801e0a4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801dfba:	4293      	cmp	r3, r2
 801dfbc:	d06d      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	4a39      	ldr	r2, [pc, #228]	@ (801e0a8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801dfc4:	4293      	cmp	r3, r2
 801dfc6:	d068      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	4a37      	ldr	r2, [pc, #220]	@ (801e0ac <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801dfce:	4293      	cmp	r3, r2
 801dfd0:	d063      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	4a36      	ldr	r2, [pc, #216]	@ (801e0b0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	d05e      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	4a34      	ldr	r2, [pc, #208]	@ (801e0b4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801dfe2:	4293      	cmp	r3, r2
 801dfe4:	d059      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	4a33      	ldr	r2, [pc, #204]	@ (801e0b8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801dfec:	4293      	cmp	r3, r2
 801dfee:	d054      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	4a31      	ldr	r2, [pc, #196]	@ (801e0bc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801dff6:	4293      	cmp	r3, r2
 801dff8:	d04f      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dffa:	68fb      	ldr	r3, [r7, #12]
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	4a30      	ldr	r2, [pc, #192]	@ (801e0c0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801e000:	4293      	cmp	r3, r2
 801e002:	d04a      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	4a2e      	ldr	r2, [pc, #184]	@ (801e0c4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801e00a:	4293      	cmp	r3, r2
 801e00c:	d045      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	4a2d      	ldr	r2, [pc, #180]	@ (801e0c8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801e014:	4293      	cmp	r3, r2
 801e016:	d040      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	4a2b      	ldr	r2, [pc, #172]	@ (801e0cc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801e01e:	4293      	cmp	r3, r2
 801e020:	d03b      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	4a2a      	ldr	r2, [pc, #168]	@ (801e0d0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801e028:	4293      	cmp	r3, r2
 801e02a:	d036      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	4a28      	ldr	r2, [pc, #160]	@ (801e0d4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801e032:	4293      	cmp	r3, r2
 801e034:	d031      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	4a27      	ldr	r2, [pc, #156]	@ (801e0d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801e03c:	4293      	cmp	r3, r2
 801e03e:	d02c      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	4a25      	ldr	r2, [pc, #148]	@ (801e0dc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801e046:	4293      	cmp	r3, r2
 801e048:	d027      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	4a24      	ldr	r2, [pc, #144]	@ (801e0e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801e050:	4293      	cmp	r3, r2
 801e052:	d022      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	4a22      	ldr	r2, [pc, #136]	@ (801e0e4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801e05a:	4293      	cmp	r3, r2
 801e05c:	d01d      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	4a21      	ldr	r2, [pc, #132]	@ (801e0e8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801e064:	4293      	cmp	r3, r2
 801e066:	d018      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	4a1f      	ldr	r2, [pc, #124]	@ (801e0ec <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801e06e:	4293      	cmp	r3, r2
 801e070:	d013      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	4a1e      	ldr	r2, [pc, #120]	@ (801e0f0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 801e078:	4293      	cmp	r3, r2
 801e07a:	d00e      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	4a1c      	ldr	r2, [pc, #112]	@ (801e0f4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801e082:	4293      	cmp	r3, r2
 801e084:	d009      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	4a1b      	ldr	r2, [pc, #108]	@ (801e0f8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801e08c:	4293      	cmp	r3, r2
 801e08e:	d004      	beq.n	801e09a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	4a19      	ldr	r2, [pc, #100]	@ (801e0fc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 801e096:	4293      	cmp	r3, r2
 801e098:	d132      	bne.n	801e100 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801e09a:	2301      	movs	r3, #1
 801e09c:	e031      	b.n	801e102 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801e09e:	bf00      	nop
 801e0a0:	40020010 	.word	0x40020010
 801e0a4:	40020028 	.word	0x40020028
 801e0a8:	40020040 	.word	0x40020040
 801e0ac:	40020058 	.word	0x40020058
 801e0b0:	40020070 	.word	0x40020070
 801e0b4:	40020088 	.word	0x40020088
 801e0b8:	400200a0 	.word	0x400200a0
 801e0bc:	400200b8 	.word	0x400200b8
 801e0c0:	40020410 	.word	0x40020410
 801e0c4:	40020428 	.word	0x40020428
 801e0c8:	40020440 	.word	0x40020440
 801e0cc:	40020458 	.word	0x40020458
 801e0d0:	40020470 	.word	0x40020470
 801e0d4:	40020488 	.word	0x40020488
 801e0d8:	400204a0 	.word	0x400204a0
 801e0dc:	400204b8 	.word	0x400204b8
 801e0e0:	58025408 	.word	0x58025408
 801e0e4:	5802541c 	.word	0x5802541c
 801e0e8:	58025430 	.word	0x58025430
 801e0ec:	58025444 	.word	0x58025444
 801e0f0:	58025458 	.word	0x58025458
 801e0f4:	5802546c 	.word	0x5802546c
 801e0f8:	58025480 	.word	0x58025480
 801e0fc:	58025494 	.word	0x58025494
 801e100:	2300      	movs	r3, #0
 801e102:	2b00      	cmp	r3, #0
 801e104:	d00d      	beq.n	801e122 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e10a:	68fa      	ldr	r2, [r7, #12]
 801e10c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801e10e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e114:	2b00      	cmp	r3, #0
 801e116:	d004      	beq.n	801e122 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e11c:	68fa      	ldr	r2, [r7, #12]
 801e11e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e120:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	4a3b      	ldr	r2, [pc, #236]	@ (801e214 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 801e128:	4293      	cmp	r3, r2
 801e12a:	d04a      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	4a39      	ldr	r2, [pc, #228]	@ (801e218 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801e132:	4293      	cmp	r3, r2
 801e134:	d045      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	4a38      	ldr	r2, [pc, #224]	@ (801e21c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801e13c:	4293      	cmp	r3, r2
 801e13e:	d040      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	681b      	ldr	r3, [r3, #0]
 801e144:	4a36      	ldr	r2, [pc, #216]	@ (801e220 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801e146:	4293      	cmp	r3, r2
 801e148:	d03b      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	4a35      	ldr	r2, [pc, #212]	@ (801e224 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801e150:	4293      	cmp	r3, r2
 801e152:	d036      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	4a33      	ldr	r2, [pc, #204]	@ (801e228 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801e15a:	4293      	cmp	r3, r2
 801e15c:	d031      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	4a32      	ldr	r2, [pc, #200]	@ (801e22c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801e164:	4293      	cmp	r3, r2
 801e166:	d02c      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	4a30      	ldr	r2, [pc, #192]	@ (801e230 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801e16e:	4293      	cmp	r3, r2
 801e170:	d027      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	4a2f      	ldr	r2, [pc, #188]	@ (801e234 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 801e178:	4293      	cmp	r3, r2
 801e17a:	d022      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	4a2d      	ldr	r2, [pc, #180]	@ (801e238 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801e182:	4293      	cmp	r3, r2
 801e184:	d01d      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	4a2c      	ldr	r2, [pc, #176]	@ (801e23c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801e18c:	4293      	cmp	r3, r2
 801e18e:	d018      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	4a2a      	ldr	r2, [pc, #168]	@ (801e240 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 801e196:	4293      	cmp	r3, r2
 801e198:	d013      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4a29      	ldr	r2, [pc, #164]	@ (801e244 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	d00e      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	4a27      	ldr	r2, [pc, #156]	@ (801e248 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801e1aa:	4293      	cmp	r3, r2
 801e1ac:	d009      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4a26      	ldr	r2, [pc, #152]	@ (801e24c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 801e1b4:	4293      	cmp	r3, r2
 801e1b6:	d004      	beq.n	801e1c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	4a24      	ldr	r2, [pc, #144]	@ (801e250 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801e1be:	4293      	cmp	r3, r2
 801e1c0:	d101      	bne.n	801e1c6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801e1c2:	2301      	movs	r3, #1
 801e1c4:	e000      	b.n	801e1c8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d043      	beq.n	801e254 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	f023 021e 	bic.w	r2, r3, #30
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	f042 0216 	orr.w	r2, r2, #22
 801e1de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	695a      	ldr	r2, [r3, #20]
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e1ee:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d103      	bne.n	801e200 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d043      	beq.n	801e288 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	681a      	ldr	r2, [r3, #0]
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	f042 0208 	orr.w	r2, r2, #8
 801e20e:	601a      	str	r2, [r3, #0]
 801e210:	e03a      	b.n	801e288 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801e212:	bf00      	nop
 801e214:	40020010 	.word	0x40020010
 801e218:	40020028 	.word	0x40020028
 801e21c:	40020040 	.word	0x40020040
 801e220:	40020058 	.word	0x40020058
 801e224:	40020070 	.word	0x40020070
 801e228:	40020088 	.word	0x40020088
 801e22c:	400200a0 	.word	0x400200a0
 801e230:	400200b8 	.word	0x400200b8
 801e234:	40020410 	.word	0x40020410
 801e238:	40020428 	.word	0x40020428
 801e23c:	40020440 	.word	0x40020440
 801e240:	40020458 	.word	0x40020458
 801e244:	40020470 	.word	0x40020470
 801e248:	40020488 	.word	0x40020488
 801e24c:	400204a0 	.word	0x400204a0
 801e250:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	f023 020e 	bic.w	r2, r3, #14
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	f042 020a 	orr.w	r2, r2, #10
 801e266:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d103      	bne.n	801e278 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e274:	2b00      	cmp	r3, #0
 801e276:	d007      	beq.n	801e288 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	681a      	ldr	r2, [r3, #0]
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	f042 0204 	orr.w	r2, r2, #4
 801e286:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	4a81      	ldr	r2, [pc, #516]	@ (801e494 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e28e:	4293      	cmp	r3, r2
 801e290:	d072      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	4a80      	ldr	r2, [pc, #512]	@ (801e498 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e298:	4293      	cmp	r3, r2
 801e29a:	d06d      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	4a7e      	ldr	r2, [pc, #504]	@ (801e49c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e2a2:	4293      	cmp	r3, r2
 801e2a4:	d068      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	4a7d      	ldr	r2, [pc, #500]	@ (801e4a0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e2ac:	4293      	cmp	r3, r2
 801e2ae:	d063      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	4a7b      	ldr	r2, [pc, #492]	@ (801e4a4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e2b6:	4293      	cmp	r3, r2
 801e2b8:	d05e      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	4a7a      	ldr	r2, [pc, #488]	@ (801e4a8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e2c0:	4293      	cmp	r3, r2
 801e2c2:	d059      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	4a78      	ldr	r2, [pc, #480]	@ (801e4ac <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e2ca:	4293      	cmp	r3, r2
 801e2cc:	d054      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	4a77      	ldr	r2, [pc, #476]	@ (801e4b0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e2d4:	4293      	cmp	r3, r2
 801e2d6:	d04f      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	4a75      	ldr	r2, [pc, #468]	@ (801e4b4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e2de:	4293      	cmp	r3, r2
 801e2e0:	d04a      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	4a74      	ldr	r2, [pc, #464]	@ (801e4b8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e2e8:	4293      	cmp	r3, r2
 801e2ea:	d045      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	4a72      	ldr	r2, [pc, #456]	@ (801e4bc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e2f2:	4293      	cmp	r3, r2
 801e2f4:	d040      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	4a71      	ldr	r2, [pc, #452]	@ (801e4c0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e2fc:	4293      	cmp	r3, r2
 801e2fe:	d03b      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e300:	68fb      	ldr	r3, [r7, #12]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	4a6f      	ldr	r2, [pc, #444]	@ (801e4c4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e306:	4293      	cmp	r3, r2
 801e308:	d036      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	4a6e      	ldr	r2, [pc, #440]	@ (801e4c8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e310:	4293      	cmp	r3, r2
 801e312:	d031      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	4a6c      	ldr	r2, [pc, #432]	@ (801e4cc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e31a:	4293      	cmp	r3, r2
 801e31c:	d02c      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	4a6b      	ldr	r2, [pc, #428]	@ (801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e324:	4293      	cmp	r3, r2
 801e326:	d027      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	4a69      	ldr	r2, [pc, #420]	@ (801e4d4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801e32e:	4293      	cmp	r3, r2
 801e330:	d022      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	4a68      	ldr	r2, [pc, #416]	@ (801e4d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 801e338:	4293      	cmp	r3, r2
 801e33a:	d01d      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	4a66      	ldr	r2, [pc, #408]	@ (801e4dc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801e342:	4293      	cmp	r3, r2
 801e344:	d018      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	4a65      	ldr	r2, [pc, #404]	@ (801e4e0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801e34c:	4293      	cmp	r3, r2
 801e34e:	d013      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	4a63      	ldr	r2, [pc, #396]	@ (801e4e4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801e356:	4293      	cmp	r3, r2
 801e358:	d00e      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	4a62      	ldr	r2, [pc, #392]	@ (801e4e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801e360:	4293      	cmp	r3, r2
 801e362:	d009      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	4a60      	ldr	r2, [pc, #384]	@ (801e4ec <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d004      	beq.n	801e378 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	4a5f      	ldr	r2, [pc, #380]	@ (801e4f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801e374:	4293      	cmp	r3, r2
 801e376:	d101      	bne.n	801e37c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 801e378:	2301      	movs	r3, #1
 801e37a:	e000      	b.n	801e37e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 801e37c:	2300      	movs	r3, #0
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d01a      	beq.n	801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d007      	beq.n	801e3a0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e394:	681a      	ldr	r2, [r3, #0]
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e39a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e39e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d007      	beq.n	801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e3b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e3b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	4a35      	ldr	r2, [pc, #212]	@ (801e494 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e3be:	4293      	cmp	r3, r2
 801e3c0:	d04a      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	4a34      	ldr	r2, [pc, #208]	@ (801e498 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e3c8:	4293      	cmp	r3, r2
 801e3ca:	d045      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3cc:	68fb      	ldr	r3, [r7, #12]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	4a32      	ldr	r2, [pc, #200]	@ (801e49c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e3d2:	4293      	cmp	r3, r2
 801e3d4:	d040      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3d6:	68fb      	ldr	r3, [r7, #12]
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	4a31      	ldr	r2, [pc, #196]	@ (801e4a0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e3dc:	4293      	cmp	r3, r2
 801e3de:	d03b      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	4a2f      	ldr	r2, [pc, #188]	@ (801e4a4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e3e6:	4293      	cmp	r3, r2
 801e3e8:	d036      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	4a2e      	ldr	r2, [pc, #184]	@ (801e4a8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d031      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	4a2c      	ldr	r2, [pc, #176]	@ (801e4ac <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e3fa:	4293      	cmp	r3, r2
 801e3fc:	d02c      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	4a2b      	ldr	r2, [pc, #172]	@ (801e4b0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e404:	4293      	cmp	r3, r2
 801e406:	d027      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	4a29      	ldr	r2, [pc, #164]	@ (801e4b4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e40e:	4293      	cmp	r3, r2
 801e410:	d022      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	4a28      	ldr	r2, [pc, #160]	@ (801e4b8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e418:	4293      	cmp	r3, r2
 801e41a:	d01d      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	4a26      	ldr	r2, [pc, #152]	@ (801e4bc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e422:	4293      	cmp	r3, r2
 801e424:	d018      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	4a25      	ldr	r2, [pc, #148]	@ (801e4c0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e42c:	4293      	cmp	r3, r2
 801e42e:	d013      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	4a23      	ldr	r2, [pc, #140]	@ (801e4c4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e436:	4293      	cmp	r3, r2
 801e438:	d00e      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	4a22      	ldr	r2, [pc, #136]	@ (801e4c8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e440:	4293      	cmp	r3, r2
 801e442:	d009      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	4a20      	ldr	r2, [pc, #128]	@ (801e4cc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e44a:	4293      	cmp	r3, r2
 801e44c:	d004      	beq.n	801e458 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	4a1f      	ldr	r2, [pc, #124]	@ (801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e454:	4293      	cmp	r3, r2
 801e456:	d108      	bne.n	801e46a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	681a      	ldr	r2, [r3, #0]
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	f042 0201 	orr.w	r2, r2, #1
 801e466:	601a      	str	r2, [r3, #0]
 801e468:	e00e      	b.n	801e488 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	681a      	ldr	r2, [r3, #0]
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	f042 0201 	orr.w	r2, r2, #1
 801e478:	601a      	str	r2, [r3, #0]
 801e47a:	e005      	b.n	801e488 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e482:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801e484:	2301      	movs	r3, #1
 801e486:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801e488:	7dfb      	ldrb	r3, [r7, #23]
}
 801e48a:	4618      	mov	r0, r3
 801e48c:	3718      	adds	r7, #24
 801e48e:	46bd      	mov	sp, r7
 801e490:	bd80      	pop	{r7, pc}
 801e492:	bf00      	nop
 801e494:	40020010 	.word	0x40020010
 801e498:	40020028 	.word	0x40020028
 801e49c:	40020040 	.word	0x40020040
 801e4a0:	40020058 	.word	0x40020058
 801e4a4:	40020070 	.word	0x40020070
 801e4a8:	40020088 	.word	0x40020088
 801e4ac:	400200a0 	.word	0x400200a0
 801e4b0:	400200b8 	.word	0x400200b8
 801e4b4:	40020410 	.word	0x40020410
 801e4b8:	40020428 	.word	0x40020428
 801e4bc:	40020440 	.word	0x40020440
 801e4c0:	40020458 	.word	0x40020458
 801e4c4:	40020470 	.word	0x40020470
 801e4c8:	40020488 	.word	0x40020488
 801e4cc:	400204a0 	.word	0x400204a0
 801e4d0:	400204b8 	.word	0x400204b8
 801e4d4:	58025408 	.word	0x58025408
 801e4d8:	5802541c 	.word	0x5802541c
 801e4dc:	58025430 	.word	0x58025430
 801e4e0:	58025444 	.word	0x58025444
 801e4e4:	58025458 	.word	0x58025458
 801e4e8:	5802546c 	.word	0x5802546c
 801e4ec:	58025480 	.word	0x58025480
 801e4f0:	58025494 	.word	0x58025494

0801e4f4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e4f4:	b480      	push	{r7}
 801e4f6:	b085      	sub	sp, #20
 801e4f8:	af00      	add	r7, sp, #0
 801e4fa:	60f8      	str	r0, [r7, #12]
 801e4fc:	60b9      	str	r1, [r7, #8]
 801e4fe:	607a      	str	r2, [r7, #4]
 801e500:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	4a46      	ldr	r2, [pc, #280]	@ (801e620 <DMA_MultiBufferSetConfig+0x12c>)
 801e508:	4293      	cmp	r3, r2
 801e50a:	d04a      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	4a44      	ldr	r2, [pc, #272]	@ (801e624 <DMA_MultiBufferSetConfig+0x130>)
 801e512:	4293      	cmp	r3, r2
 801e514:	d045      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	4a43      	ldr	r2, [pc, #268]	@ (801e628 <DMA_MultiBufferSetConfig+0x134>)
 801e51c:	4293      	cmp	r3, r2
 801e51e:	d040      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	4a41      	ldr	r2, [pc, #260]	@ (801e62c <DMA_MultiBufferSetConfig+0x138>)
 801e526:	4293      	cmp	r3, r2
 801e528:	d03b      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e52a:	68fb      	ldr	r3, [r7, #12]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	4a40      	ldr	r2, [pc, #256]	@ (801e630 <DMA_MultiBufferSetConfig+0x13c>)
 801e530:	4293      	cmp	r3, r2
 801e532:	d036      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e534:	68fb      	ldr	r3, [r7, #12]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	4a3e      	ldr	r2, [pc, #248]	@ (801e634 <DMA_MultiBufferSetConfig+0x140>)
 801e53a:	4293      	cmp	r3, r2
 801e53c:	d031      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	4a3d      	ldr	r2, [pc, #244]	@ (801e638 <DMA_MultiBufferSetConfig+0x144>)
 801e544:	4293      	cmp	r3, r2
 801e546:	d02c      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	4a3b      	ldr	r2, [pc, #236]	@ (801e63c <DMA_MultiBufferSetConfig+0x148>)
 801e54e:	4293      	cmp	r3, r2
 801e550:	d027      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	4a3a      	ldr	r2, [pc, #232]	@ (801e640 <DMA_MultiBufferSetConfig+0x14c>)
 801e558:	4293      	cmp	r3, r2
 801e55a:	d022      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	4a38      	ldr	r2, [pc, #224]	@ (801e644 <DMA_MultiBufferSetConfig+0x150>)
 801e562:	4293      	cmp	r3, r2
 801e564:	d01d      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	4a37      	ldr	r2, [pc, #220]	@ (801e648 <DMA_MultiBufferSetConfig+0x154>)
 801e56c:	4293      	cmp	r3, r2
 801e56e:	d018      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	4a35      	ldr	r2, [pc, #212]	@ (801e64c <DMA_MultiBufferSetConfig+0x158>)
 801e576:	4293      	cmp	r3, r2
 801e578:	d013      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	4a34      	ldr	r2, [pc, #208]	@ (801e650 <DMA_MultiBufferSetConfig+0x15c>)
 801e580:	4293      	cmp	r3, r2
 801e582:	d00e      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	4a32      	ldr	r2, [pc, #200]	@ (801e654 <DMA_MultiBufferSetConfig+0x160>)
 801e58a:	4293      	cmp	r3, r2
 801e58c:	d009      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4a31      	ldr	r2, [pc, #196]	@ (801e658 <DMA_MultiBufferSetConfig+0x164>)
 801e594:	4293      	cmp	r3, r2
 801e596:	d004      	beq.n	801e5a2 <DMA_MultiBufferSetConfig+0xae>
 801e598:	68fb      	ldr	r3, [r7, #12]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	4a2f      	ldr	r2, [pc, #188]	@ (801e65c <DMA_MultiBufferSetConfig+0x168>)
 801e59e:	4293      	cmp	r3, r2
 801e5a0:	d101      	bne.n	801e5a6 <DMA_MultiBufferSetConfig+0xb2>
 801e5a2:	2301      	movs	r3, #1
 801e5a4:	e000      	b.n	801e5a8 <DMA_MultiBufferSetConfig+0xb4>
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d019      	beq.n	801e5e0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	683a      	ldr	r2, [r7, #0]
 801e5b2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	689b      	ldr	r3, [r3, #8]
 801e5b8:	2b40      	cmp	r3, #64	@ 0x40
 801e5ba:	d108      	bne.n	801e5ce <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	687a      	ldr	r2, [r7, #4]
 801e5c2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	68ba      	ldr	r2, [r7, #8]
 801e5ca:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801e5cc:	e021      	b.n	801e612 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	68ba      	ldr	r2, [r7, #8]
 801e5d4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	687a      	ldr	r2, [r7, #4]
 801e5dc:	60da      	str	r2, [r3, #12]
}
 801e5de:	e018      	b.n	801e612 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	683a      	ldr	r2, [r7, #0]
 801e5e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	689b      	ldr	r3, [r3, #8]
 801e5ec:	2b40      	cmp	r3, #64	@ 0x40
 801e5ee:	d108      	bne.n	801e602 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	681b      	ldr	r3, [r3, #0]
 801e5f4:	687a      	ldr	r2, [r7, #4]
 801e5f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	68ba      	ldr	r2, [r7, #8]
 801e5fe:	60da      	str	r2, [r3, #12]
}
 801e600:	e007      	b.n	801e612 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801e602:	68fb      	ldr	r3, [r7, #12]
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	68ba      	ldr	r2, [r7, #8]
 801e608:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	687a      	ldr	r2, [r7, #4]
 801e610:	60da      	str	r2, [r3, #12]
}
 801e612:	bf00      	nop
 801e614:	3714      	adds	r7, #20
 801e616:	46bd      	mov	sp, r7
 801e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e61c:	4770      	bx	lr
 801e61e:	bf00      	nop
 801e620:	40020010 	.word	0x40020010
 801e624:	40020028 	.word	0x40020028
 801e628:	40020040 	.word	0x40020040
 801e62c:	40020058 	.word	0x40020058
 801e630:	40020070 	.word	0x40020070
 801e634:	40020088 	.word	0x40020088
 801e638:	400200a0 	.word	0x400200a0
 801e63c:	400200b8 	.word	0x400200b8
 801e640:	40020410 	.word	0x40020410
 801e644:	40020428 	.word	0x40020428
 801e648:	40020440 	.word	0x40020440
 801e64c:	40020458 	.word	0x40020458
 801e650:	40020470 	.word	0x40020470
 801e654:	40020488 	.word	0x40020488
 801e658:	400204a0 	.word	0x400204a0
 801e65c:	400204b8 	.word	0x400204b8

0801e660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e660:	b480      	push	{r7}
 801e662:	b089      	sub	sp, #36	@ 0x24
 801e664:	af00      	add	r7, sp, #0
 801e666:	6078      	str	r0, [r7, #4]
 801e668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801e66a:	2300      	movs	r3, #0
 801e66c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801e66e:	4b89      	ldr	r3, [pc, #548]	@ (801e894 <HAL_GPIO_Init+0x234>)
 801e670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e672:	e194      	b.n	801e99e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801e674:	683b      	ldr	r3, [r7, #0]
 801e676:	681a      	ldr	r2, [r3, #0]
 801e678:	2101      	movs	r1, #1
 801e67a:	69fb      	ldr	r3, [r7, #28]
 801e67c:	fa01 f303 	lsl.w	r3, r1, r3
 801e680:	4013      	ands	r3, r2
 801e682:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801e684:	693b      	ldr	r3, [r7, #16]
 801e686:	2b00      	cmp	r3, #0
 801e688:	f000 8186 	beq.w	801e998 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801e68c:	683b      	ldr	r3, [r7, #0]
 801e68e:	685b      	ldr	r3, [r3, #4]
 801e690:	f003 0303 	and.w	r3, r3, #3
 801e694:	2b01      	cmp	r3, #1
 801e696:	d005      	beq.n	801e6a4 <HAL_GPIO_Init+0x44>
 801e698:	683b      	ldr	r3, [r7, #0]
 801e69a:	685b      	ldr	r3, [r3, #4]
 801e69c:	f003 0303 	and.w	r3, r3, #3
 801e6a0:	2b02      	cmp	r3, #2
 801e6a2:	d130      	bne.n	801e706 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	689b      	ldr	r3, [r3, #8]
 801e6a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801e6aa:	69fb      	ldr	r3, [r7, #28]
 801e6ac:	005b      	lsls	r3, r3, #1
 801e6ae:	2203      	movs	r2, #3
 801e6b0:	fa02 f303 	lsl.w	r3, r2, r3
 801e6b4:	43db      	mvns	r3, r3
 801e6b6:	69ba      	ldr	r2, [r7, #24]
 801e6b8:	4013      	ands	r3, r2
 801e6ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e6bc:	683b      	ldr	r3, [r7, #0]
 801e6be:	68da      	ldr	r2, [r3, #12]
 801e6c0:	69fb      	ldr	r3, [r7, #28]
 801e6c2:	005b      	lsls	r3, r3, #1
 801e6c4:	fa02 f303 	lsl.w	r3, r2, r3
 801e6c8:	69ba      	ldr	r2, [r7, #24]
 801e6ca:	4313      	orrs	r3, r2
 801e6cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	69ba      	ldr	r2, [r7, #24]
 801e6d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	685b      	ldr	r3, [r3, #4]
 801e6d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801e6da:	2201      	movs	r2, #1
 801e6dc:	69fb      	ldr	r3, [r7, #28]
 801e6de:	fa02 f303 	lsl.w	r3, r2, r3
 801e6e2:	43db      	mvns	r3, r3
 801e6e4:	69ba      	ldr	r2, [r7, #24]
 801e6e6:	4013      	ands	r3, r2
 801e6e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801e6ea:	683b      	ldr	r3, [r7, #0]
 801e6ec:	685b      	ldr	r3, [r3, #4]
 801e6ee:	091b      	lsrs	r3, r3, #4
 801e6f0:	f003 0201 	and.w	r2, r3, #1
 801e6f4:	69fb      	ldr	r3, [r7, #28]
 801e6f6:	fa02 f303 	lsl.w	r3, r2, r3
 801e6fa:	69ba      	ldr	r2, [r7, #24]
 801e6fc:	4313      	orrs	r3, r2
 801e6fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	69ba      	ldr	r2, [r7, #24]
 801e704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	685b      	ldr	r3, [r3, #4]
 801e70a:	f003 0303 	and.w	r3, r3, #3
 801e70e:	2b03      	cmp	r3, #3
 801e710:	d017      	beq.n	801e742 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	68db      	ldr	r3, [r3, #12]
 801e716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e718:	69fb      	ldr	r3, [r7, #28]
 801e71a:	005b      	lsls	r3, r3, #1
 801e71c:	2203      	movs	r2, #3
 801e71e:	fa02 f303 	lsl.w	r3, r2, r3
 801e722:	43db      	mvns	r3, r3
 801e724:	69ba      	ldr	r2, [r7, #24]
 801e726:	4013      	ands	r3, r2
 801e728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	689a      	ldr	r2, [r3, #8]
 801e72e:	69fb      	ldr	r3, [r7, #28]
 801e730:	005b      	lsls	r3, r3, #1
 801e732:	fa02 f303 	lsl.w	r3, r2, r3
 801e736:	69ba      	ldr	r2, [r7, #24]
 801e738:	4313      	orrs	r3, r2
 801e73a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	69ba      	ldr	r2, [r7, #24]
 801e740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e742:	683b      	ldr	r3, [r7, #0]
 801e744:	685b      	ldr	r3, [r3, #4]
 801e746:	f003 0303 	and.w	r3, r3, #3
 801e74a:	2b02      	cmp	r3, #2
 801e74c:	d123      	bne.n	801e796 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e74e:	69fb      	ldr	r3, [r7, #28]
 801e750:	08da      	lsrs	r2, r3, #3
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	3208      	adds	r2, #8
 801e756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e75a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801e75c:	69fb      	ldr	r3, [r7, #28]
 801e75e:	f003 0307 	and.w	r3, r3, #7
 801e762:	009b      	lsls	r3, r3, #2
 801e764:	220f      	movs	r2, #15
 801e766:	fa02 f303 	lsl.w	r3, r2, r3
 801e76a:	43db      	mvns	r3, r3
 801e76c:	69ba      	ldr	r2, [r7, #24]
 801e76e:	4013      	ands	r3, r2
 801e770:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	691a      	ldr	r2, [r3, #16]
 801e776:	69fb      	ldr	r3, [r7, #28]
 801e778:	f003 0307 	and.w	r3, r3, #7
 801e77c:	009b      	lsls	r3, r3, #2
 801e77e:	fa02 f303 	lsl.w	r3, r2, r3
 801e782:	69ba      	ldr	r2, [r7, #24]
 801e784:	4313      	orrs	r3, r2
 801e786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e788:	69fb      	ldr	r3, [r7, #28]
 801e78a:	08da      	lsrs	r2, r3, #3
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	3208      	adds	r2, #8
 801e790:	69b9      	ldr	r1, [r7, #24]
 801e792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e79c:	69fb      	ldr	r3, [r7, #28]
 801e79e:	005b      	lsls	r3, r3, #1
 801e7a0:	2203      	movs	r2, #3
 801e7a2:	fa02 f303 	lsl.w	r3, r2, r3
 801e7a6:	43db      	mvns	r3, r3
 801e7a8:	69ba      	ldr	r2, [r7, #24]
 801e7aa:	4013      	ands	r3, r2
 801e7ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e7ae:	683b      	ldr	r3, [r7, #0]
 801e7b0:	685b      	ldr	r3, [r3, #4]
 801e7b2:	f003 0203 	and.w	r2, r3, #3
 801e7b6:	69fb      	ldr	r3, [r7, #28]
 801e7b8:	005b      	lsls	r3, r3, #1
 801e7ba:	fa02 f303 	lsl.w	r3, r2, r3
 801e7be:	69ba      	ldr	r2, [r7, #24]
 801e7c0:	4313      	orrs	r3, r2
 801e7c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	69ba      	ldr	r2, [r7, #24]
 801e7c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801e7ca:	683b      	ldr	r3, [r7, #0]
 801e7cc:	685b      	ldr	r3, [r3, #4]
 801e7ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	f000 80e0 	beq.w	801e998 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e7d8:	4b2f      	ldr	r3, [pc, #188]	@ (801e898 <HAL_GPIO_Init+0x238>)
 801e7da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e7de:	4a2e      	ldr	r2, [pc, #184]	@ (801e898 <HAL_GPIO_Init+0x238>)
 801e7e0:	f043 0302 	orr.w	r3, r3, #2
 801e7e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801e7e8:	4b2b      	ldr	r3, [pc, #172]	@ (801e898 <HAL_GPIO_Init+0x238>)
 801e7ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e7ee:	f003 0302 	and.w	r3, r3, #2
 801e7f2:	60fb      	str	r3, [r7, #12]
 801e7f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e7f6:	4a29      	ldr	r2, [pc, #164]	@ (801e89c <HAL_GPIO_Init+0x23c>)
 801e7f8:	69fb      	ldr	r3, [r7, #28]
 801e7fa:	089b      	lsrs	r3, r3, #2
 801e7fc:	3302      	adds	r3, #2
 801e7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801e804:	69fb      	ldr	r3, [r7, #28]
 801e806:	f003 0303 	and.w	r3, r3, #3
 801e80a:	009b      	lsls	r3, r3, #2
 801e80c:	220f      	movs	r2, #15
 801e80e:	fa02 f303 	lsl.w	r3, r2, r3
 801e812:	43db      	mvns	r3, r3
 801e814:	69ba      	ldr	r2, [r7, #24]
 801e816:	4013      	ands	r3, r2
 801e818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	4a20      	ldr	r2, [pc, #128]	@ (801e8a0 <HAL_GPIO_Init+0x240>)
 801e81e:	4293      	cmp	r3, r2
 801e820:	d052      	beq.n	801e8c8 <HAL_GPIO_Init+0x268>
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	4a1f      	ldr	r2, [pc, #124]	@ (801e8a4 <HAL_GPIO_Init+0x244>)
 801e826:	4293      	cmp	r3, r2
 801e828:	d031      	beq.n	801e88e <HAL_GPIO_Init+0x22e>
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	4a1e      	ldr	r2, [pc, #120]	@ (801e8a8 <HAL_GPIO_Init+0x248>)
 801e82e:	4293      	cmp	r3, r2
 801e830:	d02b      	beq.n	801e88a <HAL_GPIO_Init+0x22a>
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	4a1d      	ldr	r2, [pc, #116]	@ (801e8ac <HAL_GPIO_Init+0x24c>)
 801e836:	4293      	cmp	r3, r2
 801e838:	d025      	beq.n	801e886 <HAL_GPIO_Init+0x226>
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	4a1c      	ldr	r2, [pc, #112]	@ (801e8b0 <HAL_GPIO_Init+0x250>)
 801e83e:	4293      	cmp	r3, r2
 801e840:	d01f      	beq.n	801e882 <HAL_GPIO_Init+0x222>
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	4a1b      	ldr	r2, [pc, #108]	@ (801e8b4 <HAL_GPIO_Init+0x254>)
 801e846:	4293      	cmp	r3, r2
 801e848:	d019      	beq.n	801e87e <HAL_GPIO_Init+0x21e>
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	4a1a      	ldr	r2, [pc, #104]	@ (801e8b8 <HAL_GPIO_Init+0x258>)
 801e84e:	4293      	cmp	r3, r2
 801e850:	d013      	beq.n	801e87a <HAL_GPIO_Init+0x21a>
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	4a19      	ldr	r2, [pc, #100]	@ (801e8bc <HAL_GPIO_Init+0x25c>)
 801e856:	4293      	cmp	r3, r2
 801e858:	d00d      	beq.n	801e876 <HAL_GPIO_Init+0x216>
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	4a18      	ldr	r2, [pc, #96]	@ (801e8c0 <HAL_GPIO_Init+0x260>)
 801e85e:	4293      	cmp	r3, r2
 801e860:	d007      	beq.n	801e872 <HAL_GPIO_Init+0x212>
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	4a17      	ldr	r2, [pc, #92]	@ (801e8c4 <HAL_GPIO_Init+0x264>)
 801e866:	4293      	cmp	r3, r2
 801e868:	d101      	bne.n	801e86e <HAL_GPIO_Init+0x20e>
 801e86a:	2309      	movs	r3, #9
 801e86c:	e02d      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e86e:	230a      	movs	r3, #10
 801e870:	e02b      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e872:	2308      	movs	r3, #8
 801e874:	e029      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e876:	2307      	movs	r3, #7
 801e878:	e027      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e87a:	2306      	movs	r3, #6
 801e87c:	e025      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e87e:	2305      	movs	r3, #5
 801e880:	e023      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e882:	2304      	movs	r3, #4
 801e884:	e021      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e886:	2303      	movs	r3, #3
 801e888:	e01f      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e88a:	2302      	movs	r3, #2
 801e88c:	e01d      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e88e:	2301      	movs	r3, #1
 801e890:	e01b      	b.n	801e8ca <HAL_GPIO_Init+0x26a>
 801e892:	bf00      	nop
 801e894:	58000080 	.word	0x58000080
 801e898:	58024400 	.word	0x58024400
 801e89c:	58000400 	.word	0x58000400
 801e8a0:	58020000 	.word	0x58020000
 801e8a4:	58020400 	.word	0x58020400
 801e8a8:	58020800 	.word	0x58020800
 801e8ac:	58020c00 	.word	0x58020c00
 801e8b0:	58021000 	.word	0x58021000
 801e8b4:	58021400 	.word	0x58021400
 801e8b8:	58021800 	.word	0x58021800
 801e8bc:	58021c00 	.word	0x58021c00
 801e8c0:	58022000 	.word	0x58022000
 801e8c4:	58022400 	.word	0x58022400
 801e8c8:	2300      	movs	r3, #0
 801e8ca:	69fa      	ldr	r2, [r7, #28]
 801e8cc:	f002 0203 	and.w	r2, r2, #3
 801e8d0:	0092      	lsls	r2, r2, #2
 801e8d2:	4093      	lsls	r3, r2
 801e8d4:	69ba      	ldr	r2, [r7, #24]
 801e8d6:	4313      	orrs	r3, r2
 801e8d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e8da:	4938      	ldr	r1, [pc, #224]	@ (801e9bc <HAL_GPIO_Init+0x35c>)
 801e8dc:	69fb      	ldr	r3, [r7, #28]
 801e8de:	089b      	lsrs	r3, r3, #2
 801e8e0:	3302      	adds	r3, #2
 801e8e2:	69ba      	ldr	r2, [r7, #24]
 801e8e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801e8e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e8f0:	693b      	ldr	r3, [r7, #16]
 801e8f2:	43db      	mvns	r3, r3
 801e8f4:	69ba      	ldr	r2, [r7, #24]
 801e8f6:	4013      	ands	r3, r2
 801e8f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801e8fa:	683b      	ldr	r3, [r7, #0]
 801e8fc:	685b      	ldr	r3, [r3, #4]
 801e8fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801e902:	2b00      	cmp	r3, #0
 801e904:	d003      	beq.n	801e90e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801e906:	69ba      	ldr	r2, [r7, #24]
 801e908:	693b      	ldr	r3, [r7, #16]
 801e90a:	4313      	orrs	r3, r2
 801e90c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801e90e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e912:	69bb      	ldr	r3, [r7, #24]
 801e914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801e916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e91a:	685b      	ldr	r3, [r3, #4]
 801e91c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e91e:	693b      	ldr	r3, [r7, #16]
 801e920:	43db      	mvns	r3, r3
 801e922:	69ba      	ldr	r2, [r7, #24]
 801e924:	4013      	ands	r3, r2
 801e926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801e928:	683b      	ldr	r3, [r7, #0]
 801e92a:	685b      	ldr	r3, [r3, #4]
 801e92c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801e930:	2b00      	cmp	r3, #0
 801e932:	d003      	beq.n	801e93c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801e934:	69ba      	ldr	r2, [r7, #24]
 801e936:	693b      	ldr	r3, [r7, #16]
 801e938:	4313      	orrs	r3, r2
 801e93a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801e93c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e940:	69bb      	ldr	r3, [r7, #24]
 801e942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801e944:	697b      	ldr	r3, [r7, #20]
 801e946:	685b      	ldr	r3, [r3, #4]
 801e948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e94a:	693b      	ldr	r3, [r7, #16]
 801e94c:	43db      	mvns	r3, r3
 801e94e:	69ba      	ldr	r2, [r7, #24]
 801e950:	4013      	ands	r3, r2
 801e952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e954:	683b      	ldr	r3, [r7, #0]
 801e956:	685b      	ldr	r3, [r3, #4]
 801e958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d003      	beq.n	801e968 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801e960:	69ba      	ldr	r2, [r7, #24]
 801e962:	693b      	ldr	r3, [r7, #16]
 801e964:	4313      	orrs	r3, r2
 801e966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801e968:	697b      	ldr	r3, [r7, #20]
 801e96a:	69ba      	ldr	r2, [r7, #24]
 801e96c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801e96e:	697b      	ldr	r3, [r7, #20]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e974:	693b      	ldr	r3, [r7, #16]
 801e976:	43db      	mvns	r3, r3
 801e978:	69ba      	ldr	r2, [r7, #24]
 801e97a:	4013      	ands	r3, r2
 801e97c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	685b      	ldr	r3, [r3, #4]
 801e982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e986:	2b00      	cmp	r3, #0
 801e988:	d003      	beq.n	801e992 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801e98a:	69ba      	ldr	r2, [r7, #24]
 801e98c:	693b      	ldr	r3, [r7, #16]
 801e98e:	4313      	orrs	r3, r2
 801e990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801e992:	697b      	ldr	r3, [r7, #20]
 801e994:	69ba      	ldr	r2, [r7, #24]
 801e996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801e998:	69fb      	ldr	r3, [r7, #28]
 801e99a:	3301      	adds	r3, #1
 801e99c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e99e:	683b      	ldr	r3, [r7, #0]
 801e9a0:	681a      	ldr	r2, [r3, #0]
 801e9a2:	69fb      	ldr	r3, [r7, #28]
 801e9a4:	fa22 f303 	lsr.w	r3, r2, r3
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	f47f ae63 	bne.w	801e674 <HAL_GPIO_Init+0x14>
  }
}
 801e9ae:	bf00      	nop
 801e9b0:	bf00      	nop
 801e9b2:	3724      	adds	r7, #36	@ 0x24
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ba:	4770      	bx	lr
 801e9bc:	58000400 	.word	0x58000400

0801e9c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801e9c0:	b480      	push	{r7}
 801e9c2:	b085      	sub	sp, #20
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
 801e9c8:	460b      	mov	r3, r1
 801e9ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	691a      	ldr	r2, [r3, #16]
 801e9d0:	887b      	ldrh	r3, [r7, #2]
 801e9d2:	4013      	ands	r3, r2
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d002      	beq.n	801e9de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e9d8:	2301      	movs	r3, #1
 801e9da:	73fb      	strb	r3, [r7, #15]
 801e9dc:	e001      	b.n	801e9e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e9de:	2300      	movs	r3, #0
 801e9e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9e4:	4618      	mov	r0, r3
 801e9e6:	3714      	adds	r7, #20
 801e9e8:	46bd      	mov	sp, r7
 801e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ee:	4770      	bx	lr

0801e9f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e9f0:	b480      	push	{r7}
 801e9f2:	b083      	sub	sp, #12
 801e9f4:	af00      	add	r7, sp, #0
 801e9f6:	6078      	str	r0, [r7, #4]
 801e9f8:	460b      	mov	r3, r1
 801e9fa:	807b      	strh	r3, [r7, #2]
 801e9fc:	4613      	mov	r3, r2
 801e9fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ea00:	787b      	ldrb	r3, [r7, #1]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d003      	beq.n	801ea0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ea06:	887a      	ldrh	r2, [r7, #2]
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ea0c:	e003      	b.n	801ea16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ea0e:	887b      	ldrh	r3, [r7, #2]
 801ea10:	041a      	lsls	r2, r3, #16
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	619a      	str	r2, [r3, #24]
}
 801ea16:	bf00      	nop
 801ea18:	370c      	adds	r7, #12
 801ea1a:	46bd      	mov	sp, r7
 801ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea20:	4770      	bx	lr
	...

0801ea24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b084      	sub	sp, #16
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801ea2c:	4b19      	ldr	r3, [pc, #100]	@ (801ea94 <HAL_PWREx_ConfigSupply+0x70>)
 801ea2e:	68db      	ldr	r3, [r3, #12]
 801ea30:	f003 0304 	and.w	r3, r3, #4
 801ea34:	2b04      	cmp	r3, #4
 801ea36:	d00a      	beq.n	801ea4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ea38:	4b16      	ldr	r3, [pc, #88]	@ (801ea94 <HAL_PWREx_ConfigSupply+0x70>)
 801ea3a:	68db      	ldr	r3, [r3, #12]
 801ea3c:	f003 0307 	and.w	r3, r3, #7
 801ea40:	687a      	ldr	r2, [r7, #4]
 801ea42:	429a      	cmp	r2, r3
 801ea44:	d001      	beq.n	801ea4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ea46:	2301      	movs	r3, #1
 801ea48:	e01f      	b.n	801ea8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	e01d      	b.n	801ea8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ea4e:	4b11      	ldr	r3, [pc, #68]	@ (801ea94 <HAL_PWREx_ConfigSupply+0x70>)
 801ea50:	68db      	ldr	r3, [r3, #12]
 801ea52:	f023 0207 	bic.w	r2, r3, #7
 801ea56:	490f      	ldr	r1, [pc, #60]	@ (801ea94 <HAL_PWREx_ConfigSupply+0x70>)
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	4313      	orrs	r3, r2
 801ea5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ea5e:	f7fd f8e1 	bl	801bc24 <HAL_GetTick>
 801ea62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ea64:	e009      	b.n	801ea7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ea66:	f7fd f8dd 	bl	801bc24 <HAL_GetTick>
 801ea6a:	4602      	mov	r2, r0
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	1ad3      	subs	r3, r2, r3
 801ea70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ea74:	d901      	bls.n	801ea7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801ea76:	2301      	movs	r3, #1
 801ea78:	e007      	b.n	801ea8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ea7a:	4b06      	ldr	r3, [pc, #24]	@ (801ea94 <HAL_PWREx_ConfigSupply+0x70>)
 801ea7c:	685b      	ldr	r3, [r3, #4]
 801ea7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ea82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ea86:	d1ee      	bne.n	801ea66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801ea88:	2300      	movs	r3, #0
}
 801ea8a:	4618      	mov	r0, r3
 801ea8c:	3710      	adds	r7, #16
 801ea8e:	46bd      	mov	sp, r7
 801ea90:	bd80      	pop	{r7, pc}
 801ea92:	bf00      	nop
 801ea94:	58024800 	.word	0x58024800

0801ea98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ea98:	b580      	push	{r7, lr}
 801ea9a:	b08c      	sub	sp, #48	@ 0x30
 801ea9c:	af00      	add	r7, sp, #0
 801ea9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d102      	bne.n	801eaac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801eaa6:	2301      	movs	r3, #1
 801eaa8:	f000 bc48 	b.w	801f33c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	f003 0301 	and.w	r3, r3, #1
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	f000 8088 	beq.w	801ebca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801eaba:	4b99      	ldr	r3, [pc, #612]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eabc:	691b      	ldr	r3, [r3, #16]
 801eabe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801eac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801eac4:	4b96      	ldr	r3, [pc, #600]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801eaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eacc:	2b10      	cmp	r3, #16
 801eace:	d007      	beq.n	801eae0 <HAL_RCC_OscConfig+0x48>
 801ead0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ead2:	2b18      	cmp	r3, #24
 801ead4:	d111      	bne.n	801eafa <HAL_RCC_OscConfig+0x62>
 801ead6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ead8:	f003 0303 	and.w	r3, r3, #3
 801eadc:	2b02      	cmp	r3, #2
 801eade:	d10c      	bne.n	801eafa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801eae0:	4b8f      	ldr	r3, [pc, #572]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d06d      	beq.n	801ebc8 <HAL_RCC_OscConfig+0x130>
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	685b      	ldr	r3, [r3, #4]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d169      	bne.n	801ebc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801eaf4:	2301      	movs	r3, #1
 801eaf6:	f000 bc21 	b.w	801f33c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	685b      	ldr	r3, [r3, #4]
 801eafe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb02:	d106      	bne.n	801eb12 <HAL_RCC_OscConfig+0x7a>
 801eb04:	4b86      	ldr	r3, [pc, #536]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	4a85      	ldr	r2, [pc, #532]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eb0e:	6013      	str	r3, [r2, #0]
 801eb10:	e02e      	b.n	801eb70 <HAL_RCC_OscConfig+0xd8>
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	685b      	ldr	r3, [r3, #4]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d10c      	bne.n	801eb34 <HAL_RCC_OscConfig+0x9c>
 801eb1a:	4b81      	ldr	r3, [pc, #516]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	4a80      	ldr	r2, [pc, #512]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801eb24:	6013      	str	r3, [r2, #0]
 801eb26:	4b7e      	ldr	r3, [pc, #504]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	4a7d      	ldr	r2, [pc, #500]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801eb30:	6013      	str	r3, [r2, #0]
 801eb32:	e01d      	b.n	801eb70 <HAL_RCC_OscConfig+0xd8>
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	685b      	ldr	r3, [r3, #4]
 801eb38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801eb3c:	d10c      	bne.n	801eb58 <HAL_RCC_OscConfig+0xc0>
 801eb3e:	4b78      	ldr	r3, [pc, #480]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	4a77      	ldr	r2, [pc, #476]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801eb48:	6013      	str	r3, [r2, #0]
 801eb4a:	4b75      	ldr	r3, [pc, #468]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	4a74      	ldr	r2, [pc, #464]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eb54:	6013      	str	r3, [r2, #0]
 801eb56:	e00b      	b.n	801eb70 <HAL_RCC_OscConfig+0xd8>
 801eb58:	4b71      	ldr	r3, [pc, #452]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	4a70      	ldr	r2, [pc, #448]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801eb62:	6013      	str	r3, [r2, #0]
 801eb64:	4b6e      	ldr	r3, [pc, #440]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	4a6d      	ldr	r2, [pc, #436]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801eb6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	685b      	ldr	r3, [r3, #4]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d013      	beq.n	801eba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eb78:	f7fd f854 	bl	801bc24 <HAL_GetTick>
 801eb7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801eb7e:	e008      	b.n	801eb92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801eb80:	f7fd f850 	bl	801bc24 <HAL_GetTick>
 801eb84:	4602      	mov	r2, r0
 801eb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb88:	1ad3      	subs	r3, r2, r3
 801eb8a:	2b64      	cmp	r3, #100	@ 0x64
 801eb8c:	d901      	bls.n	801eb92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801eb8e:	2303      	movs	r3, #3
 801eb90:	e3d4      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801eb92:	4b63      	ldr	r3, [pc, #396]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d0f0      	beq.n	801eb80 <HAL_RCC_OscConfig+0xe8>
 801eb9e:	e014      	b.n	801ebca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eba0:	f7fd f840 	bl	801bc24 <HAL_GetTick>
 801eba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801eba6:	e008      	b.n	801ebba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801eba8:	f7fd f83c 	bl	801bc24 <HAL_GetTick>
 801ebac:	4602      	mov	r2, r0
 801ebae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebb0:	1ad3      	subs	r3, r2, r3
 801ebb2:	2b64      	cmp	r3, #100	@ 0x64
 801ebb4:	d901      	bls.n	801ebba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801ebb6:	2303      	movs	r3, #3
 801ebb8:	e3c0      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ebba:	4b59      	ldr	r3, [pc, #356]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d1f0      	bne.n	801eba8 <HAL_RCC_OscConfig+0x110>
 801ebc6:	e000      	b.n	801ebca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ebc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	681b      	ldr	r3, [r3, #0]
 801ebce:	f003 0302 	and.w	r3, r3, #2
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	f000 80ca 	beq.w	801ed6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ebd8:	4b51      	ldr	r3, [pc, #324]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ebda:	691b      	ldr	r3, [r3, #16]
 801ebdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ebe0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ebe2:	4b4f      	ldr	r3, [pc, #316]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ebe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebe6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801ebe8:	6a3b      	ldr	r3, [r7, #32]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d007      	beq.n	801ebfe <HAL_RCC_OscConfig+0x166>
 801ebee:	6a3b      	ldr	r3, [r7, #32]
 801ebf0:	2b18      	cmp	r3, #24
 801ebf2:	d156      	bne.n	801eca2 <HAL_RCC_OscConfig+0x20a>
 801ebf4:	69fb      	ldr	r3, [r7, #28]
 801ebf6:	f003 0303 	and.w	r3, r3, #3
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d151      	bne.n	801eca2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ebfe:	4b48      	ldr	r3, [pc, #288]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	f003 0304 	and.w	r3, r3, #4
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d005      	beq.n	801ec16 <HAL_RCC_OscConfig+0x17e>
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	68db      	ldr	r3, [r3, #12]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d101      	bne.n	801ec16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801ec12:	2301      	movs	r3, #1
 801ec14:	e392      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ec16:	4b42      	ldr	r3, [pc, #264]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	f023 0219 	bic.w	r2, r3, #25
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	68db      	ldr	r3, [r3, #12]
 801ec22:	493f      	ldr	r1, [pc, #252]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec24:	4313      	orrs	r3, r2
 801ec26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ec28:	f7fc fffc 	bl	801bc24 <HAL_GetTick>
 801ec2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ec2e:	e008      	b.n	801ec42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ec30:	f7fc fff8 	bl	801bc24 <HAL_GetTick>
 801ec34:	4602      	mov	r2, r0
 801ec36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec38:	1ad3      	subs	r3, r2, r3
 801ec3a:	2b02      	cmp	r3, #2
 801ec3c:	d901      	bls.n	801ec42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801ec3e:	2303      	movs	r3, #3
 801ec40:	e37c      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ec42:	4b37      	ldr	r3, [pc, #220]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	f003 0304 	and.w	r3, r3, #4
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d0f0      	beq.n	801ec30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ec4e:	f7fd f819 	bl	801bc84 <HAL_GetREVID>
 801ec52:	4603      	mov	r3, r0
 801ec54:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	d817      	bhi.n	801ec8c <HAL_RCC_OscConfig+0x1f4>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	691b      	ldr	r3, [r3, #16]
 801ec60:	2b40      	cmp	r3, #64	@ 0x40
 801ec62:	d108      	bne.n	801ec76 <HAL_RCC_OscConfig+0x1de>
 801ec64:	4b2e      	ldr	r3, [pc, #184]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec66:	685b      	ldr	r3, [r3, #4]
 801ec68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ec6c:	4a2c      	ldr	r2, [pc, #176]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ec72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ec74:	e07a      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ec76:	4b2a      	ldr	r3, [pc, #168]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec78:	685b      	ldr	r3, [r3, #4]
 801ec7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	691b      	ldr	r3, [r3, #16]
 801ec82:	031b      	lsls	r3, r3, #12
 801ec84:	4926      	ldr	r1, [pc, #152]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec86:	4313      	orrs	r3, r2
 801ec88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ec8a:	e06f      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ec8c:	4b24      	ldr	r3, [pc, #144]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec8e:	685b      	ldr	r3, [r3, #4]
 801ec90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	691b      	ldr	r3, [r3, #16]
 801ec98:	061b      	lsls	r3, r3, #24
 801ec9a:	4921      	ldr	r1, [pc, #132]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ec9c:	4313      	orrs	r3, r2
 801ec9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eca0:	e064      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	68db      	ldr	r3, [r3, #12]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d047      	beq.n	801ed3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ecaa:	4b1d      	ldr	r3, [pc, #116]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	f023 0219 	bic.w	r2, r3, #25
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	68db      	ldr	r3, [r3, #12]
 801ecb6:	491a      	ldr	r1, [pc, #104]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ecb8:	4313      	orrs	r3, r2
 801ecba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ecbc:	f7fc ffb2 	bl	801bc24 <HAL_GetTick>
 801ecc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ecc2:	e008      	b.n	801ecd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ecc4:	f7fc ffae 	bl	801bc24 <HAL_GetTick>
 801ecc8:	4602      	mov	r2, r0
 801ecca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eccc:	1ad3      	subs	r3, r2, r3
 801ecce:	2b02      	cmp	r3, #2
 801ecd0:	d901      	bls.n	801ecd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801ecd2:	2303      	movs	r3, #3
 801ecd4:	e332      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ecd6:	4b12      	ldr	r3, [pc, #72]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	f003 0304 	and.w	r3, r3, #4
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d0f0      	beq.n	801ecc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ece2:	f7fc ffcf 	bl	801bc84 <HAL_GetREVID>
 801ece6:	4603      	mov	r3, r0
 801ece8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ecec:	4293      	cmp	r3, r2
 801ecee:	d819      	bhi.n	801ed24 <HAL_RCC_OscConfig+0x28c>
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	691b      	ldr	r3, [r3, #16]
 801ecf4:	2b40      	cmp	r3, #64	@ 0x40
 801ecf6:	d108      	bne.n	801ed0a <HAL_RCC_OscConfig+0x272>
 801ecf8:	4b09      	ldr	r3, [pc, #36]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ecfa:	685b      	ldr	r3, [r3, #4]
 801ecfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ed00:	4a07      	ldr	r2, [pc, #28]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ed02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ed06:	6053      	str	r3, [r2, #4]
 801ed08:	e030      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
 801ed0a:	4b05      	ldr	r3, [pc, #20]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ed0c:	685b      	ldr	r3, [r3, #4]
 801ed0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	691b      	ldr	r3, [r3, #16]
 801ed16:	031b      	lsls	r3, r3, #12
 801ed18:	4901      	ldr	r1, [pc, #4]	@ (801ed20 <HAL_RCC_OscConfig+0x288>)
 801ed1a:	4313      	orrs	r3, r2
 801ed1c:	604b      	str	r3, [r1, #4]
 801ed1e:	e025      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
 801ed20:	58024400 	.word	0x58024400
 801ed24:	4b9a      	ldr	r3, [pc, #616]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed26:	685b      	ldr	r3, [r3, #4]
 801ed28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	691b      	ldr	r3, [r3, #16]
 801ed30:	061b      	lsls	r3, r3, #24
 801ed32:	4997      	ldr	r1, [pc, #604]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed34:	4313      	orrs	r3, r2
 801ed36:	604b      	str	r3, [r1, #4]
 801ed38:	e018      	b.n	801ed6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ed3a:	4b95      	ldr	r3, [pc, #596]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	4a94      	ldr	r2, [pc, #592]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed40:	f023 0301 	bic.w	r3, r3, #1
 801ed44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ed46:	f7fc ff6d 	bl	801bc24 <HAL_GetTick>
 801ed4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ed4c:	e008      	b.n	801ed60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ed4e:	f7fc ff69 	bl	801bc24 <HAL_GetTick>
 801ed52:	4602      	mov	r2, r0
 801ed54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed56:	1ad3      	subs	r3, r2, r3
 801ed58:	2b02      	cmp	r3, #2
 801ed5a:	d901      	bls.n	801ed60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801ed5c:	2303      	movs	r3, #3
 801ed5e:	e2ed      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ed60:	4b8b      	ldr	r3, [pc, #556]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed62:	681b      	ldr	r3, [r3, #0]
 801ed64:	f003 0304 	and.w	r3, r3, #4
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d1f0      	bne.n	801ed4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	f003 0310 	and.w	r3, r3, #16
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	f000 80a9 	beq.w	801eecc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ed7a:	4b85      	ldr	r3, [pc, #532]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed7c:	691b      	ldr	r3, [r3, #16]
 801ed7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ed82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ed84:	4b82      	ldr	r3, [pc, #520]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ed86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ed8a:	69bb      	ldr	r3, [r7, #24]
 801ed8c:	2b08      	cmp	r3, #8
 801ed8e:	d007      	beq.n	801eda0 <HAL_RCC_OscConfig+0x308>
 801ed90:	69bb      	ldr	r3, [r7, #24]
 801ed92:	2b18      	cmp	r3, #24
 801ed94:	d13a      	bne.n	801ee0c <HAL_RCC_OscConfig+0x374>
 801ed96:	697b      	ldr	r3, [r7, #20]
 801ed98:	f003 0303 	and.w	r3, r3, #3
 801ed9c:	2b01      	cmp	r3, #1
 801ed9e:	d135      	bne.n	801ee0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801eda0:	4b7b      	ldr	r3, [pc, #492]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d005      	beq.n	801edb8 <HAL_RCC_OscConfig+0x320>
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	69db      	ldr	r3, [r3, #28]
 801edb0:	2b80      	cmp	r3, #128	@ 0x80
 801edb2:	d001      	beq.n	801edb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801edb4:	2301      	movs	r3, #1
 801edb6:	e2c1      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801edb8:	f7fc ff64 	bl	801bc84 <HAL_GetREVID>
 801edbc:	4603      	mov	r3, r0
 801edbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 801edc2:	4293      	cmp	r3, r2
 801edc4:	d817      	bhi.n	801edf6 <HAL_RCC_OscConfig+0x35e>
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	6a1b      	ldr	r3, [r3, #32]
 801edca:	2b20      	cmp	r3, #32
 801edcc:	d108      	bne.n	801ede0 <HAL_RCC_OscConfig+0x348>
 801edce:	4b70      	ldr	r3, [pc, #448]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801edd0:	685b      	ldr	r3, [r3, #4]
 801edd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801edd6:	4a6e      	ldr	r2, [pc, #440]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801edd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801eddc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801edde:	e075      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ede0:	4b6b      	ldr	r3, [pc, #428]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ede2:	685b      	ldr	r3, [r3, #4]
 801ede4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	6a1b      	ldr	r3, [r3, #32]
 801edec:	069b      	lsls	r3, r3, #26
 801edee:	4968      	ldr	r1, [pc, #416]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801edf0:	4313      	orrs	r3, r2
 801edf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801edf4:	e06a      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801edf6:	4b66      	ldr	r3, [pc, #408]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801edf8:	68db      	ldr	r3, [r3, #12]
 801edfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	6a1b      	ldr	r3, [r3, #32]
 801ee02:	061b      	lsls	r3, r3, #24
 801ee04:	4962      	ldr	r1, [pc, #392]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee06:	4313      	orrs	r3, r2
 801ee08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ee0a:	e05f      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	69db      	ldr	r3, [r3, #28]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d042      	beq.n	801ee9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ee14:	4b5e      	ldr	r3, [pc, #376]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee16:	681b      	ldr	r3, [r3, #0]
 801ee18:	4a5d      	ldr	r2, [pc, #372]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ee20:	f7fc ff00 	bl	801bc24 <HAL_GetTick>
 801ee24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ee26:	e008      	b.n	801ee3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ee28:	f7fc fefc 	bl	801bc24 <HAL_GetTick>
 801ee2c:	4602      	mov	r2, r0
 801ee2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee30:	1ad3      	subs	r3, r2, r3
 801ee32:	2b02      	cmp	r3, #2
 801ee34:	d901      	bls.n	801ee3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801ee36:	2303      	movs	r3, #3
 801ee38:	e280      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ee3a:	4b55      	ldr	r3, [pc, #340]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d0f0      	beq.n	801ee28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ee46:	f7fc ff1d 	bl	801bc84 <HAL_GetREVID>
 801ee4a:	4603      	mov	r3, r0
 801ee4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ee50:	4293      	cmp	r3, r2
 801ee52:	d817      	bhi.n	801ee84 <HAL_RCC_OscConfig+0x3ec>
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	6a1b      	ldr	r3, [r3, #32]
 801ee58:	2b20      	cmp	r3, #32
 801ee5a:	d108      	bne.n	801ee6e <HAL_RCC_OscConfig+0x3d6>
 801ee5c:	4b4c      	ldr	r3, [pc, #304]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee5e:	685b      	ldr	r3, [r3, #4]
 801ee60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ee64:	4a4a      	ldr	r2, [pc, #296]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ee6a:	6053      	str	r3, [r2, #4]
 801ee6c:	e02e      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
 801ee6e:	4b48      	ldr	r3, [pc, #288]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee70:	685b      	ldr	r3, [r3, #4]
 801ee72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	6a1b      	ldr	r3, [r3, #32]
 801ee7a:	069b      	lsls	r3, r3, #26
 801ee7c:	4944      	ldr	r1, [pc, #272]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee7e:	4313      	orrs	r3, r2
 801ee80:	604b      	str	r3, [r1, #4]
 801ee82:	e023      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
 801ee84:	4b42      	ldr	r3, [pc, #264]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee86:	68db      	ldr	r3, [r3, #12]
 801ee88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	6a1b      	ldr	r3, [r3, #32]
 801ee90:	061b      	lsls	r3, r3, #24
 801ee92:	493f      	ldr	r1, [pc, #252]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee94:	4313      	orrs	r3, r2
 801ee96:	60cb      	str	r3, [r1, #12]
 801ee98:	e018      	b.n	801eecc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801ee9a:	4b3d      	ldr	r3, [pc, #244]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	4a3c      	ldr	r2, [pc, #240]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801eea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801eea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eea6:	f7fc febd 	bl	801bc24 <HAL_GetTick>
 801eeaa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801eeac:	e008      	b.n	801eec0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801eeae:	f7fc feb9 	bl	801bc24 <HAL_GetTick>
 801eeb2:	4602      	mov	r2, r0
 801eeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eeb6:	1ad3      	subs	r3, r2, r3
 801eeb8:	2b02      	cmp	r3, #2
 801eeba:	d901      	bls.n	801eec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801eebc:	2303      	movs	r3, #3
 801eebe:	e23d      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801eec0:	4b33      	ldr	r3, [pc, #204]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d1f0      	bne.n	801eeae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	f003 0308 	and.w	r3, r3, #8
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d036      	beq.n	801ef46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	695b      	ldr	r3, [r3, #20]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d019      	beq.n	801ef14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801eee0:	4b2b      	ldr	r3, [pc, #172]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801eee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eee4:	4a2a      	ldr	r2, [pc, #168]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801eee6:	f043 0301 	orr.w	r3, r3, #1
 801eeea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801eeec:	f7fc fe9a 	bl	801bc24 <HAL_GetTick>
 801eef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801eef2:	e008      	b.n	801ef06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801eef4:	f7fc fe96 	bl	801bc24 <HAL_GetTick>
 801eef8:	4602      	mov	r2, r0
 801eefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eefc:	1ad3      	subs	r3, r2, r3
 801eefe:	2b02      	cmp	r3, #2
 801ef00:	d901      	bls.n	801ef06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801ef02:	2303      	movs	r3, #3
 801ef04:	e21a      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ef06:	4b22      	ldr	r3, [pc, #136]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef0a:	f003 0302 	and.w	r3, r3, #2
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d0f0      	beq.n	801eef4 <HAL_RCC_OscConfig+0x45c>
 801ef12:	e018      	b.n	801ef46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ef14:	4b1e      	ldr	r3, [pc, #120]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef18:	4a1d      	ldr	r2, [pc, #116]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef1a:	f023 0301 	bic.w	r3, r3, #1
 801ef1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ef20:	f7fc fe80 	bl	801bc24 <HAL_GetTick>
 801ef24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ef26:	e008      	b.n	801ef3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ef28:	f7fc fe7c 	bl	801bc24 <HAL_GetTick>
 801ef2c:	4602      	mov	r2, r0
 801ef2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef30:	1ad3      	subs	r3, r2, r3
 801ef32:	2b02      	cmp	r3, #2
 801ef34:	d901      	bls.n	801ef3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ef36:	2303      	movs	r3, #3
 801ef38:	e200      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ef3a:	4b15      	ldr	r3, [pc, #84]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef3e:	f003 0302 	and.w	r3, r3, #2
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d1f0      	bne.n	801ef28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	f003 0320 	and.w	r3, r3, #32
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d039      	beq.n	801efc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	699b      	ldr	r3, [r3, #24]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d01c      	beq.n	801ef94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ef5a:	4b0d      	ldr	r3, [pc, #52]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	4a0c      	ldr	r2, [pc, #48]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801ef64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ef66:	f7fc fe5d 	bl	801bc24 <HAL_GetTick>
 801ef6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ef6c:	e008      	b.n	801ef80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ef6e:	f7fc fe59 	bl	801bc24 <HAL_GetTick>
 801ef72:	4602      	mov	r2, r0
 801ef74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef76:	1ad3      	subs	r3, r2, r3
 801ef78:	2b02      	cmp	r3, #2
 801ef7a:	d901      	bls.n	801ef80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801ef7c:	2303      	movs	r3, #3
 801ef7e:	e1dd      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ef80:	4b03      	ldr	r3, [pc, #12]	@ (801ef90 <HAL_RCC_OscConfig+0x4f8>)
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d0f0      	beq.n	801ef6e <HAL_RCC_OscConfig+0x4d6>
 801ef8c:	e01b      	b.n	801efc6 <HAL_RCC_OscConfig+0x52e>
 801ef8e:	bf00      	nop
 801ef90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ef94:	4b9b      	ldr	r3, [pc, #620]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	4a9a      	ldr	r2, [pc, #616]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801ef9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ef9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801efa0:	f7fc fe40 	bl	801bc24 <HAL_GetTick>
 801efa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801efa6:	e008      	b.n	801efba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801efa8:	f7fc fe3c 	bl	801bc24 <HAL_GetTick>
 801efac:	4602      	mov	r2, r0
 801efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efb0:	1ad3      	subs	r3, r2, r3
 801efb2:	2b02      	cmp	r3, #2
 801efb4:	d901      	bls.n	801efba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801efb6:	2303      	movs	r3, #3
 801efb8:	e1c0      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801efba:	4b92      	ldr	r3, [pc, #584]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d1f0      	bne.n	801efa8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	f003 0304 	and.w	r3, r3, #4
 801efce:	2b00      	cmp	r3, #0
 801efd0:	f000 8081 	beq.w	801f0d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801efd4:	4b8c      	ldr	r3, [pc, #560]	@ (801f208 <HAL_RCC_OscConfig+0x770>)
 801efd6:	681b      	ldr	r3, [r3, #0]
 801efd8:	4a8b      	ldr	r2, [pc, #556]	@ (801f208 <HAL_RCC_OscConfig+0x770>)
 801efda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801efde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801efe0:	f7fc fe20 	bl	801bc24 <HAL_GetTick>
 801efe4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801efe6:	e008      	b.n	801effa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801efe8:	f7fc fe1c 	bl	801bc24 <HAL_GetTick>
 801efec:	4602      	mov	r2, r0
 801efee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eff0:	1ad3      	subs	r3, r2, r3
 801eff2:	2b64      	cmp	r3, #100	@ 0x64
 801eff4:	d901      	bls.n	801effa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801eff6:	2303      	movs	r3, #3
 801eff8:	e1a0      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801effa:	4b83      	ldr	r3, [pc, #524]	@ (801f208 <HAL_RCC_OscConfig+0x770>)
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f002:	2b00      	cmp	r3, #0
 801f004:	d0f0      	beq.n	801efe8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	689b      	ldr	r3, [r3, #8]
 801f00a:	2b01      	cmp	r3, #1
 801f00c:	d106      	bne.n	801f01c <HAL_RCC_OscConfig+0x584>
 801f00e:	4b7d      	ldr	r3, [pc, #500]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f012:	4a7c      	ldr	r2, [pc, #496]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f014:	f043 0301 	orr.w	r3, r3, #1
 801f018:	6713      	str	r3, [r2, #112]	@ 0x70
 801f01a:	e02d      	b.n	801f078 <HAL_RCC_OscConfig+0x5e0>
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	689b      	ldr	r3, [r3, #8]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d10c      	bne.n	801f03e <HAL_RCC_OscConfig+0x5a6>
 801f024:	4b77      	ldr	r3, [pc, #476]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f028:	4a76      	ldr	r2, [pc, #472]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f02a:	f023 0301 	bic.w	r3, r3, #1
 801f02e:	6713      	str	r3, [r2, #112]	@ 0x70
 801f030:	4b74      	ldr	r3, [pc, #464]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f034:	4a73      	ldr	r2, [pc, #460]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f036:	f023 0304 	bic.w	r3, r3, #4
 801f03a:	6713      	str	r3, [r2, #112]	@ 0x70
 801f03c:	e01c      	b.n	801f078 <HAL_RCC_OscConfig+0x5e0>
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	689b      	ldr	r3, [r3, #8]
 801f042:	2b05      	cmp	r3, #5
 801f044:	d10c      	bne.n	801f060 <HAL_RCC_OscConfig+0x5c8>
 801f046:	4b6f      	ldr	r3, [pc, #444]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f04a:	4a6e      	ldr	r2, [pc, #440]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f04c:	f043 0304 	orr.w	r3, r3, #4
 801f050:	6713      	str	r3, [r2, #112]	@ 0x70
 801f052:	4b6c      	ldr	r3, [pc, #432]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f056:	4a6b      	ldr	r2, [pc, #428]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f058:	f043 0301 	orr.w	r3, r3, #1
 801f05c:	6713      	str	r3, [r2, #112]	@ 0x70
 801f05e:	e00b      	b.n	801f078 <HAL_RCC_OscConfig+0x5e0>
 801f060:	4b68      	ldr	r3, [pc, #416]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f064:	4a67      	ldr	r2, [pc, #412]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f066:	f023 0301 	bic.w	r3, r3, #1
 801f06a:	6713      	str	r3, [r2, #112]	@ 0x70
 801f06c:	4b65      	ldr	r3, [pc, #404]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f070:	4a64      	ldr	r2, [pc, #400]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f072:	f023 0304 	bic.w	r3, r3, #4
 801f076:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	689b      	ldr	r3, [r3, #8]
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d015      	beq.n	801f0ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f080:	f7fc fdd0 	bl	801bc24 <HAL_GetTick>
 801f084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f086:	e00a      	b.n	801f09e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801f088:	f7fc fdcc 	bl	801bc24 <HAL_GetTick>
 801f08c:	4602      	mov	r2, r0
 801f08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f090:	1ad3      	subs	r3, r2, r3
 801f092:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f096:	4293      	cmp	r3, r2
 801f098:	d901      	bls.n	801f09e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801f09a:	2303      	movs	r3, #3
 801f09c:	e14e      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f09e:	4b59      	ldr	r3, [pc, #356]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0a2:	f003 0302 	and.w	r3, r3, #2
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d0ee      	beq.n	801f088 <HAL_RCC_OscConfig+0x5f0>
 801f0aa:	e014      	b.n	801f0d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f0ac:	f7fc fdba 	bl	801bc24 <HAL_GetTick>
 801f0b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801f0b2:	e00a      	b.n	801f0ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801f0b4:	f7fc fdb6 	bl	801bc24 <HAL_GetTick>
 801f0b8:	4602      	mov	r2, r0
 801f0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0bc:	1ad3      	subs	r3, r2, r3
 801f0be:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f0c2:	4293      	cmp	r3, r2
 801f0c4:	d901      	bls.n	801f0ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801f0c6:	2303      	movs	r3, #3
 801f0c8:	e138      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801f0ca:	4b4e      	ldr	r3, [pc, #312]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0ce:	f003 0302 	and.w	r3, r3, #2
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d1ee      	bne.n	801f0b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	f000 812d 	beq.w	801f33a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801f0e0:	4b48      	ldr	r3, [pc, #288]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f0e2:	691b      	ldr	r3, [r3, #16]
 801f0e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f0e8:	2b18      	cmp	r3, #24
 801f0ea:	f000 80bd 	beq.w	801f268 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f0f2:	2b02      	cmp	r3, #2
 801f0f4:	f040 809e 	bne.w	801f234 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f0f8:	4b42      	ldr	r3, [pc, #264]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f0fa:	681b      	ldr	r3, [r3, #0]
 801f0fc:	4a41      	ldr	r2, [pc, #260]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f0fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f104:	f7fc fd8e 	bl	801bc24 <HAL_GetTick>
 801f108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f10a:	e008      	b.n	801f11e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f10c:	f7fc fd8a 	bl	801bc24 <HAL_GetTick>
 801f110:	4602      	mov	r2, r0
 801f112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f114:	1ad3      	subs	r3, r2, r3
 801f116:	2b02      	cmp	r3, #2
 801f118:	d901      	bls.n	801f11e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801f11a:	2303      	movs	r3, #3
 801f11c:	e10e      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f11e:	4b39      	ldr	r3, [pc, #228]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f126:	2b00      	cmp	r3, #0
 801f128:	d1f0      	bne.n	801f10c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801f12a:	4b36      	ldr	r3, [pc, #216]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f12c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f12e:	4b37      	ldr	r3, [pc, #220]	@ (801f20c <HAL_RCC_OscConfig+0x774>)
 801f130:	4013      	ands	r3, r2
 801f132:	687a      	ldr	r2, [r7, #4]
 801f134:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f136:	687a      	ldr	r2, [r7, #4]
 801f138:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801f13a:	0112      	lsls	r2, r2, #4
 801f13c:	430a      	orrs	r2, r1
 801f13e:	4931      	ldr	r1, [pc, #196]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f140:	4313      	orrs	r3, r2
 801f142:	628b      	str	r3, [r1, #40]	@ 0x28
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f148:	3b01      	subs	r3, #1
 801f14a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f152:	3b01      	subs	r3, #1
 801f154:	025b      	lsls	r3, r3, #9
 801f156:	b29b      	uxth	r3, r3
 801f158:	431a      	orrs	r2, r3
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f15e:	3b01      	subs	r3, #1
 801f160:	041b      	lsls	r3, r3, #16
 801f162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f166:	431a      	orrs	r2, r3
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f16c:	3b01      	subs	r3, #1
 801f16e:	061b      	lsls	r3, r3, #24
 801f170:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f174:	4923      	ldr	r1, [pc, #140]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f176:	4313      	orrs	r3, r2
 801f178:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801f17a:	4b22      	ldr	r3, [pc, #136]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f17e:	4a21      	ldr	r2, [pc, #132]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f180:	f023 0301 	bic.w	r3, r3, #1
 801f184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f186:	4b1f      	ldr	r3, [pc, #124]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f18a:	4b21      	ldr	r3, [pc, #132]	@ (801f210 <HAL_RCC_OscConfig+0x778>)
 801f18c:	4013      	ands	r3, r2
 801f18e:	687a      	ldr	r2, [r7, #4]
 801f190:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f192:	00d2      	lsls	r2, r2, #3
 801f194:	491b      	ldr	r1, [pc, #108]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f196:	4313      	orrs	r3, r2
 801f198:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801f19a:	4b1a      	ldr	r3, [pc, #104]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f19e:	f023 020c 	bic.w	r2, r3, #12
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f1a6:	4917      	ldr	r1, [pc, #92]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1a8:	4313      	orrs	r3, r2
 801f1aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801f1ac:	4b15      	ldr	r3, [pc, #84]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1b0:	f023 0202 	bic.w	r2, r3, #2
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f1b8:	4912      	ldr	r1, [pc, #72]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1ba:	4313      	orrs	r3, r2
 801f1bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801f1be:	4b11      	ldr	r3, [pc, #68]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1c2:	4a10      	ldr	r2, [pc, #64]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f1c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f1ca:	4b0e      	ldr	r3, [pc, #56]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1ce:	4a0d      	ldr	r2, [pc, #52]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801f1d6:	4b0b      	ldr	r3, [pc, #44]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1da:	4a0a      	ldr	r2, [pc, #40]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f1e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801f1e2:	4b08      	ldr	r3, [pc, #32]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1e6:	4a07      	ldr	r2, [pc, #28]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1e8:	f043 0301 	orr.w	r3, r3, #1
 801f1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f1ee:	4b05      	ldr	r3, [pc, #20]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	4a04      	ldr	r2, [pc, #16]	@ (801f204 <HAL_RCC_OscConfig+0x76c>)
 801f1f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f1f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f1fa:	f7fc fd13 	bl	801bc24 <HAL_GetTick>
 801f1fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f200:	e011      	b.n	801f226 <HAL_RCC_OscConfig+0x78e>
 801f202:	bf00      	nop
 801f204:	58024400 	.word	0x58024400
 801f208:	58024800 	.word	0x58024800
 801f20c:	fffffc0c 	.word	0xfffffc0c
 801f210:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f214:	f7fc fd06 	bl	801bc24 <HAL_GetTick>
 801f218:	4602      	mov	r2, r0
 801f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f21c:	1ad3      	subs	r3, r2, r3
 801f21e:	2b02      	cmp	r3, #2
 801f220:	d901      	bls.n	801f226 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801f222:	2303      	movs	r3, #3
 801f224:	e08a      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f226:	4b47      	ldr	r3, [pc, #284]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d0f0      	beq.n	801f214 <HAL_RCC_OscConfig+0x77c>
 801f232:	e082      	b.n	801f33a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f234:	4b43      	ldr	r3, [pc, #268]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	4a42      	ldr	r2, [pc, #264]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f23a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f23e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f240:	f7fc fcf0 	bl	801bc24 <HAL_GetTick>
 801f244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f246:	e008      	b.n	801f25a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f248:	f7fc fcec 	bl	801bc24 <HAL_GetTick>
 801f24c:	4602      	mov	r2, r0
 801f24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f250:	1ad3      	subs	r3, r2, r3
 801f252:	2b02      	cmp	r3, #2
 801f254:	d901      	bls.n	801f25a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801f256:	2303      	movs	r3, #3
 801f258:	e070      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f25a:	4b3a      	ldr	r3, [pc, #232]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f262:	2b00      	cmp	r3, #0
 801f264:	d1f0      	bne.n	801f248 <HAL_RCC_OscConfig+0x7b0>
 801f266:	e068      	b.n	801f33a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801f268:	4b36      	ldr	r3, [pc, #216]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f26c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801f26e:	4b35      	ldr	r3, [pc, #212]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f272:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f278:	2b01      	cmp	r3, #1
 801f27a:	d031      	beq.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f27c:	693b      	ldr	r3, [r7, #16]
 801f27e:	f003 0203 	and.w	r2, r3, #3
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f286:	429a      	cmp	r2, r3
 801f288:	d12a      	bne.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f28a:	693b      	ldr	r3, [r7, #16]
 801f28c:	091b      	lsrs	r3, r3, #4
 801f28e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f296:	429a      	cmp	r2, r3
 801f298:	d122      	bne.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f2a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f2a6:	429a      	cmp	r2, r3
 801f2a8:	d11a      	bne.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	0a5b      	lsrs	r3, r3, #9
 801f2ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f2b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f2b8:	429a      	cmp	r2, r3
 801f2ba:	d111      	bne.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f2bc:	68fb      	ldr	r3, [r7, #12]
 801f2be:	0c1b      	lsrs	r3, r3, #16
 801f2c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f2c4:	687b      	ldr	r3, [r7, #4]
 801f2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f2c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f2ca:	429a      	cmp	r2, r3
 801f2cc:	d108      	bne.n	801f2e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	0e1b      	lsrs	r3, r3, #24
 801f2d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f2da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f2dc:	429a      	cmp	r2, r3
 801f2de:	d001      	beq.n	801f2e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801f2e0:	2301      	movs	r3, #1
 801f2e2:	e02b      	b.n	801f33c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801f2e4:	4b17      	ldr	r3, [pc, #92]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f2e8:	08db      	lsrs	r3, r3, #3
 801f2ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f2ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f2f4:	693a      	ldr	r2, [r7, #16]
 801f2f6:	429a      	cmp	r2, r3
 801f2f8:	d01f      	beq.n	801f33a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801f2fa:	4b12      	ldr	r3, [pc, #72]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2fe:	4a11      	ldr	r2, [pc, #68]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f300:	f023 0301 	bic.w	r3, r3, #1
 801f304:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801f306:	f7fc fc8d 	bl	801bc24 <HAL_GetTick>
 801f30a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801f30c:	bf00      	nop
 801f30e:	f7fc fc89 	bl	801bc24 <HAL_GetTick>
 801f312:	4602      	mov	r2, r0
 801f314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f316:	4293      	cmp	r3, r2
 801f318:	d0f9      	beq.n	801f30e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f31a:	4b0a      	ldr	r3, [pc, #40]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f31c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f31e:	4b0a      	ldr	r3, [pc, #40]	@ (801f348 <HAL_RCC_OscConfig+0x8b0>)
 801f320:	4013      	ands	r3, r2
 801f322:	687a      	ldr	r2, [r7, #4]
 801f324:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f326:	00d2      	lsls	r2, r2, #3
 801f328:	4906      	ldr	r1, [pc, #24]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f32a:	4313      	orrs	r3, r2
 801f32c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801f32e:	4b05      	ldr	r3, [pc, #20]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f332:	4a04      	ldr	r2, [pc, #16]	@ (801f344 <HAL_RCC_OscConfig+0x8ac>)
 801f334:	f043 0301 	orr.w	r3, r3, #1
 801f338:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801f33a:	2300      	movs	r3, #0
}
 801f33c:	4618      	mov	r0, r3
 801f33e:	3730      	adds	r7, #48	@ 0x30
 801f340:	46bd      	mov	sp, r7
 801f342:	bd80      	pop	{r7, pc}
 801f344:	58024400 	.word	0x58024400
 801f348:	ffff0007 	.word	0xffff0007

0801f34c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f34c:	b580      	push	{r7, lr}
 801f34e:	b086      	sub	sp, #24
 801f350:	af00      	add	r7, sp, #0
 801f352:	6078      	str	r0, [r7, #4]
 801f354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d101      	bne.n	801f360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f35c:	2301      	movs	r3, #1
 801f35e:	e19c      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801f360:	4b8a      	ldr	r3, [pc, #552]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	f003 030f 	and.w	r3, r3, #15
 801f368:	683a      	ldr	r2, [r7, #0]
 801f36a:	429a      	cmp	r2, r3
 801f36c:	d910      	bls.n	801f390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f36e:	4b87      	ldr	r3, [pc, #540]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f023 020f 	bic.w	r2, r3, #15
 801f376:	4985      	ldr	r1, [pc, #532]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f378:	683b      	ldr	r3, [r7, #0]
 801f37a:	4313      	orrs	r3, r2
 801f37c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f37e:	4b83      	ldr	r3, [pc, #524]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	f003 030f 	and.w	r3, r3, #15
 801f386:	683a      	ldr	r2, [r7, #0]
 801f388:	429a      	cmp	r2, r3
 801f38a:	d001      	beq.n	801f390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801f38c:	2301      	movs	r3, #1
 801f38e:	e184      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	f003 0304 	and.w	r3, r3, #4
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d010      	beq.n	801f3be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	691a      	ldr	r2, [r3, #16]
 801f3a0:	4b7b      	ldr	r3, [pc, #492]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3a2:	699b      	ldr	r3, [r3, #24]
 801f3a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f3a8:	429a      	cmp	r2, r3
 801f3aa:	d908      	bls.n	801f3be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f3ac:	4b78      	ldr	r3, [pc, #480]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3ae:	699b      	ldr	r3, [r3, #24]
 801f3b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	691b      	ldr	r3, [r3, #16]
 801f3b8:	4975      	ldr	r1, [pc, #468]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3ba:	4313      	orrs	r3, r2
 801f3bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	f003 0308 	and.w	r3, r3, #8
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d010      	beq.n	801f3ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	695a      	ldr	r2, [r3, #20]
 801f3ce:	4b70      	ldr	r3, [pc, #448]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3d0:	69db      	ldr	r3, [r3, #28]
 801f3d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f3d6:	429a      	cmp	r2, r3
 801f3d8:	d908      	bls.n	801f3ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f3da:	4b6d      	ldr	r3, [pc, #436]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3dc:	69db      	ldr	r3, [r3, #28]
 801f3de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	695b      	ldr	r3, [r3, #20]
 801f3e6:	496a      	ldr	r1, [pc, #424]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3e8:	4313      	orrs	r3, r2
 801f3ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	f003 0310 	and.w	r3, r3, #16
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d010      	beq.n	801f41a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	699a      	ldr	r2, [r3, #24]
 801f3fc:	4b64      	ldr	r3, [pc, #400]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f3fe:	69db      	ldr	r3, [r3, #28]
 801f400:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f404:	429a      	cmp	r2, r3
 801f406:	d908      	bls.n	801f41a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f408:	4b61      	ldr	r3, [pc, #388]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f40a:	69db      	ldr	r3, [r3, #28]
 801f40c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	699b      	ldr	r3, [r3, #24]
 801f414:	495e      	ldr	r1, [pc, #376]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f416:	4313      	orrs	r3, r2
 801f418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	f003 0320 	and.w	r3, r3, #32
 801f422:	2b00      	cmp	r3, #0
 801f424:	d010      	beq.n	801f448 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	69da      	ldr	r2, [r3, #28]
 801f42a:	4b59      	ldr	r3, [pc, #356]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f42c:	6a1b      	ldr	r3, [r3, #32]
 801f42e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f432:	429a      	cmp	r2, r3
 801f434:	d908      	bls.n	801f448 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f436:	4b56      	ldr	r3, [pc, #344]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f438:	6a1b      	ldr	r3, [r3, #32]
 801f43a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	69db      	ldr	r3, [r3, #28]
 801f442:	4953      	ldr	r1, [pc, #332]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f444:	4313      	orrs	r3, r2
 801f446:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	f003 0302 	and.w	r3, r3, #2
 801f450:	2b00      	cmp	r3, #0
 801f452:	d010      	beq.n	801f476 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	68da      	ldr	r2, [r3, #12]
 801f458:	4b4d      	ldr	r3, [pc, #308]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f45a:	699b      	ldr	r3, [r3, #24]
 801f45c:	f003 030f 	and.w	r3, r3, #15
 801f460:	429a      	cmp	r2, r3
 801f462:	d908      	bls.n	801f476 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f464:	4b4a      	ldr	r3, [pc, #296]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f466:	699b      	ldr	r3, [r3, #24]
 801f468:	f023 020f 	bic.w	r2, r3, #15
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	68db      	ldr	r3, [r3, #12]
 801f470:	4947      	ldr	r1, [pc, #284]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f472:	4313      	orrs	r3, r2
 801f474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	f003 0301 	and.w	r3, r3, #1
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d055      	beq.n	801f52e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801f482:	4b43      	ldr	r3, [pc, #268]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f484:	699b      	ldr	r3, [r3, #24]
 801f486:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	689b      	ldr	r3, [r3, #8]
 801f48e:	4940      	ldr	r1, [pc, #256]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f490:	4313      	orrs	r3, r2
 801f492:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	2b02      	cmp	r3, #2
 801f49a:	d107      	bne.n	801f4ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801f49c:	4b3c      	ldr	r3, [pc, #240]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f49e:	681b      	ldr	r3, [r3, #0]
 801f4a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d121      	bne.n	801f4ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	e0f6      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	685b      	ldr	r3, [r3, #4]
 801f4b0:	2b03      	cmp	r3, #3
 801f4b2:	d107      	bne.n	801f4c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f4b4:	4b36      	ldr	r3, [pc, #216]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d115      	bne.n	801f4ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f4c0:	2301      	movs	r3, #1
 801f4c2:	e0ea      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	685b      	ldr	r3, [r3, #4]
 801f4c8:	2b01      	cmp	r3, #1
 801f4ca:	d107      	bne.n	801f4dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801f4cc:	4b30      	ldr	r3, [pc, #192]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d109      	bne.n	801f4ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f4d8:	2301      	movs	r3, #1
 801f4da:	e0de      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801f4dc:	4b2c      	ldr	r3, [pc, #176]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	f003 0304 	and.w	r3, r3, #4
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d101      	bne.n	801f4ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f4e8:	2301      	movs	r3, #1
 801f4ea:	e0d6      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801f4ec:	4b28      	ldr	r3, [pc, #160]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f4ee:	691b      	ldr	r3, [r3, #16]
 801f4f0:	f023 0207 	bic.w	r2, r3, #7
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	685b      	ldr	r3, [r3, #4]
 801f4f8:	4925      	ldr	r1, [pc, #148]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f4fa:	4313      	orrs	r3, r2
 801f4fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f4fe:	f7fc fb91 	bl	801bc24 <HAL_GetTick>
 801f502:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f504:	e00a      	b.n	801f51c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f506:	f7fc fb8d 	bl	801bc24 <HAL_GetTick>
 801f50a:	4602      	mov	r2, r0
 801f50c:	697b      	ldr	r3, [r7, #20]
 801f50e:	1ad3      	subs	r3, r2, r3
 801f510:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f514:	4293      	cmp	r3, r2
 801f516:	d901      	bls.n	801f51c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801f518:	2303      	movs	r3, #3
 801f51a:	e0be      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f51c:	4b1c      	ldr	r3, [pc, #112]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f51e:	691b      	ldr	r3, [r3, #16]
 801f520:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	685b      	ldr	r3, [r3, #4]
 801f528:	00db      	lsls	r3, r3, #3
 801f52a:	429a      	cmp	r2, r3
 801f52c:	d1eb      	bne.n	801f506 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	f003 0302 	and.w	r3, r3, #2
 801f536:	2b00      	cmp	r3, #0
 801f538:	d010      	beq.n	801f55c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	68da      	ldr	r2, [r3, #12]
 801f53e:	4b14      	ldr	r3, [pc, #80]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f540:	699b      	ldr	r3, [r3, #24]
 801f542:	f003 030f 	and.w	r3, r3, #15
 801f546:	429a      	cmp	r2, r3
 801f548:	d208      	bcs.n	801f55c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f54a:	4b11      	ldr	r3, [pc, #68]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f54c:	699b      	ldr	r3, [r3, #24]
 801f54e:	f023 020f 	bic.w	r2, r3, #15
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	68db      	ldr	r3, [r3, #12]
 801f556:	490e      	ldr	r1, [pc, #56]	@ (801f590 <HAL_RCC_ClockConfig+0x244>)
 801f558:	4313      	orrs	r3, r2
 801f55a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801f55c:	4b0b      	ldr	r3, [pc, #44]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	f003 030f 	and.w	r3, r3, #15
 801f564:	683a      	ldr	r2, [r7, #0]
 801f566:	429a      	cmp	r2, r3
 801f568:	d214      	bcs.n	801f594 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f56a:	4b08      	ldr	r3, [pc, #32]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	f023 020f 	bic.w	r2, r3, #15
 801f572:	4906      	ldr	r1, [pc, #24]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f574:	683b      	ldr	r3, [r7, #0]
 801f576:	4313      	orrs	r3, r2
 801f578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f57a:	4b04      	ldr	r3, [pc, #16]	@ (801f58c <HAL_RCC_ClockConfig+0x240>)
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	f003 030f 	and.w	r3, r3, #15
 801f582:	683a      	ldr	r2, [r7, #0]
 801f584:	429a      	cmp	r2, r3
 801f586:	d005      	beq.n	801f594 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801f588:	2301      	movs	r3, #1
 801f58a:	e086      	b.n	801f69a <HAL_RCC_ClockConfig+0x34e>
 801f58c:	52002000 	.word	0x52002000
 801f590:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	f003 0304 	and.w	r3, r3, #4
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d010      	beq.n	801f5c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	691a      	ldr	r2, [r3, #16]
 801f5a4:	4b3f      	ldr	r3, [pc, #252]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5a6:	699b      	ldr	r3, [r3, #24]
 801f5a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f5ac:	429a      	cmp	r2, r3
 801f5ae:	d208      	bcs.n	801f5c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f5b0:	4b3c      	ldr	r3, [pc, #240]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5b2:	699b      	ldr	r3, [r3, #24]
 801f5b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	691b      	ldr	r3, [r3, #16]
 801f5bc:	4939      	ldr	r1, [pc, #228]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5be:	4313      	orrs	r3, r2
 801f5c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	f003 0308 	and.w	r3, r3, #8
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d010      	beq.n	801f5f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	695a      	ldr	r2, [r3, #20]
 801f5d2:	4b34      	ldr	r3, [pc, #208]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5d4:	69db      	ldr	r3, [r3, #28]
 801f5d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f5da:	429a      	cmp	r2, r3
 801f5dc:	d208      	bcs.n	801f5f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f5de:	4b31      	ldr	r3, [pc, #196]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5e0:	69db      	ldr	r3, [r3, #28]
 801f5e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	695b      	ldr	r3, [r3, #20]
 801f5ea:	492e      	ldr	r1, [pc, #184]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f5ec:	4313      	orrs	r3, r2
 801f5ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	681b      	ldr	r3, [r3, #0]
 801f5f4:	f003 0310 	and.w	r3, r3, #16
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d010      	beq.n	801f61e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	699a      	ldr	r2, [r3, #24]
 801f600:	4b28      	ldr	r3, [pc, #160]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f602:	69db      	ldr	r3, [r3, #28]
 801f604:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f608:	429a      	cmp	r2, r3
 801f60a:	d208      	bcs.n	801f61e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f60c:	4b25      	ldr	r3, [pc, #148]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f60e:	69db      	ldr	r3, [r3, #28]
 801f610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	699b      	ldr	r3, [r3, #24]
 801f618:	4922      	ldr	r1, [pc, #136]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f61a:	4313      	orrs	r3, r2
 801f61c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	f003 0320 	and.w	r3, r3, #32
 801f626:	2b00      	cmp	r3, #0
 801f628:	d010      	beq.n	801f64c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	69da      	ldr	r2, [r3, #28]
 801f62e:	4b1d      	ldr	r3, [pc, #116]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f630:	6a1b      	ldr	r3, [r3, #32]
 801f632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f636:	429a      	cmp	r2, r3
 801f638:	d208      	bcs.n	801f64c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f63a:	4b1a      	ldr	r3, [pc, #104]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f63c:	6a1b      	ldr	r3, [r3, #32]
 801f63e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	69db      	ldr	r3, [r3, #28]
 801f646:	4917      	ldr	r1, [pc, #92]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f648:	4313      	orrs	r3, r2
 801f64a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801f64c:	f000 f834 	bl	801f6b8 <HAL_RCC_GetSysClockFreq>
 801f650:	4602      	mov	r2, r0
 801f652:	4b14      	ldr	r3, [pc, #80]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f654:	699b      	ldr	r3, [r3, #24]
 801f656:	0a1b      	lsrs	r3, r3, #8
 801f658:	f003 030f 	and.w	r3, r3, #15
 801f65c:	4912      	ldr	r1, [pc, #72]	@ (801f6a8 <HAL_RCC_ClockConfig+0x35c>)
 801f65e:	5ccb      	ldrb	r3, [r1, r3]
 801f660:	f003 031f 	and.w	r3, r3, #31
 801f664:	fa22 f303 	lsr.w	r3, r2, r3
 801f668:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f66a:	4b0e      	ldr	r3, [pc, #56]	@ (801f6a4 <HAL_RCC_ClockConfig+0x358>)
 801f66c:	699b      	ldr	r3, [r3, #24]
 801f66e:	f003 030f 	and.w	r3, r3, #15
 801f672:	4a0d      	ldr	r2, [pc, #52]	@ (801f6a8 <HAL_RCC_ClockConfig+0x35c>)
 801f674:	5cd3      	ldrb	r3, [r2, r3]
 801f676:	f003 031f 	and.w	r3, r3, #31
 801f67a:	693a      	ldr	r2, [r7, #16]
 801f67c:	fa22 f303 	lsr.w	r3, r2, r3
 801f680:	4a0a      	ldr	r2, [pc, #40]	@ (801f6ac <HAL_RCC_ClockConfig+0x360>)
 801f682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f684:	4a0a      	ldr	r2, [pc, #40]	@ (801f6b0 <HAL_RCC_ClockConfig+0x364>)
 801f686:	693b      	ldr	r3, [r7, #16]
 801f688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801f68a:	4b0a      	ldr	r3, [pc, #40]	@ (801f6b4 <HAL_RCC_ClockConfig+0x368>)
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	4618      	mov	r0, r3
 801f690:	f7fc fa7e 	bl	801bb90 <HAL_InitTick>
 801f694:	4603      	mov	r3, r0
 801f696:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801f698:	7bfb      	ldrb	r3, [r7, #15]
}
 801f69a:	4618      	mov	r0, r3
 801f69c:	3718      	adds	r7, #24
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	bd80      	pop	{r7, pc}
 801f6a2:	bf00      	nop
 801f6a4:	58024400 	.word	0x58024400
 801f6a8:	0802b438 	.word	0x0802b438
 801f6ac:	24000020 	.word	0x24000020
 801f6b0:	2400001c 	.word	0x2400001c
 801f6b4:	24000024 	.word	0x24000024

0801f6b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f6b8:	b480      	push	{r7}
 801f6ba:	b089      	sub	sp, #36	@ 0x24
 801f6bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f6be:	4bb3      	ldr	r3, [pc, #716]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6c0:	691b      	ldr	r3, [r3, #16]
 801f6c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f6c6:	2b18      	cmp	r3, #24
 801f6c8:	f200 8155 	bhi.w	801f976 <HAL_RCC_GetSysClockFreq+0x2be>
 801f6cc:	a201      	add	r2, pc, #4	@ (adr r2, 801f6d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 801f6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6d2:	bf00      	nop
 801f6d4:	0801f739 	.word	0x0801f739
 801f6d8:	0801f977 	.word	0x0801f977
 801f6dc:	0801f977 	.word	0x0801f977
 801f6e0:	0801f977 	.word	0x0801f977
 801f6e4:	0801f977 	.word	0x0801f977
 801f6e8:	0801f977 	.word	0x0801f977
 801f6ec:	0801f977 	.word	0x0801f977
 801f6f0:	0801f977 	.word	0x0801f977
 801f6f4:	0801f75f 	.word	0x0801f75f
 801f6f8:	0801f977 	.word	0x0801f977
 801f6fc:	0801f977 	.word	0x0801f977
 801f700:	0801f977 	.word	0x0801f977
 801f704:	0801f977 	.word	0x0801f977
 801f708:	0801f977 	.word	0x0801f977
 801f70c:	0801f977 	.word	0x0801f977
 801f710:	0801f977 	.word	0x0801f977
 801f714:	0801f765 	.word	0x0801f765
 801f718:	0801f977 	.word	0x0801f977
 801f71c:	0801f977 	.word	0x0801f977
 801f720:	0801f977 	.word	0x0801f977
 801f724:	0801f977 	.word	0x0801f977
 801f728:	0801f977 	.word	0x0801f977
 801f72c:	0801f977 	.word	0x0801f977
 801f730:	0801f977 	.word	0x0801f977
 801f734:	0801f76b 	.word	0x0801f76b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f738:	4b94      	ldr	r3, [pc, #592]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	f003 0320 	and.w	r3, r3, #32
 801f740:	2b00      	cmp	r3, #0
 801f742:	d009      	beq.n	801f758 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f744:	4b91      	ldr	r3, [pc, #580]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	08db      	lsrs	r3, r3, #3
 801f74a:	f003 0303 	and.w	r3, r3, #3
 801f74e:	4a90      	ldr	r2, [pc, #576]	@ (801f990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f750:	fa22 f303 	lsr.w	r3, r2, r3
 801f754:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801f756:	e111      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801f758:	4b8d      	ldr	r3, [pc, #564]	@ (801f990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f75a:	61bb      	str	r3, [r7, #24]
      break;
 801f75c:	e10e      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801f75e:	4b8d      	ldr	r3, [pc, #564]	@ (801f994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f760:	61bb      	str	r3, [r7, #24]
      break;
 801f762:	e10b      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801f764:	4b8c      	ldr	r3, [pc, #560]	@ (801f998 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801f766:	61bb      	str	r3, [r7, #24]
      break;
 801f768:	e108      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f76a:	4b88      	ldr	r3, [pc, #544]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f76e:	f003 0303 	and.w	r3, r3, #3
 801f772:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801f774:	4b85      	ldr	r3, [pc, #532]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f778:	091b      	lsrs	r3, r3, #4
 801f77a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f77e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801f780:	4b82      	ldr	r3, [pc, #520]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f784:	f003 0301 	and.w	r3, r3, #1
 801f788:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801f78a:	4b80      	ldr	r3, [pc, #512]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f78e:	08db      	lsrs	r3, r3, #3
 801f790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f794:	68fa      	ldr	r2, [r7, #12]
 801f796:	fb02 f303 	mul.w	r3, r2, r3
 801f79a:	ee07 3a90 	vmov	s15, r3
 801f79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801f7a6:	693b      	ldr	r3, [r7, #16]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	f000 80e1 	beq.w	801f970 <HAL_RCC_GetSysClockFreq+0x2b8>
 801f7ae:	697b      	ldr	r3, [r7, #20]
 801f7b0:	2b02      	cmp	r3, #2
 801f7b2:	f000 8083 	beq.w	801f8bc <HAL_RCC_GetSysClockFreq+0x204>
 801f7b6:	697b      	ldr	r3, [r7, #20]
 801f7b8:	2b02      	cmp	r3, #2
 801f7ba:	f200 80a1 	bhi.w	801f900 <HAL_RCC_GetSysClockFreq+0x248>
 801f7be:	697b      	ldr	r3, [r7, #20]
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d003      	beq.n	801f7cc <HAL_RCC_GetSysClockFreq+0x114>
 801f7c4:	697b      	ldr	r3, [r7, #20]
 801f7c6:	2b01      	cmp	r3, #1
 801f7c8:	d056      	beq.n	801f878 <HAL_RCC_GetSysClockFreq+0x1c0>
 801f7ca:	e099      	b.n	801f900 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f7cc:	4b6f      	ldr	r3, [pc, #444]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	f003 0320 	and.w	r3, r3, #32
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d02d      	beq.n	801f834 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f7d8:	4b6c      	ldr	r3, [pc, #432]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	08db      	lsrs	r3, r3, #3
 801f7de:	f003 0303 	and.w	r3, r3, #3
 801f7e2:	4a6b      	ldr	r2, [pc, #428]	@ (801f990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f7e4:	fa22 f303 	lsr.w	r3, r2, r3
 801f7e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	ee07 3a90 	vmov	s15, r3
 801f7f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7f4:	693b      	ldr	r3, [r7, #16]
 801f7f6:	ee07 3a90 	vmov	s15, r3
 801f7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f802:	4b62      	ldr	r3, [pc, #392]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f80a:	ee07 3a90 	vmov	s15, r3
 801f80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f812:	ed97 6a02 	vldr	s12, [r7, #8]
 801f816:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801f99c <HAL_RCC_GetSysClockFreq+0x2e4>
 801f81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f82e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801f832:	e087      	b.n	801f944 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f834:	693b      	ldr	r3, [r7, #16]
 801f836:	ee07 3a90 	vmov	s15, r3
 801f83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f83e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801f9a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 801f842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f846:	4b51      	ldr	r3, [pc, #324]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f84e:	ee07 3a90 	vmov	s15, r3
 801f852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f856:	ed97 6a02 	vldr	s12, [r7, #8]
 801f85a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801f99c <HAL_RCC_GetSysClockFreq+0x2e4>
 801f85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f876:	e065      	b.n	801f944 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f878:	693b      	ldr	r3, [r7, #16]
 801f87a:	ee07 3a90 	vmov	s15, r3
 801f87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f882:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801f9a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f88a:	4b40      	ldr	r3, [pc, #256]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f892:	ee07 3a90 	vmov	s15, r3
 801f896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f89a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f89e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f99c <HAL_RCC_GetSysClockFreq+0x2e4>
 801f8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f8aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f8ba:	e043      	b.n	801f944 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f8bc:	693b      	ldr	r3, [r7, #16]
 801f8be:	ee07 3a90 	vmov	s15, r3
 801f8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801f9a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801f8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8ce:	4b2f      	ldr	r3, [pc, #188]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f8d6:	ee07 3a90 	vmov	s15, r3
 801f8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f8de:	ed97 6a02 	vldr	s12, [r7, #8]
 801f8e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801f99c <HAL_RCC_GetSysClockFreq+0x2e4>
 801f8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f8ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f8fe:	e021      	b.n	801f944 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f900:	693b      	ldr	r3, [r7, #16]
 801f902:	ee07 3a90 	vmov	s15, r3
 801f906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f90a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801f9a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f912:	4b1e      	ldr	r3, [pc, #120]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f91a:	ee07 3a90 	vmov	s15, r3
 801f91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f922:	ed97 6a02 	vldr	s12, [r7, #8]
 801f926:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801f99c <HAL_RCC_GetSysClockFreq+0x2e4>
 801f92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f93e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f942:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801f944:	4b11      	ldr	r3, [pc, #68]	@ (801f98c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f948:	0a5b      	lsrs	r3, r3, #9
 801f94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f94e:	3301      	adds	r3, #1
 801f950:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801f952:	683b      	ldr	r3, [r7, #0]
 801f954:	ee07 3a90 	vmov	s15, r3
 801f958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f95c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f968:	ee17 3a90 	vmov	r3, s15
 801f96c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801f96e:	e005      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801f970:	2300      	movs	r3, #0
 801f972:	61bb      	str	r3, [r7, #24]
      break;
 801f974:	e002      	b.n	801f97c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801f976:	4b07      	ldr	r3, [pc, #28]	@ (801f994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f978:	61bb      	str	r3, [r7, #24]
      break;
 801f97a:	bf00      	nop
  }

  return sysclockfreq;
 801f97c:	69bb      	ldr	r3, [r7, #24]
}
 801f97e:	4618      	mov	r0, r3
 801f980:	3724      	adds	r7, #36	@ 0x24
 801f982:	46bd      	mov	sp, r7
 801f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f988:	4770      	bx	lr
 801f98a:	bf00      	nop
 801f98c:	58024400 	.word	0x58024400
 801f990:	03d09000 	.word	0x03d09000
 801f994:	003d0900 	.word	0x003d0900
 801f998:	017d7840 	.word	0x017d7840
 801f99c:	46000000 	.word	0x46000000
 801f9a0:	4c742400 	.word	0x4c742400
 801f9a4:	4a742400 	.word	0x4a742400
 801f9a8:	4bbebc20 	.word	0x4bbebc20

0801f9ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f9ac:	b580      	push	{r7, lr}
 801f9ae:	b082      	sub	sp, #8
 801f9b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801f9b2:	f7ff fe81 	bl	801f6b8 <HAL_RCC_GetSysClockFreq>
 801f9b6:	4602      	mov	r2, r0
 801f9b8:	4b10      	ldr	r3, [pc, #64]	@ (801f9fc <HAL_RCC_GetHCLKFreq+0x50>)
 801f9ba:	699b      	ldr	r3, [r3, #24]
 801f9bc:	0a1b      	lsrs	r3, r3, #8
 801f9be:	f003 030f 	and.w	r3, r3, #15
 801f9c2:	490f      	ldr	r1, [pc, #60]	@ (801fa00 <HAL_RCC_GetHCLKFreq+0x54>)
 801f9c4:	5ccb      	ldrb	r3, [r1, r3]
 801f9c6:	f003 031f 	and.w	r3, r3, #31
 801f9ca:	fa22 f303 	lsr.w	r3, r2, r3
 801f9ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f9d0:	4b0a      	ldr	r3, [pc, #40]	@ (801f9fc <HAL_RCC_GetHCLKFreq+0x50>)
 801f9d2:	699b      	ldr	r3, [r3, #24]
 801f9d4:	f003 030f 	and.w	r3, r3, #15
 801f9d8:	4a09      	ldr	r2, [pc, #36]	@ (801fa00 <HAL_RCC_GetHCLKFreq+0x54>)
 801f9da:	5cd3      	ldrb	r3, [r2, r3]
 801f9dc:	f003 031f 	and.w	r3, r3, #31
 801f9e0:	687a      	ldr	r2, [r7, #4]
 801f9e2:	fa22 f303 	lsr.w	r3, r2, r3
 801f9e6:	4a07      	ldr	r2, [pc, #28]	@ (801fa04 <HAL_RCC_GetHCLKFreq+0x58>)
 801f9e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f9ea:	4a07      	ldr	r2, [pc, #28]	@ (801fa08 <HAL_RCC_GetHCLKFreq+0x5c>)
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801f9f0:	4b04      	ldr	r3, [pc, #16]	@ (801fa04 <HAL_RCC_GetHCLKFreq+0x58>)
 801f9f2:	681b      	ldr	r3, [r3, #0]
}
 801f9f4:	4618      	mov	r0, r3
 801f9f6:	3708      	adds	r7, #8
 801f9f8:	46bd      	mov	sp, r7
 801f9fa:	bd80      	pop	{r7, pc}
 801f9fc:	58024400 	.word	0x58024400
 801fa00:	0802b438 	.word	0x0802b438
 801fa04:	24000020 	.word	0x24000020
 801fa08:	2400001c 	.word	0x2400001c

0801fa0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fa0c:	b580      	push	{r7, lr}
 801fa0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801fa10:	f7ff ffcc 	bl	801f9ac <HAL_RCC_GetHCLKFreq>
 801fa14:	4602      	mov	r2, r0
 801fa16:	4b06      	ldr	r3, [pc, #24]	@ (801fa30 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fa18:	69db      	ldr	r3, [r3, #28]
 801fa1a:	091b      	lsrs	r3, r3, #4
 801fa1c:	f003 0307 	and.w	r3, r3, #7
 801fa20:	4904      	ldr	r1, [pc, #16]	@ (801fa34 <HAL_RCC_GetPCLK1Freq+0x28>)
 801fa22:	5ccb      	ldrb	r3, [r1, r3]
 801fa24:	f003 031f 	and.w	r3, r3, #31
 801fa28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	bd80      	pop	{r7, pc}
 801fa30:	58024400 	.word	0x58024400
 801fa34:	0802b438 	.word	0x0802b438

0801fa38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fa38:	b580      	push	{r7, lr}
 801fa3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801fa3c:	f7ff ffb6 	bl	801f9ac <HAL_RCC_GetHCLKFreq>
 801fa40:	4602      	mov	r2, r0
 801fa42:	4b06      	ldr	r3, [pc, #24]	@ (801fa5c <HAL_RCC_GetPCLK2Freq+0x24>)
 801fa44:	69db      	ldr	r3, [r3, #28]
 801fa46:	0a1b      	lsrs	r3, r3, #8
 801fa48:	f003 0307 	and.w	r3, r3, #7
 801fa4c:	4904      	ldr	r1, [pc, #16]	@ (801fa60 <HAL_RCC_GetPCLK2Freq+0x28>)
 801fa4e:	5ccb      	ldrb	r3, [r1, r3]
 801fa50:	f003 031f 	and.w	r3, r3, #31
 801fa54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801fa58:	4618      	mov	r0, r3
 801fa5a:	bd80      	pop	{r7, pc}
 801fa5c:	58024400 	.word	0x58024400
 801fa60:	0802b438 	.word	0x0802b438

0801fa64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801fa64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fa68:	b0ca      	sub	sp, #296	@ 0x128
 801fa6a:	af00      	add	r7, sp, #0
 801fa6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801fa70:	2300      	movs	r3, #0
 801fa72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801fa76:	2300      	movs	r3, #0
 801fa78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801fa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801fa88:	2500      	movs	r5, #0
 801fa8a:	ea54 0305 	orrs.w	r3, r4, r5
 801fa8e:	d049      	beq.n	801fb24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801fa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fa96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801fa9a:	d02f      	beq.n	801fafc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801fa9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801faa0:	d828      	bhi.n	801faf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801faa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801faa6:	d01a      	beq.n	801fade <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801faa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801faac:	d822      	bhi.n	801faf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801faae:	2b00      	cmp	r3, #0
 801fab0:	d003      	beq.n	801faba <HAL_RCCEx_PeriphCLKConfig+0x56>
 801fab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fab6:	d007      	beq.n	801fac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801fab8:	e01c      	b.n	801faf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801faba:	4bb8      	ldr	r3, [pc, #736]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fabe:	4ab7      	ldr	r2, [pc, #732]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fac6:	e01a      	b.n	801fafe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801facc:	3308      	adds	r3, #8
 801face:	2102      	movs	r1, #2
 801fad0:	4618      	mov	r0, r3
 801fad2:	f002 fb61 	bl	8022198 <RCCEx_PLL2_Config>
 801fad6:	4603      	mov	r3, r0
 801fad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fadc:	e00f      	b.n	801fafe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801fade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fae2:	3328      	adds	r3, #40	@ 0x28
 801fae4:	2102      	movs	r1, #2
 801fae6:	4618      	mov	r0, r3
 801fae8:	f002 fc08 	bl	80222fc <RCCEx_PLL3_Config>
 801faec:	4603      	mov	r3, r0
 801faee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801faf2:	e004      	b.n	801fafe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801faf4:	2301      	movs	r3, #1
 801faf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fafa:	e000      	b.n	801fafe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801fafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d10a      	bne.n	801fb1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801fb06:	4ba5      	ldr	r3, [pc, #660]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fb0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801fb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fb14:	4aa1      	ldr	r2, [pc, #644]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb16:	430b      	orrs	r3, r1
 801fb18:	6513      	str	r3, [r2, #80]	@ 0x50
 801fb1a:	e003      	b.n	801fb24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fb1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801fb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801fb30:	f04f 0900 	mov.w	r9, #0
 801fb34:	ea58 0309 	orrs.w	r3, r8, r9
 801fb38:	d047      	beq.n	801fbca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801fb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fb40:	2b04      	cmp	r3, #4
 801fb42:	d82a      	bhi.n	801fb9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801fb44:	a201      	add	r2, pc, #4	@ (adr r2, 801fb4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801fb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb4a:	bf00      	nop
 801fb4c:	0801fb61 	.word	0x0801fb61
 801fb50:	0801fb6f 	.word	0x0801fb6f
 801fb54:	0801fb85 	.word	0x0801fb85
 801fb58:	0801fba3 	.word	0x0801fba3
 801fb5c:	0801fba3 	.word	0x0801fba3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fb60:	4b8e      	ldr	r3, [pc, #568]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb64:	4a8d      	ldr	r2, [pc, #564]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fb6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fb6c:	e01a      	b.n	801fba4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb72:	3308      	adds	r3, #8
 801fb74:	2100      	movs	r1, #0
 801fb76:	4618      	mov	r0, r3
 801fb78:	f002 fb0e 	bl	8022198 <RCCEx_PLL2_Config>
 801fb7c:	4603      	mov	r3, r0
 801fb7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fb82:	e00f      	b.n	801fba4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb88:	3328      	adds	r3, #40	@ 0x28
 801fb8a:	2100      	movs	r1, #0
 801fb8c:	4618      	mov	r0, r3
 801fb8e:	f002 fbb5 	bl	80222fc <RCCEx_PLL3_Config>
 801fb92:	4603      	mov	r3, r0
 801fb94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fb98:	e004      	b.n	801fba4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fb9a:	2301      	movs	r3, #1
 801fb9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fba0:	e000      	b.n	801fba4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801fba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d10a      	bne.n	801fbc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801fbac:	4b7b      	ldr	r3, [pc, #492]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fbb0:	f023 0107 	bic.w	r1, r3, #7
 801fbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fbba:	4a78      	ldr	r2, [pc, #480]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbbc:	430b      	orrs	r3, r1
 801fbbe:	6513      	str	r3, [r2, #80]	@ 0x50
 801fbc0:	e003      	b.n	801fbca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fbc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fbc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801fbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801fbd6:	f04f 0b00 	mov.w	fp, #0
 801fbda:	ea5a 030b 	orrs.w	r3, sl, fp
 801fbde:	d04c      	beq.n	801fc7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801fbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fbe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fbea:	d030      	beq.n	801fc4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801fbec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fbf0:	d829      	bhi.n	801fc46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fbf2:	2bc0      	cmp	r3, #192	@ 0xc0
 801fbf4:	d02d      	beq.n	801fc52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801fbf6:	2bc0      	cmp	r3, #192	@ 0xc0
 801fbf8:	d825      	bhi.n	801fc46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fbfa:	2b80      	cmp	r3, #128	@ 0x80
 801fbfc:	d018      	beq.n	801fc30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801fbfe:	2b80      	cmp	r3, #128	@ 0x80
 801fc00:	d821      	bhi.n	801fc46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d002      	beq.n	801fc0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801fc06:	2b40      	cmp	r3, #64	@ 0x40
 801fc08:	d007      	beq.n	801fc1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801fc0a:	e01c      	b.n	801fc46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fc0c:	4b63      	ldr	r3, [pc, #396]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc10:	4a62      	ldr	r2, [pc, #392]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fc16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fc18:	e01c      	b.n	801fc54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc1e:	3308      	adds	r3, #8
 801fc20:	2100      	movs	r1, #0
 801fc22:	4618      	mov	r0, r3
 801fc24:	f002 fab8 	bl	8022198 <RCCEx_PLL2_Config>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fc2e:	e011      	b.n	801fc54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc34:	3328      	adds	r3, #40	@ 0x28
 801fc36:	2100      	movs	r1, #0
 801fc38:	4618      	mov	r0, r3
 801fc3a:	f002 fb5f 	bl	80222fc <RCCEx_PLL3_Config>
 801fc3e:	4603      	mov	r3, r0
 801fc40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fc44:	e006      	b.n	801fc54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fc46:	2301      	movs	r3, #1
 801fc48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fc4c:	e002      	b.n	801fc54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fc4e:	bf00      	nop
 801fc50:	e000      	b.n	801fc54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fc52:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fc54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d10a      	bne.n	801fc72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801fc5c:	4b4f      	ldr	r3, [pc, #316]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fc60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801fc64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fc6a:	4a4c      	ldr	r2, [pc, #304]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc6c:	430b      	orrs	r3, r1
 801fc6e:	6513      	str	r3, [r2, #80]	@ 0x50
 801fc70:	e003      	b.n	801fc7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fc72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801fc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801fc86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801fc8a:	2300      	movs	r3, #0
 801fc8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801fc90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801fc94:	460b      	mov	r3, r1
 801fc96:	4313      	orrs	r3, r2
 801fc98:	d053      	beq.n	801fd42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801fc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fca2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fca6:	d035      	beq.n	801fd14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801fca8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fcac:	d82e      	bhi.n	801fd0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fcae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fcb2:	d031      	beq.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801fcb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fcb8:	d828      	bhi.n	801fd0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fcba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fcbe:	d01a      	beq.n	801fcf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801fcc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fcc4:	d822      	bhi.n	801fd0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d003      	beq.n	801fcd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801fcca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fcce:	d007      	beq.n	801fce0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801fcd0:	e01c      	b.n	801fd0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fcd2:	4b32      	ldr	r3, [pc, #200]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcd6:	4a31      	ldr	r2, [pc, #196]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fcd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fcdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fcde:	e01c      	b.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fce4:	3308      	adds	r3, #8
 801fce6:	2100      	movs	r1, #0
 801fce8:	4618      	mov	r0, r3
 801fcea:	f002 fa55 	bl	8022198 <RCCEx_PLL2_Config>
 801fcee:	4603      	mov	r3, r0
 801fcf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fcf4:	e011      	b.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcfa:	3328      	adds	r3, #40	@ 0x28
 801fcfc:	2100      	movs	r1, #0
 801fcfe:	4618      	mov	r0, r3
 801fd00:	f002 fafc 	bl	80222fc <RCCEx_PLL3_Config>
 801fd04:	4603      	mov	r3, r0
 801fd06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fd0a:	e006      	b.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fd0c:	2301      	movs	r3, #1
 801fd0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fd12:	e002      	b.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fd14:	bf00      	nop
 801fd16:	e000      	b.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fd1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d10b      	bne.n	801fd3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801fd22:	4b1e      	ldr	r3, [pc, #120]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fd24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fd26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801fd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fd32:	4a1a      	ldr	r2, [pc, #104]	@ (801fd9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fd34:	430b      	orrs	r3, r1
 801fd36:	6593      	str	r3, [r2, #88]	@ 0x58
 801fd38:	e003      	b.n	801fd42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fd3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801fd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801fd4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801fd52:	2300      	movs	r3, #0
 801fd54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801fd58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801fd5c:	460b      	mov	r3, r1
 801fd5e:	4313      	orrs	r3, r2
 801fd60:	d056      	beq.n	801fe10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801fd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fd6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fd6e:	d038      	beq.n	801fde2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801fd70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fd74:	d831      	bhi.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fd76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fd7a:	d034      	beq.n	801fde6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801fd7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fd80:	d82b      	bhi.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fd82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fd86:	d01d      	beq.n	801fdc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801fd88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fd8c:	d825      	bhi.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d006      	beq.n	801fda0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801fd92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fd96:	d00a      	beq.n	801fdae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801fd98:	e01f      	b.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fd9a:	bf00      	nop
 801fd9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fda0:	4ba2      	ldr	r3, [pc, #648]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fda2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fda4:	4aa1      	ldr	r2, [pc, #644]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fda6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fdaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fdac:	e01c      	b.n	801fde8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fdae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdb2:	3308      	adds	r3, #8
 801fdb4:	2100      	movs	r1, #0
 801fdb6:	4618      	mov	r0, r3
 801fdb8:	f002 f9ee 	bl	8022198 <RCCEx_PLL2_Config>
 801fdbc:	4603      	mov	r3, r0
 801fdbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fdc2:	e011      	b.n	801fde8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdc8:	3328      	adds	r3, #40	@ 0x28
 801fdca:	2100      	movs	r1, #0
 801fdcc:	4618      	mov	r0, r3
 801fdce:	f002 fa95 	bl	80222fc <RCCEx_PLL3_Config>
 801fdd2:	4603      	mov	r3, r0
 801fdd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fdd8:	e006      	b.n	801fde8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fdda:	2301      	movs	r3, #1
 801fddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fde0:	e002      	b.n	801fde8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fde2:	bf00      	nop
 801fde4:	e000      	b.n	801fde8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fde6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fde8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	d10b      	bne.n	801fe08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801fdf0:	4b8e      	ldr	r3, [pc, #568]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fdf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fdf4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801fdf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fe00:	4a8a      	ldr	r2, [pc, #552]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe02:	430b      	orrs	r3, r1
 801fe04:	6593      	str	r3, [r2, #88]	@ 0x58
 801fe06:	e003      	b.n	801fe10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801fe10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801fe1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801fe20:	2300      	movs	r3, #0
 801fe22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801fe26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801fe2a:	460b      	mov	r3, r1
 801fe2c:	4313      	orrs	r3, r2
 801fe2e:	d03a      	beq.n	801fea6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801fe30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fe36:	2b30      	cmp	r3, #48	@ 0x30
 801fe38:	d01f      	beq.n	801fe7a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801fe3a:	2b30      	cmp	r3, #48	@ 0x30
 801fe3c:	d819      	bhi.n	801fe72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fe3e:	2b20      	cmp	r3, #32
 801fe40:	d00c      	beq.n	801fe5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801fe42:	2b20      	cmp	r3, #32
 801fe44:	d815      	bhi.n	801fe72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	d019      	beq.n	801fe7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801fe4a:	2b10      	cmp	r3, #16
 801fe4c:	d111      	bne.n	801fe72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fe4e:	4b77      	ldr	r3, [pc, #476]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe52:	4a76      	ldr	r2, [pc, #472]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fe58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fe5a:	e011      	b.n	801fe80 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fe5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe60:	3308      	adds	r3, #8
 801fe62:	2102      	movs	r1, #2
 801fe64:	4618      	mov	r0, r3
 801fe66:	f002 f997 	bl	8022198 <RCCEx_PLL2_Config>
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fe70:	e006      	b.n	801fe80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801fe72:	2301      	movs	r3, #1
 801fe74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fe78:	e002      	b.n	801fe80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fe7a:	bf00      	nop
 801fe7c:	e000      	b.n	801fe80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fe7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fe80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d10a      	bne.n	801fe9e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801fe88:	4b68      	ldr	r3, [pc, #416]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fe8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801fe90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fe96:	4a65      	ldr	r2, [pc, #404]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe98:	430b      	orrs	r3, r1
 801fe9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801fe9c:	e003      	b.n	801fea6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801fea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801feaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801feb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801feb6:	2300      	movs	r3, #0
 801feb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801febc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801fec0:	460b      	mov	r3, r1
 801fec2:	4313      	orrs	r3, r2
 801fec4:	d051      	beq.n	801ff6a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801fec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801feca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fecc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fed0:	d035      	beq.n	801ff3e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801fed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fed6:	d82e      	bhi.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fedc:	d031      	beq.n	801ff42 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801fede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fee2:	d828      	bhi.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fee8:	d01a      	beq.n	801ff20 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801feea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801feee:	d822      	bhi.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d003      	beq.n	801fefc <HAL_RCCEx_PeriphCLKConfig+0x498>
 801fef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fef8:	d007      	beq.n	801ff0a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801fefa:	e01c      	b.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fefc:	4b4b      	ldr	r3, [pc, #300]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff00:	4a4a      	ldr	r2, [pc, #296]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ff06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ff08:	e01c      	b.n	801ff44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ff0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff0e:	3308      	adds	r3, #8
 801ff10:	2100      	movs	r1, #0
 801ff12:	4618      	mov	r0, r3
 801ff14:	f002 f940 	bl	8022198 <RCCEx_PLL2_Config>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ff1e:	e011      	b.n	801ff44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ff20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff24:	3328      	adds	r3, #40	@ 0x28
 801ff26:	2100      	movs	r1, #0
 801ff28:	4618      	mov	r0, r3
 801ff2a:	f002 f9e7 	bl	80222fc <RCCEx_PLL3_Config>
 801ff2e:	4603      	mov	r3, r0
 801ff30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ff34:	e006      	b.n	801ff44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ff36:	2301      	movs	r3, #1
 801ff38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ff3c:	e002      	b.n	801ff44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ff3e:	bf00      	nop
 801ff40:	e000      	b.n	801ff44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ff42:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ff44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d10a      	bne.n	801ff62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801ff4c:	4b37      	ldr	r3, [pc, #220]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ff50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801ff54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff5a:	4a34      	ldr	r2, [pc, #208]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff5c:	430b      	orrs	r3, r1
 801ff5e:	6513      	str	r3, [r2, #80]	@ 0x50
 801ff60:	e003      	b.n	801ff6a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ff62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801ff6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801ff76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801ff7a:	2300      	movs	r3, #0
 801ff7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801ff80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801ff84:	460b      	mov	r3, r1
 801ff86:	4313      	orrs	r3, r2
 801ff88:	d056      	beq.n	8020038 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801ff8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ff94:	d033      	beq.n	801fffe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801ff96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ff9a:	d82c      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801ff9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801ffa0:	d02f      	beq.n	8020002 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801ffa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801ffa6:	d826      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801ffa8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801ffac:	d02b      	beq.n	8020006 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801ffae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801ffb2:	d820      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801ffb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ffb8:	d012      	beq.n	801ffe0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801ffba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ffbe:	d81a      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d022      	beq.n	802000a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801ffc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ffc8:	d115      	bne.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ffca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffce:	3308      	adds	r3, #8
 801ffd0:	2101      	movs	r1, #1
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f002 f8e0 	bl	8022198 <RCCEx_PLL2_Config>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801ffde:	e015      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ffe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffe4:	3328      	adds	r3, #40	@ 0x28
 801ffe6:	2101      	movs	r1, #1
 801ffe8:	4618      	mov	r0, r3
 801ffea:	f002 f987 	bl	80222fc <RCCEx_PLL3_Config>
 801ffee:	4603      	mov	r3, r0
 801fff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801fff4:	e00a      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fff6:	2301      	movs	r3, #1
 801fff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fffc:	e006      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801fffe:	bf00      	nop
 8020000:	e004      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8020002:	bf00      	nop
 8020004:	e002      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8020006:	bf00      	nop
 8020008:	e000      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802000a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802000c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020010:	2b00      	cmp	r3, #0
 8020012:	d10d      	bne.n	8020030 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8020014:	4b05      	ldr	r3, [pc, #20]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8020016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020018:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 802001c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020022:	4a02      	ldr	r2, [pc, #8]	@ (802002c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8020024:	430b      	orrs	r3, r1
 8020026:	6513      	str	r3, [r2, #80]	@ 0x50
 8020028:	e006      	b.n	8020038 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 802002a:	bf00      	nop
 802002c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8020038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020040:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8020044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8020048:	2300      	movs	r3, #0
 802004a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 802004e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8020052:	460b      	mov	r3, r1
 8020054:	4313      	orrs	r3, r2
 8020056:	d055      	beq.n	8020104 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8020058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802005c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8020060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8020064:	d033      	beq.n	80200ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8020066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802006a:	d82c      	bhi.n	80200c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802006c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020070:	d02f      	beq.n	80200d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8020072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020076:	d826      	bhi.n	80200c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8020078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802007c:	d02b      	beq.n	80200d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 802007e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020082:	d820      	bhi.n	80200c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8020084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020088:	d012      	beq.n	80200b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 802008a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802008e:	d81a      	bhi.n	80200c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8020090:	2b00      	cmp	r3, #0
 8020092:	d022      	beq.n	80200da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8020094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020098:	d115      	bne.n	80200c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802009a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802009e:	3308      	adds	r3, #8
 80200a0:	2101      	movs	r1, #1
 80200a2:	4618      	mov	r0, r3
 80200a4:	f002 f878 	bl	8022198 <RCCEx_PLL2_Config>
 80200a8:	4603      	mov	r3, r0
 80200aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80200ae:	e015      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80200b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200b4:	3328      	adds	r3, #40	@ 0x28
 80200b6:	2101      	movs	r1, #1
 80200b8:	4618      	mov	r0, r3
 80200ba:	f002 f91f 	bl	80222fc <RCCEx_PLL3_Config>
 80200be:	4603      	mov	r3, r0
 80200c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80200c4:	e00a      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80200c6:	2301      	movs	r3, #1
 80200c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80200cc:	e006      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80200ce:	bf00      	nop
 80200d0:	e004      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80200d2:	bf00      	nop
 80200d4:	e002      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80200d6:	bf00      	nop
 80200d8:	e000      	b.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80200da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80200dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	d10b      	bne.n	80200fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80200e4:	4ba3      	ldr	r3, [pc, #652]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80200e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80200ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80200f4:	4a9f      	ldr	r2, [pc, #636]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200f6:	430b      	orrs	r3, r1
 80200f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80200fa:	e003      	b.n	8020104 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80200fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8020104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802010c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8020110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8020114:	2300      	movs	r3, #0
 8020116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802011a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802011e:	460b      	mov	r3, r1
 8020120:	4313      	orrs	r3, r2
 8020122:	d037      	beq.n	8020194 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8020124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802012a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802012e:	d00e      	beq.n	802014e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8020130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020134:	d816      	bhi.n	8020164 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8020136:	2b00      	cmp	r3, #0
 8020138:	d018      	beq.n	802016c <HAL_RCCEx_PeriphCLKConfig+0x708>
 802013a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802013e:	d111      	bne.n	8020164 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020140:	4b8c      	ldr	r3, [pc, #560]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020144:	4a8b      	ldr	r2, [pc, #556]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802014a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802014c:	e00f      	b.n	802016e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802014e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020152:	3308      	adds	r3, #8
 8020154:	2101      	movs	r1, #1
 8020156:	4618      	mov	r0, r3
 8020158:	f002 f81e 	bl	8022198 <RCCEx_PLL2_Config>
 802015c:	4603      	mov	r3, r0
 802015e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8020162:	e004      	b.n	802016e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020164:	2301      	movs	r3, #1
 8020166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802016a:	e000      	b.n	802016e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802016c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802016e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020172:	2b00      	cmp	r3, #0
 8020174:	d10a      	bne.n	802018c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8020176:	4b7f      	ldr	r3, [pc, #508]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802017a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 802017e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020184:	4a7b      	ldr	r2, [pc, #492]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020186:	430b      	orrs	r3, r1
 8020188:	6513      	str	r3, [r2, #80]	@ 0x50
 802018a:	e003      	b.n	8020194 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802018c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8020194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802019c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80201a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80201a4:	2300      	movs	r3, #0
 80201a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80201aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80201ae:	460b      	mov	r3, r1
 80201b0:	4313      	orrs	r3, r2
 80201b2:	d039      	beq.n	8020228 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80201b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80201ba:	2b03      	cmp	r3, #3
 80201bc:	d81c      	bhi.n	80201f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80201be:	a201      	add	r2, pc, #4	@ (adr r2, 80201c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80201c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80201c4:	08020201 	.word	0x08020201
 80201c8:	080201d5 	.word	0x080201d5
 80201cc:	080201e3 	.word	0x080201e3
 80201d0:	08020201 	.word	0x08020201
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80201d4:	4b67      	ldr	r3, [pc, #412]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201d8:	4a66      	ldr	r2, [pc, #408]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80201de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80201e0:	e00f      	b.n	8020202 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80201e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201e6:	3308      	adds	r3, #8
 80201e8:	2102      	movs	r1, #2
 80201ea:	4618      	mov	r0, r3
 80201ec:	f001 ffd4 	bl	8022198 <RCCEx_PLL2_Config>
 80201f0:	4603      	mov	r3, r0
 80201f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80201f6:	e004      	b.n	8020202 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80201f8:	2301      	movs	r3, #1
 80201fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80201fe:	e000      	b.n	8020202 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8020200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020206:	2b00      	cmp	r3, #0
 8020208:	d10a      	bne.n	8020220 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802020a:	4b5a      	ldr	r3, [pc, #360]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802020c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802020e:	f023 0103 	bic.w	r1, r3, #3
 8020212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020218:	4a56      	ldr	r2, [pc, #344]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802021a:	430b      	orrs	r3, r1
 802021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802021e:	e003      	b.n	8020228 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8020228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020230:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8020234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8020238:	2300      	movs	r3, #0
 802023a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802023e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8020242:	460b      	mov	r3, r1
 8020244:	4313      	orrs	r3, r2
 8020246:	f000 809f 	beq.w	8020388 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802024a:	4b4b      	ldr	r3, [pc, #300]	@ (8020378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	4a4a      	ldr	r2, [pc, #296]	@ (8020378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8020250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020254:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8020256:	f7fb fce5 	bl	801bc24 <HAL_GetTick>
 802025a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802025e:	e00b      	b.n	8020278 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020260:	f7fb fce0 	bl	801bc24 <HAL_GetTick>
 8020264:	4602      	mov	r2, r0
 8020266:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802026a:	1ad3      	subs	r3, r2, r3
 802026c:	2b64      	cmp	r3, #100	@ 0x64
 802026e:	d903      	bls.n	8020278 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8020270:	2303      	movs	r3, #3
 8020272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020276:	e005      	b.n	8020284 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8020278:	4b3f      	ldr	r3, [pc, #252]	@ (8020378 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802027a:	681b      	ldr	r3, [r3, #0]
 802027c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020280:	2b00      	cmp	r3, #0
 8020282:	d0ed      	beq.n	8020260 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8020284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020288:	2b00      	cmp	r3, #0
 802028a:	d179      	bne.n	8020380 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 802028c:	4b39      	ldr	r3, [pc, #228]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802028e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020294:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020298:	4053      	eors	r3, r2
 802029a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d015      	beq.n	80202ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80202a2:	4b34      	ldr	r3, [pc, #208]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80202a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80202aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80202ae:	4b31      	ldr	r3, [pc, #196]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80202b2:	4a30      	ldr	r2, [pc, #192]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80202b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80202ba:	4b2e      	ldr	r3, [pc, #184]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80202be:	4a2d      	ldr	r2, [pc, #180]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80202c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80202c6:	4a2b      	ldr	r2, [pc, #172]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80202c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80202cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80202ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80202d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80202d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80202da:	d118      	bne.n	802030e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80202dc:	f7fb fca2 	bl	801bc24 <HAL_GetTick>
 80202e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80202e4:	e00d      	b.n	8020302 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80202e6:	f7fb fc9d 	bl	801bc24 <HAL_GetTick>
 80202ea:	4602      	mov	r2, r0
 80202ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80202f0:	1ad2      	subs	r2, r2, r3
 80202f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80202f6:	429a      	cmp	r2, r3
 80202f8:	d903      	bls.n	8020302 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80202fa:	2303      	movs	r3, #3
 80202fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8020300:	e005      	b.n	802030e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8020302:	4b1c      	ldr	r3, [pc, #112]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020306:	f003 0302 	and.w	r3, r3, #2
 802030a:	2b00      	cmp	r3, #0
 802030c:	d0eb      	beq.n	80202e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802030e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020312:	2b00      	cmp	r3, #0
 8020314:	d129      	bne.n	802036a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8020316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802031a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802031e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8020322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020326:	d10e      	bne.n	8020346 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8020328:	4b12      	ldr	r3, [pc, #72]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802032a:	691b      	ldr	r3, [r3, #16]
 802032c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8020330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020334:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020338:	091a      	lsrs	r2, r3, #4
 802033a:	4b10      	ldr	r3, [pc, #64]	@ (802037c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802033c:	4013      	ands	r3, r2
 802033e:	4a0d      	ldr	r2, [pc, #52]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020340:	430b      	orrs	r3, r1
 8020342:	6113      	str	r3, [r2, #16]
 8020344:	e005      	b.n	8020352 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8020346:	4b0b      	ldr	r3, [pc, #44]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020348:	691b      	ldr	r3, [r3, #16]
 802034a:	4a0a      	ldr	r2, [pc, #40]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802034c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8020350:	6113      	str	r3, [r2, #16]
 8020352:	4b08      	ldr	r3, [pc, #32]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020354:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8020356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802035a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802035e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020362:	4a04      	ldr	r2, [pc, #16]	@ (8020374 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020364:	430b      	orrs	r3, r1
 8020366:	6713      	str	r3, [r2, #112]	@ 0x70
 8020368:	e00e      	b.n	8020388 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802036a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802036e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020372:	e009      	b.n	8020388 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8020374:	58024400 	.word	0x58024400
 8020378:	58024800 	.word	0x58024800
 802037c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8020388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802038c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020390:	f002 0301 	and.w	r3, r2, #1
 8020394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8020398:	2300      	movs	r3, #0
 802039a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802039e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80203a2:	460b      	mov	r3, r1
 80203a4:	4313      	orrs	r3, r2
 80203a6:	f000 8089 	beq.w	80204bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80203aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80203b0:	2b28      	cmp	r3, #40	@ 0x28
 80203b2:	d86b      	bhi.n	802048c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80203b4:	a201      	add	r2, pc, #4	@ (adr r2, 80203bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80203b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203ba:	bf00      	nop
 80203bc:	08020495 	.word	0x08020495
 80203c0:	0802048d 	.word	0x0802048d
 80203c4:	0802048d 	.word	0x0802048d
 80203c8:	0802048d 	.word	0x0802048d
 80203cc:	0802048d 	.word	0x0802048d
 80203d0:	0802048d 	.word	0x0802048d
 80203d4:	0802048d 	.word	0x0802048d
 80203d8:	0802048d 	.word	0x0802048d
 80203dc:	08020461 	.word	0x08020461
 80203e0:	0802048d 	.word	0x0802048d
 80203e4:	0802048d 	.word	0x0802048d
 80203e8:	0802048d 	.word	0x0802048d
 80203ec:	0802048d 	.word	0x0802048d
 80203f0:	0802048d 	.word	0x0802048d
 80203f4:	0802048d 	.word	0x0802048d
 80203f8:	0802048d 	.word	0x0802048d
 80203fc:	08020477 	.word	0x08020477
 8020400:	0802048d 	.word	0x0802048d
 8020404:	0802048d 	.word	0x0802048d
 8020408:	0802048d 	.word	0x0802048d
 802040c:	0802048d 	.word	0x0802048d
 8020410:	0802048d 	.word	0x0802048d
 8020414:	0802048d 	.word	0x0802048d
 8020418:	0802048d 	.word	0x0802048d
 802041c:	08020495 	.word	0x08020495
 8020420:	0802048d 	.word	0x0802048d
 8020424:	0802048d 	.word	0x0802048d
 8020428:	0802048d 	.word	0x0802048d
 802042c:	0802048d 	.word	0x0802048d
 8020430:	0802048d 	.word	0x0802048d
 8020434:	0802048d 	.word	0x0802048d
 8020438:	0802048d 	.word	0x0802048d
 802043c:	08020495 	.word	0x08020495
 8020440:	0802048d 	.word	0x0802048d
 8020444:	0802048d 	.word	0x0802048d
 8020448:	0802048d 	.word	0x0802048d
 802044c:	0802048d 	.word	0x0802048d
 8020450:	0802048d 	.word	0x0802048d
 8020454:	0802048d 	.word	0x0802048d
 8020458:	0802048d 	.word	0x0802048d
 802045c:	08020495 	.word	0x08020495
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020464:	3308      	adds	r3, #8
 8020466:	2101      	movs	r1, #1
 8020468:	4618      	mov	r0, r3
 802046a:	f001 fe95 	bl	8022198 <RCCEx_PLL2_Config>
 802046e:	4603      	mov	r3, r0
 8020470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8020474:	e00f      	b.n	8020496 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802047a:	3328      	adds	r3, #40	@ 0x28
 802047c:	2101      	movs	r1, #1
 802047e:	4618      	mov	r0, r3
 8020480:	f001 ff3c 	bl	80222fc <RCCEx_PLL3_Config>
 8020484:	4603      	mov	r3, r0
 8020486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802048a:	e004      	b.n	8020496 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802048c:	2301      	movs	r3, #1
 802048e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020492:	e000      	b.n	8020496 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8020494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802049a:	2b00      	cmp	r3, #0
 802049c:	d10a      	bne.n	80204b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802049e:	4bbf      	ldr	r3, [pc, #764]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80204a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80204a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80204a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80204ac:	4abb      	ldr	r2, [pc, #748]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80204ae:	430b      	orrs	r3, r1
 80204b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80204b2:	e003      	b.n	80204bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80204b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80204b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80204bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c4:	f002 0302 	and.w	r3, r2, #2
 80204c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80204cc:	2300      	movs	r3, #0
 80204ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80204d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80204d6:	460b      	mov	r3, r1
 80204d8:	4313      	orrs	r3, r2
 80204da:	d041      	beq.n	8020560 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80204dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80204e2:	2b05      	cmp	r3, #5
 80204e4:	d824      	bhi.n	8020530 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80204e6:	a201      	add	r2, pc, #4	@ (adr r2, 80204ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80204e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204ec:	08020539 	.word	0x08020539
 80204f0:	08020505 	.word	0x08020505
 80204f4:	0802051b 	.word	0x0802051b
 80204f8:	08020539 	.word	0x08020539
 80204fc:	08020539 	.word	0x08020539
 8020500:	08020539 	.word	0x08020539
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020508:	3308      	adds	r3, #8
 802050a:	2101      	movs	r1, #1
 802050c:	4618      	mov	r0, r3
 802050e:	f001 fe43 	bl	8022198 <RCCEx_PLL2_Config>
 8020512:	4603      	mov	r3, r0
 8020514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8020518:	e00f      	b.n	802053a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802051a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802051e:	3328      	adds	r3, #40	@ 0x28
 8020520:	2101      	movs	r1, #1
 8020522:	4618      	mov	r0, r3
 8020524:	f001 feea 	bl	80222fc <RCCEx_PLL3_Config>
 8020528:	4603      	mov	r3, r0
 802052a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802052e:	e004      	b.n	802053a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020530:	2301      	movs	r3, #1
 8020532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020536:	e000      	b.n	802053a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8020538:	bf00      	nop
    }

    if (ret == HAL_OK)
 802053a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802053e:	2b00      	cmp	r3, #0
 8020540:	d10a      	bne.n	8020558 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8020542:	4b96      	ldr	r3, [pc, #600]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020546:	f023 0107 	bic.w	r1, r3, #7
 802054a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802054e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020550:	4a92      	ldr	r2, [pc, #584]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020552:	430b      	orrs	r3, r1
 8020554:	6553      	str	r3, [r2, #84]	@ 0x54
 8020556:	e003      	b.n	8020560 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802055c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8020560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020568:	f002 0304 	and.w	r3, r2, #4
 802056c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8020570:	2300      	movs	r3, #0
 8020572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8020576:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 802057a:	460b      	mov	r3, r1
 802057c:	4313      	orrs	r3, r2
 802057e:	d044      	beq.n	802060a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8020580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020588:	2b05      	cmp	r3, #5
 802058a:	d825      	bhi.n	80205d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 802058c:	a201      	add	r2, pc, #4	@ (adr r2, 8020594 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 802058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020592:	bf00      	nop
 8020594:	080205e1 	.word	0x080205e1
 8020598:	080205ad 	.word	0x080205ad
 802059c:	080205c3 	.word	0x080205c3
 80205a0:	080205e1 	.word	0x080205e1
 80205a4:	080205e1 	.word	0x080205e1
 80205a8:	080205e1 	.word	0x080205e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80205ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205b0:	3308      	adds	r3, #8
 80205b2:	2101      	movs	r1, #1
 80205b4:	4618      	mov	r0, r3
 80205b6:	f001 fdef 	bl	8022198 <RCCEx_PLL2_Config>
 80205ba:	4603      	mov	r3, r0
 80205bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80205c0:	e00f      	b.n	80205e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80205c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205c6:	3328      	adds	r3, #40	@ 0x28
 80205c8:	2101      	movs	r1, #1
 80205ca:	4618      	mov	r0, r3
 80205cc:	f001 fe96 	bl	80222fc <RCCEx_PLL3_Config>
 80205d0:	4603      	mov	r3, r0
 80205d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80205d6:	e004      	b.n	80205e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80205d8:	2301      	movs	r3, #1
 80205da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80205de:	e000      	b.n	80205e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80205e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80205e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d10b      	bne.n	8020602 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80205ea:	4b6c      	ldr	r3, [pc, #432]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80205ee:	f023 0107 	bic.w	r1, r3, #7
 80205f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80205fa:	4a68      	ldr	r2, [pc, #416]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205fc:	430b      	orrs	r3, r1
 80205fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8020600:	e003      	b.n	802060a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802060a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020612:	f002 0320 	and.w	r3, r2, #32
 8020616:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802061a:	2300      	movs	r3, #0
 802061c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020620:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8020624:	460b      	mov	r3, r1
 8020626:	4313      	orrs	r3, r2
 8020628:	d055      	beq.n	80206d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802062a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802062e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8020636:	d033      	beq.n	80206a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8020638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802063c:	d82c      	bhi.n	8020698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802063e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020642:	d02f      	beq.n	80206a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8020644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020648:	d826      	bhi.n	8020698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802064a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802064e:	d02b      	beq.n	80206a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8020650:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020654:	d820      	bhi.n	8020698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802065a:	d012      	beq.n	8020682 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802065c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020660:	d81a      	bhi.n	8020698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020662:	2b00      	cmp	r3, #0
 8020664:	d022      	beq.n	80206ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8020666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802066a:	d115      	bne.n	8020698 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802066c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020670:	3308      	adds	r3, #8
 8020672:	2100      	movs	r1, #0
 8020674:	4618      	mov	r0, r3
 8020676:	f001 fd8f 	bl	8022198 <RCCEx_PLL2_Config>
 802067a:	4603      	mov	r3, r0
 802067c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8020680:	e015      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020686:	3328      	adds	r3, #40	@ 0x28
 8020688:	2102      	movs	r1, #2
 802068a:	4618      	mov	r0, r3
 802068c:	f001 fe36 	bl	80222fc <RCCEx_PLL3_Config>
 8020690:	4603      	mov	r3, r0
 8020692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8020696:	e00a      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020698:	2301      	movs	r3, #1
 802069a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802069e:	e006      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80206a0:	bf00      	nop
 80206a2:	e004      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80206a4:	bf00      	nop
 80206a6:	e002      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80206a8:	bf00      	nop
 80206aa:	e000      	b.n	80206ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80206ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80206ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80206b2:	2b00      	cmp	r3, #0
 80206b4:	d10b      	bne.n	80206ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80206b6:	4b39      	ldr	r3, [pc, #228]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80206b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80206ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80206be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80206c6:	4a35      	ldr	r2, [pc, #212]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80206c8:	430b      	orrs	r3, r1
 80206ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80206cc:	e003      	b.n	80206d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80206ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80206d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80206d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80206e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80206e6:	2300      	movs	r3, #0
 80206e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80206ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80206f0:	460b      	mov	r3, r1
 80206f2:	4313      	orrs	r3, r2
 80206f4:	d058      	beq.n	80207a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80206f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80206fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8020702:	d033      	beq.n	802076c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8020704:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8020708:	d82c      	bhi.n	8020764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802070a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802070e:	d02f      	beq.n	8020770 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8020710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020714:	d826      	bhi.n	8020764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 802071a:	d02b      	beq.n	8020774 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 802071c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020720:	d820      	bhi.n	8020764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020726:	d012      	beq.n	802074e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8020728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802072c:	d81a      	bhi.n	8020764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802072e:	2b00      	cmp	r3, #0
 8020730:	d022      	beq.n	8020778 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8020732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020736:	d115      	bne.n	8020764 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802073c:	3308      	adds	r3, #8
 802073e:	2100      	movs	r1, #0
 8020740:	4618      	mov	r0, r3
 8020742:	f001 fd29 	bl	8022198 <RCCEx_PLL2_Config>
 8020746:	4603      	mov	r3, r0
 8020748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802074c:	e015      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802074e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020752:	3328      	adds	r3, #40	@ 0x28
 8020754:	2102      	movs	r1, #2
 8020756:	4618      	mov	r0, r3
 8020758:	f001 fdd0 	bl	80222fc <RCCEx_PLL3_Config>
 802075c:	4603      	mov	r3, r0
 802075e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8020762:	e00a      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020764:	2301      	movs	r3, #1
 8020766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802076a:	e006      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802076c:	bf00      	nop
 802076e:	e004      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020770:	bf00      	nop
 8020772:	e002      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020774:	bf00      	nop
 8020776:	e000      	b.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020778:	bf00      	nop
    }

    if (ret == HAL_OK)
 802077a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802077e:	2b00      	cmp	r3, #0
 8020780:	d10e      	bne.n	80207a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8020782:	4b06      	ldr	r3, [pc, #24]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020786:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 802078a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802078e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8020792:	4a02      	ldr	r2, [pc, #8]	@ (802079c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020794:	430b      	orrs	r3, r1
 8020796:	6593      	str	r3, [r2, #88]	@ 0x58
 8020798:	e006      	b.n	80207a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 802079a:	bf00      	nop
 802079c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80207a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80207a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80207a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80207b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80207b8:	2300      	movs	r3, #0
 80207ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80207be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80207c2:	460b      	mov	r3, r1
 80207c4:	4313      	orrs	r3, r2
 80207c6:	d055      	beq.n	8020874 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80207c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80207d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80207d4:	d033      	beq.n	802083e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80207d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80207da:	d82c      	bhi.n	8020836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80207dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80207e0:	d02f      	beq.n	8020842 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80207e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80207e6:	d826      	bhi.n	8020836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80207e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80207ec:	d02b      	beq.n	8020846 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80207ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80207f2:	d820      	bhi.n	8020836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80207f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80207f8:	d012      	beq.n	8020820 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80207fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80207fe:	d81a      	bhi.n	8020836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020800:	2b00      	cmp	r3, #0
 8020802:	d022      	beq.n	802084a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8020804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020808:	d115      	bne.n	8020836 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802080a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802080e:	3308      	adds	r3, #8
 8020810:	2100      	movs	r1, #0
 8020812:	4618      	mov	r0, r3
 8020814:	f001 fcc0 	bl	8022198 <RCCEx_PLL2_Config>
 8020818:	4603      	mov	r3, r0
 802081a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802081e:	e015      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020824:	3328      	adds	r3, #40	@ 0x28
 8020826:	2102      	movs	r1, #2
 8020828:	4618      	mov	r0, r3
 802082a:	f001 fd67 	bl	80222fc <RCCEx_PLL3_Config>
 802082e:	4603      	mov	r3, r0
 8020830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8020834:	e00a      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020836:	2301      	movs	r3, #1
 8020838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802083c:	e006      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802083e:	bf00      	nop
 8020840:	e004      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020842:	bf00      	nop
 8020844:	e002      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020846:	bf00      	nop
 8020848:	e000      	b.n	802084c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802084a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802084c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020850:	2b00      	cmp	r3, #0
 8020852:	d10b      	bne.n	802086c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8020854:	4ba1      	ldr	r3, [pc, #644]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020858:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 802085c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8020864:	4a9d      	ldr	r2, [pc, #628]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020866:	430b      	orrs	r3, r1
 8020868:	6593      	str	r3, [r2, #88]	@ 0x58
 802086a:	e003      	b.n	8020874 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802086c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8020874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020878:	e9d3 2300 	ldrd	r2, r3, [r3]
 802087c:	f002 0308 	and.w	r3, r2, #8
 8020880:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8020884:	2300      	movs	r3, #0
 8020886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 802088a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 802088e:	460b      	mov	r3, r1
 8020890:	4313      	orrs	r3, r2
 8020892:	d01e      	beq.n	80208d2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8020894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802089c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80208a0:	d10c      	bne.n	80208bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80208a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208a6:	3328      	adds	r3, #40	@ 0x28
 80208a8:	2102      	movs	r1, #2
 80208aa:	4618      	mov	r0, r3
 80208ac:	f001 fd26 	bl	80222fc <RCCEx_PLL3_Config>
 80208b0:	4603      	mov	r3, r0
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d002      	beq.n	80208bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80208b6:	2301      	movs	r3, #1
 80208b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80208bc:	4b87      	ldr	r3, [pc, #540]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80208c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80208c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80208cc:	4a83      	ldr	r2, [pc, #524]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208ce:	430b      	orrs	r3, r1
 80208d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80208d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208da:	f002 0310 	and.w	r3, r2, #16
 80208de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80208e2:	2300      	movs	r3, #0
 80208e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80208e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80208ec:	460b      	mov	r3, r1
 80208ee:	4313      	orrs	r3, r2
 80208f0:	d01e      	beq.n	8020930 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80208f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80208fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80208fe:	d10c      	bne.n	802091a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020904:	3328      	adds	r3, #40	@ 0x28
 8020906:	2102      	movs	r1, #2
 8020908:	4618      	mov	r0, r3
 802090a:	f001 fcf7 	bl	80222fc <RCCEx_PLL3_Config>
 802090e:	4603      	mov	r3, r0
 8020910:	2b00      	cmp	r3, #0
 8020912:	d002      	beq.n	802091a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8020914:	2301      	movs	r3, #1
 8020916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802091a:	4b70      	ldr	r3, [pc, #448]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802091e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020926:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802092a:	4a6c      	ldr	r2, [pc, #432]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802092c:	430b      	orrs	r3, r1
 802092e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8020930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020938:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 802093c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8020940:	2300      	movs	r3, #0
 8020942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8020946:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 802094a:	460b      	mov	r3, r1
 802094c:	4313      	orrs	r3, r2
 802094e:	d03e      	beq.n	80209ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8020950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020954:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8020958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802095c:	d022      	beq.n	80209a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 802095e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020962:	d81b      	bhi.n	802099c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8020964:	2b00      	cmp	r3, #0
 8020966:	d003      	beq.n	8020970 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8020968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802096c:	d00b      	beq.n	8020986 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 802096e:	e015      	b.n	802099c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020974:	3308      	adds	r3, #8
 8020976:	2100      	movs	r1, #0
 8020978:	4618      	mov	r0, r3
 802097a:	f001 fc0d 	bl	8022198 <RCCEx_PLL2_Config>
 802097e:	4603      	mov	r3, r0
 8020980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8020984:	e00f      	b.n	80209a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802098a:	3328      	adds	r3, #40	@ 0x28
 802098c:	2102      	movs	r1, #2
 802098e:	4618      	mov	r0, r3
 8020990:	f001 fcb4 	bl	80222fc <RCCEx_PLL3_Config>
 8020994:	4603      	mov	r3, r0
 8020996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802099a:	e004      	b.n	80209a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802099c:	2301      	movs	r3, #1
 802099e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80209a2:	e000      	b.n	80209a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80209a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80209a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	d10b      	bne.n	80209c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80209ae:	4b4b      	ldr	r3, [pc, #300]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80209b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80209b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80209be:	4a47      	ldr	r2, [pc, #284]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209c0:	430b      	orrs	r3, r1
 80209c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80209c4:	e003      	b.n	80209ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80209c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80209ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80209da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80209dc:	2300      	movs	r3, #0
 80209de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80209e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80209e4:	460b      	mov	r3, r1
 80209e6:	4313      	orrs	r3, r2
 80209e8:	d03b      	beq.n	8020a62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80209ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80209f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80209f6:	d01f      	beq.n	8020a38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80209f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80209fc:	d818      	bhi.n	8020a30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80209fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020a02:	d003      	beq.n	8020a0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8020a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020a08:	d007      	beq.n	8020a1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8020a0a:	e011      	b.n	8020a30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020a0c:	4b33      	ldr	r3, [pc, #204]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a10:	4a32      	ldr	r2, [pc, #200]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8020a18:	e00f      	b.n	8020a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a1e:	3328      	adds	r3, #40	@ 0x28
 8020a20:	2101      	movs	r1, #1
 8020a22:	4618      	mov	r0, r3
 8020a24:	f001 fc6a 	bl	80222fc <RCCEx_PLL3_Config>
 8020a28:	4603      	mov	r3, r0
 8020a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8020a2e:	e004      	b.n	8020a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020a30:	2301      	movs	r3, #1
 8020a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020a36:	e000      	b.n	8020a3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8020a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d10b      	bne.n	8020a5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8020a42:	4b26      	ldr	r3, [pc, #152]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8020a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020a52:	4a22      	ldr	r2, [pc, #136]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a54:	430b      	orrs	r3, r1
 8020a56:	6553      	str	r3, [r2, #84]	@ 0x54
 8020a58:	e003      	b.n	8020a62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8020a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8020a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8020a70:	2300      	movs	r3, #0
 8020a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8020a74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8020a78:	460b      	mov	r3, r1
 8020a7a:	4313      	orrs	r3, r2
 8020a7c:	d034      	beq.n	8020ae8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8020a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d003      	beq.n	8020a90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8020a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020a8c:	d007      	beq.n	8020a9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8020a8e:	e011      	b.n	8020ab4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020a90:	4b12      	ldr	r3, [pc, #72]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a94:	4a11      	ldr	r2, [pc, #68]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8020a9c:	e00e      	b.n	8020abc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020aa2:	3308      	adds	r3, #8
 8020aa4:	2102      	movs	r1, #2
 8020aa6:	4618      	mov	r0, r3
 8020aa8:	f001 fb76 	bl	8022198 <RCCEx_PLL2_Config>
 8020aac:	4603      	mov	r3, r0
 8020aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8020ab2:	e003      	b.n	8020abc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8020ab4:	2301      	movs	r3, #1
 8020ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d10d      	bne.n	8020ae0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8020ac4:	4b05      	ldr	r3, [pc, #20]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020ac8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020ad2:	4a02      	ldr	r2, [pc, #8]	@ (8020adc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020ad4:	430b      	orrs	r3, r1
 8020ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020ad8:	e006      	b.n	8020ae8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8020ada:	bf00      	nop
 8020adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8020ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8020af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020af6:	2300      	movs	r3, #0
 8020af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020afa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8020afe:	460b      	mov	r3, r1
 8020b00:	4313      	orrs	r3, r2
 8020b02:	d00c      	beq.n	8020b1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b08:	3328      	adds	r3, #40	@ 0x28
 8020b0a:	2102      	movs	r1, #2
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	f001 fbf5 	bl	80222fc <RCCEx_PLL3_Config>
 8020b12:	4603      	mov	r3, r0
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d002      	beq.n	8020b1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8020b18:	2301      	movs	r3, #1
 8020b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8020b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8020b2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020b30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8020b34:	460b      	mov	r3, r1
 8020b36:	4313      	orrs	r3, r2
 8020b38:	d038      	beq.n	8020bac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8020b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020b46:	d018      	beq.n	8020b7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8020b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020b4c:	d811      	bhi.n	8020b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020b52:	d014      	beq.n	8020b7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8020b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020b58:	d80b      	bhi.n	8020b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	d011      	beq.n	8020b82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8020b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020b62:	d106      	bne.n	8020b72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020b64:	4bc3      	ldr	r3, [pc, #780]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b68:	4ac2      	ldr	r2, [pc, #776]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8020b70:	e008      	b.n	8020b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020b72:	2301      	movs	r3, #1
 8020b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020b78:	e004      	b.n	8020b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020b7a:	bf00      	nop
 8020b7c:	e002      	b.n	8020b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020b7e:	bf00      	nop
 8020b80:	e000      	b.n	8020b84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d10b      	bne.n	8020ba4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8020b8c:	4bb9      	ldr	r3, [pc, #740]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020b9c:	4ab5      	ldr	r2, [pc, #724]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b9e:	430b      	orrs	r3, r1
 8020ba0:	6553      	str	r3, [r2, #84]	@ 0x54
 8020ba2:	e003      	b.n	8020bac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8020bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8020bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020bba:	2300      	movs	r3, #0
 8020bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020bbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8020bc2:	460b      	mov	r3, r1
 8020bc4:	4313      	orrs	r3, r2
 8020bc6:	d009      	beq.n	8020bdc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8020bc8:	4baa      	ldr	r3, [pc, #680]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020bcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020bd6:	4aa7      	ldr	r2, [pc, #668]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bd8:	430b      	orrs	r3, r1
 8020bda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8020bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8020be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8020bea:	2300      	movs	r3, #0
 8020bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8020bee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8020bf2:	460b      	mov	r3, r1
 8020bf4:	4313      	orrs	r3, r2
 8020bf6:	d00a      	beq.n	8020c0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8020bf8:	4b9e      	ldr	r3, [pc, #632]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bfa:	691b      	ldr	r3, [r3, #16]
 8020bfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8020c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8020c08:	4a9a      	ldr	r2, [pc, #616]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c0a:	430b      	orrs	r3, r1
 8020c0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8020c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8020c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020c1c:	2300      	movs	r3, #0
 8020c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020c20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8020c24:	460b      	mov	r3, r1
 8020c26:	4313      	orrs	r3, r2
 8020c28:	d009      	beq.n	8020c3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8020c2a:	4b92      	ldr	r3, [pc, #584]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8020c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020c38:	4a8e      	ldr	r2, [pc, #568]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c3a:	430b      	orrs	r3, r1
 8020c3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8020c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8020c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8020c50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8020c54:	460b      	mov	r3, r1
 8020c56:	4313      	orrs	r3, r2
 8020c58:	d00e      	beq.n	8020c78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8020c5a:	4b86      	ldr	r3, [pc, #536]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c5c:	691b      	ldr	r3, [r3, #16]
 8020c5e:	4a85      	ldr	r2, [pc, #532]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8020c64:	6113      	str	r3, [r2, #16]
 8020c66:	4b83      	ldr	r3, [pc, #524]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c68:	6919      	ldr	r1, [r3, #16]
 8020c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020c72:	4a80      	ldr	r2, [pc, #512]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c74:	430b      	orrs	r3, r1
 8020c76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8020c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8020c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020c86:	2300      	movs	r3, #0
 8020c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020c8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8020c8e:	460b      	mov	r3, r1
 8020c90:	4313      	orrs	r3, r2
 8020c92:	d009      	beq.n	8020ca8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8020c94:	4b77      	ldr	r3, [pc, #476]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020c98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8020c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020ca2:	4a74      	ldr	r2, [pc, #464]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ca4:	430b      	orrs	r3, r1
 8020ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8020ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8020cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8020cba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8020cbe:	460b      	mov	r3, r1
 8020cc0:	4313      	orrs	r3, r2
 8020cc2:	d00a      	beq.n	8020cda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8020cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020cc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8020ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020cd4:	4a67      	ldr	r2, [pc, #412]	@ (8020e74 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cd6:	430b      	orrs	r3, r1
 8020cd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8020cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce2:	2100      	movs	r1, #0
 8020ce4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8020ce6:	f003 0301 	and.w	r3, r3, #1
 8020cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020cec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	4313      	orrs	r3, r2
 8020cf4:	d011      	beq.n	8020d1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cfa:	3308      	adds	r3, #8
 8020cfc:	2100      	movs	r1, #0
 8020cfe:	4618      	mov	r0, r3
 8020d00:	f001 fa4a 	bl	8022198 <RCCEx_PLL2_Config>
 8020d04:	4603      	mov	r3, r0
 8020d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d003      	beq.n	8020d1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8020d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d22:	2100      	movs	r1, #0
 8020d24:	6239      	str	r1, [r7, #32]
 8020d26:	f003 0302 	and.w	r3, r3, #2
 8020d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8020d2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8020d30:	460b      	mov	r3, r1
 8020d32:	4313      	orrs	r3, r2
 8020d34:	d011      	beq.n	8020d5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d3a:	3308      	adds	r3, #8
 8020d3c:	2101      	movs	r1, #1
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f001 fa2a 	bl	8022198 <RCCEx_PLL2_Config>
 8020d44:	4603      	mov	r3, r0
 8020d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d003      	beq.n	8020d5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8020d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d62:	2100      	movs	r1, #0
 8020d64:	61b9      	str	r1, [r7, #24]
 8020d66:	f003 0304 	and.w	r3, r3, #4
 8020d6a:	61fb      	str	r3, [r7, #28]
 8020d6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8020d70:	460b      	mov	r3, r1
 8020d72:	4313      	orrs	r3, r2
 8020d74:	d011      	beq.n	8020d9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d7a:	3308      	adds	r3, #8
 8020d7c:	2102      	movs	r1, #2
 8020d7e:	4618      	mov	r0, r3
 8020d80:	f001 fa0a 	bl	8022198 <RCCEx_PLL2_Config>
 8020d84:	4603      	mov	r3, r0
 8020d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d003      	beq.n	8020d9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8020d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020da2:	2100      	movs	r1, #0
 8020da4:	6139      	str	r1, [r7, #16]
 8020da6:	f003 0308 	and.w	r3, r3, #8
 8020daa:	617b      	str	r3, [r7, #20]
 8020dac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8020db0:	460b      	mov	r3, r1
 8020db2:	4313      	orrs	r3, r2
 8020db4:	d011      	beq.n	8020dda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8020db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020dba:	3328      	adds	r3, #40	@ 0x28
 8020dbc:	2100      	movs	r1, #0
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	f001 fa9c 	bl	80222fc <RCCEx_PLL3_Config>
 8020dc4:	4603      	mov	r3, r0
 8020dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8020dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d003      	beq.n	8020dda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8020dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020de2:	2100      	movs	r1, #0
 8020de4:	60b9      	str	r1, [r7, #8]
 8020de6:	f003 0310 	and.w	r3, r3, #16
 8020dea:	60fb      	str	r3, [r7, #12]
 8020dec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020df0:	460b      	mov	r3, r1
 8020df2:	4313      	orrs	r3, r2
 8020df4:	d011      	beq.n	8020e1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020dfa:	3328      	adds	r3, #40	@ 0x28
 8020dfc:	2101      	movs	r1, #1
 8020dfe:	4618      	mov	r0, r3
 8020e00:	f001 fa7c 	bl	80222fc <RCCEx_PLL3_Config>
 8020e04:	4603      	mov	r3, r0
 8020e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d003      	beq.n	8020e1a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8020e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e22:	2100      	movs	r1, #0
 8020e24:	6039      	str	r1, [r7, #0]
 8020e26:	f003 0320 	and.w	r3, r3, #32
 8020e2a:	607b      	str	r3, [r7, #4]
 8020e2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020e30:	460b      	mov	r3, r1
 8020e32:	4313      	orrs	r3, r2
 8020e34:	d011      	beq.n	8020e5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e3a:	3328      	adds	r3, #40	@ 0x28
 8020e3c:	2102      	movs	r1, #2
 8020e3e:	4618      	mov	r0, r3
 8020e40:	f001 fa5c 	bl	80222fc <RCCEx_PLL3_Config>
 8020e44:	4603      	mov	r3, r0
 8020e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d003      	beq.n	8020e5a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8020e5a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d101      	bne.n	8020e66 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8020e62:	2300      	movs	r3, #0
 8020e64:	e000      	b.n	8020e68 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8020e66:	2301      	movs	r3, #1
}
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8020e6e:	46bd      	mov	sp, r7
 8020e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020e74:	58024400 	.word	0x58024400

08020e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8020e78:	b580      	push	{r7, lr}
 8020e7a:	b090      	sub	sp, #64	@ 0x40
 8020e7c:	af00      	add	r7, sp, #0
 8020e7e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8020e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020e86:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8020e8a:	430b      	orrs	r3, r1
 8020e8c:	f040 8094 	bne.w	8020fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8020e90:	4b9e      	ldr	r3, [pc, #632]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020e94:	f003 0307 	and.w	r3, r3, #7
 8020e98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020e9c:	2b04      	cmp	r3, #4
 8020e9e:	f200 8087 	bhi.w	8020fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8020ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8020ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8020ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ea8:	08020ebd 	.word	0x08020ebd
 8020eac:	08020ee5 	.word	0x08020ee5
 8020eb0:	08020f0d 	.word	0x08020f0d
 8020eb4:	08020fa9 	.word	0x08020fa9
 8020eb8:	08020f35 	.word	0x08020f35
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020ebc:	4b93      	ldr	r3, [pc, #588]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020ec8:	d108      	bne.n	8020edc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020ece:	4618      	mov	r0, r3
 8020ed0:	f001 f810 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020ed8:	f000 bd45 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020edc:	2300      	movs	r3, #0
 8020ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ee0:	f000 bd41 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020ee4:	4b89      	ldr	r3, [pc, #548]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020ef0:	d108      	bne.n	8020f04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020ef2:	f107 0318 	add.w	r3, r7, #24
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	f000 fd54 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020efc:	69bb      	ldr	r3, [r7, #24]
 8020efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f00:	f000 bd31 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f04:	2300      	movs	r3, #0
 8020f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f08:	f000 bd2d 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020f0c:	4b7f      	ldr	r3, [pc, #508]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020f18:	d108      	bne.n	8020f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f1a:	f107 030c 	add.w	r3, r7, #12
 8020f1e:	4618      	mov	r0, r3
 8020f20:	f000 fe94 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f28:	f000 bd1d 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f30:	f000 bd19 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020f34:	4b75      	ldr	r3, [pc, #468]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020f3c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020f3e:	4b73      	ldr	r3, [pc, #460]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	f003 0304 	and.w	r3, r3, #4
 8020f46:	2b04      	cmp	r3, #4
 8020f48:	d10c      	bne.n	8020f64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8020f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d109      	bne.n	8020f64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020f50:	4b6e      	ldr	r3, [pc, #440]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f52:	681b      	ldr	r3, [r3, #0]
 8020f54:	08db      	lsrs	r3, r3, #3
 8020f56:	f003 0303 	and.w	r3, r3, #3
 8020f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8021110 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8020f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020f62:	e01f      	b.n	8020fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020f64:	4b69      	ldr	r3, [pc, #420]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020f70:	d106      	bne.n	8020f80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8020f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020f78:	d102      	bne.n	8020f80 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020f7a:	4b66      	ldr	r3, [pc, #408]	@ (8021114 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020f7e:	e011      	b.n	8020fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020f80:	4b62      	ldr	r3, [pc, #392]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020f8c:	d106      	bne.n	8020f9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8020f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020f94:	d102      	bne.n	8020f9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8020f96:	4b60      	ldr	r3, [pc, #384]	@ (8021118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8020f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020f9a:	e003      	b.n	8020fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8020f9c:	2300      	movs	r3, #0
 8020f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8020fa0:	f000 bce1 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8020fa4:	f000 bcdf 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8020fa8:	4b5c      	ldr	r3, [pc, #368]	@ (802111c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8020faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fac:	f000 bcdb 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fb4:	f000 bcd7 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8020fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020fbc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8020fc0:	430b      	orrs	r3, r1
 8020fc2:	f040 80ad 	bne.w	8021120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8020fc6:	4b51      	ldr	r3, [pc, #324]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020fca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8020fce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020fd6:	d056      	beq.n	8021086 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8020fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020fde:	f200 8090 	bhi.w	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020fe4:	2bc0      	cmp	r3, #192	@ 0xc0
 8020fe6:	f000 8088 	beq.w	80210fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8020fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020fec:	2bc0      	cmp	r3, #192	@ 0xc0
 8020fee:	f200 8088 	bhi.w	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ff4:	2b80      	cmp	r3, #128	@ 0x80
 8020ff6:	d032      	beq.n	802105e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8020ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ffa:	2b80      	cmp	r3, #128	@ 0x80
 8020ffc:	f200 8081 	bhi.w	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8021000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021002:	2b00      	cmp	r3, #0
 8021004:	d003      	beq.n	802100e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8021006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021008:	2b40      	cmp	r3, #64	@ 0x40
 802100a:	d014      	beq.n	8021036 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 802100c:	e079      	b.n	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802100e:	4b3f      	ldr	r3, [pc, #252]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802101a:	d108      	bne.n	802102e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802101c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021020:	4618      	mov	r0, r3
 8021022:	f000 ff67 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802102a:	f000 bc9c 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802102e:	2300      	movs	r3, #0
 8021030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021032:	f000 bc98 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021036:	4b35      	ldr	r3, [pc, #212]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021038:	681b      	ldr	r3, [r3, #0]
 802103a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802103e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021042:	d108      	bne.n	8021056 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021044:	f107 0318 	add.w	r3, r7, #24
 8021048:	4618      	mov	r0, r3
 802104a:	f000 fcab 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 802104e:	69bb      	ldr	r3, [r7, #24]
 8021050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021052:	f000 bc88 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021056:	2300      	movs	r3, #0
 8021058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802105a:	f000 bc84 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802105e:	4b2b      	ldr	r3, [pc, #172]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802106a:	d108      	bne.n	802107e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802106c:	f107 030c 	add.w	r3, r7, #12
 8021070:	4618      	mov	r0, r3
 8021072:	f000 fdeb 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021076:	68fb      	ldr	r3, [r7, #12]
 8021078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802107a:	f000 bc74 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802107e:	2300      	movs	r3, #0
 8021080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021082:	f000 bc70 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021086:	4b21      	ldr	r3, [pc, #132]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802108a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802108e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021090:	4b1e      	ldr	r3, [pc, #120]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021092:	681b      	ldr	r3, [r3, #0]
 8021094:	f003 0304 	and.w	r3, r3, #4
 8021098:	2b04      	cmp	r3, #4
 802109a:	d10c      	bne.n	80210b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 802109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d109      	bne.n	80210b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80210a2:	4b1a      	ldr	r3, [pc, #104]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	08db      	lsrs	r3, r3, #3
 80210a8:	f003 0303 	and.w	r3, r3, #3
 80210ac:	4a18      	ldr	r2, [pc, #96]	@ (8021110 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80210ae:	fa22 f303 	lsr.w	r3, r2, r3
 80210b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80210b4:	e01f      	b.n	80210f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80210b6:	4b15      	ldr	r3, [pc, #84]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80210be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80210c2:	d106      	bne.n	80210d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80210c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80210c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80210ca:	d102      	bne.n	80210d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80210cc:	4b11      	ldr	r3, [pc, #68]	@ (8021114 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80210ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80210d0:	e011      	b.n	80210f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80210d2:	4b0e      	ldr	r3, [pc, #56]	@ (802110c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80210da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80210de:	d106      	bne.n	80210ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80210e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80210e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80210e6:	d102      	bne.n	80210ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80210e8:	4b0b      	ldr	r3, [pc, #44]	@ (8021118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80210ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80210ec:	e003      	b.n	80210f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80210ee:	2300      	movs	r3, #0
 80210f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80210f2:	f000 bc38 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80210f6:	f000 bc36 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80210fa:	4b08      	ldr	r3, [pc, #32]	@ (802111c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80210fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210fe:	f000 bc32 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021102:	2300      	movs	r3, #0
 8021104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021106:	f000 bc2e 	b.w	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802110a:	bf00      	nop
 802110c:	58024400 	.word	0x58024400
 8021110:	03d09000 	.word	0x03d09000
 8021114:	003d0900 	.word	0x003d0900
 8021118:	017d7840 	.word	0x017d7840
 802111c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8021120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021124:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8021128:	430b      	orrs	r3, r1
 802112a:	f040 809c 	bne.w	8021266 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 802112e:	4b9e      	ldr	r3, [pc, #632]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021132:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8021136:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8021138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802113a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802113e:	d054      	beq.n	80211ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8021140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8021146:	f200 808b 	bhi.w	8021260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802114a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802114c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8021150:	f000 8083 	beq.w	802125a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8021154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021156:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 802115a:	f200 8081 	bhi.w	8021260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802115e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021164:	d02f      	beq.n	80211c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8021166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802116c:	d878      	bhi.n	8021260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802116e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021170:	2b00      	cmp	r3, #0
 8021172:	d004      	beq.n	802117e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8021174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802117a:	d012      	beq.n	80211a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 802117c:	e070      	b.n	8021260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802117e:	4b8a      	ldr	r3, [pc, #552]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802118a:	d107      	bne.n	802119c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021190:	4618      	mov	r0, r3
 8021192:	f000 feaf 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802119a:	e3e4      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802119c:	2300      	movs	r3, #0
 802119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211a0:	e3e1      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80211a2:	4b81      	ldr	r3, [pc, #516]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80211aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80211ae:	d107      	bne.n	80211c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80211b0:	f107 0318 	add.w	r3, r7, #24
 80211b4:	4618      	mov	r0, r3
 80211b6:	f000 fbf5 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80211ba:	69bb      	ldr	r3, [r7, #24]
 80211bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80211be:	e3d2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80211c0:	2300      	movs	r3, #0
 80211c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211c4:	e3cf      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80211c6:	4b78      	ldr	r3, [pc, #480]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80211ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80211d2:	d107      	bne.n	80211e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80211d4:	f107 030c 	add.w	r3, r7, #12
 80211d8:	4618      	mov	r0, r3
 80211da:	f000 fd37 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80211de:	68fb      	ldr	r3, [r7, #12]
 80211e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80211e2:	e3c0      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80211e4:	2300      	movs	r3, #0
 80211e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211e8:	e3bd      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80211ea:	4b6f      	ldr	r3, [pc, #444]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80211ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80211f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80211f4:	4b6c      	ldr	r3, [pc, #432]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211f6:	681b      	ldr	r3, [r3, #0]
 80211f8:	f003 0304 	and.w	r3, r3, #4
 80211fc:	2b04      	cmp	r3, #4
 80211fe:	d10c      	bne.n	802121a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8021200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021202:	2b00      	cmp	r3, #0
 8021204:	d109      	bne.n	802121a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021206:	4b68      	ldr	r3, [pc, #416]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	08db      	lsrs	r3, r3, #3
 802120c:	f003 0303 	and.w	r3, r3, #3
 8021210:	4a66      	ldr	r2, [pc, #408]	@ (80213ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8021212:	fa22 f303 	lsr.w	r3, r2, r3
 8021216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021218:	e01e      	b.n	8021258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802121a:	4b63      	ldr	r3, [pc, #396]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021226:	d106      	bne.n	8021236 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8021228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802122a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802122e:	d102      	bne.n	8021236 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021230:	4b5f      	ldr	r3, [pc, #380]	@ (80213b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8021232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021234:	e010      	b.n	8021258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021236:	4b5c      	ldr	r3, [pc, #368]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802123e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021242:	d106      	bne.n	8021252 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8021244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802124a:	d102      	bne.n	8021252 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802124c:	4b59      	ldr	r3, [pc, #356]	@ (80213b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 802124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021250:	e002      	b.n	8021258 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021252:	2300      	movs	r3, #0
 8021254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021256:	e386      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021258:	e385      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802125a:	4b57      	ldr	r3, [pc, #348]	@ (80213b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 802125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802125e:	e382      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021260:	2300      	movs	r3, #0
 8021262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021264:	e37f      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8021266:	e9d7 2300 	ldrd	r2, r3, [r7]
 802126a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 802126e:	430b      	orrs	r3, r1
 8021270:	f040 80a7 	bne.w	80213c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8021274:	4b4c      	ldr	r3, [pc, #304]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021278:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 802127c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 802127e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8021284:	d055      	beq.n	8021332 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8021286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802128c:	f200 8096 	bhi.w	80213bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8021290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8021296:	f000 8084 	beq.w	80213a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 802129a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802129c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80212a0:	f200 808c 	bhi.w	80213bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80212a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80212a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80212aa:	d030      	beq.n	802130e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80212ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80212ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80212b2:	f200 8083 	bhi.w	80213bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80212b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d004      	beq.n	80212c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80212bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80212be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80212c2:	d012      	beq.n	80212ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80212c4:	e07a      	b.n	80213bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80212c6:	4b38      	ldr	r3, [pc, #224]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80212ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80212d2:	d107      	bne.n	80212e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80212d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80212d8:	4618      	mov	r0, r3
 80212da:	f000 fe0b 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80212de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80212e2:	e340      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80212e4:	2300      	movs	r3, #0
 80212e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212e8:	e33d      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80212ea:	4b2f      	ldr	r3, [pc, #188]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80212ec:	681b      	ldr	r3, [r3, #0]
 80212ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80212f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80212f6:	d107      	bne.n	8021308 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80212f8:	f107 0318 	add.w	r3, r7, #24
 80212fc:	4618      	mov	r0, r3
 80212fe:	f000 fb51 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8021302:	69bb      	ldr	r3, [r7, #24]
 8021304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021306:	e32e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021308:	2300      	movs	r3, #0
 802130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802130c:	e32b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802130e:	4b26      	ldr	r3, [pc, #152]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802131a:	d107      	bne.n	802132c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802131c:	f107 030c 	add.w	r3, r7, #12
 8021320:	4618      	mov	r0, r3
 8021322:	f000 fc93 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802132a:	e31c      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802132c:	2300      	movs	r3, #0
 802132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021330:	e319      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021332:	4b1d      	ldr	r3, [pc, #116]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021336:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802133a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802133c:	4b1a      	ldr	r3, [pc, #104]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	f003 0304 	and.w	r3, r3, #4
 8021344:	2b04      	cmp	r3, #4
 8021346:	d10c      	bne.n	8021362 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8021348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802134a:	2b00      	cmp	r3, #0
 802134c:	d109      	bne.n	8021362 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802134e:	4b16      	ldr	r3, [pc, #88]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	08db      	lsrs	r3, r3, #3
 8021354:	f003 0303 	and.w	r3, r3, #3
 8021358:	4a14      	ldr	r2, [pc, #80]	@ (80213ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 802135a:	fa22 f303 	lsr.w	r3, r2, r3
 802135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021360:	e01e      	b.n	80213a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021362:	4b11      	ldr	r3, [pc, #68]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802136a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802136e:	d106      	bne.n	802137e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8021370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021376:	d102      	bne.n	802137e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021378:	4b0d      	ldr	r3, [pc, #52]	@ (80213b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 802137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802137c:	e010      	b.n	80213a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802137e:	4b0a      	ldr	r3, [pc, #40]	@ (80213a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802138a:	d106      	bne.n	802139a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 802138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802138e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021392:	d102      	bne.n	802139a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021394:	4b07      	ldr	r3, [pc, #28]	@ (80213b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8021396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021398:	e002      	b.n	80213a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802139a:	2300      	movs	r3, #0
 802139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 802139e:	e2e2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80213a0:	e2e1      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80213a2:	4b05      	ldr	r3, [pc, #20]	@ (80213b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80213a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213a6:	e2de      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80213a8:	58024400 	.word	0x58024400
 80213ac:	03d09000 	.word	0x03d09000
 80213b0:	003d0900 	.word	0x003d0900
 80213b4:	017d7840 	.word	0x017d7840
 80213b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80213bc:	2300      	movs	r3, #0
 80213be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213c0:	e2d1      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80213c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80213c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80213ca:	430b      	orrs	r3, r1
 80213cc:	f040 809c 	bne.w	8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80213d0:	4b93      	ldr	r3, [pc, #588]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80213d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80213d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80213da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80213e0:	d054      	beq.n	802148c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80213e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80213e8:	f200 808b 	bhi.w	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80213ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80213f2:	f000 8083 	beq.w	80214fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80213f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80213f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80213fc:	f200 8081 	bhi.w	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021406:	d02f      	beq.n	8021468 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8021408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802140a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802140e:	d878      	bhi.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021412:	2b00      	cmp	r3, #0
 8021414:	d004      	beq.n	8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8021416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802141c:	d012      	beq.n	8021444 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 802141e:	e070      	b.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021420:	4b7f      	ldr	r3, [pc, #508]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802142c:	d107      	bne.n	802143e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021432:	4618      	mov	r0, r3
 8021434:	f000 fd5e 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802143a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802143c:	e293      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802143e:	2300      	movs	r3, #0
 8021440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021442:	e290      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021444:	4b76      	ldr	r3, [pc, #472]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802144c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021450:	d107      	bne.n	8021462 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021452:	f107 0318 	add.w	r3, r7, #24
 8021456:	4618      	mov	r0, r3
 8021458:	f000 faa4 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 802145c:	69bb      	ldr	r3, [r7, #24]
 802145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021460:	e281      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021462:	2300      	movs	r3, #0
 8021464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021466:	e27e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021468:	4b6d      	ldr	r3, [pc, #436]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802146a:	681b      	ldr	r3, [r3, #0]
 802146c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021474:	d107      	bne.n	8021486 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021476:	f107 030c 	add.w	r3, r7, #12
 802147a:	4618      	mov	r0, r3
 802147c:	f000 fbe6 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021480:	68fb      	ldr	r3, [r7, #12]
 8021482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021484:	e26f      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021486:	2300      	movs	r3, #0
 8021488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802148a:	e26c      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802148c:	4b64      	ldr	r3, [pc, #400]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021494:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021496:	4b62      	ldr	r3, [pc, #392]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	f003 0304 	and.w	r3, r3, #4
 802149e:	2b04      	cmp	r3, #4
 80214a0:	d10c      	bne.n	80214bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80214a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d109      	bne.n	80214bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80214a8:	4b5d      	ldr	r3, [pc, #372]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	08db      	lsrs	r3, r3, #3
 80214ae:	f003 0303 	and.w	r3, r3, #3
 80214b2:	4a5c      	ldr	r2, [pc, #368]	@ (8021624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80214b4:	fa22 f303 	lsr.w	r3, r2, r3
 80214b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80214ba:	e01e      	b.n	80214fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80214bc:	4b58      	ldr	r3, [pc, #352]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214be:	681b      	ldr	r3, [r3, #0]
 80214c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80214c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80214c8:	d106      	bne.n	80214d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80214ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80214cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80214d0:	d102      	bne.n	80214d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80214d2:	4b55      	ldr	r3, [pc, #340]	@ (8021628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80214d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80214d6:	e010      	b.n	80214fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80214d8:	4b51      	ldr	r3, [pc, #324]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80214e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80214e4:	d106      	bne.n	80214f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80214e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80214e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80214ec:	d102      	bne.n	80214f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80214ee:	4b4f      	ldr	r3, [pc, #316]	@ (802162c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80214f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80214f2:	e002      	b.n	80214fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80214f4:	2300      	movs	r3, #0
 80214f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80214f8:	e235      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80214fa:	e234      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80214fc:	4b4c      	ldr	r3, [pc, #304]	@ (8021630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80214fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021500:	e231      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021502:	2300      	movs	r3, #0
 8021504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021506:	e22e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8021508:	e9d7 2300 	ldrd	r2, r3, [r7]
 802150c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8021510:	430b      	orrs	r3, r1
 8021512:	f040 808f 	bne.w	8021634 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8021516:	4b42      	ldr	r3, [pc, #264]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802151a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 802151e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8021520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021522:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021526:	d06b      	beq.n	8021600 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8021528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802152a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802152e:	d874      	bhi.n	802161a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8021536:	d056      	beq.n	80215e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8021538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802153a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802153e:	d86c      	bhi.n	802161a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021542:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8021546:	d03b      	beq.n	80215c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8021548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802154a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802154e:	d864      	bhi.n	802161a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021556:	d021      	beq.n	802159c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8021558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802155a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802155e:	d85c      	bhi.n	802161a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021562:	2b00      	cmp	r3, #0
 8021564:	d004      	beq.n	8021570 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8021566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802156c:	d004      	beq.n	8021578 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 802156e:	e054      	b.n	802161a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8021570:	f7fe fa4c 	bl	801fa0c <HAL_RCC_GetPCLK1Freq>
 8021574:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021576:	e1f6      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021578:	4b29      	ldr	r3, [pc, #164]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802157a:	681b      	ldr	r3, [r3, #0]
 802157c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021584:	d107      	bne.n	8021596 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021586:	f107 0318 	add.w	r3, r7, #24
 802158a:	4618      	mov	r0, r3
 802158c:	f000 fa0a 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021590:	69fb      	ldr	r3, [r7, #28]
 8021592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021594:	e1e7      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021596:	2300      	movs	r3, #0
 8021598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802159a:	e1e4      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802159c:	4b20      	ldr	r3, [pc, #128]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80215a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80215a8:	d107      	bne.n	80215ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80215aa:	f107 030c 	add.w	r3, r7, #12
 80215ae:	4618      	mov	r0, r3
 80215b0:	f000 fb4c 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80215b4:	693b      	ldr	r3, [r7, #16]
 80215b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80215b8:	e1d5      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80215ba:	2300      	movs	r3, #0
 80215bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215be:	e1d2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80215c0:	4b17      	ldr	r3, [pc, #92]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80215c2:	681b      	ldr	r3, [r3, #0]
 80215c4:	f003 0304 	and.w	r3, r3, #4
 80215c8:	2b04      	cmp	r3, #4
 80215ca:	d109      	bne.n	80215e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80215cc:	4b14      	ldr	r3, [pc, #80]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	08db      	lsrs	r3, r3, #3
 80215d2:	f003 0303 	and.w	r3, r3, #3
 80215d6:	4a13      	ldr	r2, [pc, #76]	@ (8021624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80215d8:	fa22 f303 	lsr.w	r3, r2, r3
 80215dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80215de:	e1c2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80215e0:	2300      	movs	r3, #0
 80215e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215e4:	e1bf      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80215e6:	4b0e      	ldr	r3, [pc, #56]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80215ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80215f2:	d102      	bne.n	80215fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80215f4:	4b0c      	ldr	r3, [pc, #48]	@ (8021628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80215f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80215f8:	e1b5      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80215fa:	2300      	movs	r3, #0
 80215fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215fe:	e1b2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021600:	4b07      	ldr	r3, [pc, #28]	@ (8021620 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021602:	681b      	ldr	r3, [r3, #0]
 8021604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802160c:	d102      	bne.n	8021614 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 802160e:	4b07      	ldr	r3, [pc, #28]	@ (802162c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8021610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021612:	e1a8      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021614:	2300      	movs	r3, #0
 8021616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021618:	e1a5      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802161a:	2300      	movs	r3, #0
 802161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802161e:	e1a2      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021620:	58024400 	.word	0x58024400
 8021624:	03d09000 	.word	0x03d09000
 8021628:	003d0900 	.word	0x003d0900
 802162c:	017d7840 	.word	0x017d7840
 8021630:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8021634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021638:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 802163c:	430b      	orrs	r3, r1
 802163e:	d173      	bne.n	8021728 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8021640:	4b9c      	ldr	r3, [pc, #624]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8021648:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802164a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802164c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021650:	d02f      	beq.n	80216b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8021652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021658:	d863      	bhi.n	8021722 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 802165a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802165c:	2b00      	cmp	r3, #0
 802165e:	d004      	beq.n	802166a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8021660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021666:	d012      	beq.n	802168e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8021668:	e05b      	b.n	8021722 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802166a:	4b92      	ldr	r3, [pc, #584]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021676:	d107      	bne.n	8021688 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021678:	f107 0318 	add.w	r3, r7, #24
 802167c:	4618      	mov	r0, r3
 802167e:	f000 f991 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8021682:	69bb      	ldr	r3, [r7, #24]
 8021684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021686:	e16e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021688:	2300      	movs	r3, #0
 802168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802168c:	e16b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802168e:	4b89      	ldr	r3, [pc, #548]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802169a:	d107      	bne.n	80216ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802169c:	f107 030c 	add.w	r3, r7, #12
 80216a0:	4618      	mov	r0, r3
 80216a2:	f000 fad3 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80216a6:	697b      	ldr	r3, [r7, #20]
 80216a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80216aa:	e15c      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80216ac:	2300      	movs	r3, #0
 80216ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80216b0:	e159      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80216b2:	4b80      	ldr	r3, [pc, #512]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80216b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80216ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80216bc:	4b7d      	ldr	r3, [pc, #500]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	f003 0304 	and.w	r3, r3, #4
 80216c4:	2b04      	cmp	r3, #4
 80216c6:	d10c      	bne.n	80216e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80216c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d109      	bne.n	80216e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80216ce:	4b79      	ldr	r3, [pc, #484]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	08db      	lsrs	r3, r3, #3
 80216d4:	f003 0303 	and.w	r3, r3, #3
 80216d8:	4a77      	ldr	r2, [pc, #476]	@ (80218b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80216da:	fa22 f303 	lsr.w	r3, r2, r3
 80216de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80216e0:	e01e      	b.n	8021720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80216e2:	4b74      	ldr	r3, [pc, #464]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80216ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80216ee:	d106      	bne.n	80216fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80216f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80216f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80216f6:	d102      	bne.n	80216fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80216f8:	4b70      	ldr	r3, [pc, #448]	@ (80218bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80216fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80216fc:	e010      	b.n	8021720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80216fe:	4b6d      	ldr	r3, [pc, #436]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802170a:	d106      	bne.n	802171a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 802170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802170e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021712:	d102      	bne.n	802171a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021714:	4b6a      	ldr	r3, [pc, #424]	@ (80218c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8021716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021718:	e002      	b.n	8021720 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802171a:	2300      	movs	r3, #0
 802171c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 802171e:	e122      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021720:	e121      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021722:	2300      	movs	r3, #0
 8021724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021726:	e11e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8021728:	e9d7 2300 	ldrd	r2, r3, [r7]
 802172c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8021730:	430b      	orrs	r3, r1
 8021732:	d133      	bne.n	802179c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8021734:	4b5f      	ldr	r3, [pc, #380]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802173c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802173e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021740:	2b00      	cmp	r3, #0
 8021742:	d004      	beq.n	802174e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8021744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802174a:	d012      	beq.n	8021772 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 802174c:	e023      	b.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802174e:	4b59      	ldr	r3, [pc, #356]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802175a:	d107      	bne.n	802176c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802175c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021760:	4618      	mov	r0, r3
 8021762:	f000 fbc7 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802176a:	e0fc      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802176c:	2300      	movs	r3, #0
 802176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021770:	e0f9      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021772:	4b50      	ldr	r3, [pc, #320]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802177a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802177e:	d107      	bne.n	8021790 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021780:	f107 0318 	add.w	r3, r7, #24
 8021784:	4618      	mov	r0, r3
 8021786:	f000 f90d 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 802178a:	6a3b      	ldr	r3, [r7, #32]
 802178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802178e:	e0ea      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021790:	2300      	movs	r3, #0
 8021792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021794:	e0e7      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021796:	2300      	movs	r3, #0
 8021798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802179a:	e0e4      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 802179c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80217a4:	430b      	orrs	r3, r1
 80217a6:	f040 808d 	bne.w	80218c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80217aa:	4b42      	ldr	r3, [pc, #264]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80217ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80217b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80217b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80217ba:	d06b      	beq.n	8021894 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80217bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80217c2:	d874      	bhi.n	80218ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80217c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80217ca:	d056      	beq.n	802187a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80217cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80217d2:	d86c      	bhi.n	80218ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80217d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80217da:	d03b      	beq.n	8021854 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80217dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80217e2:	d864      	bhi.n	80218ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80217e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80217ea:	d021      	beq.n	8021830 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80217ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80217f2:	d85c      	bhi.n	80218ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80217f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d004      	beq.n	8021804 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80217fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021800:	d004      	beq.n	802180c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8021802:	e054      	b.n	80218ae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8021804:	f000 f8b8 	bl	8021978 <HAL_RCCEx_GetD3PCLK1Freq>
 8021808:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802180a:	e0ac      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802180c:	4b29      	ldr	r3, [pc, #164]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021818:	d107      	bne.n	802182a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802181a:	f107 0318 	add.w	r3, r7, #24
 802181e:	4618      	mov	r0, r3
 8021820:	f000 f8c0 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021824:	69fb      	ldr	r3, [r7, #28]
 8021826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021828:	e09d      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802182a:	2300      	movs	r3, #0
 802182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802182e:	e09a      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021830:	4b20      	ldr	r3, [pc, #128]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021832:	681b      	ldr	r3, [r3, #0]
 8021834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802183c:	d107      	bne.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802183e:	f107 030c 	add.w	r3, r7, #12
 8021842:	4618      	mov	r0, r3
 8021844:	f000 fa02 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8021848:	693b      	ldr	r3, [r7, #16]
 802184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802184c:	e08b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802184e:	2300      	movs	r3, #0
 8021850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021852:	e088      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8021854:	4b17      	ldr	r3, [pc, #92]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021856:	681b      	ldr	r3, [r3, #0]
 8021858:	f003 0304 	and.w	r3, r3, #4
 802185c:	2b04      	cmp	r3, #4
 802185e:	d109      	bne.n	8021874 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021860:	4b14      	ldr	r3, [pc, #80]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021862:	681b      	ldr	r3, [r3, #0]
 8021864:	08db      	lsrs	r3, r3, #3
 8021866:	f003 0303 	and.w	r3, r3, #3
 802186a:	4a13      	ldr	r2, [pc, #76]	@ (80218b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 802186c:	fa22 f303 	lsr.w	r3, r2, r3
 8021870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021872:	e078      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021874:	2300      	movs	r3, #0
 8021876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021878:	e075      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 802187a:	4b0e      	ldr	r3, [pc, #56]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021886:	d102      	bne.n	802188e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8021888:	4b0c      	ldr	r3, [pc, #48]	@ (80218bc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 802188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802188c:	e06b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802188e:	2300      	movs	r3, #0
 8021890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021892:	e068      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021894:	4b07      	ldr	r3, [pc, #28]	@ (80218b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802189c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80218a0:	d102      	bne.n	80218a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80218a2:	4b07      	ldr	r3, [pc, #28]	@ (80218c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80218a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80218a6:	e05e      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80218a8:	2300      	movs	r3, #0
 80218aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80218ac:	e05b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80218ae:	2300      	movs	r3, #0
 80218b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80218b2:	e058      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80218b4:	58024400 	.word	0x58024400
 80218b8:	03d09000 	.word	0x03d09000
 80218bc:	003d0900 	.word	0x003d0900
 80218c0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80218c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80218c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80218cc:	430b      	orrs	r3, r1
 80218ce:	d148      	bne.n	8021962 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80218d0:	4b27      	ldr	r3, [pc, #156]	@ (8021970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80218d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80218d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80218d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80218da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80218e0:	d02a      	beq.n	8021938 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80218e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80218e8:	d838      	bhi.n	802195c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80218ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d004      	beq.n	80218fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80218f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80218f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80218f6:	d00d      	beq.n	8021914 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80218f8:	e030      	b.n	802195c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80218fa:	4b1d      	ldr	r3, [pc, #116]	@ (8021970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80218fc:	681b      	ldr	r3, [r3, #0]
 80218fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021906:	d102      	bne.n	802190e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8021908:	4b1a      	ldr	r3, [pc, #104]	@ (8021974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 802190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802190c:	e02b      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802190e:	2300      	movs	r3, #0
 8021910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021912:	e028      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021914:	4b16      	ldr	r3, [pc, #88]	@ (8021970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802191c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021920:	d107      	bne.n	8021932 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021926:	4618      	mov	r0, r3
 8021928:	f000 fae4 	bl	8021ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021930:	e019      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021932:	2300      	movs	r3, #0
 8021934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021936:	e016      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021938:	4b0d      	ldr	r3, [pc, #52]	@ (8021970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021944:	d107      	bne.n	8021956 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021946:	f107 0318 	add.w	r3, r7, #24
 802194a:	4618      	mov	r0, r3
 802194c:	f000 f82a 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021950:	69fb      	ldr	r3, [r7, #28]
 8021952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021954:	e007      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021956:	2300      	movs	r3, #0
 8021958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802195a:	e004      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802195c:	2300      	movs	r3, #0
 802195e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021960:	e001      	b.n	8021966 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8021962:	2300      	movs	r3, #0
 8021964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8021966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8021968:	4618      	mov	r0, r3
 802196a:	3740      	adds	r7, #64	@ 0x40
 802196c:	46bd      	mov	sp, r7
 802196e:	bd80      	pop	{r7, pc}
 8021970:	58024400 	.word	0x58024400
 8021974:	017d7840 	.word	0x017d7840

08021978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8021978:	b580      	push	{r7, lr}
 802197a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 802197c:	f7fe f816 	bl	801f9ac <HAL_RCC_GetHCLKFreq>
 8021980:	4602      	mov	r2, r0
 8021982:	4b06      	ldr	r3, [pc, #24]	@ (802199c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8021984:	6a1b      	ldr	r3, [r3, #32]
 8021986:	091b      	lsrs	r3, r3, #4
 8021988:	f003 0307 	and.w	r3, r3, #7
 802198c:	4904      	ldr	r1, [pc, #16]	@ (80219a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802198e:	5ccb      	ldrb	r3, [r1, r3]
 8021990:	f003 031f 	and.w	r3, r3, #31
 8021994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8021998:	4618      	mov	r0, r3
 802199a:	bd80      	pop	{r7, pc}
 802199c:	58024400 	.word	0x58024400
 80219a0:	0802b438 	.word	0x0802b438

080219a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80219a4:	b480      	push	{r7}
 80219a6:	b089      	sub	sp, #36	@ 0x24
 80219a8:	af00      	add	r7, sp, #0
 80219aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80219ac:	4ba1      	ldr	r3, [pc, #644]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219b0:	f003 0303 	and.w	r3, r3, #3
 80219b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80219b6:	4b9f      	ldr	r3, [pc, #636]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80219ba:	0b1b      	lsrs	r3, r3, #12
 80219bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80219c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80219c2:	4b9c      	ldr	r3, [pc, #624]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80219c6:	091b      	lsrs	r3, r3, #4
 80219c8:	f003 0301 	and.w	r3, r3, #1
 80219cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80219ce:	4b99      	ldr	r3, [pc, #612]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80219d2:	08db      	lsrs	r3, r3, #3
 80219d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80219d8:	693a      	ldr	r2, [r7, #16]
 80219da:	fb02 f303 	mul.w	r3, r2, r3
 80219de:	ee07 3a90 	vmov	s15, r3
 80219e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80219e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80219ea:	697b      	ldr	r3, [r7, #20]
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	f000 8111 	beq.w	8021c14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80219f2:	69bb      	ldr	r3, [r7, #24]
 80219f4:	2b02      	cmp	r3, #2
 80219f6:	f000 8083 	beq.w	8021b00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80219fa:	69bb      	ldr	r3, [r7, #24]
 80219fc:	2b02      	cmp	r3, #2
 80219fe:	f200 80a1 	bhi.w	8021b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8021a02:	69bb      	ldr	r3, [r7, #24]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	d003      	beq.n	8021a10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8021a08:	69bb      	ldr	r3, [r7, #24]
 8021a0a:	2b01      	cmp	r3, #1
 8021a0c:	d056      	beq.n	8021abc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8021a0e:	e099      	b.n	8021b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021a10:	4b88      	ldr	r3, [pc, #544]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	f003 0320 	and.w	r3, r3, #32
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d02d      	beq.n	8021a78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021a1c:	4b85      	ldr	r3, [pc, #532]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a1e:	681b      	ldr	r3, [r3, #0]
 8021a20:	08db      	lsrs	r3, r3, #3
 8021a22:	f003 0303 	and.w	r3, r3, #3
 8021a26:	4a84      	ldr	r2, [pc, #528]	@ (8021c38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8021a28:	fa22 f303 	lsr.w	r3, r2, r3
 8021a2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021a2e:	68bb      	ldr	r3, [r7, #8]
 8021a30:	ee07 3a90 	vmov	s15, r3
 8021a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a38:	697b      	ldr	r3, [r7, #20]
 8021a3a:	ee07 3a90 	vmov	s15, r3
 8021a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021a46:	4b7b      	ldr	r3, [pc, #492]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a4e:	ee07 3a90 	vmov	s15, r3
 8021a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021a72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021a76:	e087      	b.n	8021b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021a78:	697b      	ldr	r3, [r7, #20]
 8021a7a:	ee07 3a90 	vmov	s15, r3
 8021a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021c40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8021a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a92:	ee07 3a90 	vmov	s15, r3
 8021a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021aba:	e065      	b.n	8021b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021abc:	697b      	ldr	r3, [r7, #20]
 8021abe:	ee07 3a90 	vmov	s15, r3
 8021ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ace:	4b59      	ldr	r3, [pc, #356]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021ad6:	ee07 3a90 	vmov	s15, r3
 8021ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8021ae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021afe:	e043      	b.n	8021b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021b00:	697b      	ldr	r3, [r7, #20]
 8021b02:	ee07 3a90 	vmov	s15, r3
 8021b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8021b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021b12:	4b48      	ldr	r3, [pc, #288]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b1a:	ee07 3a90 	vmov	s15, r3
 8021b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8021b26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021b42:	e021      	b.n	8021b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021b44:	697b      	ldr	r3, [r7, #20]
 8021b46:	ee07 3a90 	vmov	s15, r3
 8021b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021b56:	4b37      	ldr	r3, [pc, #220]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b5e:	ee07 3a90 	vmov	s15, r3
 8021b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8021b6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021b86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8021b88:	4b2a      	ldr	r3, [pc, #168]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b8c:	0a5b      	lsrs	r3, r3, #9
 8021b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021b92:	ee07 3a90 	vmov	s15, r3
 8021b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8021ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021bae:	ee17 2a90 	vmov	r2, s15
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8021bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021bba:	0c1b      	lsrs	r3, r3, #16
 8021bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021bc0:	ee07 3a90 	vmov	s15, r3
 8021bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8021bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021bdc:	ee17 2a90 	vmov	r2, s15
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8021be4:	4b13      	ldr	r3, [pc, #76]	@ (8021c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021be8:	0e1b      	lsrs	r3, r3, #24
 8021bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021bee:	ee07 3a90 	vmov	s15, r3
 8021bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8021c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021c0a:	ee17 2a90 	vmov	r2, s15
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8021c12:	e008      	b.n	8021c26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	2200      	movs	r2, #0
 8021c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	2200      	movs	r2, #0
 8021c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2200      	movs	r2, #0
 8021c24:	609a      	str	r2, [r3, #8]
}
 8021c26:	bf00      	nop
 8021c28:	3724      	adds	r7, #36	@ 0x24
 8021c2a:	46bd      	mov	sp, r7
 8021c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c30:	4770      	bx	lr
 8021c32:	bf00      	nop
 8021c34:	58024400 	.word	0x58024400
 8021c38:	03d09000 	.word	0x03d09000
 8021c3c:	46000000 	.word	0x46000000
 8021c40:	4c742400 	.word	0x4c742400
 8021c44:	4a742400 	.word	0x4a742400
 8021c48:	4bbebc20 	.word	0x4bbebc20

08021c4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8021c4c:	b480      	push	{r7}
 8021c4e:	b089      	sub	sp, #36	@ 0x24
 8021c50:	af00      	add	r7, sp, #0
 8021c52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021c54:	4ba1      	ldr	r3, [pc, #644]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021c58:	f003 0303 	and.w	r3, r3, #3
 8021c5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8021c5e:	4b9f      	ldr	r3, [pc, #636]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021c62:	0d1b      	lsrs	r3, r3, #20
 8021c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021c68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8021c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021c6e:	0a1b      	lsrs	r3, r3, #8
 8021c70:	f003 0301 	and.w	r3, r3, #1
 8021c74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8021c76:	4b99      	ldr	r3, [pc, #612]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021c7a:	08db      	lsrs	r3, r3, #3
 8021c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021c80:	693a      	ldr	r2, [r7, #16]
 8021c82:	fb02 f303 	mul.w	r3, r2, r3
 8021c86:	ee07 3a90 	vmov	s15, r3
 8021c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8021c92:	697b      	ldr	r3, [r7, #20]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	f000 8111 	beq.w	8021ebc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8021c9a:	69bb      	ldr	r3, [r7, #24]
 8021c9c:	2b02      	cmp	r3, #2
 8021c9e:	f000 8083 	beq.w	8021da8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8021ca2:	69bb      	ldr	r3, [r7, #24]
 8021ca4:	2b02      	cmp	r3, #2
 8021ca6:	f200 80a1 	bhi.w	8021dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8021caa:	69bb      	ldr	r3, [r7, #24]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d003      	beq.n	8021cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8021cb0:	69bb      	ldr	r3, [r7, #24]
 8021cb2:	2b01      	cmp	r3, #1
 8021cb4:	d056      	beq.n	8021d64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8021cb6:	e099      	b.n	8021dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021cb8:	4b88      	ldr	r3, [pc, #544]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cba:	681b      	ldr	r3, [r3, #0]
 8021cbc:	f003 0320 	and.w	r3, r3, #32
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d02d      	beq.n	8021d20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021cc4:	4b85      	ldr	r3, [pc, #532]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	08db      	lsrs	r3, r3, #3
 8021cca:	f003 0303 	and.w	r3, r3, #3
 8021cce:	4a84      	ldr	r2, [pc, #528]	@ (8021ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8021cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8021cd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021cd6:	68bb      	ldr	r3, [r7, #8]
 8021cd8:	ee07 3a90 	vmov	s15, r3
 8021cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ce0:	697b      	ldr	r3, [r7, #20]
 8021ce2:	ee07 3a90 	vmov	s15, r3
 8021ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021cee:	4b7b      	ldr	r3, [pc, #492]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021cf6:	ee07 3a90 	vmov	s15, r3
 8021cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8021d02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021d1e:	e087      	b.n	8021e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021d20:	697b      	ldr	r3, [r7, #20]
 8021d22:	ee07 3a90 	vmov	s15, r3
 8021d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8021d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021d32:	4b6a      	ldr	r3, [pc, #424]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021d3a:	ee07 3a90 	vmov	s15, r3
 8021d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8021d46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021d62:	e065      	b.n	8021e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021d64:	697b      	ldr	r3, [r7, #20]
 8021d66:	ee07 3a90 	vmov	s15, r3
 8021d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021d76:	4b59      	ldr	r3, [pc, #356]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021d7e:	ee07 3a90 	vmov	s15, r3
 8021d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8021d8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021da6:	e043      	b.n	8021e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021da8:	697b      	ldr	r3, [r7, #20]
 8021daa:	ee07 3a90 	vmov	s15, r3
 8021dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021db2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8021db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021dba:	4b48      	ldr	r3, [pc, #288]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021dc2:	ee07 3a90 	vmov	s15, r3
 8021dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8021dce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021dea:	e021      	b.n	8021e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021dec:	697b      	ldr	r3, [r7, #20]
 8021dee:	ee07 3a90 	vmov	s15, r3
 8021df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021df6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021dfe:	4b37      	ldr	r3, [pc, #220]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021e06:	ee07 3a90 	vmov	s15, r3
 8021e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021e12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021e2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8021e30:	4b2a      	ldr	r3, [pc, #168]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e34:	0a5b      	lsrs	r3, r3, #9
 8021e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021e3a:	ee07 3a90 	vmov	s15, r3
 8021e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8021e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021e56:	ee17 2a90 	vmov	r2, s15
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8021e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e62:	0c1b      	lsrs	r3, r3, #16
 8021e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021e68:	ee07 3a90 	vmov	s15, r3
 8021e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8021e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021e84:	ee17 2a90 	vmov	r2, s15
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8021e8c:	4b13      	ldr	r3, [pc, #76]	@ (8021edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e90:	0e1b      	lsrs	r3, r3, #24
 8021e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021e96:	ee07 3a90 	vmov	s15, r3
 8021e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8021eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021eb2:	ee17 2a90 	vmov	r2, s15
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8021eba:	e008      	b.n	8021ece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	2200      	movs	r2, #0
 8021ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	2200      	movs	r2, #0
 8021ecc:	609a      	str	r2, [r3, #8]
}
 8021ece:	bf00      	nop
 8021ed0:	3724      	adds	r7, #36	@ 0x24
 8021ed2:	46bd      	mov	sp, r7
 8021ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ed8:	4770      	bx	lr
 8021eda:	bf00      	nop
 8021edc:	58024400 	.word	0x58024400
 8021ee0:	03d09000 	.word	0x03d09000
 8021ee4:	46000000 	.word	0x46000000
 8021ee8:	4c742400 	.word	0x4c742400
 8021eec:	4a742400 	.word	0x4a742400
 8021ef0:	4bbebc20 	.word	0x4bbebc20

08021ef4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8021ef4:	b480      	push	{r7}
 8021ef6:	b089      	sub	sp, #36	@ 0x24
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021efc:	4ba0      	ldr	r3, [pc, #640]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f00:	f003 0303 	and.w	r3, r3, #3
 8021f04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8021f06:	4b9e      	ldr	r3, [pc, #632]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f0a:	091b      	lsrs	r3, r3, #4
 8021f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021f10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8021f12:	4b9b      	ldr	r3, [pc, #620]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f16:	f003 0301 	and.w	r3, r3, #1
 8021f1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8021f1c:	4b98      	ldr	r3, [pc, #608]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021f20:	08db      	lsrs	r3, r3, #3
 8021f22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f26:	693a      	ldr	r2, [r7, #16]
 8021f28:	fb02 f303 	mul.w	r3, r2, r3
 8021f2c:	ee07 3a90 	vmov	s15, r3
 8021f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8021f38:	697b      	ldr	r3, [r7, #20]
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	f000 8111 	beq.w	8022162 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8021f40:	69bb      	ldr	r3, [r7, #24]
 8021f42:	2b02      	cmp	r3, #2
 8021f44:	f000 8083 	beq.w	802204e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8021f48:	69bb      	ldr	r3, [r7, #24]
 8021f4a:	2b02      	cmp	r3, #2
 8021f4c:	f200 80a1 	bhi.w	8022092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8021f50:	69bb      	ldr	r3, [r7, #24]
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d003      	beq.n	8021f5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8021f56:	69bb      	ldr	r3, [r7, #24]
 8021f58:	2b01      	cmp	r3, #1
 8021f5a:	d056      	beq.n	802200a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8021f5c:	e099      	b.n	8022092 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021f5e:	4b88      	ldr	r3, [pc, #544]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	f003 0320 	and.w	r3, r3, #32
 8021f66:	2b00      	cmp	r3, #0
 8021f68:	d02d      	beq.n	8021fc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021f6a:	4b85      	ldr	r3, [pc, #532]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	08db      	lsrs	r3, r3, #3
 8021f70:	f003 0303 	and.w	r3, r3, #3
 8021f74:	4a83      	ldr	r2, [pc, #524]	@ (8022184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8021f76:	fa22 f303 	lsr.w	r3, r2, r3
 8021f7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021f7c:	68bb      	ldr	r3, [r7, #8]
 8021f7e:	ee07 3a90 	vmov	s15, r3
 8021f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	ee07 3a90 	vmov	s15, r3
 8021f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f94:	4b7a      	ldr	r3, [pc, #488]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f9c:	ee07 3a90 	vmov	s15, r3
 8021fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8021fa8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8022188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021fc4:	e087      	b.n	80220d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021fc6:	697b      	ldr	r3, [r7, #20]
 8021fc8:	ee07 3a90 	vmov	s15, r3
 8021fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021fd0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 802218c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8021fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021fd8:	4b69      	ldr	r3, [pc, #420]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021fe0:	ee07 3a90 	vmov	s15, r3
 8021fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8021fec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8022188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021ff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022008:	e065      	b.n	80220d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802200a:	697b      	ldr	r3, [r7, #20]
 802200c:	ee07 3a90 	vmov	s15, r3
 8022010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022014:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8022190 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8022018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802201c:	4b58      	ldr	r3, [pc, #352]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 802201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022024:	ee07 3a90 	vmov	s15, r3
 8022028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802202c:	ed97 6a03 	vldr	s12, [r7, #12]
 8022030:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8022188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8022034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802203c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802204c:	e043      	b.n	80220d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802204e:	697b      	ldr	r3, [r7, #20]
 8022050:	ee07 3a90 	vmov	s15, r3
 8022054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022058:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8022194 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 802205c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022060:	4b47      	ldr	r3, [pc, #284]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022068:	ee07 3a90 	vmov	s15, r3
 802206c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022070:	ed97 6a03 	vldr	s12, [r7, #12]
 8022074:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8022188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8022078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802207c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022088:	ee67 7a27 	vmul.f32	s15, s14, s15
 802208c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022090:	e021      	b.n	80220d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022092:	697b      	ldr	r3, [r7, #20]
 8022094:	ee07 3a90 	vmov	s15, r3
 8022098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802209c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 802218c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80220a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80220a4:	4b36      	ldr	r3, [pc, #216]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80220a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80220ac:	ee07 3a90 	vmov	s15, r3
 80220b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80220b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80220b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8022188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80220bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80220c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80220c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80220c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80220cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80220d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80220d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80220d6:	4b2a      	ldr	r3, [pc, #168]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80220d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220da:	0a5b      	lsrs	r3, r3, #9
 80220dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80220e0:	ee07 3a90 	vmov	s15, r3
 80220e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80220e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80220ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80220f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80220f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80220f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80220fc:	ee17 2a90 	vmov	r2, s15
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8022104:	4b1e      	ldr	r3, [pc, #120]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022108:	0c1b      	lsrs	r3, r3, #16
 802210a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802210e:	ee07 3a90 	vmov	s15, r3
 8022112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802211a:	ee37 7a87 	vadd.f32	s14, s15, s14
 802211e:	edd7 6a07 	vldr	s13, [r7, #28]
 8022122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802212a:	ee17 2a90 	vmov	r2, s15
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8022132:	4b13      	ldr	r3, [pc, #76]	@ (8022180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022136:	0e1b      	lsrs	r3, r3, #24
 8022138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802213c:	ee07 3a90 	vmov	s15, r3
 8022140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022148:	ee37 7a87 	vadd.f32	s14, s15, s14
 802214c:	edd7 6a07 	vldr	s13, [r7, #28]
 8022150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022158:	ee17 2a90 	vmov	r2, s15
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8022160:	e008      	b.n	8022174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	2200      	movs	r2, #0
 8022166:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8022168:	687b      	ldr	r3, [r7, #4]
 802216a:	2200      	movs	r2, #0
 802216c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	2200      	movs	r2, #0
 8022172:	609a      	str	r2, [r3, #8]
}
 8022174:	bf00      	nop
 8022176:	3724      	adds	r7, #36	@ 0x24
 8022178:	46bd      	mov	sp, r7
 802217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802217e:	4770      	bx	lr
 8022180:	58024400 	.word	0x58024400
 8022184:	03d09000 	.word	0x03d09000
 8022188:	46000000 	.word	0x46000000
 802218c:	4c742400 	.word	0x4c742400
 8022190:	4a742400 	.word	0x4a742400
 8022194:	4bbebc20 	.word	0x4bbebc20

08022198 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8022198:	b580      	push	{r7, lr}
 802219a:	b084      	sub	sp, #16
 802219c:	af00      	add	r7, sp, #0
 802219e:	6078      	str	r0, [r7, #4]
 80221a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80221a2:	2300      	movs	r3, #0
 80221a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80221a6:	4b53      	ldr	r3, [pc, #332]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221aa:	f003 0303 	and.w	r3, r3, #3
 80221ae:	2b03      	cmp	r3, #3
 80221b0:	d101      	bne.n	80221b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80221b2:	2301      	movs	r3, #1
 80221b4:	e099      	b.n	80222ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80221b6:	4b4f      	ldr	r3, [pc, #316]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	4a4e      	ldr	r2, [pc, #312]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80221c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80221c2:	f7f9 fd2f 	bl	801bc24 <HAL_GetTick>
 80221c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80221c8:	e008      	b.n	80221dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80221ca:	f7f9 fd2b 	bl	801bc24 <HAL_GetTick>
 80221ce:	4602      	mov	r2, r0
 80221d0:	68bb      	ldr	r3, [r7, #8]
 80221d2:	1ad3      	subs	r3, r2, r3
 80221d4:	2b02      	cmp	r3, #2
 80221d6:	d901      	bls.n	80221dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80221d8:	2303      	movs	r3, #3
 80221da:	e086      	b.n	80222ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80221dc:	4b45      	ldr	r3, [pc, #276]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221de:	681b      	ldr	r3, [r3, #0]
 80221e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d1f0      	bne.n	80221ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80221e8:	4b42      	ldr	r3, [pc, #264]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80221f0:	687b      	ldr	r3, [r7, #4]
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	031b      	lsls	r3, r3, #12
 80221f6:	493f      	ldr	r1, [pc, #252]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80221f8:	4313      	orrs	r3, r2
 80221fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	685b      	ldr	r3, [r3, #4]
 8022200:	3b01      	subs	r3, #1
 8022202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	689b      	ldr	r3, [r3, #8]
 802220a:	3b01      	subs	r3, #1
 802220c:	025b      	lsls	r3, r3, #9
 802220e:	b29b      	uxth	r3, r3
 8022210:	431a      	orrs	r2, r3
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	68db      	ldr	r3, [r3, #12]
 8022216:	3b01      	subs	r3, #1
 8022218:	041b      	lsls	r3, r3, #16
 802221a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802221e:	431a      	orrs	r2, r3
 8022220:	687b      	ldr	r3, [r7, #4]
 8022222:	691b      	ldr	r3, [r3, #16]
 8022224:	3b01      	subs	r3, #1
 8022226:	061b      	lsls	r3, r3, #24
 8022228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 802222c:	4931      	ldr	r1, [pc, #196]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802222e:	4313      	orrs	r3, r2
 8022230:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8022232:	4b30      	ldr	r3, [pc, #192]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	695b      	ldr	r3, [r3, #20]
 802223e:	492d      	ldr	r1, [pc, #180]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022240:	4313      	orrs	r3, r2
 8022242:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8022244:	4b2b      	ldr	r3, [pc, #172]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022248:	f023 0220 	bic.w	r2, r3, #32
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	699b      	ldr	r3, [r3, #24]
 8022250:	4928      	ldr	r1, [pc, #160]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022252:	4313      	orrs	r3, r2
 8022254:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8022256:	4b27      	ldr	r3, [pc, #156]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802225a:	4a26      	ldr	r2, [pc, #152]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802225c:	f023 0310 	bic.w	r3, r3, #16
 8022260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8022262:	4b24      	ldr	r3, [pc, #144]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022266:	4b24      	ldr	r3, [pc, #144]	@ (80222f8 <RCCEx_PLL2_Config+0x160>)
 8022268:	4013      	ands	r3, r2
 802226a:	687a      	ldr	r2, [r7, #4]
 802226c:	69d2      	ldr	r2, [r2, #28]
 802226e:	00d2      	lsls	r2, r2, #3
 8022270:	4920      	ldr	r1, [pc, #128]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022272:	4313      	orrs	r3, r2
 8022274:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8022276:	4b1f      	ldr	r3, [pc, #124]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 8022278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802227a:	4a1e      	ldr	r2, [pc, #120]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802227c:	f043 0310 	orr.w	r3, r3, #16
 8022280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8022282:	683b      	ldr	r3, [r7, #0]
 8022284:	2b00      	cmp	r3, #0
 8022286:	d106      	bne.n	8022296 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8022288:	4b1a      	ldr	r3, [pc, #104]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802228c:	4a19      	ldr	r2, [pc, #100]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802228e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8022292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022294:	e00f      	b.n	80222b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8022296:	683b      	ldr	r3, [r7, #0]
 8022298:	2b01      	cmp	r3, #1
 802229a:	d106      	bne.n	80222aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 802229c:	4b15      	ldr	r3, [pc, #84]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 802229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222a0:	4a14      	ldr	r2, [pc, #80]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80222a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80222a8:	e005      	b.n	80222b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80222aa:	4b12      	ldr	r3, [pc, #72]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ae:	4a11      	ldr	r2, [pc, #68]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80222b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80222b6:	4b0f      	ldr	r3, [pc, #60]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	4a0e      	ldr	r2, [pc, #56]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80222c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80222c2:	f7f9 fcaf 	bl	801bc24 <HAL_GetTick>
 80222c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80222c8:	e008      	b.n	80222dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80222ca:	f7f9 fcab 	bl	801bc24 <HAL_GetTick>
 80222ce:	4602      	mov	r2, r0
 80222d0:	68bb      	ldr	r3, [r7, #8]
 80222d2:	1ad3      	subs	r3, r2, r3
 80222d4:	2b02      	cmp	r3, #2
 80222d6:	d901      	bls.n	80222dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80222d8:	2303      	movs	r3, #3
 80222da:	e006      	b.n	80222ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80222dc:	4b05      	ldr	r3, [pc, #20]	@ (80222f4 <RCCEx_PLL2_Config+0x15c>)
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80222e4:	2b00      	cmp	r3, #0
 80222e6:	d0f0      	beq.n	80222ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80222e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80222ea:	4618      	mov	r0, r3
 80222ec:	3710      	adds	r7, #16
 80222ee:	46bd      	mov	sp, r7
 80222f0:	bd80      	pop	{r7, pc}
 80222f2:	bf00      	nop
 80222f4:	58024400 	.word	0x58024400
 80222f8:	ffff0007 	.word	0xffff0007

080222fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b084      	sub	sp, #16
 8022300:	af00      	add	r7, sp, #0
 8022302:	6078      	str	r0, [r7, #4]
 8022304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8022306:	2300      	movs	r3, #0
 8022308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802230a:	4b53      	ldr	r3, [pc, #332]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 802230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802230e:	f003 0303 	and.w	r3, r3, #3
 8022312:	2b03      	cmp	r3, #3
 8022314:	d101      	bne.n	802231a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8022316:	2301      	movs	r3, #1
 8022318:	e099      	b.n	802244e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802231a:	4b4f      	ldr	r3, [pc, #316]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	4a4e      	ldr	r2, [pc, #312]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022326:	f7f9 fc7d 	bl	801bc24 <HAL_GetTick>
 802232a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802232c:	e008      	b.n	8022340 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802232e:	f7f9 fc79 	bl	801bc24 <HAL_GetTick>
 8022332:	4602      	mov	r2, r0
 8022334:	68bb      	ldr	r3, [r7, #8]
 8022336:	1ad3      	subs	r3, r2, r3
 8022338:	2b02      	cmp	r3, #2
 802233a:	d901      	bls.n	8022340 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802233c:	2303      	movs	r3, #3
 802233e:	e086      	b.n	802244e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8022340:	4b45      	ldr	r3, [pc, #276]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022348:	2b00      	cmp	r3, #0
 802234a:	d1f0      	bne.n	802232e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802234c:	4b42      	ldr	r3, [pc, #264]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 802234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022350:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	051b      	lsls	r3, r3, #20
 802235a:	493f      	ldr	r1, [pc, #252]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 802235c:	4313      	orrs	r3, r2
 802235e:	628b      	str	r3, [r1, #40]	@ 0x28
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	685b      	ldr	r3, [r3, #4]
 8022364:	3b01      	subs	r3, #1
 8022366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	689b      	ldr	r3, [r3, #8]
 802236e:	3b01      	subs	r3, #1
 8022370:	025b      	lsls	r3, r3, #9
 8022372:	b29b      	uxth	r3, r3
 8022374:	431a      	orrs	r2, r3
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	68db      	ldr	r3, [r3, #12]
 802237a:	3b01      	subs	r3, #1
 802237c:	041b      	lsls	r3, r3, #16
 802237e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8022382:	431a      	orrs	r2, r3
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	691b      	ldr	r3, [r3, #16]
 8022388:	3b01      	subs	r3, #1
 802238a:	061b      	lsls	r3, r3, #24
 802238c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8022390:	4931      	ldr	r1, [pc, #196]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022392:	4313      	orrs	r3, r2
 8022394:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8022396:	4b30      	ldr	r3, [pc, #192]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802239a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	695b      	ldr	r3, [r3, #20]
 80223a2:	492d      	ldr	r1, [pc, #180]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223a4:	4313      	orrs	r3, r2
 80223a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80223a8:	4b2b      	ldr	r3, [pc, #172]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	699b      	ldr	r3, [r3, #24]
 80223b4:	4928      	ldr	r1, [pc, #160]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223b6:	4313      	orrs	r3, r2
 80223b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80223ba:	4b27      	ldr	r3, [pc, #156]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223be:	4a26      	ldr	r2, [pc, #152]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80223c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80223c6:	4b24      	ldr	r3, [pc, #144]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80223ca:	4b24      	ldr	r3, [pc, #144]	@ (802245c <RCCEx_PLL3_Config+0x160>)
 80223cc:	4013      	ands	r3, r2
 80223ce:	687a      	ldr	r2, [r7, #4]
 80223d0:	69d2      	ldr	r2, [r2, #28]
 80223d2:	00d2      	lsls	r2, r2, #3
 80223d4:	4920      	ldr	r1, [pc, #128]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223d6:	4313      	orrs	r3, r2
 80223d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80223da:	4b1f      	ldr	r3, [pc, #124]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223de:	4a1e      	ldr	r2, [pc, #120]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80223e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80223e6:	683b      	ldr	r3, [r7, #0]
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	d106      	bne.n	80223fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80223ec:	4b1a      	ldr	r3, [pc, #104]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223f0:	4a19      	ldr	r2, [pc, #100]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 80223f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80223f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80223f8:	e00f      	b.n	802241a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80223fa:	683b      	ldr	r3, [r7, #0]
 80223fc:	2b01      	cmp	r3, #1
 80223fe:	d106      	bne.n	802240e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8022400:	4b15      	ldr	r3, [pc, #84]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022404:	4a14      	ldr	r2, [pc, #80]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022406:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802240a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802240c:	e005      	b.n	802241a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802240e:	4b12      	ldr	r3, [pc, #72]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022412:	4a11      	ldr	r2, [pc, #68]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022418:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802241a:	4b0f      	ldr	r3, [pc, #60]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	4a0e      	ldr	r2, [pc, #56]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022426:	f7f9 fbfd 	bl	801bc24 <HAL_GetTick>
 802242a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802242c:	e008      	b.n	8022440 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802242e:	f7f9 fbf9 	bl	801bc24 <HAL_GetTick>
 8022432:	4602      	mov	r2, r0
 8022434:	68bb      	ldr	r3, [r7, #8]
 8022436:	1ad3      	subs	r3, r2, r3
 8022438:	2b02      	cmp	r3, #2
 802243a:	d901      	bls.n	8022440 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802243c:	2303      	movs	r3, #3
 802243e:	e006      	b.n	802244e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8022440:	4b05      	ldr	r3, [pc, #20]	@ (8022458 <RCCEx_PLL3_Config+0x15c>)
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022448:	2b00      	cmp	r3, #0
 802244a:	d0f0      	beq.n	802242e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802244c:	7bfb      	ldrb	r3, [r7, #15]
}
 802244e:	4618      	mov	r0, r3
 8022450:	3710      	adds	r7, #16
 8022452:	46bd      	mov	sp, r7
 8022454:	bd80      	pop	{r7, pc}
 8022456:	bf00      	nop
 8022458:	58024400 	.word	0x58024400
 802245c:	ffff0007 	.word	0xffff0007

08022460 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8022460:	b580      	push	{r7, lr}
 8022462:	b08a      	sub	sp, #40	@ 0x28
 8022464:	af00      	add	r7, sp, #0
 8022466:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	2b00      	cmp	r3, #0
 802246c:	d101      	bne.n	8022472 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 802246e:	2301      	movs	r3, #1
 8022470:	e075      	b.n	802255e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022478:	b2db      	uxtb	r3, r3
 802247a:	2b00      	cmp	r3, #0
 802247c:	d105      	bne.n	802248a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	2200      	movs	r2, #0
 8022482:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8022484:	6878      	ldr	r0, [r7, #4]
 8022486:	f7ec fc3b 	bl	800ed00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	2204      	movs	r2, #4
 802248e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8022492:	6878      	ldr	r0, [r7, #4]
 8022494:	f000 f868 	bl	8022568 <HAL_SD_InitCard>
 8022498:	4603      	mov	r3, r0
 802249a:	2b00      	cmp	r3, #0
 802249c:	d001      	beq.n	80224a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 802249e:	2301      	movs	r3, #1
 80224a0:	e05d      	b.n	802255e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80224a2:	f107 0308 	add.w	r3, r7, #8
 80224a6:	4619      	mov	r1, r3
 80224a8:	6878      	ldr	r0, [r7, #4]
 80224aa:	f000 fdaf 	bl	802300c <HAL_SD_GetCardStatus>
 80224ae:	4603      	mov	r3, r0
 80224b0:	2b00      	cmp	r3, #0
 80224b2:	d001      	beq.n	80224b8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80224b4:	2301      	movs	r3, #1
 80224b6:	e052      	b.n	802255e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80224b8:	7e3b      	ldrb	r3, [r7, #24]
 80224ba:	b2db      	uxtb	r3, r3
 80224bc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80224be:	7e7b      	ldrb	r3, [r7, #25]
 80224c0:	b2db      	uxtb	r3, r3
 80224c2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80224c8:	2b01      	cmp	r3, #1
 80224ca:	d10a      	bne.n	80224e2 <HAL_SD_Init+0x82>
 80224cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d102      	bne.n	80224d8 <HAL_SD_Init+0x78>
 80224d2:	6a3b      	ldr	r3, [r7, #32]
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	d004      	beq.n	80224e2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80224de:	659a      	str	r2, [r3, #88]	@ 0x58
 80224e0:	e00b      	b.n	80224fa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80224e6:	2b01      	cmp	r3, #1
 80224e8:	d104      	bne.n	80224f4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80224f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80224f2:	e002      	b.n	80224fa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	2200      	movs	r2, #0
 80224f8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80224fa:	687b      	ldr	r3, [r7, #4]
 80224fc:	68db      	ldr	r3, [r3, #12]
 80224fe:	4619      	mov	r1, r3
 8022500:	6878      	ldr	r0, [r7, #4]
 8022502:	f000 fe6d 	bl	80231e0 <HAL_SD_ConfigWideBusOperation>
 8022506:	4603      	mov	r3, r0
 8022508:	2b00      	cmp	r3, #0
 802250a:	d001      	beq.n	8022510 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 802250c:	2301      	movs	r3, #1
 802250e:	e026      	b.n	802255e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8022510:	f7f9 fb88 	bl	801bc24 <HAL_GetTick>
 8022514:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8022516:	e011      	b.n	802253c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8022518:	f7f9 fb84 	bl	801bc24 <HAL_GetTick>
 802251c:	4602      	mov	r2, r0
 802251e:	69fb      	ldr	r3, [r7, #28]
 8022520:	1ad3      	subs	r3, r2, r3
 8022522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022526:	d109      	bne.n	802253c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802252e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	2201      	movs	r2, #1
 8022534:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8022538:	2303      	movs	r3, #3
 802253a:	e010      	b.n	802255e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 802253c:	6878      	ldr	r0, [r7, #4]
 802253e:	f000 ff61 	bl	8023404 <HAL_SD_GetCardState>
 8022542:	4603      	mov	r3, r0
 8022544:	2b04      	cmp	r3, #4
 8022546:	d1e7      	bne.n	8022518 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	2200      	movs	r2, #0
 802254c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	2200      	movs	r2, #0
 8022552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	2201      	movs	r2, #1
 8022558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 802255c:	2300      	movs	r3, #0
}
 802255e:	4618      	mov	r0, r3
 8022560:	3728      	adds	r7, #40	@ 0x28
 8022562:	46bd      	mov	sp, r7
 8022564:	bd80      	pop	{r7, pc}
	...

08022568 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8022568:	b590      	push	{r4, r7, lr}
 802256a:	b08d      	sub	sp, #52	@ 0x34
 802256c:	af02      	add	r7, sp, #8
 802256e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8022570:	2300      	movs	r3, #0
 8022572:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8022574:	2300      	movs	r3, #0
 8022576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8022578:	2300      	movs	r3, #0
 802257a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 802257c:	2300      	movs	r3, #0
 802257e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8022580:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8022584:	f04f 0100 	mov.w	r1, #0
 8022588:	f7fe fc76 	bl	8020e78 <HAL_RCCEx_GetPeriphCLKFreq>
 802258c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 802258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022590:	2b00      	cmp	r3, #0
 8022592:	d109      	bne.n	80225a8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	2201      	movs	r2, #1
 8022598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80225a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80225a4:	2301      	movs	r3, #1
 80225a6:	e070      	b.n	802268a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80225a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225aa:	0a1b      	lsrs	r3, r3, #8
 80225ac:	4a39      	ldr	r2, [pc, #228]	@ (8022694 <HAL_SD_InitCard+0x12c>)
 80225ae:	fba2 2303 	umull	r2, r3, r2, r3
 80225b2:	091b      	lsrs	r3, r3, #4
 80225b4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	681c      	ldr	r4, [r3, #0]
 80225ba:	466a      	mov	r2, sp
 80225bc:	f107 0318 	add.w	r3, r7, #24
 80225c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80225c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80225c8:	f107 030c 	add.w	r3, r7, #12
 80225cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80225ce:	4620      	mov	r0, r4
 80225d0:	f002 fe5e 	bl	8025290 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	4618      	mov	r0, r3
 80225da:	f002 fea1 	bl	8025320 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80225de:	69fb      	ldr	r3, [r7, #28]
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	d005      	beq.n	80225f0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80225e4:	69fb      	ldr	r3, [r7, #28]
 80225e6:	005b      	lsls	r3, r3, #1
 80225e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80225ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80225ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80225f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d007      	beq.n	8022606 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80225f6:	4a28      	ldr	r2, [pc, #160]	@ (8022698 <HAL_SD_InitCard+0x130>)
 80225f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80225fe:	3301      	adds	r3, #1
 8022600:	4618      	mov	r0, r3
 8022602:	f7f9 fb1b 	bl	801bc3c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8022606:	6878      	ldr	r0, [r7, #4]
 8022608:	f000 ffea 	bl	80235e0 <SD_PowerON>
 802260c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802260e:	6a3b      	ldr	r3, [r7, #32]
 8022610:	2b00      	cmp	r3, #0
 8022612:	d00b      	beq.n	802262c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	2201      	movs	r2, #1
 8022618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022620:	6a3b      	ldr	r3, [r7, #32]
 8022622:	431a      	orrs	r2, r3
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022628:	2301      	movs	r3, #1
 802262a:	e02e      	b.n	802268a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 802262c:	6878      	ldr	r0, [r7, #4]
 802262e:	f000 ff09 	bl	8023444 <SD_InitCard>
 8022632:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8022634:	6a3b      	ldr	r3, [r7, #32]
 8022636:	2b00      	cmp	r3, #0
 8022638:	d00b      	beq.n	8022652 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	2201      	movs	r2, #1
 802263e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022646:	6a3b      	ldr	r3, [r7, #32]
 8022648:	431a      	orrs	r2, r3
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802264e:	2301      	movs	r3, #1
 8022650:	e01b      	b.n	802268a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802265a:	4618      	mov	r0, r3
 802265c:	f002 fef6 	bl	802544c <SDMMC_CmdBlockLength>
 8022660:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8022662:	6a3b      	ldr	r3, [r7, #32]
 8022664:	2b00      	cmp	r3, #0
 8022666:	d00f      	beq.n	8022688 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	4a0b      	ldr	r2, [pc, #44]	@ (802269c <HAL_SD_InitCard+0x134>)
 802266e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022674:	6a3b      	ldr	r3, [r7, #32]
 8022676:	431a      	orrs	r2, r3
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	2201      	movs	r2, #1
 8022680:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8022684:	2301      	movs	r3, #1
 8022686:	e000      	b.n	802268a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8022688:	2300      	movs	r3, #0
}
 802268a:	4618      	mov	r0, r3
 802268c:	372c      	adds	r7, #44	@ 0x2c
 802268e:	46bd      	mov	sp, r7
 8022690:	bd90      	pop	{r4, r7, pc}
 8022692:	bf00      	nop
 8022694:	014f8b59 	.word	0x014f8b59
 8022698:	00012110 	.word	0x00012110
 802269c:	1fe00fff 	.word	0x1fe00fff

080226a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80226a0:	b580      	push	{r7, lr}
 80226a2:	b08c      	sub	sp, #48	@ 0x30
 80226a4:	af00      	add	r7, sp, #0
 80226a6:	60f8      	str	r0, [r7, #12]
 80226a8:	60b9      	str	r1, [r7, #8]
 80226aa:	607a      	str	r2, [r7, #4]
 80226ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80226ae:	687b      	ldr	r3, [r7, #4]
 80226b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80226b2:	68bb      	ldr	r3, [r7, #8]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d107      	bne.n	80226c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80226b8:	68fb      	ldr	r3, [r7, #12]
 80226ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80226bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80226c0:	68fb      	ldr	r3, [r7, #12]
 80226c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80226c4:	2301      	movs	r3, #1
 80226c6:	e08d      	b.n	80227e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80226ce:	b2db      	uxtb	r3, r3
 80226d0:	2b01      	cmp	r3, #1
 80226d2:	f040 8086 	bne.w	80227e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80226d6:	68fb      	ldr	r3, [r7, #12]
 80226d8:	2200      	movs	r2, #0
 80226da:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80226dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80226de:	683b      	ldr	r3, [r7, #0]
 80226e0:	441a      	add	r2, r3
 80226e2:	68fb      	ldr	r3, [r7, #12]
 80226e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80226e6:	429a      	cmp	r2, r3
 80226e8:	d907      	bls.n	80226fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80226ea:	68fb      	ldr	r3, [r7, #12]
 80226ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80226ee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80226f2:	68fb      	ldr	r3, [r7, #12]
 80226f4:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80226f6:	2301      	movs	r3, #1
 80226f8:	e074      	b.n	80227e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80226fa:	68fb      	ldr	r3, [r7, #12]
 80226fc:	2203      	movs	r2, #3
 80226fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8022702:	68fb      	ldr	r3, [r7, #12]
 8022704:	681b      	ldr	r3, [r3, #0]
 8022706:	2200      	movs	r2, #0
 8022708:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	68ba      	ldr	r2, [r7, #8]
 802270e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022710:	683b      	ldr	r3, [r7, #0]
 8022712:	025a      	lsls	r2, r3, #9
 8022714:	68fb      	ldr	r3, [r7, #12]
 8022716:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022718:	68fb      	ldr	r3, [r7, #12]
 802271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802271c:	2b01      	cmp	r3, #1
 802271e:	d002      	beq.n	8022726 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8022720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022722:	025b      	lsls	r3, r3, #9
 8022724:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8022726:	f04f 33ff 	mov.w	r3, #4294967295
 802272a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 802272c:	683b      	ldr	r3, [r7, #0]
 802272e:	025b      	lsls	r3, r3, #9
 8022730:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8022732:	2390      	movs	r3, #144	@ 0x90
 8022734:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8022736:	2302      	movs	r3, #2
 8022738:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802273a:	2300      	movs	r3, #0
 802273c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 802273e:	2300      	movs	r3, #0
 8022740:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8022742:	68fb      	ldr	r3, [r7, #12]
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	f107 0210 	add.w	r2, r7, #16
 802274a:	4611      	mov	r1, r2
 802274c:	4618      	mov	r0, r3
 802274e:	f002 fe51 	bl	80253f4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8022752:	68fb      	ldr	r3, [r7, #12]
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	68da      	ldr	r2, [r3, #12]
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8022760:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	681b      	ldr	r3, [r3, #0]
 8022766:	68ba      	ldr	r2, [r7, #8]
 8022768:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 802276a:	68fb      	ldr	r3, [r7, #12]
 802276c:	681b      	ldr	r3, [r3, #0]
 802276e:	2201      	movs	r2, #1
 8022770:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8022772:	683b      	ldr	r3, [r7, #0]
 8022774:	2b01      	cmp	r3, #1
 8022776:	d90a      	bls.n	802278e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8022778:	68fb      	ldr	r3, [r7, #12]
 802277a:	2282      	movs	r2, #130	@ 0x82
 802277c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022784:	4618      	mov	r0, r3
 8022786:	f002 fea7 	bl	80254d8 <SDMMC_CmdReadMultiBlock>
 802278a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802278c:	e009      	b.n	80227a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 802278e:	68fb      	ldr	r3, [r7, #12]
 8022790:	2281      	movs	r2, #129	@ 0x81
 8022792:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8022794:	68fb      	ldr	r3, [r7, #12]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802279a:	4618      	mov	r0, r3
 802279c:	f002 fe79 	bl	8025492 <SDMMC_CmdReadSingleBlock>
 80227a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80227a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d012      	beq.n	80227ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80227a8:	68fb      	ldr	r3, [r7, #12]
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	4a0f      	ldr	r2, [pc, #60]	@ (80227ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 80227ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80227b0:	68fb      	ldr	r3, [r7, #12]
 80227b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80227b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80227b6:	431a      	orrs	r2, r3
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	2201      	movs	r2, #1
 80227c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	2200      	movs	r2, #0
 80227c8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80227ca:	2301      	movs	r3, #1
 80227cc:	e00a      	b.n	80227e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80227ce:	68fb      	ldr	r3, [r7, #12]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80227d4:	68fb      	ldr	r3, [r7, #12]
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80227dc:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80227de:	2300      	movs	r3, #0
 80227e0:	e000      	b.n	80227e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80227e2:	2302      	movs	r3, #2
  }
}
 80227e4:	4618      	mov	r0, r3
 80227e6:	3730      	adds	r7, #48	@ 0x30
 80227e8:	46bd      	mov	sp, r7
 80227ea:	bd80      	pop	{r7, pc}
 80227ec:	1fe00fff 	.word	0x1fe00fff

080227f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b08c      	sub	sp, #48	@ 0x30
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	60f8      	str	r0, [r7, #12]
 80227f8:	60b9      	str	r1, [r7, #8]
 80227fa:	607a      	str	r2, [r7, #4]
 80227fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8022802:	68bb      	ldr	r3, [r7, #8]
 8022804:	2b00      	cmp	r3, #0
 8022806:	d107      	bne.n	8022818 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8022808:	68fb      	ldr	r3, [r7, #12]
 802280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802280c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8022810:	68fb      	ldr	r3, [r7, #12]
 8022812:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022814:	2301      	movs	r3, #1
 8022816:	e08d      	b.n	8022934 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8022818:	68fb      	ldr	r3, [r7, #12]
 802281a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802281e:	b2db      	uxtb	r3, r3
 8022820:	2b01      	cmp	r3, #1
 8022822:	f040 8086 	bne.w	8022932 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022826:	68fb      	ldr	r3, [r7, #12]
 8022828:	2200      	movs	r2, #0
 802282a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 802282c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802282e:	683b      	ldr	r3, [r7, #0]
 8022830:	441a      	add	r2, r3
 8022832:	68fb      	ldr	r3, [r7, #12]
 8022834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022836:	429a      	cmp	r2, r3
 8022838:	d907      	bls.n	802284a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 802283a:	68fb      	ldr	r3, [r7, #12]
 802283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802283e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8022842:	68fb      	ldr	r3, [r7, #12]
 8022844:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8022846:	2301      	movs	r3, #1
 8022848:	e074      	b.n	8022934 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 802284a:	68fb      	ldr	r3, [r7, #12]
 802284c:	2203      	movs	r2, #3
 802284e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8022852:	68fb      	ldr	r3, [r7, #12]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	2200      	movs	r2, #0
 8022858:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 802285a:	68fb      	ldr	r3, [r7, #12]
 802285c:	68ba      	ldr	r2, [r7, #8]
 802285e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022860:	683b      	ldr	r3, [r7, #0]
 8022862:	025a      	lsls	r2, r3, #9
 8022864:	68fb      	ldr	r3, [r7, #12]
 8022866:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022868:	68fb      	ldr	r3, [r7, #12]
 802286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802286c:	2b01      	cmp	r3, #1
 802286e:	d002      	beq.n	8022876 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8022870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022872:	025b      	lsls	r3, r3, #9
 8022874:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8022876:	f04f 33ff 	mov.w	r3, #4294967295
 802287a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 802287c:	683b      	ldr	r3, [r7, #0]
 802287e:	025b      	lsls	r3, r3, #9
 8022880:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8022882:	2390      	movs	r3, #144	@ 0x90
 8022884:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8022886:	2300      	movs	r3, #0
 8022888:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802288a:	2300      	movs	r3, #0
 802288c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 802288e:	2300      	movs	r3, #0
 8022890:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	f107 0210 	add.w	r2, r7, #16
 802289a:	4611      	mov	r1, r2
 802289c:	4618      	mov	r0, r3
 802289e:	f002 fda9 	bl	80253f4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	68da      	ldr	r2, [r3, #12]
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80228b0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	681b      	ldr	r3, [r3, #0]
 80228b6:	68ba      	ldr	r2, [r7, #8]
 80228b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	2201      	movs	r2, #1
 80228c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	2b01      	cmp	r3, #1
 80228c6:	d90a      	bls.n	80228de <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80228c8:	68fb      	ldr	r3, [r7, #12]
 80228ca:	22a0      	movs	r2, #160	@ 0xa0
 80228cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80228ce:	68fb      	ldr	r3, [r7, #12]
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80228d4:	4618      	mov	r0, r3
 80228d6:	f002 fe45 	bl	8025564 <SDMMC_CmdWriteMultiBlock>
 80228da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80228dc:	e009      	b.n	80228f2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	2290      	movs	r2, #144	@ 0x90
 80228e2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80228e4:	68fb      	ldr	r3, [r7, #12]
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80228ea:	4618      	mov	r0, r3
 80228ec:	f002 fe17 	bl	802551e <SDMMC_CmdWriteSingleBlock>
 80228f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80228f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d012      	beq.n	802291e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	4a0f      	ldr	r2, [pc, #60]	@ (802293c <HAL_SD_WriteBlocks_DMA+0x14c>)
 80228fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022906:	431a      	orrs	r2, r3
 8022908:	68fb      	ldr	r3, [r7, #12]
 802290a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	2201      	movs	r2, #1
 8022910:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022914:	68fb      	ldr	r3, [r7, #12]
 8022916:	2200      	movs	r2, #0
 8022918:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 802291a:	2301      	movs	r3, #1
 802291c:	e00a      	b.n	8022934 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 802291e:	68fb      	ldr	r3, [r7, #12]
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 802292c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 802292e:	2300      	movs	r3, #0
 8022930:	e000      	b.n	8022934 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8022932:	2302      	movs	r3, #2
  }
}
 8022934:	4618      	mov	r0, r3
 8022936:	3730      	adds	r7, #48	@ 0x30
 8022938:	46bd      	mov	sp, r7
 802293a:	bd80      	pop	{r7, pc}
 802293c:	1fe00fff 	.word	0x1fe00fff

08022940 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8022940:	b580      	push	{r7, lr}
 8022942:	b084      	sub	sp, #16
 8022944:	af00      	add	r7, sp, #0
 8022946:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802294c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	681b      	ldr	r3, [r3, #0]
 8022952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8022958:	2b00      	cmp	r3, #0
 802295a:	d008      	beq.n	802296e <HAL_SD_IRQHandler+0x2e>
 802295c:	68fb      	ldr	r3, [r7, #12]
 802295e:	f003 0308 	and.w	r3, r3, #8
 8022962:	2b00      	cmp	r3, #0
 8022964:	d003      	beq.n	802296e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8022966:	6878      	ldr	r0, [r7, #4]
 8022968:	f001 f926 	bl	8023bb8 <SD_Read_IT>
 802296c:	e19a      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022978:	2b00      	cmp	r3, #0
 802297a:	f000 80ac 	beq.w	8022ad6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022986:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	681a      	ldr	r2, [r3, #0]
 8022992:	4b59      	ldr	r3, [pc, #356]	@ (8022af8 <HAL_SD_IRQHandler+0x1b8>)
 8022994:	400b      	ands	r3, r1
 8022996:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	681b      	ldr	r3, [r3, #0]
 80229a2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80229a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	681b      	ldr	r3, [r3, #0]
 80229ac:	68da      	ldr	r2, [r3, #12]
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	681b      	ldr	r3, [r3, #0]
 80229b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80229b6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	f003 0308 	and.w	r3, r3, #8
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d038      	beq.n	8022a34 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80229c2:	68fb      	ldr	r3, [r7, #12]
 80229c4:	f003 0302 	and.w	r3, r3, #2
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	d104      	bne.n	80229d6 <HAL_SD_IRQHandler+0x96>
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	f003 0320 	and.w	r3, r3, #32
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d011      	beq.n	80229fa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	4618      	mov	r0, r3
 80229dc:	f002 fde6 	bl	80255ac <SDMMC_CmdStopTransfer>
 80229e0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80229e2:	68bb      	ldr	r3, [r7, #8]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d008      	beq.n	80229fa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80229ec:	68bb      	ldr	r3, [r7, #8]
 80229ee:	431a      	orrs	r2, r3
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80229f4:	6878      	ldr	r0, [r7, #4]
 80229f6:	f000 f95b 	bl	8022cb0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	4a3f      	ldr	r2, [pc, #252]	@ (8022afc <HAL_SD_IRQHandler+0x1bc>)
 8022a00:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	2201      	movs	r2, #1
 8022a06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8022a10:	68fb      	ldr	r3, [r7, #12]
 8022a12:	f003 0301 	and.w	r3, r3, #1
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	d104      	bne.n	8022a24 <HAL_SD_IRQHandler+0xe4>
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	f003 0302 	and.w	r3, r3, #2
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d003      	beq.n	8022a2c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8022a24:	6878      	ldr	r0, [r7, #4]
 8022a26:	f003 fa73 	bl	8025f10 <HAL_SD_RxCpltCallback>
 8022a2a:	e13b      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8022a2c:	6878      	ldr	r0, [r7, #4]
 8022a2e:	f003 fa65 	bl	8025efc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8022a32:	e137      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022a34:	68fb      	ldr	r3, [r7, #12]
 8022a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	f000 8132 	beq.w	8022ca4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	2200      	movs	r2, #0
 8022a46:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	2200      	movs	r2, #0
 8022a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	2200      	movs	r2, #0
 8022a56:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022a58:	68fb      	ldr	r3, [r7, #12]
 8022a5a:	f003 0302 	and.w	r3, r3, #2
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d104      	bne.n	8022a6c <HAL_SD_IRQHandler+0x12c>
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	f003 0320 	and.w	r3, r3, #32
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	d011      	beq.n	8022a90 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	4618      	mov	r0, r3
 8022a72:	f002 fd9b 	bl	80255ac <SDMMC_CmdStopTransfer>
 8022a76:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8022a78:	68bb      	ldr	r3, [r7, #8]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d008      	beq.n	8022a90 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8022a7e:	687b      	ldr	r3, [r7, #4]
 8022a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022a82:	68bb      	ldr	r3, [r7, #8]
 8022a84:	431a      	orrs	r2, r3
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8022a8a:	6878      	ldr	r0, [r7, #4]
 8022a8c:	f000 f910 	bl	8022cb0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	2201      	movs	r2, #1
 8022a94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	f003 0310 	and.w	r3, r3, #16
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d104      	bne.n	8022ab2 <HAL_SD_IRQHandler+0x172>
 8022aa8:	68fb      	ldr	r3, [r7, #12]
 8022aaa:	f003 0320 	and.w	r3, r3, #32
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d002      	beq.n	8022ab8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8022ab2:	6878      	ldr	r0, [r7, #4]
 8022ab4:	f003 fa22 	bl	8025efc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8022ab8:	68fb      	ldr	r3, [r7, #12]
 8022aba:	f003 0301 	and.w	r3, r3, #1
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d105      	bne.n	8022ace <HAL_SD_IRQHandler+0x18e>
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	f003 0302 	and.w	r3, r3, #2
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	f000 80eb 	beq.w	8022ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8022ace:	6878      	ldr	r0, [r7, #4]
 8022ad0:	f003 fa1e 	bl	8025f10 <HAL_SD_RxCpltCallback>
}
 8022ad4:	e0e6      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8022ad6:	687b      	ldr	r3, [r7, #4]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d00d      	beq.n	8022b00 <HAL_SD_IRQHandler+0x1c0>
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	f003 0308 	and.w	r3, r3, #8
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d008      	beq.n	8022b00 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8022aee:	6878      	ldr	r0, [r7, #4]
 8022af0:	f001 f8a8 	bl	8023c44 <SD_Write_IT>
 8022af4:	e0d6      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
 8022af6:	bf00      	nop
 8022af8:	ffff3ec5 	.word	0xffff3ec5
 8022afc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	681b      	ldr	r3, [r3, #0]
 8022b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b06:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	f000 809d 	beq.w	8022c4a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	681b      	ldr	r3, [r3, #0]
 8022b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b16:	f003 0302 	and.w	r3, r3, #2
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d005      	beq.n	8022b2a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8022b1e:	687b      	ldr	r3, [r7, #4]
 8022b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b22:	f043 0202 	orr.w	r2, r3, #2
 8022b26:	687b      	ldr	r3, [r7, #4]
 8022b28:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b30:	f003 0308 	and.w	r3, r3, #8
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	d005      	beq.n	8022b44 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b3c:	f043 0208 	orr.w	r2, r3, #8
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b4a:	f003 0320 	and.w	r3, r3, #32
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d005      	beq.n	8022b5e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b56:	f043 0220 	orr.w	r2, r3, #32
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8022b5e:	687b      	ldr	r3, [r7, #4]
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b64:	f003 0310 	and.w	r3, r3, #16
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d005      	beq.n	8022b78 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b70:	f043 0210 	orr.w	r2, r3, #16
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8022cac <HAL_SD_IRQHandler+0x36c>)
 8022b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	681b      	ldr	r3, [r3, #0]
 8022b8a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8022b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	681b      	ldr	r3, [r3, #0]
 8022b94:	68da      	ldr	r2, [r3, #12]
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022b9e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	681b      	ldr	r3, [r3, #0]
 8022ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	681b      	ldr	r3, [r3, #0]
 8022baa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8022bae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	68da      	ldr	r2, [r3, #12]
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8022bbe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	4618      	mov	r0, r3
 8022bc6:	f002 fcf1 	bl	80255ac <SDMMC_CmdStopTransfer>
 8022bca:	4602      	mov	r2, r0
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bd0:	431a      	orrs	r2, r3
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	68da      	ldr	r2, [r3, #12]
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	681b      	ldr	r3, [r3, #0]
 8022be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022be4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	681b      	ldr	r3, [r3, #0]
 8022bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022bee:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	f003 0308 	and.w	r3, r3, #8
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d00a      	beq.n	8022c10 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	2201      	movs	r2, #1
 8022bfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	2200      	movs	r2, #0
 8022c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8022c08:	6878      	ldr	r0, [r7, #4]
 8022c0a:	f000 f851 	bl	8022cb0 <HAL_SD_ErrorCallback>
}
 8022c0e:	e049      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	d044      	beq.n	8022ca4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d040      	beq.n	8022ca4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8022c30:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022c32:	687b      	ldr	r3, [r7, #4]
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	2200      	movs	r2, #0
 8022c38:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	2201      	movs	r2, #1
 8022c3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8022c42:	6878      	ldr	r0, [r7, #4]
 8022c44:	f000 f834 	bl	8022cb0 <HAL_SD_ErrorCallback>
}
 8022c48:	e02c      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d025      	beq.n	8022ca4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	681b      	ldr	r3, [r3, #0]
 8022c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022c60:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	681b      	ldr	r3, [r3, #0]
 8022c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022c68:	f003 0304 	and.w	r3, r3, #4
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d10c      	bne.n	8022c8a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022c70:	68fb      	ldr	r3, [r7, #12]
 8022c72:	f003 0320 	and.w	r3, r3, #32
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	d003      	beq.n	8022c82 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8022c7a:	6878      	ldr	r0, [r7, #4]
 8022c7c:	f001 f84a 	bl	8023d14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8022c80:	e010      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8022c82:	6878      	ldr	r0, [r7, #4]
 8022c84:	f001 f832 	bl	8023cec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8022c88:	e00c      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022c8a:	68fb      	ldr	r3, [r7, #12]
 8022c8c:	f003 0320 	and.w	r3, r3, #32
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d003      	beq.n	8022c9c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8022c94:	6878      	ldr	r0, [r7, #4]
 8022c96:	f001 f833 	bl	8023d00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8022c9a:	e003      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8022c9c:	6878      	ldr	r0, [r7, #4]
 8022c9e:	f001 f81b 	bl	8023cd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8022ca2:	e7ff      	b.n	8022ca4 <HAL_SD_IRQHandler+0x364>
 8022ca4:	bf00      	nop
 8022ca6:	3710      	adds	r7, #16
 8022ca8:	46bd      	mov	sp, r7
 8022caa:	bd80      	pop	{r7, pc}
 8022cac:	18000f3a 	.word	0x18000f3a

08022cb0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8022cb0:	b480      	push	{r7}
 8022cb2:	b083      	sub	sp, #12
 8022cb4:	af00      	add	r7, sp, #0
 8022cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8022cb8:	bf00      	nop
 8022cba:	370c      	adds	r7, #12
 8022cbc:	46bd      	mov	sp, r7
 8022cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cc2:	4770      	bx	lr

08022cc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8022cc4:	b480      	push	{r7}
 8022cc6:	b083      	sub	sp, #12
 8022cc8:	af00      	add	r7, sp, #0
 8022cca:	6078      	str	r0, [r7, #4]
 8022ccc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022cd2:	0f9b      	lsrs	r3, r3, #30
 8022cd4:	b2da      	uxtb	r2, r3
 8022cd6:	683b      	ldr	r3, [r7, #0]
 8022cd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022cde:	0e9b      	lsrs	r3, r3, #26
 8022ce0:	b2db      	uxtb	r3, r3
 8022ce2:	f003 030f 	and.w	r3, r3, #15
 8022ce6:	b2da      	uxtb	r2, r3
 8022ce8:	683b      	ldr	r3, [r7, #0]
 8022cea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022cf0:	0e1b      	lsrs	r3, r3, #24
 8022cf2:	b2db      	uxtb	r3, r3
 8022cf4:	f003 0303 	and.w	r3, r3, #3
 8022cf8:	b2da      	uxtb	r2, r3
 8022cfa:	683b      	ldr	r3, [r7, #0]
 8022cfc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8022cfe:	687b      	ldr	r3, [r7, #4]
 8022d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d02:	0c1b      	lsrs	r3, r3, #16
 8022d04:	b2da      	uxtb	r2, r3
 8022d06:	683b      	ldr	r3, [r7, #0]
 8022d08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d0e:	0a1b      	lsrs	r3, r3, #8
 8022d10:	b2da      	uxtb	r2, r3
 8022d12:	683b      	ldr	r3, [r7, #0]
 8022d14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8022d16:	687b      	ldr	r3, [r7, #4]
 8022d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d1a:	b2da      	uxtb	r2, r3
 8022d1c:	683b      	ldr	r3, [r7, #0]
 8022d1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d24:	0d1b      	lsrs	r3, r3, #20
 8022d26:	b29a      	uxth	r2, r3
 8022d28:	683b      	ldr	r3, [r7, #0]
 8022d2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d30:	0c1b      	lsrs	r3, r3, #16
 8022d32:	b2db      	uxtb	r3, r3
 8022d34:	f003 030f 	and.w	r3, r3, #15
 8022d38:	b2da      	uxtb	r2, r3
 8022d3a:	683b      	ldr	r3, [r7, #0]
 8022d3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d42:	0bdb      	lsrs	r3, r3, #15
 8022d44:	b2db      	uxtb	r3, r3
 8022d46:	f003 0301 	and.w	r3, r3, #1
 8022d4a:	b2da      	uxtb	r2, r3
 8022d4c:	683b      	ldr	r3, [r7, #0]
 8022d4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d54:	0b9b      	lsrs	r3, r3, #14
 8022d56:	b2db      	uxtb	r3, r3
 8022d58:	f003 0301 	and.w	r3, r3, #1
 8022d5c:	b2da      	uxtb	r2, r3
 8022d5e:	683b      	ldr	r3, [r7, #0]
 8022d60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d66:	0b5b      	lsrs	r3, r3, #13
 8022d68:	b2db      	uxtb	r3, r3
 8022d6a:	f003 0301 	and.w	r3, r3, #1
 8022d6e:	b2da      	uxtb	r2, r3
 8022d70:	683b      	ldr	r3, [r7, #0]
 8022d72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d78:	0b1b      	lsrs	r3, r3, #12
 8022d7a:	b2db      	uxtb	r3, r3
 8022d7c:	f003 0301 	and.w	r3, r3, #1
 8022d80:	b2da      	uxtb	r2, r3
 8022d82:	683b      	ldr	r3, [r7, #0]
 8022d84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8022d86:	683b      	ldr	r3, [r7, #0]
 8022d88:	2200      	movs	r2, #0
 8022d8a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	d163      	bne.n	8022e5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d98:	009a      	lsls	r2, r3, #2
 8022d9a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8022d9e:	4013      	ands	r3, r2
 8022da0:	687a      	ldr	r2, [r7, #4]
 8022da2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8022da4:	0f92      	lsrs	r2, r2, #30
 8022da6:	431a      	orrs	r2, r3
 8022da8:	683b      	ldr	r3, [r7, #0]
 8022daa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022db0:	0edb      	lsrs	r3, r3, #27
 8022db2:	b2db      	uxtb	r3, r3
 8022db4:	f003 0307 	and.w	r3, r3, #7
 8022db8:	b2da      	uxtb	r2, r3
 8022dba:	683b      	ldr	r3, [r7, #0]
 8022dbc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022dc2:	0e1b      	lsrs	r3, r3, #24
 8022dc4:	b2db      	uxtb	r3, r3
 8022dc6:	f003 0307 	and.w	r3, r3, #7
 8022dca:	b2da      	uxtb	r2, r3
 8022dcc:	683b      	ldr	r3, [r7, #0]
 8022dce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022dd4:	0d5b      	lsrs	r3, r3, #21
 8022dd6:	b2db      	uxtb	r3, r3
 8022dd8:	f003 0307 	and.w	r3, r3, #7
 8022ddc:	b2da      	uxtb	r2, r3
 8022dde:	683b      	ldr	r3, [r7, #0]
 8022de0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8022de2:	687b      	ldr	r3, [r7, #4]
 8022de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022de6:	0c9b      	lsrs	r3, r3, #18
 8022de8:	b2db      	uxtb	r3, r3
 8022dea:	f003 0307 	and.w	r3, r3, #7
 8022dee:	b2da      	uxtb	r2, r3
 8022df0:	683b      	ldr	r3, [r7, #0]
 8022df2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022df8:	0bdb      	lsrs	r3, r3, #15
 8022dfa:	b2db      	uxtb	r3, r3
 8022dfc:	f003 0307 	and.w	r3, r3, #7
 8022e00:	b2da      	uxtb	r2, r3
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8022e06:	683b      	ldr	r3, [r7, #0]
 8022e08:	691b      	ldr	r3, [r3, #16]
 8022e0a:	1c5a      	adds	r2, r3, #1
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8022e10:	683b      	ldr	r3, [r7, #0]
 8022e12:	7e1b      	ldrb	r3, [r3, #24]
 8022e14:	b2db      	uxtb	r3, r3
 8022e16:	f003 0307 	and.w	r3, r3, #7
 8022e1a:	3302      	adds	r3, #2
 8022e1c:	2201      	movs	r2, #1
 8022e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8022e22:	687a      	ldr	r2, [r7, #4]
 8022e24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022e26:	fb03 f202 	mul.w	r2, r3, r2
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8022e2e:	683b      	ldr	r3, [r7, #0]
 8022e30:	7a1b      	ldrb	r3, [r3, #8]
 8022e32:	b2db      	uxtb	r3, r3
 8022e34:	f003 030f 	and.w	r3, r3, #15
 8022e38:	2201      	movs	r2, #1
 8022e3a:	409a      	lsls	r2, r3
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022e44:	687a      	ldr	r2, [r7, #4]
 8022e46:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8022e48:	0a52      	lsrs	r2, r2, #9
 8022e4a:	fb03 f202 	mul.w	r2, r3, r2
 8022e4e:	687b      	ldr	r3, [r7, #4]
 8022e50:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8022e52:	687b      	ldr	r3, [r7, #4]
 8022e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022e58:	655a      	str	r2, [r3, #84]	@ 0x54
 8022e5a:	e031      	b.n	8022ec0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e60:	2b01      	cmp	r3, #1
 8022e62:	d11d      	bne.n	8022ea0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022e68:	041b      	lsls	r3, r3, #16
 8022e6a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e72:	0c1b      	lsrs	r3, r3, #16
 8022e74:	431a      	orrs	r2, r3
 8022e76:	683b      	ldr	r3, [r7, #0]
 8022e78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8022e7a:	683b      	ldr	r3, [r7, #0]
 8022e7c:	691b      	ldr	r3, [r3, #16]
 8022e7e:	3301      	adds	r3, #1
 8022e80:	029a      	lsls	r2, r3, #10
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022e94:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8022e9e:	e00f      	b.n	8022ec0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	4a58      	ldr	r2, [pc, #352]	@ (8023008 <HAL_SD_GetCardCSD+0x344>)
 8022ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022eac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022eb4:	687b      	ldr	r3, [r7, #4]
 8022eb6:	2201      	movs	r2, #1
 8022eb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8022ebc:	2301      	movs	r3, #1
 8022ebe:	e09d      	b.n	8022ffc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ec4:	0b9b      	lsrs	r3, r3, #14
 8022ec6:	b2db      	uxtb	r3, r3
 8022ec8:	f003 0301 	and.w	r3, r3, #1
 8022ecc:	b2da      	uxtb	r2, r3
 8022ece:	683b      	ldr	r3, [r7, #0]
 8022ed0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ed6:	09db      	lsrs	r3, r3, #7
 8022ed8:	b2db      	uxtb	r3, r3
 8022eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022ede:	b2da      	uxtb	r2, r3
 8022ee0:	683b      	ldr	r3, [r7, #0]
 8022ee2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ee8:	b2db      	uxtb	r3, r3
 8022eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022eee:	b2da      	uxtb	r2, r3
 8022ef0:	683b      	ldr	r3, [r7, #0]
 8022ef2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022ef8:	0fdb      	lsrs	r3, r3, #31
 8022efa:	b2da      	uxtb	r2, r3
 8022efc:	683b      	ldr	r3, [r7, #0]
 8022efe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f04:	0f5b      	lsrs	r3, r3, #29
 8022f06:	b2db      	uxtb	r3, r3
 8022f08:	f003 0303 	and.w	r3, r3, #3
 8022f0c:	b2da      	uxtb	r2, r3
 8022f0e:	683b      	ldr	r3, [r7, #0]
 8022f10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f16:	0e9b      	lsrs	r3, r3, #26
 8022f18:	b2db      	uxtb	r3, r3
 8022f1a:	f003 0307 	and.w	r3, r3, #7
 8022f1e:	b2da      	uxtb	r2, r3
 8022f20:	683b      	ldr	r3, [r7, #0]
 8022f22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f28:	0d9b      	lsrs	r3, r3, #22
 8022f2a:	b2db      	uxtb	r3, r3
 8022f2c:	f003 030f 	and.w	r3, r3, #15
 8022f30:	b2da      	uxtb	r2, r3
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f3a:	0d5b      	lsrs	r3, r3, #21
 8022f3c:	b2db      	uxtb	r3, r3
 8022f3e:	f003 0301 	and.w	r3, r3, #1
 8022f42:	b2da      	uxtb	r2, r3
 8022f44:	683b      	ldr	r3, [r7, #0]
 8022f46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8022f4a:	683b      	ldr	r3, [r7, #0]
 8022f4c:	2200      	movs	r2, #0
 8022f4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f56:	0c1b      	lsrs	r3, r3, #16
 8022f58:	b2db      	uxtb	r3, r3
 8022f5a:	f003 0301 	and.w	r3, r3, #1
 8022f5e:	b2da      	uxtb	r2, r3
 8022f60:	683b      	ldr	r3, [r7, #0]
 8022f62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f6a:	0bdb      	lsrs	r3, r3, #15
 8022f6c:	b2db      	uxtb	r3, r3
 8022f6e:	f003 0301 	and.w	r3, r3, #1
 8022f72:	b2da      	uxtb	r2, r3
 8022f74:	683b      	ldr	r3, [r7, #0]
 8022f76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f7e:	0b9b      	lsrs	r3, r3, #14
 8022f80:	b2db      	uxtb	r3, r3
 8022f82:	f003 0301 	and.w	r3, r3, #1
 8022f86:	b2da      	uxtb	r2, r3
 8022f88:	683b      	ldr	r3, [r7, #0]
 8022f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f92:	0b5b      	lsrs	r3, r3, #13
 8022f94:	b2db      	uxtb	r3, r3
 8022f96:	f003 0301 	and.w	r3, r3, #1
 8022f9a:	b2da      	uxtb	r2, r3
 8022f9c:	683b      	ldr	r3, [r7, #0]
 8022f9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fa6:	0b1b      	lsrs	r3, r3, #12
 8022fa8:	b2db      	uxtb	r3, r3
 8022faa:	f003 0301 	and.w	r3, r3, #1
 8022fae:	b2da      	uxtb	r2, r3
 8022fb0:	683b      	ldr	r3, [r7, #0]
 8022fb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fba:	0a9b      	lsrs	r3, r3, #10
 8022fbc:	b2db      	uxtb	r3, r3
 8022fbe:	f003 0303 	and.w	r3, r3, #3
 8022fc2:	b2da      	uxtb	r2, r3
 8022fc4:	683b      	ldr	r3, [r7, #0]
 8022fc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fce:	0a1b      	lsrs	r3, r3, #8
 8022fd0:	b2db      	uxtb	r3, r3
 8022fd2:	f003 0303 	and.w	r3, r3, #3
 8022fd6:	b2da      	uxtb	r2, r3
 8022fd8:	683b      	ldr	r3, [r7, #0]
 8022fda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fe2:	085b      	lsrs	r3, r3, #1
 8022fe4:	b2db      	uxtb	r3, r3
 8022fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022fea:	b2da      	uxtb	r2, r3
 8022fec:	683b      	ldr	r3, [r7, #0]
 8022fee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8022ff2:	683b      	ldr	r3, [r7, #0]
 8022ff4:	2201      	movs	r2, #1
 8022ff6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8022ffa:	2300      	movs	r3, #0
}
 8022ffc:	4618      	mov	r0, r3
 8022ffe:	370c      	adds	r7, #12
 8023000:	46bd      	mov	sp, r7
 8023002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023006:	4770      	bx	lr
 8023008:	1fe00fff 	.word	0x1fe00fff

0802300c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 802300c:	b580      	push	{r7, lr}
 802300e:	b094      	sub	sp, #80	@ 0x50
 8023010:	af00      	add	r7, sp, #0
 8023012:	6078      	str	r0, [r7, #4]
 8023014:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8023016:	2300      	movs	r3, #0
 8023018:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8023022:	b2db      	uxtb	r3, r3
 8023024:	2b03      	cmp	r3, #3
 8023026:	d101      	bne.n	802302c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8023028:	2301      	movs	r3, #1
 802302a:	e0a7      	b.n	802317c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 802302c:	f107 0308 	add.w	r3, r7, #8
 8023030:	4619      	mov	r1, r3
 8023032:	6878      	ldr	r0, [r7, #4]
 8023034:	f000 fb62 	bl	80236fc <SD_SendSDStatus>
 8023038:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 802303a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802303c:	2b00      	cmp	r3, #0
 802303e:	d011      	beq.n	8023064 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	4a4f      	ldr	r2, [pc, #316]	@ (8023184 <HAL_SD_GetCardStatus+0x178>)
 8023046:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802304c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802304e:	431a      	orrs	r2, r3
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	2201      	movs	r2, #1
 8023058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 802305c:	2301      	movs	r3, #1
 802305e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8023062:	e070      	b.n	8023146 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8023064:	68bb      	ldr	r3, [r7, #8]
 8023066:	099b      	lsrs	r3, r3, #6
 8023068:	b2db      	uxtb	r3, r3
 802306a:	f003 0303 	and.w	r3, r3, #3
 802306e:	b2da      	uxtb	r2, r3
 8023070:	683b      	ldr	r3, [r7, #0]
 8023072:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8023074:	68bb      	ldr	r3, [r7, #8]
 8023076:	095b      	lsrs	r3, r3, #5
 8023078:	b2db      	uxtb	r3, r3
 802307a:	f003 0301 	and.w	r3, r3, #1
 802307e:	b2da      	uxtb	r2, r3
 8023080:	683b      	ldr	r3, [r7, #0]
 8023082:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8023084:	68bb      	ldr	r3, [r7, #8]
 8023086:	0a1b      	lsrs	r3, r3, #8
 8023088:	b29b      	uxth	r3, r3
 802308a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802308e:	b29a      	uxth	r2, r3
 8023090:	68bb      	ldr	r3, [r7, #8]
 8023092:	0e1b      	lsrs	r3, r3, #24
 8023094:	b29b      	uxth	r3, r3
 8023096:	4313      	orrs	r3, r2
 8023098:	b29a      	uxth	r2, r3
 802309a:	683b      	ldr	r3, [r7, #0]
 802309c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 802309e:	68fb      	ldr	r3, [r7, #12]
 80230a0:	061a      	lsls	r2, r3, #24
 80230a2:	68fb      	ldr	r3, [r7, #12]
 80230a4:	021b      	lsls	r3, r3, #8
 80230a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80230aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80230ac:	68fb      	ldr	r3, [r7, #12]
 80230ae:	0a1b      	lsrs	r3, r3, #8
 80230b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80230b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80230b6:	68fb      	ldr	r3, [r7, #12]
 80230b8:	0e1b      	lsrs	r3, r3, #24
 80230ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80230bc:	683b      	ldr	r3, [r7, #0]
 80230be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80230c0:	693b      	ldr	r3, [r7, #16]
 80230c2:	b2da      	uxtb	r2, r3
 80230c4:	683b      	ldr	r3, [r7, #0]
 80230c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80230c8:	693b      	ldr	r3, [r7, #16]
 80230ca:	0a1b      	lsrs	r3, r3, #8
 80230cc:	b2da      	uxtb	r2, r3
 80230ce:	683b      	ldr	r3, [r7, #0]
 80230d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80230d2:	693b      	ldr	r3, [r7, #16]
 80230d4:	0d1b      	lsrs	r3, r3, #20
 80230d6:	b2db      	uxtb	r3, r3
 80230d8:	f003 030f 	and.w	r3, r3, #15
 80230dc:	b2da      	uxtb	r2, r3
 80230de:	683b      	ldr	r3, [r7, #0]
 80230e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80230e2:	693b      	ldr	r3, [r7, #16]
 80230e4:	0c1b      	lsrs	r3, r3, #16
 80230e6:	b29b      	uxth	r3, r3
 80230e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80230ec:	b29a      	uxth	r2, r3
 80230ee:	697b      	ldr	r3, [r7, #20]
 80230f0:	b29b      	uxth	r3, r3
 80230f2:	b2db      	uxtb	r3, r3
 80230f4:	b29b      	uxth	r3, r3
 80230f6:	4313      	orrs	r3, r2
 80230f8:	b29a      	uxth	r2, r3
 80230fa:	683b      	ldr	r3, [r7, #0]
 80230fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80230fe:	697b      	ldr	r3, [r7, #20]
 8023100:	0a9b      	lsrs	r3, r3, #10
 8023102:	b2db      	uxtb	r3, r3
 8023104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023108:	b2da      	uxtb	r2, r3
 802310a:	683b      	ldr	r3, [r7, #0]
 802310c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 802310e:	697b      	ldr	r3, [r7, #20]
 8023110:	0a1b      	lsrs	r3, r3, #8
 8023112:	b2db      	uxtb	r3, r3
 8023114:	f003 0303 	and.w	r3, r3, #3
 8023118:	b2da      	uxtb	r2, r3
 802311a:	683b      	ldr	r3, [r7, #0]
 802311c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 802311e:	697b      	ldr	r3, [r7, #20]
 8023120:	091b      	lsrs	r3, r3, #4
 8023122:	b2db      	uxtb	r3, r3
 8023124:	f003 030f 	and.w	r3, r3, #15
 8023128:	b2da      	uxtb	r2, r3
 802312a:	683b      	ldr	r3, [r7, #0]
 802312c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 802312e:	697b      	ldr	r3, [r7, #20]
 8023130:	b2db      	uxtb	r3, r3
 8023132:	f003 030f 	and.w	r3, r3, #15
 8023136:	b2da      	uxtb	r2, r3
 8023138:	683b      	ldr	r3, [r7, #0]
 802313a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 802313c:	69bb      	ldr	r3, [r7, #24]
 802313e:	0e1b      	lsrs	r3, r3, #24
 8023140:	b2da      	uxtb	r2, r3
 8023142:	683b      	ldr	r3, [r7, #0]
 8023144:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	681b      	ldr	r3, [r3, #0]
 802314a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802314e:	4618      	mov	r0, r3
 8023150:	f002 f97c 	bl	802544c <SDMMC_CmdBlockLength>
 8023154:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8023156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023158:	2b00      	cmp	r3, #0
 802315a:	d00d      	beq.n	8023178 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a08      	ldr	r2, [pc, #32]	@ (8023184 <HAL_SD_GetCardStatus+0x178>)
 8023162:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023168:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 802316a:	687b      	ldr	r3, [r7, #4]
 802316c:	2201      	movs	r2, #1
 802316e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8023172:	2301      	movs	r3, #1
 8023174:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8023178:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 802317c:	4618      	mov	r0, r3
 802317e:	3750      	adds	r7, #80	@ 0x50
 8023180:	46bd      	mov	sp, r7
 8023182:	bd80      	pop	{r7, pc}
 8023184:	1fe00fff 	.word	0x1fe00fff

08023188 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8023188:	b480      	push	{r7}
 802318a:	b083      	sub	sp, #12
 802318c:	af00      	add	r7, sp, #0
 802318e:	6078      	str	r0, [r7, #4]
 8023190:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023196:	683b      	ldr	r3, [r7, #0]
 8023198:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802319e:	683b      	ldr	r3, [r7, #0]
 80231a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80231a6:	683b      	ldr	r3, [r7, #0]
 80231a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80231ae:	683b      	ldr	r3, [r7, #0]
 80231b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80231b6:	683b      	ldr	r3, [r7, #0]
 80231b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80231be:	683b      	ldr	r3, [r7, #0]
 80231c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80231c6:	683b      	ldr	r3, [r7, #0]
 80231c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80231ce:	683b      	ldr	r3, [r7, #0]
 80231d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80231d2:	2300      	movs	r3, #0
}
 80231d4:	4618      	mov	r0, r3
 80231d6:	370c      	adds	r7, #12
 80231d8:	46bd      	mov	sp, r7
 80231da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231de:	4770      	bx	lr

080231e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80231e0:	b590      	push	{r4, r7, lr}
 80231e2:	b08d      	sub	sp, #52	@ 0x34
 80231e4:	af02      	add	r7, sp, #8
 80231e6:	6078      	str	r0, [r7, #4]
 80231e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80231ea:	2300      	movs	r3, #0
 80231ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	2203      	movs	r2, #3
 80231f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80231fc:	2b03      	cmp	r3, #3
 80231fe:	d02e      	beq.n	802325e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8023200:	683b      	ldr	r3, [r7, #0]
 8023202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023206:	d106      	bne.n	8023216 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802320c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	635a      	str	r2, [r3, #52]	@ 0x34
 8023214:	e029      	b.n	802326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8023216:	683b      	ldr	r3, [r7, #0]
 8023218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802321c:	d10a      	bne.n	8023234 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 802321e:	6878      	ldr	r0, [r7, #4]
 8023220:	f000 fb64 	bl	80238ec <SD_WideBus_Enable>
 8023224:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802322a:	6a3b      	ldr	r3, [r7, #32]
 802322c:	431a      	orrs	r2, r3
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	635a      	str	r2, [r3, #52]	@ 0x34
 8023232:	e01a      	b.n	802326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8023234:	683b      	ldr	r3, [r7, #0]
 8023236:	2b00      	cmp	r3, #0
 8023238:	d10a      	bne.n	8023250 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 802323a:	6878      	ldr	r0, [r7, #4]
 802323c:	f000 fba1 	bl	8023982 <SD_WideBus_Disable>
 8023240:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023246:	6a3b      	ldr	r3, [r7, #32]
 8023248:	431a      	orrs	r2, r3
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	635a      	str	r2, [r3, #52]	@ 0x34
 802324e:	e00c      	b.n	802326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023254:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	635a      	str	r2, [r3, #52]	@ 0x34
 802325c:	e005      	b.n	802326a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023262:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802326e:	2b00      	cmp	r3, #0
 8023270:	d007      	beq.n	8023282 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	681b      	ldr	r3, [r3, #0]
 8023276:	4a5f      	ldr	r2, [pc, #380]	@ (80233f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8023278:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 802327a:	2301      	movs	r3, #1
 802327c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023280:	e096      	b.n	80233b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8023282:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8023286:	f04f 0100 	mov.w	r1, #0
 802328a:	f7fd fdf5 	bl	8020e78 <HAL_RCCEx_GetPeriphCLKFreq>
 802328e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8023290:	69fb      	ldr	r3, [r7, #28]
 8023292:	2b00      	cmp	r3, #0
 8023294:	f000 8083 	beq.w	802339e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	685b      	ldr	r3, [r3, #4]
 802329c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	689b      	ldr	r3, [r3, #8]
 80232a2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80232a4:	683b      	ldr	r3, [r7, #0]
 80232a6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	691b      	ldr	r3, [r3, #16]
 80232ac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	695a      	ldr	r2, [r3, #20]
 80232b2:	69fb      	ldr	r3, [r7, #28]
 80232b4:	4950      	ldr	r1, [pc, #320]	@ (80233f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80232b6:	fba1 1303 	umull	r1, r3, r1, r3
 80232ba:	0e1b      	lsrs	r3, r3, #24
 80232bc:	429a      	cmp	r2, r3
 80232be:	d303      	bcc.n	80232c8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80232c0:	687b      	ldr	r3, [r7, #4]
 80232c2:	695b      	ldr	r3, [r3, #20]
 80232c4:	61bb      	str	r3, [r7, #24]
 80232c6:	e05a      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80232cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80232d0:	d103      	bne.n	80232da <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	695b      	ldr	r3, [r3, #20]
 80232d6:	61bb      	str	r3, [r7, #24]
 80232d8:	e051      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80232de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80232e2:	d126      	bne.n	8023332 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	695b      	ldr	r3, [r3, #20]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d10e      	bne.n	802330a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80232ec:	69fb      	ldr	r3, [r7, #28]
 80232ee:	4a43      	ldr	r2, [pc, #268]	@ (80233fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80232f0:	4293      	cmp	r3, r2
 80232f2:	d906      	bls.n	8023302 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80232f4:	69fb      	ldr	r3, [r7, #28]
 80232f6:	4a40      	ldr	r2, [pc, #256]	@ (80233f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80232f8:	fba2 2303 	umull	r2, r3, r2, r3
 80232fc:	0e5b      	lsrs	r3, r3, #25
 80232fe:	61bb      	str	r3, [r7, #24]
 8023300:	e03d      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	695b      	ldr	r3, [r3, #20]
 8023306:	61bb      	str	r3, [r7, #24]
 8023308:	e039      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	695b      	ldr	r3, [r3, #20]
 802330e:	005b      	lsls	r3, r3, #1
 8023310:	69fa      	ldr	r2, [r7, #28]
 8023312:	fbb2 f3f3 	udiv	r3, r2, r3
 8023316:	4a39      	ldr	r2, [pc, #228]	@ (80233fc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023318:	4293      	cmp	r3, r2
 802331a:	d906      	bls.n	802332a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 802331c:	69fb      	ldr	r3, [r7, #28]
 802331e:	4a36      	ldr	r2, [pc, #216]	@ (80233f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023320:	fba2 2303 	umull	r2, r3, r2, r3
 8023324:	0e5b      	lsrs	r3, r3, #25
 8023326:	61bb      	str	r3, [r7, #24]
 8023328:	e029      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	695b      	ldr	r3, [r3, #20]
 802332e:	61bb      	str	r3, [r7, #24]
 8023330:	e025      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	695b      	ldr	r3, [r3, #20]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d10e      	bne.n	8023358 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 802333a:	69fb      	ldr	r3, [r7, #28]
 802333c:	4a30      	ldr	r2, [pc, #192]	@ (8023400 <HAL_SD_ConfigWideBusOperation+0x220>)
 802333e:	4293      	cmp	r3, r2
 8023340:	d906      	bls.n	8023350 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8023342:	69fb      	ldr	r3, [r7, #28]
 8023344:	4a2c      	ldr	r2, [pc, #176]	@ (80233f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023346:	fba2 2303 	umull	r2, r3, r2, r3
 802334a:	0e1b      	lsrs	r3, r3, #24
 802334c:	61bb      	str	r3, [r7, #24]
 802334e:	e016      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023350:	687b      	ldr	r3, [r7, #4]
 8023352:	695b      	ldr	r3, [r3, #20]
 8023354:	61bb      	str	r3, [r7, #24]
 8023356:	e012      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8023358:	687b      	ldr	r3, [r7, #4]
 802335a:	695b      	ldr	r3, [r3, #20]
 802335c:	005b      	lsls	r3, r3, #1
 802335e:	69fa      	ldr	r2, [r7, #28]
 8023360:	fbb2 f3f3 	udiv	r3, r2, r3
 8023364:	4a26      	ldr	r2, [pc, #152]	@ (8023400 <HAL_SD_ConfigWideBusOperation+0x220>)
 8023366:	4293      	cmp	r3, r2
 8023368:	d906      	bls.n	8023378 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 802336a:	69fb      	ldr	r3, [r7, #28]
 802336c:	4a22      	ldr	r2, [pc, #136]	@ (80233f8 <HAL_SD_ConfigWideBusOperation+0x218>)
 802336e:	fba2 2303 	umull	r2, r3, r2, r3
 8023372:	0e1b      	lsrs	r3, r3, #24
 8023374:	61bb      	str	r3, [r7, #24]
 8023376:	e002      	b.n	802337e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	695b      	ldr	r3, [r3, #20]
 802337c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	681c      	ldr	r4, [r3, #0]
 8023382:	466a      	mov	r2, sp
 8023384:	f107 0314 	add.w	r3, r7, #20
 8023388:	e893 0003 	ldmia.w	r3, {r0, r1}
 802338c:	e882 0003 	stmia.w	r2, {r0, r1}
 8023390:	f107 0308 	add.w	r3, r7, #8
 8023394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8023396:	4620      	mov	r0, r4
 8023398:	f001 ff7a 	bl	8025290 <SDMMC_Init>
 802339c:	e008      	b.n	80233b0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 802339e:	687b      	ldr	r3, [r7, #4]
 80233a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80233a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80233a6:	687b      	ldr	r3, [r7, #4]
 80233a8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80233aa:	2301      	movs	r3, #1
 80233ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80233b8:	4618      	mov	r0, r3
 80233ba:	f002 f847 	bl	802544c <SDMMC_CmdBlockLength>
 80233be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80233c0:	6a3b      	ldr	r3, [r7, #32]
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d00c      	beq.n	80233e0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80233c6:	687b      	ldr	r3, [r7, #4]
 80233c8:	681b      	ldr	r3, [r3, #0]
 80233ca:	4a0a      	ldr	r2, [pc, #40]	@ (80233f4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80233cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80233ce:	687b      	ldr	r3, [r7, #4]
 80233d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80233d2:	6a3b      	ldr	r3, [r7, #32]
 80233d4:	431a      	orrs	r2, r3
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80233da:	2301      	movs	r3, #1
 80233dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80233e0:	687b      	ldr	r3, [r7, #4]
 80233e2:	2201      	movs	r2, #1
 80233e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80233e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80233ec:	4618      	mov	r0, r3
 80233ee:	372c      	adds	r7, #44	@ 0x2c
 80233f0:	46bd      	mov	sp, r7
 80233f2:	bd90      	pop	{r4, r7, pc}
 80233f4:	1fe00fff 	.word	0x1fe00fff
 80233f8:	55e63b89 	.word	0x55e63b89
 80233fc:	02faf080 	.word	0x02faf080
 8023400:	017d7840 	.word	0x017d7840

08023404 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8023404:	b580      	push	{r7, lr}
 8023406:	b086      	sub	sp, #24
 8023408:	af00      	add	r7, sp, #0
 802340a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 802340c:	2300      	movs	r3, #0
 802340e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8023410:	f107 030c 	add.w	r3, r7, #12
 8023414:	4619      	mov	r1, r3
 8023416:	6878      	ldr	r0, [r7, #4]
 8023418:	f000 fa40 	bl	802389c <SD_SendStatus>
 802341c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 802341e:	697b      	ldr	r3, [r7, #20]
 8023420:	2b00      	cmp	r3, #0
 8023422:	d005      	beq.n	8023430 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023428:	697b      	ldr	r3, [r7, #20]
 802342a:	431a      	orrs	r2, r3
 802342c:	687b      	ldr	r3, [r7, #4]
 802342e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8023430:	68fb      	ldr	r3, [r7, #12]
 8023432:	0a5b      	lsrs	r3, r3, #9
 8023434:	f003 030f 	and.w	r3, r3, #15
 8023438:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 802343a:	693b      	ldr	r3, [r7, #16]
}
 802343c:	4618      	mov	r0, r3
 802343e:	3718      	adds	r7, #24
 8023440:	46bd      	mov	sp, r7
 8023442:	bd80      	pop	{r7, pc}

08023444 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8023444:	b580      	push	{r7, lr}
 8023446:	b090      	sub	sp, #64	@ 0x40
 8023448:	af00      	add	r7, sp, #0
 802344a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 802344c:	2300      	movs	r3, #0
 802344e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8023450:	f7f8 fbe8 	bl	801bc24 <HAL_GetTick>
 8023454:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8023456:	687b      	ldr	r3, [r7, #4]
 8023458:	681b      	ldr	r3, [r3, #0]
 802345a:	4618      	mov	r0, r3
 802345c:	f001 ff71 	bl	8025342 <SDMMC_GetPowerState>
 8023460:	4603      	mov	r3, r0
 8023462:	2b00      	cmp	r3, #0
 8023464:	d102      	bne.n	802346c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8023466:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802346a:	e0b5      	b.n	80235d8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023470:	2b03      	cmp	r3, #3
 8023472:	d02e      	beq.n	80234d2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	4618      	mov	r0, r3
 802347a:	f002 f9bc 	bl	80257f6 <SDMMC_CmdSendCID>
 802347e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8023480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023482:	2b00      	cmp	r3, #0
 8023484:	d001      	beq.n	802348a <SD_InitCard+0x46>
    {
      return errorstate;
 8023486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023488:	e0a6      	b.n	80235d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	2100      	movs	r1, #0
 8023490:	4618      	mov	r0, r3
 8023492:	f001 ff9c 	bl	80253ce <SDMMC_GetResponse>
 8023496:	4602      	mov	r2, r0
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	2104      	movs	r1, #4
 80234a2:	4618      	mov	r0, r3
 80234a4:	f001 ff93 	bl	80253ce <SDMMC_GetResponse>
 80234a8:	4602      	mov	r2, r0
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	681b      	ldr	r3, [r3, #0]
 80234b2:	2108      	movs	r1, #8
 80234b4:	4618      	mov	r0, r3
 80234b6:	f001 ff8a 	bl	80253ce <SDMMC_GetResponse>
 80234ba:	4602      	mov	r2, r0
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80234c0:	687b      	ldr	r3, [r7, #4]
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	210c      	movs	r1, #12
 80234c6:	4618      	mov	r0, r3
 80234c8:	f001 ff81 	bl	80253ce <SDMMC_GetResponse>
 80234cc:	4602      	mov	r2, r0
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80234d6:	2b03      	cmp	r3, #3
 80234d8:	d01d      	beq.n	8023516 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80234da:	e019      	b.n	8023510 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	f107 020a 	add.w	r2, r7, #10
 80234e4:	4611      	mov	r1, r2
 80234e6:	4618      	mov	r0, r3
 80234e8:	f002 f9c4 	bl	8025874 <SDMMC_CmdSetRelAdd>
 80234ec:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80234ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234f0:	2b00      	cmp	r3, #0
 80234f2:	d001      	beq.n	80234f8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80234f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234f6:	e06f      	b.n	80235d8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80234f8:	f7f8 fb94 	bl	801bc24 <HAL_GetTick>
 80234fc:	4602      	mov	r2, r0
 80234fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023500:	1ad3      	subs	r3, r2, r3
 8023502:	f241 3287 	movw	r2, #4999	@ 0x1387
 8023506:	4293      	cmp	r3, r2
 8023508:	d902      	bls.n	8023510 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 802350a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802350e:	e063      	b.n	80235d8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8023510:	897b      	ldrh	r3, [r7, #10]
 8023512:	2b00      	cmp	r3, #0
 8023514:	d0e2      	beq.n	80234dc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8023516:	687b      	ldr	r3, [r7, #4]
 8023518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802351a:	2b03      	cmp	r3, #3
 802351c:	d036      	beq.n	802358c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 802351e:	897b      	ldrh	r3, [r7, #10]
 8023520:	461a      	mov	r2, r3
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	681a      	ldr	r2, [r3, #0]
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802352e:	041b      	lsls	r3, r3, #16
 8023530:	4619      	mov	r1, r3
 8023532:	4610      	mov	r0, r2
 8023534:	f002 f97e 	bl	8025834 <SDMMC_CmdSendCSD>
 8023538:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 802353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802353c:	2b00      	cmp	r3, #0
 802353e:	d001      	beq.n	8023544 <SD_InitCard+0x100>
    {
      return errorstate;
 8023540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023542:	e049      	b.n	80235d8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	681b      	ldr	r3, [r3, #0]
 8023548:	2100      	movs	r1, #0
 802354a:	4618      	mov	r0, r3
 802354c:	f001 ff3f 	bl	80253ce <SDMMC_GetResponse>
 8023550:	4602      	mov	r2, r0
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	2104      	movs	r1, #4
 802355c:	4618      	mov	r0, r3
 802355e:	f001 ff36 	bl	80253ce <SDMMC_GetResponse>
 8023562:	4602      	mov	r2, r0
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8023568:	687b      	ldr	r3, [r7, #4]
 802356a:	681b      	ldr	r3, [r3, #0]
 802356c:	2108      	movs	r1, #8
 802356e:	4618      	mov	r0, r3
 8023570:	f001 ff2d 	bl	80253ce <SDMMC_GetResponse>
 8023574:	4602      	mov	r2, r0
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	210c      	movs	r1, #12
 8023580:	4618      	mov	r0, r3
 8023582:	f001 ff24 	bl	80253ce <SDMMC_GetResponse>
 8023586:	4602      	mov	r2, r0
 8023588:	687b      	ldr	r3, [r7, #4]
 802358a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	681b      	ldr	r3, [r3, #0]
 8023590:	2104      	movs	r1, #4
 8023592:	4618      	mov	r0, r3
 8023594:	f001 ff1b 	bl	80253ce <SDMMC_GetResponse>
 8023598:	4603      	mov	r3, r0
 802359a:	0d1a      	lsrs	r2, r3, #20
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80235a0:	f107 030c 	add.w	r3, r7, #12
 80235a4:	4619      	mov	r1, r3
 80235a6:	6878      	ldr	r0, [r7, #4]
 80235a8:	f7ff fb8c 	bl	8022cc4 <HAL_SD_GetCardCSD>
 80235ac:	4603      	mov	r3, r0
 80235ae:	2b00      	cmp	r3, #0
 80235b0:	d002      	beq.n	80235b8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80235b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80235b6:	e00f      	b.n	80235d8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	681a      	ldr	r2, [r3, #0]
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80235c0:	041b      	lsls	r3, r3, #16
 80235c2:	4619      	mov	r1, r3
 80235c4:	4610      	mov	r0, r2
 80235c6:	f002 f82d 	bl	8025624 <SDMMC_CmdSelDesel>
 80235ca:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80235cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d001      	beq.n	80235d6 <SD_InitCard+0x192>
  {
    return errorstate;
 80235d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80235d4:	e000      	b.n	80235d8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80235d6:	2300      	movs	r3, #0
}
 80235d8:	4618      	mov	r0, r3
 80235da:	3740      	adds	r7, #64	@ 0x40
 80235dc:	46bd      	mov	sp, r7
 80235de:	bd80      	pop	{r7, pc}

080235e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80235e0:	b580      	push	{r7, lr}
 80235e2:	b086      	sub	sp, #24
 80235e4:	af00      	add	r7, sp, #0
 80235e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80235e8:	2300      	movs	r3, #0
 80235ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80235ec:	2300      	movs	r3, #0
 80235ee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80235f0:	2300      	movs	r3, #0
 80235f2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	681b      	ldr	r3, [r3, #0]
 80235f8:	4618      	mov	r0, r3
 80235fa:	f002 f836 	bl	802566a <SDMMC_CmdGoIdleState>
 80235fe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023600:	68fb      	ldr	r3, [r7, #12]
 8023602:	2b00      	cmp	r3, #0
 8023604:	d001      	beq.n	802360a <SD_PowerON+0x2a>
  {
    return errorstate;
 8023606:	68fb      	ldr	r3, [r7, #12]
 8023608:	e072      	b.n	80236f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	4618      	mov	r0, r3
 8023610:	f002 f849 	bl	80256a6 <SDMMC_CmdOperCond>
 8023614:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 802361c:	d10d      	bne.n	802363a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	2200      	movs	r2, #0
 8023622:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	681b      	ldr	r3, [r3, #0]
 8023628:	4618      	mov	r0, r3
 802362a:	f002 f81e 	bl	802566a <SDMMC_CmdGoIdleState>
 802362e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023630:	68fb      	ldr	r3, [r7, #12]
 8023632:	2b00      	cmp	r3, #0
 8023634:	d004      	beq.n	8023640 <SD_PowerON+0x60>
    {
      return errorstate;
 8023636:	68fb      	ldr	r3, [r7, #12]
 8023638:	e05a      	b.n	80236f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	2201      	movs	r2, #1
 802363e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023644:	2b01      	cmp	r3, #1
 8023646:	d137      	bne.n	80236b8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	2100      	movs	r1, #0
 802364e:	4618      	mov	r0, r3
 8023650:	f002 f849 	bl	80256e6 <SDMMC_CmdAppCommand>
 8023654:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023656:	68fb      	ldr	r3, [r7, #12]
 8023658:	2b00      	cmp	r3, #0
 802365a:	d02d      	beq.n	80236b8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802365c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023660:	e046      	b.n	80236f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	681b      	ldr	r3, [r3, #0]
 8023666:	2100      	movs	r1, #0
 8023668:	4618      	mov	r0, r3
 802366a:	f002 f83c 	bl	80256e6 <SDMMC_CmdAppCommand>
 802366e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023670:	68fb      	ldr	r3, [r7, #12]
 8023672:	2b00      	cmp	r3, #0
 8023674:	d001      	beq.n	802367a <SD_PowerON+0x9a>
    {
      return errorstate;
 8023676:	68fb      	ldr	r3, [r7, #12]
 8023678:	e03a      	b.n	80236f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	491e      	ldr	r1, [pc, #120]	@ (80236f8 <SD_PowerON+0x118>)
 8023680:	4618      	mov	r0, r3
 8023682:	f002 f853 	bl	802572c <SDMMC_CmdAppOperCommand>
 8023686:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8023688:	68fb      	ldr	r3, [r7, #12]
 802368a:	2b00      	cmp	r3, #0
 802368c:	d002      	beq.n	8023694 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802368e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023692:	e02d      	b.n	80236f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	2100      	movs	r1, #0
 802369a:	4618      	mov	r0, r3
 802369c:	f001 fe97 	bl	80253ce <SDMMC_GetResponse>
 80236a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80236a2:	697b      	ldr	r3, [r7, #20]
 80236a4:	0fdb      	lsrs	r3, r3, #31
 80236a6:	2b01      	cmp	r3, #1
 80236a8:	d101      	bne.n	80236ae <SD_PowerON+0xce>
 80236aa:	2301      	movs	r3, #1
 80236ac:	e000      	b.n	80236b0 <SD_PowerON+0xd0>
 80236ae:	2300      	movs	r3, #0
 80236b0:	613b      	str	r3, [r7, #16]

    count++;
 80236b2:	68bb      	ldr	r3, [r7, #8]
 80236b4:	3301      	adds	r3, #1
 80236b6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80236b8:	68bb      	ldr	r3, [r7, #8]
 80236ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80236be:	4293      	cmp	r3, r2
 80236c0:	d802      	bhi.n	80236c8 <SD_PowerON+0xe8>
 80236c2:	693b      	ldr	r3, [r7, #16]
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d0cc      	beq.n	8023662 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80236c8:	68bb      	ldr	r3, [r7, #8]
 80236ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80236ce:	4293      	cmp	r3, r2
 80236d0:	d902      	bls.n	80236d8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80236d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80236d6:	e00b      	b.n	80236f0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	2200      	movs	r2, #0
 80236dc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80236de:	697b      	ldr	r3, [r7, #20]
 80236e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	d002      	beq.n	80236ee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80236e8:	687b      	ldr	r3, [r7, #4]
 80236ea:	2201      	movs	r2, #1
 80236ec:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80236ee:	2300      	movs	r3, #0
}
 80236f0:	4618      	mov	r0, r3
 80236f2:	3718      	adds	r7, #24
 80236f4:	46bd      	mov	sp, r7
 80236f6:	bd80      	pop	{r7, pc}
 80236f8:	c1100000 	.word	0xc1100000

080236fc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80236fc:	b580      	push	{r7, lr}
 80236fe:	b08c      	sub	sp, #48	@ 0x30
 8023700:	af00      	add	r7, sp, #0
 8023702:	6078      	str	r0, [r7, #4]
 8023704:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8023706:	f7f8 fa8d 	bl	801bc24 <HAL_GetTick>
 802370a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 802370c:	683b      	ldr	r3, [r7, #0]
 802370e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	681b      	ldr	r3, [r3, #0]
 8023714:	2100      	movs	r1, #0
 8023716:	4618      	mov	r0, r3
 8023718:	f001 fe59 	bl	80253ce <SDMMC_GetResponse>
 802371c:	4603      	mov	r3, r0
 802371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8023722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023726:	d102      	bne.n	802372e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802372c:	e0b0      	b.n	8023890 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	2140      	movs	r1, #64	@ 0x40
 8023734:	4618      	mov	r0, r3
 8023736:	f001 fe89 	bl	802544c <SDMMC_CmdBlockLength>
 802373a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802373c:	6a3b      	ldr	r3, [r7, #32]
 802373e:	2b00      	cmp	r3, #0
 8023740:	d005      	beq.n	802374e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 802374a:	6a3b      	ldr	r3, [r7, #32]
 802374c:	e0a0      	b.n	8023890 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	681a      	ldr	r2, [r3, #0]
 8023752:	687b      	ldr	r3, [r7, #4]
 8023754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023756:	041b      	lsls	r3, r3, #16
 8023758:	4619      	mov	r1, r3
 802375a:	4610      	mov	r0, r2
 802375c:	f001 ffc3 	bl	80256e6 <SDMMC_CmdAppCommand>
 8023760:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023762:	6a3b      	ldr	r3, [r7, #32]
 8023764:	2b00      	cmp	r3, #0
 8023766:	d005      	beq.n	8023774 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802376c:	687b      	ldr	r3, [r7, #4]
 802376e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8023770:	6a3b      	ldr	r3, [r7, #32]
 8023772:	e08d      	b.n	8023890 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8023774:	f04f 33ff 	mov.w	r3, #4294967295
 8023778:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 802377a:	2340      	movs	r3, #64	@ 0x40
 802377c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 802377e:	2360      	movs	r3, #96	@ 0x60
 8023780:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8023782:	2302      	movs	r3, #2
 8023784:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8023786:	2300      	movs	r3, #0
 8023788:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 802378a:	2301      	movs	r3, #1
 802378c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 802378e:	687b      	ldr	r3, [r7, #4]
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	f107 0208 	add.w	r2, r7, #8
 8023796:	4611      	mov	r1, r2
 8023798:	4618      	mov	r0, r3
 802379a:	f001 fe2b 	bl	80253f4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 802379e:	687b      	ldr	r3, [r7, #4]
 80237a0:	681b      	ldr	r3, [r3, #0]
 80237a2:	4618      	mov	r0, r3
 80237a4:	f002 f8ab 	bl	80258fe <SDMMC_CmdStatusRegister>
 80237a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80237aa:	6a3b      	ldr	r3, [r7, #32]
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d02b      	beq.n	8023808 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80237b8:	6a3b      	ldr	r3, [r7, #32]
 80237ba:	e069      	b.n	8023890 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	681b      	ldr	r3, [r3, #0]
 80237c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80237c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80237c6:	2b00      	cmp	r3, #0
 80237c8:	d013      	beq.n	80237f2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80237ca:	2300      	movs	r3, #0
 80237cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80237ce:	e00d      	b.n	80237ec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80237d0:	687b      	ldr	r3, [r7, #4]
 80237d2:	681b      	ldr	r3, [r3, #0]
 80237d4:	4618      	mov	r0, r3
 80237d6:	f001 fd85 	bl	80252e4 <SDMMC_ReadFIFO>
 80237da:	4602      	mov	r2, r0
 80237dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237de:	601a      	str	r2, [r3, #0]
        pData++;
 80237e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80237e2:	3304      	adds	r3, #4
 80237e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80237e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237e8:	3301      	adds	r3, #1
 80237ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80237ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237ee:	2b07      	cmp	r3, #7
 80237f0:	d9ee      	bls.n	80237d0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80237f2:	f7f8 fa17 	bl	801bc24 <HAL_GetTick>
 80237f6:	4602      	mov	r2, r0
 80237f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80237fa:	1ad3      	subs	r3, r2, r3
 80237fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023800:	d102      	bne.n	8023808 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023802:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023806:	e043      	b.n	8023890 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802380e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8023812:	2b00      	cmp	r3, #0
 8023814:	d0d2      	beq.n	80237bc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802381c:	f003 0308 	and.w	r3, r3, #8
 8023820:	2b00      	cmp	r3, #0
 8023822:	d001      	beq.n	8023828 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023824:	2308      	movs	r3, #8
 8023826:	e033      	b.n	8023890 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802382e:	f003 0302 	and.w	r3, r3, #2
 8023832:	2b00      	cmp	r3, #0
 8023834:	d001      	beq.n	802383a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023836:	2302      	movs	r3, #2
 8023838:	e02a      	b.n	8023890 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023840:	f003 0320 	and.w	r3, r3, #32
 8023844:	2b00      	cmp	r3, #0
 8023846:	d017      	beq.n	8023878 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8023848:	2320      	movs	r3, #32
 802384a:	e021      	b.n	8023890 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	681b      	ldr	r3, [r3, #0]
 8023850:	4618      	mov	r0, r3
 8023852:	f001 fd47 	bl	80252e4 <SDMMC_ReadFIFO>
 8023856:	4602      	mov	r2, r0
 8023858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802385a:	601a      	str	r2, [r3, #0]
    pData++;
 802385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802385e:	3304      	adds	r3, #4
 8023860:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023862:	f7f8 f9df 	bl	801bc24 <HAL_GetTick>
 8023866:	4602      	mov	r2, r0
 8023868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802386a:	1ad3      	subs	r3, r2, r3
 802386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023870:	d102      	bne.n	8023878 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023872:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023876:	e00b      	b.n	8023890 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	681b      	ldr	r3, [r3, #0]
 802387c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802387e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8023882:	2b00      	cmp	r3, #0
 8023884:	d1e2      	bne.n	802384c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	4a03      	ldr	r2, [pc, #12]	@ (8023898 <SD_SendSDStatus+0x19c>)
 802388c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 802388e:	2300      	movs	r3, #0
}
 8023890:	4618      	mov	r0, r3
 8023892:	3730      	adds	r7, #48	@ 0x30
 8023894:	46bd      	mov	sp, r7
 8023896:	bd80      	pop	{r7, pc}
 8023898:	18000f3a 	.word	0x18000f3a

0802389c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 802389c:	b580      	push	{r7, lr}
 802389e:	b084      	sub	sp, #16
 80238a0:	af00      	add	r7, sp, #0
 80238a2:	6078      	str	r0, [r7, #4]
 80238a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80238a6:	683b      	ldr	r3, [r7, #0]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d102      	bne.n	80238b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80238ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80238b0:	e018      	b.n	80238e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	681a      	ldr	r2, [r3, #0]
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80238ba:	041b      	lsls	r3, r3, #16
 80238bc:	4619      	mov	r1, r3
 80238be:	4610      	mov	r0, r2
 80238c0:	f001 fffa 	bl	80258b8 <SDMMC_CmdSendStatus>
 80238c4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80238c6:	68fb      	ldr	r3, [r7, #12]
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	d001      	beq.n	80238d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80238cc:	68fb      	ldr	r3, [r7, #12]
 80238ce:	e009      	b.n	80238e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	2100      	movs	r1, #0
 80238d6:	4618      	mov	r0, r3
 80238d8:	f001 fd79 	bl	80253ce <SDMMC_GetResponse>
 80238dc:	4602      	mov	r2, r0
 80238de:	683b      	ldr	r3, [r7, #0]
 80238e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80238e2:	2300      	movs	r3, #0
}
 80238e4:	4618      	mov	r0, r3
 80238e6:	3710      	adds	r7, #16
 80238e8:	46bd      	mov	sp, r7
 80238ea:	bd80      	pop	{r7, pc}

080238ec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80238ec:	b580      	push	{r7, lr}
 80238ee:	b086      	sub	sp, #24
 80238f0:	af00      	add	r7, sp, #0
 80238f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80238f4:	2300      	movs	r3, #0
 80238f6:	60fb      	str	r3, [r7, #12]
 80238f8:	2300      	movs	r3, #0
 80238fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80238fc:	687b      	ldr	r3, [r7, #4]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	2100      	movs	r1, #0
 8023902:	4618      	mov	r0, r3
 8023904:	f001 fd63 	bl	80253ce <SDMMC_GetResponse>
 8023908:	4603      	mov	r3, r0
 802390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802390e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023912:	d102      	bne.n	802391a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023914:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023918:	e02f      	b.n	802397a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 802391a:	f107 030c 	add.w	r3, r7, #12
 802391e:	4619      	mov	r1, r3
 8023920:	6878      	ldr	r0, [r7, #4]
 8023922:	f000 f879 	bl	8023a18 <SD_FindSCR>
 8023926:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023928:	697b      	ldr	r3, [r7, #20]
 802392a:	2b00      	cmp	r3, #0
 802392c:	d001      	beq.n	8023932 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 802392e:	697b      	ldr	r3, [r7, #20]
 8023930:	e023      	b.n	802397a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8023932:	693b      	ldr	r3, [r7, #16]
 8023934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8023938:	2b00      	cmp	r3, #0
 802393a:	d01c      	beq.n	8023976 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	681a      	ldr	r2, [r3, #0]
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023944:	041b      	lsls	r3, r3, #16
 8023946:	4619      	mov	r1, r3
 8023948:	4610      	mov	r0, r2
 802394a:	f001 fecc 	bl	80256e6 <SDMMC_CmdAppCommand>
 802394e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023950:	697b      	ldr	r3, [r7, #20]
 8023952:	2b00      	cmp	r3, #0
 8023954:	d001      	beq.n	802395a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8023956:	697b      	ldr	r3, [r7, #20]
 8023958:	e00f      	b.n	802397a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	2102      	movs	r1, #2
 8023960:	4618      	mov	r0, r3
 8023962:	f001 ff03 	bl	802576c <SDMMC_CmdBusWidth>
 8023966:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023968:	697b      	ldr	r3, [r7, #20]
 802396a:	2b00      	cmp	r3, #0
 802396c:	d001      	beq.n	8023972 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 802396e:	697b      	ldr	r3, [r7, #20]
 8023970:	e003      	b.n	802397a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8023972:	2300      	movs	r3, #0
 8023974:	e001      	b.n	802397a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8023976:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 802397a:	4618      	mov	r0, r3
 802397c:	3718      	adds	r7, #24
 802397e:	46bd      	mov	sp, r7
 8023980:	bd80      	pop	{r7, pc}

08023982 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8023982:	b580      	push	{r7, lr}
 8023984:	b086      	sub	sp, #24
 8023986:	af00      	add	r7, sp, #0
 8023988:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 802398a:	2300      	movs	r3, #0
 802398c:	60fb      	str	r3, [r7, #12]
 802398e:	2300      	movs	r3, #0
 8023990:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	2100      	movs	r1, #0
 8023998:	4618      	mov	r0, r3
 802399a:	f001 fd18 	bl	80253ce <SDMMC_GetResponse>
 802399e:	4603      	mov	r3, r0
 80239a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80239a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80239a8:	d102      	bne.n	80239b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80239aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80239ae:	e02f      	b.n	8023a10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80239b0:	f107 030c 	add.w	r3, r7, #12
 80239b4:	4619      	mov	r1, r3
 80239b6:	6878      	ldr	r0, [r7, #4]
 80239b8:	f000 f82e 	bl	8023a18 <SD_FindSCR>
 80239bc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80239be:	697b      	ldr	r3, [r7, #20]
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	d001      	beq.n	80239c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80239c4:	697b      	ldr	r3, [r7, #20]
 80239c6:	e023      	b.n	8023a10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80239c8:	693b      	ldr	r3, [r7, #16]
 80239ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d01c      	beq.n	8023a0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	681a      	ldr	r2, [r3, #0]
 80239d6:	687b      	ldr	r3, [r7, #4]
 80239d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80239da:	041b      	lsls	r3, r3, #16
 80239dc:	4619      	mov	r1, r3
 80239de:	4610      	mov	r0, r2
 80239e0:	f001 fe81 	bl	80256e6 <SDMMC_CmdAppCommand>
 80239e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80239e6:	697b      	ldr	r3, [r7, #20]
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d001      	beq.n	80239f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80239ec:	697b      	ldr	r3, [r7, #20]
 80239ee:	e00f      	b.n	8023a10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	2100      	movs	r1, #0
 80239f6:	4618      	mov	r0, r3
 80239f8:	f001 feb8 	bl	802576c <SDMMC_CmdBusWidth>
 80239fc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80239fe:	697b      	ldr	r3, [r7, #20]
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	d001      	beq.n	8023a08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8023a04:	697b      	ldr	r3, [r7, #20]
 8023a06:	e003      	b.n	8023a10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8023a08:	2300      	movs	r3, #0
 8023a0a:	e001      	b.n	8023a10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8023a0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8023a10:	4618      	mov	r0, r3
 8023a12:	3718      	adds	r7, #24
 8023a14:	46bd      	mov	sp, r7
 8023a16:	bd80      	pop	{r7, pc}

08023a18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8023a18:	b580      	push	{r7, lr}
 8023a1a:	b08e      	sub	sp, #56	@ 0x38
 8023a1c:	af00      	add	r7, sp, #0
 8023a1e:	6078      	str	r0, [r7, #4]
 8023a20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8023a22:	f7f8 f8ff 	bl	801bc24 <HAL_GetTick>
 8023a26:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8023a28:	2300      	movs	r3, #0
 8023a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	60bb      	str	r3, [r7, #8]
 8023a30:	2300      	movs	r3, #0
 8023a32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8023a34:	683b      	ldr	r3, [r7, #0]
 8023a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	681b      	ldr	r3, [r3, #0]
 8023a3c:	2108      	movs	r1, #8
 8023a3e:	4618      	mov	r0, r3
 8023a40:	f001 fd04 	bl	802544c <SDMMC_CmdBlockLength>
 8023a44:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	d001      	beq.n	8023a50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8023a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a4e:	e0ad      	b.n	8023bac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8023a50:	687b      	ldr	r3, [r7, #4]
 8023a52:	681a      	ldr	r2, [r3, #0]
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023a58:	041b      	lsls	r3, r3, #16
 8023a5a:	4619      	mov	r1, r3
 8023a5c:	4610      	mov	r0, r2
 8023a5e:	f001 fe42 	bl	80256e6 <SDMMC_CmdAppCommand>
 8023a62:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d001      	beq.n	8023a6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8023a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023a6c:	e09e      	b.n	8023bac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8023a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8023a72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8023a74:	2308      	movs	r3, #8
 8023a76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8023a78:	2330      	movs	r3, #48	@ 0x30
 8023a7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8023a7c:	2302      	movs	r3, #2
 8023a7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8023a80:	2300      	movs	r3, #0
 8023a82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8023a84:	2301      	movs	r3, #1
 8023a86:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	f107 0210 	add.w	r2, r7, #16
 8023a90:	4611      	mov	r1, r2
 8023a92:	4618      	mov	r0, r3
 8023a94:	f001 fcae 	bl	80253f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	f001 fe88 	bl	80257b2 <SDMMC_CmdSendSCR>
 8023aa2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d027      	beq.n	8023afa <SD_FindSCR+0xe2>
  {
    return errorstate;
 8023aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023aac:	e07e      	b.n	8023bac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d113      	bne.n	8023ae4 <SD_FindSCR+0xcc>
 8023abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023abe:	2b00      	cmp	r3, #0
 8023ac0:	d110      	bne.n	8023ae4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	4618      	mov	r0, r3
 8023ac8:	f001 fc0c 	bl	80252e4 <SDMMC_ReadFIFO>
 8023acc:	4603      	mov	r3, r0
 8023ace:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	681b      	ldr	r3, [r3, #0]
 8023ad4:	4618      	mov	r0, r3
 8023ad6:	f001 fc05 	bl	80252e4 <SDMMC_ReadFIFO>
 8023ada:	4603      	mov	r3, r0
 8023adc:	60fb      	str	r3, [r7, #12]
      index++;
 8023ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ae0:	3301      	adds	r3, #1
 8023ae2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023ae4:	f7f8 f89e 	bl	801bc24 <HAL_GetTick>
 8023ae8:	4602      	mov	r2, r0
 8023aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023aec:	1ad3      	subs	r3, r2, r3
 8023aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023af2:	d102      	bne.n	8023afa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023af4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023af8:	e058      	b.n	8023bac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	681b      	ldr	r3, [r3, #0]
 8023afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023b00:	f240 532a 	movw	r3, #1322	@ 0x52a
 8023b04:	4013      	ands	r3, r2
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d0d1      	beq.n	8023aae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b10:	f003 0308 	and.w	r3, r3, #8
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d005      	beq.n	8023b24 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	2208      	movs	r2, #8
 8023b1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023b20:	2308      	movs	r3, #8
 8023b22:	e043      	b.n	8023bac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	681b      	ldr	r3, [r3, #0]
 8023b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b2a:	f003 0302 	and.w	r3, r3, #2
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d005      	beq.n	8023b3e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	681b      	ldr	r3, [r3, #0]
 8023b36:	2202      	movs	r2, #2
 8023b38:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023b3a:	2302      	movs	r3, #2
 8023b3c:	e036      	b.n	8023bac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8023b3e:	687b      	ldr	r3, [r7, #4]
 8023b40:	681b      	ldr	r3, [r3, #0]
 8023b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b44:	f003 0320 	and.w	r3, r3, #32
 8023b48:	2b00      	cmp	r3, #0
 8023b4a:	d005      	beq.n	8023b58 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	681b      	ldr	r3, [r3, #0]
 8023b50:	2220      	movs	r2, #32
 8023b52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8023b54:	2320      	movs	r3, #32
 8023b56:	e029      	b.n	8023bac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	4a15      	ldr	r2, [pc, #84]	@ (8023bb4 <SD_FindSCR+0x19c>)
 8023b5e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	061a      	lsls	r2, r3, #24
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	021b      	lsls	r3, r3, #8
 8023b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023b6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	0a1b      	lsrs	r3, r3, #8
 8023b72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023b76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023b78:	68fb      	ldr	r3, [r7, #12]
 8023b7a:	0e1b      	lsrs	r3, r3, #24
 8023b7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023b80:	601a      	str	r2, [r3, #0]
    scr++;
 8023b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023b84:	3304      	adds	r3, #4
 8023b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023b88:	68bb      	ldr	r3, [r7, #8]
 8023b8a:	061a      	lsls	r2, r3, #24
 8023b8c:	68bb      	ldr	r3, [r7, #8]
 8023b8e:	021b      	lsls	r3, r3, #8
 8023b90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023b94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023b96:	68bb      	ldr	r3, [r7, #8]
 8023b98:	0a1b      	lsrs	r3, r3, #8
 8023b9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023b9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023ba0:	68bb      	ldr	r3, [r7, #8]
 8023ba2:	0e1b      	lsrs	r3, r3, #24
 8023ba4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ba8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8023baa:	2300      	movs	r3, #0
}
 8023bac:	4618      	mov	r0, r3
 8023bae:	3738      	adds	r7, #56	@ 0x38
 8023bb0:	46bd      	mov	sp, r7
 8023bb2:	bd80      	pop	{r7, pc}
 8023bb4:	18000f3a 	.word	0x18000f3a

08023bb8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8023bb8:	b580      	push	{r7, lr}
 8023bba:	b086      	sub	sp, #24
 8023bbc:	af00      	add	r7, sp, #0
 8023bbe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023bc4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023bca:	2b1f      	cmp	r3, #31
 8023bcc:	d936      	bls.n	8023c3c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8023bce:	2300      	movs	r3, #0
 8023bd0:	617b      	str	r3, [r7, #20]
 8023bd2:	e027      	b.n	8023c24 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8023bd4:	687b      	ldr	r3, [r7, #4]
 8023bd6:	681b      	ldr	r3, [r3, #0]
 8023bd8:	4618      	mov	r0, r3
 8023bda:	f001 fb83 	bl	80252e4 <SDMMC_ReadFIFO>
 8023bde:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8023be0:	68fb      	ldr	r3, [r7, #12]
 8023be2:	b2da      	uxtb	r2, r3
 8023be4:	693b      	ldr	r3, [r7, #16]
 8023be6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023be8:	693b      	ldr	r3, [r7, #16]
 8023bea:	3301      	adds	r3, #1
 8023bec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8023bee:	68fb      	ldr	r3, [r7, #12]
 8023bf0:	0a1b      	lsrs	r3, r3, #8
 8023bf2:	b2da      	uxtb	r2, r3
 8023bf4:	693b      	ldr	r3, [r7, #16]
 8023bf6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023bf8:	693b      	ldr	r3, [r7, #16]
 8023bfa:	3301      	adds	r3, #1
 8023bfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8023bfe:	68fb      	ldr	r3, [r7, #12]
 8023c00:	0c1b      	lsrs	r3, r3, #16
 8023c02:	b2da      	uxtb	r2, r3
 8023c04:	693b      	ldr	r3, [r7, #16]
 8023c06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c08:	693b      	ldr	r3, [r7, #16]
 8023c0a:	3301      	adds	r3, #1
 8023c0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8023c0e:	68fb      	ldr	r3, [r7, #12]
 8023c10:	0e1b      	lsrs	r3, r3, #24
 8023c12:	b2da      	uxtb	r2, r3
 8023c14:	693b      	ldr	r3, [r7, #16]
 8023c16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c18:	693b      	ldr	r3, [r7, #16]
 8023c1a:	3301      	adds	r3, #1
 8023c1c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8023c1e:	697b      	ldr	r3, [r7, #20]
 8023c20:	3301      	adds	r3, #1
 8023c22:	617b      	str	r3, [r7, #20]
 8023c24:	697b      	ldr	r3, [r7, #20]
 8023c26:	2b07      	cmp	r3, #7
 8023c28:	d9d4      	bls.n	8023bd4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	693a      	ldr	r2, [r7, #16]
 8023c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023c34:	f1a3 0220 	sub.w	r2, r3, #32
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8023c3c:	bf00      	nop
 8023c3e:	3718      	adds	r7, #24
 8023c40:	46bd      	mov	sp, r7
 8023c42:	bd80      	pop	{r7, pc}

08023c44 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8023c44:	b580      	push	{r7, lr}
 8023c46:	b086      	sub	sp, #24
 8023c48:	af00      	add	r7, sp, #0
 8023c4a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	69db      	ldr	r3, [r3, #28]
 8023c50:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	6a1b      	ldr	r3, [r3, #32]
 8023c56:	2b1f      	cmp	r3, #31
 8023c58:	d93a      	bls.n	8023cd0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	617b      	str	r3, [r7, #20]
 8023c5e:	e02b      	b.n	8023cb8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8023c60:	693b      	ldr	r3, [r7, #16]
 8023c62:	781b      	ldrb	r3, [r3, #0]
 8023c64:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023c66:	693b      	ldr	r3, [r7, #16]
 8023c68:	3301      	adds	r3, #1
 8023c6a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8023c6c:	693b      	ldr	r3, [r7, #16]
 8023c6e:	781b      	ldrb	r3, [r3, #0]
 8023c70:	021a      	lsls	r2, r3, #8
 8023c72:	68fb      	ldr	r3, [r7, #12]
 8023c74:	4313      	orrs	r3, r2
 8023c76:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023c78:	693b      	ldr	r3, [r7, #16]
 8023c7a:	3301      	adds	r3, #1
 8023c7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8023c7e:	693b      	ldr	r3, [r7, #16]
 8023c80:	781b      	ldrb	r3, [r3, #0]
 8023c82:	041a      	lsls	r2, r3, #16
 8023c84:	68fb      	ldr	r3, [r7, #12]
 8023c86:	4313      	orrs	r3, r2
 8023c88:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023c8a:	693b      	ldr	r3, [r7, #16]
 8023c8c:	3301      	adds	r3, #1
 8023c8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8023c90:	693b      	ldr	r3, [r7, #16]
 8023c92:	781b      	ldrb	r3, [r3, #0]
 8023c94:	061a      	lsls	r2, r3, #24
 8023c96:	68fb      	ldr	r3, [r7, #12]
 8023c98:	4313      	orrs	r3, r2
 8023c9a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023c9c:	693b      	ldr	r3, [r7, #16]
 8023c9e:	3301      	adds	r3, #1
 8023ca0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	f107 020c 	add.w	r2, r7, #12
 8023caa:	4611      	mov	r1, r2
 8023cac:	4618      	mov	r0, r3
 8023cae:	f001 fb26 	bl	80252fe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8023cb2:	697b      	ldr	r3, [r7, #20]
 8023cb4:	3301      	adds	r3, #1
 8023cb6:	617b      	str	r3, [r7, #20]
 8023cb8:	697b      	ldr	r3, [r7, #20]
 8023cba:	2b07      	cmp	r3, #7
 8023cbc:	d9d0      	bls.n	8023c60 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	693a      	ldr	r2, [r7, #16]
 8023cc2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	6a1b      	ldr	r3, [r3, #32]
 8023cc8:	f1a3 0220 	sub.w	r2, r3, #32
 8023ccc:	687b      	ldr	r3, [r7, #4]
 8023cce:	621a      	str	r2, [r3, #32]
  }
}
 8023cd0:	bf00      	nop
 8023cd2:	3718      	adds	r7, #24
 8023cd4:	46bd      	mov	sp, r7
 8023cd6:	bd80      	pop	{r7, pc}

08023cd8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023cd8:	b480      	push	{r7}
 8023cda:	b083      	sub	sp, #12
 8023cdc:	af00      	add	r7, sp, #0
 8023cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023ce0:	bf00      	nop
 8023ce2:	370c      	adds	r7, #12
 8023ce4:	46bd      	mov	sp, r7
 8023ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cea:	4770      	bx	lr

08023cec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023cec:	b480      	push	{r7}
 8023cee:	b083      	sub	sp, #12
 8023cf0:	af00      	add	r7, sp, #0
 8023cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023cf4:	bf00      	nop
 8023cf6:	370c      	adds	r7, #12
 8023cf8:	46bd      	mov	sp, r7
 8023cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cfe:	4770      	bx	lr

08023d00 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d00:	b480      	push	{r7}
 8023d02:	b083      	sub	sp, #12
 8023d04:	af00      	add	r7, sp, #0
 8023d06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023d08:	bf00      	nop
 8023d0a:	370c      	adds	r7, #12
 8023d0c:	46bd      	mov	sp, r7
 8023d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d12:	4770      	bx	lr

08023d14 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d14:	b480      	push	{r7}
 8023d16:	b083      	sub	sp, #12
 8023d18:	af00      	add	r7, sp, #0
 8023d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023d1c:	bf00      	nop
 8023d1e:	370c      	adds	r7, #12
 8023d20:	46bd      	mov	sp, r7
 8023d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d26:	4770      	bx	lr

08023d28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8023d28:	b580      	push	{r7, lr}
 8023d2a:	b084      	sub	sp, #16
 8023d2c:	af00      	add	r7, sp, #0
 8023d2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d101      	bne.n	8023d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8023d36:	2301      	movs	r3, #1
 8023d38:	e10f      	b.n	8023f5a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023d3a:	687b      	ldr	r3, [r7, #4]
 8023d3c:	2200      	movs	r2, #0
 8023d3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	681b      	ldr	r3, [r3, #0]
 8023d44:	4a87      	ldr	r2, [pc, #540]	@ (8023f64 <HAL_SPI_Init+0x23c>)
 8023d46:	4293      	cmp	r3, r2
 8023d48:	d00f      	beq.n	8023d6a <HAL_SPI_Init+0x42>
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	681b      	ldr	r3, [r3, #0]
 8023d4e:	4a86      	ldr	r2, [pc, #536]	@ (8023f68 <HAL_SPI_Init+0x240>)
 8023d50:	4293      	cmp	r3, r2
 8023d52:	d00a      	beq.n	8023d6a <HAL_SPI_Init+0x42>
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	681b      	ldr	r3, [r3, #0]
 8023d58:	4a84      	ldr	r2, [pc, #528]	@ (8023f6c <HAL_SPI_Init+0x244>)
 8023d5a:	4293      	cmp	r3, r2
 8023d5c:	d005      	beq.n	8023d6a <HAL_SPI_Init+0x42>
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	68db      	ldr	r3, [r3, #12]
 8023d62:	2b0f      	cmp	r3, #15
 8023d64:	d901      	bls.n	8023d6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8023d66:	2301      	movs	r3, #1
 8023d68:	e0f7      	b.n	8023f5a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8023d6a:	6878      	ldr	r0, [r7, #4]
 8023d6c:	f000 f90a 	bl	8023f84 <SPI_GetPacketSize>
 8023d70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	4a7b      	ldr	r2, [pc, #492]	@ (8023f64 <HAL_SPI_Init+0x23c>)
 8023d78:	4293      	cmp	r3, r2
 8023d7a:	d00c      	beq.n	8023d96 <HAL_SPI_Init+0x6e>
 8023d7c:	687b      	ldr	r3, [r7, #4]
 8023d7e:	681b      	ldr	r3, [r3, #0]
 8023d80:	4a79      	ldr	r2, [pc, #484]	@ (8023f68 <HAL_SPI_Init+0x240>)
 8023d82:	4293      	cmp	r3, r2
 8023d84:	d007      	beq.n	8023d96 <HAL_SPI_Init+0x6e>
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	4a78      	ldr	r2, [pc, #480]	@ (8023f6c <HAL_SPI_Init+0x244>)
 8023d8c:	4293      	cmp	r3, r2
 8023d8e:	d002      	beq.n	8023d96 <HAL_SPI_Init+0x6e>
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	2b08      	cmp	r3, #8
 8023d94:	d811      	bhi.n	8023dba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023d9a:	4a72      	ldr	r2, [pc, #456]	@ (8023f64 <HAL_SPI_Init+0x23c>)
 8023d9c:	4293      	cmp	r3, r2
 8023d9e:	d009      	beq.n	8023db4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	681b      	ldr	r3, [r3, #0]
 8023da4:	4a70      	ldr	r2, [pc, #448]	@ (8023f68 <HAL_SPI_Init+0x240>)
 8023da6:	4293      	cmp	r3, r2
 8023da8:	d004      	beq.n	8023db4 <HAL_SPI_Init+0x8c>
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	681b      	ldr	r3, [r3, #0]
 8023dae:	4a6f      	ldr	r2, [pc, #444]	@ (8023f6c <HAL_SPI_Init+0x244>)
 8023db0:	4293      	cmp	r3, r2
 8023db2:	d104      	bne.n	8023dbe <HAL_SPI_Init+0x96>
 8023db4:	68fb      	ldr	r3, [r7, #12]
 8023db6:	2b10      	cmp	r3, #16
 8023db8:	d901      	bls.n	8023dbe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8023dba:	2301      	movs	r3, #1
 8023dbc:	e0cd      	b.n	8023f5a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8023dc4:	b2db      	uxtb	r3, r3
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d106      	bne.n	8023dd8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	2200      	movs	r2, #0
 8023dce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8023dd2:	6878      	ldr	r0, [r7, #4]
 8023dd4:	f000 f8cc 	bl	8023f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	2202      	movs	r2, #2
 8023ddc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	681a      	ldr	r2, [r3, #0]
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	681b      	ldr	r3, [r3, #0]
 8023dea:	f022 0201 	bic.w	r2, r2, #1
 8023dee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	681b      	ldr	r3, [r3, #0]
 8023df4:	689b      	ldr	r3, [r3, #8]
 8023df6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8023dfa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	699b      	ldr	r3, [r3, #24]
 8023e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8023e04:	d119      	bne.n	8023e3a <HAL_SPI_Init+0x112>
 8023e06:	687b      	ldr	r3, [r7, #4]
 8023e08:	685b      	ldr	r3, [r3, #4]
 8023e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8023e0e:	d103      	bne.n	8023e18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023e10:	687b      	ldr	r3, [r7, #4]
 8023e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	d008      	beq.n	8023e2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023e1c:	2b00      	cmp	r3, #0
 8023e1e:	d10c      	bne.n	8023e3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023e24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023e28:	d107      	bne.n	8023e3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	681b      	ldr	r3, [r3, #0]
 8023e2e:	681a      	ldr	r2, [r3, #0]
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8023e38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8023e3a:	687b      	ldr	r3, [r7, #4]
 8023e3c:	685b      	ldr	r3, [r3, #4]
 8023e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	d00f      	beq.n	8023e66 <HAL_SPI_Init+0x13e>
 8023e46:	687b      	ldr	r3, [r7, #4]
 8023e48:	68db      	ldr	r3, [r3, #12]
 8023e4a:	2b06      	cmp	r3, #6
 8023e4c:	d90b      	bls.n	8023e66 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	681b      	ldr	r3, [r3, #0]
 8023e54:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023e5c:	687b      	ldr	r3, [r7, #4]
 8023e5e:	681b      	ldr	r3, [r3, #0]
 8023e60:	430a      	orrs	r2, r1
 8023e62:	601a      	str	r2, [r3, #0]
 8023e64:	e007      	b.n	8023e76 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	681b      	ldr	r3, [r3, #0]
 8023e6a:	681a      	ldr	r2, [r3, #0]
 8023e6c:	687b      	ldr	r3, [r7, #4]
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8023e74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	69da      	ldr	r2, [r3, #28]
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023e7e:	431a      	orrs	r2, r3
 8023e80:	68bb      	ldr	r3, [r7, #8]
 8023e82:	431a      	orrs	r2, r3
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023e88:	ea42 0103 	orr.w	r1, r2, r3
 8023e8c:	687b      	ldr	r3, [r7, #4]
 8023e8e:	68da      	ldr	r2, [r3, #12]
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	430a      	orrs	r2, r1
 8023e96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8023e98:	687b      	ldr	r3, [r7, #4]
 8023e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023ea0:	431a      	orrs	r2, r3
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023ea6:	431a      	orrs	r2, r3
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	699b      	ldr	r3, [r3, #24]
 8023eac:	431a      	orrs	r2, r3
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	691b      	ldr	r3, [r3, #16]
 8023eb2:	431a      	orrs	r2, r3
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	695b      	ldr	r3, [r3, #20]
 8023eb8:	431a      	orrs	r2, r3
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	6a1b      	ldr	r3, [r3, #32]
 8023ebe:	431a      	orrs	r2, r3
 8023ec0:	687b      	ldr	r3, [r7, #4]
 8023ec2:	685b      	ldr	r3, [r3, #4]
 8023ec4:	431a      	orrs	r2, r3
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023eca:	431a      	orrs	r2, r3
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	689b      	ldr	r3, [r3, #8]
 8023ed0:	431a      	orrs	r2, r3
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8023ed6:	ea42 0103 	orr.w	r1, r2, r3
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	430a      	orrs	r2, r1
 8023ee4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	685b      	ldr	r3, [r3, #4]
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d113      	bne.n	8023f16 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	689b      	ldr	r3, [r3, #8]
 8023ef4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	681b      	ldr	r3, [r3, #0]
 8023efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8023f00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	689b      	ldr	r3, [r3, #8]
 8023f08:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8023f0c:	687b      	ldr	r3, [r7, #4]
 8023f0e:	681b      	ldr	r3, [r3, #0]
 8023f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023f14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	f022 0201 	bic.w	r2, r2, #1
 8023f24:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	685b      	ldr	r3, [r3, #4]
 8023f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	d00a      	beq.n	8023f48 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	68db      	ldr	r3, [r3, #12]
 8023f38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	681b      	ldr	r3, [r3, #0]
 8023f44:	430a      	orrs	r2, r1
 8023f46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	2200      	movs	r2, #0
 8023f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	2201      	movs	r2, #1
 8023f54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8023f58:	2300      	movs	r3, #0
}
 8023f5a:	4618      	mov	r0, r3
 8023f5c:	3710      	adds	r7, #16
 8023f5e:	46bd      	mov	sp, r7
 8023f60:	bd80      	pop	{r7, pc}
 8023f62:	bf00      	nop
 8023f64:	40013000 	.word	0x40013000
 8023f68:	40003800 	.word	0x40003800
 8023f6c:	40003c00 	.word	0x40003c00

08023f70 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8023f70:	b480      	push	{r7}
 8023f72:	b083      	sub	sp, #12
 8023f74:	af00      	add	r7, sp, #0
 8023f76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8023f78:	bf00      	nop
 8023f7a:	370c      	adds	r7, #12
 8023f7c:	46bd      	mov	sp, r7
 8023f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f82:	4770      	bx	lr

08023f84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8023f84:	b480      	push	{r7}
 8023f86:	b085      	sub	sp, #20
 8023f88:	af00      	add	r7, sp, #0
 8023f8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8023f8c:	687b      	ldr	r3, [r7, #4]
 8023f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023f90:	095b      	lsrs	r3, r3, #5
 8023f92:	3301      	adds	r3, #1
 8023f94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8023f96:	687b      	ldr	r3, [r7, #4]
 8023f98:	68db      	ldr	r3, [r3, #12]
 8023f9a:	3301      	adds	r3, #1
 8023f9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8023f9e:	68bb      	ldr	r3, [r7, #8]
 8023fa0:	3307      	adds	r3, #7
 8023fa2:	08db      	lsrs	r3, r3, #3
 8023fa4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8023fa6:	68bb      	ldr	r3, [r7, #8]
 8023fa8:	68fa      	ldr	r2, [r7, #12]
 8023faa:	fb02 f303 	mul.w	r3, r2, r3
}
 8023fae:	4618      	mov	r0, r3
 8023fb0:	3714      	adds	r7, #20
 8023fb2:	46bd      	mov	sp, r7
 8023fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb8:	4770      	bx	lr

08023fba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023fba:	b580      	push	{r7, lr}
 8023fbc:	b082      	sub	sp, #8
 8023fbe:	af00      	add	r7, sp, #0
 8023fc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023fc2:	687b      	ldr	r3, [r7, #4]
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d101      	bne.n	8023fcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023fc8:	2301      	movs	r3, #1
 8023fca:	e042      	b.n	8024052 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d106      	bne.n	8023fe4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023fd6:	687b      	ldr	r3, [r7, #4]
 8023fd8:	2200      	movs	r2, #0
 8023fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8023fde:	6878      	ldr	r0, [r7, #4]
 8023fe0:	f7ea ff24 	bl	800ee2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	2224      	movs	r2, #36	@ 0x24
 8023fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	681b      	ldr	r3, [r3, #0]
 8023ff0:	681a      	ldr	r2, [r3, #0]
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	f022 0201 	bic.w	r2, r2, #1
 8023ffa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8023ffc:	687b      	ldr	r3, [r7, #4]
 8023ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024000:	2b00      	cmp	r3, #0
 8024002:	d002      	beq.n	802400a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8024004:	6878      	ldr	r0, [r7, #4]
 8024006:	f000 fe1f 	bl	8024c48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802400a:	6878      	ldr	r0, [r7, #4]
 802400c:	f000 f8b4 	bl	8024178 <UART_SetConfig>
 8024010:	4603      	mov	r3, r0
 8024012:	2b01      	cmp	r3, #1
 8024014:	d101      	bne.n	802401a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8024016:	2301      	movs	r3, #1
 8024018:	e01b      	b.n	8024052 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802401a:	687b      	ldr	r3, [r7, #4]
 802401c:	681b      	ldr	r3, [r3, #0]
 802401e:	685a      	ldr	r2, [r3, #4]
 8024020:	687b      	ldr	r3, [r7, #4]
 8024022:	681b      	ldr	r3, [r3, #0]
 8024024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8024028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	689a      	ldr	r2, [r3, #8]
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8024038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	681b      	ldr	r3, [r3, #0]
 802403e:	681a      	ldr	r2, [r3, #0]
 8024040:	687b      	ldr	r3, [r7, #4]
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	f042 0201 	orr.w	r2, r2, #1
 8024048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 802404a:	6878      	ldr	r0, [r7, #4]
 802404c:	f000 fe9e 	bl	8024d8c <UART_CheckIdleState>
 8024050:	4603      	mov	r3, r0
}
 8024052:	4618      	mov	r0, r3
 8024054:	3708      	adds	r7, #8
 8024056:	46bd      	mov	sp, r7
 8024058:	bd80      	pop	{r7, pc}

0802405a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802405a:	b580      	push	{r7, lr}
 802405c:	b08a      	sub	sp, #40	@ 0x28
 802405e:	af02      	add	r7, sp, #8
 8024060:	60f8      	str	r0, [r7, #12]
 8024062:	60b9      	str	r1, [r7, #8]
 8024064:	603b      	str	r3, [r7, #0]
 8024066:	4613      	mov	r3, r2
 8024068:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802406a:	68fb      	ldr	r3, [r7, #12]
 802406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024070:	2b20      	cmp	r3, #32
 8024072:	d17b      	bne.n	802416c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8024074:	68bb      	ldr	r3, [r7, #8]
 8024076:	2b00      	cmp	r3, #0
 8024078:	d002      	beq.n	8024080 <HAL_UART_Transmit+0x26>
 802407a:	88fb      	ldrh	r3, [r7, #6]
 802407c:	2b00      	cmp	r3, #0
 802407e:	d101      	bne.n	8024084 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8024080:	2301      	movs	r3, #1
 8024082:	e074      	b.n	802416e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024084:	68fb      	ldr	r3, [r7, #12]
 8024086:	2200      	movs	r2, #0
 8024088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	2221      	movs	r2, #33	@ 0x21
 8024090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024094:	f7f7 fdc6 	bl	801bc24 <HAL_GetTick>
 8024098:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 802409a:	68fb      	ldr	r3, [r7, #12]
 802409c:	88fa      	ldrh	r2, [r7, #6]
 802409e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80240a2:	68fb      	ldr	r3, [r7, #12]
 80240a4:	88fa      	ldrh	r2, [r7, #6]
 80240a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80240aa:	68fb      	ldr	r3, [r7, #12]
 80240ac:	689b      	ldr	r3, [r3, #8]
 80240ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80240b2:	d108      	bne.n	80240c6 <HAL_UART_Transmit+0x6c>
 80240b4:	68fb      	ldr	r3, [r7, #12]
 80240b6:	691b      	ldr	r3, [r3, #16]
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	d104      	bne.n	80240c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80240bc:	2300      	movs	r3, #0
 80240be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80240c0:	68bb      	ldr	r3, [r7, #8]
 80240c2:	61bb      	str	r3, [r7, #24]
 80240c4:	e003      	b.n	80240ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80240c6:	68bb      	ldr	r3, [r7, #8]
 80240c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80240ca:	2300      	movs	r3, #0
 80240cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80240ce:	e030      	b.n	8024132 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80240d0:	683b      	ldr	r3, [r7, #0]
 80240d2:	9300      	str	r3, [sp, #0]
 80240d4:	697b      	ldr	r3, [r7, #20]
 80240d6:	2200      	movs	r2, #0
 80240d8:	2180      	movs	r1, #128	@ 0x80
 80240da:	68f8      	ldr	r0, [r7, #12]
 80240dc:	f000 ff00 	bl	8024ee0 <UART_WaitOnFlagUntilTimeout>
 80240e0:	4603      	mov	r3, r0
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	d005      	beq.n	80240f2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80240e6:	68fb      	ldr	r3, [r7, #12]
 80240e8:	2220      	movs	r2, #32
 80240ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80240ee:	2303      	movs	r3, #3
 80240f0:	e03d      	b.n	802416e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80240f2:	69fb      	ldr	r3, [r7, #28]
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d10b      	bne.n	8024110 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80240f8:	69bb      	ldr	r3, [r7, #24]
 80240fa:	881b      	ldrh	r3, [r3, #0]
 80240fc:	461a      	mov	r2, r3
 80240fe:	68fb      	ldr	r3, [r7, #12]
 8024100:	681b      	ldr	r3, [r3, #0]
 8024102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024106:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8024108:	69bb      	ldr	r3, [r7, #24]
 802410a:	3302      	adds	r3, #2
 802410c:	61bb      	str	r3, [r7, #24]
 802410e:	e007      	b.n	8024120 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8024110:	69fb      	ldr	r3, [r7, #28]
 8024112:	781a      	ldrb	r2, [r3, #0]
 8024114:	68fb      	ldr	r3, [r7, #12]
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 802411a:	69fb      	ldr	r3, [r7, #28]
 802411c:	3301      	adds	r3, #1
 802411e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8024120:	68fb      	ldr	r3, [r7, #12]
 8024122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8024126:	b29b      	uxth	r3, r3
 8024128:	3b01      	subs	r3, #1
 802412a:	b29a      	uxth	r2, r3
 802412c:	68fb      	ldr	r3, [r7, #12]
 802412e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8024132:	68fb      	ldr	r3, [r7, #12]
 8024134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8024138:	b29b      	uxth	r3, r3
 802413a:	2b00      	cmp	r3, #0
 802413c:	d1c8      	bne.n	80240d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802413e:	683b      	ldr	r3, [r7, #0]
 8024140:	9300      	str	r3, [sp, #0]
 8024142:	697b      	ldr	r3, [r7, #20]
 8024144:	2200      	movs	r2, #0
 8024146:	2140      	movs	r1, #64	@ 0x40
 8024148:	68f8      	ldr	r0, [r7, #12]
 802414a:	f000 fec9 	bl	8024ee0 <UART_WaitOnFlagUntilTimeout>
 802414e:	4603      	mov	r3, r0
 8024150:	2b00      	cmp	r3, #0
 8024152:	d005      	beq.n	8024160 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8024154:	68fb      	ldr	r3, [r7, #12]
 8024156:	2220      	movs	r2, #32
 8024158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 802415c:	2303      	movs	r3, #3
 802415e:	e006      	b.n	802416e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8024160:	68fb      	ldr	r3, [r7, #12]
 8024162:	2220      	movs	r2, #32
 8024164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8024168:	2300      	movs	r3, #0
 802416a:	e000      	b.n	802416e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 802416c:	2302      	movs	r3, #2
  }
}
 802416e:	4618      	mov	r0, r3
 8024170:	3720      	adds	r7, #32
 8024172:	46bd      	mov	sp, r7
 8024174:	bd80      	pop	{r7, pc}
	...

08024178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802417c:	b092      	sub	sp, #72	@ 0x48
 802417e:	af00      	add	r7, sp, #0
 8024180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8024182:	2300      	movs	r3, #0
 8024184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024188:	697b      	ldr	r3, [r7, #20]
 802418a:	689a      	ldr	r2, [r3, #8]
 802418c:	697b      	ldr	r3, [r7, #20]
 802418e:	691b      	ldr	r3, [r3, #16]
 8024190:	431a      	orrs	r2, r3
 8024192:	697b      	ldr	r3, [r7, #20]
 8024194:	695b      	ldr	r3, [r3, #20]
 8024196:	431a      	orrs	r2, r3
 8024198:	697b      	ldr	r3, [r7, #20]
 802419a:	69db      	ldr	r3, [r3, #28]
 802419c:	4313      	orrs	r3, r2
 802419e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80241a0:	697b      	ldr	r3, [r7, #20]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	681a      	ldr	r2, [r3, #0]
 80241a6:	4bbe      	ldr	r3, [pc, #760]	@ (80244a0 <UART_SetConfig+0x328>)
 80241a8:	4013      	ands	r3, r2
 80241aa:	697a      	ldr	r2, [r7, #20]
 80241ac:	6812      	ldr	r2, [r2, #0]
 80241ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80241b0:	430b      	orrs	r3, r1
 80241b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80241b4:	697b      	ldr	r3, [r7, #20]
 80241b6:	681b      	ldr	r3, [r3, #0]
 80241b8:	685b      	ldr	r3, [r3, #4]
 80241ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80241be:	697b      	ldr	r3, [r7, #20]
 80241c0:	68da      	ldr	r2, [r3, #12]
 80241c2:	697b      	ldr	r3, [r7, #20]
 80241c4:	681b      	ldr	r3, [r3, #0]
 80241c6:	430a      	orrs	r2, r1
 80241c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80241ca:	697b      	ldr	r3, [r7, #20]
 80241cc:	699b      	ldr	r3, [r3, #24]
 80241ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80241d0:	697b      	ldr	r3, [r7, #20]
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	4ab3      	ldr	r2, [pc, #716]	@ (80244a4 <UART_SetConfig+0x32c>)
 80241d6:	4293      	cmp	r3, r2
 80241d8:	d004      	beq.n	80241e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80241da:	697b      	ldr	r3, [r7, #20]
 80241dc:	6a1b      	ldr	r3, [r3, #32]
 80241de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80241e0:	4313      	orrs	r3, r2
 80241e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80241e4:	697b      	ldr	r3, [r7, #20]
 80241e6:	681b      	ldr	r3, [r3, #0]
 80241e8:	689a      	ldr	r2, [r3, #8]
 80241ea:	4baf      	ldr	r3, [pc, #700]	@ (80244a8 <UART_SetConfig+0x330>)
 80241ec:	4013      	ands	r3, r2
 80241ee:	697a      	ldr	r2, [r7, #20]
 80241f0:	6812      	ldr	r2, [r2, #0]
 80241f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80241f4:	430b      	orrs	r3, r1
 80241f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80241f8:	697b      	ldr	r3, [r7, #20]
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80241fe:	f023 010f 	bic.w	r1, r3, #15
 8024202:	697b      	ldr	r3, [r7, #20]
 8024204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8024206:	697b      	ldr	r3, [r7, #20]
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	430a      	orrs	r2, r1
 802420c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802420e:	697b      	ldr	r3, [r7, #20]
 8024210:	681b      	ldr	r3, [r3, #0]
 8024212:	4aa6      	ldr	r2, [pc, #664]	@ (80244ac <UART_SetConfig+0x334>)
 8024214:	4293      	cmp	r3, r2
 8024216:	d177      	bne.n	8024308 <UART_SetConfig+0x190>
 8024218:	4ba5      	ldr	r3, [pc, #660]	@ (80244b0 <UART_SetConfig+0x338>)
 802421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802421c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8024220:	2b28      	cmp	r3, #40	@ 0x28
 8024222:	d86d      	bhi.n	8024300 <UART_SetConfig+0x188>
 8024224:	a201      	add	r2, pc, #4	@ (adr r2, 802422c <UART_SetConfig+0xb4>)
 8024226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802422a:	bf00      	nop
 802422c:	080242d1 	.word	0x080242d1
 8024230:	08024301 	.word	0x08024301
 8024234:	08024301 	.word	0x08024301
 8024238:	08024301 	.word	0x08024301
 802423c:	08024301 	.word	0x08024301
 8024240:	08024301 	.word	0x08024301
 8024244:	08024301 	.word	0x08024301
 8024248:	08024301 	.word	0x08024301
 802424c:	080242d9 	.word	0x080242d9
 8024250:	08024301 	.word	0x08024301
 8024254:	08024301 	.word	0x08024301
 8024258:	08024301 	.word	0x08024301
 802425c:	08024301 	.word	0x08024301
 8024260:	08024301 	.word	0x08024301
 8024264:	08024301 	.word	0x08024301
 8024268:	08024301 	.word	0x08024301
 802426c:	080242e1 	.word	0x080242e1
 8024270:	08024301 	.word	0x08024301
 8024274:	08024301 	.word	0x08024301
 8024278:	08024301 	.word	0x08024301
 802427c:	08024301 	.word	0x08024301
 8024280:	08024301 	.word	0x08024301
 8024284:	08024301 	.word	0x08024301
 8024288:	08024301 	.word	0x08024301
 802428c:	080242e9 	.word	0x080242e9
 8024290:	08024301 	.word	0x08024301
 8024294:	08024301 	.word	0x08024301
 8024298:	08024301 	.word	0x08024301
 802429c:	08024301 	.word	0x08024301
 80242a0:	08024301 	.word	0x08024301
 80242a4:	08024301 	.word	0x08024301
 80242a8:	08024301 	.word	0x08024301
 80242ac:	080242f1 	.word	0x080242f1
 80242b0:	08024301 	.word	0x08024301
 80242b4:	08024301 	.word	0x08024301
 80242b8:	08024301 	.word	0x08024301
 80242bc:	08024301 	.word	0x08024301
 80242c0:	08024301 	.word	0x08024301
 80242c4:	08024301 	.word	0x08024301
 80242c8:	08024301 	.word	0x08024301
 80242cc:	080242f9 	.word	0x080242f9
 80242d0:	2301      	movs	r3, #1
 80242d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242d6:	e222      	b.n	802471e <UART_SetConfig+0x5a6>
 80242d8:	2304      	movs	r3, #4
 80242da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242de:	e21e      	b.n	802471e <UART_SetConfig+0x5a6>
 80242e0:	2308      	movs	r3, #8
 80242e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242e6:	e21a      	b.n	802471e <UART_SetConfig+0x5a6>
 80242e8:	2310      	movs	r3, #16
 80242ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242ee:	e216      	b.n	802471e <UART_SetConfig+0x5a6>
 80242f0:	2320      	movs	r3, #32
 80242f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242f6:	e212      	b.n	802471e <UART_SetConfig+0x5a6>
 80242f8:	2340      	movs	r3, #64	@ 0x40
 80242fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242fe:	e20e      	b.n	802471e <UART_SetConfig+0x5a6>
 8024300:	2380      	movs	r3, #128	@ 0x80
 8024302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024306:	e20a      	b.n	802471e <UART_SetConfig+0x5a6>
 8024308:	697b      	ldr	r3, [r7, #20]
 802430a:	681b      	ldr	r3, [r3, #0]
 802430c:	4a69      	ldr	r2, [pc, #420]	@ (80244b4 <UART_SetConfig+0x33c>)
 802430e:	4293      	cmp	r3, r2
 8024310:	d130      	bne.n	8024374 <UART_SetConfig+0x1fc>
 8024312:	4b67      	ldr	r3, [pc, #412]	@ (80244b0 <UART_SetConfig+0x338>)
 8024314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024316:	f003 0307 	and.w	r3, r3, #7
 802431a:	2b05      	cmp	r3, #5
 802431c:	d826      	bhi.n	802436c <UART_SetConfig+0x1f4>
 802431e:	a201      	add	r2, pc, #4	@ (adr r2, 8024324 <UART_SetConfig+0x1ac>)
 8024320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024324:	0802433d 	.word	0x0802433d
 8024328:	08024345 	.word	0x08024345
 802432c:	0802434d 	.word	0x0802434d
 8024330:	08024355 	.word	0x08024355
 8024334:	0802435d 	.word	0x0802435d
 8024338:	08024365 	.word	0x08024365
 802433c:	2300      	movs	r3, #0
 802433e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024342:	e1ec      	b.n	802471e <UART_SetConfig+0x5a6>
 8024344:	2304      	movs	r3, #4
 8024346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802434a:	e1e8      	b.n	802471e <UART_SetConfig+0x5a6>
 802434c:	2308      	movs	r3, #8
 802434e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024352:	e1e4      	b.n	802471e <UART_SetConfig+0x5a6>
 8024354:	2310      	movs	r3, #16
 8024356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802435a:	e1e0      	b.n	802471e <UART_SetConfig+0x5a6>
 802435c:	2320      	movs	r3, #32
 802435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024362:	e1dc      	b.n	802471e <UART_SetConfig+0x5a6>
 8024364:	2340      	movs	r3, #64	@ 0x40
 8024366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802436a:	e1d8      	b.n	802471e <UART_SetConfig+0x5a6>
 802436c:	2380      	movs	r3, #128	@ 0x80
 802436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024372:	e1d4      	b.n	802471e <UART_SetConfig+0x5a6>
 8024374:	697b      	ldr	r3, [r7, #20]
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	4a4f      	ldr	r2, [pc, #316]	@ (80244b8 <UART_SetConfig+0x340>)
 802437a:	4293      	cmp	r3, r2
 802437c:	d130      	bne.n	80243e0 <UART_SetConfig+0x268>
 802437e:	4b4c      	ldr	r3, [pc, #304]	@ (80244b0 <UART_SetConfig+0x338>)
 8024380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024382:	f003 0307 	and.w	r3, r3, #7
 8024386:	2b05      	cmp	r3, #5
 8024388:	d826      	bhi.n	80243d8 <UART_SetConfig+0x260>
 802438a:	a201      	add	r2, pc, #4	@ (adr r2, 8024390 <UART_SetConfig+0x218>)
 802438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024390:	080243a9 	.word	0x080243a9
 8024394:	080243b1 	.word	0x080243b1
 8024398:	080243b9 	.word	0x080243b9
 802439c:	080243c1 	.word	0x080243c1
 80243a0:	080243c9 	.word	0x080243c9
 80243a4:	080243d1 	.word	0x080243d1
 80243a8:	2300      	movs	r3, #0
 80243aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ae:	e1b6      	b.n	802471e <UART_SetConfig+0x5a6>
 80243b0:	2304      	movs	r3, #4
 80243b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243b6:	e1b2      	b.n	802471e <UART_SetConfig+0x5a6>
 80243b8:	2308      	movs	r3, #8
 80243ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243be:	e1ae      	b.n	802471e <UART_SetConfig+0x5a6>
 80243c0:	2310      	movs	r3, #16
 80243c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243c6:	e1aa      	b.n	802471e <UART_SetConfig+0x5a6>
 80243c8:	2320      	movs	r3, #32
 80243ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ce:	e1a6      	b.n	802471e <UART_SetConfig+0x5a6>
 80243d0:	2340      	movs	r3, #64	@ 0x40
 80243d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243d6:	e1a2      	b.n	802471e <UART_SetConfig+0x5a6>
 80243d8:	2380      	movs	r3, #128	@ 0x80
 80243da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243de:	e19e      	b.n	802471e <UART_SetConfig+0x5a6>
 80243e0:	697b      	ldr	r3, [r7, #20]
 80243e2:	681b      	ldr	r3, [r3, #0]
 80243e4:	4a35      	ldr	r2, [pc, #212]	@ (80244bc <UART_SetConfig+0x344>)
 80243e6:	4293      	cmp	r3, r2
 80243e8:	d130      	bne.n	802444c <UART_SetConfig+0x2d4>
 80243ea:	4b31      	ldr	r3, [pc, #196]	@ (80244b0 <UART_SetConfig+0x338>)
 80243ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80243ee:	f003 0307 	and.w	r3, r3, #7
 80243f2:	2b05      	cmp	r3, #5
 80243f4:	d826      	bhi.n	8024444 <UART_SetConfig+0x2cc>
 80243f6:	a201      	add	r2, pc, #4	@ (adr r2, 80243fc <UART_SetConfig+0x284>)
 80243f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243fc:	08024415 	.word	0x08024415
 8024400:	0802441d 	.word	0x0802441d
 8024404:	08024425 	.word	0x08024425
 8024408:	0802442d 	.word	0x0802442d
 802440c:	08024435 	.word	0x08024435
 8024410:	0802443d 	.word	0x0802443d
 8024414:	2300      	movs	r3, #0
 8024416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802441a:	e180      	b.n	802471e <UART_SetConfig+0x5a6>
 802441c:	2304      	movs	r3, #4
 802441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024422:	e17c      	b.n	802471e <UART_SetConfig+0x5a6>
 8024424:	2308      	movs	r3, #8
 8024426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802442a:	e178      	b.n	802471e <UART_SetConfig+0x5a6>
 802442c:	2310      	movs	r3, #16
 802442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024432:	e174      	b.n	802471e <UART_SetConfig+0x5a6>
 8024434:	2320      	movs	r3, #32
 8024436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802443a:	e170      	b.n	802471e <UART_SetConfig+0x5a6>
 802443c:	2340      	movs	r3, #64	@ 0x40
 802443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024442:	e16c      	b.n	802471e <UART_SetConfig+0x5a6>
 8024444:	2380      	movs	r3, #128	@ 0x80
 8024446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802444a:	e168      	b.n	802471e <UART_SetConfig+0x5a6>
 802444c:	697b      	ldr	r3, [r7, #20]
 802444e:	681b      	ldr	r3, [r3, #0]
 8024450:	4a1b      	ldr	r2, [pc, #108]	@ (80244c0 <UART_SetConfig+0x348>)
 8024452:	4293      	cmp	r3, r2
 8024454:	d142      	bne.n	80244dc <UART_SetConfig+0x364>
 8024456:	4b16      	ldr	r3, [pc, #88]	@ (80244b0 <UART_SetConfig+0x338>)
 8024458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802445a:	f003 0307 	and.w	r3, r3, #7
 802445e:	2b05      	cmp	r3, #5
 8024460:	d838      	bhi.n	80244d4 <UART_SetConfig+0x35c>
 8024462:	a201      	add	r2, pc, #4	@ (adr r2, 8024468 <UART_SetConfig+0x2f0>)
 8024464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024468:	08024481 	.word	0x08024481
 802446c:	08024489 	.word	0x08024489
 8024470:	08024491 	.word	0x08024491
 8024474:	08024499 	.word	0x08024499
 8024478:	080244c5 	.word	0x080244c5
 802447c:	080244cd 	.word	0x080244cd
 8024480:	2300      	movs	r3, #0
 8024482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024486:	e14a      	b.n	802471e <UART_SetConfig+0x5a6>
 8024488:	2304      	movs	r3, #4
 802448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802448e:	e146      	b.n	802471e <UART_SetConfig+0x5a6>
 8024490:	2308      	movs	r3, #8
 8024492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024496:	e142      	b.n	802471e <UART_SetConfig+0x5a6>
 8024498:	2310      	movs	r3, #16
 802449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802449e:	e13e      	b.n	802471e <UART_SetConfig+0x5a6>
 80244a0:	cfff69f3 	.word	0xcfff69f3
 80244a4:	58000c00 	.word	0x58000c00
 80244a8:	11fff4ff 	.word	0x11fff4ff
 80244ac:	40011000 	.word	0x40011000
 80244b0:	58024400 	.word	0x58024400
 80244b4:	40004400 	.word	0x40004400
 80244b8:	40004800 	.word	0x40004800
 80244bc:	40004c00 	.word	0x40004c00
 80244c0:	40005000 	.word	0x40005000
 80244c4:	2320      	movs	r3, #32
 80244c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244ca:	e128      	b.n	802471e <UART_SetConfig+0x5a6>
 80244cc:	2340      	movs	r3, #64	@ 0x40
 80244ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244d2:	e124      	b.n	802471e <UART_SetConfig+0x5a6>
 80244d4:	2380      	movs	r3, #128	@ 0x80
 80244d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244da:	e120      	b.n	802471e <UART_SetConfig+0x5a6>
 80244dc:	697b      	ldr	r3, [r7, #20]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	4acb      	ldr	r2, [pc, #812]	@ (8024810 <UART_SetConfig+0x698>)
 80244e2:	4293      	cmp	r3, r2
 80244e4:	d176      	bne.n	80245d4 <UART_SetConfig+0x45c>
 80244e6:	4bcb      	ldr	r3, [pc, #812]	@ (8024814 <UART_SetConfig+0x69c>)
 80244e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80244ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80244ee:	2b28      	cmp	r3, #40	@ 0x28
 80244f0:	d86c      	bhi.n	80245cc <UART_SetConfig+0x454>
 80244f2:	a201      	add	r2, pc, #4	@ (adr r2, 80244f8 <UART_SetConfig+0x380>)
 80244f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244f8:	0802459d 	.word	0x0802459d
 80244fc:	080245cd 	.word	0x080245cd
 8024500:	080245cd 	.word	0x080245cd
 8024504:	080245cd 	.word	0x080245cd
 8024508:	080245cd 	.word	0x080245cd
 802450c:	080245cd 	.word	0x080245cd
 8024510:	080245cd 	.word	0x080245cd
 8024514:	080245cd 	.word	0x080245cd
 8024518:	080245a5 	.word	0x080245a5
 802451c:	080245cd 	.word	0x080245cd
 8024520:	080245cd 	.word	0x080245cd
 8024524:	080245cd 	.word	0x080245cd
 8024528:	080245cd 	.word	0x080245cd
 802452c:	080245cd 	.word	0x080245cd
 8024530:	080245cd 	.word	0x080245cd
 8024534:	080245cd 	.word	0x080245cd
 8024538:	080245ad 	.word	0x080245ad
 802453c:	080245cd 	.word	0x080245cd
 8024540:	080245cd 	.word	0x080245cd
 8024544:	080245cd 	.word	0x080245cd
 8024548:	080245cd 	.word	0x080245cd
 802454c:	080245cd 	.word	0x080245cd
 8024550:	080245cd 	.word	0x080245cd
 8024554:	080245cd 	.word	0x080245cd
 8024558:	080245b5 	.word	0x080245b5
 802455c:	080245cd 	.word	0x080245cd
 8024560:	080245cd 	.word	0x080245cd
 8024564:	080245cd 	.word	0x080245cd
 8024568:	080245cd 	.word	0x080245cd
 802456c:	080245cd 	.word	0x080245cd
 8024570:	080245cd 	.word	0x080245cd
 8024574:	080245cd 	.word	0x080245cd
 8024578:	080245bd 	.word	0x080245bd
 802457c:	080245cd 	.word	0x080245cd
 8024580:	080245cd 	.word	0x080245cd
 8024584:	080245cd 	.word	0x080245cd
 8024588:	080245cd 	.word	0x080245cd
 802458c:	080245cd 	.word	0x080245cd
 8024590:	080245cd 	.word	0x080245cd
 8024594:	080245cd 	.word	0x080245cd
 8024598:	080245c5 	.word	0x080245c5
 802459c:	2301      	movs	r3, #1
 802459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245a2:	e0bc      	b.n	802471e <UART_SetConfig+0x5a6>
 80245a4:	2304      	movs	r3, #4
 80245a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245aa:	e0b8      	b.n	802471e <UART_SetConfig+0x5a6>
 80245ac:	2308      	movs	r3, #8
 80245ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245b2:	e0b4      	b.n	802471e <UART_SetConfig+0x5a6>
 80245b4:	2310      	movs	r3, #16
 80245b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ba:	e0b0      	b.n	802471e <UART_SetConfig+0x5a6>
 80245bc:	2320      	movs	r3, #32
 80245be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245c2:	e0ac      	b.n	802471e <UART_SetConfig+0x5a6>
 80245c4:	2340      	movs	r3, #64	@ 0x40
 80245c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ca:	e0a8      	b.n	802471e <UART_SetConfig+0x5a6>
 80245cc:	2380      	movs	r3, #128	@ 0x80
 80245ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245d2:	e0a4      	b.n	802471e <UART_SetConfig+0x5a6>
 80245d4:	697b      	ldr	r3, [r7, #20]
 80245d6:	681b      	ldr	r3, [r3, #0]
 80245d8:	4a8f      	ldr	r2, [pc, #572]	@ (8024818 <UART_SetConfig+0x6a0>)
 80245da:	4293      	cmp	r3, r2
 80245dc:	d130      	bne.n	8024640 <UART_SetConfig+0x4c8>
 80245de:	4b8d      	ldr	r3, [pc, #564]	@ (8024814 <UART_SetConfig+0x69c>)
 80245e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80245e2:	f003 0307 	and.w	r3, r3, #7
 80245e6:	2b05      	cmp	r3, #5
 80245e8:	d826      	bhi.n	8024638 <UART_SetConfig+0x4c0>
 80245ea:	a201      	add	r2, pc, #4	@ (adr r2, 80245f0 <UART_SetConfig+0x478>)
 80245ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80245f0:	08024609 	.word	0x08024609
 80245f4:	08024611 	.word	0x08024611
 80245f8:	08024619 	.word	0x08024619
 80245fc:	08024621 	.word	0x08024621
 8024600:	08024629 	.word	0x08024629
 8024604:	08024631 	.word	0x08024631
 8024608:	2300      	movs	r3, #0
 802460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802460e:	e086      	b.n	802471e <UART_SetConfig+0x5a6>
 8024610:	2304      	movs	r3, #4
 8024612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024616:	e082      	b.n	802471e <UART_SetConfig+0x5a6>
 8024618:	2308      	movs	r3, #8
 802461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802461e:	e07e      	b.n	802471e <UART_SetConfig+0x5a6>
 8024620:	2310      	movs	r3, #16
 8024622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024626:	e07a      	b.n	802471e <UART_SetConfig+0x5a6>
 8024628:	2320      	movs	r3, #32
 802462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802462e:	e076      	b.n	802471e <UART_SetConfig+0x5a6>
 8024630:	2340      	movs	r3, #64	@ 0x40
 8024632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024636:	e072      	b.n	802471e <UART_SetConfig+0x5a6>
 8024638:	2380      	movs	r3, #128	@ 0x80
 802463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802463e:	e06e      	b.n	802471e <UART_SetConfig+0x5a6>
 8024640:	697b      	ldr	r3, [r7, #20]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	4a75      	ldr	r2, [pc, #468]	@ (802481c <UART_SetConfig+0x6a4>)
 8024646:	4293      	cmp	r3, r2
 8024648:	d130      	bne.n	80246ac <UART_SetConfig+0x534>
 802464a:	4b72      	ldr	r3, [pc, #456]	@ (8024814 <UART_SetConfig+0x69c>)
 802464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802464e:	f003 0307 	and.w	r3, r3, #7
 8024652:	2b05      	cmp	r3, #5
 8024654:	d826      	bhi.n	80246a4 <UART_SetConfig+0x52c>
 8024656:	a201      	add	r2, pc, #4	@ (adr r2, 802465c <UART_SetConfig+0x4e4>)
 8024658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802465c:	08024675 	.word	0x08024675
 8024660:	0802467d 	.word	0x0802467d
 8024664:	08024685 	.word	0x08024685
 8024668:	0802468d 	.word	0x0802468d
 802466c:	08024695 	.word	0x08024695
 8024670:	0802469d 	.word	0x0802469d
 8024674:	2300      	movs	r3, #0
 8024676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802467a:	e050      	b.n	802471e <UART_SetConfig+0x5a6>
 802467c:	2304      	movs	r3, #4
 802467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024682:	e04c      	b.n	802471e <UART_SetConfig+0x5a6>
 8024684:	2308      	movs	r3, #8
 8024686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802468a:	e048      	b.n	802471e <UART_SetConfig+0x5a6>
 802468c:	2310      	movs	r3, #16
 802468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024692:	e044      	b.n	802471e <UART_SetConfig+0x5a6>
 8024694:	2320      	movs	r3, #32
 8024696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802469a:	e040      	b.n	802471e <UART_SetConfig+0x5a6>
 802469c:	2340      	movs	r3, #64	@ 0x40
 802469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246a2:	e03c      	b.n	802471e <UART_SetConfig+0x5a6>
 80246a4:	2380      	movs	r3, #128	@ 0x80
 80246a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246aa:	e038      	b.n	802471e <UART_SetConfig+0x5a6>
 80246ac:	697b      	ldr	r3, [r7, #20]
 80246ae:	681b      	ldr	r3, [r3, #0]
 80246b0:	4a5b      	ldr	r2, [pc, #364]	@ (8024820 <UART_SetConfig+0x6a8>)
 80246b2:	4293      	cmp	r3, r2
 80246b4:	d130      	bne.n	8024718 <UART_SetConfig+0x5a0>
 80246b6:	4b57      	ldr	r3, [pc, #348]	@ (8024814 <UART_SetConfig+0x69c>)
 80246b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80246ba:	f003 0307 	and.w	r3, r3, #7
 80246be:	2b05      	cmp	r3, #5
 80246c0:	d826      	bhi.n	8024710 <UART_SetConfig+0x598>
 80246c2:	a201      	add	r2, pc, #4	@ (adr r2, 80246c8 <UART_SetConfig+0x550>)
 80246c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80246c8:	080246e1 	.word	0x080246e1
 80246cc:	080246e9 	.word	0x080246e9
 80246d0:	080246f1 	.word	0x080246f1
 80246d4:	080246f9 	.word	0x080246f9
 80246d8:	08024701 	.word	0x08024701
 80246dc:	08024709 	.word	0x08024709
 80246e0:	2302      	movs	r3, #2
 80246e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246e6:	e01a      	b.n	802471e <UART_SetConfig+0x5a6>
 80246e8:	2304      	movs	r3, #4
 80246ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246ee:	e016      	b.n	802471e <UART_SetConfig+0x5a6>
 80246f0:	2308      	movs	r3, #8
 80246f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246f6:	e012      	b.n	802471e <UART_SetConfig+0x5a6>
 80246f8:	2310      	movs	r3, #16
 80246fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246fe:	e00e      	b.n	802471e <UART_SetConfig+0x5a6>
 8024700:	2320      	movs	r3, #32
 8024702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024706:	e00a      	b.n	802471e <UART_SetConfig+0x5a6>
 8024708:	2340      	movs	r3, #64	@ 0x40
 802470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802470e:	e006      	b.n	802471e <UART_SetConfig+0x5a6>
 8024710:	2380      	movs	r3, #128	@ 0x80
 8024712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024716:	e002      	b.n	802471e <UART_SetConfig+0x5a6>
 8024718:	2380      	movs	r3, #128	@ 0x80
 802471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802471e:	697b      	ldr	r3, [r7, #20]
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	4a3f      	ldr	r2, [pc, #252]	@ (8024820 <UART_SetConfig+0x6a8>)
 8024724:	4293      	cmp	r3, r2
 8024726:	f040 80f8 	bne.w	802491a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802472a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802472e:	2b20      	cmp	r3, #32
 8024730:	dc46      	bgt.n	80247c0 <UART_SetConfig+0x648>
 8024732:	2b02      	cmp	r3, #2
 8024734:	f2c0 8082 	blt.w	802483c <UART_SetConfig+0x6c4>
 8024738:	3b02      	subs	r3, #2
 802473a:	2b1e      	cmp	r3, #30
 802473c:	d87e      	bhi.n	802483c <UART_SetConfig+0x6c4>
 802473e:	a201      	add	r2, pc, #4	@ (adr r2, 8024744 <UART_SetConfig+0x5cc>)
 8024740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024744:	080247c7 	.word	0x080247c7
 8024748:	0802483d 	.word	0x0802483d
 802474c:	080247cf 	.word	0x080247cf
 8024750:	0802483d 	.word	0x0802483d
 8024754:	0802483d 	.word	0x0802483d
 8024758:	0802483d 	.word	0x0802483d
 802475c:	080247df 	.word	0x080247df
 8024760:	0802483d 	.word	0x0802483d
 8024764:	0802483d 	.word	0x0802483d
 8024768:	0802483d 	.word	0x0802483d
 802476c:	0802483d 	.word	0x0802483d
 8024770:	0802483d 	.word	0x0802483d
 8024774:	0802483d 	.word	0x0802483d
 8024778:	0802483d 	.word	0x0802483d
 802477c:	080247ef 	.word	0x080247ef
 8024780:	0802483d 	.word	0x0802483d
 8024784:	0802483d 	.word	0x0802483d
 8024788:	0802483d 	.word	0x0802483d
 802478c:	0802483d 	.word	0x0802483d
 8024790:	0802483d 	.word	0x0802483d
 8024794:	0802483d 	.word	0x0802483d
 8024798:	0802483d 	.word	0x0802483d
 802479c:	0802483d 	.word	0x0802483d
 80247a0:	0802483d 	.word	0x0802483d
 80247a4:	0802483d 	.word	0x0802483d
 80247a8:	0802483d 	.word	0x0802483d
 80247ac:	0802483d 	.word	0x0802483d
 80247b0:	0802483d 	.word	0x0802483d
 80247b4:	0802483d 	.word	0x0802483d
 80247b8:	0802483d 	.word	0x0802483d
 80247bc:	0802482f 	.word	0x0802482f
 80247c0:	2b40      	cmp	r3, #64	@ 0x40
 80247c2:	d037      	beq.n	8024834 <UART_SetConfig+0x6bc>
 80247c4:	e03a      	b.n	802483c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80247c6:	f7fd f8d7 	bl	8021978 <HAL_RCCEx_GetD3PCLK1Freq>
 80247ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80247cc:	e03c      	b.n	8024848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80247ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80247d2:	4618      	mov	r0, r3
 80247d4:	f7fd f8e6 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80247d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80247da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80247dc:	e034      	b.n	8024848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80247de:	f107 0318 	add.w	r3, r7, #24
 80247e2:	4618      	mov	r0, r3
 80247e4:	f7fd fa32 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80247e8:	69fb      	ldr	r3, [r7, #28]
 80247ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80247ec:	e02c      	b.n	8024848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80247ee:	4b09      	ldr	r3, [pc, #36]	@ (8024814 <UART_SetConfig+0x69c>)
 80247f0:	681b      	ldr	r3, [r3, #0]
 80247f2:	f003 0320 	and.w	r3, r3, #32
 80247f6:	2b00      	cmp	r3, #0
 80247f8:	d016      	beq.n	8024828 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80247fa:	4b06      	ldr	r3, [pc, #24]	@ (8024814 <UART_SetConfig+0x69c>)
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	08db      	lsrs	r3, r3, #3
 8024800:	f003 0303 	and.w	r3, r3, #3
 8024804:	4a07      	ldr	r2, [pc, #28]	@ (8024824 <UART_SetConfig+0x6ac>)
 8024806:	fa22 f303 	lsr.w	r3, r2, r3
 802480a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802480c:	e01c      	b.n	8024848 <UART_SetConfig+0x6d0>
 802480e:	bf00      	nop
 8024810:	40011400 	.word	0x40011400
 8024814:	58024400 	.word	0x58024400
 8024818:	40007800 	.word	0x40007800
 802481c:	40007c00 	.word	0x40007c00
 8024820:	58000c00 	.word	0x58000c00
 8024824:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8024828:	4b9d      	ldr	r3, [pc, #628]	@ (8024aa0 <UART_SetConfig+0x928>)
 802482a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802482c:	e00c      	b.n	8024848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802482e:	4b9d      	ldr	r3, [pc, #628]	@ (8024aa4 <UART_SetConfig+0x92c>)
 8024830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024832:	e009      	b.n	8024848 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802483a:	e005      	b.n	8024848 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802483c:	2300      	movs	r3, #0
 802483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024840:	2301      	movs	r3, #1
 8024842:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024846:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8024848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802484a:	2b00      	cmp	r3, #0
 802484c:	f000 81de 	beq.w	8024c0c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8024850:	697b      	ldr	r3, [r7, #20]
 8024852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024854:	4a94      	ldr	r2, [pc, #592]	@ (8024aa8 <UART_SetConfig+0x930>)
 8024856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802485a:	461a      	mov	r2, r3
 802485c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802485e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024862:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8024864:	697b      	ldr	r3, [r7, #20]
 8024866:	685a      	ldr	r2, [r3, #4]
 8024868:	4613      	mov	r3, r2
 802486a:	005b      	lsls	r3, r3, #1
 802486c:	4413      	add	r3, r2
 802486e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024870:	429a      	cmp	r2, r3
 8024872:	d305      	bcc.n	8024880 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8024874:	697b      	ldr	r3, [r7, #20]
 8024876:	685b      	ldr	r3, [r3, #4]
 8024878:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802487a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802487c:	429a      	cmp	r2, r3
 802487e:	d903      	bls.n	8024888 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8024880:	2301      	movs	r3, #1
 8024882:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024886:	e1c1      	b.n	8024c0c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802488a:	2200      	movs	r2, #0
 802488c:	60bb      	str	r3, [r7, #8]
 802488e:	60fa      	str	r2, [r7, #12]
 8024890:	697b      	ldr	r3, [r7, #20]
 8024892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024894:	4a84      	ldr	r2, [pc, #528]	@ (8024aa8 <UART_SetConfig+0x930>)
 8024896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802489a:	b29b      	uxth	r3, r3
 802489c:	2200      	movs	r2, #0
 802489e:	603b      	str	r3, [r7, #0]
 80248a0:	607a      	str	r2, [r7, #4]
 80248a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80248a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80248aa:	f7dc f84b 	bl	8000944 <__aeabi_uldivmod>
 80248ae:	4602      	mov	r2, r0
 80248b0:	460b      	mov	r3, r1
 80248b2:	4610      	mov	r0, r2
 80248b4:	4619      	mov	r1, r3
 80248b6:	f04f 0200 	mov.w	r2, #0
 80248ba:	f04f 0300 	mov.w	r3, #0
 80248be:	020b      	lsls	r3, r1, #8
 80248c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80248c4:	0202      	lsls	r2, r0, #8
 80248c6:	6979      	ldr	r1, [r7, #20]
 80248c8:	6849      	ldr	r1, [r1, #4]
 80248ca:	0849      	lsrs	r1, r1, #1
 80248cc:	2000      	movs	r0, #0
 80248ce:	460c      	mov	r4, r1
 80248d0:	4605      	mov	r5, r0
 80248d2:	eb12 0804 	adds.w	r8, r2, r4
 80248d6:	eb43 0905 	adc.w	r9, r3, r5
 80248da:	697b      	ldr	r3, [r7, #20]
 80248dc:	685b      	ldr	r3, [r3, #4]
 80248de:	2200      	movs	r2, #0
 80248e0:	469a      	mov	sl, r3
 80248e2:	4693      	mov	fp, r2
 80248e4:	4652      	mov	r2, sl
 80248e6:	465b      	mov	r3, fp
 80248e8:	4640      	mov	r0, r8
 80248ea:	4649      	mov	r1, r9
 80248ec:	f7dc f82a 	bl	8000944 <__aeabi_uldivmod>
 80248f0:	4602      	mov	r2, r0
 80248f2:	460b      	mov	r3, r1
 80248f4:	4613      	mov	r3, r2
 80248f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80248f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80248fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80248fe:	d308      	bcc.n	8024912 <UART_SetConfig+0x79a>
 8024900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024906:	d204      	bcs.n	8024912 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8024908:	697b      	ldr	r3, [r7, #20]
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802490e:	60da      	str	r2, [r3, #12]
 8024910:	e17c      	b.n	8024c0c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8024912:	2301      	movs	r3, #1
 8024914:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024918:	e178      	b.n	8024c0c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802491a:	697b      	ldr	r3, [r7, #20]
 802491c:	69db      	ldr	r3, [r3, #28]
 802491e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8024922:	f040 80c5 	bne.w	8024ab0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8024926:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802492a:	2b20      	cmp	r3, #32
 802492c:	dc48      	bgt.n	80249c0 <UART_SetConfig+0x848>
 802492e:	2b00      	cmp	r3, #0
 8024930:	db7b      	blt.n	8024a2a <UART_SetConfig+0x8b2>
 8024932:	2b20      	cmp	r3, #32
 8024934:	d879      	bhi.n	8024a2a <UART_SetConfig+0x8b2>
 8024936:	a201      	add	r2, pc, #4	@ (adr r2, 802493c <UART_SetConfig+0x7c4>)
 8024938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802493c:	080249c7 	.word	0x080249c7
 8024940:	080249cf 	.word	0x080249cf
 8024944:	08024a2b 	.word	0x08024a2b
 8024948:	08024a2b 	.word	0x08024a2b
 802494c:	080249d7 	.word	0x080249d7
 8024950:	08024a2b 	.word	0x08024a2b
 8024954:	08024a2b 	.word	0x08024a2b
 8024958:	08024a2b 	.word	0x08024a2b
 802495c:	080249e7 	.word	0x080249e7
 8024960:	08024a2b 	.word	0x08024a2b
 8024964:	08024a2b 	.word	0x08024a2b
 8024968:	08024a2b 	.word	0x08024a2b
 802496c:	08024a2b 	.word	0x08024a2b
 8024970:	08024a2b 	.word	0x08024a2b
 8024974:	08024a2b 	.word	0x08024a2b
 8024978:	08024a2b 	.word	0x08024a2b
 802497c:	080249f7 	.word	0x080249f7
 8024980:	08024a2b 	.word	0x08024a2b
 8024984:	08024a2b 	.word	0x08024a2b
 8024988:	08024a2b 	.word	0x08024a2b
 802498c:	08024a2b 	.word	0x08024a2b
 8024990:	08024a2b 	.word	0x08024a2b
 8024994:	08024a2b 	.word	0x08024a2b
 8024998:	08024a2b 	.word	0x08024a2b
 802499c:	08024a2b 	.word	0x08024a2b
 80249a0:	08024a2b 	.word	0x08024a2b
 80249a4:	08024a2b 	.word	0x08024a2b
 80249a8:	08024a2b 	.word	0x08024a2b
 80249ac:	08024a2b 	.word	0x08024a2b
 80249b0:	08024a2b 	.word	0x08024a2b
 80249b4:	08024a2b 	.word	0x08024a2b
 80249b8:	08024a2b 	.word	0x08024a2b
 80249bc:	08024a1d 	.word	0x08024a1d
 80249c0:	2b40      	cmp	r3, #64	@ 0x40
 80249c2:	d02e      	beq.n	8024a22 <UART_SetConfig+0x8aa>
 80249c4:	e031      	b.n	8024a2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80249c6:	f7fb f821 	bl	801fa0c <HAL_RCC_GetPCLK1Freq>
 80249ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80249cc:	e033      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80249ce:	f7fb f833 	bl	801fa38 <HAL_RCC_GetPCLK2Freq>
 80249d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80249d4:	e02f      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80249d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80249da:	4618      	mov	r0, r3
 80249dc:	f7fc ffe2 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80249e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80249e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80249e4:	e027      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80249e6:	f107 0318 	add.w	r3, r7, #24
 80249ea:	4618      	mov	r0, r3
 80249ec:	f7fd f92e 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80249f0:	69fb      	ldr	r3, [r7, #28]
 80249f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80249f4:	e01f      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80249f6:	4b2d      	ldr	r3, [pc, #180]	@ (8024aac <UART_SetConfig+0x934>)
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	f003 0320 	and.w	r3, r3, #32
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d009      	beq.n	8024a16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024a02:	4b2a      	ldr	r3, [pc, #168]	@ (8024aac <UART_SetConfig+0x934>)
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	08db      	lsrs	r3, r3, #3
 8024a08:	f003 0303 	and.w	r3, r3, #3
 8024a0c:	4a24      	ldr	r2, [pc, #144]	@ (8024aa0 <UART_SetConfig+0x928>)
 8024a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8024a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024a14:	e00f      	b.n	8024a36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8024a16:	4b22      	ldr	r3, [pc, #136]	@ (8024aa0 <UART_SetConfig+0x928>)
 8024a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a1a:	e00c      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024a1c:	4b21      	ldr	r3, [pc, #132]	@ (8024aa4 <UART_SetConfig+0x92c>)
 8024a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a20:	e009      	b.n	8024a36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a28:	e005      	b.n	8024a36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8024a2a:	2300      	movs	r3, #0
 8024a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024a2e:	2301      	movs	r3, #1
 8024a30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8024a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	f000 80e7 	beq.w	8024c0c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024a3e:	697b      	ldr	r3, [r7, #20]
 8024a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024a42:	4a19      	ldr	r2, [pc, #100]	@ (8024aa8 <UART_SetConfig+0x930>)
 8024a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024a48:	461a      	mov	r2, r3
 8024a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8024a50:	005a      	lsls	r2, r3, #1
 8024a52:	697b      	ldr	r3, [r7, #20]
 8024a54:	685b      	ldr	r3, [r3, #4]
 8024a56:	085b      	lsrs	r3, r3, #1
 8024a58:	441a      	add	r2, r3
 8024a5a:	697b      	ldr	r3, [r7, #20]
 8024a5c:	685b      	ldr	r3, [r3, #4]
 8024a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024a62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024a66:	2b0f      	cmp	r3, #15
 8024a68:	d916      	bls.n	8024a98 <UART_SetConfig+0x920>
 8024a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024a70:	d212      	bcs.n	8024a98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8024a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024a74:	b29b      	uxth	r3, r3
 8024a76:	f023 030f 	bic.w	r3, r3, #15
 8024a7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8024a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024a7e:	085b      	lsrs	r3, r3, #1
 8024a80:	b29b      	uxth	r3, r3
 8024a82:	f003 0307 	and.w	r3, r3, #7
 8024a86:	b29a      	uxth	r2, r3
 8024a88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024a8a:	4313      	orrs	r3, r2
 8024a8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8024a8e:	697b      	ldr	r3, [r7, #20]
 8024a90:	681b      	ldr	r3, [r3, #0]
 8024a92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8024a94:	60da      	str	r2, [r3, #12]
 8024a96:	e0b9      	b.n	8024c0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024a98:	2301      	movs	r3, #1
 8024a9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024a9e:	e0b5      	b.n	8024c0c <UART_SetConfig+0xa94>
 8024aa0:	03d09000 	.word	0x03d09000
 8024aa4:	003d0900 	.word	0x003d0900
 8024aa8:	0802b708 	.word	0x0802b708
 8024aac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8024ab0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8024ab4:	2b20      	cmp	r3, #32
 8024ab6:	dc49      	bgt.n	8024b4c <UART_SetConfig+0x9d4>
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	db7c      	blt.n	8024bb6 <UART_SetConfig+0xa3e>
 8024abc:	2b20      	cmp	r3, #32
 8024abe:	d87a      	bhi.n	8024bb6 <UART_SetConfig+0xa3e>
 8024ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8024ac8 <UART_SetConfig+0x950>)
 8024ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ac6:	bf00      	nop
 8024ac8:	08024b53 	.word	0x08024b53
 8024acc:	08024b5b 	.word	0x08024b5b
 8024ad0:	08024bb7 	.word	0x08024bb7
 8024ad4:	08024bb7 	.word	0x08024bb7
 8024ad8:	08024b63 	.word	0x08024b63
 8024adc:	08024bb7 	.word	0x08024bb7
 8024ae0:	08024bb7 	.word	0x08024bb7
 8024ae4:	08024bb7 	.word	0x08024bb7
 8024ae8:	08024b73 	.word	0x08024b73
 8024aec:	08024bb7 	.word	0x08024bb7
 8024af0:	08024bb7 	.word	0x08024bb7
 8024af4:	08024bb7 	.word	0x08024bb7
 8024af8:	08024bb7 	.word	0x08024bb7
 8024afc:	08024bb7 	.word	0x08024bb7
 8024b00:	08024bb7 	.word	0x08024bb7
 8024b04:	08024bb7 	.word	0x08024bb7
 8024b08:	08024b83 	.word	0x08024b83
 8024b0c:	08024bb7 	.word	0x08024bb7
 8024b10:	08024bb7 	.word	0x08024bb7
 8024b14:	08024bb7 	.word	0x08024bb7
 8024b18:	08024bb7 	.word	0x08024bb7
 8024b1c:	08024bb7 	.word	0x08024bb7
 8024b20:	08024bb7 	.word	0x08024bb7
 8024b24:	08024bb7 	.word	0x08024bb7
 8024b28:	08024bb7 	.word	0x08024bb7
 8024b2c:	08024bb7 	.word	0x08024bb7
 8024b30:	08024bb7 	.word	0x08024bb7
 8024b34:	08024bb7 	.word	0x08024bb7
 8024b38:	08024bb7 	.word	0x08024bb7
 8024b3c:	08024bb7 	.word	0x08024bb7
 8024b40:	08024bb7 	.word	0x08024bb7
 8024b44:	08024bb7 	.word	0x08024bb7
 8024b48:	08024ba9 	.word	0x08024ba9
 8024b4c:	2b40      	cmp	r3, #64	@ 0x40
 8024b4e:	d02e      	beq.n	8024bae <UART_SetConfig+0xa36>
 8024b50:	e031      	b.n	8024bb6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8024b52:	f7fa ff5b 	bl	801fa0c <HAL_RCC_GetPCLK1Freq>
 8024b56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024b58:	e033      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8024b5a:	f7fa ff6d 	bl	801fa38 <HAL_RCC_GetPCLK2Freq>
 8024b5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024b60:	e02f      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024b66:	4618      	mov	r0, r3
 8024b68:	f7fc ff1c 	bl	80219a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024b70:	e027      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024b72:	f107 0318 	add.w	r3, r7, #24
 8024b76:	4618      	mov	r0, r3
 8024b78:	f7fd f868 	bl	8021c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024b7c:	69fb      	ldr	r3, [r7, #28]
 8024b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024b80:	e01f      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024b82:	4b2d      	ldr	r3, [pc, #180]	@ (8024c38 <UART_SetConfig+0xac0>)
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	f003 0320 	and.w	r3, r3, #32
 8024b8a:	2b00      	cmp	r3, #0
 8024b8c:	d009      	beq.n	8024ba2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8024c38 <UART_SetConfig+0xac0>)
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	08db      	lsrs	r3, r3, #3
 8024b94:	f003 0303 	and.w	r3, r3, #3
 8024b98:	4a28      	ldr	r2, [pc, #160]	@ (8024c3c <UART_SetConfig+0xac4>)
 8024b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8024b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024ba0:	e00f      	b.n	8024bc2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8024ba2:	4b26      	ldr	r3, [pc, #152]	@ (8024c3c <UART_SetConfig+0xac4>)
 8024ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024ba6:	e00c      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024ba8:	4b25      	ldr	r3, [pc, #148]	@ (8024c40 <UART_SetConfig+0xac8>)
 8024baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024bac:	e009      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024bb4:	e005      	b.n	8024bc2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8024bb6:	2300      	movs	r3, #0
 8024bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024bba:	2301      	movs	r3, #1
 8024bbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024bc0:	bf00      	nop
    }

    if (pclk != 0U)
 8024bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	d021      	beq.n	8024c0c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024bc8:	697b      	ldr	r3, [r7, #20]
 8024bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8024c44 <UART_SetConfig+0xacc>)
 8024bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024bd2:	461a      	mov	r2, r3
 8024bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8024bda:	697b      	ldr	r3, [r7, #20]
 8024bdc:	685b      	ldr	r3, [r3, #4]
 8024bde:	085b      	lsrs	r3, r3, #1
 8024be0:	441a      	add	r2, r3
 8024be2:	697b      	ldr	r3, [r7, #20]
 8024be4:	685b      	ldr	r3, [r3, #4]
 8024be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8024bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024bee:	2b0f      	cmp	r3, #15
 8024bf0:	d909      	bls.n	8024c06 <UART_SetConfig+0xa8e>
 8024bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024bf8:	d205      	bcs.n	8024c06 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8024bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024bfc:	b29a      	uxth	r2, r3
 8024bfe:	697b      	ldr	r3, [r7, #20]
 8024c00:	681b      	ldr	r3, [r3, #0]
 8024c02:	60da      	str	r2, [r3, #12]
 8024c04:	e002      	b.n	8024c0c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024c06:	2301      	movs	r3, #1
 8024c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8024c0c:	697b      	ldr	r3, [r7, #20]
 8024c0e:	2201      	movs	r2, #1
 8024c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8024c14:	697b      	ldr	r3, [r7, #20]
 8024c16:	2201      	movs	r2, #1
 8024c18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8024c1c:	697b      	ldr	r3, [r7, #20]
 8024c1e:	2200      	movs	r2, #0
 8024c20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8024c22:	697b      	ldr	r3, [r7, #20]
 8024c24:	2200      	movs	r2, #0
 8024c26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8024c28:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8024c2c:	4618      	mov	r0, r3
 8024c2e:	3748      	adds	r7, #72	@ 0x48
 8024c30:	46bd      	mov	sp, r7
 8024c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024c36:	bf00      	nop
 8024c38:	58024400 	.word	0x58024400
 8024c3c:	03d09000 	.word	0x03d09000
 8024c40:	003d0900 	.word	0x003d0900
 8024c44:	0802b708 	.word	0x0802b708

08024c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8024c48:	b480      	push	{r7}
 8024c4a:	b083      	sub	sp, #12
 8024c4c:	af00      	add	r7, sp, #0
 8024c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8024c50:	687b      	ldr	r3, [r7, #4]
 8024c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c54:	f003 0308 	and.w	r3, r3, #8
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	d00a      	beq.n	8024c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	685b      	ldr	r3, [r3, #4]
 8024c62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8024c6a:	687b      	ldr	r3, [r7, #4]
 8024c6c:	681b      	ldr	r3, [r3, #0]
 8024c6e:	430a      	orrs	r2, r1
 8024c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024c72:	687b      	ldr	r3, [r7, #4]
 8024c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c76:	f003 0301 	and.w	r3, r3, #1
 8024c7a:	2b00      	cmp	r3, #0
 8024c7c:	d00a      	beq.n	8024c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	685b      	ldr	r3, [r3, #4]
 8024c84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8024c88:	687b      	ldr	r3, [r7, #4]
 8024c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	430a      	orrs	r2, r1
 8024c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c98:	f003 0302 	and.w	r3, r3, #2
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d00a      	beq.n	8024cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	681b      	ldr	r3, [r3, #0]
 8024ca4:	685b      	ldr	r3, [r3, #4]
 8024ca6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8024cae:	687b      	ldr	r3, [r7, #4]
 8024cb0:	681b      	ldr	r3, [r3, #0]
 8024cb2:	430a      	orrs	r2, r1
 8024cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cba:	f003 0304 	and.w	r3, r3, #4
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d00a      	beq.n	8024cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	681b      	ldr	r3, [r3, #0]
 8024cc6:	685b      	ldr	r3, [r3, #4]
 8024cc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	430a      	orrs	r2, r1
 8024cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cdc:	f003 0310 	and.w	r3, r3, #16
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d00a      	beq.n	8024cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	689b      	ldr	r3, [r3, #8]
 8024cea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	430a      	orrs	r2, r1
 8024cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cfe:	f003 0320 	and.w	r3, r3, #32
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	d00a      	beq.n	8024d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	681b      	ldr	r3, [r3, #0]
 8024d0a:	689b      	ldr	r3, [r3, #8]
 8024d0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024d14:	687b      	ldr	r3, [r7, #4]
 8024d16:	681b      	ldr	r3, [r3, #0]
 8024d18:	430a      	orrs	r2, r1
 8024d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024d24:	2b00      	cmp	r3, #0
 8024d26:	d01a      	beq.n	8024d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8024d28:	687b      	ldr	r3, [r7, #4]
 8024d2a:	681b      	ldr	r3, [r3, #0]
 8024d2c:	685b      	ldr	r3, [r3, #4]
 8024d2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8024d32:	687b      	ldr	r3, [r7, #4]
 8024d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	430a      	orrs	r2, r1
 8024d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024d46:	d10a      	bne.n	8024d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8024d48:	687b      	ldr	r3, [r7, #4]
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	685b      	ldr	r3, [r3, #4]
 8024d4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	681b      	ldr	r3, [r3, #0]
 8024d5a:	430a      	orrs	r2, r1
 8024d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	d00a      	beq.n	8024d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	685b      	ldr	r3, [r3, #4]
 8024d70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	681b      	ldr	r3, [r3, #0]
 8024d7c:	430a      	orrs	r2, r1
 8024d7e:	605a      	str	r2, [r3, #4]
  }
}
 8024d80:	bf00      	nop
 8024d82:	370c      	adds	r7, #12
 8024d84:	46bd      	mov	sp, r7
 8024d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d8a:	4770      	bx	lr

08024d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8024d8c:	b580      	push	{r7, lr}
 8024d8e:	b098      	sub	sp, #96	@ 0x60
 8024d90:	af02      	add	r7, sp, #8
 8024d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	2200      	movs	r2, #0
 8024d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8024d9c:	f7f6 ff42 	bl	801bc24 <HAL_GetTick>
 8024da0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	681b      	ldr	r3, [r3, #0]
 8024da8:	f003 0308 	and.w	r3, r3, #8
 8024dac:	2b08      	cmp	r3, #8
 8024dae:	d12f      	bne.n	8024e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024db0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024db4:	9300      	str	r3, [sp, #0]
 8024db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024db8:	2200      	movs	r2, #0
 8024dba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8024dbe:	6878      	ldr	r0, [r7, #4]
 8024dc0:	f000 f88e 	bl	8024ee0 <UART_WaitOnFlagUntilTimeout>
 8024dc4:	4603      	mov	r3, r0
 8024dc6:	2b00      	cmp	r3, #0
 8024dc8:	d022      	beq.n	8024e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024dd2:	e853 3f00 	ldrex	r3, [r3]
 8024dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8024dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8024dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	461a      	mov	r2, r3
 8024de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8024dea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024df0:	e841 2300 	strex	r3, r2, [r1]
 8024df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8024df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024df8:	2b00      	cmp	r3, #0
 8024dfa:	d1e6      	bne.n	8024dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8024dfc:	687b      	ldr	r3, [r7, #4]
 8024dfe:	2220      	movs	r2, #32
 8024e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	2200      	movs	r2, #0
 8024e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024e0c:	2303      	movs	r3, #3
 8024e0e:	e063      	b.n	8024ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	681b      	ldr	r3, [r3, #0]
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	f003 0304 	and.w	r3, r3, #4
 8024e1a:	2b04      	cmp	r3, #4
 8024e1c:	d149      	bne.n	8024eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024e1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024e22:	9300      	str	r3, [sp, #0]
 8024e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024e26:	2200      	movs	r2, #0
 8024e28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8024e2c:	6878      	ldr	r0, [r7, #4]
 8024e2e:	f000 f857 	bl	8024ee0 <UART_WaitOnFlagUntilTimeout>
 8024e32:	4603      	mov	r3, r0
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	d03c      	beq.n	8024eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024e38:	687b      	ldr	r3, [r7, #4]
 8024e3a:	681b      	ldr	r3, [r3, #0]
 8024e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024e40:	e853 3f00 	ldrex	r3, [r3]
 8024e44:	623b      	str	r3, [r7, #32]
   return(result);
 8024e46:	6a3b      	ldr	r3, [r7, #32]
 8024e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	461a      	mov	r2, r3
 8024e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8024e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024e5e:	e841 2300 	strex	r3, r2, [r1]
 8024e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8024e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024e66:	2b00      	cmp	r3, #0
 8024e68:	d1e6      	bne.n	8024e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	681b      	ldr	r3, [r3, #0]
 8024e6e:	3308      	adds	r3, #8
 8024e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024e72:	693b      	ldr	r3, [r7, #16]
 8024e74:	e853 3f00 	ldrex	r3, [r3]
 8024e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8024e7a:	68fb      	ldr	r3, [r7, #12]
 8024e7c:	f023 0301 	bic.w	r3, r3, #1
 8024e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024e82:	687b      	ldr	r3, [r7, #4]
 8024e84:	681b      	ldr	r3, [r3, #0]
 8024e86:	3308      	adds	r3, #8
 8024e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024e8a:	61fa      	str	r2, [r7, #28]
 8024e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024e8e:	69b9      	ldr	r1, [r7, #24]
 8024e90:	69fa      	ldr	r2, [r7, #28]
 8024e92:	e841 2300 	strex	r3, r2, [r1]
 8024e96:	617b      	str	r3, [r7, #20]
   return(result);
 8024e98:	697b      	ldr	r3, [r7, #20]
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	d1e5      	bne.n	8024e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	2220      	movs	r2, #32
 8024ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8024ea6:	687b      	ldr	r3, [r7, #4]
 8024ea8:	2200      	movs	r2, #0
 8024eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024eae:	2303      	movs	r3, #3
 8024eb0:	e012      	b.n	8024ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	2220      	movs	r2, #32
 8024eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	2220      	movs	r2, #32
 8024ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	2200      	movs	r2, #0
 8024ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024ec8:	687b      	ldr	r3, [r7, #4]
 8024eca:	2200      	movs	r2, #0
 8024ecc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	2200      	movs	r2, #0
 8024ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024ed6:	2300      	movs	r3, #0
}
 8024ed8:	4618      	mov	r0, r3
 8024eda:	3758      	adds	r7, #88	@ 0x58
 8024edc:	46bd      	mov	sp, r7
 8024ede:	bd80      	pop	{r7, pc}

08024ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8024ee0:	b580      	push	{r7, lr}
 8024ee2:	b084      	sub	sp, #16
 8024ee4:	af00      	add	r7, sp, #0
 8024ee6:	60f8      	str	r0, [r7, #12]
 8024ee8:	60b9      	str	r1, [r7, #8]
 8024eea:	603b      	str	r3, [r7, #0]
 8024eec:	4613      	mov	r3, r2
 8024eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024ef0:	e04f      	b.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024ef2:	69bb      	ldr	r3, [r7, #24]
 8024ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024ef8:	d04b      	beq.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024efa:	f7f6 fe93 	bl	801bc24 <HAL_GetTick>
 8024efe:	4602      	mov	r2, r0
 8024f00:	683b      	ldr	r3, [r7, #0]
 8024f02:	1ad3      	subs	r3, r2, r3
 8024f04:	69ba      	ldr	r2, [r7, #24]
 8024f06:	429a      	cmp	r2, r3
 8024f08:	d302      	bcc.n	8024f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8024f0a:	69bb      	ldr	r3, [r7, #24]
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d101      	bne.n	8024f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8024f10:	2303      	movs	r3, #3
 8024f12:	e04e      	b.n	8024fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8024f14:	68fb      	ldr	r3, [r7, #12]
 8024f16:	681b      	ldr	r3, [r3, #0]
 8024f18:	681b      	ldr	r3, [r3, #0]
 8024f1a:	f003 0304 	and.w	r3, r3, #4
 8024f1e:	2b00      	cmp	r3, #0
 8024f20:	d037      	beq.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8024f22:	68bb      	ldr	r3, [r7, #8]
 8024f24:	2b80      	cmp	r3, #128	@ 0x80
 8024f26:	d034      	beq.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8024f28:	68bb      	ldr	r3, [r7, #8]
 8024f2a:	2b40      	cmp	r3, #64	@ 0x40
 8024f2c:	d031      	beq.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	69db      	ldr	r3, [r3, #28]
 8024f34:	f003 0308 	and.w	r3, r3, #8
 8024f38:	2b08      	cmp	r3, #8
 8024f3a:	d110      	bne.n	8024f5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8024f3c:	68fb      	ldr	r3, [r7, #12]
 8024f3e:	681b      	ldr	r3, [r3, #0]
 8024f40:	2208      	movs	r2, #8
 8024f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024f44:	68f8      	ldr	r0, [r7, #12]
 8024f46:	f000 f839 	bl	8024fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8024f4a:	68fb      	ldr	r3, [r7, #12]
 8024f4c:	2208      	movs	r2, #8
 8024f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024f52:	68fb      	ldr	r3, [r7, #12]
 8024f54:	2200      	movs	r2, #0
 8024f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8024f5a:	2301      	movs	r3, #1
 8024f5c:	e029      	b.n	8024fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8024f5e:	68fb      	ldr	r3, [r7, #12]
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	69db      	ldr	r3, [r3, #28]
 8024f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8024f6c:	d111      	bne.n	8024f92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8024f6e:	68fb      	ldr	r3, [r7, #12]
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024f78:	68f8      	ldr	r0, [r7, #12]
 8024f7a:	f000 f81f 	bl	8024fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8024f7e:	68fb      	ldr	r3, [r7, #12]
 8024f80:	2220      	movs	r2, #32
 8024f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024f86:	68fb      	ldr	r3, [r7, #12]
 8024f88:	2200      	movs	r2, #0
 8024f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8024f8e:	2303      	movs	r3, #3
 8024f90:	e00f      	b.n	8024fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024f92:	68fb      	ldr	r3, [r7, #12]
 8024f94:	681b      	ldr	r3, [r3, #0]
 8024f96:	69da      	ldr	r2, [r3, #28]
 8024f98:	68bb      	ldr	r3, [r7, #8]
 8024f9a:	4013      	ands	r3, r2
 8024f9c:	68ba      	ldr	r2, [r7, #8]
 8024f9e:	429a      	cmp	r2, r3
 8024fa0:	bf0c      	ite	eq
 8024fa2:	2301      	moveq	r3, #1
 8024fa4:	2300      	movne	r3, #0
 8024fa6:	b2db      	uxtb	r3, r3
 8024fa8:	461a      	mov	r2, r3
 8024faa:	79fb      	ldrb	r3, [r7, #7]
 8024fac:	429a      	cmp	r2, r3
 8024fae:	d0a0      	beq.n	8024ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8024fb0:	2300      	movs	r3, #0
}
 8024fb2:	4618      	mov	r0, r3
 8024fb4:	3710      	adds	r7, #16
 8024fb6:	46bd      	mov	sp, r7
 8024fb8:	bd80      	pop	{r7, pc}
	...

08024fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8024fbc:	b480      	push	{r7}
 8024fbe:	b095      	sub	sp, #84	@ 0x54
 8024fc0:	af00      	add	r7, sp, #0
 8024fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024fc4:	687b      	ldr	r3, [r7, #4]
 8024fc6:	681b      	ldr	r3, [r3, #0]
 8024fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024fcc:	e853 3f00 	ldrex	r3, [r3]
 8024fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8024fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	681b      	ldr	r3, [r3, #0]
 8024fde:	461a      	mov	r2, r3
 8024fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8024fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024fea:	e841 2300 	strex	r3, r2, [r1]
 8024fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8024ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d1e6      	bne.n	8024fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	681b      	ldr	r3, [r3, #0]
 8024ffa:	3308      	adds	r3, #8
 8024ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024ffe:	6a3b      	ldr	r3, [r7, #32]
 8025000:	e853 3f00 	ldrex	r3, [r3]
 8025004:	61fb      	str	r3, [r7, #28]
   return(result);
 8025006:	69fa      	ldr	r2, [r7, #28]
 8025008:	4b1e      	ldr	r3, [pc, #120]	@ (8025084 <UART_EndRxTransfer+0xc8>)
 802500a:	4013      	ands	r3, r2
 802500c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	681b      	ldr	r3, [r3, #0]
 8025012:	3308      	adds	r3, #8
 8025014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8025016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8025018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802501a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802501c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802501e:	e841 2300 	strex	r3, r2, [r1]
 8025022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8025024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025026:	2b00      	cmp	r3, #0
 8025028:	d1e5      	bne.n	8024ff6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802502e:	2b01      	cmp	r3, #1
 8025030:	d118      	bne.n	8025064 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025032:	687b      	ldr	r3, [r7, #4]
 8025034:	681b      	ldr	r3, [r3, #0]
 8025036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025038:	68fb      	ldr	r3, [r7, #12]
 802503a:	e853 3f00 	ldrex	r3, [r3]
 802503e:	60bb      	str	r3, [r7, #8]
   return(result);
 8025040:	68bb      	ldr	r3, [r7, #8]
 8025042:	f023 0310 	bic.w	r3, r3, #16
 8025046:	647b      	str	r3, [r7, #68]	@ 0x44
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	461a      	mov	r2, r3
 802504e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8025050:	61bb      	str	r3, [r7, #24]
 8025052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025054:	6979      	ldr	r1, [r7, #20]
 8025056:	69ba      	ldr	r2, [r7, #24]
 8025058:	e841 2300 	strex	r3, r2, [r1]
 802505c:	613b      	str	r3, [r7, #16]
   return(result);
 802505e:	693b      	ldr	r3, [r7, #16]
 8025060:	2b00      	cmp	r3, #0
 8025062:	d1e6      	bne.n	8025032 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	2220      	movs	r2, #32
 8025068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	2200      	movs	r2, #0
 8025070:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8025072:	687b      	ldr	r3, [r7, #4]
 8025074:	2200      	movs	r2, #0
 8025076:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8025078:	bf00      	nop
 802507a:	3754      	adds	r7, #84	@ 0x54
 802507c:	46bd      	mov	sp, r7
 802507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025082:	4770      	bx	lr
 8025084:	effffffe 	.word	0xeffffffe

08025088 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8025088:	b480      	push	{r7}
 802508a:	b085      	sub	sp, #20
 802508c:	af00      	add	r7, sp, #0
 802508e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8025096:	2b01      	cmp	r3, #1
 8025098:	d101      	bne.n	802509e <HAL_UARTEx_DisableFifoMode+0x16>
 802509a:	2302      	movs	r3, #2
 802509c:	e027      	b.n	80250ee <HAL_UARTEx_DisableFifoMode+0x66>
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	2201      	movs	r2, #1
 80250a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80250a6:	687b      	ldr	r3, [r7, #4]
 80250a8:	2224      	movs	r2, #36	@ 0x24
 80250aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	681b      	ldr	r3, [r3, #0]
 80250b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80250b6:	687b      	ldr	r3, [r7, #4]
 80250b8:	681b      	ldr	r3, [r3, #0]
 80250ba:	681a      	ldr	r2, [r3, #0]
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	f022 0201 	bic.w	r2, r2, #1
 80250c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80250cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	2200      	movs	r2, #0
 80250d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	681b      	ldr	r3, [r3, #0]
 80250d8:	68fa      	ldr	r2, [r7, #12]
 80250da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	2220      	movs	r2, #32
 80250e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	2200      	movs	r2, #0
 80250e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80250ec:	2300      	movs	r3, #0
}
 80250ee:	4618      	mov	r0, r3
 80250f0:	3714      	adds	r7, #20
 80250f2:	46bd      	mov	sp, r7
 80250f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250f8:	4770      	bx	lr

080250fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80250fa:	b580      	push	{r7, lr}
 80250fc:	b084      	sub	sp, #16
 80250fe:	af00      	add	r7, sp, #0
 8025100:	6078      	str	r0, [r7, #4]
 8025102:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802510a:	2b01      	cmp	r3, #1
 802510c:	d101      	bne.n	8025112 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802510e:	2302      	movs	r3, #2
 8025110:	e02d      	b.n	802516e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	2201      	movs	r2, #1
 8025116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	2224      	movs	r2, #36	@ 0x24
 802511e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8025122:	687b      	ldr	r3, [r7, #4]
 8025124:	681b      	ldr	r3, [r3, #0]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	681b      	ldr	r3, [r3, #0]
 802512e:	681a      	ldr	r2, [r3, #0]
 8025130:	687b      	ldr	r3, [r7, #4]
 8025132:	681b      	ldr	r3, [r3, #0]
 8025134:	f022 0201 	bic.w	r2, r2, #1
 8025138:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	681b      	ldr	r3, [r3, #0]
 802513e:	689b      	ldr	r3, [r3, #8]
 8025140:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8025144:	687b      	ldr	r3, [r7, #4]
 8025146:	681b      	ldr	r3, [r3, #0]
 8025148:	683a      	ldr	r2, [r7, #0]
 802514a:	430a      	orrs	r2, r1
 802514c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802514e:	6878      	ldr	r0, [r7, #4]
 8025150:	f000 f850 	bl	80251f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	681b      	ldr	r3, [r3, #0]
 8025158:	68fa      	ldr	r2, [r7, #12]
 802515a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	2220      	movs	r2, #32
 8025160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8025164:	687b      	ldr	r3, [r7, #4]
 8025166:	2200      	movs	r2, #0
 8025168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802516c:	2300      	movs	r3, #0
}
 802516e:	4618      	mov	r0, r3
 8025170:	3710      	adds	r7, #16
 8025172:	46bd      	mov	sp, r7
 8025174:	bd80      	pop	{r7, pc}

08025176 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8025176:	b580      	push	{r7, lr}
 8025178:	b084      	sub	sp, #16
 802517a:	af00      	add	r7, sp, #0
 802517c:	6078      	str	r0, [r7, #4]
 802517e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8025186:	2b01      	cmp	r3, #1
 8025188:	d101      	bne.n	802518e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802518a:	2302      	movs	r3, #2
 802518c:	e02d      	b.n	80251ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	2201      	movs	r2, #1
 8025192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8025196:	687b      	ldr	r3, [r7, #4]
 8025198:	2224      	movs	r2, #36	@ 0x24
 802519a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	681b      	ldr	r3, [r3, #0]
 80251a2:	681b      	ldr	r3, [r3, #0]
 80251a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	681b      	ldr	r3, [r3, #0]
 80251aa:	681a      	ldr	r2, [r3, #0]
 80251ac:	687b      	ldr	r3, [r7, #4]
 80251ae:	681b      	ldr	r3, [r3, #0]
 80251b0:	f022 0201 	bic.w	r2, r2, #1
 80251b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	689b      	ldr	r3, [r3, #8]
 80251bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	683a      	ldr	r2, [r7, #0]
 80251c6:	430a      	orrs	r2, r1
 80251c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80251ca:	6878      	ldr	r0, [r7, #4]
 80251cc:	f000 f812 	bl	80251f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	681b      	ldr	r3, [r3, #0]
 80251d4:	68fa      	ldr	r2, [r7, #12]
 80251d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	2220      	movs	r2, #32
 80251dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	2200      	movs	r2, #0
 80251e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80251e8:	2300      	movs	r3, #0
}
 80251ea:	4618      	mov	r0, r3
 80251ec:	3710      	adds	r7, #16
 80251ee:	46bd      	mov	sp, r7
 80251f0:	bd80      	pop	{r7, pc}
	...

080251f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80251f4:	b480      	push	{r7}
 80251f6:	b085      	sub	sp, #20
 80251f8:	af00      	add	r7, sp, #0
 80251fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8025200:	2b00      	cmp	r3, #0
 8025202:	d108      	bne.n	8025216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	2201      	movs	r2, #1
 8025208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	2201      	movs	r2, #1
 8025210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8025214:	e031      	b.n	802527a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8025216:	2310      	movs	r3, #16
 8025218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802521a:	2310      	movs	r3, #16
 802521c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	689b      	ldr	r3, [r3, #8]
 8025224:	0e5b      	lsrs	r3, r3, #25
 8025226:	b2db      	uxtb	r3, r3
 8025228:	f003 0307 	and.w	r3, r3, #7
 802522c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	689b      	ldr	r3, [r3, #8]
 8025234:	0f5b      	lsrs	r3, r3, #29
 8025236:	b2db      	uxtb	r3, r3
 8025238:	f003 0307 	and.w	r3, r3, #7
 802523c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802523e:	7bbb      	ldrb	r3, [r7, #14]
 8025240:	7b3a      	ldrb	r2, [r7, #12]
 8025242:	4911      	ldr	r1, [pc, #68]	@ (8025288 <UARTEx_SetNbDataToProcess+0x94>)
 8025244:	5c8a      	ldrb	r2, [r1, r2]
 8025246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802524a:	7b3a      	ldrb	r2, [r7, #12]
 802524c:	490f      	ldr	r1, [pc, #60]	@ (802528c <UARTEx_SetNbDataToProcess+0x98>)
 802524e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8025250:	fb93 f3f2 	sdiv	r3, r3, r2
 8025254:	b29a      	uxth	r2, r3
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802525c:	7bfb      	ldrb	r3, [r7, #15]
 802525e:	7b7a      	ldrb	r2, [r7, #13]
 8025260:	4909      	ldr	r1, [pc, #36]	@ (8025288 <UARTEx_SetNbDataToProcess+0x94>)
 8025262:	5c8a      	ldrb	r2, [r1, r2]
 8025264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8025268:	7b7a      	ldrb	r2, [r7, #13]
 802526a:	4908      	ldr	r1, [pc, #32]	@ (802528c <UARTEx_SetNbDataToProcess+0x98>)
 802526c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802526e:	fb93 f3f2 	sdiv	r3, r3, r2
 8025272:	b29a      	uxth	r2, r3
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802527a:	bf00      	nop
 802527c:	3714      	adds	r7, #20
 802527e:	46bd      	mov	sp, r7
 8025280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025284:	4770      	bx	lr
 8025286:	bf00      	nop
 8025288:	0802b720 	.word	0x0802b720
 802528c:	0802b728 	.word	0x0802b728

08025290 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8025290:	b084      	sub	sp, #16
 8025292:	b480      	push	{r7}
 8025294:	b085      	sub	sp, #20
 8025296:	af00      	add	r7, sp, #0
 8025298:	6078      	str	r0, [r7, #4]
 802529a:	f107 001c 	add.w	r0, r7, #28
 802529e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80252a2:	2300      	movs	r3, #0
 80252a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80252a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80252a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80252aa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80252ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80252ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80252b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80252b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80252b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80252b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80252b8:	68fa      	ldr	r2, [r7, #12]
 80252ba:	4313      	orrs	r3, r2
 80252bc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	685a      	ldr	r2, [r3, #4]
 80252c2:	4b07      	ldr	r3, [pc, #28]	@ (80252e0 <SDMMC_Init+0x50>)
 80252c4:	4013      	ands	r3, r2
 80252c6:	68fa      	ldr	r2, [r7, #12]
 80252c8:	431a      	orrs	r2, r3
 80252ca:	687b      	ldr	r3, [r7, #4]
 80252cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80252ce:	2300      	movs	r3, #0
}
 80252d0:	4618      	mov	r0, r3
 80252d2:	3714      	adds	r7, #20
 80252d4:	46bd      	mov	sp, r7
 80252d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252da:	b004      	add	sp, #16
 80252dc:	4770      	bx	lr
 80252de:	bf00      	nop
 80252e0:	ffc02c00 	.word	0xffc02c00

080252e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80252e4:	b480      	push	{r7}
 80252e6:	b083      	sub	sp, #12
 80252e8:	af00      	add	r7, sp, #0
 80252ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80252f2:	4618      	mov	r0, r3
 80252f4:	370c      	adds	r7, #12
 80252f6:	46bd      	mov	sp, r7
 80252f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252fc:	4770      	bx	lr

080252fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80252fe:	b480      	push	{r7}
 8025300:	b083      	sub	sp, #12
 8025302:	af00      	add	r7, sp, #0
 8025304:	6078      	str	r0, [r7, #4]
 8025306:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8025308:	683b      	ldr	r3, [r7, #0]
 802530a:	681a      	ldr	r2, [r3, #0]
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8025312:	2300      	movs	r3, #0
}
 8025314:	4618      	mov	r0, r3
 8025316:	370c      	adds	r7, #12
 8025318:	46bd      	mov	sp, r7
 802531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802531e:	4770      	bx	lr

08025320 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8025320:	b480      	push	{r7}
 8025322:	b083      	sub	sp, #12
 8025324:	af00      	add	r7, sp, #0
 8025326:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	f043 0203 	orr.w	r2, r3, #3
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8025334:	2300      	movs	r3, #0
}
 8025336:	4618      	mov	r0, r3
 8025338:	370c      	adds	r7, #12
 802533a:	46bd      	mov	sp, r7
 802533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025340:	4770      	bx	lr

08025342 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8025342:	b480      	push	{r7}
 8025344:	b083      	sub	sp, #12
 8025346:	af00      	add	r7, sp, #0
 8025348:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	681b      	ldr	r3, [r3, #0]
 802534e:	f003 0303 	and.w	r3, r3, #3
}
 8025352:	4618      	mov	r0, r3
 8025354:	370c      	adds	r7, #12
 8025356:	46bd      	mov	sp, r7
 8025358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802535c:	4770      	bx	lr
	...

08025360 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8025360:	b480      	push	{r7}
 8025362:	b085      	sub	sp, #20
 8025364:	af00      	add	r7, sp, #0
 8025366:	6078      	str	r0, [r7, #4]
 8025368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802536a:	2300      	movs	r3, #0
 802536c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 802536e:	683b      	ldr	r3, [r7, #0]
 8025370:	681a      	ldr	r2, [r3, #0]
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8025376:	683b      	ldr	r3, [r7, #0]
 8025378:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 802537a:	683b      	ldr	r3, [r7, #0]
 802537c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 802537e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8025380:	683b      	ldr	r3, [r7, #0]
 8025382:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8025384:	431a      	orrs	r2, r3
                       Command->CPSM);
 8025386:	683b      	ldr	r3, [r7, #0]
 8025388:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 802538a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 802538c:	68fa      	ldr	r2, [r7, #12]
 802538e:	4313      	orrs	r3, r2
 8025390:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8025392:	687b      	ldr	r3, [r7, #4]
 8025394:	68da      	ldr	r2, [r3, #12]
 8025396:	4b06      	ldr	r3, [pc, #24]	@ (80253b0 <SDMMC_SendCommand+0x50>)
 8025398:	4013      	ands	r3, r2
 802539a:	68fa      	ldr	r2, [r7, #12]
 802539c:	431a      	orrs	r2, r3
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80253a2:	2300      	movs	r3, #0
}
 80253a4:	4618      	mov	r0, r3
 80253a6:	3714      	adds	r7, #20
 80253a8:	46bd      	mov	sp, r7
 80253aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253ae:	4770      	bx	lr
 80253b0:	fffee0c0 	.word	0xfffee0c0

080253b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80253b4:	b480      	push	{r7}
 80253b6:	b083      	sub	sp, #12
 80253b8:	af00      	add	r7, sp, #0
 80253ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	691b      	ldr	r3, [r3, #16]
 80253c0:	b2db      	uxtb	r3, r3
}
 80253c2:	4618      	mov	r0, r3
 80253c4:	370c      	adds	r7, #12
 80253c6:	46bd      	mov	sp, r7
 80253c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253cc:	4770      	bx	lr

080253ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80253ce:	b480      	push	{r7}
 80253d0:	b085      	sub	sp, #20
 80253d2:	af00      	add	r7, sp, #0
 80253d4:	6078      	str	r0, [r7, #4]
 80253d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	3314      	adds	r3, #20
 80253dc:	461a      	mov	r2, r3
 80253de:	683b      	ldr	r3, [r7, #0]
 80253e0:	4413      	add	r3, r2
 80253e2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80253e4:	68fb      	ldr	r3, [r7, #12]
 80253e6:	681b      	ldr	r3, [r3, #0]
}
 80253e8:	4618      	mov	r0, r3
 80253ea:	3714      	adds	r7, #20
 80253ec:	46bd      	mov	sp, r7
 80253ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253f2:	4770      	bx	lr

080253f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80253f4:	b480      	push	{r7}
 80253f6:	b085      	sub	sp, #20
 80253f8:	af00      	add	r7, sp, #0
 80253fa:	6078      	str	r0, [r7, #4]
 80253fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80253fe:	2300      	movs	r3, #0
 8025400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8025402:	683b      	ldr	r3, [r7, #0]
 8025404:	681a      	ldr	r2, [r3, #0]
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 802540a:	683b      	ldr	r3, [r7, #0]
 802540c:	685a      	ldr	r2, [r3, #4]
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025412:	683b      	ldr	r3, [r7, #0]
 8025414:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8025416:	683b      	ldr	r3, [r7, #0]
 8025418:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 802541a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 802541c:	683b      	ldr	r3, [r7, #0]
 802541e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8025420:	431a      	orrs	r2, r3
                       Data->DPSM);
 8025422:	683b      	ldr	r3, [r7, #0]
 8025424:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8025426:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025428:	68fa      	ldr	r2, [r7, #12]
 802542a:	4313      	orrs	r3, r2
 802542c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 802542e:	687b      	ldr	r3, [r7, #4]
 8025430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025432:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8025436:	68fb      	ldr	r3, [r7, #12]
 8025438:	431a      	orrs	r2, r3
 802543a:	687b      	ldr	r3, [r7, #4]
 802543c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 802543e:	2300      	movs	r3, #0

}
 8025440:	4618      	mov	r0, r3
 8025442:	3714      	adds	r7, #20
 8025444:	46bd      	mov	sp, r7
 8025446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802544a:	4770      	bx	lr

0802544c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 802544c:	b580      	push	{r7, lr}
 802544e:	b088      	sub	sp, #32
 8025450:	af00      	add	r7, sp, #0
 8025452:	6078      	str	r0, [r7, #4]
 8025454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8025456:	683b      	ldr	r3, [r7, #0]
 8025458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 802545a:	2310      	movs	r3, #16
 802545c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802545e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025464:	2300      	movs	r3, #0
 8025466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802546c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802546e:	f107 0308 	add.w	r3, r7, #8
 8025472:	4619      	mov	r1, r3
 8025474:	6878      	ldr	r0, [r7, #4]
 8025476:	f7ff ff73 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 802547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802547e:	2110      	movs	r1, #16
 8025480:	6878      	ldr	r0, [r7, #4]
 8025482:	f000 fa5f 	bl	8025944 <SDMMC_GetCmdResp1>
 8025486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025488:	69fb      	ldr	r3, [r7, #28]
}
 802548a:	4618      	mov	r0, r3
 802548c:	3720      	adds	r7, #32
 802548e:	46bd      	mov	sp, r7
 8025490:	bd80      	pop	{r7, pc}

08025492 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8025492:	b580      	push	{r7, lr}
 8025494:	b088      	sub	sp, #32
 8025496:	af00      	add	r7, sp, #0
 8025498:	6078      	str	r0, [r7, #4]
 802549a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802549c:	683b      	ldr	r3, [r7, #0]
 802549e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80254a0:	2311      	movs	r3, #17
 80254a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254aa:	2300      	movs	r3, #0
 80254ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80254b4:	f107 0308 	add.w	r3, r7, #8
 80254b8:	4619      	mov	r1, r3
 80254ba:	6878      	ldr	r0, [r7, #4]
 80254bc:	f7ff ff50 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80254c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80254c4:	2111      	movs	r1, #17
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	f000 fa3c 	bl	8025944 <SDMMC_GetCmdResp1>
 80254cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80254ce:	69fb      	ldr	r3, [r7, #28]
}
 80254d0:	4618      	mov	r0, r3
 80254d2:	3720      	adds	r7, #32
 80254d4:	46bd      	mov	sp, r7
 80254d6:	bd80      	pop	{r7, pc}

080254d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80254d8:	b580      	push	{r7, lr}
 80254da:	b088      	sub	sp, #32
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
 80254e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80254e2:	683b      	ldr	r3, [r7, #0]
 80254e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80254e6:	2312      	movs	r3, #18
 80254e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254f0:	2300      	movs	r3, #0
 80254f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80254fa:	f107 0308 	add.w	r3, r7, #8
 80254fe:	4619      	mov	r1, r3
 8025500:	6878      	ldr	r0, [r7, #4]
 8025502:	f7ff ff2d 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8025506:	f241 3288 	movw	r2, #5000	@ 0x1388
 802550a:	2112      	movs	r1, #18
 802550c:	6878      	ldr	r0, [r7, #4]
 802550e:	f000 fa19 	bl	8025944 <SDMMC_GetCmdResp1>
 8025512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025514:	69fb      	ldr	r3, [r7, #28]
}
 8025516:	4618      	mov	r0, r3
 8025518:	3720      	adds	r7, #32
 802551a:	46bd      	mov	sp, r7
 802551c:	bd80      	pop	{r7, pc}

0802551e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 802551e:	b580      	push	{r7, lr}
 8025520:	b088      	sub	sp, #32
 8025522:	af00      	add	r7, sp, #0
 8025524:	6078      	str	r0, [r7, #4]
 8025526:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8025528:	683b      	ldr	r3, [r7, #0]
 802552a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 802552c:	2318      	movs	r3, #24
 802552e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025536:	2300      	movs	r3, #0
 8025538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802553a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802553e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025540:	f107 0308 	add.w	r3, r7, #8
 8025544:	4619      	mov	r1, r3
 8025546:	6878      	ldr	r0, [r7, #4]
 8025548:	f7ff ff0a 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 802554c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025550:	2118      	movs	r1, #24
 8025552:	6878      	ldr	r0, [r7, #4]
 8025554:	f000 f9f6 	bl	8025944 <SDMMC_GetCmdResp1>
 8025558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802555a:	69fb      	ldr	r3, [r7, #28]
}
 802555c:	4618      	mov	r0, r3
 802555e:	3720      	adds	r7, #32
 8025560:	46bd      	mov	sp, r7
 8025562:	bd80      	pop	{r7, pc}

08025564 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8025564:	b580      	push	{r7, lr}
 8025566:	b088      	sub	sp, #32
 8025568:	af00      	add	r7, sp, #0
 802556a:	6078      	str	r0, [r7, #4]
 802556c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802556e:	683b      	ldr	r3, [r7, #0]
 8025570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8025572:	2319      	movs	r3, #25
 8025574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802557a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802557c:	2300      	movs	r3, #0
 802557e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025586:	f107 0308 	add.w	r3, r7, #8
 802558a:	4619      	mov	r1, r3
 802558c:	6878      	ldr	r0, [r7, #4]
 802558e:	f7ff fee7 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8025592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025596:	2119      	movs	r1, #25
 8025598:	6878      	ldr	r0, [r7, #4]
 802559a:	f000 f9d3 	bl	8025944 <SDMMC_GetCmdResp1>
 802559e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80255a0:	69fb      	ldr	r3, [r7, #28]
}
 80255a2:	4618      	mov	r0, r3
 80255a4:	3720      	adds	r7, #32
 80255a6:	46bd      	mov	sp, r7
 80255a8:	bd80      	pop	{r7, pc}
	...

080255ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80255ac:	b580      	push	{r7, lr}
 80255ae:	b088      	sub	sp, #32
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80255b4:	2300      	movs	r3, #0
 80255b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80255b8:	230c      	movs	r3, #12
 80255ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255c2:	2300      	movs	r3, #0
 80255c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255ca:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80255cc:	687b      	ldr	r3, [r7, #4]
 80255ce:	68db      	ldr	r3, [r3, #12]
 80255d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80255d4:	687b      	ldr	r3, [r7, #4]
 80255d6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80255d8:	687b      	ldr	r3, [r7, #4]
 80255da:	68db      	ldr	r3, [r3, #12]
 80255dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255e4:	f107 0308 	add.w	r3, r7, #8
 80255e8:	4619      	mov	r1, r3
 80255ea:	6878      	ldr	r0, [r7, #4]
 80255ec:	f7ff feb8 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80255f0:	4a0b      	ldr	r2, [pc, #44]	@ (8025620 <SDMMC_CmdStopTransfer+0x74>)
 80255f2:	210c      	movs	r1, #12
 80255f4:	6878      	ldr	r0, [r7, #4]
 80255f6:	f000 f9a5 	bl	8025944 <SDMMC_GetCmdResp1>
 80255fa:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80255fc:	687b      	ldr	r3, [r7, #4]
 80255fe:	68db      	ldr	r3, [r3, #12]
 8025600:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8025608:	69fb      	ldr	r3, [r7, #28]
 802560a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802560e:	d101      	bne.n	8025614 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8025610:	2300      	movs	r3, #0
 8025612:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8025614:	69fb      	ldr	r3, [r7, #28]
}
 8025616:	4618      	mov	r0, r3
 8025618:	3720      	adds	r7, #32
 802561a:	46bd      	mov	sp, r7
 802561c:	bd80      	pop	{r7, pc}
 802561e:	bf00      	nop
 8025620:	05f5e100 	.word	0x05f5e100

08025624 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8025624:	b580      	push	{r7, lr}
 8025626:	b088      	sub	sp, #32
 8025628:	af00      	add	r7, sp, #0
 802562a:	6078      	str	r0, [r7, #4]
 802562c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 802562e:	683b      	ldr	r3, [r7, #0]
 8025630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8025632:	2307      	movs	r3, #7
 8025634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802563a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802563c:	2300      	movs	r3, #0
 802563e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025644:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025646:	f107 0308 	add.w	r3, r7, #8
 802564a:	4619      	mov	r1, r3
 802564c:	6878      	ldr	r0, [r7, #4]
 802564e:	f7ff fe87 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8025652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025656:	2107      	movs	r1, #7
 8025658:	6878      	ldr	r0, [r7, #4]
 802565a:	f000 f973 	bl	8025944 <SDMMC_GetCmdResp1>
 802565e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025660:	69fb      	ldr	r3, [r7, #28]
}
 8025662:	4618      	mov	r0, r3
 8025664:	3720      	adds	r7, #32
 8025666:	46bd      	mov	sp, r7
 8025668:	bd80      	pop	{r7, pc}

0802566a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 802566a:	b580      	push	{r7, lr}
 802566c:	b088      	sub	sp, #32
 802566e:	af00      	add	r7, sp, #0
 8025670:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8025672:	2300      	movs	r3, #0
 8025674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8025676:	2300      	movs	r3, #0
 8025678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 802567a:	2300      	movs	r3, #0
 802567c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802567e:	2300      	movs	r3, #0
 8025680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025688:	f107 0308 	add.w	r3, r7, #8
 802568c:	4619      	mov	r1, r3
 802568e:	6878      	ldr	r0, [r7, #4]
 8025690:	f7ff fe66 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8025694:	6878      	ldr	r0, [r7, #4]
 8025696:	f000 fb97 	bl	8025dc8 <SDMMC_GetCmdError>
 802569a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802569c:	69fb      	ldr	r3, [r7, #28]
}
 802569e:	4618      	mov	r0, r3
 80256a0:	3720      	adds	r7, #32
 80256a2:	46bd      	mov	sp, r7
 80256a4:	bd80      	pop	{r7, pc}

080256a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80256a6:	b580      	push	{r7, lr}
 80256a8:	b088      	sub	sp, #32
 80256aa:	af00      	add	r7, sp, #0
 80256ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80256ae:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80256b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80256b4:	2308      	movs	r3, #8
 80256b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256be:	2300      	movs	r3, #0
 80256c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80256c8:	f107 0308 	add.w	r3, r7, #8
 80256cc:	4619      	mov	r1, r3
 80256ce:	6878      	ldr	r0, [r7, #4]
 80256d0:	f7ff fe46 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80256d4:	6878      	ldr	r0, [r7, #4]
 80256d6:	f000 fb29 	bl	8025d2c <SDMMC_GetCmdResp7>
 80256da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80256dc:	69fb      	ldr	r3, [r7, #28]
}
 80256de:	4618      	mov	r0, r3
 80256e0:	3720      	adds	r7, #32
 80256e2:	46bd      	mov	sp, r7
 80256e4:	bd80      	pop	{r7, pc}

080256e6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80256e6:	b580      	push	{r7, lr}
 80256e8:	b088      	sub	sp, #32
 80256ea:	af00      	add	r7, sp, #0
 80256ec:	6078      	str	r0, [r7, #4]
 80256ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80256f0:	683b      	ldr	r3, [r7, #0]
 80256f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80256f4:	2337      	movs	r3, #55	@ 0x37
 80256f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256fe:	2300      	movs	r3, #0
 8025700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025708:	f107 0308 	add.w	r3, r7, #8
 802570c:	4619      	mov	r1, r3
 802570e:	6878      	ldr	r0, [r7, #4]
 8025710:	f7ff fe26 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8025714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025718:	2137      	movs	r1, #55	@ 0x37
 802571a:	6878      	ldr	r0, [r7, #4]
 802571c:	f000 f912 	bl	8025944 <SDMMC_GetCmdResp1>
 8025720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025722:	69fb      	ldr	r3, [r7, #28]
}
 8025724:	4618      	mov	r0, r3
 8025726:	3720      	adds	r7, #32
 8025728:	46bd      	mov	sp, r7
 802572a:	bd80      	pop	{r7, pc}

0802572c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802572c:	b580      	push	{r7, lr}
 802572e:	b088      	sub	sp, #32
 8025730:	af00      	add	r7, sp, #0
 8025732:	6078      	str	r0, [r7, #4]
 8025734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8025736:	683b      	ldr	r3, [r7, #0]
 8025738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 802573a:	2329      	movs	r3, #41	@ 0x29
 802573c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802573e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025744:	2300      	movs	r3, #0
 8025746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802574c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802574e:	f107 0308 	add.w	r3, r7, #8
 8025752:	4619      	mov	r1, r3
 8025754:	6878      	ldr	r0, [r7, #4]
 8025756:	f7ff fe03 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 802575a:	6878      	ldr	r0, [r7, #4]
 802575c:	f000 fa2e 	bl	8025bbc <SDMMC_GetCmdResp3>
 8025760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025762:	69fb      	ldr	r3, [r7, #28]
}
 8025764:	4618      	mov	r0, r3
 8025766:	3720      	adds	r7, #32
 8025768:	46bd      	mov	sp, r7
 802576a:	bd80      	pop	{r7, pc}

0802576c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 802576c:	b580      	push	{r7, lr}
 802576e:	b088      	sub	sp, #32
 8025770:	af00      	add	r7, sp, #0
 8025772:	6078      	str	r0, [r7, #4]
 8025774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8025776:	683b      	ldr	r3, [r7, #0]
 8025778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 802577a:	2306      	movs	r3, #6
 802577c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802577e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025784:	2300      	movs	r3, #0
 8025786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802578c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802578e:	f107 0308 	add.w	r3, r7, #8
 8025792:	4619      	mov	r1, r3
 8025794:	6878      	ldr	r0, [r7, #4]
 8025796:	f7ff fde3 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 802579a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802579e:	2106      	movs	r1, #6
 80257a0:	6878      	ldr	r0, [r7, #4]
 80257a2:	f000 f8cf 	bl	8025944 <SDMMC_GetCmdResp1>
 80257a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80257a8:	69fb      	ldr	r3, [r7, #28]
}
 80257aa:	4618      	mov	r0, r3
 80257ac:	3720      	adds	r7, #32
 80257ae:	46bd      	mov	sp, r7
 80257b0:	bd80      	pop	{r7, pc}

080257b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80257b2:	b580      	push	{r7, lr}
 80257b4:	b088      	sub	sp, #32
 80257b6:	af00      	add	r7, sp, #0
 80257b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80257ba:	2300      	movs	r3, #0
 80257bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80257be:	2333      	movs	r3, #51	@ 0x33
 80257c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257c8:	2300      	movs	r3, #0
 80257ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80257cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80257d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80257d2:	f107 0308 	add.w	r3, r7, #8
 80257d6:	4619      	mov	r1, r3
 80257d8:	6878      	ldr	r0, [r7, #4]
 80257da:	f7ff fdc1 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80257de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80257e2:	2133      	movs	r1, #51	@ 0x33
 80257e4:	6878      	ldr	r0, [r7, #4]
 80257e6:	f000 f8ad 	bl	8025944 <SDMMC_GetCmdResp1>
 80257ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80257ec:	69fb      	ldr	r3, [r7, #28]
}
 80257ee:	4618      	mov	r0, r3
 80257f0:	3720      	adds	r7, #32
 80257f2:	46bd      	mov	sp, r7
 80257f4:	bd80      	pop	{r7, pc}

080257f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80257f6:	b580      	push	{r7, lr}
 80257f8:	b088      	sub	sp, #32
 80257fa:	af00      	add	r7, sp, #0
 80257fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80257fe:	2300      	movs	r3, #0
 8025800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8025802:	2302      	movs	r3, #2
 8025804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8025806:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802580a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802580c:	2300      	movs	r3, #0
 802580e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025816:	f107 0308 	add.w	r3, r7, #8
 802581a:	4619      	mov	r1, r3
 802581c:	6878      	ldr	r0, [r7, #4]
 802581e:	f7ff fd9f 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8025822:	6878      	ldr	r0, [r7, #4]
 8025824:	f000 f980 	bl	8025b28 <SDMMC_GetCmdResp2>
 8025828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802582a:	69fb      	ldr	r3, [r7, #28]
}
 802582c:	4618      	mov	r0, r3
 802582e:	3720      	adds	r7, #32
 8025830:	46bd      	mov	sp, r7
 8025832:	bd80      	pop	{r7, pc}

08025834 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8025834:	b580      	push	{r7, lr}
 8025836:	b088      	sub	sp, #32
 8025838:	af00      	add	r7, sp, #0
 802583a:	6078      	str	r0, [r7, #4]
 802583c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802583e:	683b      	ldr	r3, [r7, #0]
 8025840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8025842:	2309      	movs	r3, #9
 8025844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8025846:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802584a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802584c:	2300      	movs	r3, #0
 802584e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025854:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025856:	f107 0308 	add.w	r3, r7, #8
 802585a:	4619      	mov	r1, r3
 802585c:	6878      	ldr	r0, [r7, #4]
 802585e:	f7ff fd7f 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8025862:	6878      	ldr	r0, [r7, #4]
 8025864:	f000 f960 	bl	8025b28 <SDMMC_GetCmdResp2>
 8025868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802586a:	69fb      	ldr	r3, [r7, #28]
}
 802586c:	4618      	mov	r0, r3
 802586e:	3720      	adds	r7, #32
 8025870:	46bd      	mov	sp, r7
 8025872:	bd80      	pop	{r7, pc}

08025874 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8025874:	b580      	push	{r7, lr}
 8025876:	b088      	sub	sp, #32
 8025878:	af00      	add	r7, sp, #0
 802587a:	6078      	str	r0, [r7, #4]
 802587c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 802587e:	2300      	movs	r3, #0
 8025880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8025882:	2303      	movs	r3, #3
 8025884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802588a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802588c:	2300      	movs	r3, #0
 802588e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025896:	f107 0308 	add.w	r3, r7, #8
 802589a:	4619      	mov	r1, r3
 802589c:	6878      	ldr	r0, [r7, #4]
 802589e:	f7ff fd5f 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80258a2:	683a      	ldr	r2, [r7, #0]
 80258a4:	2103      	movs	r1, #3
 80258a6:	6878      	ldr	r0, [r7, #4]
 80258a8:	f000 f9c8 	bl	8025c3c <SDMMC_GetCmdResp6>
 80258ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80258ae:	69fb      	ldr	r3, [r7, #28]
}
 80258b0:	4618      	mov	r0, r3
 80258b2:	3720      	adds	r7, #32
 80258b4:	46bd      	mov	sp, r7
 80258b6:	bd80      	pop	{r7, pc}

080258b8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80258b8:	b580      	push	{r7, lr}
 80258ba:	b088      	sub	sp, #32
 80258bc:	af00      	add	r7, sp, #0
 80258be:	6078      	str	r0, [r7, #4]
 80258c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80258c2:	683b      	ldr	r3, [r7, #0]
 80258c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80258c6:	230d      	movs	r3, #13
 80258c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80258ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80258ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80258d0:	2300      	movs	r3, #0
 80258d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80258d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80258d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80258da:	f107 0308 	add.w	r3, r7, #8
 80258de:	4619      	mov	r1, r3
 80258e0:	6878      	ldr	r0, [r7, #4]
 80258e2:	f7ff fd3d 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80258e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80258ea:	210d      	movs	r1, #13
 80258ec:	6878      	ldr	r0, [r7, #4]
 80258ee:	f000 f829 	bl	8025944 <SDMMC_GetCmdResp1>
 80258f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80258f4:	69fb      	ldr	r3, [r7, #28]
}
 80258f6:	4618      	mov	r0, r3
 80258f8:	3720      	adds	r7, #32
 80258fa:	46bd      	mov	sp, r7
 80258fc:	bd80      	pop	{r7, pc}

080258fe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80258fe:	b580      	push	{r7, lr}
 8025900:	b088      	sub	sp, #32
 8025902:	af00      	add	r7, sp, #0
 8025904:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8025906:	2300      	movs	r3, #0
 8025908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 802590a:	230d      	movs	r3, #13
 802590c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802590e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025914:	2300      	movs	r3, #0
 8025916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802591c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802591e:	f107 0308 	add.w	r3, r7, #8
 8025922:	4619      	mov	r1, r3
 8025924:	6878      	ldr	r0, [r7, #4]
 8025926:	f7ff fd1b 	bl	8025360 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 802592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802592e:	210d      	movs	r1, #13
 8025930:	6878      	ldr	r0, [r7, #4]
 8025932:	f000 f807 	bl	8025944 <SDMMC_GetCmdResp1>
 8025936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025938:	69fb      	ldr	r3, [r7, #28]
}
 802593a:	4618      	mov	r0, r3
 802593c:	3720      	adds	r7, #32
 802593e:	46bd      	mov	sp, r7
 8025940:	bd80      	pop	{r7, pc}
	...

08025944 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8025944:	b580      	push	{r7, lr}
 8025946:	b088      	sub	sp, #32
 8025948:	af00      	add	r7, sp, #0
 802594a:	60f8      	str	r0, [r7, #12]
 802594c:	460b      	mov	r3, r1
 802594e:	607a      	str	r2, [r7, #4]
 8025950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8025952:	4b70      	ldr	r3, [pc, #448]	@ (8025b14 <SDMMC_GetCmdResp1+0x1d0>)
 8025954:	681b      	ldr	r3, [r3, #0]
 8025956:	4a70      	ldr	r2, [pc, #448]	@ (8025b18 <SDMMC_GetCmdResp1+0x1d4>)
 8025958:	fba2 2303 	umull	r2, r3, r2, r3
 802595c:	0a5a      	lsrs	r2, r3, #9
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	fb02 f303 	mul.w	r3, r2, r3
 8025964:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025966:	69fb      	ldr	r3, [r7, #28]
 8025968:	1e5a      	subs	r2, r3, #1
 802596a:	61fa      	str	r2, [r7, #28]
 802596c:	2b00      	cmp	r3, #0
 802596e:	d102      	bne.n	8025976 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025970:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025974:	e0c9      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8025976:	68fb      	ldr	r3, [r7, #12]
 8025978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802597a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 802597c:	69ba      	ldr	r2, [r7, #24]
 802597e:	4b67      	ldr	r3, [pc, #412]	@ (8025b1c <SDMMC_GetCmdResp1+0x1d8>)
 8025980:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025982:	2b00      	cmp	r3, #0
 8025984:	d0ef      	beq.n	8025966 <SDMMC_GetCmdResp1+0x22>
 8025986:	69bb      	ldr	r3, [r7, #24]
 8025988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802598c:	2b00      	cmp	r3, #0
 802598e:	d1ea      	bne.n	8025966 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025990:	68fb      	ldr	r3, [r7, #12]
 8025992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025994:	f003 0304 	and.w	r3, r3, #4
 8025998:	2b00      	cmp	r3, #0
 802599a:	d004      	beq.n	80259a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802599c:	68fb      	ldr	r3, [r7, #12]
 802599e:	2204      	movs	r2, #4
 80259a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80259a2:	2304      	movs	r3, #4
 80259a4:	e0b1      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80259a6:	68fb      	ldr	r3, [r7, #12]
 80259a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80259aa:	f003 0301 	and.w	r3, r3, #1
 80259ae:	2b00      	cmp	r3, #0
 80259b0:	d004      	beq.n	80259bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80259b2:	68fb      	ldr	r3, [r7, #12]
 80259b4:	2201      	movs	r2, #1
 80259b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80259b8:	2301      	movs	r3, #1
 80259ba:	e0a6      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80259bc:	68fb      	ldr	r3, [r7, #12]
 80259be:	4a58      	ldr	r2, [pc, #352]	@ (8025b20 <SDMMC_GetCmdResp1+0x1dc>)
 80259c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80259c2:	68f8      	ldr	r0, [r7, #12]
 80259c4:	f7ff fcf6 	bl	80253b4 <SDMMC_GetCommandResponse>
 80259c8:	4603      	mov	r3, r0
 80259ca:	461a      	mov	r2, r3
 80259cc:	7afb      	ldrb	r3, [r7, #11]
 80259ce:	4293      	cmp	r3, r2
 80259d0:	d001      	beq.n	80259d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80259d2:	2301      	movs	r3, #1
 80259d4:	e099      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80259d6:	2100      	movs	r1, #0
 80259d8:	68f8      	ldr	r0, [r7, #12]
 80259da:	f7ff fcf8 	bl	80253ce <SDMMC_GetResponse>
 80259de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80259e0:	697a      	ldr	r2, [r7, #20]
 80259e2:	4b50      	ldr	r3, [pc, #320]	@ (8025b24 <SDMMC_GetCmdResp1+0x1e0>)
 80259e4:	4013      	ands	r3, r2
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d101      	bne.n	80259ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80259ea:	2300      	movs	r3, #0
 80259ec:	e08d      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80259ee:	697b      	ldr	r3, [r7, #20]
 80259f0:	2b00      	cmp	r3, #0
 80259f2:	da02      	bge.n	80259fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80259f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80259f8:	e087      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80259fa:	697b      	ldr	r3, [r7, #20]
 80259fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	d001      	beq.n	8025a08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8025a04:	2340      	movs	r3, #64	@ 0x40
 8025a06:	e080      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8025a08:	697b      	ldr	r3, [r7, #20]
 8025a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8025a0e:	2b00      	cmp	r3, #0
 8025a10:	d001      	beq.n	8025a16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8025a12:	2380      	movs	r3, #128	@ 0x80
 8025a14:	e079      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8025a16:	697b      	ldr	r3, [r7, #20]
 8025a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	d002      	beq.n	8025a26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8025a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025a24:	e071      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8025a26:	697b      	ldr	r3, [r7, #20]
 8025a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	d002      	beq.n	8025a36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8025a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8025a34:	e069      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8025a36:	697b      	ldr	r3, [r7, #20]
 8025a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8025a3c:	2b00      	cmp	r3, #0
 8025a3e:	d002      	beq.n	8025a46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8025a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025a44:	e061      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8025a46:	697b      	ldr	r3, [r7, #20]
 8025a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	d002      	beq.n	8025a56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8025a50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8025a54:	e059      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8025a56:	697b      	ldr	r3, [r7, #20]
 8025a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	d002      	beq.n	8025a66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025a64:	e051      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8025a66:	697b      	ldr	r3, [r7, #20]
 8025a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	d002      	beq.n	8025a76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025a74:	e049      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8025a76:	697b      	ldr	r3, [r7, #20]
 8025a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	d002      	beq.n	8025a86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8025a80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8025a84:	e041      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8025a86:	697b      	ldr	r3, [r7, #20]
 8025a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	d002      	beq.n	8025a96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8025a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025a94:	e039      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8025a96:	697b      	ldr	r3, [r7, #20]
 8025a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	d002      	beq.n	8025aa6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8025aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8025aa4:	e031      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8025aa6:	697b      	ldr	r3, [r7, #20]
 8025aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	d002      	beq.n	8025ab6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8025ab0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8025ab4:	e029      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8025ab6:	697b      	ldr	r3, [r7, #20]
 8025ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8025abc:	2b00      	cmp	r3, #0
 8025abe:	d002      	beq.n	8025ac6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8025ac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8025ac4:	e021      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8025ac6:	697b      	ldr	r3, [r7, #20]
 8025ac8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025acc:	2b00      	cmp	r3, #0
 8025ace:	d002      	beq.n	8025ad6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8025ad0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8025ad4:	e019      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8025ad6:	697b      	ldr	r3, [r7, #20]
 8025ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	d002      	beq.n	8025ae6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8025ae0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8025ae4:	e011      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8025ae6:	697b      	ldr	r3, [r7, #20]
 8025ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	d002      	beq.n	8025af6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8025af0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8025af4:	e009      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8025af6:	697b      	ldr	r3, [r7, #20]
 8025af8:	f003 0308 	and.w	r3, r3, #8
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	d002      	beq.n	8025b06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8025b00:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8025b04:	e001      	b.n	8025b0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025b0a:	4618      	mov	r0, r3
 8025b0c:	3720      	adds	r7, #32
 8025b0e:	46bd      	mov	sp, r7
 8025b10:	bd80      	pop	{r7, pc}
 8025b12:	bf00      	nop
 8025b14:	2400001c 	.word	0x2400001c
 8025b18:	10624dd3 	.word	0x10624dd3
 8025b1c:	00200045 	.word	0x00200045
 8025b20:	002000c5 	.word	0x002000c5
 8025b24:	fdffe008 	.word	0xfdffe008

08025b28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8025b28:	b480      	push	{r7}
 8025b2a:	b085      	sub	sp, #20
 8025b2c:	af00      	add	r7, sp, #0
 8025b2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025b30:	4b1f      	ldr	r3, [pc, #124]	@ (8025bb0 <SDMMC_GetCmdResp2+0x88>)
 8025b32:	681b      	ldr	r3, [r3, #0]
 8025b34:	4a1f      	ldr	r2, [pc, #124]	@ (8025bb4 <SDMMC_GetCmdResp2+0x8c>)
 8025b36:	fba2 2303 	umull	r2, r3, r2, r3
 8025b3a:	0a5b      	lsrs	r3, r3, #9
 8025b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025b40:	fb02 f303 	mul.w	r3, r2, r3
 8025b44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025b46:	68fb      	ldr	r3, [r7, #12]
 8025b48:	1e5a      	subs	r2, r3, #1
 8025b4a:	60fa      	str	r2, [r7, #12]
 8025b4c:	2b00      	cmp	r3, #0
 8025b4e:	d102      	bne.n	8025b56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025b50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025b54:	e026      	b.n	8025ba4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b5c:	68bb      	ldr	r3, [r7, #8]
 8025b5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025b62:	2b00      	cmp	r3, #0
 8025b64:	d0ef      	beq.n	8025b46 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025b66:	68bb      	ldr	r3, [r7, #8]
 8025b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b6c:	2b00      	cmp	r3, #0
 8025b6e:	d1ea      	bne.n	8025b46 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b74:	f003 0304 	and.w	r3, r3, #4
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	d004      	beq.n	8025b86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	2204      	movs	r2, #4
 8025b80:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025b82:	2304      	movs	r3, #4
 8025b84:	e00e      	b.n	8025ba4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025b86:	687b      	ldr	r3, [r7, #4]
 8025b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b8a:	f003 0301 	and.w	r3, r3, #1
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d004      	beq.n	8025b9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025b92:	687b      	ldr	r3, [r7, #4]
 8025b94:	2201      	movs	r2, #1
 8025b96:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025b98:	2301      	movs	r3, #1
 8025b9a:	e003      	b.n	8025ba4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	4a06      	ldr	r2, [pc, #24]	@ (8025bb8 <SDMMC_GetCmdResp2+0x90>)
 8025ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025ba2:	2300      	movs	r3, #0
}
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	3714      	adds	r7, #20
 8025ba8:	46bd      	mov	sp, r7
 8025baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bae:	4770      	bx	lr
 8025bb0:	2400001c 	.word	0x2400001c
 8025bb4:	10624dd3 	.word	0x10624dd3
 8025bb8:	002000c5 	.word	0x002000c5

08025bbc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8025bbc:	b480      	push	{r7}
 8025bbe:	b085      	sub	sp, #20
 8025bc0:	af00      	add	r7, sp, #0
 8025bc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8025c30 <SDMMC_GetCmdResp3+0x74>)
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8025c34 <SDMMC_GetCmdResp3+0x78>)
 8025bca:	fba2 2303 	umull	r2, r3, r2, r3
 8025bce:	0a5b      	lsrs	r3, r3, #9
 8025bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025bd4:	fb02 f303 	mul.w	r3, r2, r3
 8025bd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025bda:	68fb      	ldr	r3, [r7, #12]
 8025bdc:	1e5a      	subs	r2, r3, #1
 8025bde:	60fa      	str	r2, [r7, #12]
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	d102      	bne.n	8025bea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025be4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025be8:	e01b      	b.n	8025c22 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8025bea:	687b      	ldr	r3, [r7, #4]
 8025bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025bee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025bf0:	68bb      	ldr	r3, [r7, #8]
 8025bf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025bf6:	2b00      	cmp	r3, #0
 8025bf8:	d0ef      	beq.n	8025bda <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025bfa:	68bb      	ldr	r3, [r7, #8]
 8025bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c00:	2b00      	cmp	r3, #0
 8025c02:	d1ea      	bne.n	8025bda <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c08:	f003 0304 	and.w	r3, r3, #4
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	d004      	beq.n	8025c1a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025c10:	687b      	ldr	r3, [r7, #4]
 8025c12:	2204      	movs	r2, #4
 8025c14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025c16:	2304      	movs	r3, #4
 8025c18:	e003      	b.n	8025c22 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	4a06      	ldr	r2, [pc, #24]	@ (8025c38 <SDMMC_GetCmdResp3+0x7c>)
 8025c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025c20:	2300      	movs	r3, #0
}
 8025c22:	4618      	mov	r0, r3
 8025c24:	3714      	adds	r7, #20
 8025c26:	46bd      	mov	sp, r7
 8025c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c2c:	4770      	bx	lr
 8025c2e:	bf00      	nop
 8025c30:	2400001c 	.word	0x2400001c
 8025c34:	10624dd3 	.word	0x10624dd3
 8025c38:	002000c5 	.word	0x002000c5

08025c3c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8025c3c:	b580      	push	{r7, lr}
 8025c3e:	b088      	sub	sp, #32
 8025c40:	af00      	add	r7, sp, #0
 8025c42:	60f8      	str	r0, [r7, #12]
 8025c44:	460b      	mov	r3, r1
 8025c46:	607a      	str	r2, [r7, #4]
 8025c48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025c4a:	4b35      	ldr	r3, [pc, #212]	@ (8025d20 <SDMMC_GetCmdResp6+0xe4>)
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	4a35      	ldr	r2, [pc, #212]	@ (8025d24 <SDMMC_GetCmdResp6+0xe8>)
 8025c50:	fba2 2303 	umull	r2, r3, r2, r3
 8025c54:	0a5b      	lsrs	r3, r3, #9
 8025c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025c5a:	fb02 f303 	mul.w	r3, r2, r3
 8025c5e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025c60:	69fb      	ldr	r3, [r7, #28]
 8025c62:	1e5a      	subs	r2, r3, #1
 8025c64:	61fa      	str	r2, [r7, #28]
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d102      	bne.n	8025c70 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025c6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025c6e:	e052      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8025c70:	68fb      	ldr	r3, [r7, #12]
 8025c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c74:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c76:	69bb      	ldr	r3, [r7, #24]
 8025c78:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025c7c:	2b00      	cmp	r3, #0
 8025c7e:	d0ef      	beq.n	8025c60 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025c80:	69bb      	ldr	r3, [r7, #24]
 8025c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c86:	2b00      	cmp	r3, #0
 8025c88:	d1ea      	bne.n	8025c60 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025c8a:	68fb      	ldr	r3, [r7, #12]
 8025c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c8e:	f003 0304 	and.w	r3, r3, #4
 8025c92:	2b00      	cmp	r3, #0
 8025c94:	d004      	beq.n	8025ca0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025c96:	68fb      	ldr	r3, [r7, #12]
 8025c98:	2204      	movs	r2, #4
 8025c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025c9c:	2304      	movs	r3, #4
 8025c9e:	e03a      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025ca0:	68fb      	ldr	r3, [r7, #12]
 8025ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ca4:	f003 0301 	and.w	r3, r3, #1
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	d004      	beq.n	8025cb6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025cac:	68fb      	ldr	r3, [r7, #12]
 8025cae:	2201      	movs	r2, #1
 8025cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025cb2:	2301      	movs	r3, #1
 8025cb4:	e02f      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8025cb6:	68f8      	ldr	r0, [r7, #12]
 8025cb8:	f7ff fb7c 	bl	80253b4 <SDMMC_GetCommandResponse>
 8025cbc:	4603      	mov	r3, r0
 8025cbe:	461a      	mov	r2, r3
 8025cc0:	7afb      	ldrb	r3, [r7, #11]
 8025cc2:	4293      	cmp	r3, r2
 8025cc4:	d001      	beq.n	8025cca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025cc6:	2301      	movs	r3, #1
 8025cc8:	e025      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025cca:	68fb      	ldr	r3, [r7, #12]
 8025ccc:	4a16      	ldr	r2, [pc, #88]	@ (8025d28 <SDMMC_GetCmdResp6+0xec>)
 8025cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025cd0:	2100      	movs	r1, #0
 8025cd2:	68f8      	ldr	r0, [r7, #12]
 8025cd4:	f7ff fb7b 	bl	80253ce <SDMMC_GetResponse>
 8025cd8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8025cda:	697b      	ldr	r3, [r7, #20]
 8025cdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8025ce0:	2b00      	cmp	r3, #0
 8025ce2:	d106      	bne.n	8025cf2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8025ce4:	697b      	ldr	r3, [r7, #20]
 8025ce6:	0c1b      	lsrs	r3, r3, #16
 8025ce8:	b29a      	uxth	r2, r3
 8025cea:	687b      	ldr	r3, [r7, #4]
 8025cec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8025cee:	2300      	movs	r3, #0
 8025cf0:	e011      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8025cf2:	697b      	ldr	r3, [r7, #20]
 8025cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025cf8:	2b00      	cmp	r3, #0
 8025cfa:	d002      	beq.n	8025d02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025d00:	e009      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8025d02:	697b      	ldr	r3, [r7, #20]
 8025d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	d002      	beq.n	8025d12 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025d10:	e001      	b.n	8025d16 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025d16:	4618      	mov	r0, r3
 8025d18:	3720      	adds	r7, #32
 8025d1a:	46bd      	mov	sp, r7
 8025d1c:	bd80      	pop	{r7, pc}
 8025d1e:	bf00      	nop
 8025d20:	2400001c 	.word	0x2400001c
 8025d24:	10624dd3 	.word	0x10624dd3
 8025d28:	002000c5 	.word	0x002000c5

08025d2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8025d2c:	b480      	push	{r7}
 8025d2e:	b085      	sub	sp, #20
 8025d30:	af00      	add	r7, sp, #0
 8025d32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025d34:	4b22      	ldr	r3, [pc, #136]	@ (8025dc0 <SDMMC_GetCmdResp7+0x94>)
 8025d36:	681b      	ldr	r3, [r3, #0]
 8025d38:	4a22      	ldr	r2, [pc, #136]	@ (8025dc4 <SDMMC_GetCmdResp7+0x98>)
 8025d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8025d3e:	0a5b      	lsrs	r3, r3, #9
 8025d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025d44:	fb02 f303 	mul.w	r3, r2, r3
 8025d48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025d4a:	68fb      	ldr	r3, [r7, #12]
 8025d4c:	1e5a      	subs	r2, r3, #1
 8025d4e:	60fa      	str	r2, [r7, #12]
 8025d50:	2b00      	cmp	r3, #0
 8025d52:	d102      	bne.n	8025d5a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025d54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025d58:	e02c      	b.n	8025db4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8025d5a:	687b      	ldr	r3, [r7, #4]
 8025d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025d60:	68bb      	ldr	r3, [r7, #8]
 8025d62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025d66:	2b00      	cmp	r3, #0
 8025d68:	d0ef      	beq.n	8025d4a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025d6a:	68bb      	ldr	r3, [r7, #8]
 8025d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d1ea      	bne.n	8025d4a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025d74:	687b      	ldr	r3, [r7, #4]
 8025d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d78:	f003 0304 	and.w	r3, r3, #4
 8025d7c:	2b00      	cmp	r3, #0
 8025d7e:	d004      	beq.n	8025d8a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025d80:	687b      	ldr	r3, [r7, #4]
 8025d82:	2204      	movs	r2, #4
 8025d84:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025d86:	2304      	movs	r3, #4
 8025d88:	e014      	b.n	8025db4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025d8a:	687b      	ldr	r3, [r7, #4]
 8025d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d8e:	f003 0301 	and.w	r3, r3, #1
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d004      	beq.n	8025da0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025d96:	687b      	ldr	r3, [r7, #4]
 8025d98:	2201      	movs	r2, #1
 8025d9a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025d9c:	2301      	movs	r3, #1
 8025d9e:	e009      	b.n	8025db4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	d002      	beq.n	8025db2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8025dac:	687b      	ldr	r3, [r7, #4]
 8025dae:	2240      	movs	r2, #64	@ 0x40
 8025db0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025db2:	2300      	movs	r3, #0

}
 8025db4:	4618      	mov	r0, r3
 8025db6:	3714      	adds	r7, #20
 8025db8:	46bd      	mov	sp, r7
 8025dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dbe:	4770      	bx	lr
 8025dc0:	2400001c 	.word	0x2400001c
 8025dc4:	10624dd3 	.word	0x10624dd3

08025dc8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8025dc8:	b480      	push	{r7}
 8025dca:	b085      	sub	sp, #20
 8025dcc:	af00      	add	r7, sp, #0
 8025dce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025dd0:	4b11      	ldr	r3, [pc, #68]	@ (8025e18 <SDMMC_GetCmdError+0x50>)
 8025dd2:	681b      	ldr	r3, [r3, #0]
 8025dd4:	4a11      	ldr	r2, [pc, #68]	@ (8025e1c <SDMMC_GetCmdError+0x54>)
 8025dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8025dda:	0a5b      	lsrs	r3, r3, #9
 8025ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025de0:	fb02 f303 	mul.w	r3, r2, r3
 8025de4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025de6:	68fb      	ldr	r3, [r7, #12]
 8025de8:	1e5a      	subs	r2, r3, #1
 8025dea:	60fa      	str	r2, [r7, #12]
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	d102      	bne.n	8025df6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025df0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025df4:	e009      	b.n	8025e0a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025dfe:	2b00      	cmp	r3, #0
 8025e00:	d0f1      	beq.n	8025de6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025e02:	687b      	ldr	r3, [r7, #4]
 8025e04:	4a06      	ldr	r2, [pc, #24]	@ (8025e20 <SDMMC_GetCmdError+0x58>)
 8025e06:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8025e08:	2300      	movs	r3, #0
}
 8025e0a:	4618      	mov	r0, r3
 8025e0c:	3714      	adds	r7, #20
 8025e0e:	46bd      	mov	sp, r7
 8025e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e14:	4770      	bx	lr
 8025e16:	bf00      	nop
 8025e18:	2400001c 	.word	0x2400001c
 8025e1c:	10624dd3 	.word	0x10624dd3
 8025e20:	002000c5 	.word	0x002000c5

08025e24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8025e24:	b580      	push	{r7, lr}
 8025e26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8025e28:	4904      	ldr	r1, [pc, #16]	@ (8025e3c <MX_FATFS_Init+0x18>)
 8025e2a:	4805      	ldr	r0, [pc, #20]	@ (8025e40 <MX_FATFS_Init+0x1c>)
 8025e2c:	f002 fc08 	bl	8028640 <FATFS_LinkDriver>
 8025e30:	4603      	mov	r3, r0
 8025e32:	461a      	mov	r2, r3
 8025e34:	4b03      	ldr	r3, [pc, #12]	@ (8025e44 <MX_FATFS_Init+0x20>)
 8025e36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8025e38:	bf00      	nop
 8025e3a:	bd80      	pop	{r7, pc}
 8025e3c:	24000420 	.word	0x24000420
 8025e40:	0802b730 	.word	0x0802b730
 8025e44:	2400041c 	.word	0x2400041c

08025e48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8025e48:	b480      	push	{r7}
 8025e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8025e4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8025e4e:	4618      	mov	r0, r3
 8025e50:	46bd      	mov	sp, r7
 8025e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e56:	4770      	bx	lr

08025e58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8025e58:	b580      	push	{r7, lr}
 8025e5a:	b086      	sub	sp, #24
 8025e5c:	af00      	add	r7, sp, #0
 8025e5e:	60f8      	str	r0, [r7, #12]
 8025e60:	60b9      	str	r1, [r7, #8]
 8025e62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025e64:	2300      	movs	r3, #0
 8025e66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	68ba      	ldr	r2, [r7, #8]
 8025e6c:	68f9      	ldr	r1, [r7, #12]
 8025e6e:	4806      	ldr	r0, [pc, #24]	@ (8025e88 <BSP_SD_ReadBlocks_DMA+0x30>)
 8025e70:	f7fc fc16 	bl	80226a0 <HAL_SD_ReadBlocks_DMA>
 8025e74:	4603      	mov	r3, r0
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d001      	beq.n	8025e7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025e7a:	2301      	movs	r3, #1
 8025e7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8025e80:	4618      	mov	r0, r3
 8025e82:	3718      	adds	r7, #24
 8025e84:	46bd      	mov	sp, r7
 8025e86:	bd80      	pop	{r7, pc}
 8025e88:	240002fc 	.word	0x240002fc

08025e8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8025e8c:	b580      	push	{r7, lr}
 8025e8e:	b086      	sub	sp, #24
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	60f8      	str	r0, [r7, #12]
 8025e94:	60b9      	str	r1, [r7, #8]
 8025e96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025e98:	2300      	movs	r3, #0
 8025e9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8025e9c:	687b      	ldr	r3, [r7, #4]
 8025e9e:	68ba      	ldr	r2, [r7, #8]
 8025ea0:	68f9      	ldr	r1, [r7, #12]
 8025ea2:	4806      	ldr	r0, [pc, #24]	@ (8025ebc <BSP_SD_WriteBlocks_DMA+0x30>)
 8025ea4:	f7fc fca4 	bl	80227f0 <HAL_SD_WriteBlocks_DMA>
 8025ea8:	4603      	mov	r3, r0
 8025eaa:	2b00      	cmp	r3, #0
 8025eac:	d001      	beq.n	8025eb2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025eae:	2301      	movs	r3, #1
 8025eb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8025eb4:	4618      	mov	r0, r3
 8025eb6:	3718      	adds	r7, #24
 8025eb8:	46bd      	mov	sp, r7
 8025eba:	bd80      	pop	{r7, pc}
 8025ebc:	240002fc 	.word	0x240002fc

08025ec0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8025ec0:	b580      	push	{r7, lr}
 8025ec2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8025ec4:	4805      	ldr	r0, [pc, #20]	@ (8025edc <BSP_SD_GetCardState+0x1c>)
 8025ec6:	f7fd fa9d 	bl	8023404 <HAL_SD_GetCardState>
 8025eca:	4603      	mov	r3, r0
 8025ecc:	2b04      	cmp	r3, #4
 8025ece:	bf14      	ite	ne
 8025ed0:	2301      	movne	r3, #1
 8025ed2:	2300      	moveq	r3, #0
 8025ed4:	b2db      	uxtb	r3, r3
}
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	bd80      	pop	{r7, pc}
 8025eda:	bf00      	nop
 8025edc:	240002fc 	.word	0x240002fc

08025ee0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8025ee0:	b580      	push	{r7, lr}
 8025ee2:	b082      	sub	sp, #8
 8025ee4:	af00      	add	r7, sp, #0
 8025ee6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8025ee8:	6879      	ldr	r1, [r7, #4]
 8025eea:	4803      	ldr	r0, [pc, #12]	@ (8025ef8 <BSP_SD_GetCardInfo+0x18>)
 8025eec:	f7fd f94c 	bl	8023188 <HAL_SD_GetCardInfo>
}
 8025ef0:	bf00      	nop
 8025ef2:	3708      	adds	r7, #8
 8025ef4:	46bd      	mov	sp, r7
 8025ef6:	bd80      	pop	{r7, pc}
 8025ef8:	240002fc 	.word	0x240002fc

08025efc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025efc:	b580      	push	{r7, lr}
 8025efe:	b082      	sub	sp, #8
 8025f00:	af00      	add	r7, sp, #0
 8025f02:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8025f04:	f000 fa14 	bl	8026330 <BSP_SD_WriteCpltCallback>
}
 8025f08:	bf00      	nop
 8025f0a:	3708      	adds	r7, #8
 8025f0c:	46bd      	mov	sp, r7
 8025f0e:	bd80      	pop	{r7, pc}

08025f10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025f10:	b580      	push	{r7, lr}
 8025f12:	b082      	sub	sp, #8
 8025f14:	af00      	add	r7, sp, #0
 8025f16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8025f18:	f000 fa16 	bl	8026348 <BSP_SD_ReadCpltCallback>
}
 8025f1c:	bf00      	nop
 8025f1e:	3708      	adds	r7, #8
 8025f20:	46bd      	mov	sp, r7
 8025f22:	bd80      	pop	{r7, pc}

08025f24 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8025f24:	b580      	push	{r7, lr}
 8025f26:	b084      	sub	sp, #16
 8025f28:	af00      	add	r7, sp, #0
 8025f2a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8025f2c:	f7f5 fe7a 	bl	801bc24 <HAL_GetTick>
 8025f30:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8025f32:	e006      	b.n	8025f42 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025f34:	f7ff ffc4 	bl	8025ec0 <BSP_SD_GetCardState>
 8025f38:	4603      	mov	r3, r0
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d101      	bne.n	8025f42 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8025f3e:	2300      	movs	r3, #0
 8025f40:	e009      	b.n	8025f56 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8025f42:	f7f5 fe6f 	bl	801bc24 <HAL_GetTick>
 8025f46:	4602      	mov	r2, r0
 8025f48:	68fb      	ldr	r3, [r7, #12]
 8025f4a:	1ad3      	subs	r3, r2, r3
 8025f4c:	687a      	ldr	r2, [r7, #4]
 8025f4e:	429a      	cmp	r2, r3
 8025f50:	d8f0      	bhi.n	8025f34 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8025f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025f56:	4618      	mov	r0, r3
 8025f58:	3710      	adds	r7, #16
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}
	...

08025f60 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8025f60:	b580      	push	{r7, lr}
 8025f62:	b082      	sub	sp, #8
 8025f64:	af00      	add	r7, sp, #0
 8025f66:	4603      	mov	r3, r0
 8025f68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8025f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8025f98 <SD_CheckStatus+0x38>)
 8025f6c:	2201      	movs	r2, #1
 8025f6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8025f70:	f7ff ffa6 	bl	8025ec0 <BSP_SD_GetCardState>
 8025f74:	4603      	mov	r3, r0
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	d107      	bne.n	8025f8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8025f7a:	4b07      	ldr	r3, [pc, #28]	@ (8025f98 <SD_CheckStatus+0x38>)
 8025f7c:	781b      	ldrb	r3, [r3, #0]
 8025f7e:	b2db      	uxtb	r3, r3
 8025f80:	f023 0301 	bic.w	r3, r3, #1
 8025f84:	b2da      	uxtb	r2, r3
 8025f86:	4b04      	ldr	r3, [pc, #16]	@ (8025f98 <SD_CheckStatus+0x38>)
 8025f88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8025f8a:	4b03      	ldr	r3, [pc, #12]	@ (8025f98 <SD_CheckStatus+0x38>)
 8025f8c:	781b      	ldrb	r3, [r3, #0]
 8025f8e:	b2db      	uxtb	r3, r3
}
 8025f90:	4618      	mov	r0, r3
 8025f92:	3708      	adds	r7, #8
 8025f94:	46bd      	mov	sp, r7
 8025f96:	bd80      	pop	{r7, pc}
 8025f98:	24000029 	.word	0x24000029

08025f9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8025f9c:	b580      	push	{r7, lr}
 8025f9e:	b082      	sub	sp, #8
 8025fa0:	af00      	add	r7, sp, #0
 8025fa2:	4603      	mov	r3, r0
 8025fa4:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8025fa6:	79fb      	ldrb	r3, [r7, #7]
 8025fa8:	4618      	mov	r0, r3
 8025faa:	f7ff ffd9 	bl	8025f60 <SD_CheckStatus>
 8025fae:	4603      	mov	r3, r0
 8025fb0:	461a      	mov	r2, r3
 8025fb2:	4b04      	ldr	r3, [pc, #16]	@ (8025fc4 <SD_initialize+0x28>)
 8025fb4:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8025fb6:	4b03      	ldr	r3, [pc, #12]	@ (8025fc4 <SD_initialize+0x28>)
 8025fb8:	781b      	ldrb	r3, [r3, #0]
 8025fba:	b2db      	uxtb	r3, r3
}
 8025fbc:	4618      	mov	r0, r3
 8025fbe:	3708      	adds	r7, #8
 8025fc0:	46bd      	mov	sp, r7
 8025fc2:	bd80      	pop	{r7, pc}
 8025fc4:	24000029 	.word	0x24000029

08025fc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8025fc8:	b580      	push	{r7, lr}
 8025fca:	b082      	sub	sp, #8
 8025fcc:	af00      	add	r7, sp, #0
 8025fce:	4603      	mov	r3, r0
 8025fd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8025fd2:	79fb      	ldrb	r3, [r7, #7]
 8025fd4:	4618      	mov	r0, r3
 8025fd6:	f7ff ffc3 	bl	8025f60 <SD_CheckStatus>
 8025fda:	4603      	mov	r3, r0
}
 8025fdc:	4618      	mov	r0, r3
 8025fde:	3708      	adds	r7, #8
 8025fe0:	46bd      	mov	sp, r7
 8025fe2:	bd80      	pop	{r7, pc}

08025fe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8025fe4:	b580      	push	{r7, lr}
 8025fe6:	b088      	sub	sp, #32
 8025fe8:	af00      	add	r7, sp, #0
 8025fea:	60b9      	str	r1, [r7, #8]
 8025fec:	607a      	str	r2, [r7, #4]
 8025fee:	603b      	str	r3, [r7, #0]
 8025ff0:	4603      	mov	r3, r0
 8025ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8025ff4:	2301      	movs	r3, #1
 8025ff6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8025ff8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8025ffc:	f7ff ff92 	bl	8025f24 <SD_CheckStatusWithTimeout>
 8026000:	4603      	mov	r3, r0
 8026002:	2b00      	cmp	r3, #0
 8026004:	da01      	bge.n	802600a <SD_read+0x26>
  {
    return res;
 8026006:	7ffb      	ldrb	r3, [r7, #31]
 8026008:	e08b      	b.n	8026122 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 802600a:	68bb      	ldr	r3, [r7, #8]
 802600c:	f003 0303 	and.w	r3, r3, #3
 8026010:	2b00      	cmp	r3, #0
 8026012:	d13b      	bne.n	802608c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8026014:	683a      	ldr	r2, [r7, #0]
 8026016:	6879      	ldr	r1, [r7, #4]
 8026018:	68b8      	ldr	r0, [r7, #8]
 802601a:	f7ff ff1d 	bl	8025e58 <BSP_SD_ReadBlocks_DMA>
 802601e:	4603      	mov	r3, r0
 8026020:	2b00      	cmp	r3, #0
 8026022:	d17d      	bne.n	8026120 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8026024:	4b41      	ldr	r3, [pc, #260]	@ (802612c <SD_read+0x148>)
 8026026:	2200      	movs	r2, #0
 8026028:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 802602a:	f7f5 fdfb 	bl	801bc24 <HAL_GetTick>
 802602e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8026030:	bf00      	nop
 8026032:	4b3e      	ldr	r3, [pc, #248]	@ (802612c <SD_read+0x148>)
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	2b00      	cmp	r3, #0
 8026038:	d108      	bne.n	802604c <SD_read+0x68>
 802603a:	f7f5 fdf3 	bl	801bc24 <HAL_GetTick>
 802603e:	4602      	mov	r2, r0
 8026040:	697b      	ldr	r3, [r7, #20]
 8026042:	1ad3      	subs	r3, r2, r3
 8026044:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026048:	4293      	cmp	r3, r2
 802604a:	d9f2      	bls.n	8026032 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 802604c:	4b37      	ldr	r3, [pc, #220]	@ (802612c <SD_read+0x148>)
 802604e:	681b      	ldr	r3, [r3, #0]
 8026050:	2b00      	cmp	r3, #0
 8026052:	d102      	bne.n	802605a <SD_read+0x76>
      {
        res = RES_ERROR;
 8026054:	2301      	movs	r3, #1
 8026056:	77fb      	strb	r3, [r7, #31]
 8026058:	e062      	b.n	8026120 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 802605a:	4b34      	ldr	r3, [pc, #208]	@ (802612c <SD_read+0x148>)
 802605c:	2200      	movs	r2, #0
 802605e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8026060:	f7f5 fde0 	bl	801bc24 <HAL_GetTick>
 8026064:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8026066:	e007      	b.n	8026078 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8026068:	f7ff ff2a 	bl	8025ec0 <BSP_SD_GetCardState>
 802606c:	4603      	mov	r3, r0
 802606e:	2b00      	cmp	r3, #0
 8026070:	d102      	bne.n	8026078 <SD_read+0x94>
          {
            res = RES_OK;
 8026072:	2300      	movs	r3, #0
 8026074:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8026076:	e053      	b.n	8026120 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8026078:	f7f5 fdd4 	bl	801bc24 <HAL_GetTick>
 802607c:	4602      	mov	r2, r0
 802607e:	697b      	ldr	r3, [r7, #20]
 8026080:	1ad3      	subs	r3, r2, r3
 8026082:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026086:	4293      	cmp	r3, r2
 8026088:	d9ee      	bls.n	8026068 <SD_read+0x84>
 802608a:	e049      	b.n	8026120 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 802608c:	2300      	movs	r3, #0
 802608e:	61bb      	str	r3, [r7, #24]
 8026090:	e037      	b.n	8026102 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8026092:	687b      	ldr	r3, [r7, #4]
 8026094:	1c5a      	adds	r2, r3, #1
 8026096:	607a      	str	r2, [r7, #4]
 8026098:	2201      	movs	r2, #1
 802609a:	4619      	mov	r1, r3
 802609c:	4824      	ldr	r0, [pc, #144]	@ (8026130 <SD_read+0x14c>)
 802609e:	f7ff fedb 	bl	8025e58 <BSP_SD_ReadBlocks_DMA>
 80260a2:	4603      	mov	r3, r0
 80260a4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80260a6:	7fbb      	ldrb	r3, [r7, #30]
 80260a8:	2b00      	cmp	r3, #0
 80260aa:	d12f      	bne.n	802610c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 80260ac:	f7f5 fdba 	bl	801bc24 <HAL_GetTick>
 80260b0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80260b2:	bf00      	nop
 80260b4:	4b1d      	ldr	r3, [pc, #116]	@ (802612c <SD_read+0x148>)
 80260b6:	681b      	ldr	r3, [r3, #0]
 80260b8:	2b00      	cmp	r3, #0
 80260ba:	d108      	bne.n	80260ce <SD_read+0xea>
 80260bc:	f7f5 fdb2 	bl	801bc24 <HAL_GetTick>
 80260c0:	4602      	mov	r2, r0
 80260c2:	697b      	ldr	r3, [r7, #20]
 80260c4:	1ad3      	subs	r3, r2, r3
 80260c6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80260ca:	4293      	cmp	r3, r2
 80260cc:	d9f2      	bls.n	80260b4 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 80260ce:	4b17      	ldr	r3, [pc, #92]	@ (802612c <SD_read+0x148>)
 80260d0:	681b      	ldr	r3, [r3, #0]
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	d102      	bne.n	80260dc <SD_read+0xf8>
          {
            res = RES_ERROR;
 80260d6:	2301      	movs	r3, #1
 80260d8:	77fb      	strb	r3, [r7, #31]
            break;
 80260da:	e018      	b.n	802610e <SD_read+0x12a>
          }
          ReadStatus = 0;
 80260dc:	4b13      	ldr	r3, [pc, #76]	@ (802612c <SD_read+0x148>)
 80260de:	2200      	movs	r2, #0
 80260e0:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80260e2:	68bb      	ldr	r3, [r7, #8]
 80260e4:	4a12      	ldr	r2, [pc, #72]	@ (8026130 <SD_read+0x14c>)
 80260e6:	4618      	mov	r0, r3
 80260e8:	4611      	mov	r1, r2
 80260ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80260ee:	461a      	mov	r2, r3
 80260f0:	f003 fbb9 	bl	8029866 <memcpy>
          buff += BLOCKSIZE;
 80260f4:	68bb      	ldr	r3, [r7, #8]
 80260f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80260fa:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80260fc:	69bb      	ldr	r3, [r7, #24]
 80260fe:	3301      	adds	r3, #1
 8026100:	61bb      	str	r3, [r7, #24]
 8026102:	69bb      	ldr	r3, [r7, #24]
 8026104:	683a      	ldr	r2, [r7, #0]
 8026106:	429a      	cmp	r2, r3
 8026108:	d8c3      	bhi.n	8026092 <SD_read+0xae>
 802610a:	e000      	b.n	802610e <SD_read+0x12a>
        }
        else
        {
          break;
 802610c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 802610e:	69bb      	ldr	r3, [r7, #24]
 8026110:	683a      	ldr	r2, [r7, #0]
 8026112:	429a      	cmp	r2, r3
 8026114:	d104      	bne.n	8026120 <SD_read+0x13c>
 8026116:	7fbb      	ldrb	r3, [r7, #30]
 8026118:	2b00      	cmp	r3, #0
 802611a:	d101      	bne.n	8026120 <SD_read+0x13c>
        res = RES_OK;
 802611c:	2300      	movs	r3, #0
 802611e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8026120:	7ffb      	ldrb	r3, [r7, #31]
}
 8026122:	4618      	mov	r0, r3
 8026124:	3720      	adds	r7, #32
 8026126:	46bd      	mov	sp, r7
 8026128:	bd80      	pop	{r7, pc}
 802612a:	bf00      	nop
 802612c:	24000a88 	.word	0x24000a88
 8026130:	24000884 	.word	0x24000884

08026134 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8026134:	b580      	push	{r7, lr}
 8026136:	b088      	sub	sp, #32
 8026138:	af00      	add	r7, sp, #0
 802613a:	60b9      	str	r1, [r7, #8]
 802613c:	607a      	str	r2, [r7, #4]
 802613e:	603b      	str	r3, [r7, #0]
 8026140:	4603      	mov	r3, r0
 8026142:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8026144:	2301      	movs	r3, #1
 8026146:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8026148:	4b4b      	ldr	r3, [pc, #300]	@ (8026278 <SD_write+0x144>)
 802614a:	2200      	movs	r2, #0
 802614c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802614e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8026152:	f7ff fee7 	bl	8025f24 <SD_CheckStatusWithTimeout>
 8026156:	4603      	mov	r3, r0
 8026158:	2b00      	cmp	r3, #0
 802615a:	da01      	bge.n	8026160 <SD_write+0x2c>
  {
    return res;
 802615c:	7ffb      	ldrb	r3, [r7, #31]
 802615e:	e087      	b.n	8026270 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8026160:	68bb      	ldr	r3, [r7, #8]
 8026162:	f003 0303 	and.w	r3, r3, #3
 8026166:	2b00      	cmp	r3, #0
 8026168:	d138      	bne.n	80261dc <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 802616a:	683a      	ldr	r2, [r7, #0]
 802616c:	6879      	ldr	r1, [r7, #4]
 802616e:	68b8      	ldr	r0, [r7, #8]
 8026170:	f7ff fe8c 	bl	8025e8c <BSP_SD_WriteBlocks_DMA>
 8026174:	4603      	mov	r3, r0
 8026176:	2b00      	cmp	r3, #0
 8026178:	d179      	bne.n	802626e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 802617a:	f7f5 fd53 	bl	801bc24 <HAL_GetTick>
 802617e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8026180:	bf00      	nop
 8026182:	4b3d      	ldr	r3, [pc, #244]	@ (8026278 <SD_write+0x144>)
 8026184:	681b      	ldr	r3, [r3, #0]
 8026186:	2b00      	cmp	r3, #0
 8026188:	d108      	bne.n	802619c <SD_write+0x68>
 802618a:	f7f5 fd4b 	bl	801bc24 <HAL_GetTick>
 802618e:	4602      	mov	r2, r0
 8026190:	697b      	ldr	r3, [r7, #20]
 8026192:	1ad3      	subs	r3, r2, r3
 8026194:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026198:	4293      	cmp	r3, r2
 802619a:	d9f2      	bls.n	8026182 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 802619c:	4b36      	ldr	r3, [pc, #216]	@ (8026278 <SD_write+0x144>)
 802619e:	681b      	ldr	r3, [r3, #0]
 80261a0:	2b00      	cmp	r3, #0
 80261a2:	d102      	bne.n	80261aa <SD_write+0x76>
      {
        res = RES_ERROR;
 80261a4:	2301      	movs	r3, #1
 80261a6:	77fb      	strb	r3, [r7, #31]
 80261a8:	e061      	b.n	802626e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 80261aa:	4b33      	ldr	r3, [pc, #204]	@ (8026278 <SD_write+0x144>)
 80261ac:	2200      	movs	r2, #0
 80261ae:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80261b0:	f7f5 fd38 	bl	801bc24 <HAL_GetTick>
 80261b4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80261b6:	e007      	b.n	80261c8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80261b8:	f7ff fe82 	bl	8025ec0 <BSP_SD_GetCardState>
 80261bc:	4603      	mov	r3, r0
 80261be:	2b00      	cmp	r3, #0
 80261c0:	d102      	bne.n	80261c8 <SD_write+0x94>
          {
            res = RES_OK;
 80261c2:	2300      	movs	r3, #0
 80261c4:	77fb      	strb	r3, [r7, #31]
            break;
 80261c6:	e052      	b.n	802626e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80261c8:	f7f5 fd2c 	bl	801bc24 <HAL_GetTick>
 80261cc:	4602      	mov	r2, r0
 80261ce:	697b      	ldr	r3, [r7, #20]
 80261d0:	1ad3      	subs	r3, r2, r3
 80261d2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80261d6:	4293      	cmp	r3, r2
 80261d8:	d9ee      	bls.n	80261b8 <SD_write+0x84>
 80261da:	e048      	b.n	802626e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80261dc:	2300      	movs	r3, #0
 80261de:	61bb      	str	r3, [r7, #24]
 80261e0:	e034      	b.n	802624c <SD_write+0x118>
      {
        WriteStatus = 0;
 80261e2:	4b25      	ldr	r3, [pc, #148]	@ (8026278 <SD_write+0x144>)
 80261e4:	2200      	movs	r2, #0
 80261e6:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 80261e8:	4a24      	ldr	r2, [pc, #144]	@ (802627c <SD_write+0x148>)
 80261ea:	68bb      	ldr	r3, [r7, #8]
 80261ec:	4610      	mov	r0, r2
 80261ee:	4619      	mov	r1, r3
 80261f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80261f4:	461a      	mov	r2, r3
 80261f6:	f003 fb36 	bl	8029866 <memcpy>
        buff += BLOCKSIZE;
 80261fa:	68bb      	ldr	r3, [r7, #8]
 80261fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8026200:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8026202:	687b      	ldr	r3, [r7, #4]
 8026204:	1c5a      	adds	r2, r3, #1
 8026206:	607a      	str	r2, [r7, #4]
 8026208:	2201      	movs	r2, #1
 802620a:	4619      	mov	r1, r3
 802620c:	481b      	ldr	r0, [pc, #108]	@ (802627c <SD_write+0x148>)
 802620e:	f7ff fe3d 	bl	8025e8c <BSP_SD_WriteBlocks_DMA>
 8026212:	4603      	mov	r3, r0
 8026214:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8026216:	7fbb      	ldrb	r3, [r7, #30]
 8026218:	2b00      	cmp	r3, #0
 802621a:	d11c      	bne.n	8026256 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 802621c:	f7f5 fd02 	bl	801bc24 <HAL_GetTick>
 8026220:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8026222:	bf00      	nop
 8026224:	4b14      	ldr	r3, [pc, #80]	@ (8026278 <SD_write+0x144>)
 8026226:	681b      	ldr	r3, [r3, #0]
 8026228:	2b00      	cmp	r3, #0
 802622a:	d108      	bne.n	802623e <SD_write+0x10a>
 802622c:	f7f5 fcfa 	bl	801bc24 <HAL_GetTick>
 8026230:	4602      	mov	r2, r0
 8026232:	697b      	ldr	r3, [r7, #20]
 8026234:	1ad3      	subs	r3, r2, r3
 8026236:	f247 522f 	movw	r2, #29999	@ 0x752f
 802623a:	4293      	cmp	r3, r2
 802623c:	d9f2      	bls.n	8026224 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 802623e:	4b0e      	ldr	r3, [pc, #56]	@ (8026278 <SD_write+0x144>)
 8026240:	681b      	ldr	r3, [r3, #0]
 8026242:	2b00      	cmp	r3, #0
 8026244:	d009      	beq.n	802625a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8026246:	69bb      	ldr	r3, [r7, #24]
 8026248:	3301      	adds	r3, #1
 802624a:	61bb      	str	r3, [r7, #24]
 802624c:	69bb      	ldr	r3, [r7, #24]
 802624e:	683a      	ldr	r2, [r7, #0]
 8026250:	429a      	cmp	r2, r3
 8026252:	d8c6      	bhi.n	80261e2 <SD_write+0xae>
 8026254:	e002      	b.n	802625c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8026256:	bf00      	nop
 8026258:	e000      	b.n	802625c <SD_write+0x128>
            break;
 802625a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 802625c:	69bb      	ldr	r3, [r7, #24]
 802625e:	683a      	ldr	r2, [r7, #0]
 8026260:	429a      	cmp	r2, r3
 8026262:	d104      	bne.n	802626e <SD_write+0x13a>
 8026264:	7fbb      	ldrb	r3, [r7, #30]
 8026266:	2b00      	cmp	r3, #0
 8026268:	d101      	bne.n	802626e <SD_write+0x13a>
        res = RES_OK;
 802626a:	2300      	movs	r3, #0
 802626c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 802626e:	7ffb      	ldrb	r3, [r7, #31]
}
 8026270:	4618      	mov	r0, r3
 8026272:	3720      	adds	r7, #32
 8026274:	46bd      	mov	sp, r7
 8026276:	bd80      	pop	{r7, pc}
 8026278:	24000a84 	.word	0x24000a84
 802627c:	24000884 	.word	0x24000884

08026280 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8026280:	b580      	push	{r7, lr}
 8026282:	b08c      	sub	sp, #48	@ 0x30
 8026284:	af00      	add	r7, sp, #0
 8026286:	4603      	mov	r3, r0
 8026288:	603a      	str	r2, [r7, #0]
 802628a:	71fb      	strb	r3, [r7, #7]
 802628c:	460b      	mov	r3, r1
 802628e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8026290:	2301      	movs	r3, #1
 8026292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8026296:	4b25      	ldr	r3, [pc, #148]	@ (802632c <SD_ioctl+0xac>)
 8026298:	781b      	ldrb	r3, [r3, #0]
 802629a:	b2db      	uxtb	r3, r3
 802629c:	f003 0301 	and.w	r3, r3, #1
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d001      	beq.n	80262a8 <SD_ioctl+0x28>
 80262a4:	2303      	movs	r3, #3
 80262a6:	e03c      	b.n	8026322 <SD_ioctl+0xa2>

  switch (cmd)
 80262a8:	79bb      	ldrb	r3, [r7, #6]
 80262aa:	2b03      	cmp	r3, #3
 80262ac:	d834      	bhi.n	8026318 <SD_ioctl+0x98>
 80262ae:	a201      	add	r2, pc, #4	@ (adr r2, 80262b4 <SD_ioctl+0x34>)
 80262b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80262b4:	080262c5 	.word	0x080262c5
 80262b8:	080262cd 	.word	0x080262cd
 80262bc:	080262e5 	.word	0x080262e5
 80262c0:	080262ff 	.word	0x080262ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80262c4:	2300      	movs	r3, #0
 80262c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80262ca:	e028      	b.n	802631e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80262cc:	f107 0308 	add.w	r3, r7, #8
 80262d0:	4618      	mov	r0, r3
 80262d2:	f7ff fe05 	bl	8025ee0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80262d6:	6a3a      	ldr	r2, [r7, #32]
 80262d8:	683b      	ldr	r3, [r7, #0]
 80262da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80262dc:	2300      	movs	r3, #0
 80262de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80262e2:	e01c      	b.n	802631e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80262e4:	f107 0308 	add.w	r3, r7, #8
 80262e8:	4618      	mov	r0, r3
 80262ea:	f7ff fdf9 	bl	8025ee0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80262ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80262f0:	b29a      	uxth	r2, r3
 80262f2:	683b      	ldr	r3, [r7, #0]
 80262f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80262f6:	2300      	movs	r3, #0
 80262f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80262fc:	e00f      	b.n	802631e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80262fe:	f107 0308 	add.w	r3, r7, #8
 8026302:	4618      	mov	r0, r3
 8026304:	f7ff fdec 	bl	8025ee0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8026308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802630a:	0a5a      	lsrs	r2, r3, #9
 802630c:	683b      	ldr	r3, [r7, #0]
 802630e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8026310:	2300      	movs	r3, #0
 8026312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8026316:	e002      	b.n	802631e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8026318:	2304      	movs	r3, #4
 802631a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 802631e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8026322:	4618      	mov	r0, r3
 8026324:	3730      	adds	r7, #48	@ 0x30
 8026326:	46bd      	mov	sp, r7
 8026328:	bd80      	pop	{r7, pc}
 802632a:	bf00      	nop
 802632c:	24000029 	.word	0x24000029

08026330 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8026330:	b480      	push	{r7}
 8026332:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8026334:	4b03      	ldr	r3, [pc, #12]	@ (8026344 <BSP_SD_WriteCpltCallback+0x14>)
 8026336:	2201      	movs	r2, #1
 8026338:	601a      	str	r2, [r3, #0]
}
 802633a:	bf00      	nop
 802633c:	46bd      	mov	sp, r7
 802633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026342:	4770      	bx	lr
 8026344:	24000a84 	.word	0x24000a84

08026348 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8026348:	b480      	push	{r7}
 802634a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 802634c:	4b03      	ldr	r3, [pc, #12]	@ (802635c <BSP_SD_ReadCpltCallback+0x14>)
 802634e:	2201      	movs	r2, #1
 8026350:	601a      	str	r2, [r3, #0]
}
 8026352:	bf00      	nop
 8026354:	46bd      	mov	sp, r7
 8026356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802635a:	4770      	bx	lr
 802635c:	24000a88 	.word	0x24000a88

08026360 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8026360:	b580      	push	{r7, lr}
 8026362:	b084      	sub	sp, #16
 8026364:	af00      	add	r7, sp, #0
 8026366:	4603      	mov	r3, r0
 8026368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802636a:	79fb      	ldrb	r3, [r7, #7]
 802636c:	4a08      	ldr	r2, [pc, #32]	@ (8026390 <disk_status+0x30>)
 802636e:	009b      	lsls	r3, r3, #2
 8026370:	4413      	add	r3, r2
 8026372:	685b      	ldr	r3, [r3, #4]
 8026374:	685b      	ldr	r3, [r3, #4]
 8026376:	79fa      	ldrb	r2, [r7, #7]
 8026378:	4905      	ldr	r1, [pc, #20]	@ (8026390 <disk_status+0x30>)
 802637a:	440a      	add	r2, r1
 802637c:	7a12      	ldrb	r2, [r2, #8]
 802637e:	4610      	mov	r0, r2
 8026380:	4798      	blx	r3
 8026382:	4603      	mov	r3, r0
 8026384:	73fb      	strb	r3, [r7, #15]
  return stat;
 8026386:	7bfb      	ldrb	r3, [r7, #15]
}
 8026388:	4618      	mov	r0, r3
 802638a:	3710      	adds	r7, #16
 802638c:	46bd      	mov	sp, r7
 802638e:	bd80      	pop	{r7, pc}
 8026390:	24000ab4 	.word	0x24000ab4

08026394 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8026394:	b580      	push	{r7, lr}
 8026396:	b084      	sub	sp, #16
 8026398:	af00      	add	r7, sp, #0
 802639a:	4603      	mov	r3, r0
 802639c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 802639e:	2300      	movs	r3, #0
 80263a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80263a2:	79fb      	ldrb	r3, [r7, #7]
 80263a4:	4a0e      	ldr	r2, [pc, #56]	@ (80263e0 <disk_initialize+0x4c>)
 80263a6:	5cd3      	ldrb	r3, [r2, r3]
 80263a8:	2b00      	cmp	r3, #0
 80263aa:	d114      	bne.n	80263d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80263ac:	79fb      	ldrb	r3, [r7, #7]
 80263ae:	4a0c      	ldr	r2, [pc, #48]	@ (80263e0 <disk_initialize+0x4c>)
 80263b0:	009b      	lsls	r3, r3, #2
 80263b2:	4413      	add	r3, r2
 80263b4:	685b      	ldr	r3, [r3, #4]
 80263b6:	681b      	ldr	r3, [r3, #0]
 80263b8:	79fa      	ldrb	r2, [r7, #7]
 80263ba:	4909      	ldr	r1, [pc, #36]	@ (80263e0 <disk_initialize+0x4c>)
 80263bc:	440a      	add	r2, r1
 80263be:	7a12      	ldrb	r2, [r2, #8]
 80263c0:	4610      	mov	r0, r2
 80263c2:	4798      	blx	r3
 80263c4:	4603      	mov	r3, r0
 80263c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80263c8:	7bfb      	ldrb	r3, [r7, #15]
 80263ca:	2b00      	cmp	r3, #0
 80263cc:	d103      	bne.n	80263d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80263ce:	79fb      	ldrb	r3, [r7, #7]
 80263d0:	4a03      	ldr	r2, [pc, #12]	@ (80263e0 <disk_initialize+0x4c>)
 80263d2:	2101      	movs	r1, #1
 80263d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80263d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80263d8:	4618      	mov	r0, r3
 80263da:	3710      	adds	r7, #16
 80263dc:	46bd      	mov	sp, r7
 80263de:	bd80      	pop	{r7, pc}
 80263e0:	24000ab4 	.word	0x24000ab4

080263e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80263e4:	b590      	push	{r4, r7, lr}
 80263e6:	b087      	sub	sp, #28
 80263e8:	af00      	add	r7, sp, #0
 80263ea:	60b9      	str	r1, [r7, #8]
 80263ec:	607a      	str	r2, [r7, #4]
 80263ee:	603b      	str	r3, [r7, #0]
 80263f0:	4603      	mov	r3, r0
 80263f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80263f4:	7bfb      	ldrb	r3, [r7, #15]
 80263f6:	4a0a      	ldr	r2, [pc, #40]	@ (8026420 <disk_read+0x3c>)
 80263f8:	009b      	lsls	r3, r3, #2
 80263fa:	4413      	add	r3, r2
 80263fc:	685b      	ldr	r3, [r3, #4]
 80263fe:	689c      	ldr	r4, [r3, #8]
 8026400:	7bfb      	ldrb	r3, [r7, #15]
 8026402:	4a07      	ldr	r2, [pc, #28]	@ (8026420 <disk_read+0x3c>)
 8026404:	4413      	add	r3, r2
 8026406:	7a18      	ldrb	r0, [r3, #8]
 8026408:	683b      	ldr	r3, [r7, #0]
 802640a:	687a      	ldr	r2, [r7, #4]
 802640c:	68b9      	ldr	r1, [r7, #8]
 802640e:	47a0      	blx	r4
 8026410:	4603      	mov	r3, r0
 8026412:	75fb      	strb	r3, [r7, #23]
  return res;
 8026414:	7dfb      	ldrb	r3, [r7, #23]
}
 8026416:	4618      	mov	r0, r3
 8026418:	371c      	adds	r7, #28
 802641a:	46bd      	mov	sp, r7
 802641c:	bd90      	pop	{r4, r7, pc}
 802641e:	bf00      	nop
 8026420:	24000ab4 	.word	0x24000ab4

08026424 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8026424:	b590      	push	{r4, r7, lr}
 8026426:	b087      	sub	sp, #28
 8026428:	af00      	add	r7, sp, #0
 802642a:	60b9      	str	r1, [r7, #8]
 802642c:	607a      	str	r2, [r7, #4]
 802642e:	603b      	str	r3, [r7, #0]
 8026430:	4603      	mov	r3, r0
 8026432:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8026434:	7bfb      	ldrb	r3, [r7, #15]
 8026436:	4a0a      	ldr	r2, [pc, #40]	@ (8026460 <disk_write+0x3c>)
 8026438:	009b      	lsls	r3, r3, #2
 802643a:	4413      	add	r3, r2
 802643c:	685b      	ldr	r3, [r3, #4]
 802643e:	68dc      	ldr	r4, [r3, #12]
 8026440:	7bfb      	ldrb	r3, [r7, #15]
 8026442:	4a07      	ldr	r2, [pc, #28]	@ (8026460 <disk_write+0x3c>)
 8026444:	4413      	add	r3, r2
 8026446:	7a18      	ldrb	r0, [r3, #8]
 8026448:	683b      	ldr	r3, [r7, #0]
 802644a:	687a      	ldr	r2, [r7, #4]
 802644c:	68b9      	ldr	r1, [r7, #8]
 802644e:	47a0      	blx	r4
 8026450:	4603      	mov	r3, r0
 8026452:	75fb      	strb	r3, [r7, #23]
  return res;
 8026454:	7dfb      	ldrb	r3, [r7, #23]
}
 8026456:	4618      	mov	r0, r3
 8026458:	371c      	adds	r7, #28
 802645a:	46bd      	mov	sp, r7
 802645c:	bd90      	pop	{r4, r7, pc}
 802645e:	bf00      	nop
 8026460:	24000ab4 	.word	0x24000ab4

08026464 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8026464:	b580      	push	{r7, lr}
 8026466:	b084      	sub	sp, #16
 8026468:	af00      	add	r7, sp, #0
 802646a:	4603      	mov	r3, r0
 802646c:	603a      	str	r2, [r7, #0]
 802646e:	71fb      	strb	r3, [r7, #7]
 8026470:	460b      	mov	r3, r1
 8026472:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8026474:	79fb      	ldrb	r3, [r7, #7]
 8026476:	4a09      	ldr	r2, [pc, #36]	@ (802649c <disk_ioctl+0x38>)
 8026478:	009b      	lsls	r3, r3, #2
 802647a:	4413      	add	r3, r2
 802647c:	685b      	ldr	r3, [r3, #4]
 802647e:	691b      	ldr	r3, [r3, #16]
 8026480:	79fa      	ldrb	r2, [r7, #7]
 8026482:	4906      	ldr	r1, [pc, #24]	@ (802649c <disk_ioctl+0x38>)
 8026484:	440a      	add	r2, r1
 8026486:	7a10      	ldrb	r0, [r2, #8]
 8026488:	79b9      	ldrb	r1, [r7, #6]
 802648a:	683a      	ldr	r2, [r7, #0]
 802648c:	4798      	blx	r3
 802648e:	4603      	mov	r3, r0
 8026490:	73fb      	strb	r3, [r7, #15]
  return res;
 8026492:	7bfb      	ldrb	r3, [r7, #15]
}
 8026494:	4618      	mov	r0, r3
 8026496:	3710      	adds	r7, #16
 8026498:	46bd      	mov	sp, r7
 802649a:	bd80      	pop	{r7, pc}
 802649c:	24000ab4 	.word	0x24000ab4

080264a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80264a0:	b480      	push	{r7}
 80264a2:	b085      	sub	sp, #20
 80264a4:	af00      	add	r7, sp, #0
 80264a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80264a8:	687b      	ldr	r3, [r7, #4]
 80264aa:	3301      	adds	r3, #1
 80264ac:	781b      	ldrb	r3, [r3, #0]
 80264ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80264b0:	89fb      	ldrh	r3, [r7, #14]
 80264b2:	021b      	lsls	r3, r3, #8
 80264b4:	b21a      	sxth	r2, r3
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	781b      	ldrb	r3, [r3, #0]
 80264ba:	b21b      	sxth	r3, r3
 80264bc:	4313      	orrs	r3, r2
 80264be:	b21b      	sxth	r3, r3
 80264c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80264c2:	89fb      	ldrh	r3, [r7, #14]
}
 80264c4:	4618      	mov	r0, r3
 80264c6:	3714      	adds	r7, #20
 80264c8:	46bd      	mov	sp, r7
 80264ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264ce:	4770      	bx	lr

080264d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80264d0:	b480      	push	{r7}
 80264d2:	b085      	sub	sp, #20
 80264d4:	af00      	add	r7, sp, #0
 80264d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	3303      	adds	r3, #3
 80264dc:	781b      	ldrb	r3, [r3, #0]
 80264de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	021b      	lsls	r3, r3, #8
 80264e4:	687a      	ldr	r2, [r7, #4]
 80264e6:	3202      	adds	r2, #2
 80264e8:	7812      	ldrb	r2, [r2, #0]
 80264ea:	4313      	orrs	r3, r2
 80264ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80264ee:	68fb      	ldr	r3, [r7, #12]
 80264f0:	021b      	lsls	r3, r3, #8
 80264f2:	687a      	ldr	r2, [r7, #4]
 80264f4:	3201      	adds	r2, #1
 80264f6:	7812      	ldrb	r2, [r2, #0]
 80264f8:	4313      	orrs	r3, r2
 80264fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80264fc:	68fb      	ldr	r3, [r7, #12]
 80264fe:	021b      	lsls	r3, r3, #8
 8026500:	687a      	ldr	r2, [r7, #4]
 8026502:	7812      	ldrb	r2, [r2, #0]
 8026504:	4313      	orrs	r3, r2
 8026506:	60fb      	str	r3, [r7, #12]
	return rv;
 8026508:	68fb      	ldr	r3, [r7, #12]
}
 802650a:	4618      	mov	r0, r3
 802650c:	3714      	adds	r7, #20
 802650e:	46bd      	mov	sp, r7
 8026510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026514:	4770      	bx	lr

08026516 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8026516:	b480      	push	{r7}
 8026518:	b083      	sub	sp, #12
 802651a:	af00      	add	r7, sp, #0
 802651c:	6078      	str	r0, [r7, #4]
 802651e:	460b      	mov	r3, r1
 8026520:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8026522:	687b      	ldr	r3, [r7, #4]
 8026524:	1c5a      	adds	r2, r3, #1
 8026526:	607a      	str	r2, [r7, #4]
 8026528:	887a      	ldrh	r2, [r7, #2]
 802652a:	b2d2      	uxtb	r2, r2
 802652c:	701a      	strb	r2, [r3, #0]
 802652e:	887b      	ldrh	r3, [r7, #2]
 8026530:	0a1b      	lsrs	r3, r3, #8
 8026532:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8026534:	687b      	ldr	r3, [r7, #4]
 8026536:	1c5a      	adds	r2, r3, #1
 8026538:	607a      	str	r2, [r7, #4]
 802653a:	887a      	ldrh	r2, [r7, #2]
 802653c:	b2d2      	uxtb	r2, r2
 802653e:	701a      	strb	r2, [r3, #0]
}
 8026540:	bf00      	nop
 8026542:	370c      	adds	r7, #12
 8026544:	46bd      	mov	sp, r7
 8026546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802654a:	4770      	bx	lr

0802654c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 802654c:	b480      	push	{r7}
 802654e:	b083      	sub	sp, #12
 8026550:	af00      	add	r7, sp, #0
 8026552:	6078      	str	r0, [r7, #4]
 8026554:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026556:	687b      	ldr	r3, [r7, #4]
 8026558:	1c5a      	adds	r2, r3, #1
 802655a:	607a      	str	r2, [r7, #4]
 802655c:	683a      	ldr	r2, [r7, #0]
 802655e:	b2d2      	uxtb	r2, r2
 8026560:	701a      	strb	r2, [r3, #0]
 8026562:	683b      	ldr	r3, [r7, #0]
 8026564:	0a1b      	lsrs	r3, r3, #8
 8026566:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026568:	687b      	ldr	r3, [r7, #4]
 802656a:	1c5a      	adds	r2, r3, #1
 802656c:	607a      	str	r2, [r7, #4]
 802656e:	683a      	ldr	r2, [r7, #0]
 8026570:	b2d2      	uxtb	r2, r2
 8026572:	701a      	strb	r2, [r3, #0]
 8026574:	683b      	ldr	r3, [r7, #0]
 8026576:	0a1b      	lsrs	r3, r3, #8
 8026578:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802657a:	687b      	ldr	r3, [r7, #4]
 802657c:	1c5a      	adds	r2, r3, #1
 802657e:	607a      	str	r2, [r7, #4]
 8026580:	683a      	ldr	r2, [r7, #0]
 8026582:	b2d2      	uxtb	r2, r2
 8026584:	701a      	strb	r2, [r3, #0]
 8026586:	683b      	ldr	r3, [r7, #0]
 8026588:	0a1b      	lsrs	r3, r3, #8
 802658a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	1c5a      	adds	r2, r3, #1
 8026590:	607a      	str	r2, [r7, #4]
 8026592:	683a      	ldr	r2, [r7, #0]
 8026594:	b2d2      	uxtb	r2, r2
 8026596:	701a      	strb	r2, [r3, #0]
}
 8026598:	bf00      	nop
 802659a:	370c      	adds	r7, #12
 802659c:	46bd      	mov	sp, r7
 802659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265a2:	4770      	bx	lr

080265a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80265a4:	b480      	push	{r7}
 80265a6:	b087      	sub	sp, #28
 80265a8:	af00      	add	r7, sp, #0
 80265aa:	60f8      	str	r0, [r7, #12]
 80265ac:	60b9      	str	r1, [r7, #8]
 80265ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80265b0:	68fb      	ldr	r3, [r7, #12]
 80265b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80265b4:	68bb      	ldr	r3, [r7, #8]
 80265b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80265b8:	687b      	ldr	r3, [r7, #4]
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	d00d      	beq.n	80265da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80265be:	693a      	ldr	r2, [r7, #16]
 80265c0:	1c53      	adds	r3, r2, #1
 80265c2:	613b      	str	r3, [r7, #16]
 80265c4:	697b      	ldr	r3, [r7, #20]
 80265c6:	1c59      	adds	r1, r3, #1
 80265c8:	6179      	str	r1, [r7, #20]
 80265ca:	7812      	ldrb	r2, [r2, #0]
 80265cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80265ce:	687b      	ldr	r3, [r7, #4]
 80265d0:	3b01      	subs	r3, #1
 80265d2:	607b      	str	r3, [r7, #4]
 80265d4:	687b      	ldr	r3, [r7, #4]
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d1f1      	bne.n	80265be <mem_cpy+0x1a>
	}
}
 80265da:	bf00      	nop
 80265dc:	371c      	adds	r7, #28
 80265de:	46bd      	mov	sp, r7
 80265e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265e4:	4770      	bx	lr

080265e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80265e6:	b480      	push	{r7}
 80265e8:	b087      	sub	sp, #28
 80265ea:	af00      	add	r7, sp, #0
 80265ec:	60f8      	str	r0, [r7, #12]
 80265ee:	60b9      	str	r1, [r7, #8]
 80265f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80265f2:	68fb      	ldr	r3, [r7, #12]
 80265f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80265f6:	697b      	ldr	r3, [r7, #20]
 80265f8:	1c5a      	adds	r2, r3, #1
 80265fa:	617a      	str	r2, [r7, #20]
 80265fc:	68ba      	ldr	r2, [r7, #8]
 80265fe:	b2d2      	uxtb	r2, r2
 8026600:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8026602:	687b      	ldr	r3, [r7, #4]
 8026604:	3b01      	subs	r3, #1
 8026606:	607b      	str	r3, [r7, #4]
 8026608:	687b      	ldr	r3, [r7, #4]
 802660a:	2b00      	cmp	r3, #0
 802660c:	d1f3      	bne.n	80265f6 <mem_set+0x10>
}
 802660e:	bf00      	nop
 8026610:	bf00      	nop
 8026612:	371c      	adds	r7, #28
 8026614:	46bd      	mov	sp, r7
 8026616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661a:	4770      	bx	lr

0802661c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802661c:	b480      	push	{r7}
 802661e:	b089      	sub	sp, #36	@ 0x24
 8026620:	af00      	add	r7, sp, #0
 8026622:	60f8      	str	r0, [r7, #12]
 8026624:	60b9      	str	r1, [r7, #8]
 8026626:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8026628:	68fb      	ldr	r3, [r7, #12]
 802662a:	61fb      	str	r3, [r7, #28]
 802662c:	68bb      	ldr	r3, [r7, #8]
 802662e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8026630:	2300      	movs	r3, #0
 8026632:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8026634:	69fb      	ldr	r3, [r7, #28]
 8026636:	1c5a      	adds	r2, r3, #1
 8026638:	61fa      	str	r2, [r7, #28]
 802663a:	781b      	ldrb	r3, [r3, #0]
 802663c:	4619      	mov	r1, r3
 802663e:	69bb      	ldr	r3, [r7, #24]
 8026640:	1c5a      	adds	r2, r3, #1
 8026642:	61ba      	str	r2, [r7, #24]
 8026644:	781b      	ldrb	r3, [r3, #0]
 8026646:	1acb      	subs	r3, r1, r3
 8026648:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 802664a:	687b      	ldr	r3, [r7, #4]
 802664c:	3b01      	subs	r3, #1
 802664e:	607b      	str	r3, [r7, #4]
 8026650:	687b      	ldr	r3, [r7, #4]
 8026652:	2b00      	cmp	r3, #0
 8026654:	d002      	beq.n	802665c <mem_cmp+0x40>
 8026656:	697b      	ldr	r3, [r7, #20]
 8026658:	2b00      	cmp	r3, #0
 802665a:	d0eb      	beq.n	8026634 <mem_cmp+0x18>

	return r;
 802665c:	697b      	ldr	r3, [r7, #20]
}
 802665e:	4618      	mov	r0, r3
 8026660:	3724      	adds	r7, #36	@ 0x24
 8026662:	46bd      	mov	sp, r7
 8026664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026668:	4770      	bx	lr

0802666a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 802666a:	b480      	push	{r7}
 802666c:	b083      	sub	sp, #12
 802666e:	af00      	add	r7, sp, #0
 8026670:	6078      	str	r0, [r7, #4]
 8026672:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8026674:	e002      	b.n	802667c <chk_chr+0x12>
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	3301      	adds	r3, #1
 802667a:	607b      	str	r3, [r7, #4]
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	781b      	ldrb	r3, [r3, #0]
 8026680:	2b00      	cmp	r3, #0
 8026682:	d005      	beq.n	8026690 <chk_chr+0x26>
 8026684:	687b      	ldr	r3, [r7, #4]
 8026686:	781b      	ldrb	r3, [r3, #0]
 8026688:	461a      	mov	r2, r3
 802668a:	683b      	ldr	r3, [r7, #0]
 802668c:	4293      	cmp	r3, r2
 802668e:	d1f2      	bne.n	8026676 <chk_chr+0xc>
	return *str;
 8026690:	687b      	ldr	r3, [r7, #4]
 8026692:	781b      	ldrb	r3, [r3, #0]
}
 8026694:	4618      	mov	r0, r3
 8026696:	370c      	adds	r7, #12
 8026698:	46bd      	mov	sp, r7
 802669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802669e:	4770      	bx	lr

080266a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80266a0:	b480      	push	{r7}
 80266a2:	b085      	sub	sp, #20
 80266a4:	af00      	add	r7, sp, #0
 80266a6:	6078      	str	r0, [r7, #4]
 80266a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80266aa:	2300      	movs	r3, #0
 80266ac:	60bb      	str	r3, [r7, #8]
 80266ae:	68bb      	ldr	r3, [r7, #8]
 80266b0:	60fb      	str	r3, [r7, #12]
 80266b2:	e029      	b.n	8026708 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80266b4:	4a27      	ldr	r2, [pc, #156]	@ (8026754 <chk_lock+0xb4>)
 80266b6:	68fb      	ldr	r3, [r7, #12]
 80266b8:	011b      	lsls	r3, r3, #4
 80266ba:	4413      	add	r3, r2
 80266bc:	681b      	ldr	r3, [r3, #0]
 80266be:	2b00      	cmp	r3, #0
 80266c0:	d01d      	beq.n	80266fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80266c2:	4a24      	ldr	r2, [pc, #144]	@ (8026754 <chk_lock+0xb4>)
 80266c4:	68fb      	ldr	r3, [r7, #12]
 80266c6:	011b      	lsls	r3, r3, #4
 80266c8:	4413      	add	r3, r2
 80266ca:	681a      	ldr	r2, [r3, #0]
 80266cc:	687b      	ldr	r3, [r7, #4]
 80266ce:	681b      	ldr	r3, [r3, #0]
 80266d0:	429a      	cmp	r2, r3
 80266d2:	d116      	bne.n	8026702 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80266d4:	4a1f      	ldr	r2, [pc, #124]	@ (8026754 <chk_lock+0xb4>)
 80266d6:	68fb      	ldr	r3, [r7, #12]
 80266d8:	011b      	lsls	r3, r3, #4
 80266da:	4413      	add	r3, r2
 80266dc:	3304      	adds	r3, #4
 80266de:	681a      	ldr	r2, [r3, #0]
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80266e4:	429a      	cmp	r2, r3
 80266e6:	d10c      	bne.n	8026702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80266e8:	4a1a      	ldr	r2, [pc, #104]	@ (8026754 <chk_lock+0xb4>)
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	011b      	lsls	r3, r3, #4
 80266ee:	4413      	add	r3, r2
 80266f0:	3308      	adds	r3, #8
 80266f2:	681a      	ldr	r2, [r3, #0]
 80266f4:	687b      	ldr	r3, [r7, #4]
 80266f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80266f8:	429a      	cmp	r2, r3
 80266fa:	d102      	bne.n	8026702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80266fc:	e007      	b.n	802670e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80266fe:	2301      	movs	r3, #1
 8026700:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8026702:	68fb      	ldr	r3, [r7, #12]
 8026704:	3301      	adds	r3, #1
 8026706:	60fb      	str	r3, [r7, #12]
 8026708:	68fb      	ldr	r3, [r7, #12]
 802670a:	2b01      	cmp	r3, #1
 802670c:	d9d2      	bls.n	80266b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 802670e:	68fb      	ldr	r3, [r7, #12]
 8026710:	2b02      	cmp	r3, #2
 8026712:	d109      	bne.n	8026728 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8026714:	68bb      	ldr	r3, [r7, #8]
 8026716:	2b00      	cmp	r3, #0
 8026718:	d102      	bne.n	8026720 <chk_lock+0x80>
 802671a:	683b      	ldr	r3, [r7, #0]
 802671c:	2b02      	cmp	r3, #2
 802671e:	d101      	bne.n	8026724 <chk_lock+0x84>
 8026720:	2300      	movs	r3, #0
 8026722:	e010      	b.n	8026746 <chk_lock+0xa6>
 8026724:	2312      	movs	r3, #18
 8026726:	e00e      	b.n	8026746 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8026728:	683b      	ldr	r3, [r7, #0]
 802672a:	2b00      	cmp	r3, #0
 802672c:	d108      	bne.n	8026740 <chk_lock+0xa0>
 802672e:	4a09      	ldr	r2, [pc, #36]	@ (8026754 <chk_lock+0xb4>)
 8026730:	68fb      	ldr	r3, [r7, #12]
 8026732:	011b      	lsls	r3, r3, #4
 8026734:	4413      	add	r3, r2
 8026736:	330c      	adds	r3, #12
 8026738:	881b      	ldrh	r3, [r3, #0]
 802673a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802673e:	d101      	bne.n	8026744 <chk_lock+0xa4>
 8026740:	2310      	movs	r3, #16
 8026742:	e000      	b.n	8026746 <chk_lock+0xa6>
 8026744:	2300      	movs	r3, #0
}
 8026746:	4618      	mov	r0, r3
 8026748:	3714      	adds	r7, #20
 802674a:	46bd      	mov	sp, r7
 802674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026750:	4770      	bx	lr
 8026752:	bf00      	nop
 8026754:	24000a94 	.word	0x24000a94

08026758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8026758:	b480      	push	{r7}
 802675a:	b083      	sub	sp, #12
 802675c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802675e:	2300      	movs	r3, #0
 8026760:	607b      	str	r3, [r7, #4]
 8026762:	e002      	b.n	802676a <enq_lock+0x12>
 8026764:	687b      	ldr	r3, [r7, #4]
 8026766:	3301      	adds	r3, #1
 8026768:	607b      	str	r3, [r7, #4]
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	2b01      	cmp	r3, #1
 802676e:	d806      	bhi.n	802677e <enq_lock+0x26>
 8026770:	4a09      	ldr	r2, [pc, #36]	@ (8026798 <enq_lock+0x40>)
 8026772:	687b      	ldr	r3, [r7, #4]
 8026774:	011b      	lsls	r3, r3, #4
 8026776:	4413      	add	r3, r2
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	2b00      	cmp	r3, #0
 802677c:	d1f2      	bne.n	8026764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	2b02      	cmp	r3, #2
 8026782:	bf14      	ite	ne
 8026784:	2301      	movne	r3, #1
 8026786:	2300      	moveq	r3, #0
 8026788:	b2db      	uxtb	r3, r3
}
 802678a:	4618      	mov	r0, r3
 802678c:	370c      	adds	r7, #12
 802678e:	46bd      	mov	sp, r7
 8026790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026794:	4770      	bx	lr
 8026796:	bf00      	nop
 8026798:	24000a94 	.word	0x24000a94

0802679c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 802679c:	b480      	push	{r7}
 802679e:	b085      	sub	sp, #20
 80267a0:	af00      	add	r7, sp, #0
 80267a2:	6078      	str	r0, [r7, #4]
 80267a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80267a6:	2300      	movs	r3, #0
 80267a8:	60fb      	str	r3, [r7, #12]
 80267aa:	e01f      	b.n	80267ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80267ac:	4a41      	ldr	r2, [pc, #260]	@ (80268b4 <inc_lock+0x118>)
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	011b      	lsls	r3, r3, #4
 80267b2:	4413      	add	r3, r2
 80267b4:	681a      	ldr	r2, [r3, #0]
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	429a      	cmp	r2, r3
 80267bc:	d113      	bne.n	80267e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80267be:	4a3d      	ldr	r2, [pc, #244]	@ (80268b4 <inc_lock+0x118>)
 80267c0:	68fb      	ldr	r3, [r7, #12]
 80267c2:	011b      	lsls	r3, r3, #4
 80267c4:	4413      	add	r3, r2
 80267c6:	3304      	adds	r3, #4
 80267c8:	681a      	ldr	r2, [r3, #0]
 80267ca:	687b      	ldr	r3, [r7, #4]
 80267cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80267ce:	429a      	cmp	r2, r3
 80267d0:	d109      	bne.n	80267e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80267d2:	4a38      	ldr	r2, [pc, #224]	@ (80268b4 <inc_lock+0x118>)
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	011b      	lsls	r3, r3, #4
 80267d8:	4413      	add	r3, r2
 80267da:	3308      	adds	r3, #8
 80267dc:	681a      	ldr	r2, [r3, #0]
 80267de:	687b      	ldr	r3, [r7, #4]
 80267e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80267e2:	429a      	cmp	r2, r3
 80267e4:	d006      	beq.n	80267f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80267e6:	68fb      	ldr	r3, [r7, #12]
 80267e8:	3301      	adds	r3, #1
 80267ea:	60fb      	str	r3, [r7, #12]
 80267ec:	68fb      	ldr	r3, [r7, #12]
 80267ee:	2b01      	cmp	r3, #1
 80267f0:	d9dc      	bls.n	80267ac <inc_lock+0x10>
 80267f2:	e000      	b.n	80267f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80267f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80267f6:	68fb      	ldr	r3, [r7, #12]
 80267f8:	2b02      	cmp	r3, #2
 80267fa:	d132      	bne.n	8026862 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80267fc:	2300      	movs	r3, #0
 80267fe:	60fb      	str	r3, [r7, #12]
 8026800:	e002      	b.n	8026808 <inc_lock+0x6c>
 8026802:	68fb      	ldr	r3, [r7, #12]
 8026804:	3301      	adds	r3, #1
 8026806:	60fb      	str	r3, [r7, #12]
 8026808:	68fb      	ldr	r3, [r7, #12]
 802680a:	2b01      	cmp	r3, #1
 802680c:	d806      	bhi.n	802681c <inc_lock+0x80>
 802680e:	4a29      	ldr	r2, [pc, #164]	@ (80268b4 <inc_lock+0x118>)
 8026810:	68fb      	ldr	r3, [r7, #12]
 8026812:	011b      	lsls	r3, r3, #4
 8026814:	4413      	add	r3, r2
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	2b00      	cmp	r3, #0
 802681a:	d1f2      	bne.n	8026802 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 802681c:	68fb      	ldr	r3, [r7, #12]
 802681e:	2b02      	cmp	r3, #2
 8026820:	d101      	bne.n	8026826 <inc_lock+0x8a>
 8026822:	2300      	movs	r3, #0
 8026824:	e040      	b.n	80268a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	681a      	ldr	r2, [r3, #0]
 802682a:	4922      	ldr	r1, [pc, #136]	@ (80268b4 <inc_lock+0x118>)
 802682c:	68fb      	ldr	r3, [r7, #12]
 802682e:	011b      	lsls	r3, r3, #4
 8026830:	440b      	add	r3, r1
 8026832:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8026834:	687b      	ldr	r3, [r7, #4]
 8026836:	689a      	ldr	r2, [r3, #8]
 8026838:	491e      	ldr	r1, [pc, #120]	@ (80268b4 <inc_lock+0x118>)
 802683a:	68fb      	ldr	r3, [r7, #12]
 802683c:	011b      	lsls	r3, r3, #4
 802683e:	440b      	add	r3, r1
 8026840:	3304      	adds	r3, #4
 8026842:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	695a      	ldr	r2, [r3, #20]
 8026848:	491a      	ldr	r1, [pc, #104]	@ (80268b4 <inc_lock+0x118>)
 802684a:	68fb      	ldr	r3, [r7, #12]
 802684c:	011b      	lsls	r3, r3, #4
 802684e:	440b      	add	r3, r1
 8026850:	3308      	adds	r3, #8
 8026852:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8026854:	4a17      	ldr	r2, [pc, #92]	@ (80268b4 <inc_lock+0x118>)
 8026856:	68fb      	ldr	r3, [r7, #12]
 8026858:	011b      	lsls	r3, r3, #4
 802685a:	4413      	add	r3, r2
 802685c:	330c      	adds	r3, #12
 802685e:	2200      	movs	r2, #0
 8026860:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8026862:	683b      	ldr	r3, [r7, #0]
 8026864:	2b00      	cmp	r3, #0
 8026866:	d009      	beq.n	802687c <inc_lock+0xe0>
 8026868:	4a12      	ldr	r2, [pc, #72]	@ (80268b4 <inc_lock+0x118>)
 802686a:	68fb      	ldr	r3, [r7, #12]
 802686c:	011b      	lsls	r3, r3, #4
 802686e:	4413      	add	r3, r2
 8026870:	330c      	adds	r3, #12
 8026872:	881b      	ldrh	r3, [r3, #0]
 8026874:	2b00      	cmp	r3, #0
 8026876:	d001      	beq.n	802687c <inc_lock+0xe0>
 8026878:	2300      	movs	r3, #0
 802687a:	e015      	b.n	80268a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802687c:	683b      	ldr	r3, [r7, #0]
 802687e:	2b00      	cmp	r3, #0
 8026880:	d108      	bne.n	8026894 <inc_lock+0xf8>
 8026882:	4a0c      	ldr	r2, [pc, #48]	@ (80268b4 <inc_lock+0x118>)
 8026884:	68fb      	ldr	r3, [r7, #12]
 8026886:	011b      	lsls	r3, r3, #4
 8026888:	4413      	add	r3, r2
 802688a:	330c      	adds	r3, #12
 802688c:	881b      	ldrh	r3, [r3, #0]
 802688e:	3301      	adds	r3, #1
 8026890:	b29a      	uxth	r2, r3
 8026892:	e001      	b.n	8026898 <inc_lock+0xfc>
 8026894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026898:	4906      	ldr	r1, [pc, #24]	@ (80268b4 <inc_lock+0x118>)
 802689a:	68fb      	ldr	r3, [r7, #12]
 802689c:	011b      	lsls	r3, r3, #4
 802689e:	440b      	add	r3, r1
 80268a0:	330c      	adds	r3, #12
 80268a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80268a4:	68fb      	ldr	r3, [r7, #12]
 80268a6:	3301      	adds	r3, #1
}
 80268a8:	4618      	mov	r0, r3
 80268aa:	3714      	adds	r7, #20
 80268ac:	46bd      	mov	sp, r7
 80268ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268b2:	4770      	bx	lr
 80268b4:	24000a94 	.word	0x24000a94

080268b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80268b8:	b480      	push	{r7}
 80268ba:	b085      	sub	sp, #20
 80268bc:	af00      	add	r7, sp, #0
 80268be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	3b01      	subs	r3, #1
 80268c4:	607b      	str	r3, [r7, #4]
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	2b01      	cmp	r3, #1
 80268ca:	d825      	bhi.n	8026918 <dec_lock+0x60>
		n = Files[i].ctr;
 80268cc:	4a17      	ldr	r2, [pc, #92]	@ (802692c <dec_lock+0x74>)
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	011b      	lsls	r3, r3, #4
 80268d2:	4413      	add	r3, r2
 80268d4:	330c      	adds	r3, #12
 80268d6:	881b      	ldrh	r3, [r3, #0]
 80268d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80268da:	89fb      	ldrh	r3, [r7, #14]
 80268dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80268e0:	d101      	bne.n	80268e6 <dec_lock+0x2e>
 80268e2:	2300      	movs	r3, #0
 80268e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80268e6:	89fb      	ldrh	r3, [r7, #14]
 80268e8:	2b00      	cmp	r3, #0
 80268ea:	d002      	beq.n	80268f2 <dec_lock+0x3a>
 80268ec:	89fb      	ldrh	r3, [r7, #14]
 80268ee:	3b01      	subs	r3, #1
 80268f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80268f2:	4a0e      	ldr	r2, [pc, #56]	@ (802692c <dec_lock+0x74>)
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	011b      	lsls	r3, r3, #4
 80268f8:	4413      	add	r3, r2
 80268fa:	330c      	adds	r3, #12
 80268fc:	89fa      	ldrh	r2, [r7, #14]
 80268fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8026900:	89fb      	ldrh	r3, [r7, #14]
 8026902:	2b00      	cmp	r3, #0
 8026904:	d105      	bne.n	8026912 <dec_lock+0x5a>
 8026906:	4a09      	ldr	r2, [pc, #36]	@ (802692c <dec_lock+0x74>)
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	011b      	lsls	r3, r3, #4
 802690c:	4413      	add	r3, r2
 802690e:	2200      	movs	r2, #0
 8026910:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8026912:	2300      	movs	r3, #0
 8026914:	737b      	strb	r3, [r7, #13]
 8026916:	e001      	b.n	802691c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8026918:	2302      	movs	r3, #2
 802691a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 802691c:	7b7b      	ldrb	r3, [r7, #13]
}
 802691e:	4618      	mov	r0, r3
 8026920:	3714      	adds	r7, #20
 8026922:	46bd      	mov	sp, r7
 8026924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026928:	4770      	bx	lr
 802692a:	bf00      	nop
 802692c:	24000a94 	.word	0x24000a94

08026930 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8026930:	b480      	push	{r7}
 8026932:	b085      	sub	sp, #20
 8026934:	af00      	add	r7, sp, #0
 8026936:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8026938:	2300      	movs	r3, #0
 802693a:	60fb      	str	r3, [r7, #12]
 802693c:	e010      	b.n	8026960 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802693e:	4a0d      	ldr	r2, [pc, #52]	@ (8026974 <clear_lock+0x44>)
 8026940:	68fb      	ldr	r3, [r7, #12]
 8026942:	011b      	lsls	r3, r3, #4
 8026944:	4413      	add	r3, r2
 8026946:	681b      	ldr	r3, [r3, #0]
 8026948:	687a      	ldr	r2, [r7, #4]
 802694a:	429a      	cmp	r2, r3
 802694c:	d105      	bne.n	802695a <clear_lock+0x2a>
 802694e:	4a09      	ldr	r2, [pc, #36]	@ (8026974 <clear_lock+0x44>)
 8026950:	68fb      	ldr	r3, [r7, #12]
 8026952:	011b      	lsls	r3, r3, #4
 8026954:	4413      	add	r3, r2
 8026956:	2200      	movs	r2, #0
 8026958:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802695a:	68fb      	ldr	r3, [r7, #12]
 802695c:	3301      	adds	r3, #1
 802695e:	60fb      	str	r3, [r7, #12]
 8026960:	68fb      	ldr	r3, [r7, #12]
 8026962:	2b01      	cmp	r3, #1
 8026964:	d9eb      	bls.n	802693e <clear_lock+0xe>
	}
}
 8026966:	bf00      	nop
 8026968:	bf00      	nop
 802696a:	3714      	adds	r7, #20
 802696c:	46bd      	mov	sp, r7
 802696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026972:	4770      	bx	lr
 8026974:	24000a94 	.word	0x24000a94

08026978 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8026978:	b580      	push	{r7, lr}
 802697a:	b086      	sub	sp, #24
 802697c:	af00      	add	r7, sp, #0
 802697e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8026980:	2300      	movs	r3, #0
 8026982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	78db      	ldrb	r3, [r3, #3]
 8026988:	2b00      	cmp	r3, #0
 802698a:	d034      	beq.n	80269f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026990:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	7858      	ldrb	r0, [r3, #1]
 8026996:	687b      	ldr	r3, [r7, #4]
 8026998:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802699c:	2301      	movs	r3, #1
 802699e:	697a      	ldr	r2, [r7, #20]
 80269a0:	f7ff fd40 	bl	8026424 <disk_write>
 80269a4:	4603      	mov	r3, r0
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	d002      	beq.n	80269b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80269aa:	2301      	movs	r3, #1
 80269ac:	73fb      	strb	r3, [r7, #15]
 80269ae:	e022      	b.n	80269f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	2200      	movs	r2, #0
 80269b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80269b6:	687b      	ldr	r3, [r7, #4]
 80269b8:	6a1b      	ldr	r3, [r3, #32]
 80269ba:	697a      	ldr	r2, [r7, #20]
 80269bc:	1ad2      	subs	r2, r2, r3
 80269be:	687b      	ldr	r3, [r7, #4]
 80269c0:	699b      	ldr	r3, [r3, #24]
 80269c2:	429a      	cmp	r2, r3
 80269c4:	d217      	bcs.n	80269f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	789b      	ldrb	r3, [r3, #2]
 80269ca:	613b      	str	r3, [r7, #16]
 80269cc:	e010      	b.n	80269f0 <sync_window+0x78>
					wsect += fs->fsize;
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	699b      	ldr	r3, [r3, #24]
 80269d2:	697a      	ldr	r2, [r7, #20]
 80269d4:	4413      	add	r3, r2
 80269d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	7858      	ldrb	r0, [r3, #1]
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80269e2:	2301      	movs	r3, #1
 80269e4:	697a      	ldr	r2, [r7, #20]
 80269e6:	f7ff fd1d 	bl	8026424 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80269ea:	693b      	ldr	r3, [r7, #16]
 80269ec:	3b01      	subs	r3, #1
 80269ee:	613b      	str	r3, [r7, #16]
 80269f0:	693b      	ldr	r3, [r7, #16]
 80269f2:	2b01      	cmp	r3, #1
 80269f4:	d8eb      	bhi.n	80269ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80269f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80269f8:	4618      	mov	r0, r3
 80269fa:	3718      	adds	r7, #24
 80269fc:	46bd      	mov	sp, r7
 80269fe:	bd80      	pop	{r7, pc}

08026a00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8026a00:	b580      	push	{r7, lr}
 8026a02:	b084      	sub	sp, #16
 8026a04:	af00      	add	r7, sp, #0
 8026a06:	6078      	str	r0, [r7, #4]
 8026a08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8026a0a:	2300      	movs	r3, #0
 8026a0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026a12:	683a      	ldr	r2, [r7, #0]
 8026a14:	429a      	cmp	r2, r3
 8026a16:	d01b      	beq.n	8026a50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8026a18:	6878      	ldr	r0, [r7, #4]
 8026a1a:	f7ff ffad 	bl	8026978 <sync_window>
 8026a1e:	4603      	mov	r3, r0
 8026a20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8026a22:	7bfb      	ldrb	r3, [r7, #15]
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	d113      	bne.n	8026a50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	7858      	ldrb	r0, [r3, #1]
 8026a2c:	687b      	ldr	r3, [r7, #4]
 8026a2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026a32:	2301      	movs	r3, #1
 8026a34:	683a      	ldr	r2, [r7, #0]
 8026a36:	f7ff fcd5 	bl	80263e4 <disk_read>
 8026a3a:	4603      	mov	r3, r0
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	d004      	beq.n	8026a4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8026a40:	f04f 33ff 	mov.w	r3, #4294967295
 8026a44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8026a46:	2301      	movs	r3, #1
 8026a48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	683a      	ldr	r2, [r7, #0]
 8026a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8026a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8026a52:	4618      	mov	r0, r3
 8026a54:	3710      	adds	r7, #16
 8026a56:	46bd      	mov	sp, r7
 8026a58:	bd80      	pop	{r7, pc}
	...

08026a5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8026a5c:	b580      	push	{r7, lr}
 8026a5e:	b084      	sub	sp, #16
 8026a60:	af00      	add	r7, sp, #0
 8026a62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8026a64:	6878      	ldr	r0, [r7, #4]
 8026a66:	f7ff ff87 	bl	8026978 <sync_window>
 8026a6a:	4603      	mov	r3, r0
 8026a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8026a6e:	7bfb      	ldrb	r3, [r7, #15]
 8026a70:	2b00      	cmp	r3, #0
 8026a72:	d158      	bne.n	8026b26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8026a74:	687b      	ldr	r3, [r7, #4]
 8026a76:	781b      	ldrb	r3, [r3, #0]
 8026a78:	2b03      	cmp	r3, #3
 8026a7a:	d148      	bne.n	8026b0e <sync_fs+0xb2>
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	791b      	ldrb	r3, [r3, #4]
 8026a80:	2b01      	cmp	r3, #1
 8026a82:	d144      	bne.n	8026b0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8026a84:	687b      	ldr	r3, [r7, #4]
 8026a86:	3330      	adds	r3, #48	@ 0x30
 8026a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8026a8c:	2100      	movs	r1, #0
 8026a8e:	4618      	mov	r0, r3
 8026a90:	f7ff fda9 	bl	80265e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	3330      	adds	r3, #48	@ 0x30
 8026a98:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8026a9c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8026aa0:	4618      	mov	r0, r3
 8026aa2:	f7ff fd38 	bl	8026516 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8026aa6:	687b      	ldr	r3, [r7, #4]
 8026aa8:	3330      	adds	r3, #48	@ 0x30
 8026aaa:	4921      	ldr	r1, [pc, #132]	@ (8026b30 <sync_fs+0xd4>)
 8026aac:	4618      	mov	r0, r3
 8026aae:	f7ff fd4d 	bl	802654c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8026ab2:	687b      	ldr	r3, [r7, #4]
 8026ab4:	3330      	adds	r3, #48	@ 0x30
 8026ab6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8026aba:	491e      	ldr	r1, [pc, #120]	@ (8026b34 <sync_fs+0xd8>)
 8026abc:	4618      	mov	r0, r3
 8026abe:	f7ff fd45 	bl	802654c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	3330      	adds	r3, #48	@ 0x30
 8026ac6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	691b      	ldr	r3, [r3, #16]
 8026ace:	4619      	mov	r1, r3
 8026ad0:	4610      	mov	r0, r2
 8026ad2:	f7ff fd3b 	bl	802654c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	3330      	adds	r3, #48	@ 0x30
 8026ada:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	68db      	ldr	r3, [r3, #12]
 8026ae2:	4619      	mov	r1, r3
 8026ae4:	4610      	mov	r0, r2
 8026ae6:	f7ff fd31 	bl	802654c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	69db      	ldr	r3, [r3, #28]
 8026aee:	1c5a      	adds	r2, r3, #1
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	7858      	ldrb	r0, [r3, #1]
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8026b02:	2301      	movs	r3, #1
 8026b04:	f7ff fc8e 	bl	8026424 <disk_write>
			fs->fsi_flag = 0;
 8026b08:	687b      	ldr	r3, [r7, #4]
 8026b0a:	2200      	movs	r2, #0
 8026b0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8026b0e:	687b      	ldr	r3, [r7, #4]
 8026b10:	785b      	ldrb	r3, [r3, #1]
 8026b12:	2200      	movs	r2, #0
 8026b14:	2100      	movs	r1, #0
 8026b16:	4618      	mov	r0, r3
 8026b18:	f7ff fca4 	bl	8026464 <disk_ioctl>
 8026b1c:	4603      	mov	r3, r0
 8026b1e:	2b00      	cmp	r3, #0
 8026b20:	d001      	beq.n	8026b26 <sync_fs+0xca>
 8026b22:	2301      	movs	r3, #1
 8026b24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8026b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b28:	4618      	mov	r0, r3
 8026b2a:	3710      	adds	r7, #16
 8026b2c:	46bd      	mov	sp, r7
 8026b2e:	bd80      	pop	{r7, pc}
 8026b30:	41615252 	.word	0x41615252
 8026b34:	61417272 	.word	0x61417272

08026b38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8026b38:	b480      	push	{r7}
 8026b3a:	b083      	sub	sp, #12
 8026b3c:	af00      	add	r7, sp, #0
 8026b3e:	6078      	str	r0, [r7, #4]
 8026b40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8026b42:	683b      	ldr	r3, [r7, #0]
 8026b44:	3b02      	subs	r3, #2
 8026b46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8026b48:	687b      	ldr	r3, [r7, #4]
 8026b4a:	695b      	ldr	r3, [r3, #20]
 8026b4c:	3b02      	subs	r3, #2
 8026b4e:	683a      	ldr	r2, [r7, #0]
 8026b50:	429a      	cmp	r2, r3
 8026b52:	d301      	bcc.n	8026b58 <clust2sect+0x20>
 8026b54:	2300      	movs	r3, #0
 8026b56:	e008      	b.n	8026b6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8026b58:	687b      	ldr	r3, [r7, #4]
 8026b5a:	895b      	ldrh	r3, [r3, #10]
 8026b5c:	461a      	mov	r2, r3
 8026b5e:	683b      	ldr	r3, [r7, #0]
 8026b60:	fb03 f202 	mul.w	r2, r3, r2
 8026b64:	687b      	ldr	r3, [r7, #4]
 8026b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026b68:	4413      	add	r3, r2
}
 8026b6a:	4618      	mov	r0, r3
 8026b6c:	370c      	adds	r7, #12
 8026b6e:	46bd      	mov	sp, r7
 8026b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b74:	4770      	bx	lr

08026b76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8026b76:	b580      	push	{r7, lr}
 8026b78:	b086      	sub	sp, #24
 8026b7a:	af00      	add	r7, sp, #0
 8026b7c:	6078      	str	r0, [r7, #4]
 8026b7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8026b80:	687b      	ldr	r3, [r7, #4]
 8026b82:	681b      	ldr	r3, [r3, #0]
 8026b84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8026b86:	683b      	ldr	r3, [r7, #0]
 8026b88:	2b01      	cmp	r3, #1
 8026b8a:	d904      	bls.n	8026b96 <get_fat+0x20>
 8026b8c:	693b      	ldr	r3, [r7, #16]
 8026b8e:	695b      	ldr	r3, [r3, #20]
 8026b90:	683a      	ldr	r2, [r7, #0]
 8026b92:	429a      	cmp	r2, r3
 8026b94:	d302      	bcc.n	8026b9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8026b96:	2301      	movs	r3, #1
 8026b98:	617b      	str	r3, [r7, #20]
 8026b9a:	e08e      	b.n	8026cba <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8026b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8026ba0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8026ba2:	693b      	ldr	r3, [r7, #16]
 8026ba4:	781b      	ldrb	r3, [r3, #0]
 8026ba6:	2b03      	cmp	r3, #3
 8026ba8:	d061      	beq.n	8026c6e <get_fat+0xf8>
 8026baa:	2b03      	cmp	r3, #3
 8026bac:	dc7b      	bgt.n	8026ca6 <get_fat+0x130>
 8026bae:	2b01      	cmp	r3, #1
 8026bb0:	d002      	beq.n	8026bb8 <get_fat+0x42>
 8026bb2:	2b02      	cmp	r3, #2
 8026bb4:	d041      	beq.n	8026c3a <get_fat+0xc4>
 8026bb6:	e076      	b.n	8026ca6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8026bb8:	683b      	ldr	r3, [r7, #0]
 8026bba:	60fb      	str	r3, [r7, #12]
 8026bbc:	68fb      	ldr	r3, [r7, #12]
 8026bbe:	085b      	lsrs	r3, r3, #1
 8026bc0:	68fa      	ldr	r2, [r7, #12]
 8026bc2:	4413      	add	r3, r2
 8026bc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026bc6:	693b      	ldr	r3, [r7, #16]
 8026bc8:	6a1a      	ldr	r2, [r3, #32]
 8026bca:	68fb      	ldr	r3, [r7, #12]
 8026bcc:	0a5b      	lsrs	r3, r3, #9
 8026bce:	4413      	add	r3, r2
 8026bd0:	4619      	mov	r1, r3
 8026bd2:	6938      	ldr	r0, [r7, #16]
 8026bd4:	f7ff ff14 	bl	8026a00 <move_window>
 8026bd8:	4603      	mov	r3, r0
 8026bda:	2b00      	cmp	r3, #0
 8026bdc:	d166      	bne.n	8026cac <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8026bde:	68fb      	ldr	r3, [r7, #12]
 8026be0:	1c5a      	adds	r2, r3, #1
 8026be2:	60fa      	str	r2, [r7, #12]
 8026be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026be8:	693a      	ldr	r2, [r7, #16]
 8026bea:	4413      	add	r3, r2
 8026bec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026bf2:	693b      	ldr	r3, [r7, #16]
 8026bf4:	6a1a      	ldr	r2, [r3, #32]
 8026bf6:	68fb      	ldr	r3, [r7, #12]
 8026bf8:	0a5b      	lsrs	r3, r3, #9
 8026bfa:	4413      	add	r3, r2
 8026bfc:	4619      	mov	r1, r3
 8026bfe:	6938      	ldr	r0, [r7, #16]
 8026c00:	f7ff fefe 	bl	8026a00 <move_window>
 8026c04:	4603      	mov	r3, r0
 8026c06:	2b00      	cmp	r3, #0
 8026c08:	d152      	bne.n	8026cb0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8026c0a:	68fb      	ldr	r3, [r7, #12]
 8026c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c10:	693a      	ldr	r2, [r7, #16]
 8026c12:	4413      	add	r3, r2
 8026c14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026c18:	021b      	lsls	r3, r3, #8
 8026c1a:	68ba      	ldr	r2, [r7, #8]
 8026c1c:	4313      	orrs	r3, r2
 8026c1e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8026c20:	683b      	ldr	r3, [r7, #0]
 8026c22:	f003 0301 	and.w	r3, r3, #1
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d002      	beq.n	8026c30 <get_fat+0xba>
 8026c2a:	68bb      	ldr	r3, [r7, #8]
 8026c2c:	091b      	lsrs	r3, r3, #4
 8026c2e:	e002      	b.n	8026c36 <get_fat+0xc0>
 8026c30:	68bb      	ldr	r3, [r7, #8]
 8026c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026c36:	617b      	str	r3, [r7, #20]
			break;
 8026c38:	e03f      	b.n	8026cba <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026c3a:	693b      	ldr	r3, [r7, #16]
 8026c3c:	6a1a      	ldr	r2, [r3, #32]
 8026c3e:	683b      	ldr	r3, [r7, #0]
 8026c40:	0a1b      	lsrs	r3, r3, #8
 8026c42:	4413      	add	r3, r2
 8026c44:	4619      	mov	r1, r3
 8026c46:	6938      	ldr	r0, [r7, #16]
 8026c48:	f7ff feda 	bl	8026a00 <move_window>
 8026c4c:	4603      	mov	r3, r0
 8026c4e:	2b00      	cmp	r3, #0
 8026c50:	d130      	bne.n	8026cb4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8026c52:	693b      	ldr	r3, [r7, #16]
 8026c54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026c58:	683b      	ldr	r3, [r7, #0]
 8026c5a:	005b      	lsls	r3, r3, #1
 8026c5c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026c60:	4413      	add	r3, r2
 8026c62:	4618      	mov	r0, r3
 8026c64:	f7ff fc1c 	bl	80264a0 <ld_word>
 8026c68:	4603      	mov	r3, r0
 8026c6a:	617b      	str	r3, [r7, #20]
			break;
 8026c6c:	e025      	b.n	8026cba <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026c6e:	693b      	ldr	r3, [r7, #16]
 8026c70:	6a1a      	ldr	r2, [r3, #32]
 8026c72:	683b      	ldr	r3, [r7, #0]
 8026c74:	09db      	lsrs	r3, r3, #7
 8026c76:	4413      	add	r3, r2
 8026c78:	4619      	mov	r1, r3
 8026c7a:	6938      	ldr	r0, [r7, #16]
 8026c7c:	f7ff fec0 	bl	8026a00 <move_window>
 8026c80:	4603      	mov	r3, r0
 8026c82:	2b00      	cmp	r3, #0
 8026c84:	d118      	bne.n	8026cb8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8026c86:	693b      	ldr	r3, [r7, #16]
 8026c88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026c8c:	683b      	ldr	r3, [r7, #0]
 8026c8e:	009b      	lsls	r3, r3, #2
 8026c90:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026c94:	4413      	add	r3, r2
 8026c96:	4618      	mov	r0, r3
 8026c98:	f7ff fc1a 	bl	80264d0 <ld_dword>
 8026c9c:	4603      	mov	r3, r0
 8026c9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8026ca2:	617b      	str	r3, [r7, #20]
			break;
 8026ca4:	e009      	b.n	8026cba <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8026ca6:	2301      	movs	r3, #1
 8026ca8:	617b      	str	r3, [r7, #20]
 8026caa:	e006      	b.n	8026cba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026cac:	bf00      	nop
 8026cae:	e004      	b.n	8026cba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026cb0:	bf00      	nop
 8026cb2:	e002      	b.n	8026cba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026cb4:	bf00      	nop
 8026cb6:	e000      	b.n	8026cba <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026cb8:	bf00      	nop
		}
	}

	return val;
 8026cba:	697b      	ldr	r3, [r7, #20]
}
 8026cbc:	4618      	mov	r0, r3
 8026cbe:	3718      	adds	r7, #24
 8026cc0:	46bd      	mov	sp, r7
 8026cc2:	bd80      	pop	{r7, pc}

08026cc4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8026cc4:	b590      	push	{r4, r7, lr}
 8026cc6:	b089      	sub	sp, #36	@ 0x24
 8026cc8:	af00      	add	r7, sp, #0
 8026cca:	60f8      	str	r0, [r7, #12]
 8026ccc:	60b9      	str	r1, [r7, #8]
 8026cce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8026cd0:	2302      	movs	r3, #2
 8026cd2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8026cd4:	68bb      	ldr	r3, [r7, #8]
 8026cd6:	2b01      	cmp	r3, #1
 8026cd8:	f240 80d9 	bls.w	8026e8e <put_fat+0x1ca>
 8026cdc:	68fb      	ldr	r3, [r7, #12]
 8026cde:	695b      	ldr	r3, [r3, #20]
 8026ce0:	68ba      	ldr	r2, [r7, #8]
 8026ce2:	429a      	cmp	r2, r3
 8026ce4:	f080 80d3 	bcs.w	8026e8e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8026ce8:	68fb      	ldr	r3, [r7, #12]
 8026cea:	781b      	ldrb	r3, [r3, #0]
 8026cec:	2b03      	cmp	r3, #3
 8026cee:	f000 8096 	beq.w	8026e1e <put_fat+0x15a>
 8026cf2:	2b03      	cmp	r3, #3
 8026cf4:	f300 80cb 	bgt.w	8026e8e <put_fat+0x1ca>
 8026cf8:	2b01      	cmp	r3, #1
 8026cfa:	d002      	beq.n	8026d02 <put_fat+0x3e>
 8026cfc:	2b02      	cmp	r3, #2
 8026cfe:	d06e      	beq.n	8026dde <put_fat+0x11a>
 8026d00:	e0c5      	b.n	8026e8e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8026d02:	68bb      	ldr	r3, [r7, #8]
 8026d04:	61bb      	str	r3, [r7, #24]
 8026d06:	69bb      	ldr	r3, [r7, #24]
 8026d08:	085b      	lsrs	r3, r3, #1
 8026d0a:	69ba      	ldr	r2, [r7, #24]
 8026d0c:	4413      	add	r3, r2
 8026d0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026d10:	68fb      	ldr	r3, [r7, #12]
 8026d12:	6a1a      	ldr	r2, [r3, #32]
 8026d14:	69bb      	ldr	r3, [r7, #24]
 8026d16:	0a5b      	lsrs	r3, r3, #9
 8026d18:	4413      	add	r3, r2
 8026d1a:	4619      	mov	r1, r3
 8026d1c:	68f8      	ldr	r0, [r7, #12]
 8026d1e:	f7ff fe6f 	bl	8026a00 <move_window>
 8026d22:	4603      	mov	r3, r0
 8026d24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d26:	7ffb      	ldrb	r3, [r7, #31]
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	f040 80a9 	bne.w	8026e80 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8026d2e:	68fb      	ldr	r3, [r7, #12]
 8026d30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d34:	69bb      	ldr	r3, [r7, #24]
 8026d36:	1c59      	adds	r1, r3, #1
 8026d38:	61b9      	str	r1, [r7, #24]
 8026d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026d3e:	4413      	add	r3, r2
 8026d40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8026d42:	68bb      	ldr	r3, [r7, #8]
 8026d44:	f003 0301 	and.w	r3, r3, #1
 8026d48:	2b00      	cmp	r3, #0
 8026d4a:	d00d      	beq.n	8026d68 <put_fat+0xa4>
 8026d4c:	697b      	ldr	r3, [r7, #20]
 8026d4e:	781b      	ldrb	r3, [r3, #0]
 8026d50:	b25b      	sxtb	r3, r3
 8026d52:	f003 030f 	and.w	r3, r3, #15
 8026d56:	b25a      	sxtb	r2, r3
 8026d58:	687b      	ldr	r3, [r7, #4]
 8026d5a:	b2db      	uxtb	r3, r3
 8026d5c:	011b      	lsls	r3, r3, #4
 8026d5e:	b25b      	sxtb	r3, r3
 8026d60:	4313      	orrs	r3, r2
 8026d62:	b25b      	sxtb	r3, r3
 8026d64:	b2db      	uxtb	r3, r3
 8026d66:	e001      	b.n	8026d6c <put_fat+0xa8>
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	b2db      	uxtb	r3, r3
 8026d6c:	697a      	ldr	r2, [r7, #20]
 8026d6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026d70:	68fb      	ldr	r3, [r7, #12]
 8026d72:	2201      	movs	r2, #1
 8026d74:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026d76:	68fb      	ldr	r3, [r7, #12]
 8026d78:	6a1a      	ldr	r2, [r3, #32]
 8026d7a:	69bb      	ldr	r3, [r7, #24]
 8026d7c:	0a5b      	lsrs	r3, r3, #9
 8026d7e:	4413      	add	r3, r2
 8026d80:	4619      	mov	r1, r3
 8026d82:	68f8      	ldr	r0, [r7, #12]
 8026d84:	f7ff fe3c 	bl	8026a00 <move_window>
 8026d88:	4603      	mov	r3, r0
 8026d8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d8c:	7ffb      	ldrb	r3, [r7, #31]
 8026d8e:	2b00      	cmp	r3, #0
 8026d90:	d178      	bne.n	8026e84 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8026d92:	68fb      	ldr	r3, [r7, #12]
 8026d94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d98:	69bb      	ldr	r3, [r7, #24]
 8026d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026d9e:	4413      	add	r3, r2
 8026da0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8026da2:	68bb      	ldr	r3, [r7, #8]
 8026da4:	f003 0301 	and.w	r3, r3, #1
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	d003      	beq.n	8026db4 <put_fat+0xf0>
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	091b      	lsrs	r3, r3, #4
 8026db0:	b2db      	uxtb	r3, r3
 8026db2:	e00e      	b.n	8026dd2 <put_fat+0x10e>
 8026db4:	697b      	ldr	r3, [r7, #20]
 8026db6:	781b      	ldrb	r3, [r3, #0]
 8026db8:	b25b      	sxtb	r3, r3
 8026dba:	f023 030f 	bic.w	r3, r3, #15
 8026dbe:	b25a      	sxtb	r2, r3
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	0a1b      	lsrs	r3, r3, #8
 8026dc4:	b25b      	sxtb	r3, r3
 8026dc6:	f003 030f 	and.w	r3, r3, #15
 8026dca:	b25b      	sxtb	r3, r3
 8026dcc:	4313      	orrs	r3, r2
 8026dce:	b25b      	sxtb	r3, r3
 8026dd0:	b2db      	uxtb	r3, r3
 8026dd2:	697a      	ldr	r2, [r7, #20]
 8026dd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026dd6:	68fb      	ldr	r3, [r7, #12]
 8026dd8:	2201      	movs	r2, #1
 8026dda:	70da      	strb	r2, [r3, #3]
			break;
 8026ddc:	e057      	b.n	8026e8e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8026dde:	68fb      	ldr	r3, [r7, #12]
 8026de0:	6a1a      	ldr	r2, [r3, #32]
 8026de2:	68bb      	ldr	r3, [r7, #8]
 8026de4:	0a1b      	lsrs	r3, r3, #8
 8026de6:	4413      	add	r3, r2
 8026de8:	4619      	mov	r1, r3
 8026dea:	68f8      	ldr	r0, [r7, #12]
 8026dec:	f7ff fe08 	bl	8026a00 <move_window>
 8026df0:	4603      	mov	r3, r0
 8026df2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026df4:	7ffb      	ldrb	r3, [r7, #31]
 8026df6:	2b00      	cmp	r3, #0
 8026df8:	d146      	bne.n	8026e88 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026e00:	68bb      	ldr	r3, [r7, #8]
 8026e02:	005b      	lsls	r3, r3, #1
 8026e04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026e08:	4413      	add	r3, r2
 8026e0a:	687a      	ldr	r2, [r7, #4]
 8026e0c:	b292      	uxth	r2, r2
 8026e0e:	4611      	mov	r1, r2
 8026e10:	4618      	mov	r0, r3
 8026e12:	f7ff fb80 	bl	8026516 <st_word>
			fs->wflag = 1;
 8026e16:	68fb      	ldr	r3, [r7, #12]
 8026e18:	2201      	movs	r2, #1
 8026e1a:	70da      	strb	r2, [r3, #3]
			break;
 8026e1c:	e037      	b.n	8026e8e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8026e1e:	68fb      	ldr	r3, [r7, #12]
 8026e20:	6a1a      	ldr	r2, [r3, #32]
 8026e22:	68bb      	ldr	r3, [r7, #8]
 8026e24:	09db      	lsrs	r3, r3, #7
 8026e26:	4413      	add	r3, r2
 8026e28:	4619      	mov	r1, r3
 8026e2a:	68f8      	ldr	r0, [r7, #12]
 8026e2c:	f7ff fde8 	bl	8026a00 <move_window>
 8026e30:	4603      	mov	r3, r0
 8026e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026e34:	7ffb      	ldrb	r3, [r7, #31]
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	d128      	bne.n	8026e8c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8026e3a:	687b      	ldr	r3, [r7, #4]
 8026e3c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8026e40:	68fb      	ldr	r3, [r7, #12]
 8026e42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026e46:	68bb      	ldr	r3, [r7, #8]
 8026e48:	009b      	lsls	r3, r3, #2
 8026e4a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026e4e:	4413      	add	r3, r2
 8026e50:	4618      	mov	r0, r3
 8026e52:	f7ff fb3d 	bl	80264d0 <ld_dword>
 8026e56:	4603      	mov	r3, r0
 8026e58:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8026e5c:	4323      	orrs	r3, r4
 8026e5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8026e60:	68fb      	ldr	r3, [r7, #12]
 8026e62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026e66:	68bb      	ldr	r3, [r7, #8]
 8026e68:	009b      	lsls	r3, r3, #2
 8026e6a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026e6e:	4413      	add	r3, r2
 8026e70:	6879      	ldr	r1, [r7, #4]
 8026e72:	4618      	mov	r0, r3
 8026e74:	f7ff fb6a 	bl	802654c <st_dword>
			fs->wflag = 1;
 8026e78:	68fb      	ldr	r3, [r7, #12]
 8026e7a:	2201      	movs	r2, #1
 8026e7c:	70da      	strb	r2, [r3, #3]
			break;
 8026e7e:	e006      	b.n	8026e8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026e80:	bf00      	nop
 8026e82:	e004      	b.n	8026e8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026e84:	bf00      	nop
 8026e86:	e002      	b.n	8026e8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026e88:	bf00      	nop
 8026e8a:	e000      	b.n	8026e8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026e8c:	bf00      	nop
		}
	}
	return res;
 8026e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8026e90:	4618      	mov	r0, r3
 8026e92:	3724      	adds	r7, #36	@ 0x24
 8026e94:	46bd      	mov	sp, r7
 8026e96:	bd90      	pop	{r4, r7, pc}

08026e98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8026e98:	b580      	push	{r7, lr}
 8026e9a:	b088      	sub	sp, #32
 8026e9c:	af00      	add	r7, sp, #0
 8026e9e:	60f8      	str	r0, [r7, #12]
 8026ea0:	60b9      	str	r1, [r7, #8]
 8026ea2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8026ea4:	2300      	movs	r3, #0
 8026ea6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8026ea8:	68fb      	ldr	r3, [r7, #12]
 8026eaa:	681b      	ldr	r3, [r3, #0]
 8026eac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8026eae:	68bb      	ldr	r3, [r7, #8]
 8026eb0:	2b01      	cmp	r3, #1
 8026eb2:	d904      	bls.n	8026ebe <remove_chain+0x26>
 8026eb4:	69bb      	ldr	r3, [r7, #24]
 8026eb6:	695b      	ldr	r3, [r3, #20]
 8026eb8:	68ba      	ldr	r2, [r7, #8]
 8026eba:	429a      	cmp	r2, r3
 8026ebc:	d301      	bcc.n	8026ec2 <remove_chain+0x2a>
 8026ebe:	2302      	movs	r3, #2
 8026ec0:	e04b      	b.n	8026f5a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	2b00      	cmp	r3, #0
 8026ec6:	d00c      	beq.n	8026ee2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8026ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8026ecc:	6879      	ldr	r1, [r7, #4]
 8026ece:	69b8      	ldr	r0, [r7, #24]
 8026ed0:	f7ff fef8 	bl	8026cc4 <put_fat>
 8026ed4:	4603      	mov	r3, r0
 8026ed6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8026ed8:	7ffb      	ldrb	r3, [r7, #31]
 8026eda:	2b00      	cmp	r3, #0
 8026edc:	d001      	beq.n	8026ee2 <remove_chain+0x4a>
 8026ede:	7ffb      	ldrb	r3, [r7, #31]
 8026ee0:	e03b      	b.n	8026f5a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8026ee2:	68b9      	ldr	r1, [r7, #8]
 8026ee4:	68f8      	ldr	r0, [r7, #12]
 8026ee6:	f7ff fe46 	bl	8026b76 <get_fat>
 8026eea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8026eec:	697b      	ldr	r3, [r7, #20]
 8026eee:	2b00      	cmp	r3, #0
 8026ef0:	d031      	beq.n	8026f56 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8026ef2:	697b      	ldr	r3, [r7, #20]
 8026ef4:	2b01      	cmp	r3, #1
 8026ef6:	d101      	bne.n	8026efc <remove_chain+0x64>
 8026ef8:	2302      	movs	r3, #2
 8026efa:	e02e      	b.n	8026f5a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8026efc:	697b      	ldr	r3, [r7, #20]
 8026efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026f02:	d101      	bne.n	8026f08 <remove_chain+0x70>
 8026f04:	2301      	movs	r3, #1
 8026f06:	e028      	b.n	8026f5a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8026f08:	2200      	movs	r2, #0
 8026f0a:	68b9      	ldr	r1, [r7, #8]
 8026f0c:	69b8      	ldr	r0, [r7, #24]
 8026f0e:	f7ff fed9 	bl	8026cc4 <put_fat>
 8026f12:	4603      	mov	r3, r0
 8026f14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8026f16:	7ffb      	ldrb	r3, [r7, #31]
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	d001      	beq.n	8026f20 <remove_chain+0x88>
 8026f1c:	7ffb      	ldrb	r3, [r7, #31]
 8026f1e:	e01c      	b.n	8026f5a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8026f20:	69bb      	ldr	r3, [r7, #24]
 8026f22:	691a      	ldr	r2, [r3, #16]
 8026f24:	69bb      	ldr	r3, [r7, #24]
 8026f26:	695b      	ldr	r3, [r3, #20]
 8026f28:	3b02      	subs	r3, #2
 8026f2a:	429a      	cmp	r2, r3
 8026f2c:	d20b      	bcs.n	8026f46 <remove_chain+0xae>
			fs->free_clst++;
 8026f2e:	69bb      	ldr	r3, [r7, #24]
 8026f30:	691b      	ldr	r3, [r3, #16]
 8026f32:	1c5a      	adds	r2, r3, #1
 8026f34:	69bb      	ldr	r3, [r7, #24]
 8026f36:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8026f38:	69bb      	ldr	r3, [r7, #24]
 8026f3a:	791b      	ldrb	r3, [r3, #4]
 8026f3c:	f043 0301 	orr.w	r3, r3, #1
 8026f40:	b2da      	uxtb	r2, r3
 8026f42:	69bb      	ldr	r3, [r7, #24]
 8026f44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8026f46:	697b      	ldr	r3, [r7, #20]
 8026f48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8026f4a:	69bb      	ldr	r3, [r7, #24]
 8026f4c:	695b      	ldr	r3, [r3, #20]
 8026f4e:	68ba      	ldr	r2, [r7, #8]
 8026f50:	429a      	cmp	r2, r3
 8026f52:	d3c6      	bcc.n	8026ee2 <remove_chain+0x4a>
 8026f54:	e000      	b.n	8026f58 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8026f56:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8026f58:	2300      	movs	r3, #0
}
 8026f5a:	4618      	mov	r0, r3
 8026f5c:	3720      	adds	r7, #32
 8026f5e:	46bd      	mov	sp, r7
 8026f60:	bd80      	pop	{r7, pc}

08026f62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8026f62:	b580      	push	{r7, lr}
 8026f64:	b088      	sub	sp, #32
 8026f66:	af00      	add	r7, sp, #0
 8026f68:	6078      	str	r0, [r7, #4]
 8026f6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	681b      	ldr	r3, [r3, #0]
 8026f70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8026f72:	683b      	ldr	r3, [r7, #0]
 8026f74:	2b00      	cmp	r3, #0
 8026f76:	d10d      	bne.n	8026f94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8026f78:	693b      	ldr	r3, [r7, #16]
 8026f7a:	68db      	ldr	r3, [r3, #12]
 8026f7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8026f7e:	69bb      	ldr	r3, [r7, #24]
 8026f80:	2b00      	cmp	r3, #0
 8026f82:	d004      	beq.n	8026f8e <create_chain+0x2c>
 8026f84:	693b      	ldr	r3, [r7, #16]
 8026f86:	695b      	ldr	r3, [r3, #20]
 8026f88:	69ba      	ldr	r2, [r7, #24]
 8026f8a:	429a      	cmp	r2, r3
 8026f8c:	d31b      	bcc.n	8026fc6 <create_chain+0x64>
 8026f8e:	2301      	movs	r3, #1
 8026f90:	61bb      	str	r3, [r7, #24]
 8026f92:	e018      	b.n	8026fc6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8026f94:	6839      	ldr	r1, [r7, #0]
 8026f96:	6878      	ldr	r0, [r7, #4]
 8026f98:	f7ff fded 	bl	8026b76 <get_fat>
 8026f9c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8026f9e:	68fb      	ldr	r3, [r7, #12]
 8026fa0:	2b01      	cmp	r3, #1
 8026fa2:	d801      	bhi.n	8026fa8 <create_chain+0x46>
 8026fa4:	2301      	movs	r3, #1
 8026fa6:	e070      	b.n	802708a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8026fa8:	68fb      	ldr	r3, [r7, #12]
 8026faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026fae:	d101      	bne.n	8026fb4 <create_chain+0x52>
 8026fb0:	68fb      	ldr	r3, [r7, #12]
 8026fb2:	e06a      	b.n	802708a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8026fb4:	693b      	ldr	r3, [r7, #16]
 8026fb6:	695b      	ldr	r3, [r3, #20]
 8026fb8:	68fa      	ldr	r2, [r7, #12]
 8026fba:	429a      	cmp	r2, r3
 8026fbc:	d201      	bcs.n	8026fc2 <create_chain+0x60>
 8026fbe:	68fb      	ldr	r3, [r7, #12]
 8026fc0:	e063      	b.n	802708a <create_chain+0x128>
		scl = clst;
 8026fc2:	683b      	ldr	r3, [r7, #0]
 8026fc4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8026fc6:	69bb      	ldr	r3, [r7, #24]
 8026fc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8026fca:	69fb      	ldr	r3, [r7, #28]
 8026fcc:	3301      	adds	r3, #1
 8026fce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8026fd0:	693b      	ldr	r3, [r7, #16]
 8026fd2:	695b      	ldr	r3, [r3, #20]
 8026fd4:	69fa      	ldr	r2, [r7, #28]
 8026fd6:	429a      	cmp	r2, r3
 8026fd8:	d307      	bcc.n	8026fea <create_chain+0x88>
				ncl = 2;
 8026fda:	2302      	movs	r3, #2
 8026fdc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8026fde:	69fa      	ldr	r2, [r7, #28]
 8026fe0:	69bb      	ldr	r3, [r7, #24]
 8026fe2:	429a      	cmp	r2, r3
 8026fe4:	d901      	bls.n	8026fea <create_chain+0x88>
 8026fe6:	2300      	movs	r3, #0
 8026fe8:	e04f      	b.n	802708a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8026fea:	69f9      	ldr	r1, [r7, #28]
 8026fec:	6878      	ldr	r0, [r7, #4]
 8026fee:	f7ff fdc2 	bl	8026b76 <get_fat>
 8026ff2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8026ff4:	68fb      	ldr	r3, [r7, #12]
 8026ff6:	2b00      	cmp	r3, #0
 8026ff8:	d00e      	beq.n	8027018 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8026ffa:	68fb      	ldr	r3, [r7, #12]
 8026ffc:	2b01      	cmp	r3, #1
 8026ffe:	d003      	beq.n	8027008 <create_chain+0xa6>
 8027000:	68fb      	ldr	r3, [r7, #12]
 8027002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027006:	d101      	bne.n	802700c <create_chain+0xaa>
 8027008:	68fb      	ldr	r3, [r7, #12]
 802700a:	e03e      	b.n	802708a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 802700c:	69fa      	ldr	r2, [r7, #28]
 802700e:	69bb      	ldr	r3, [r7, #24]
 8027010:	429a      	cmp	r2, r3
 8027012:	d1da      	bne.n	8026fca <create_chain+0x68>
 8027014:	2300      	movs	r3, #0
 8027016:	e038      	b.n	802708a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8027018:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 802701a:	f04f 32ff 	mov.w	r2, #4294967295
 802701e:	69f9      	ldr	r1, [r7, #28]
 8027020:	6938      	ldr	r0, [r7, #16]
 8027022:	f7ff fe4f 	bl	8026cc4 <put_fat>
 8027026:	4603      	mov	r3, r0
 8027028:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 802702a:	7dfb      	ldrb	r3, [r7, #23]
 802702c:	2b00      	cmp	r3, #0
 802702e:	d109      	bne.n	8027044 <create_chain+0xe2>
 8027030:	683b      	ldr	r3, [r7, #0]
 8027032:	2b00      	cmp	r3, #0
 8027034:	d006      	beq.n	8027044 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8027036:	69fa      	ldr	r2, [r7, #28]
 8027038:	6839      	ldr	r1, [r7, #0]
 802703a:	6938      	ldr	r0, [r7, #16]
 802703c:	f7ff fe42 	bl	8026cc4 <put_fat>
 8027040:	4603      	mov	r3, r0
 8027042:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8027044:	7dfb      	ldrb	r3, [r7, #23]
 8027046:	2b00      	cmp	r3, #0
 8027048:	d116      	bne.n	8027078 <create_chain+0x116>
		fs->last_clst = ncl;
 802704a:	693b      	ldr	r3, [r7, #16]
 802704c:	69fa      	ldr	r2, [r7, #28]
 802704e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8027050:	693b      	ldr	r3, [r7, #16]
 8027052:	691a      	ldr	r2, [r3, #16]
 8027054:	693b      	ldr	r3, [r7, #16]
 8027056:	695b      	ldr	r3, [r3, #20]
 8027058:	3b02      	subs	r3, #2
 802705a:	429a      	cmp	r2, r3
 802705c:	d804      	bhi.n	8027068 <create_chain+0x106>
 802705e:	693b      	ldr	r3, [r7, #16]
 8027060:	691b      	ldr	r3, [r3, #16]
 8027062:	1e5a      	subs	r2, r3, #1
 8027064:	693b      	ldr	r3, [r7, #16]
 8027066:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8027068:	693b      	ldr	r3, [r7, #16]
 802706a:	791b      	ldrb	r3, [r3, #4]
 802706c:	f043 0301 	orr.w	r3, r3, #1
 8027070:	b2da      	uxtb	r2, r3
 8027072:	693b      	ldr	r3, [r7, #16]
 8027074:	711a      	strb	r2, [r3, #4]
 8027076:	e007      	b.n	8027088 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8027078:	7dfb      	ldrb	r3, [r7, #23]
 802707a:	2b01      	cmp	r3, #1
 802707c:	d102      	bne.n	8027084 <create_chain+0x122>
 802707e:	f04f 33ff 	mov.w	r3, #4294967295
 8027082:	e000      	b.n	8027086 <create_chain+0x124>
 8027084:	2301      	movs	r3, #1
 8027086:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8027088:	69fb      	ldr	r3, [r7, #28]
}
 802708a:	4618      	mov	r0, r3
 802708c:	3720      	adds	r7, #32
 802708e:	46bd      	mov	sp, r7
 8027090:	bd80      	pop	{r7, pc}

08027092 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8027092:	b480      	push	{r7}
 8027094:	b087      	sub	sp, #28
 8027096:	af00      	add	r7, sp, #0
 8027098:	6078      	str	r0, [r7, #4]
 802709a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80270a2:	687b      	ldr	r3, [r7, #4]
 80270a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80270a6:	3304      	adds	r3, #4
 80270a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80270aa:	683b      	ldr	r3, [r7, #0]
 80270ac:	0a5b      	lsrs	r3, r3, #9
 80270ae:	68fa      	ldr	r2, [r7, #12]
 80270b0:	8952      	ldrh	r2, [r2, #10]
 80270b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80270b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80270b8:	693b      	ldr	r3, [r7, #16]
 80270ba:	1d1a      	adds	r2, r3, #4
 80270bc:	613a      	str	r2, [r7, #16]
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80270c2:	68bb      	ldr	r3, [r7, #8]
 80270c4:	2b00      	cmp	r3, #0
 80270c6:	d101      	bne.n	80270cc <clmt_clust+0x3a>
 80270c8:	2300      	movs	r3, #0
 80270ca:	e010      	b.n	80270ee <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80270cc:	697a      	ldr	r2, [r7, #20]
 80270ce:	68bb      	ldr	r3, [r7, #8]
 80270d0:	429a      	cmp	r2, r3
 80270d2:	d307      	bcc.n	80270e4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80270d4:	697a      	ldr	r2, [r7, #20]
 80270d6:	68bb      	ldr	r3, [r7, #8]
 80270d8:	1ad3      	subs	r3, r2, r3
 80270da:	617b      	str	r3, [r7, #20]
 80270dc:	693b      	ldr	r3, [r7, #16]
 80270de:	3304      	adds	r3, #4
 80270e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80270e2:	e7e9      	b.n	80270b8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80270e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80270e6:	693b      	ldr	r3, [r7, #16]
 80270e8:	681a      	ldr	r2, [r3, #0]
 80270ea:	697b      	ldr	r3, [r7, #20]
 80270ec:	4413      	add	r3, r2
}
 80270ee:	4618      	mov	r0, r3
 80270f0:	371c      	adds	r7, #28
 80270f2:	46bd      	mov	sp, r7
 80270f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270f8:	4770      	bx	lr

080270fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80270fa:	b580      	push	{r7, lr}
 80270fc:	b086      	sub	sp, #24
 80270fe:	af00      	add	r7, sp, #0
 8027100:	6078      	str	r0, [r7, #4]
 8027102:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	681b      	ldr	r3, [r3, #0]
 8027108:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 802710a:	683b      	ldr	r3, [r7, #0]
 802710c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027110:	d204      	bcs.n	802711c <dir_sdi+0x22>
 8027112:	683b      	ldr	r3, [r7, #0]
 8027114:	f003 031f 	and.w	r3, r3, #31
 8027118:	2b00      	cmp	r3, #0
 802711a:	d001      	beq.n	8027120 <dir_sdi+0x26>
		return FR_INT_ERR;
 802711c:	2302      	movs	r3, #2
 802711e:	e063      	b.n	80271e8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8027120:	687b      	ldr	r3, [r7, #4]
 8027122:	683a      	ldr	r2, [r7, #0]
 8027124:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	689b      	ldr	r3, [r3, #8]
 802712a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 802712c:	697b      	ldr	r3, [r7, #20]
 802712e:	2b00      	cmp	r3, #0
 8027130:	d106      	bne.n	8027140 <dir_sdi+0x46>
 8027132:	693b      	ldr	r3, [r7, #16]
 8027134:	781b      	ldrb	r3, [r3, #0]
 8027136:	2b02      	cmp	r3, #2
 8027138:	d902      	bls.n	8027140 <dir_sdi+0x46>
		clst = fs->dirbase;
 802713a:	693b      	ldr	r3, [r7, #16]
 802713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802713e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8027140:	697b      	ldr	r3, [r7, #20]
 8027142:	2b00      	cmp	r3, #0
 8027144:	d10c      	bne.n	8027160 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8027146:	683b      	ldr	r3, [r7, #0]
 8027148:	095b      	lsrs	r3, r3, #5
 802714a:	693a      	ldr	r2, [r7, #16]
 802714c:	8912      	ldrh	r2, [r2, #8]
 802714e:	4293      	cmp	r3, r2
 8027150:	d301      	bcc.n	8027156 <dir_sdi+0x5c>
 8027152:	2302      	movs	r3, #2
 8027154:	e048      	b.n	80271e8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8027156:	693b      	ldr	r3, [r7, #16]
 8027158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802715a:	687b      	ldr	r3, [r7, #4]
 802715c:	61da      	str	r2, [r3, #28]
 802715e:	e029      	b.n	80271b4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8027160:	693b      	ldr	r3, [r7, #16]
 8027162:	895b      	ldrh	r3, [r3, #10]
 8027164:	025b      	lsls	r3, r3, #9
 8027166:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8027168:	e019      	b.n	802719e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	6979      	ldr	r1, [r7, #20]
 802716e:	4618      	mov	r0, r3
 8027170:	f7ff fd01 	bl	8026b76 <get_fat>
 8027174:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8027176:	697b      	ldr	r3, [r7, #20]
 8027178:	f1b3 3fff 	cmp.w	r3, #4294967295
 802717c:	d101      	bne.n	8027182 <dir_sdi+0x88>
 802717e:	2301      	movs	r3, #1
 8027180:	e032      	b.n	80271e8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8027182:	697b      	ldr	r3, [r7, #20]
 8027184:	2b01      	cmp	r3, #1
 8027186:	d904      	bls.n	8027192 <dir_sdi+0x98>
 8027188:	693b      	ldr	r3, [r7, #16]
 802718a:	695b      	ldr	r3, [r3, #20]
 802718c:	697a      	ldr	r2, [r7, #20]
 802718e:	429a      	cmp	r2, r3
 8027190:	d301      	bcc.n	8027196 <dir_sdi+0x9c>
 8027192:	2302      	movs	r3, #2
 8027194:	e028      	b.n	80271e8 <dir_sdi+0xee>
			ofs -= csz;
 8027196:	683a      	ldr	r2, [r7, #0]
 8027198:	68fb      	ldr	r3, [r7, #12]
 802719a:	1ad3      	subs	r3, r2, r3
 802719c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 802719e:	683a      	ldr	r2, [r7, #0]
 80271a0:	68fb      	ldr	r3, [r7, #12]
 80271a2:	429a      	cmp	r2, r3
 80271a4:	d2e1      	bcs.n	802716a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80271a6:	6979      	ldr	r1, [r7, #20]
 80271a8:	6938      	ldr	r0, [r7, #16]
 80271aa:	f7ff fcc5 	bl	8026b38 <clust2sect>
 80271ae:	4602      	mov	r2, r0
 80271b0:	687b      	ldr	r3, [r7, #4]
 80271b2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	697a      	ldr	r2, [r7, #20]
 80271b8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	69db      	ldr	r3, [r3, #28]
 80271be:	2b00      	cmp	r3, #0
 80271c0:	d101      	bne.n	80271c6 <dir_sdi+0xcc>
 80271c2:	2302      	movs	r3, #2
 80271c4:	e010      	b.n	80271e8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80271c6:	687b      	ldr	r3, [r7, #4]
 80271c8:	69da      	ldr	r2, [r3, #28]
 80271ca:	683b      	ldr	r3, [r7, #0]
 80271cc:	0a5b      	lsrs	r3, r3, #9
 80271ce:	441a      	add	r2, r3
 80271d0:	687b      	ldr	r3, [r7, #4]
 80271d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80271d4:	693b      	ldr	r3, [r7, #16]
 80271d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80271da:	683b      	ldr	r3, [r7, #0]
 80271dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80271e0:	441a      	add	r2, r3
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80271e6:	2300      	movs	r3, #0
}
 80271e8:	4618      	mov	r0, r3
 80271ea:	3718      	adds	r7, #24
 80271ec:	46bd      	mov	sp, r7
 80271ee:	bd80      	pop	{r7, pc}

080271f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80271f0:	b580      	push	{r7, lr}
 80271f2:	b086      	sub	sp, #24
 80271f4:	af00      	add	r7, sp, #0
 80271f6:	6078      	str	r0, [r7, #4]
 80271f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8027200:	687b      	ldr	r3, [r7, #4]
 8027202:	695b      	ldr	r3, [r3, #20]
 8027204:	3320      	adds	r3, #32
 8027206:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8027208:	687b      	ldr	r3, [r7, #4]
 802720a:	69db      	ldr	r3, [r3, #28]
 802720c:	2b00      	cmp	r3, #0
 802720e:	d003      	beq.n	8027218 <dir_next+0x28>
 8027210:	68bb      	ldr	r3, [r7, #8]
 8027212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027216:	d301      	bcc.n	802721c <dir_next+0x2c>
 8027218:	2304      	movs	r3, #4
 802721a:	e0aa      	b.n	8027372 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 802721c:	68bb      	ldr	r3, [r7, #8]
 802721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027222:	2b00      	cmp	r3, #0
 8027224:	f040 8098 	bne.w	8027358 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8027228:	687b      	ldr	r3, [r7, #4]
 802722a:	69db      	ldr	r3, [r3, #28]
 802722c:	1c5a      	adds	r2, r3, #1
 802722e:	687b      	ldr	r3, [r7, #4]
 8027230:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8027232:	687b      	ldr	r3, [r7, #4]
 8027234:	699b      	ldr	r3, [r3, #24]
 8027236:	2b00      	cmp	r3, #0
 8027238:	d10b      	bne.n	8027252 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 802723a:	68bb      	ldr	r3, [r7, #8]
 802723c:	095b      	lsrs	r3, r3, #5
 802723e:	68fa      	ldr	r2, [r7, #12]
 8027240:	8912      	ldrh	r2, [r2, #8]
 8027242:	4293      	cmp	r3, r2
 8027244:	f0c0 8088 	bcc.w	8027358 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8027248:	687b      	ldr	r3, [r7, #4]
 802724a:	2200      	movs	r2, #0
 802724c:	61da      	str	r2, [r3, #28]
 802724e:	2304      	movs	r3, #4
 8027250:	e08f      	b.n	8027372 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8027252:	68bb      	ldr	r3, [r7, #8]
 8027254:	0a5b      	lsrs	r3, r3, #9
 8027256:	68fa      	ldr	r2, [r7, #12]
 8027258:	8952      	ldrh	r2, [r2, #10]
 802725a:	3a01      	subs	r2, #1
 802725c:	4013      	ands	r3, r2
 802725e:	2b00      	cmp	r3, #0
 8027260:	d17a      	bne.n	8027358 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8027262:	687a      	ldr	r2, [r7, #4]
 8027264:	687b      	ldr	r3, [r7, #4]
 8027266:	699b      	ldr	r3, [r3, #24]
 8027268:	4619      	mov	r1, r3
 802726a:	4610      	mov	r0, r2
 802726c:	f7ff fc83 	bl	8026b76 <get_fat>
 8027270:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8027272:	697b      	ldr	r3, [r7, #20]
 8027274:	2b01      	cmp	r3, #1
 8027276:	d801      	bhi.n	802727c <dir_next+0x8c>
 8027278:	2302      	movs	r3, #2
 802727a:	e07a      	b.n	8027372 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 802727c:	697b      	ldr	r3, [r7, #20]
 802727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027282:	d101      	bne.n	8027288 <dir_next+0x98>
 8027284:	2301      	movs	r3, #1
 8027286:	e074      	b.n	8027372 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8027288:	68fb      	ldr	r3, [r7, #12]
 802728a:	695b      	ldr	r3, [r3, #20]
 802728c:	697a      	ldr	r2, [r7, #20]
 802728e:	429a      	cmp	r2, r3
 8027290:	d358      	bcc.n	8027344 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8027292:	683b      	ldr	r3, [r7, #0]
 8027294:	2b00      	cmp	r3, #0
 8027296:	d104      	bne.n	80272a2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8027298:	687b      	ldr	r3, [r7, #4]
 802729a:	2200      	movs	r2, #0
 802729c:	61da      	str	r2, [r3, #28]
 802729e:	2304      	movs	r3, #4
 80272a0:	e067      	b.n	8027372 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80272a2:	687a      	ldr	r2, [r7, #4]
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	699b      	ldr	r3, [r3, #24]
 80272a8:	4619      	mov	r1, r3
 80272aa:	4610      	mov	r0, r2
 80272ac:	f7ff fe59 	bl	8026f62 <create_chain>
 80272b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80272b2:	697b      	ldr	r3, [r7, #20]
 80272b4:	2b00      	cmp	r3, #0
 80272b6:	d101      	bne.n	80272bc <dir_next+0xcc>
 80272b8:	2307      	movs	r3, #7
 80272ba:	e05a      	b.n	8027372 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80272bc:	697b      	ldr	r3, [r7, #20]
 80272be:	2b01      	cmp	r3, #1
 80272c0:	d101      	bne.n	80272c6 <dir_next+0xd6>
 80272c2:	2302      	movs	r3, #2
 80272c4:	e055      	b.n	8027372 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80272c6:	697b      	ldr	r3, [r7, #20]
 80272c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80272cc:	d101      	bne.n	80272d2 <dir_next+0xe2>
 80272ce:	2301      	movs	r3, #1
 80272d0:	e04f      	b.n	8027372 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80272d2:	68f8      	ldr	r0, [r7, #12]
 80272d4:	f7ff fb50 	bl	8026978 <sync_window>
 80272d8:	4603      	mov	r3, r0
 80272da:	2b00      	cmp	r3, #0
 80272dc:	d001      	beq.n	80272e2 <dir_next+0xf2>
 80272de:	2301      	movs	r3, #1
 80272e0:	e047      	b.n	8027372 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80272e2:	68fb      	ldr	r3, [r7, #12]
 80272e4:	3330      	adds	r3, #48	@ 0x30
 80272e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80272ea:	2100      	movs	r1, #0
 80272ec:	4618      	mov	r0, r3
 80272ee:	f7ff f97a 	bl	80265e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80272f2:	2300      	movs	r3, #0
 80272f4:	613b      	str	r3, [r7, #16]
 80272f6:	6979      	ldr	r1, [r7, #20]
 80272f8:	68f8      	ldr	r0, [r7, #12]
 80272fa:	f7ff fc1d 	bl	8026b38 <clust2sect>
 80272fe:	4602      	mov	r2, r0
 8027300:	68fb      	ldr	r3, [r7, #12]
 8027302:	62da      	str	r2, [r3, #44]	@ 0x2c
 8027304:	e012      	b.n	802732c <dir_next+0x13c>
						fs->wflag = 1;
 8027306:	68fb      	ldr	r3, [r7, #12]
 8027308:	2201      	movs	r2, #1
 802730a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 802730c:	68f8      	ldr	r0, [r7, #12]
 802730e:	f7ff fb33 	bl	8026978 <sync_window>
 8027312:	4603      	mov	r3, r0
 8027314:	2b00      	cmp	r3, #0
 8027316:	d001      	beq.n	802731c <dir_next+0x12c>
 8027318:	2301      	movs	r3, #1
 802731a:	e02a      	b.n	8027372 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802731c:	693b      	ldr	r3, [r7, #16]
 802731e:	3301      	adds	r3, #1
 8027320:	613b      	str	r3, [r7, #16]
 8027322:	68fb      	ldr	r3, [r7, #12]
 8027324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027326:	1c5a      	adds	r2, r3, #1
 8027328:	68fb      	ldr	r3, [r7, #12]
 802732a:	62da      	str	r2, [r3, #44]	@ 0x2c
 802732c:	68fb      	ldr	r3, [r7, #12]
 802732e:	895b      	ldrh	r3, [r3, #10]
 8027330:	461a      	mov	r2, r3
 8027332:	693b      	ldr	r3, [r7, #16]
 8027334:	4293      	cmp	r3, r2
 8027336:	d3e6      	bcc.n	8027306 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8027338:	68fb      	ldr	r3, [r7, #12]
 802733a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802733c:	693b      	ldr	r3, [r7, #16]
 802733e:	1ad2      	subs	r2, r2, r3
 8027340:	68fb      	ldr	r3, [r7, #12]
 8027342:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8027344:	687b      	ldr	r3, [r7, #4]
 8027346:	697a      	ldr	r2, [r7, #20]
 8027348:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 802734a:	6979      	ldr	r1, [r7, #20]
 802734c:	68f8      	ldr	r0, [r7, #12]
 802734e:	f7ff fbf3 	bl	8026b38 <clust2sect>
 8027352:	4602      	mov	r2, r0
 8027354:	687b      	ldr	r3, [r7, #4]
 8027356:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	68ba      	ldr	r2, [r7, #8]
 802735c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 802735e:	68fb      	ldr	r3, [r7, #12]
 8027360:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027364:	68bb      	ldr	r3, [r7, #8]
 8027366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802736a:	441a      	add	r2, r3
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8027370:	2300      	movs	r3, #0
}
 8027372:	4618      	mov	r0, r3
 8027374:	3718      	adds	r7, #24
 8027376:	46bd      	mov	sp, r7
 8027378:	bd80      	pop	{r7, pc}

0802737a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 802737a:	b580      	push	{r7, lr}
 802737c:	b086      	sub	sp, #24
 802737e:	af00      	add	r7, sp, #0
 8027380:	6078      	str	r0, [r7, #4]
 8027382:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8027384:	687b      	ldr	r3, [r7, #4]
 8027386:	681b      	ldr	r3, [r3, #0]
 8027388:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 802738a:	2100      	movs	r1, #0
 802738c:	6878      	ldr	r0, [r7, #4]
 802738e:	f7ff feb4 	bl	80270fa <dir_sdi>
 8027392:	4603      	mov	r3, r0
 8027394:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8027396:	7dfb      	ldrb	r3, [r7, #23]
 8027398:	2b00      	cmp	r3, #0
 802739a:	d12b      	bne.n	80273f4 <dir_alloc+0x7a>
		n = 0;
 802739c:	2300      	movs	r3, #0
 802739e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	69db      	ldr	r3, [r3, #28]
 80273a4:	4619      	mov	r1, r3
 80273a6:	68f8      	ldr	r0, [r7, #12]
 80273a8:	f7ff fb2a 	bl	8026a00 <move_window>
 80273ac:	4603      	mov	r3, r0
 80273ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80273b0:	7dfb      	ldrb	r3, [r7, #23]
 80273b2:	2b00      	cmp	r3, #0
 80273b4:	d11d      	bne.n	80273f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	6a1b      	ldr	r3, [r3, #32]
 80273ba:	781b      	ldrb	r3, [r3, #0]
 80273bc:	2be5      	cmp	r3, #229	@ 0xe5
 80273be:	d004      	beq.n	80273ca <dir_alloc+0x50>
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	6a1b      	ldr	r3, [r3, #32]
 80273c4:	781b      	ldrb	r3, [r3, #0]
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	d107      	bne.n	80273da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80273ca:	693b      	ldr	r3, [r7, #16]
 80273cc:	3301      	adds	r3, #1
 80273ce:	613b      	str	r3, [r7, #16]
 80273d0:	693a      	ldr	r2, [r7, #16]
 80273d2:	683b      	ldr	r3, [r7, #0]
 80273d4:	429a      	cmp	r2, r3
 80273d6:	d102      	bne.n	80273de <dir_alloc+0x64>
 80273d8:	e00c      	b.n	80273f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80273da:	2300      	movs	r3, #0
 80273dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80273de:	2101      	movs	r1, #1
 80273e0:	6878      	ldr	r0, [r7, #4]
 80273e2:	f7ff ff05 	bl	80271f0 <dir_next>
 80273e6:	4603      	mov	r3, r0
 80273e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80273ea:	7dfb      	ldrb	r3, [r7, #23]
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	d0d7      	beq.n	80273a0 <dir_alloc+0x26>
 80273f0:	e000      	b.n	80273f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80273f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80273f4:	7dfb      	ldrb	r3, [r7, #23]
 80273f6:	2b04      	cmp	r3, #4
 80273f8:	d101      	bne.n	80273fe <dir_alloc+0x84>
 80273fa:	2307      	movs	r3, #7
 80273fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80273fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8027400:	4618      	mov	r0, r3
 8027402:	3718      	adds	r7, #24
 8027404:	46bd      	mov	sp, r7
 8027406:	bd80      	pop	{r7, pc}

08027408 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8027408:	b580      	push	{r7, lr}
 802740a:	b084      	sub	sp, #16
 802740c:	af00      	add	r7, sp, #0
 802740e:	6078      	str	r0, [r7, #4]
 8027410:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8027412:	683b      	ldr	r3, [r7, #0]
 8027414:	331a      	adds	r3, #26
 8027416:	4618      	mov	r0, r3
 8027418:	f7ff f842 	bl	80264a0 <ld_word>
 802741c:	4603      	mov	r3, r0
 802741e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	781b      	ldrb	r3, [r3, #0]
 8027424:	2b03      	cmp	r3, #3
 8027426:	d109      	bne.n	802743c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8027428:	683b      	ldr	r3, [r7, #0]
 802742a:	3314      	adds	r3, #20
 802742c:	4618      	mov	r0, r3
 802742e:	f7ff f837 	bl	80264a0 <ld_word>
 8027432:	4603      	mov	r3, r0
 8027434:	041b      	lsls	r3, r3, #16
 8027436:	68fa      	ldr	r2, [r7, #12]
 8027438:	4313      	orrs	r3, r2
 802743a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 802743c:	68fb      	ldr	r3, [r7, #12]
}
 802743e:	4618      	mov	r0, r3
 8027440:	3710      	adds	r7, #16
 8027442:	46bd      	mov	sp, r7
 8027444:	bd80      	pop	{r7, pc}

08027446 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8027446:	b580      	push	{r7, lr}
 8027448:	b084      	sub	sp, #16
 802744a:	af00      	add	r7, sp, #0
 802744c:	60f8      	str	r0, [r7, #12]
 802744e:	60b9      	str	r1, [r7, #8]
 8027450:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8027452:	68bb      	ldr	r3, [r7, #8]
 8027454:	331a      	adds	r3, #26
 8027456:	687a      	ldr	r2, [r7, #4]
 8027458:	b292      	uxth	r2, r2
 802745a:	4611      	mov	r1, r2
 802745c:	4618      	mov	r0, r3
 802745e:	f7ff f85a 	bl	8026516 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8027462:	68fb      	ldr	r3, [r7, #12]
 8027464:	781b      	ldrb	r3, [r3, #0]
 8027466:	2b03      	cmp	r3, #3
 8027468:	d109      	bne.n	802747e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 802746a:	68bb      	ldr	r3, [r7, #8]
 802746c:	f103 0214 	add.w	r2, r3, #20
 8027470:	687b      	ldr	r3, [r7, #4]
 8027472:	0c1b      	lsrs	r3, r3, #16
 8027474:	b29b      	uxth	r3, r3
 8027476:	4619      	mov	r1, r3
 8027478:	4610      	mov	r0, r2
 802747a:	f7ff f84c 	bl	8026516 <st_word>
	}
}
 802747e:	bf00      	nop
 8027480:	3710      	adds	r7, #16
 8027482:	46bd      	mov	sp, r7
 8027484:	bd80      	pop	{r7, pc}

08027486 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8027486:	b580      	push	{r7, lr}
 8027488:	b086      	sub	sp, #24
 802748a:	af00      	add	r7, sp, #0
 802748c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 802748e:	687b      	ldr	r3, [r7, #4]
 8027490:	681b      	ldr	r3, [r3, #0]
 8027492:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8027494:	2100      	movs	r1, #0
 8027496:	6878      	ldr	r0, [r7, #4]
 8027498:	f7ff fe2f 	bl	80270fa <dir_sdi>
 802749c:	4603      	mov	r3, r0
 802749e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80274a0:	7dfb      	ldrb	r3, [r7, #23]
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	d001      	beq.n	80274aa <dir_find+0x24>
 80274a6:	7dfb      	ldrb	r3, [r7, #23]
 80274a8:	e03e      	b.n	8027528 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80274aa:	687b      	ldr	r3, [r7, #4]
 80274ac:	69db      	ldr	r3, [r3, #28]
 80274ae:	4619      	mov	r1, r3
 80274b0:	6938      	ldr	r0, [r7, #16]
 80274b2:	f7ff faa5 	bl	8026a00 <move_window>
 80274b6:	4603      	mov	r3, r0
 80274b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80274ba:	7dfb      	ldrb	r3, [r7, #23]
 80274bc:	2b00      	cmp	r3, #0
 80274be:	d12f      	bne.n	8027520 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80274c0:	687b      	ldr	r3, [r7, #4]
 80274c2:	6a1b      	ldr	r3, [r3, #32]
 80274c4:	781b      	ldrb	r3, [r3, #0]
 80274c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80274c8:	7bfb      	ldrb	r3, [r7, #15]
 80274ca:	2b00      	cmp	r3, #0
 80274cc:	d102      	bne.n	80274d4 <dir_find+0x4e>
 80274ce:	2304      	movs	r3, #4
 80274d0:	75fb      	strb	r3, [r7, #23]
 80274d2:	e028      	b.n	8027526 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80274d4:	687b      	ldr	r3, [r7, #4]
 80274d6:	6a1b      	ldr	r3, [r3, #32]
 80274d8:	330b      	adds	r3, #11
 80274da:	781b      	ldrb	r3, [r3, #0]
 80274dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80274e0:	b2da      	uxtb	r2, r3
 80274e2:	687b      	ldr	r3, [r7, #4]
 80274e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80274e6:	687b      	ldr	r3, [r7, #4]
 80274e8:	6a1b      	ldr	r3, [r3, #32]
 80274ea:	330b      	adds	r3, #11
 80274ec:	781b      	ldrb	r3, [r3, #0]
 80274ee:	f003 0308 	and.w	r3, r3, #8
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	d10a      	bne.n	802750c <dir_find+0x86>
 80274f6:	687b      	ldr	r3, [r7, #4]
 80274f8:	6a18      	ldr	r0, [r3, #32]
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	3324      	adds	r3, #36	@ 0x24
 80274fe:	220b      	movs	r2, #11
 8027500:	4619      	mov	r1, r3
 8027502:	f7ff f88b 	bl	802661c <mem_cmp>
 8027506:	4603      	mov	r3, r0
 8027508:	2b00      	cmp	r3, #0
 802750a:	d00b      	beq.n	8027524 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 802750c:	2100      	movs	r1, #0
 802750e:	6878      	ldr	r0, [r7, #4]
 8027510:	f7ff fe6e 	bl	80271f0 <dir_next>
 8027514:	4603      	mov	r3, r0
 8027516:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8027518:	7dfb      	ldrb	r3, [r7, #23]
 802751a:	2b00      	cmp	r3, #0
 802751c:	d0c5      	beq.n	80274aa <dir_find+0x24>
 802751e:	e002      	b.n	8027526 <dir_find+0xa0>
		if (res != FR_OK) break;
 8027520:	bf00      	nop
 8027522:	e000      	b.n	8027526 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8027524:	bf00      	nop

	return res;
 8027526:	7dfb      	ldrb	r3, [r7, #23]
}
 8027528:	4618      	mov	r0, r3
 802752a:	3718      	adds	r7, #24
 802752c:	46bd      	mov	sp, r7
 802752e:	bd80      	pop	{r7, pc}

08027530 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8027530:	b580      	push	{r7, lr}
 8027532:	b084      	sub	sp, #16
 8027534:	af00      	add	r7, sp, #0
 8027536:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	681b      	ldr	r3, [r3, #0]
 802753c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 802753e:	2101      	movs	r1, #1
 8027540:	6878      	ldr	r0, [r7, #4]
 8027542:	f7ff ff1a 	bl	802737a <dir_alloc>
 8027546:	4603      	mov	r3, r0
 8027548:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 802754a:	7bfb      	ldrb	r3, [r7, #15]
 802754c:	2b00      	cmp	r3, #0
 802754e:	d11c      	bne.n	802758a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8027550:	687b      	ldr	r3, [r7, #4]
 8027552:	69db      	ldr	r3, [r3, #28]
 8027554:	4619      	mov	r1, r3
 8027556:	68b8      	ldr	r0, [r7, #8]
 8027558:	f7ff fa52 	bl	8026a00 <move_window>
 802755c:	4603      	mov	r3, r0
 802755e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8027560:	7bfb      	ldrb	r3, [r7, #15]
 8027562:	2b00      	cmp	r3, #0
 8027564:	d111      	bne.n	802758a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8027566:	687b      	ldr	r3, [r7, #4]
 8027568:	6a1b      	ldr	r3, [r3, #32]
 802756a:	2220      	movs	r2, #32
 802756c:	2100      	movs	r1, #0
 802756e:	4618      	mov	r0, r3
 8027570:	f7ff f839 	bl	80265e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	6a18      	ldr	r0, [r3, #32]
 8027578:	687b      	ldr	r3, [r7, #4]
 802757a:	3324      	adds	r3, #36	@ 0x24
 802757c:	220b      	movs	r2, #11
 802757e:	4619      	mov	r1, r3
 8027580:	f7ff f810 	bl	80265a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8027584:	68bb      	ldr	r3, [r7, #8]
 8027586:	2201      	movs	r2, #1
 8027588:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 802758a:	7bfb      	ldrb	r3, [r7, #15]
}
 802758c:	4618      	mov	r0, r3
 802758e:	3710      	adds	r7, #16
 8027590:	46bd      	mov	sp, r7
 8027592:	bd80      	pop	{r7, pc}

08027594 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8027594:	b580      	push	{r7, lr}
 8027596:	b088      	sub	sp, #32
 8027598:	af00      	add	r7, sp, #0
 802759a:	6078      	str	r0, [r7, #4]
 802759c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 802759e:	683b      	ldr	r3, [r7, #0]
 80275a0:	681b      	ldr	r3, [r3, #0]
 80275a2:	60fb      	str	r3, [r7, #12]
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	3324      	adds	r3, #36	@ 0x24
 80275a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80275aa:	220b      	movs	r2, #11
 80275ac:	2120      	movs	r1, #32
 80275ae:	68b8      	ldr	r0, [r7, #8]
 80275b0:	f7ff f819 	bl	80265e6 <mem_set>
	si = i = 0; ni = 8;
 80275b4:	2300      	movs	r3, #0
 80275b6:	613b      	str	r3, [r7, #16]
 80275b8:	693b      	ldr	r3, [r7, #16]
 80275ba:	61fb      	str	r3, [r7, #28]
 80275bc:	2308      	movs	r3, #8
 80275be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80275c0:	69fb      	ldr	r3, [r7, #28]
 80275c2:	1c5a      	adds	r2, r3, #1
 80275c4:	61fa      	str	r2, [r7, #28]
 80275c6:	68fa      	ldr	r2, [r7, #12]
 80275c8:	4413      	add	r3, r2
 80275ca:	781b      	ldrb	r3, [r3, #0]
 80275cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80275ce:	7efb      	ldrb	r3, [r7, #27]
 80275d0:	2b20      	cmp	r3, #32
 80275d2:	d94e      	bls.n	8027672 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80275d4:	7efb      	ldrb	r3, [r7, #27]
 80275d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80275d8:	d006      	beq.n	80275e8 <create_name+0x54>
 80275da:	7efb      	ldrb	r3, [r7, #27]
 80275dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80275de:	d110      	bne.n	8027602 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80275e0:	e002      	b.n	80275e8 <create_name+0x54>
 80275e2:	69fb      	ldr	r3, [r7, #28]
 80275e4:	3301      	adds	r3, #1
 80275e6:	61fb      	str	r3, [r7, #28]
 80275e8:	68fa      	ldr	r2, [r7, #12]
 80275ea:	69fb      	ldr	r3, [r7, #28]
 80275ec:	4413      	add	r3, r2
 80275ee:	781b      	ldrb	r3, [r3, #0]
 80275f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80275f2:	d0f6      	beq.n	80275e2 <create_name+0x4e>
 80275f4:	68fa      	ldr	r2, [r7, #12]
 80275f6:	69fb      	ldr	r3, [r7, #28]
 80275f8:	4413      	add	r3, r2
 80275fa:	781b      	ldrb	r3, [r3, #0]
 80275fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80275fe:	d0f0      	beq.n	80275e2 <create_name+0x4e>
			break;
 8027600:	e038      	b.n	8027674 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8027602:	7efb      	ldrb	r3, [r7, #27]
 8027604:	2b2e      	cmp	r3, #46	@ 0x2e
 8027606:	d003      	beq.n	8027610 <create_name+0x7c>
 8027608:	693a      	ldr	r2, [r7, #16]
 802760a:	697b      	ldr	r3, [r7, #20]
 802760c:	429a      	cmp	r2, r3
 802760e:	d30c      	bcc.n	802762a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8027610:	697b      	ldr	r3, [r7, #20]
 8027612:	2b0b      	cmp	r3, #11
 8027614:	d002      	beq.n	802761c <create_name+0x88>
 8027616:	7efb      	ldrb	r3, [r7, #27]
 8027618:	2b2e      	cmp	r3, #46	@ 0x2e
 802761a:	d001      	beq.n	8027620 <create_name+0x8c>
 802761c:	2306      	movs	r3, #6
 802761e:	e044      	b.n	80276aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8027620:	2308      	movs	r3, #8
 8027622:	613b      	str	r3, [r7, #16]
 8027624:	230b      	movs	r3, #11
 8027626:	617b      	str	r3, [r7, #20]
			continue;
 8027628:	e022      	b.n	8027670 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 802762a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802762e:	2b00      	cmp	r3, #0
 8027630:	da04      	bge.n	802763c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8027632:	7efb      	ldrb	r3, [r7, #27]
 8027634:	3b80      	subs	r3, #128	@ 0x80
 8027636:	4a1f      	ldr	r2, [pc, #124]	@ (80276b4 <create_name+0x120>)
 8027638:	5cd3      	ldrb	r3, [r2, r3]
 802763a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 802763c:	7efb      	ldrb	r3, [r7, #27]
 802763e:	4619      	mov	r1, r3
 8027640:	481d      	ldr	r0, [pc, #116]	@ (80276b8 <create_name+0x124>)
 8027642:	f7ff f812 	bl	802666a <chk_chr>
 8027646:	4603      	mov	r3, r0
 8027648:	2b00      	cmp	r3, #0
 802764a:	d001      	beq.n	8027650 <create_name+0xbc>
 802764c:	2306      	movs	r3, #6
 802764e:	e02c      	b.n	80276aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8027650:	7efb      	ldrb	r3, [r7, #27]
 8027652:	2b60      	cmp	r3, #96	@ 0x60
 8027654:	d905      	bls.n	8027662 <create_name+0xce>
 8027656:	7efb      	ldrb	r3, [r7, #27]
 8027658:	2b7a      	cmp	r3, #122	@ 0x7a
 802765a:	d802      	bhi.n	8027662 <create_name+0xce>
 802765c:	7efb      	ldrb	r3, [r7, #27]
 802765e:	3b20      	subs	r3, #32
 8027660:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8027662:	693b      	ldr	r3, [r7, #16]
 8027664:	1c5a      	adds	r2, r3, #1
 8027666:	613a      	str	r2, [r7, #16]
 8027668:	68ba      	ldr	r2, [r7, #8]
 802766a:	4413      	add	r3, r2
 802766c:	7efa      	ldrb	r2, [r7, #27]
 802766e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8027670:	e7a6      	b.n	80275c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8027672:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8027674:	68fa      	ldr	r2, [r7, #12]
 8027676:	69fb      	ldr	r3, [r7, #28]
 8027678:	441a      	add	r2, r3
 802767a:	683b      	ldr	r3, [r7, #0]
 802767c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 802767e:	693b      	ldr	r3, [r7, #16]
 8027680:	2b00      	cmp	r3, #0
 8027682:	d101      	bne.n	8027688 <create_name+0xf4>
 8027684:	2306      	movs	r3, #6
 8027686:	e010      	b.n	80276aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8027688:	68bb      	ldr	r3, [r7, #8]
 802768a:	781b      	ldrb	r3, [r3, #0]
 802768c:	2be5      	cmp	r3, #229	@ 0xe5
 802768e:	d102      	bne.n	8027696 <create_name+0x102>
 8027690:	68bb      	ldr	r3, [r7, #8]
 8027692:	2205      	movs	r2, #5
 8027694:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8027696:	7efb      	ldrb	r3, [r7, #27]
 8027698:	2b20      	cmp	r3, #32
 802769a:	d801      	bhi.n	80276a0 <create_name+0x10c>
 802769c:	2204      	movs	r2, #4
 802769e:	e000      	b.n	80276a2 <create_name+0x10e>
 80276a0:	2200      	movs	r2, #0
 80276a2:	68bb      	ldr	r3, [r7, #8]
 80276a4:	330b      	adds	r3, #11
 80276a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80276a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80276aa:	4618      	mov	r0, r3
 80276ac:	3720      	adds	r7, #32
 80276ae:	46bd      	mov	sp, r7
 80276b0:	bd80      	pop	{r7, pc}
 80276b2:	bf00      	nop
 80276b4:	0802b744 	.word	0x0802b744
 80276b8:	0802b0f0 	.word	0x0802b0f0

080276bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80276bc:	b580      	push	{r7, lr}
 80276be:	b086      	sub	sp, #24
 80276c0:	af00      	add	r7, sp, #0
 80276c2:	6078      	str	r0, [r7, #4]
 80276c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80276c6:	687b      	ldr	r3, [r7, #4]
 80276c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80276ca:	693b      	ldr	r3, [r7, #16]
 80276cc:	681b      	ldr	r3, [r3, #0]
 80276ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80276d0:	e002      	b.n	80276d8 <follow_path+0x1c>
 80276d2:	683b      	ldr	r3, [r7, #0]
 80276d4:	3301      	adds	r3, #1
 80276d6:	603b      	str	r3, [r7, #0]
 80276d8:	683b      	ldr	r3, [r7, #0]
 80276da:	781b      	ldrb	r3, [r3, #0]
 80276dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80276de:	d0f8      	beq.n	80276d2 <follow_path+0x16>
 80276e0:	683b      	ldr	r3, [r7, #0]
 80276e2:	781b      	ldrb	r3, [r3, #0]
 80276e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80276e6:	d0f4      	beq.n	80276d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80276e8:	693b      	ldr	r3, [r7, #16]
 80276ea:	2200      	movs	r2, #0
 80276ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80276ee:	683b      	ldr	r3, [r7, #0]
 80276f0:	781b      	ldrb	r3, [r3, #0]
 80276f2:	2b1f      	cmp	r3, #31
 80276f4:	d80a      	bhi.n	802770c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80276f6:	687b      	ldr	r3, [r7, #4]
 80276f8:	2280      	movs	r2, #128	@ 0x80
 80276fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80276fe:	2100      	movs	r1, #0
 8027700:	6878      	ldr	r0, [r7, #4]
 8027702:	f7ff fcfa 	bl	80270fa <dir_sdi>
 8027706:	4603      	mov	r3, r0
 8027708:	75fb      	strb	r3, [r7, #23]
 802770a:	e043      	b.n	8027794 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802770c:	463b      	mov	r3, r7
 802770e:	4619      	mov	r1, r3
 8027710:	6878      	ldr	r0, [r7, #4]
 8027712:	f7ff ff3f 	bl	8027594 <create_name>
 8027716:	4603      	mov	r3, r0
 8027718:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802771a:	7dfb      	ldrb	r3, [r7, #23]
 802771c:	2b00      	cmp	r3, #0
 802771e:	d134      	bne.n	802778a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8027720:	6878      	ldr	r0, [r7, #4]
 8027722:	f7ff feb0 	bl	8027486 <dir_find>
 8027726:	4603      	mov	r3, r0
 8027728:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 802772a:	687b      	ldr	r3, [r7, #4]
 802772c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8027730:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8027732:	7dfb      	ldrb	r3, [r7, #23]
 8027734:	2b00      	cmp	r3, #0
 8027736:	d00a      	beq.n	802774e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8027738:	7dfb      	ldrb	r3, [r7, #23]
 802773a:	2b04      	cmp	r3, #4
 802773c:	d127      	bne.n	802778e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802773e:	7afb      	ldrb	r3, [r7, #11]
 8027740:	f003 0304 	and.w	r3, r3, #4
 8027744:	2b00      	cmp	r3, #0
 8027746:	d122      	bne.n	802778e <follow_path+0xd2>
 8027748:	2305      	movs	r3, #5
 802774a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 802774c:	e01f      	b.n	802778e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802774e:	7afb      	ldrb	r3, [r7, #11]
 8027750:	f003 0304 	and.w	r3, r3, #4
 8027754:	2b00      	cmp	r3, #0
 8027756:	d11c      	bne.n	8027792 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8027758:	693b      	ldr	r3, [r7, #16]
 802775a:	799b      	ldrb	r3, [r3, #6]
 802775c:	f003 0310 	and.w	r3, r3, #16
 8027760:	2b00      	cmp	r3, #0
 8027762:	d102      	bne.n	802776a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8027764:	2305      	movs	r3, #5
 8027766:	75fb      	strb	r3, [r7, #23]
 8027768:	e014      	b.n	8027794 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 802776a:	68fb      	ldr	r3, [r7, #12]
 802776c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027770:	687b      	ldr	r3, [r7, #4]
 8027772:	695b      	ldr	r3, [r3, #20]
 8027774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027778:	4413      	add	r3, r2
 802777a:	4619      	mov	r1, r3
 802777c:	68f8      	ldr	r0, [r7, #12]
 802777e:	f7ff fe43 	bl	8027408 <ld_clust>
 8027782:	4602      	mov	r2, r0
 8027784:	693b      	ldr	r3, [r7, #16]
 8027786:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8027788:	e7c0      	b.n	802770c <follow_path+0x50>
			if (res != FR_OK) break;
 802778a:	bf00      	nop
 802778c:	e002      	b.n	8027794 <follow_path+0xd8>
				break;
 802778e:	bf00      	nop
 8027790:	e000      	b.n	8027794 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8027792:	bf00      	nop
			}
		}
	}

	return res;
 8027794:	7dfb      	ldrb	r3, [r7, #23]
}
 8027796:	4618      	mov	r0, r3
 8027798:	3718      	adds	r7, #24
 802779a:	46bd      	mov	sp, r7
 802779c:	bd80      	pop	{r7, pc}

0802779e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 802779e:	b480      	push	{r7}
 80277a0:	b087      	sub	sp, #28
 80277a2:	af00      	add	r7, sp, #0
 80277a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80277a6:	f04f 33ff 	mov.w	r3, #4294967295
 80277aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80277ac:	687b      	ldr	r3, [r7, #4]
 80277ae:	681b      	ldr	r3, [r3, #0]
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	d031      	beq.n	8027818 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80277b4:	687b      	ldr	r3, [r7, #4]
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	617b      	str	r3, [r7, #20]
 80277ba:	e002      	b.n	80277c2 <get_ldnumber+0x24>
 80277bc:	697b      	ldr	r3, [r7, #20]
 80277be:	3301      	adds	r3, #1
 80277c0:	617b      	str	r3, [r7, #20]
 80277c2:	697b      	ldr	r3, [r7, #20]
 80277c4:	781b      	ldrb	r3, [r3, #0]
 80277c6:	2b20      	cmp	r3, #32
 80277c8:	d903      	bls.n	80277d2 <get_ldnumber+0x34>
 80277ca:	697b      	ldr	r3, [r7, #20]
 80277cc:	781b      	ldrb	r3, [r3, #0]
 80277ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80277d0:	d1f4      	bne.n	80277bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80277d2:	697b      	ldr	r3, [r7, #20]
 80277d4:	781b      	ldrb	r3, [r3, #0]
 80277d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80277d8:	d11c      	bne.n	8027814 <get_ldnumber+0x76>
			tp = *path;
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	681b      	ldr	r3, [r3, #0]
 80277de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80277e0:	68fb      	ldr	r3, [r7, #12]
 80277e2:	1c5a      	adds	r2, r3, #1
 80277e4:	60fa      	str	r2, [r7, #12]
 80277e6:	781b      	ldrb	r3, [r3, #0]
 80277e8:	3b30      	subs	r3, #48	@ 0x30
 80277ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80277ec:	68bb      	ldr	r3, [r7, #8]
 80277ee:	2b09      	cmp	r3, #9
 80277f0:	d80e      	bhi.n	8027810 <get_ldnumber+0x72>
 80277f2:	68fa      	ldr	r2, [r7, #12]
 80277f4:	697b      	ldr	r3, [r7, #20]
 80277f6:	429a      	cmp	r2, r3
 80277f8:	d10a      	bne.n	8027810 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80277fa:	68bb      	ldr	r3, [r7, #8]
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	d107      	bne.n	8027810 <get_ldnumber+0x72>
					vol = (int)i;
 8027800:	68bb      	ldr	r3, [r7, #8]
 8027802:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8027804:	697b      	ldr	r3, [r7, #20]
 8027806:	3301      	adds	r3, #1
 8027808:	617b      	str	r3, [r7, #20]
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	697a      	ldr	r2, [r7, #20]
 802780e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8027810:	693b      	ldr	r3, [r7, #16]
 8027812:	e002      	b.n	802781a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8027814:	2300      	movs	r3, #0
 8027816:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8027818:	693b      	ldr	r3, [r7, #16]
}
 802781a:	4618      	mov	r0, r3
 802781c:	371c      	adds	r7, #28
 802781e:	46bd      	mov	sp, r7
 8027820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027824:	4770      	bx	lr
	...

08027828 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8027828:	b580      	push	{r7, lr}
 802782a:	b082      	sub	sp, #8
 802782c:	af00      	add	r7, sp, #0
 802782e:	6078      	str	r0, [r7, #4]
 8027830:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8027832:	687b      	ldr	r3, [r7, #4]
 8027834:	2200      	movs	r2, #0
 8027836:	70da      	strb	r2, [r3, #3]
 8027838:	687b      	ldr	r3, [r7, #4]
 802783a:	f04f 32ff 	mov.w	r2, #4294967295
 802783e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8027840:	6839      	ldr	r1, [r7, #0]
 8027842:	6878      	ldr	r0, [r7, #4]
 8027844:	f7ff f8dc 	bl	8026a00 <move_window>
 8027848:	4603      	mov	r3, r0
 802784a:	2b00      	cmp	r3, #0
 802784c:	d001      	beq.n	8027852 <check_fs+0x2a>
 802784e:	2304      	movs	r3, #4
 8027850:	e038      	b.n	80278c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	3330      	adds	r3, #48	@ 0x30
 8027856:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802785a:	4618      	mov	r0, r3
 802785c:	f7fe fe20 	bl	80264a0 <ld_word>
 8027860:	4603      	mov	r3, r0
 8027862:	461a      	mov	r2, r3
 8027864:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027868:	429a      	cmp	r2, r3
 802786a:	d001      	beq.n	8027870 <check_fs+0x48>
 802786c:	2303      	movs	r3, #3
 802786e:	e029      	b.n	80278c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8027870:	687b      	ldr	r3, [r7, #4]
 8027872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8027876:	2be9      	cmp	r3, #233	@ 0xe9
 8027878:	d009      	beq.n	802788e <check_fs+0x66>
 802787a:	687b      	ldr	r3, [r7, #4]
 802787c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8027880:	2beb      	cmp	r3, #235	@ 0xeb
 8027882:	d11e      	bne.n	80278c2 <check_fs+0x9a>
 8027884:	687b      	ldr	r3, [r7, #4]
 8027886:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 802788a:	2b90      	cmp	r3, #144	@ 0x90
 802788c:	d119      	bne.n	80278c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802788e:	687b      	ldr	r3, [r7, #4]
 8027890:	3330      	adds	r3, #48	@ 0x30
 8027892:	3336      	adds	r3, #54	@ 0x36
 8027894:	4618      	mov	r0, r3
 8027896:	f7fe fe1b 	bl	80264d0 <ld_dword>
 802789a:	4603      	mov	r3, r0
 802789c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80278a0:	4a0a      	ldr	r2, [pc, #40]	@ (80278cc <check_fs+0xa4>)
 80278a2:	4293      	cmp	r3, r2
 80278a4:	d101      	bne.n	80278aa <check_fs+0x82>
 80278a6:	2300      	movs	r3, #0
 80278a8:	e00c      	b.n	80278c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	3330      	adds	r3, #48	@ 0x30
 80278ae:	3352      	adds	r3, #82	@ 0x52
 80278b0:	4618      	mov	r0, r3
 80278b2:	f7fe fe0d 	bl	80264d0 <ld_dword>
 80278b6:	4603      	mov	r3, r0
 80278b8:	4a05      	ldr	r2, [pc, #20]	@ (80278d0 <check_fs+0xa8>)
 80278ba:	4293      	cmp	r3, r2
 80278bc:	d101      	bne.n	80278c2 <check_fs+0x9a>
 80278be:	2300      	movs	r3, #0
 80278c0:	e000      	b.n	80278c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80278c2:	2302      	movs	r3, #2
}
 80278c4:	4618      	mov	r0, r3
 80278c6:	3708      	adds	r7, #8
 80278c8:	46bd      	mov	sp, r7
 80278ca:	bd80      	pop	{r7, pc}
 80278cc:	00544146 	.word	0x00544146
 80278d0:	33544146 	.word	0x33544146

080278d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80278d4:	b580      	push	{r7, lr}
 80278d6:	b096      	sub	sp, #88	@ 0x58
 80278d8:	af00      	add	r7, sp, #0
 80278da:	60f8      	str	r0, [r7, #12]
 80278dc:	60b9      	str	r1, [r7, #8]
 80278de:	4613      	mov	r3, r2
 80278e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80278e2:	68bb      	ldr	r3, [r7, #8]
 80278e4:	2200      	movs	r2, #0
 80278e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80278e8:	68f8      	ldr	r0, [r7, #12]
 80278ea:	f7ff ff58 	bl	802779e <get_ldnumber>
 80278ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80278f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	da01      	bge.n	80278fa <find_volume+0x26>
 80278f6:	230b      	movs	r3, #11
 80278f8:	e22d      	b.n	8027d56 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80278fa:	4aa1      	ldr	r2, [pc, #644]	@ (8027b80 <find_volume+0x2ac>)
 80278fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80278fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027902:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8027904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027906:	2b00      	cmp	r3, #0
 8027908:	d101      	bne.n	802790e <find_volume+0x3a>
 802790a:	230c      	movs	r3, #12
 802790c:	e223      	b.n	8027d56 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802790e:	68bb      	ldr	r3, [r7, #8]
 8027910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027912:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8027914:	79fb      	ldrb	r3, [r7, #7]
 8027916:	f023 0301 	bic.w	r3, r3, #1
 802791a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 802791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802791e:	781b      	ldrb	r3, [r3, #0]
 8027920:	2b00      	cmp	r3, #0
 8027922:	d01a      	beq.n	802795a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8027924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027926:	785b      	ldrb	r3, [r3, #1]
 8027928:	4618      	mov	r0, r3
 802792a:	f7fe fd19 	bl	8026360 <disk_status>
 802792e:	4603      	mov	r3, r0
 8027930:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8027934:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027938:	f003 0301 	and.w	r3, r3, #1
 802793c:	2b00      	cmp	r3, #0
 802793e:	d10c      	bne.n	802795a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8027940:	79fb      	ldrb	r3, [r7, #7]
 8027942:	2b00      	cmp	r3, #0
 8027944:	d007      	beq.n	8027956 <find_volume+0x82>
 8027946:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802794a:	f003 0304 	and.w	r3, r3, #4
 802794e:	2b00      	cmp	r3, #0
 8027950:	d001      	beq.n	8027956 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8027952:	230a      	movs	r3, #10
 8027954:	e1ff      	b.n	8027d56 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8027956:	2300      	movs	r3, #0
 8027958:	e1fd      	b.n	8027d56 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 802795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802795c:	2200      	movs	r2, #0
 802795e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8027960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027962:	b2da      	uxtb	r2, r3
 8027964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027966:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8027968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802796a:	785b      	ldrb	r3, [r3, #1]
 802796c:	4618      	mov	r0, r3
 802796e:	f7fe fd11 	bl	8026394 <disk_initialize>
 8027972:	4603      	mov	r3, r0
 8027974:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8027978:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802797c:	f003 0301 	and.w	r3, r3, #1
 8027980:	2b00      	cmp	r3, #0
 8027982:	d001      	beq.n	8027988 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8027984:	2303      	movs	r3, #3
 8027986:	e1e6      	b.n	8027d56 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8027988:	79fb      	ldrb	r3, [r7, #7]
 802798a:	2b00      	cmp	r3, #0
 802798c:	d007      	beq.n	802799e <find_volume+0xca>
 802798e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027992:	f003 0304 	and.w	r3, r3, #4
 8027996:	2b00      	cmp	r3, #0
 8027998:	d001      	beq.n	802799e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802799a:	230a      	movs	r3, #10
 802799c:	e1db      	b.n	8027d56 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802799e:	2300      	movs	r3, #0
 80279a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80279a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80279a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80279a6:	f7ff ff3f 	bl	8027828 <check_fs>
 80279aa:	4603      	mov	r3, r0
 80279ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80279b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80279b4:	2b02      	cmp	r3, #2
 80279b6:	d149      	bne.n	8027a4c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80279b8:	2300      	movs	r3, #0
 80279ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80279bc:	e01e      	b.n	80279fc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80279be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80279c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80279c6:	011b      	lsls	r3, r3, #4
 80279c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80279cc:	4413      	add	r3, r2
 80279ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80279d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279d2:	3304      	adds	r3, #4
 80279d4:	781b      	ldrb	r3, [r3, #0]
 80279d6:	2b00      	cmp	r3, #0
 80279d8:	d006      	beq.n	80279e8 <find_volume+0x114>
 80279da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80279dc:	3308      	adds	r3, #8
 80279de:	4618      	mov	r0, r3
 80279e0:	f7fe fd76 	bl	80264d0 <ld_dword>
 80279e4:	4602      	mov	r2, r0
 80279e6:	e000      	b.n	80279ea <find_volume+0x116>
 80279e8:	2200      	movs	r2, #0
 80279ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80279ec:	009b      	lsls	r3, r3, #2
 80279ee:	3358      	adds	r3, #88	@ 0x58
 80279f0:	443b      	add	r3, r7
 80279f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80279f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80279f8:	3301      	adds	r3, #1
 80279fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80279fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80279fe:	2b03      	cmp	r3, #3
 8027a00:	d9dd      	bls.n	80279be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8027a02:	2300      	movs	r3, #0
 8027a04:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8027a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a08:	2b00      	cmp	r3, #0
 8027a0a:	d002      	beq.n	8027a12 <find_volume+0x13e>
 8027a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a0e:	3b01      	subs	r3, #1
 8027a10:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8027a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a14:	009b      	lsls	r3, r3, #2
 8027a16:	3358      	adds	r3, #88	@ 0x58
 8027a18:	443b      	add	r3, r7
 8027a1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8027a1e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8027a20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d005      	beq.n	8027a32 <find_volume+0x15e>
 8027a26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027a28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027a2a:	f7ff fefd 	bl	8027828 <check_fs>
 8027a2e:	4603      	mov	r3, r0
 8027a30:	e000      	b.n	8027a34 <find_volume+0x160>
 8027a32:	2303      	movs	r3, #3
 8027a34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8027a38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027a3c:	2b01      	cmp	r3, #1
 8027a3e:	d905      	bls.n	8027a4c <find_volume+0x178>
 8027a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a42:	3301      	adds	r3, #1
 8027a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8027a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a48:	2b03      	cmp	r3, #3
 8027a4a:	d9e2      	bls.n	8027a12 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8027a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027a50:	2b04      	cmp	r3, #4
 8027a52:	d101      	bne.n	8027a58 <find_volume+0x184>
 8027a54:	2301      	movs	r3, #1
 8027a56:	e17e      	b.n	8027d56 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8027a58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027a5c:	2b01      	cmp	r3, #1
 8027a5e:	d901      	bls.n	8027a64 <find_volume+0x190>
 8027a60:	230d      	movs	r3, #13
 8027a62:	e178      	b.n	8027d56 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8027a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a66:	3330      	adds	r3, #48	@ 0x30
 8027a68:	330b      	adds	r3, #11
 8027a6a:	4618      	mov	r0, r3
 8027a6c:	f7fe fd18 	bl	80264a0 <ld_word>
 8027a70:	4603      	mov	r3, r0
 8027a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027a76:	d001      	beq.n	8027a7c <find_volume+0x1a8>
 8027a78:	230d      	movs	r3, #13
 8027a7a:	e16c      	b.n	8027d56 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8027a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a7e:	3330      	adds	r3, #48	@ 0x30
 8027a80:	3316      	adds	r3, #22
 8027a82:	4618      	mov	r0, r3
 8027a84:	f7fe fd0c 	bl	80264a0 <ld_word>
 8027a88:	4603      	mov	r3, r0
 8027a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8027a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	d106      	bne.n	8027aa0 <find_volume+0x1cc>
 8027a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a94:	3330      	adds	r3, #48	@ 0x30
 8027a96:	3324      	adds	r3, #36	@ 0x24
 8027a98:	4618      	mov	r0, r3
 8027a9a:	f7fe fd19 	bl	80264d0 <ld_dword>
 8027a9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8027aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027aa4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8027aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aa8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8027aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8027ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ab2:	789b      	ldrb	r3, [r3, #2]
 8027ab4:	2b01      	cmp	r3, #1
 8027ab6:	d005      	beq.n	8027ac4 <find_volume+0x1f0>
 8027ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aba:	789b      	ldrb	r3, [r3, #2]
 8027abc:	2b02      	cmp	r3, #2
 8027abe:	d001      	beq.n	8027ac4 <find_volume+0x1f0>
 8027ac0:	230d      	movs	r3, #13
 8027ac2:	e148      	b.n	8027d56 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8027ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ac6:	789b      	ldrb	r3, [r3, #2]
 8027ac8:	461a      	mov	r2, r3
 8027aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027acc:	fb02 f303 	mul.w	r3, r2, r3
 8027ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8027ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027ad8:	461a      	mov	r2, r3
 8027ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027adc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8027ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ae0:	895b      	ldrh	r3, [r3, #10]
 8027ae2:	2b00      	cmp	r3, #0
 8027ae4:	d008      	beq.n	8027af8 <find_volume+0x224>
 8027ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ae8:	895b      	ldrh	r3, [r3, #10]
 8027aea:	461a      	mov	r2, r3
 8027aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aee:	895b      	ldrh	r3, [r3, #10]
 8027af0:	3b01      	subs	r3, #1
 8027af2:	4013      	ands	r3, r2
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d001      	beq.n	8027afc <find_volume+0x228>
 8027af8:	230d      	movs	r3, #13
 8027afa:	e12c      	b.n	8027d56 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8027afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027afe:	3330      	adds	r3, #48	@ 0x30
 8027b00:	3311      	adds	r3, #17
 8027b02:	4618      	mov	r0, r3
 8027b04:	f7fe fccc 	bl	80264a0 <ld_word>
 8027b08:	4603      	mov	r3, r0
 8027b0a:	461a      	mov	r2, r3
 8027b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8027b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b12:	891b      	ldrh	r3, [r3, #8]
 8027b14:	f003 030f 	and.w	r3, r3, #15
 8027b18:	b29b      	uxth	r3, r3
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	d001      	beq.n	8027b22 <find_volume+0x24e>
 8027b1e:	230d      	movs	r3, #13
 8027b20:	e119      	b.n	8027d56 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8027b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b24:	3330      	adds	r3, #48	@ 0x30
 8027b26:	3313      	adds	r3, #19
 8027b28:	4618      	mov	r0, r3
 8027b2a:	f7fe fcb9 	bl	80264a0 <ld_word>
 8027b2e:	4603      	mov	r3, r0
 8027b30:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8027b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027b34:	2b00      	cmp	r3, #0
 8027b36:	d106      	bne.n	8027b46 <find_volume+0x272>
 8027b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b3a:	3330      	adds	r3, #48	@ 0x30
 8027b3c:	3320      	adds	r3, #32
 8027b3e:	4618      	mov	r0, r3
 8027b40:	f7fe fcc6 	bl	80264d0 <ld_dword>
 8027b44:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8027b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b48:	3330      	adds	r3, #48	@ 0x30
 8027b4a:	330e      	adds	r3, #14
 8027b4c:	4618      	mov	r0, r3
 8027b4e:	f7fe fca7 	bl	80264a0 <ld_word>
 8027b52:	4603      	mov	r3, r0
 8027b54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8027b56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027b58:	2b00      	cmp	r3, #0
 8027b5a:	d101      	bne.n	8027b60 <find_volume+0x28c>
 8027b5c:	230d      	movs	r3, #13
 8027b5e:	e0fa      	b.n	8027d56 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8027b60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027b64:	4413      	add	r3, r2
 8027b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027b68:	8912      	ldrh	r2, [r2, #8]
 8027b6a:	0912      	lsrs	r2, r2, #4
 8027b6c:	b292      	uxth	r2, r2
 8027b6e:	4413      	add	r3, r2
 8027b70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8027b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b76:	429a      	cmp	r2, r3
 8027b78:	d204      	bcs.n	8027b84 <find_volume+0x2b0>
 8027b7a:	230d      	movs	r3, #13
 8027b7c:	e0eb      	b.n	8027d56 <find_volume+0x482>
 8027b7e:	bf00      	nop
 8027b80:	24000a8c 	.word	0x24000a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8027b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b88:	1ad3      	subs	r3, r2, r3
 8027b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027b8c:	8952      	ldrh	r2, [r2, #10]
 8027b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8027b92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8027b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d101      	bne.n	8027b9e <find_volume+0x2ca>
 8027b9a:	230d      	movs	r3, #13
 8027b9c:	e0db      	b.n	8027d56 <find_volume+0x482>
		fmt = FS_FAT32;
 8027b9e:	2303      	movs	r3, #3
 8027ba0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8027ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ba6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8027baa:	4293      	cmp	r3, r2
 8027bac:	d802      	bhi.n	8027bb4 <find_volume+0x2e0>
 8027bae:	2302      	movs	r3, #2
 8027bb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8027bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027bb6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8027bba:	4293      	cmp	r3, r2
 8027bbc:	d802      	bhi.n	8027bc4 <find_volume+0x2f0>
 8027bbe:	2301      	movs	r3, #1
 8027bc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8027bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027bc6:	1c9a      	adds	r2, r3, #2
 8027bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bca:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8027bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027bd0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8027bd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027bd6:	441a      	add	r2, r3
 8027bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bda:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8027bdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027be0:	441a      	add	r2, r3
 8027be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027be4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8027be6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027bea:	2b03      	cmp	r3, #3
 8027bec:	d11e      	bne.n	8027c2c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8027bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bf0:	3330      	adds	r3, #48	@ 0x30
 8027bf2:	332a      	adds	r3, #42	@ 0x2a
 8027bf4:	4618      	mov	r0, r3
 8027bf6:	f7fe fc53 	bl	80264a0 <ld_word>
 8027bfa:	4603      	mov	r3, r0
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	d001      	beq.n	8027c04 <find_volume+0x330>
 8027c00:	230d      	movs	r3, #13
 8027c02:	e0a8      	b.n	8027d56 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8027c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c06:	891b      	ldrh	r3, [r3, #8]
 8027c08:	2b00      	cmp	r3, #0
 8027c0a:	d001      	beq.n	8027c10 <find_volume+0x33c>
 8027c0c:	230d      	movs	r3, #13
 8027c0e:	e0a2      	b.n	8027d56 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8027c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c12:	3330      	adds	r3, #48	@ 0x30
 8027c14:	332c      	adds	r3, #44	@ 0x2c
 8027c16:	4618      	mov	r0, r3
 8027c18:	f7fe fc5a 	bl	80264d0 <ld_dword>
 8027c1c:	4602      	mov	r2, r0
 8027c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c20:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8027c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c24:	695b      	ldr	r3, [r3, #20]
 8027c26:	009b      	lsls	r3, r3, #2
 8027c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8027c2a:	e01f      	b.n	8027c6c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8027c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c2e:	891b      	ldrh	r3, [r3, #8]
 8027c30:	2b00      	cmp	r3, #0
 8027c32:	d101      	bne.n	8027c38 <find_volume+0x364>
 8027c34:	230d      	movs	r3, #13
 8027c36:	e08e      	b.n	8027d56 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8027c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c3a:	6a1a      	ldr	r2, [r3, #32]
 8027c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027c3e:	441a      	add	r2, r3
 8027c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c42:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8027c44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027c48:	2b02      	cmp	r3, #2
 8027c4a:	d103      	bne.n	8027c54 <find_volume+0x380>
 8027c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c4e:	695b      	ldr	r3, [r3, #20]
 8027c50:	005b      	lsls	r3, r3, #1
 8027c52:	e00a      	b.n	8027c6a <find_volume+0x396>
 8027c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c56:	695a      	ldr	r2, [r3, #20]
 8027c58:	4613      	mov	r3, r2
 8027c5a:	005b      	lsls	r3, r3, #1
 8027c5c:	4413      	add	r3, r2
 8027c5e:	085a      	lsrs	r2, r3, #1
 8027c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c62:	695b      	ldr	r3, [r3, #20]
 8027c64:	f003 0301 	and.w	r3, r3, #1
 8027c68:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8027c6a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8027c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c6e:	699a      	ldr	r2, [r3, #24]
 8027c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027c72:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8027c76:	0a5b      	lsrs	r3, r3, #9
 8027c78:	429a      	cmp	r2, r3
 8027c7a:	d201      	bcs.n	8027c80 <find_volume+0x3ac>
 8027c7c:	230d      	movs	r3, #13
 8027c7e:	e06a      	b.n	8027d56 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8027c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c82:	f04f 32ff 	mov.w	r2, #4294967295
 8027c86:	611a      	str	r2, [r3, #16]
 8027c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c8a:	691a      	ldr	r2, [r3, #16]
 8027c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c8e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8027c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c92:	2280      	movs	r2, #128	@ 0x80
 8027c94:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8027c96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027c9a:	2b03      	cmp	r3, #3
 8027c9c:	d149      	bne.n	8027d32 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8027c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ca0:	3330      	adds	r3, #48	@ 0x30
 8027ca2:	3330      	adds	r3, #48	@ 0x30
 8027ca4:	4618      	mov	r0, r3
 8027ca6:	f7fe fbfb 	bl	80264a0 <ld_word>
 8027caa:	4603      	mov	r3, r0
 8027cac:	2b01      	cmp	r3, #1
 8027cae:	d140      	bne.n	8027d32 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8027cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027cb2:	3301      	adds	r3, #1
 8027cb4:	4619      	mov	r1, r3
 8027cb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027cb8:	f7fe fea2 	bl	8026a00 <move_window>
 8027cbc:	4603      	mov	r3, r0
 8027cbe:	2b00      	cmp	r3, #0
 8027cc0:	d137      	bne.n	8027d32 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8027cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cc4:	2200      	movs	r2, #0
 8027cc6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8027cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cca:	3330      	adds	r3, #48	@ 0x30
 8027ccc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8027cd0:	4618      	mov	r0, r3
 8027cd2:	f7fe fbe5 	bl	80264a0 <ld_word>
 8027cd6:	4603      	mov	r3, r0
 8027cd8:	461a      	mov	r2, r3
 8027cda:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027cde:	429a      	cmp	r2, r3
 8027ce0:	d127      	bne.n	8027d32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8027ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ce4:	3330      	adds	r3, #48	@ 0x30
 8027ce6:	4618      	mov	r0, r3
 8027ce8:	f7fe fbf2 	bl	80264d0 <ld_dword>
 8027cec:	4603      	mov	r3, r0
 8027cee:	4a1c      	ldr	r2, [pc, #112]	@ (8027d60 <find_volume+0x48c>)
 8027cf0:	4293      	cmp	r3, r2
 8027cf2:	d11e      	bne.n	8027d32 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8027cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cf6:	3330      	adds	r3, #48	@ 0x30
 8027cf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8027cfc:	4618      	mov	r0, r3
 8027cfe:	f7fe fbe7 	bl	80264d0 <ld_dword>
 8027d02:	4603      	mov	r3, r0
 8027d04:	4a17      	ldr	r2, [pc, #92]	@ (8027d64 <find_volume+0x490>)
 8027d06:	4293      	cmp	r3, r2
 8027d08:	d113      	bne.n	8027d32 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8027d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d0c:	3330      	adds	r3, #48	@ 0x30
 8027d0e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8027d12:	4618      	mov	r0, r3
 8027d14:	f7fe fbdc 	bl	80264d0 <ld_dword>
 8027d18:	4602      	mov	r2, r0
 8027d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d1c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8027d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d20:	3330      	adds	r3, #48	@ 0x30
 8027d22:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8027d26:	4618      	mov	r0, r3
 8027d28:	f7fe fbd2 	bl	80264d0 <ld_dword>
 8027d2c:	4602      	mov	r2, r0
 8027d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d30:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8027d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d34:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8027d38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8027d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8027d68 <find_volume+0x494>)
 8027d3c:	881b      	ldrh	r3, [r3, #0]
 8027d3e:	3301      	adds	r3, #1
 8027d40:	b29a      	uxth	r2, r3
 8027d42:	4b09      	ldr	r3, [pc, #36]	@ (8027d68 <find_volume+0x494>)
 8027d44:	801a      	strh	r2, [r3, #0]
 8027d46:	4b08      	ldr	r3, [pc, #32]	@ (8027d68 <find_volume+0x494>)
 8027d48:	881a      	ldrh	r2, [r3, #0]
 8027d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8027d4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027d50:	f7fe fdee 	bl	8026930 <clear_lock>
#endif
	return FR_OK;
 8027d54:	2300      	movs	r3, #0
}
 8027d56:	4618      	mov	r0, r3
 8027d58:	3758      	adds	r7, #88	@ 0x58
 8027d5a:	46bd      	mov	sp, r7
 8027d5c:	bd80      	pop	{r7, pc}
 8027d5e:	bf00      	nop
 8027d60:	41615252 	.word	0x41615252
 8027d64:	61417272 	.word	0x61417272
 8027d68:	24000a90 	.word	0x24000a90

08027d6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8027d6c:	b580      	push	{r7, lr}
 8027d6e:	b084      	sub	sp, #16
 8027d70:	af00      	add	r7, sp, #0
 8027d72:	6078      	str	r0, [r7, #4]
 8027d74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8027d76:	2309      	movs	r3, #9
 8027d78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8027d7a:	687b      	ldr	r3, [r7, #4]
 8027d7c:	2b00      	cmp	r3, #0
 8027d7e:	d01c      	beq.n	8027dba <validate+0x4e>
 8027d80:	687b      	ldr	r3, [r7, #4]
 8027d82:	681b      	ldr	r3, [r3, #0]
 8027d84:	2b00      	cmp	r3, #0
 8027d86:	d018      	beq.n	8027dba <validate+0x4e>
 8027d88:	687b      	ldr	r3, [r7, #4]
 8027d8a:	681b      	ldr	r3, [r3, #0]
 8027d8c:	781b      	ldrb	r3, [r3, #0]
 8027d8e:	2b00      	cmp	r3, #0
 8027d90:	d013      	beq.n	8027dba <validate+0x4e>
 8027d92:	687b      	ldr	r3, [r7, #4]
 8027d94:	889a      	ldrh	r2, [r3, #4]
 8027d96:	687b      	ldr	r3, [r7, #4]
 8027d98:	681b      	ldr	r3, [r3, #0]
 8027d9a:	88db      	ldrh	r3, [r3, #6]
 8027d9c:	429a      	cmp	r2, r3
 8027d9e:	d10c      	bne.n	8027dba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	681b      	ldr	r3, [r3, #0]
 8027da4:	785b      	ldrb	r3, [r3, #1]
 8027da6:	4618      	mov	r0, r3
 8027da8:	f7fe fada 	bl	8026360 <disk_status>
 8027dac:	4603      	mov	r3, r0
 8027dae:	f003 0301 	and.w	r3, r3, #1
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	d101      	bne.n	8027dba <validate+0x4e>
			res = FR_OK;
 8027db6:	2300      	movs	r3, #0
 8027db8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8027dba:	7bfb      	ldrb	r3, [r7, #15]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	d102      	bne.n	8027dc6 <validate+0x5a>
 8027dc0:	687b      	ldr	r3, [r7, #4]
 8027dc2:	681b      	ldr	r3, [r3, #0]
 8027dc4:	e000      	b.n	8027dc8 <validate+0x5c>
 8027dc6:	2300      	movs	r3, #0
 8027dc8:	683a      	ldr	r2, [r7, #0]
 8027dca:	6013      	str	r3, [r2, #0]
	return res;
 8027dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8027dce:	4618      	mov	r0, r3
 8027dd0:	3710      	adds	r7, #16
 8027dd2:	46bd      	mov	sp, r7
 8027dd4:	bd80      	pop	{r7, pc}
	...

08027dd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8027dd8:	b580      	push	{r7, lr}
 8027dda:	b088      	sub	sp, #32
 8027ddc:	af00      	add	r7, sp, #0
 8027dde:	60f8      	str	r0, [r7, #12]
 8027de0:	60b9      	str	r1, [r7, #8]
 8027de2:	4613      	mov	r3, r2
 8027de4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8027de6:	68bb      	ldr	r3, [r7, #8]
 8027de8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8027dea:	f107 0310 	add.w	r3, r7, #16
 8027dee:	4618      	mov	r0, r3
 8027df0:	f7ff fcd5 	bl	802779e <get_ldnumber>
 8027df4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8027df6:	69fb      	ldr	r3, [r7, #28]
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	da01      	bge.n	8027e00 <f_mount+0x28>
 8027dfc:	230b      	movs	r3, #11
 8027dfe:	e02b      	b.n	8027e58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8027e00:	4a17      	ldr	r2, [pc, #92]	@ (8027e60 <f_mount+0x88>)
 8027e02:	69fb      	ldr	r3, [r7, #28]
 8027e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027e08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8027e0a:	69bb      	ldr	r3, [r7, #24]
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d005      	beq.n	8027e1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8027e10:	69b8      	ldr	r0, [r7, #24]
 8027e12:	f7fe fd8d 	bl	8026930 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8027e16:	69bb      	ldr	r3, [r7, #24]
 8027e18:	2200      	movs	r2, #0
 8027e1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8027e1c:	68fb      	ldr	r3, [r7, #12]
 8027e1e:	2b00      	cmp	r3, #0
 8027e20:	d002      	beq.n	8027e28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8027e22:	68fb      	ldr	r3, [r7, #12]
 8027e24:	2200      	movs	r2, #0
 8027e26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8027e28:	68fa      	ldr	r2, [r7, #12]
 8027e2a:	490d      	ldr	r1, [pc, #52]	@ (8027e60 <f_mount+0x88>)
 8027e2c:	69fb      	ldr	r3, [r7, #28]
 8027e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8027e32:	68fb      	ldr	r3, [r7, #12]
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	d002      	beq.n	8027e3e <f_mount+0x66>
 8027e38:	79fb      	ldrb	r3, [r7, #7]
 8027e3a:	2b01      	cmp	r3, #1
 8027e3c:	d001      	beq.n	8027e42 <f_mount+0x6a>
 8027e3e:	2300      	movs	r3, #0
 8027e40:	e00a      	b.n	8027e58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8027e42:	f107 010c 	add.w	r1, r7, #12
 8027e46:	f107 0308 	add.w	r3, r7, #8
 8027e4a:	2200      	movs	r2, #0
 8027e4c:	4618      	mov	r0, r3
 8027e4e:	f7ff fd41 	bl	80278d4 <find_volume>
 8027e52:	4603      	mov	r3, r0
 8027e54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8027e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8027e58:	4618      	mov	r0, r3
 8027e5a:	3720      	adds	r7, #32
 8027e5c:	46bd      	mov	sp, r7
 8027e5e:	bd80      	pop	{r7, pc}
 8027e60:	24000a8c 	.word	0x24000a8c

08027e64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8027e64:	b580      	push	{r7, lr}
 8027e66:	b098      	sub	sp, #96	@ 0x60
 8027e68:	af00      	add	r7, sp, #0
 8027e6a:	60f8      	str	r0, [r7, #12]
 8027e6c:	60b9      	str	r1, [r7, #8]
 8027e6e:	4613      	mov	r3, r2
 8027e70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8027e72:	68fb      	ldr	r3, [r7, #12]
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	d101      	bne.n	8027e7c <f_open+0x18>
 8027e78:	2309      	movs	r3, #9
 8027e7a:	e1a9      	b.n	80281d0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8027e7c:	79fb      	ldrb	r3, [r7, #7]
 8027e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027e82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8027e84:	79fa      	ldrb	r2, [r7, #7]
 8027e86:	f107 0110 	add.w	r1, r7, #16
 8027e8a:	f107 0308 	add.w	r3, r7, #8
 8027e8e:	4618      	mov	r0, r3
 8027e90:	f7ff fd20 	bl	80278d4 <find_volume>
 8027e94:	4603      	mov	r3, r0
 8027e96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8027e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027e9e:	2b00      	cmp	r3, #0
 8027ea0:	f040 818d 	bne.w	80281be <f_open+0x35a>
		dj.obj.fs = fs;
 8027ea4:	693b      	ldr	r3, [r7, #16]
 8027ea6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8027ea8:	68ba      	ldr	r2, [r7, #8]
 8027eaa:	f107 0314 	add.w	r3, r7, #20
 8027eae:	4611      	mov	r1, r2
 8027eb0:	4618      	mov	r0, r3
 8027eb2:	f7ff fc03 	bl	80276bc <follow_path>
 8027eb6:	4603      	mov	r3, r0
 8027eb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8027ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027ec0:	2b00      	cmp	r3, #0
 8027ec2:	d118      	bne.n	8027ef6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8027ec4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8027ec8:	b25b      	sxtb	r3, r3
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	da03      	bge.n	8027ed6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8027ece:	2306      	movs	r3, #6
 8027ed0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027ed4:	e00f      	b.n	8027ef6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027ed6:	79fb      	ldrb	r3, [r7, #7]
 8027ed8:	2b01      	cmp	r3, #1
 8027eda:	bf8c      	ite	hi
 8027edc:	2301      	movhi	r3, #1
 8027ede:	2300      	movls	r3, #0
 8027ee0:	b2db      	uxtb	r3, r3
 8027ee2:	461a      	mov	r2, r3
 8027ee4:	f107 0314 	add.w	r3, r7, #20
 8027ee8:	4611      	mov	r1, r2
 8027eea:	4618      	mov	r0, r3
 8027eec:	f7fe fbd8 	bl	80266a0 <chk_lock>
 8027ef0:	4603      	mov	r3, r0
 8027ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8027ef6:	79fb      	ldrb	r3, [r7, #7]
 8027ef8:	f003 031c 	and.w	r3, r3, #28
 8027efc:	2b00      	cmp	r3, #0
 8027efe:	d07f      	beq.n	8028000 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8027f00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f04:	2b00      	cmp	r3, #0
 8027f06:	d017      	beq.n	8027f38 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8027f08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f0c:	2b04      	cmp	r3, #4
 8027f0e:	d10e      	bne.n	8027f2e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8027f10:	f7fe fc22 	bl	8026758 <enq_lock>
 8027f14:	4603      	mov	r3, r0
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	d006      	beq.n	8027f28 <f_open+0xc4>
 8027f1a:	f107 0314 	add.w	r3, r7, #20
 8027f1e:	4618      	mov	r0, r3
 8027f20:	f7ff fb06 	bl	8027530 <dir_register>
 8027f24:	4603      	mov	r3, r0
 8027f26:	e000      	b.n	8027f2a <f_open+0xc6>
 8027f28:	2312      	movs	r3, #18
 8027f2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8027f2e:	79fb      	ldrb	r3, [r7, #7]
 8027f30:	f043 0308 	orr.w	r3, r3, #8
 8027f34:	71fb      	strb	r3, [r7, #7]
 8027f36:	e010      	b.n	8027f5a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8027f38:	7ebb      	ldrb	r3, [r7, #26]
 8027f3a:	f003 0311 	and.w	r3, r3, #17
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	d003      	beq.n	8027f4a <f_open+0xe6>
					res = FR_DENIED;
 8027f42:	2307      	movs	r3, #7
 8027f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027f48:	e007      	b.n	8027f5a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8027f4a:	79fb      	ldrb	r3, [r7, #7]
 8027f4c:	f003 0304 	and.w	r3, r3, #4
 8027f50:	2b00      	cmp	r3, #0
 8027f52:	d002      	beq.n	8027f5a <f_open+0xf6>
 8027f54:	2308      	movs	r3, #8
 8027f56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8027f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d168      	bne.n	8028034 <f_open+0x1d0>
 8027f62:	79fb      	ldrb	r3, [r7, #7]
 8027f64:	f003 0308 	and.w	r3, r3, #8
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d063      	beq.n	8028034 <f_open+0x1d0>
				dw = GET_FATTIME();
 8027f6c:	f7fd ff6c 	bl	8025e48 <get_fattime>
 8027f70:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8027f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f74:	330e      	adds	r3, #14
 8027f76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027f78:	4618      	mov	r0, r3
 8027f7a:	f7fe fae7 	bl	802654c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8027f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f80:	3316      	adds	r3, #22
 8027f82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027f84:	4618      	mov	r0, r3
 8027f86:	f7fe fae1 	bl	802654c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8027f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f8c:	330b      	adds	r3, #11
 8027f8e:	2220      	movs	r2, #32
 8027f90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8027f92:	693b      	ldr	r3, [r7, #16]
 8027f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027f96:	4611      	mov	r1, r2
 8027f98:	4618      	mov	r0, r3
 8027f9a:	f7ff fa35 	bl	8027408 <ld_clust>
 8027f9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8027fa0:	693b      	ldr	r3, [r7, #16]
 8027fa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8027fa4:	2200      	movs	r2, #0
 8027fa6:	4618      	mov	r0, r3
 8027fa8:	f7ff fa4d 	bl	8027446 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8027fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fae:	331c      	adds	r3, #28
 8027fb0:	2100      	movs	r1, #0
 8027fb2:	4618      	mov	r0, r3
 8027fb4:	f7fe faca 	bl	802654c <st_dword>
					fs->wflag = 1;
 8027fb8:	693b      	ldr	r3, [r7, #16]
 8027fba:	2201      	movs	r2, #1
 8027fbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8027fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027fc0:	2b00      	cmp	r3, #0
 8027fc2:	d037      	beq.n	8028034 <f_open+0x1d0>
						dw = fs->winsect;
 8027fc4:	693b      	ldr	r3, [r7, #16]
 8027fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027fc8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8027fca:	f107 0314 	add.w	r3, r7, #20
 8027fce:	2200      	movs	r2, #0
 8027fd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8027fd2:	4618      	mov	r0, r3
 8027fd4:	f7fe ff60 	bl	8026e98 <remove_chain>
 8027fd8:	4603      	mov	r3, r0
 8027fda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8027fde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	d126      	bne.n	8028034 <f_open+0x1d0>
							res = move_window(fs, dw);
 8027fe6:	693b      	ldr	r3, [r7, #16]
 8027fe8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027fea:	4618      	mov	r0, r3
 8027fec:	f7fe fd08 	bl	8026a00 <move_window>
 8027ff0:	4603      	mov	r3, r0
 8027ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8027ff6:	693b      	ldr	r3, [r7, #16]
 8027ff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027ffa:	3a01      	subs	r2, #1
 8027ffc:	60da      	str	r2, [r3, #12]
 8027ffe:	e019      	b.n	8028034 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8028000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028004:	2b00      	cmp	r3, #0
 8028006:	d115      	bne.n	8028034 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8028008:	7ebb      	ldrb	r3, [r7, #26]
 802800a:	f003 0310 	and.w	r3, r3, #16
 802800e:	2b00      	cmp	r3, #0
 8028010:	d003      	beq.n	802801a <f_open+0x1b6>
					res = FR_NO_FILE;
 8028012:	2304      	movs	r3, #4
 8028014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8028018:	e00c      	b.n	8028034 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 802801a:	79fb      	ldrb	r3, [r7, #7]
 802801c:	f003 0302 	and.w	r3, r3, #2
 8028020:	2b00      	cmp	r3, #0
 8028022:	d007      	beq.n	8028034 <f_open+0x1d0>
 8028024:	7ebb      	ldrb	r3, [r7, #26]
 8028026:	f003 0301 	and.w	r3, r3, #1
 802802a:	2b00      	cmp	r3, #0
 802802c:	d002      	beq.n	8028034 <f_open+0x1d0>
						res = FR_DENIED;
 802802e:	2307      	movs	r3, #7
 8028030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8028034:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028038:	2b00      	cmp	r3, #0
 802803a:	d126      	bne.n	802808a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 802803c:	79fb      	ldrb	r3, [r7, #7]
 802803e:	f003 0308 	and.w	r3, r3, #8
 8028042:	2b00      	cmp	r3, #0
 8028044:	d003      	beq.n	802804e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8028046:	79fb      	ldrb	r3, [r7, #7]
 8028048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802804c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802804e:	693b      	ldr	r3, [r7, #16]
 8028050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028052:	68fb      	ldr	r3, [r7, #12]
 8028054:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8028056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028058:	68fb      	ldr	r3, [r7, #12]
 802805a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802805c:	79fb      	ldrb	r3, [r7, #7]
 802805e:	2b01      	cmp	r3, #1
 8028060:	bf8c      	ite	hi
 8028062:	2301      	movhi	r3, #1
 8028064:	2300      	movls	r3, #0
 8028066:	b2db      	uxtb	r3, r3
 8028068:	461a      	mov	r2, r3
 802806a:	f107 0314 	add.w	r3, r7, #20
 802806e:	4611      	mov	r1, r2
 8028070:	4618      	mov	r0, r3
 8028072:	f7fe fb93 	bl	802679c <inc_lock>
 8028076:	4602      	mov	r2, r0
 8028078:	68fb      	ldr	r3, [r7, #12]
 802807a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 802807c:	68fb      	ldr	r3, [r7, #12]
 802807e:	691b      	ldr	r3, [r3, #16]
 8028080:	2b00      	cmp	r3, #0
 8028082:	d102      	bne.n	802808a <f_open+0x226>
 8028084:	2302      	movs	r3, #2
 8028086:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 802808a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802808e:	2b00      	cmp	r3, #0
 8028090:	f040 8095 	bne.w	80281be <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8028094:	693b      	ldr	r3, [r7, #16]
 8028096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028098:	4611      	mov	r1, r2
 802809a:	4618      	mov	r0, r3
 802809c:	f7ff f9b4 	bl	8027408 <ld_clust>
 80280a0:	4602      	mov	r2, r0
 80280a2:	68fb      	ldr	r3, [r7, #12]
 80280a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80280a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80280a8:	331c      	adds	r3, #28
 80280aa:	4618      	mov	r0, r3
 80280ac:	f7fe fa10 	bl	80264d0 <ld_dword>
 80280b0:	4602      	mov	r2, r0
 80280b2:	68fb      	ldr	r3, [r7, #12]
 80280b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80280b6:	68fb      	ldr	r3, [r7, #12]
 80280b8:	2200      	movs	r2, #0
 80280ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80280bc:	693a      	ldr	r2, [r7, #16]
 80280be:	68fb      	ldr	r3, [r7, #12]
 80280c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80280c2:	693b      	ldr	r3, [r7, #16]
 80280c4:	88da      	ldrh	r2, [r3, #6]
 80280c6:	68fb      	ldr	r3, [r7, #12]
 80280c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80280ca:	68fb      	ldr	r3, [r7, #12]
 80280cc:	79fa      	ldrb	r2, [r7, #7]
 80280ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80280d0:	68fb      	ldr	r3, [r7, #12]
 80280d2:	2200      	movs	r2, #0
 80280d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80280d6:	68fb      	ldr	r3, [r7, #12]
 80280d8:	2200      	movs	r2, #0
 80280da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80280dc:	68fb      	ldr	r3, [r7, #12]
 80280de:	2200      	movs	r2, #0
 80280e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80280e2:	68fb      	ldr	r3, [r7, #12]
 80280e4:	3330      	adds	r3, #48	@ 0x30
 80280e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80280ea:	2100      	movs	r1, #0
 80280ec:	4618      	mov	r0, r3
 80280ee:	f7fe fa7a 	bl	80265e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80280f2:	79fb      	ldrb	r3, [r7, #7]
 80280f4:	f003 0320 	and.w	r3, r3, #32
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d060      	beq.n	80281be <f_open+0x35a>
 80280fc:	68fb      	ldr	r3, [r7, #12]
 80280fe:	68db      	ldr	r3, [r3, #12]
 8028100:	2b00      	cmp	r3, #0
 8028102:	d05c      	beq.n	80281be <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8028104:	68fb      	ldr	r3, [r7, #12]
 8028106:	68da      	ldr	r2, [r3, #12]
 8028108:	68fb      	ldr	r3, [r7, #12]
 802810a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 802810c:	693b      	ldr	r3, [r7, #16]
 802810e:	895b      	ldrh	r3, [r3, #10]
 8028110:	025b      	lsls	r3, r3, #9
 8028112:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8028114:	68fb      	ldr	r3, [r7, #12]
 8028116:	689b      	ldr	r3, [r3, #8]
 8028118:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	68db      	ldr	r3, [r3, #12]
 802811e:	657b      	str	r3, [r7, #84]	@ 0x54
 8028120:	e016      	b.n	8028150 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8028122:	68fb      	ldr	r3, [r7, #12]
 8028124:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8028126:	4618      	mov	r0, r3
 8028128:	f7fe fd25 	bl	8026b76 <get_fat>
 802812c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802812e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028130:	2b01      	cmp	r3, #1
 8028132:	d802      	bhi.n	802813a <f_open+0x2d6>
 8028134:	2302      	movs	r3, #2
 8028136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 802813a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028140:	d102      	bne.n	8028148 <f_open+0x2e4>
 8028142:	2301      	movs	r3, #1
 8028144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8028148:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802814a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802814c:	1ad3      	subs	r3, r2, r3
 802814e:	657b      	str	r3, [r7, #84]	@ 0x54
 8028150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028154:	2b00      	cmp	r3, #0
 8028156:	d103      	bne.n	8028160 <f_open+0x2fc>
 8028158:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802815a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802815c:	429a      	cmp	r2, r3
 802815e:	d8e0      	bhi.n	8028122 <f_open+0x2be>
				}
				fp->clust = clst;
 8028160:	68fb      	ldr	r3, [r7, #12]
 8028162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8028164:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8028166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802816a:	2b00      	cmp	r3, #0
 802816c:	d127      	bne.n	80281be <f_open+0x35a>
 802816e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8028170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028174:	2b00      	cmp	r3, #0
 8028176:	d022      	beq.n	80281be <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8028178:	693b      	ldr	r3, [r7, #16]
 802817a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802817c:	4618      	mov	r0, r3
 802817e:	f7fe fcdb 	bl	8026b38 <clust2sect>
 8028182:	6478      	str	r0, [r7, #68]	@ 0x44
 8028184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028186:	2b00      	cmp	r3, #0
 8028188:	d103      	bne.n	8028192 <f_open+0x32e>
						res = FR_INT_ERR;
 802818a:	2302      	movs	r3, #2
 802818c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8028190:	e015      	b.n	80281be <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8028192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8028194:	0a5a      	lsrs	r2, r3, #9
 8028196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028198:	441a      	add	r2, r3
 802819a:	68fb      	ldr	r3, [r7, #12]
 802819c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 802819e:	693b      	ldr	r3, [r7, #16]
 80281a0:	7858      	ldrb	r0, [r3, #1]
 80281a2:	68fb      	ldr	r3, [r7, #12]
 80281a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80281a8:	68fb      	ldr	r3, [r7, #12]
 80281aa:	6a1a      	ldr	r2, [r3, #32]
 80281ac:	2301      	movs	r3, #1
 80281ae:	f7fe f919 	bl	80263e4 <disk_read>
 80281b2:	4603      	mov	r3, r0
 80281b4:	2b00      	cmp	r3, #0
 80281b6:	d002      	beq.n	80281be <f_open+0x35a>
 80281b8:	2301      	movs	r3, #1
 80281ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80281be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80281c2:	2b00      	cmp	r3, #0
 80281c4:	d002      	beq.n	80281cc <f_open+0x368>
 80281c6:	68fb      	ldr	r3, [r7, #12]
 80281c8:	2200      	movs	r2, #0
 80281ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80281cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80281d0:	4618      	mov	r0, r3
 80281d2:	3760      	adds	r7, #96	@ 0x60
 80281d4:	46bd      	mov	sp, r7
 80281d6:	bd80      	pop	{r7, pc}

080281d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80281d8:	b580      	push	{r7, lr}
 80281da:	b08e      	sub	sp, #56	@ 0x38
 80281dc:	af00      	add	r7, sp, #0
 80281de:	60f8      	str	r0, [r7, #12]
 80281e0:	60b9      	str	r1, [r7, #8]
 80281e2:	607a      	str	r2, [r7, #4]
 80281e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80281e6:	68bb      	ldr	r3, [r7, #8]
 80281e8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80281ea:	683b      	ldr	r3, [r7, #0]
 80281ec:	2200      	movs	r2, #0
 80281ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80281f0:	68fb      	ldr	r3, [r7, #12]
 80281f2:	f107 0214 	add.w	r2, r7, #20
 80281f6:	4611      	mov	r1, r2
 80281f8:	4618      	mov	r0, r3
 80281fa:	f7ff fdb7 	bl	8027d6c <validate>
 80281fe:	4603      	mov	r3, r0
 8028200:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8028204:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028208:	2b00      	cmp	r3, #0
 802820a:	d107      	bne.n	802821c <f_read+0x44>
 802820c:	68fb      	ldr	r3, [r7, #12]
 802820e:	7d5b      	ldrb	r3, [r3, #21]
 8028210:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8028214:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028218:	2b00      	cmp	r3, #0
 802821a:	d002      	beq.n	8028222 <f_read+0x4a>
 802821c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028220:	e115      	b.n	802844e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8028222:	68fb      	ldr	r3, [r7, #12]
 8028224:	7d1b      	ldrb	r3, [r3, #20]
 8028226:	f003 0301 	and.w	r3, r3, #1
 802822a:	2b00      	cmp	r3, #0
 802822c:	d101      	bne.n	8028232 <f_read+0x5a>
 802822e:	2307      	movs	r3, #7
 8028230:	e10d      	b.n	802844e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8028232:	68fb      	ldr	r3, [r7, #12]
 8028234:	68da      	ldr	r2, [r3, #12]
 8028236:	68fb      	ldr	r3, [r7, #12]
 8028238:	699b      	ldr	r3, [r3, #24]
 802823a:	1ad3      	subs	r3, r2, r3
 802823c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 802823e:	687a      	ldr	r2, [r7, #4]
 8028240:	6a3b      	ldr	r3, [r7, #32]
 8028242:	429a      	cmp	r2, r3
 8028244:	f240 80fe 	bls.w	8028444 <f_read+0x26c>
 8028248:	6a3b      	ldr	r3, [r7, #32]
 802824a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 802824c:	e0fa      	b.n	8028444 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 802824e:	68fb      	ldr	r3, [r7, #12]
 8028250:	699b      	ldr	r3, [r3, #24]
 8028252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028256:	2b00      	cmp	r3, #0
 8028258:	f040 80c6 	bne.w	80283e8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 802825c:	68fb      	ldr	r3, [r7, #12]
 802825e:	699b      	ldr	r3, [r3, #24]
 8028260:	0a5b      	lsrs	r3, r3, #9
 8028262:	697a      	ldr	r2, [r7, #20]
 8028264:	8952      	ldrh	r2, [r2, #10]
 8028266:	3a01      	subs	r2, #1
 8028268:	4013      	ands	r3, r2
 802826a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 802826c:	69fb      	ldr	r3, [r7, #28]
 802826e:	2b00      	cmp	r3, #0
 8028270:	d12f      	bne.n	80282d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8028272:	68fb      	ldr	r3, [r7, #12]
 8028274:	699b      	ldr	r3, [r3, #24]
 8028276:	2b00      	cmp	r3, #0
 8028278:	d103      	bne.n	8028282 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 802827a:	68fb      	ldr	r3, [r7, #12]
 802827c:	689b      	ldr	r3, [r3, #8]
 802827e:	633b      	str	r3, [r7, #48]	@ 0x30
 8028280:	e013      	b.n	80282aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8028282:	68fb      	ldr	r3, [r7, #12]
 8028284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028286:	2b00      	cmp	r3, #0
 8028288:	d007      	beq.n	802829a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 802828a:	68fb      	ldr	r3, [r7, #12]
 802828c:	699b      	ldr	r3, [r3, #24]
 802828e:	4619      	mov	r1, r3
 8028290:	68f8      	ldr	r0, [r7, #12]
 8028292:	f7fe fefe 	bl	8027092 <clmt_clust>
 8028296:	6338      	str	r0, [r7, #48]	@ 0x30
 8028298:	e007      	b.n	80282aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 802829a:	68fa      	ldr	r2, [r7, #12]
 802829c:	68fb      	ldr	r3, [r7, #12]
 802829e:	69db      	ldr	r3, [r3, #28]
 80282a0:	4619      	mov	r1, r3
 80282a2:	4610      	mov	r0, r2
 80282a4:	f7fe fc67 	bl	8026b76 <get_fat>
 80282a8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80282aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80282ac:	2b01      	cmp	r3, #1
 80282ae:	d804      	bhi.n	80282ba <f_read+0xe2>
 80282b0:	68fb      	ldr	r3, [r7, #12]
 80282b2:	2202      	movs	r2, #2
 80282b4:	755a      	strb	r2, [r3, #21]
 80282b6:	2302      	movs	r3, #2
 80282b8:	e0c9      	b.n	802844e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80282ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80282bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80282c0:	d104      	bne.n	80282cc <f_read+0xf4>
 80282c2:	68fb      	ldr	r3, [r7, #12]
 80282c4:	2201      	movs	r2, #1
 80282c6:	755a      	strb	r2, [r3, #21]
 80282c8:	2301      	movs	r3, #1
 80282ca:	e0c0      	b.n	802844e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80282cc:	68fb      	ldr	r3, [r7, #12]
 80282ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80282d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80282d2:	697a      	ldr	r2, [r7, #20]
 80282d4:	68fb      	ldr	r3, [r7, #12]
 80282d6:	69db      	ldr	r3, [r3, #28]
 80282d8:	4619      	mov	r1, r3
 80282da:	4610      	mov	r0, r2
 80282dc:	f7fe fc2c 	bl	8026b38 <clust2sect>
 80282e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80282e2:	69bb      	ldr	r3, [r7, #24]
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	d104      	bne.n	80282f2 <f_read+0x11a>
 80282e8:	68fb      	ldr	r3, [r7, #12]
 80282ea:	2202      	movs	r2, #2
 80282ec:	755a      	strb	r2, [r3, #21]
 80282ee:	2302      	movs	r3, #2
 80282f0:	e0ad      	b.n	802844e <f_read+0x276>
			sect += csect;
 80282f2:	69ba      	ldr	r2, [r7, #24]
 80282f4:	69fb      	ldr	r3, [r7, #28]
 80282f6:	4413      	add	r3, r2
 80282f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80282fa:	687b      	ldr	r3, [r7, #4]
 80282fc:	0a5b      	lsrs	r3, r3, #9
 80282fe:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8028300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028302:	2b00      	cmp	r3, #0
 8028304:	d039      	beq.n	802837a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8028306:	69fa      	ldr	r2, [r7, #28]
 8028308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802830a:	4413      	add	r3, r2
 802830c:	697a      	ldr	r2, [r7, #20]
 802830e:	8952      	ldrh	r2, [r2, #10]
 8028310:	4293      	cmp	r3, r2
 8028312:	d905      	bls.n	8028320 <f_read+0x148>
					cc = fs->csize - csect;
 8028314:	697b      	ldr	r3, [r7, #20]
 8028316:	895b      	ldrh	r3, [r3, #10]
 8028318:	461a      	mov	r2, r3
 802831a:	69fb      	ldr	r3, [r7, #28]
 802831c:	1ad3      	subs	r3, r2, r3
 802831e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028320:	697b      	ldr	r3, [r7, #20]
 8028322:	7858      	ldrb	r0, [r3, #1]
 8028324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028326:	69ba      	ldr	r2, [r7, #24]
 8028328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802832a:	f7fe f85b 	bl	80263e4 <disk_read>
 802832e:	4603      	mov	r3, r0
 8028330:	2b00      	cmp	r3, #0
 8028332:	d004      	beq.n	802833e <f_read+0x166>
 8028334:	68fb      	ldr	r3, [r7, #12]
 8028336:	2201      	movs	r2, #1
 8028338:	755a      	strb	r2, [r3, #21]
 802833a:	2301      	movs	r3, #1
 802833c:	e087      	b.n	802844e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 802833e:	68fb      	ldr	r3, [r7, #12]
 8028340:	7d1b      	ldrb	r3, [r3, #20]
 8028342:	b25b      	sxtb	r3, r3
 8028344:	2b00      	cmp	r3, #0
 8028346:	da14      	bge.n	8028372 <f_read+0x19a>
 8028348:	68fb      	ldr	r3, [r7, #12]
 802834a:	6a1a      	ldr	r2, [r3, #32]
 802834c:	69bb      	ldr	r3, [r7, #24]
 802834e:	1ad3      	subs	r3, r2, r3
 8028350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8028352:	429a      	cmp	r2, r3
 8028354:	d90d      	bls.n	8028372 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8028356:	68fb      	ldr	r3, [r7, #12]
 8028358:	6a1a      	ldr	r2, [r3, #32]
 802835a:	69bb      	ldr	r3, [r7, #24]
 802835c:	1ad3      	subs	r3, r2, r3
 802835e:	025b      	lsls	r3, r3, #9
 8028360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028362:	18d0      	adds	r0, r2, r3
 8028364:	68fb      	ldr	r3, [r7, #12]
 8028366:	3330      	adds	r3, #48	@ 0x30
 8028368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802836c:	4619      	mov	r1, r3
 802836e:	f7fe f919 	bl	80265a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8028372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028374:	025b      	lsls	r3, r3, #9
 8028376:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8028378:	e050      	b.n	802841c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 802837a:	68fb      	ldr	r3, [r7, #12]
 802837c:	6a1b      	ldr	r3, [r3, #32]
 802837e:	69ba      	ldr	r2, [r7, #24]
 8028380:	429a      	cmp	r2, r3
 8028382:	d02e      	beq.n	80283e2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8028384:	68fb      	ldr	r3, [r7, #12]
 8028386:	7d1b      	ldrb	r3, [r3, #20]
 8028388:	b25b      	sxtb	r3, r3
 802838a:	2b00      	cmp	r3, #0
 802838c:	da18      	bge.n	80283c0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 802838e:	697b      	ldr	r3, [r7, #20]
 8028390:	7858      	ldrb	r0, [r3, #1]
 8028392:	68fb      	ldr	r3, [r7, #12]
 8028394:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028398:	68fb      	ldr	r3, [r7, #12]
 802839a:	6a1a      	ldr	r2, [r3, #32]
 802839c:	2301      	movs	r3, #1
 802839e:	f7fe f841 	bl	8026424 <disk_write>
 80283a2:	4603      	mov	r3, r0
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	d004      	beq.n	80283b2 <f_read+0x1da>
 80283a8:	68fb      	ldr	r3, [r7, #12]
 80283aa:	2201      	movs	r2, #1
 80283ac:	755a      	strb	r2, [r3, #21]
 80283ae:	2301      	movs	r3, #1
 80283b0:	e04d      	b.n	802844e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80283b2:	68fb      	ldr	r3, [r7, #12]
 80283b4:	7d1b      	ldrb	r3, [r3, #20]
 80283b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80283ba:	b2da      	uxtb	r2, r3
 80283bc:	68fb      	ldr	r3, [r7, #12]
 80283be:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80283c0:	697b      	ldr	r3, [r7, #20]
 80283c2:	7858      	ldrb	r0, [r3, #1]
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80283ca:	2301      	movs	r3, #1
 80283cc:	69ba      	ldr	r2, [r7, #24]
 80283ce:	f7fe f809 	bl	80263e4 <disk_read>
 80283d2:	4603      	mov	r3, r0
 80283d4:	2b00      	cmp	r3, #0
 80283d6:	d004      	beq.n	80283e2 <f_read+0x20a>
 80283d8:	68fb      	ldr	r3, [r7, #12]
 80283da:	2201      	movs	r2, #1
 80283dc:	755a      	strb	r2, [r3, #21]
 80283de:	2301      	movs	r3, #1
 80283e0:	e035      	b.n	802844e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80283e2:	68fb      	ldr	r3, [r7, #12]
 80283e4:	69ba      	ldr	r2, [r7, #24]
 80283e6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80283e8:	68fb      	ldr	r3, [r7, #12]
 80283ea:	699b      	ldr	r3, [r3, #24]
 80283ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80283f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80283f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80283f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80283f8:	687b      	ldr	r3, [r7, #4]
 80283fa:	429a      	cmp	r2, r3
 80283fc:	d901      	bls.n	8028402 <f_read+0x22a>
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8028402:	68fb      	ldr	r3, [r7, #12]
 8028404:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8028408:	68fb      	ldr	r3, [r7, #12]
 802840a:	699b      	ldr	r3, [r3, #24]
 802840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028410:	4413      	add	r3, r2
 8028412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028414:	4619      	mov	r1, r3
 8028416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028418:	f7fe f8c4 	bl	80265a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 802841c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802841e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028420:	4413      	add	r3, r2
 8028422:	627b      	str	r3, [r7, #36]	@ 0x24
 8028424:	68fb      	ldr	r3, [r7, #12]
 8028426:	699a      	ldr	r2, [r3, #24]
 8028428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802842a:	441a      	add	r2, r3
 802842c:	68fb      	ldr	r3, [r7, #12]
 802842e:	619a      	str	r2, [r3, #24]
 8028430:	683b      	ldr	r3, [r7, #0]
 8028432:	681a      	ldr	r2, [r3, #0]
 8028434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028436:	441a      	add	r2, r3
 8028438:	683b      	ldr	r3, [r7, #0]
 802843a:	601a      	str	r2, [r3, #0]
 802843c:	687a      	ldr	r2, [r7, #4]
 802843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028440:	1ad3      	subs	r3, r2, r3
 8028442:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8028444:	687b      	ldr	r3, [r7, #4]
 8028446:	2b00      	cmp	r3, #0
 8028448:	f47f af01 	bne.w	802824e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 802844c:	2300      	movs	r3, #0
}
 802844e:	4618      	mov	r0, r3
 8028450:	3738      	adds	r7, #56	@ 0x38
 8028452:	46bd      	mov	sp, r7
 8028454:	bd80      	pop	{r7, pc}

08028456 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8028456:	b580      	push	{r7, lr}
 8028458:	b086      	sub	sp, #24
 802845a:	af00      	add	r7, sp, #0
 802845c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 802845e:	687b      	ldr	r3, [r7, #4]
 8028460:	f107 0208 	add.w	r2, r7, #8
 8028464:	4611      	mov	r1, r2
 8028466:	4618      	mov	r0, r3
 8028468:	f7ff fc80 	bl	8027d6c <validate>
 802846c:	4603      	mov	r3, r0
 802846e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8028470:	7dfb      	ldrb	r3, [r7, #23]
 8028472:	2b00      	cmp	r3, #0
 8028474:	d168      	bne.n	8028548 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8028476:	687b      	ldr	r3, [r7, #4]
 8028478:	7d1b      	ldrb	r3, [r3, #20]
 802847a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802847e:	2b00      	cmp	r3, #0
 8028480:	d062      	beq.n	8028548 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	7d1b      	ldrb	r3, [r3, #20]
 8028486:	b25b      	sxtb	r3, r3
 8028488:	2b00      	cmp	r3, #0
 802848a:	da15      	bge.n	80284b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 802848c:	68bb      	ldr	r3, [r7, #8]
 802848e:	7858      	ldrb	r0, [r3, #1]
 8028490:	687b      	ldr	r3, [r7, #4]
 8028492:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	6a1a      	ldr	r2, [r3, #32]
 802849a:	2301      	movs	r3, #1
 802849c:	f7fd ffc2 	bl	8026424 <disk_write>
 80284a0:	4603      	mov	r3, r0
 80284a2:	2b00      	cmp	r3, #0
 80284a4:	d001      	beq.n	80284aa <f_sync+0x54>
 80284a6:	2301      	movs	r3, #1
 80284a8:	e04f      	b.n	802854a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	7d1b      	ldrb	r3, [r3, #20]
 80284ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80284b2:	b2da      	uxtb	r2, r3
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80284b8:	f7fd fcc6 	bl	8025e48 <get_fattime>
 80284bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80284be:	68ba      	ldr	r2, [r7, #8]
 80284c0:	687b      	ldr	r3, [r7, #4]
 80284c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80284c4:	4619      	mov	r1, r3
 80284c6:	4610      	mov	r0, r2
 80284c8:	f7fe fa9a 	bl	8026a00 <move_window>
 80284cc:	4603      	mov	r3, r0
 80284ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80284d0:	7dfb      	ldrb	r3, [r7, #23]
 80284d2:	2b00      	cmp	r3, #0
 80284d4:	d138      	bne.n	8028548 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80284da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	330b      	adds	r3, #11
 80284e0:	781a      	ldrb	r2, [r3, #0]
 80284e2:	68fb      	ldr	r3, [r7, #12]
 80284e4:	330b      	adds	r3, #11
 80284e6:	f042 0220 	orr.w	r2, r2, #32
 80284ea:	b2d2      	uxtb	r2, r2
 80284ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80284ee:	687b      	ldr	r3, [r7, #4]
 80284f0:	6818      	ldr	r0, [r3, #0]
 80284f2:	687b      	ldr	r3, [r7, #4]
 80284f4:	689b      	ldr	r3, [r3, #8]
 80284f6:	461a      	mov	r2, r3
 80284f8:	68f9      	ldr	r1, [r7, #12]
 80284fa:	f7fe ffa4 	bl	8027446 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80284fe:	68fb      	ldr	r3, [r7, #12]
 8028500:	f103 021c 	add.w	r2, r3, #28
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	68db      	ldr	r3, [r3, #12]
 8028508:	4619      	mov	r1, r3
 802850a:	4610      	mov	r0, r2
 802850c:	f7fe f81e 	bl	802654c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8028510:	68fb      	ldr	r3, [r7, #12]
 8028512:	3316      	adds	r3, #22
 8028514:	6939      	ldr	r1, [r7, #16]
 8028516:	4618      	mov	r0, r3
 8028518:	f7fe f818 	bl	802654c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 802851c:	68fb      	ldr	r3, [r7, #12]
 802851e:	3312      	adds	r3, #18
 8028520:	2100      	movs	r1, #0
 8028522:	4618      	mov	r0, r3
 8028524:	f7fd fff7 	bl	8026516 <st_word>
					fs->wflag = 1;
 8028528:	68bb      	ldr	r3, [r7, #8]
 802852a:	2201      	movs	r2, #1
 802852c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 802852e:	68bb      	ldr	r3, [r7, #8]
 8028530:	4618      	mov	r0, r3
 8028532:	f7fe fa93 	bl	8026a5c <sync_fs>
 8028536:	4603      	mov	r3, r0
 8028538:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 802853a:	687b      	ldr	r3, [r7, #4]
 802853c:	7d1b      	ldrb	r3, [r3, #20]
 802853e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8028542:	b2da      	uxtb	r2, r3
 8028544:	687b      	ldr	r3, [r7, #4]
 8028546:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8028548:	7dfb      	ldrb	r3, [r7, #23]
}
 802854a:	4618      	mov	r0, r3
 802854c:	3718      	adds	r7, #24
 802854e:	46bd      	mov	sp, r7
 8028550:	bd80      	pop	{r7, pc}

08028552 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8028552:	b580      	push	{r7, lr}
 8028554:	b084      	sub	sp, #16
 8028556:	af00      	add	r7, sp, #0
 8028558:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 802855a:	6878      	ldr	r0, [r7, #4]
 802855c:	f7ff ff7b 	bl	8028456 <f_sync>
 8028560:	4603      	mov	r3, r0
 8028562:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8028564:	7bfb      	ldrb	r3, [r7, #15]
 8028566:	2b00      	cmp	r3, #0
 8028568:	d118      	bne.n	802859c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	f107 0208 	add.w	r2, r7, #8
 8028570:	4611      	mov	r1, r2
 8028572:	4618      	mov	r0, r3
 8028574:	f7ff fbfa 	bl	8027d6c <validate>
 8028578:	4603      	mov	r3, r0
 802857a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 802857c:	7bfb      	ldrb	r3, [r7, #15]
 802857e:	2b00      	cmp	r3, #0
 8028580:	d10c      	bne.n	802859c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	691b      	ldr	r3, [r3, #16]
 8028586:	4618      	mov	r0, r3
 8028588:	f7fe f996 	bl	80268b8 <dec_lock>
 802858c:	4603      	mov	r3, r0
 802858e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8028590:	7bfb      	ldrb	r3, [r7, #15]
 8028592:	2b00      	cmp	r3, #0
 8028594:	d102      	bne.n	802859c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8028596:	687b      	ldr	r3, [r7, #4]
 8028598:	2200      	movs	r2, #0
 802859a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 802859c:	7bfb      	ldrb	r3, [r7, #15]
}
 802859e:	4618      	mov	r0, r3
 80285a0:	3710      	adds	r7, #16
 80285a2:	46bd      	mov	sp, r7
 80285a4:	bd80      	pop	{r7, pc}
	...

080285a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80285a8:	b480      	push	{r7}
 80285aa:	b087      	sub	sp, #28
 80285ac:	af00      	add	r7, sp, #0
 80285ae:	60f8      	str	r0, [r7, #12]
 80285b0:	60b9      	str	r1, [r7, #8]
 80285b2:	4613      	mov	r3, r2
 80285b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80285b6:	2301      	movs	r3, #1
 80285b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80285ba:	2300      	movs	r3, #0
 80285bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80285be:	4b1f      	ldr	r3, [pc, #124]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285c0:	7a5b      	ldrb	r3, [r3, #9]
 80285c2:	b2db      	uxtb	r3, r3
 80285c4:	2b00      	cmp	r3, #0
 80285c6:	d131      	bne.n	802862c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80285c8:	4b1c      	ldr	r3, [pc, #112]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285ca:	7a5b      	ldrb	r3, [r3, #9]
 80285cc:	b2db      	uxtb	r3, r3
 80285ce:	461a      	mov	r2, r3
 80285d0:	4b1a      	ldr	r3, [pc, #104]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285d2:	2100      	movs	r1, #0
 80285d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80285d6:	4b19      	ldr	r3, [pc, #100]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285d8:	7a5b      	ldrb	r3, [r3, #9]
 80285da:	b2db      	uxtb	r3, r3
 80285dc:	4a17      	ldr	r2, [pc, #92]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285de:	009b      	lsls	r3, r3, #2
 80285e0:	4413      	add	r3, r2
 80285e2:	68fa      	ldr	r2, [r7, #12]
 80285e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80285e6:	4b15      	ldr	r3, [pc, #84]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285e8:	7a5b      	ldrb	r3, [r3, #9]
 80285ea:	b2db      	uxtb	r3, r3
 80285ec:	461a      	mov	r2, r3
 80285ee:	4b13      	ldr	r3, [pc, #76]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285f0:	4413      	add	r3, r2
 80285f2:	79fa      	ldrb	r2, [r7, #7]
 80285f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80285f6:	4b11      	ldr	r3, [pc, #68]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 80285f8:	7a5b      	ldrb	r3, [r3, #9]
 80285fa:	b2db      	uxtb	r3, r3
 80285fc:	1c5a      	adds	r2, r3, #1
 80285fe:	b2d1      	uxtb	r1, r2
 8028600:	4a0e      	ldr	r2, [pc, #56]	@ (802863c <FATFS_LinkDriverEx+0x94>)
 8028602:	7251      	strb	r1, [r2, #9]
 8028604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8028606:	7dbb      	ldrb	r3, [r7, #22]
 8028608:	3330      	adds	r3, #48	@ 0x30
 802860a:	b2da      	uxtb	r2, r3
 802860c:	68bb      	ldr	r3, [r7, #8]
 802860e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8028610:	68bb      	ldr	r3, [r7, #8]
 8028612:	3301      	adds	r3, #1
 8028614:	223a      	movs	r2, #58	@ 0x3a
 8028616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8028618:	68bb      	ldr	r3, [r7, #8]
 802861a:	3302      	adds	r3, #2
 802861c:	222f      	movs	r2, #47	@ 0x2f
 802861e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8028620:	68bb      	ldr	r3, [r7, #8]
 8028622:	3303      	adds	r3, #3
 8028624:	2200      	movs	r2, #0
 8028626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8028628:	2300      	movs	r3, #0
 802862a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 802862c:	7dfb      	ldrb	r3, [r7, #23]
}
 802862e:	4618      	mov	r0, r3
 8028630:	371c      	adds	r7, #28
 8028632:	46bd      	mov	sp, r7
 8028634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028638:	4770      	bx	lr
 802863a:	bf00      	nop
 802863c:	24000ab4 	.word	0x24000ab4

08028640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8028640:	b580      	push	{r7, lr}
 8028642:	b082      	sub	sp, #8
 8028644:	af00      	add	r7, sp, #0
 8028646:	6078      	str	r0, [r7, #4]
 8028648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802864a:	2200      	movs	r2, #0
 802864c:	6839      	ldr	r1, [r7, #0]
 802864e:	6878      	ldr	r0, [r7, #4]
 8028650:	f7ff ffaa 	bl	80285a8 <FATFS_LinkDriverEx>
 8028654:	4603      	mov	r3, r0
}
 8028656:	4618      	mov	r0, r3
 8028658:	3708      	adds	r7, #8
 802865a:	46bd      	mov	sp, r7
 802865c:	bd80      	pop	{r7, pc}

0802865e <_ZdlPvj>:
 802865e:	f000 bbd3 	b.w	8028e08 <_ZdlPv>

08028662 <__cxa_guard_acquire>:
 8028662:	6802      	ldr	r2, [r0, #0]
 8028664:	07d2      	lsls	r2, r2, #31
 8028666:	4603      	mov	r3, r0
 8028668:	d405      	bmi.n	8028676 <__cxa_guard_acquire+0x14>
 802866a:	7842      	ldrb	r2, [r0, #1]
 802866c:	b102      	cbz	r2, 8028670 <__cxa_guard_acquire+0xe>
 802866e:	deff      	udf	#255	@ 0xff
 8028670:	2001      	movs	r0, #1
 8028672:	7058      	strb	r0, [r3, #1]
 8028674:	4770      	bx	lr
 8028676:	2000      	movs	r0, #0
 8028678:	4770      	bx	lr

0802867a <__cxa_guard_release>:
 802867a:	2301      	movs	r3, #1
 802867c:	6003      	str	r3, [r0, #0]
 802867e:	4770      	bx	lr

08028680 <_Znwj>:
 8028680:	2801      	cmp	r0, #1
 8028682:	bf38      	it	cc
 8028684:	2001      	movcc	r0, #1
 8028686:	b510      	push	{r4, lr}
 8028688:	4604      	mov	r4, r0
 802868a:	4620      	mov	r0, r4
 802868c:	f000 fc68 	bl	8028f60 <malloc>
 8028690:	b100      	cbz	r0, 8028694 <_Znwj+0x14>
 8028692:	bd10      	pop	{r4, pc}
 8028694:	f000 fbba 	bl	8028e0c <_ZSt15get_new_handlerv>
 8028698:	b908      	cbnz	r0, 802869e <_Znwj+0x1e>
 802869a:	f000 fc59 	bl	8028f50 <abort>
 802869e:	4780      	blx	r0
 80286a0:	e7f3      	b.n	802868a <_Znwj+0xa>

080286a2 <_ZNSaIcEC1Ev>:
 80286a2:	4770      	bx	lr

080286a4 <_ZNSaIcED1Ev>:
 80286a4:	4770      	bx	lr

080286a6 <_ZSt17__throw_bad_allocv>:
 80286a6:	b508      	push	{r3, lr}
 80286a8:	f000 fc52 	bl	8028f50 <abort>

080286ac <_ZSt28__throw_bad_array_new_lengthv>:
 80286ac:	b508      	push	{r3, lr}
 80286ae:	f000 fc4f 	bl	8028f50 <abort>

080286b2 <_ZSt19__throw_logic_errorPKc>:
 80286b2:	b508      	push	{r3, lr}
 80286b4:	f000 fc4c 	bl	8028f50 <abort>

080286b8 <_ZSt24__throw_invalid_argumentPKc>:
 80286b8:	b508      	push	{r3, lr}
 80286ba:	f000 fc49 	bl	8028f50 <abort>

080286be <_ZSt20__throw_length_errorPKc>:
 80286be:	b508      	push	{r3, lr}
 80286c0:	f000 fc46 	bl	8028f50 <abort>

080286c4 <_ZSt20__throw_out_of_rangePKc>:
 80286c4:	b508      	push	{r3, lr}
 80286c6:	f000 fc43 	bl	8028f50 <abort>

080286ca <_ZSt24__throw_out_of_range_fmtPKcz>:
 80286ca:	b40f      	push	{r0, r1, r2, r3}
 80286cc:	b508      	push	{r3, lr}
 80286ce:	f000 fc3f 	bl	8028f50 <abort>

080286d2 <_ZSt25__throw_bad_function_callv>:
 80286d2:	b508      	push	{r3, lr}
 80286d4:	f000 fc3c 	bl	8028f50 <abort>

080286d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80286d8:	4901      	ldr	r1, [pc, #4]	@ (80286e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80286da:	f000 bc23 	b.w	8028f24 <_ZNKSt9type_info7__equalERKS_>
 80286de:	bf00      	nop
 80286e0:	0802b7dc 	.word	0x0802b7dc

080286e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80286e4:	b10a      	cbz	r2, 80286ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80286e6:	f001 b8be 	b.w	8029866 <memcpy>
 80286ea:	4770      	bx	lr

080286ec <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80286ec:	b10a      	cbz	r2, 80286f2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80286ee:	f000 bfc1 	b.w	8029674 <memcmp>
 80286f2:	4610      	mov	r0, r2
 80286f4:	4770      	bx	lr

080286f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80286f6:	6001      	str	r1, [r0, #0]
 80286f8:	4770      	bx	lr

080286fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80286fa:	6800      	ldr	r0, [r0, #0]
 80286fc:	4770      	bx	lr

080286fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80286fe:	3008      	adds	r0, #8
 8028700:	4770      	bx	lr

08028702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8028702:	6081      	str	r1, [r0, #8]
 8028704:	4770      	bx	lr

08028706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8028706:	6803      	ldr	r3, [r0, #0]
 8028708:	6041      	str	r1, [r0, #4]
 802870a:	2200      	movs	r2, #0
 802870c:	545a      	strb	r2, [r3, r1]
 802870e:	4770      	bx	lr

08028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8028710:	f850 3b08 	ldr.w	r3, [r0], #8
 8028714:	1a1b      	subs	r3, r3, r0
 8028716:	4258      	negs	r0, r3
 8028718:	4158      	adcs	r0, r3
 802871a:	4770      	bx	lr

0802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 802871c:	b508      	push	{r3, lr}
 802871e:	680b      	ldr	r3, [r1, #0]
 8028720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8028724:	d302      	bcc.n	802872c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8028726:	480d      	ldr	r0, [pc, #52]	@ (802875c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8028728:	f7ff ffc9 	bl	80286be <_ZSt20__throw_length_errorPKc>
 802872c:	4293      	cmp	r3, r2
 802872e:	d90b      	bls.n	8028748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8028730:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8028734:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8028738:	d206      	bcs.n	8028748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802873a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 802873e:	bf2a      	itet	cs
 8028740:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8028744:	6008      	strcc	r0, [r1, #0]
 8028746:	600b      	strcs	r3, [r1, #0]
 8028748:	6808      	ldr	r0, [r1, #0]
 802874a:	3001      	adds	r0, #1
 802874c:	d501      	bpl.n	8028752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 802874e:	f7ff ffaa 	bl	80286a6 <_ZSt17__throw_bad_allocv>
 8028752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028756:	f7ff bf93 	b.w	8028680 <_Znwj>
 802875a:	bf00      	nop
 802875c:	0802b7e4 	.word	0x0802b7e4

08028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8028760:	b510      	push	{r4, lr}
 8028762:	4604      	mov	r4, r0
 8028764:	f7ff ffd4 	bl	8028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028768:	b920      	cbnz	r0, 8028774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 802876a:	6820      	ldr	r0, [r4, #0]
 802876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028770:	f000 bb4a 	b.w	8028e08 <_ZdlPv>
 8028774:	bd10      	pop	{r4, pc}
	...

08028778 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8028778:	b508      	push	{r3, lr}
 802877a:	4603      	mov	r3, r0
 802877c:	4608      	mov	r0, r1
 802877e:	685b      	ldr	r3, [r3, #4]
 8028780:	4298      	cmp	r0, r3
 8028782:	4611      	mov	r1, r2
 8028784:	d903      	bls.n	802878e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8028786:	4602      	mov	r2, r0
 8028788:	4801      	ldr	r0, [pc, #4]	@ (8028790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 802878a:	f7ff ff9e 	bl	80286ca <_ZSt24__throw_out_of_range_fmtPKcz>
 802878e:	bd08      	pop	{r3, pc}
 8028790:	0802b7fc 	.word	0x0802b7fc

08028794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8028794:	6840      	ldr	r0, [r0, #4]
 8028796:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 802879a:	3901      	subs	r1, #1
 802879c:	1a09      	subs	r1, r1, r0
 802879e:	4291      	cmp	r1, r2
 80287a0:	b508      	push	{r3, lr}
 80287a2:	d202      	bcs.n	80287aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80287a4:	4618      	mov	r0, r3
 80287a6:	f7ff ff8a 	bl	80286be <_ZSt20__throw_length_errorPKc>
 80287aa:	bd08      	pop	{r3, pc}

080287ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80287ac:	6803      	ldr	r3, [r0, #0]
 80287ae:	428b      	cmp	r3, r1
 80287b0:	d806      	bhi.n	80287c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80287b2:	6842      	ldr	r2, [r0, #4]
 80287b4:	4413      	add	r3, r2
 80287b6:	4299      	cmp	r1, r3
 80287b8:	bf94      	ite	ls
 80287ba:	2000      	movls	r0, #0
 80287bc:	2001      	movhi	r0, #1
 80287be:	4770      	bx	lr
 80287c0:	2001      	movs	r0, #1
 80287c2:	4770      	bx	lr

080287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80287c4:	2a01      	cmp	r2, #1
 80287c6:	b410      	push	{r4}
 80287c8:	d104      	bne.n	80287d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80287ca:	780a      	ldrb	r2, [r1, #0]
 80287cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287d0:	7002      	strb	r2, [r0, #0]
 80287d2:	4770      	bx	lr
 80287d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287d8:	f7ff bf84 	b.w	80286e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80287dc:	2a01      	cmp	r2, #1
 80287de:	b430      	push	{r4, r5}
 80287e0:	d103      	bne.n	80287ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80287e2:	780b      	ldrb	r3, [r1, #0]
 80287e4:	7003      	strb	r3, [r0, #0]
 80287e6:	bc30      	pop	{r4, r5}
 80287e8:	4770      	bx	lr
 80287ea:	2a00      	cmp	r2, #0
 80287ec:	d0fb      	beq.n	80287e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80287ee:	bc30      	pop	{r4, r5}
 80287f0:	f000 bf50 	b.w	8029694 <memmove>

080287f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80287f4:	460b      	mov	r3, r1
 80287f6:	2b01      	cmp	r3, #1
 80287f8:	b410      	push	{r4}
 80287fa:	4611      	mov	r1, r2
 80287fc:	4604      	mov	r4, r0
 80287fe:	d103      	bne.n	8028808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8028800:	7022      	strb	r2, [r4, #0]
 8028802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028806:	4770      	bx	lr
 8028808:	2b00      	cmp	r3, #0
 802880a:	d0fa      	beq.n	8028802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 802880c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028810:	461a      	mov	r2, r3
 8028812:	f000 bf59 	b.w	80296c8 <memset>

08028816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8028816:	b508      	push	{r3, lr}
 8028818:	1a52      	subs	r2, r2, r1
 802881a:	f7ff ffd3 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802881e:	bd08      	pop	{r3, pc}

08028820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8028820:	b508      	push	{r3, lr}
 8028822:	1a52      	subs	r2, r2, r1
 8028824:	f7ff ffce 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028828:	bd08      	pop	{r3, pc}

0802882a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 802882a:	f100 0208 	add.w	r2, r0, #8
 802882e:	6002      	str	r2, [r0, #0]
 8028830:	2200      	movs	r2, #0
 8028832:	6042      	str	r2, [r0, #4]
 8028834:	7202      	strb	r2, [r0, #8]
 8028836:	4770      	bx	lr

08028838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8028838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802883a:	f100 0708 	add.w	r7, r0, #8
 802883e:	6007      	str	r7, [r0, #0]
 8028840:	4605      	mov	r5, r0
 8028842:	4608      	mov	r0, r1
 8028844:	460c      	mov	r4, r1
 8028846:	f7ff ff63 	bl	8028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802884a:	f104 0608 	add.w	r6, r4, #8
 802884e:	6862      	ldr	r2, [r4, #4]
 8028850:	b160      	cbz	r0, 802886c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8028852:	3201      	adds	r2, #1
 8028854:	4631      	mov	r1, r6
 8028856:	4638      	mov	r0, r7
 8028858:	f7ff ff44 	bl	80286e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 802885c:	6863      	ldr	r3, [r4, #4]
 802885e:	606b      	str	r3, [r5, #4]
 8028860:	2300      	movs	r3, #0
 8028862:	7223      	strb	r3, [r4, #8]
 8028864:	6026      	str	r6, [r4, #0]
 8028866:	6063      	str	r3, [r4, #4]
 8028868:	4628      	mov	r0, r5
 802886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802886c:	6823      	ldr	r3, [r4, #0]
 802886e:	602b      	str	r3, [r5, #0]
 8028870:	68a3      	ldr	r3, [r4, #8]
 8028872:	60ab      	str	r3, [r5, #8]
 8028874:	e7f2      	b.n	802885c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8028876:	b510      	push	{r4, lr}
 8028878:	4604      	mov	r4, r0
 802887a:	f7ff ff71 	bl	8028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 802887e:	4620      	mov	r0, r4
 8028880:	bd10      	pop	{r4, pc}

08028882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8028882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028884:	460c      	mov	r4, r1
 8028886:	4605      	mov	r5, r0
 8028888:	f7ff ff42 	bl	8028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802888c:	4606      	mov	r6, r0
 802888e:	4620      	mov	r0, r4
 8028890:	f7ff ff3e 	bl	8028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028894:	b190      	cbz	r0, 80288bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8028896:	42a5      	cmp	r5, r4
 8028898:	d00a      	beq.n	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 802889a:	6862      	ldr	r2, [r4, #4]
 802889c:	b11a      	cbz	r2, 80288a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 802889e:	6821      	ldr	r1, [r4, #0]
 80288a0:	6828      	ldr	r0, [r5, #0]
 80288a2:	f7ff ff8f 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288a6:	6863      	ldr	r3, [r4, #4]
 80288a8:	682a      	ldr	r2, [r5, #0]
 80288aa:	606b      	str	r3, [r5, #4]
 80288ac:	2100      	movs	r1, #0
 80288ae:	54d1      	strb	r1, [r2, r3]
 80288b0:	6822      	ldr	r2, [r4, #0]
 80288b2:	2300      	movs	r3, #0
 80288b4:	6063      	str	r3, [r4, #4]
 80288b6:	7013      	strb	r3, [r2, #0]
 80288b8:	4628      	mov	r0, r5
 80288ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80288bc:	b90e      	cbnz	r6, 80288c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80288be:	6828      	ldr	r0, [r5, #0]
 80288c0:	68af      	ldr	r7, [r5, #8]
 80288c2:	6823      	ldr	r3, [r4, #0]
 80288c4:	602b      	str	r3, [r5, #0]
 80288c6:	6863      	ldr	r3, [r4, #4]
 80288c8:	606b      	str	r3, [r5, #4]
 80288ca:	68a3      	ldr	r3, [r4, #8]
 80288cc:	60ab      	str	r3, [r5, #8]
 80288ce:	b110      	cbz	r0, 80288d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80288d0:	6020      	str	r0, [r4, #0]
 80288d2:	60a7      	str	r7, [r4, #8]
 80288d4:	e7ec      	b.n	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80288d6:	f104 0308 	add.w	r3, r4, #8
 80288da:	6023      	str	r3, [r4, #0]
 80288dc:	e7e8      	b.n	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80288de:	b510      	push	{r4, lr}
 80288e0:	4604      	mov	r4, r0
 80288e2:	f7ff ff15 	bl	8028710 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80288e6:	b908      	cbnz	r0, 80288ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80288e8:	68a0      	ldr	r0, [r4, #8]
 80288ea:	bd10      	pop	{r4, pc}
 80288ec:	200f      	movs	r0, #15
 80288ee:	e7fc      	b.n	80288ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080288f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80288f0:	4288      	cmp	r0, r1
 80288f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80288f4:	4604      	mov	r4, r0
 80288f6:	460e      	mov	r6, r1
 80288f8:	d01d      	beq.n	8028936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 80288fa:	684d      	ldr	r5, [r1, #4]
 80288fc:	f7ff ffef 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028900:	42a8      	cmp	r0, r5
 8028902:	4602      	mov	r2, r0
 8028904:	d211      	bcs.n	802892a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8028906:	a901      	add	r1, sp, #4
 8028908:	4620      	mov	r0, r4
 802890a:	9501      	str	r5, [sp, #4]
 802890c:	f7ff ff06 	bl	802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028910:	4607      	mov	r7, r0
 8028912:	4620      	mov	r0, r4
 8028914:	f7ff ff24 	bl	8028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028918:	9b01      	ldr	r3, [sp, #4]
 802891a:	6027      	str	r7, [r4, #0]
 802891c:	60a3      	str	r3, [r4, #8]
 802891e:	6831      	ldr	r1, [r6, #0]
 8028920:	6820      	ldr	r0, [r4, #0]
 8028922:	462a      	mov	r2, r5
 8028924:	f7ff ff4e 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028928:	e001      	b.n	802892e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 802892a:	2d00      	cmp	r5, #0
 802892c:	d1f7      	bne.n	802891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 802892e:	6823      	ldr	r3, [r4, #0]
 8028930:	6065      	str	r5, [r4, #4]
 8028932:	2200      	movs	r2, #0
 8028934:	555a      	strb	r2, [r3, r5]
 8028936:	b003      	add	sp, #12
 8028938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802893a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 802893a:	b510      	push	{r4, lr}
 802893c:	4604      	mov	r4, r0
 802893e:	f7ff ffd7 	bl	80288f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8028942:	4620      	mov	r0, r4
 8028944:	bd10      	pop	{r4, pc}

08028946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8028946:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802894a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802894c:	461f      	mov	r7, r3
 802894e:	6843      	ldr	r3, [r0, #4]
 8028950:	eb01 0802 	add.w	r8, r1, r2
 8028954:	1ab2      	subs	r2, r6, r2
 8028956:	441a      	add	r2, r3
 8028958:	4604      	mov	r4, r0
 802895a:	460d      	mov	r5, r1
 802895c:	eba3 0908 	sub.w	r9, r3, r8
 8028960:	9201      	str	r2, [sp, #4]
 8028962:	f7ff ffbc 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028966:	a901      	add	r1, sp, #4
 8028968:	4602      	mov	r2, r0
 802896a:	4620      	mov	r0, r4
 802896c:	f7ff fed6 	bl	802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028970:	4682      	mov	sl, r0
 8028972:	b11d      	cbz	r5, 802897c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8028974:	6821      	ldr	r1, [r4, #0]
 8028976:	462a      	mov	r2, r5
 8028978:	f7ff ff24 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802897c:	b137      	cbz	r7, 802898c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 802897e:	b12e      	cbz	r6, 802898c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8028980:	4632      	mov	r2, r6
 8028982:	4639      	mov	r1, r7
 8028984:	eb0a 0005 	add.w	r0, sl, r5
 8028988:	f7ff ff1c 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802898c:	f1b9 0f00 	cmp.w	r9, #0
 8028990:	d007      	beq.n	80289a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8028992:	6821      	ldr	r1, [r4, #0]
 8028994:	4435      	add	r5, r6
 8028996:	464a      	mov	r2, r9
 8028998:	4441      	add	r1, r8
 802899a:	eb0a 0005 	add.w	r0, sl, r5
 802899e:	f7ff ff11 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80289a2:	4620      	mov	r0, r4
 80289a4:	f7ff fedc 	bl	8028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80289a8:	9b01      	ldr	r3, [sp, #4]
 80289aa:	f8c4 a000 	str.w	sl, [r4]
 80289ae:	60a3      	str	r3, [r4, #8]
 80289b0:	b002      	add	sp, #8
 80289b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080289b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80289b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80289b8:	4604      	mov	r4, r0
 80289ba:	9101      	str	r1, [sp, #4]
 80289bc:	f7ff ff8f 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80289c0:	9b01      	ldr	r3, [sp, #4]
 80289c2:	4283      	cmp	r3, r0
 80289c4:	4602      	mov	r2, r0
 80289c6:	d90f      	bls.n	80289e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80289c8:	a901      	add	r1, sp, #4
 80289ca:	4620      	mov	r0, r4
 80289cc:	f7ff fea6 	bl	802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80289d0:	6862      	ldr	r2, [r4, #4]
 80289d2:	6821      	ldr	r1, [r4, #0]
 80289d4:	3201      	adds	r2, #1
 80289d6:	4605      	mov	r5, r0
 80289d8:	f7ff fef4 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80289dc:	4620      	mov	r0, r4
 80289de:	f7ff febf 	bl	8028760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80289e2:	9b01      	ldr	r3, [sp, #4]
 80289e4:	6025      	str	r5, [r4, #0]
 80289e6:	60a3      	str	r3, [r4, #8]
 80289e8:	b003      	add	sp, #12
 80289ea:	bd30      	pop	{r4, r5, pc}

080289ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80289ec:	6802      	ldr	r2, [r0, #0]
 80289ee:	2300      	movs	r3, #0
 80289f0:	6043      	str	r3, [r0, #4]
 80289f2:	7013      	strb	r3, [r2, #0]
 80289f4:	4770      	bx	lr

080289f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80289f6:	6840      	ldr	r0, [r0, #4]
 80289f8:	fab0 f080 	clz	r0, r0
 80289fc:	0940      	lsrs	r0, r0, #5
 80289fe:	4770      	bx	lr

08028a00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8028a00:	6800      	ldr	r0, [r0, #0]
 8028a02:	4408      	add	r0, r1
 8028a04:	4770      	bx	lr

08028a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8028a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028a08:	6846      	ldr	r6, [r0, #4]
 8028a0a:	4604      	mov	r4, r0
 8028a0c:	460f      	mov	r7, r1
 8028a0e:	f7ff ff66 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028a12:	1c75      	adds	r5, r6, #1
 8028a14:	4285      	cmp	r5, r0
 8028a16:	d907      	bls.n	8028a28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8028a18:	2301      	movs	r3, #1
 8028a1a:	9300      	str	r3, [sp, #0]
 8028a1c:	2300      	movs	r3, #0
 8028a1e:	461a      	mov	r2, r3
 8028a20:	4631      	mov	r1, r6
 8028a22:	4620      	mov	r0, r4
 8028a24:	f7ff ff8f 	bl	8028946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028a28:	6823      	ldr	r3, [r4, #0]
 8028a2a:	559f      	strb	r7, [r3, r6]
 8028a2c:	6823      	ldr	r3, [r4, #0]
 8028a2e:	6065      	str	r5, [r4, #4]
 8028a30:	2200      	movs	r2, #0
 8028a32:	555a      	strb	r2, [r3, r5]
 8028a34:	b003      	add	sp, #12
 8028a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8028a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028a3c:	4616      	mov	r6, r2
 8028a3e:	461d      	mov	r5, r3
 8028a40:	4604      	mov	r4, r0
 8028a42:	4b1b      	ldr	r3, [pc, #108]	@ (8028ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8028a44:	462a      	mov	r2, r5
 8028a46:	460f      	mov	r7, r1
 8028a48:	4631      	mov	r1, r6
 8028a4a:	f7ff fea3 	bl	8028794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028a4e:	4620      	mov	r0, r4
 8028a50:	f7ff ff45 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028a54:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8028a58:	eba5 0806 	sub.w	r8, r5, r6
 8028a5c:	44c8      	add	r8, r9
 8028a5e:	4540      	cmp	r0, r8
 8028a60:	d31d      	bcc.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8028a62:	19f3      	adds	r3, r6, r7
 8028a64:	ebb9 0203 	subs.w	r2, r9, r3
 8028a68:	d007      	beq.n	8028a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028a6a:	42ae      	cmp	r6, r5
 8028a6c:	d005      	beq.n	8028a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028a6e:	6820      	ldr	r0, [r4, #0]
 8028a70:	4438      	add	r0, r7
 8028a72:	1981      	adds	r1, r0, r6
 8028a74:	4428      	add	r0, r5
 8028a76:	f7ff feb1 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a7a:	b135      	cbz	r5, 8028a8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8028a7c:	6820      	ldr	r0, [r4, #0]
 8028a7e:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8028a82:	4629      	mov	r1, r5
 8028a84:	4438      	add	r0, r7
 8028a86:	f7ff feb5 	bl	80287f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8028a8a:	6823      	ldr	r3, [r4, #0]
 8028a8c:	f8c4 8004 	str.w	r8, [r4, #4]
 8028a90:	2200      	movs	r2, #0
 8028a92:	4620      	mov	r0, r4
 8028a94:	f803 2008 	strb.w	r2, [r3, r8]
 8028a98:	b003      	add	sp, #12
 8028a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028a9e:	9500      	str	r5, [sp, #0]
 8028aa0:	2300      	movs	r3, #0
 8028aa2:	4632      	mov	r2, r6
 8028aa4:	4639      	mov	r1, r7
 8028aa6:	4620      	mov	r0, r4
 8028aa8:	f7ff ff4d 	bl	8028946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028aac:	e7e5      	b.n	8028a7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028aae:	bf00      	nop
 8028ab0:	0802b833 	.word	0x0802b833

08028ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8028ab4:	b507      	push	{r0, r1, r2, lr}
 8028ab6:	9200      	str	r2, [sp, #0]
 8028ab8:	460b      	mov	r3, r1
 8028aba:	2200      	movs	r2, #0
 8028abc:	6841      	ldr	r1, [r0, #4]
 8028abe:	f7ff ffbb 	bl	8028a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8028ac2:	b003      	add	sp, #12
 8028ac4:	f85d fb04 	ldr.w	pc, [sp], #4

08028ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8028ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028acc:	b085      	sub	sp, #20
 8028ace:	4680      	mov	r8, r0
 8028ad0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028ad2:	4614      	mov	r4, r2
 8028ad4:	4689      	mov	r9, r1
 8028ad6:	462a      	mov	r2, r5
 8028ad8:	4621      	mov	r1, r4
 8028ada:	461f      	mov	r7, r3
 8028adc:	4b37      	ldr	r3, [pc, #220]	@ (8028bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8028ade:	f7ff fe59 	bl	8028794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028ae2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028ae6:	9303      	str	r3, [sp, #12]
 8028ae8:	eba5 0b04 	sub.w	fp, r5, r4
 8028aec:	4640      	mov	r0, r8
 8028aee:	eb03 0a0b 	add.w	sl, r3, fp
 8028af2:	f7ff fef4 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028af6:	4550      	cmp	r0, sl
 8028af8:	d354      	bcc.n	8028ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8028afa:	f8d8 6000 	ldr.w	r6, [r8]
 8028afe:	9b03      	ldr	r3, [sp, #12]
 8028b00:	444e      	add	r6, r9
 8028b02:	4639      	mov	r1, r7
 8028b04:	44a1      	add	r9, r4
 8028b06:	4640      	mov	r0, r8
 8028b08:	eba3 0909 	sub.w	r9, r3, r9
 8028b0c:	f7ff fe4e 	bl	80287ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8028b10:	b180      	cbz	r0, 8028b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8028b12:	f1b9 0f00 	cmp.w	r9, #0
 8028b16:	d006      	beq.n	8028b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028b18:	42ac      	cmp	r4, r5
 8028b1a:	d004      	beq.n	8028b26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028b1c:	464a      	mov	r2, r9
 8028b1e:	1931      	adds	r1, r6, r4
 8028b20:	1970      	adds	r0, r6, r5
 8028b22:	f7ff fe5b 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b26:	b315      	cbz	r5, 8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028b28:	462a      	mov	r2, r5
 8028b2a:	4639      	mov	r1, r7
 8028b2c:	4630      	mov	r0, r6
 8028b2e:	f7ff fe49 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028b32:	e01c      	b.n	8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028b34:	b135      	cbz	r5, 8028b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8028b36:	42ac      	cmp	r4, r5
 8028b38:	d33c      	bcc.n	8028bb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8028b3a:	462a      	mov	r2, r5
 8028b3c:	4639      	mov	r1, r7
 8028b3e:	4630      	mov	r0, r6
 8028b40:	f7ff fe4c 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b44:	f1b9 0f00 	cmp.w	r9, #0
 8028b48:	d011      	beq.n	8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028b4a:	42ac      	cmp	r4, r5
 8028b4c:	d00f      	beq.n	8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028b4e:	464a      	mov	r2, r9
 8028b50:	1931      	adds	r1, r6, r4
 8028b52:	1970      	adds	r0, r6, r5
 8028b54:	f7ff fe42 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b58:	42ac      	cmp	r4, r5
 8028b5a:	d208      	bcs.n	8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028b5c:	4434      	add	r4, r6
 8028b5e:	197b      	adds	r3, r7, r5
 8028b60:	429c      	cmp	r4, r3
 8028b62:	d30f      	bcc.n	8028b84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8028b64:	462a      	mov	r2, r5
 8028b66:	4639      	mov	r1, r7
 8028b68:	4630      	mov	r0, r6
 8028b6a:	f7ff fe37 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8028b72:	f8c8 a004 	str.w	sl, [r8, #4]
 8028b76:	2200      	movs	r2, #0
 8028b78:	4640      	mov	r0, r8
 8028b7a:	f803 200a 	strb.w	r2, [r3, sl]
 8028b7e:	b005      	add	sp, #20
 8028b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b84:	42bc      	cmp	r4, r7
 8028b86:	d803      	bhi.n	8028b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8028b88:	462a      	mov	r2, r5
 8028b8a:	eb07 010b 	add.w	r1, r7, fp
 8028b8e:	e7cd      	b.n	8028b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8028b90:	1be4      	subs	r4, r4, r7
 8028b92:	4622      	mov	r2, r4
 8028b94:	4639      	mov	r1, r7
 8028b96:	4630      	mov	r0, r6
 8028b98:	f7ff fe20 	bl	80287dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b9c:	1b2a      	subs	r2, r5, r4
 8028b9e:	1971      	adds	r1, r6, r5
 8028ba0:	1930      	adds	r0, r6, r4
 8028ba2:	e7c4      	b.n	8028b2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8028ba4:	9500      	str	r5, [sp, #0]
 8028ba6:	463b      	mov	r3, r7
 8028ba8:	4622      	mov	r2, r4
 8028baa:	4649      	mov	r1, r9
 8028bac:	4640      	mov	r0, r8
 8028bae:	f7ff feca 	bl	8028946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028bb2:	e7dc      	b.n	8028b6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028bb4:	f1b9 0f00 	cmp.w	r9, #0
 8028bb8:	d0d0      	beq.n	8028b5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8028bba:	e7c8      	b.n	8028b4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8028bbc:	0802b850 	.word	0x0802b850

08028bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 8028bc0:	b507      	push	{r0, r1, r2, lr}
 8028bc2:	9200      	str	r2, [sp, #0]
 8028bc4:	460b      	mov	r3, r1
 8028bc6:	6842      	ldr	r2, [r0, #4]
 8028bc8:	2100      	movs	r1, #0
 8028bca:	f7ff ff7d 	bl	8028ac8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8028bce:	b003      	add	sp, #12
 8028bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08028bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8028bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028bd8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8028bdc:	4604      	mov	r4, r0
 8028bde:	eb02 0708 	add.w	r7, r2, r8
 8028be2:	460e      	mov	r6, r1
 8028be4:	4615      	mov	r5, r2
 8028be6:	f7ff fe7a 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028bea:	42b8      	cmp	r0, r7
 8028bec:	d30e      	bcc.n	8028c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8028bee:	b12d      	cbz	r5, 8028bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8028bf0:	6820      	ldr	r0, [r4, #0]
 8028bf2:	462a      	mov	r2, r5
 8028bf4:	4631      	mov	r1, r6
 8028bf6:	4440      	add	r0, r8
 8028bf8:	f7ff fde4 	bl	80287c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028bfc:	6823      	ldr	r3, [r4, #0]
 8028bfe:	6067      	str	r7, [r4, #4]
 8028c00:	2200      	movs	r2, #0
 8028c02:	4620      	mov	r0, r4
 8028c04:	55da      	strb	r2, [r3, r7]
 8028c06:	b002      	add	sp, #8
 8028c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c0c:	9500      	str	r5, [sp, #0]
 8028c0e:	4633      	mov	r3, r6
 8028c10:	2200      	movs	r2, #0
 8028c12:	4641      	mov	r1, r8
 8028c14:	4620      	mov	r0, r4
 8028c16:	f7ff fe96 	bl	8028946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028c1a:	e7ef      	b.n	8028bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08028c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8028c1c:	b570      	push	{r4, r5, r6, lr}
 8028c1e:	4b06      	ldr	r3, [pc, #24]	@ (8028c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8028c20:	4604      	mov	r4, r0
 8028c22:	460d      	mov	r5, r1
 8028c24:	4616      	mov	r6, r2
 8028c26:	2100      	movs	r1, #0
 8028c28:	f7ff fdb4 	bl	8028794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028c2c:	4632      	mov	r2, r6
 8028c2e:	4629      	mov	r1, r5
 8028c30:	4620      	mov	r0, r4
 8028c32:	f7ff ffcf 	bl	8028bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8028c36:	bd70      	pop	{r4, r5, r6, pc}
 8028c38:	0802b869 	.word	0x0802b869

08028c3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8028c3c:	6800      	ldr	r0, [r0, #0]
 8028c3e:	4770      	bx	lr

08028c40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8028c40:	b538      	push	{r3, r4, r5, lr}
 8028c42:	6845      	ldr	r5, [r0, #4]
 8028c44:	684c      	ldr	r4, [r1, #4]
 8028c46:	6800      	ldr	r0, [r0, #0]
 8028c48:	6809      	ldr	r1, [r1, #0]
 8028c4a:	42a5      	cmp	r5, r4
 8028c4c:	462a      	mov	r2, r5
 8028c4e:	bf28      	it	cs
 8028c50:	4622      	movcs	r2, r4
 8028c52:	f7ff fd4b 	bl	80286ec <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8028c56:	b900      	cbnz	r0, 8028c5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8028c58:	1b28      	subs	r0, r5, r4
 8028c5a:	bd38      	pop	{r3, r4, r5, pc}

08028c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8028c5c:	6001      	str	r1, [r0, #0]
 8028c5e:	4770      	bx	lr

08028c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8028c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028c62:	1a53      	subs	r3, r2, r1
 8028c64:	2b0f      	cmp	r3, #15
 8028c66:	4604      	mov	r4, r0
 8028c68:	460d      	mov	r5, r1
 8028c6a:	4616      	mov	r6, r2
 8028c6c:	9301      	str	r3, [sp, #4]
 8028c6e:	d906      	bls.n	8028c7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8028c70:	2200      	movs	r2, #0
 8028c72:	a901      	add	r1, sp, #4
 8028c74:	f7ff fd52 	bl	802871c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028c78:	9b01      	ldr	r3, [sp, #4]
 8028c7a:	6020      	str	r0, [r4, #0]
 8028c7c:	60a3      	str	r3, [r4, #8]
 8028c7e:	4632      	mov	r2, r6
 8028c80:	4629      	mov	r1, r5
 8028c82:	6820      	ldr	r0, [r4, #0]
 8028c84:	f7ff fdc7 	bl	8028816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8028c88:	9b01      	ldr	r3, [sp, #4]
 8028c8a:	6822      	ldr	r2, [r4, #0]
 8028c8c:	6063      	str	r3, [r4, #4]
 8028c8e:	2100      	movs	r1, #0
 8028c90:	54d1      	strb	r1, [r2, r3]
 8028c92:	b002      	add	sp, #8
 8028c94:	bd70      	pop	{r4, r5, r6, pc}

08028c96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8028c96:	f100 0208 	add.w	r2, r0, #8
 8028c9a:	b510      	push	{r4, lr}
 8028c9c:	6002      	str	r2, [r0, #0]
 8028c9e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8028ca2:	4604      	mov	r4, r0
 8028ca4:	f04f 0300 	mov.w	r3, #0
 8028ca8:	440a      	add	r2, r1
 8028caa:	f7ff ffd9 	bl	8028c60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8028cae:	4620      	mov	r0, r4
 8028cb0:	bd10      	pop	{r4, pc}
	...

08028cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8028cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cb8:	4698      	mov	r8, r3
 8028cba:	f100 0308 	add.w	r3, r0, #8
 8028cbe:	460d      	mov	r5, r1
 8028cc0:	4617      	mov	r7, r2
 8028cc2:	6003      	str	r3, [r0, #0]
 8028cc4:	680e      	ldr	r6, [r1, #0]
 8028cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8028cf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8028cc8:	4604      	mov	r4, r0
 8028cca:	4639      	mov	r1, r7
 8028ccc:	4628      	mov	r0, r5
 8028cce:	f7ff fd53 	bl	8028778 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028cd2:	686a      	ldr	r2, [r5, #4]
 8028cd4:	1831      	adds	r1, r6, r0
 8028cd6:	1bd2      	subs	r2, r2, r7
 8028cd8:	4620      	mov	r0, r4
 8028cda:	f04f 0300 	mov.w	r3, #0
 8028cde:	4542      	cmp	r2, r8
 8028ce0:	bf94      	ite	ls
 8028ce2:	188a      	addls	r2, r1, r2
 8028ce4:	eb01 0208 	addhi.w	r2, r1, r8
 8028ce8:	f7de ff95 	bl	8007c16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8028cec:	4620      	mov	r0, r4
 8028cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cf2:	bf00      	nop
 8028cf4:	0802b87e 	.word	0x0802b87e

08028cf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8028cf8:	b570      	push	{r4, r5, r6, lr}
 8028cfa:	460d      	mov	r5, r1
 8028cfc:	4604      	mov	r4, r0
 8028cfe:	4611      	mov	r1, r2
 8028d00:	4628      	mov	r0, r5
 8028d02:	4a06      	ldr	r2, [pc, #24]	@ (8028d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8028d04:	461e      	mov	r6, r3
 8028d06:	f7ff fd37 	bl	8028778 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028d0a:	4633      	mov	r3, r6
 8028d0c:	4602      	mov	r2, r0
 8028d0e:	4629      	mov	r1, r5
 8028d10:	4620      	mov	r0, r4
 8028d12:	f7ff ffcf 	bl	8028cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8028d16:	4620      	mov	r0, r4
 8028d18:	bd70      	pop	{r4, r5, r6, pc}
 8028d1a:	bf00      	nop
 8028d1c:	0802b899 	.word	0x0802b899

08028d20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8028d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028d22:	2400      	movs	r4, #0
 8028d24:	2310      	movs	r3, #16
 8028d26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8028d2a:	6803      	ldr	r3, [r0, #0]
 8028d2c:	4615      	mov	r5, r2
 8028d2e:	699e      	ldr	r6, [r3, #24]
 8028d30:	6812      	ldr	r2, [r2, #0]
 8028d32:	466b      	mov	r3, sp
 8028d34:	e9cd 4400 	strd	r4, r4, [sp]
 8028d38:	47b0      	blx	r6
 8028d3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8028d3e:	f003 0306 	and.w	r3, r3, #6
 8028d42:	2b06      	cmp	r3, #6
 8028d44:	bf03      	ittte	eq
 8028d46:	9b00      	ldreq	r3, [sp, #0]
 8028d48:	602b      	streq	r3, [r5, #0]
 8028d4a:	2001      	moveq	r0, #1
 8028d4c:	4620      	movne	r0, r4
 8028d4e:	b004      	add	sp, #16
 8028d50:	bd70      	pop	{r4, r5, r6, pc}

08028d52 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8028d52:	9800      	ldr	r0, [sp, #0]
 8028d54:	4290      	cmp	r0, r2
 8028d56:	bf0c      	ite	eq
 8028d58:	2006      	moveq	r0, #6
 8028d5a:	2001      	movne	r0, #1
 8028d5c:	4770      	bx	lr
	...

08028d60 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8028d60:	b510      	push	{r4, lr}
 8028d62:	4b03      	ldr	r3, [pc, #12]	@ (8028d70 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8028d64:	6003      	str	r3, [r0, #0]
 8028d66:	4604      	mov	r4, r0
 8028d68:	f000 f8d9 	bl	8028f1e <_ZNSt9type_infoD1Ev>
 8028d6c:	4620      	mov	r0, r4
 8028d6e:	bd10      	pop	{r4, pc}
 8028d70:	0802b8e4 	.word	0x0802b8e4

08028d74 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8028d74:	b510      	push	{r4, lr}
 8028d76:	4604      	mov	r4, r0
 8028d78:	f7ff fff2 	bl	8028d60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028d7c:	4620      	mov	r0, r4
 8028d7e:	2108      	movs	r1, #8
 8028d80:	f7ff fc6d 	bl	802865e <_ZdlPvj>
 8028d84:	4620      	mov	r0, r4
 8028d86:	bd10      	pop	{r4, pc}

08028d88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8028d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d8c:	461f      	mov	r7, r3
 8028d8e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8028d92:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028d96:	4598      	cmp	r8, r3
 8028d98:	4606      	mov	r6, r0
 8028d9a:	4615      	mov	r5, r2
 8028d9c:	d107      	bne.n	8028dae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028d9e:	9907      	ldr	r1, [sp, #28]
 8028da0:	f000 f8c0 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028da4:	b118      	cbz	r0, 8028dae <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028da6:	7165      	strb	r5, [r4, #5]
 8028da8:	2000      	movs	r0, #0
 8028daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028dae:	4639      	mov	r1, r7
 8028db0:	4630      	mov	r0, r6
 8028db2:	f000 f8b7 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028db6:	2800      	cmp	r0, #0
 8028db8:	d0f6      	beq.n	8028da8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8028dba:	2301      	movs	r3, #1
 8028dbc:	f8c4 8000 	str.w	r8, [r4]
 8028dc0:	7125      	strb	r5, [r4, #4]
 8028dc2:	71a3      	strb	r3, [r4, #6]
 8028dc4:	e7f0      	b.n	8028da8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08028dc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8028dc6:	b538      	push	{r3, r4, r5, lr}
 8028dc8:	4615      	mov	r5, r2
 8028dca:	461c      	mov	r4, r3
 8028dcc:	f000 f8aa 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028dd0:	b120      	cbz	r0, 8028ddc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8028dd2:	2308      	movs	r3, #8
 8028dd4:	60e3      	str	r3, [r4, #12]
 8028dd6:	2306      	movs	r3, #6
 8028dd8:	6025      	str	r5, [r4, #0]
 8028dda:	7123      	strb	r3, [r4, #4]
 8028ddc:	bd38      	pop	{r3, r4, r5, pc}

08028dde <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8028dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028de2:	4605      	mov	r5, r0
 8028de4:	460c      	mov	r4, r1
 8028de6:	4616      	mov	r6, r2
 8028de8:	461f      	mov	r7, r3
 8028dea:	f000 f89b 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028dee:	b948      	cbnz	r0, 8028e04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028df0:	2f03      	cmp	r7, #3
 8028df2:	d807      	bhi.n	8028e04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028df4:	6823      	ldr	r3, [r4, #0]
 8028df6:	4632      	mov	r2, r6
 8028df8:	4629      	mov	r1, r5
 8028dfa:	4620      	mov	r0, r4
 8028dfc:	695b      	ldr	r3, [r3, #20]
 8028dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e02:	4718      	bx	r3
 8028e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028e08 <_ZdlPv>:
 8028e08:	f000 b8b2 	b.w	8028f70 <free>

08028e0c <_ZSt15get_new_handlerv>:
 8028e0c:	4b02      	ldr	r3, [pc, #8]	@ (8028e18 <_ZSt15get_new_handlerv+0xc>)
 8028e0e:	6818      	ldr	r0, [r3, #0]
 8028e10:	f3bf 8f5b 	dmb	ish
 8028e14:	4770      	bx	lr
 8028e16:	bf00      	nop
 8028e18:	24000ac0 	.word	0x24000ac0

08028e1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8028e1c:	b510      	push	{r4, lr}
 8028e1e:	4b03      	ldr	r3, [pc, #12]	@ (8028e2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8028e20:	6003      	str	r3, [r0, #0]
 8028e22:	4604      	mov	r4, r0
 8028e24:	f7ff ff9c 	bl	8028d60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028e28:	4620      	mov	r0, r4
 8028e2a:	bd10      	pop	{r4, pc}
 8028e2c:	0802b944 	.word	0x0802b944

08028e30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8028e30:	b510      	push	{r4, lr}
 8028e32:	4604      	mov	r4, r0
 8028e34:	f7ff fff2 	bl	8028e1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8028e38:	4620      	mov	r0, r4
 8028e3a:	210c      	movs	r1, #12
 8028e3c:	f7ff fc0f 	bl	802865e <_ZdlPvj>
 8028e40:	4620      	mov	r0, r4
 8028e42:	bd10      	pop	{r4, pc}

08028e44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8028e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028e4c:	4590      	cmp	r8, r2
 8028e4e:	4606      	mov	r6, r0
 8028e50:	460f      	mov	r7, r1
 8028e52:	4615      	mov	r5, r2
 8028e54:	461c      	mov	r4, r3
 8028e56:	d00b      	beq.n	8028e70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8028e58:	68b0      	ldr	r0, [r6, #8]
 8028e5a:	6803      	ldr	r3, [r0, #0]
 8028e5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8028e60:	6a1e      	ldr	r6, [r3, #32]
 8028e62:	462a      	mov	r2, r5
 8028e64:	4623      	mov	r3, r4
 8028e66:	4639      	mov	r1, r7
 8028e68:	46b4      	mov	ip, r6
 8028e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e6e:	4760      	bx	ip
 8028e70:	4619      	mov	r1, r3
 8028e72:	f000 f857 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028e76:	2800      	cmp	r0, #0
 8028e78:	d0ee      	beq.n	8028e58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8028e7a:	2006      	movs	r0, #6
 8028e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028e80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8028e80:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e84:	460d      	mov	r5, r1
 8028e86:	4619      	mov	r1, r3
 8028e88:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8028e8c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8028e90:	4681      	mov	r9, r0
 8028e92:	4617      	mov	r7, r2
 8028e94:	4698      	mov	r8, r3
 8028e96:	f000 f845 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028e9a:	b190      	cbz	r0, 8028ec2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8028e9c:	2d00      	cmp	r5, #0
 8028e9e:	6034      	str	r4, [r6, #0]
 8028ea0:	7137      	strb	r7, [r6, #4]
 8028ea2:	db09      	blt.n	8028eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8028ea4:	442c      	add	r4, r5
 8028ea6:	45a2      	cmp	sl, r4
 8028ea8:	bf14      	ite	ne
 8028eaa:	2401      	movne	r4, #1
 8028eac:	2406      	moveq	r4, #6
 8028eae:	71b4      	strb	r4, [r6, #6]
 8028eb0:	2000      	movs	r0, #0
 8028eb2:	b001      	add	sp, #4
 8028eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028eb8:	3502      	adds	r5, #2
 8028eba:	d1f9      	bne.n	8028eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028ebc:	2301      	movs	r3, #1
 8028ebe:	71b3      	strb	r3, [r6, #6]
 8028ec0:	e7f6      	b.n	8028eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028ec2:	4554      	cmp	r4, sl
 8028ec4:	d106      	bne.n	8028ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028ec6:	4659      	mov	r1, fp
 8028ec8:	4648      	mov	r0, r9
 8028eca:	f000 f82b 	bl	8028f24 <_ZNKSt9type_info7__equalERKS_>
 8028ece:	b108      	cbz	r0, 8028ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028ed0:	7177      	strb	r7, [r6, #5]
 8028ed2:	e7ed      	b.n	8028eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028ed4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8028ed8:	6803      	ldr	r3, [r0, #0]
 8028eda:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8028ede:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8028ee2:	69dc      	ldr	r4, [r3, #28]
 8028ee4:	463a      	mov	r2, r7
 8028ee6:	4643      	mov	r3, r8
 8028ee8:	4629      	mov	r1, r5
 8028eea:	46a4      	mov	ip, r4
 8028eec:	b001      	add	sp, #4
 8028eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ef2:	4760      	bx	ip

08028ef4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8028ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ef8:	4607      	mov	r7, r0
 8028efa:	460c      	mov	r4, r1
 8028efc:	4615      	mov	r5, r2
 8028efe:	461e      	mov	r6, r3
 8028f00:	f7ff ff61 	bl	8028dc6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8028f04:	b948      	cbnz	r0, 8028f1a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8028f06:	68b8      	ldr	r0, [r7, #8]
 8028f08:	6803      	ldr	r3, [r0, #0]
 8028f0a:	699f      	ldr	r7, [r3, #24]
 8028f0c:	462a      	mov	r2, r5
 8028f0e:	4633      	mov	r3, r6
 8028f10:	4621      	mov	r1, r4
 8028f12:	46bc      	mov	ip, r7
 8028f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028f18:	4760      	bx	ip
 8028f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028f1e <_ZNSt9type_infoD1Ev>:
 8028f1e:	4770      	bx	lr

08028f20 <_ZNKSt9type_info14__is_pointer_pEv>:
 8028f20:	2000      	movs	r0, #0
 8028f22:	4770      	bx	lr

08028f24 <_ZNKSt9type_info7__equalERKS_>:
 8028f24:	4281      	cmp	r1, r0
 8028f26:	b508      	push	{r3, lr}
 8028f28:	d00e      	beq.n	8028f48 <_ZNKSt9type_info7__equalERKS_+0x24>
 8028f2a:	6840      	ldr	r0, [r0, #4]
 8028f2c:	7803      	ldrb	r3, [r0, #0]
 8028f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028f30:	d00c      	beq.n	8028f4c <_ZNKSt9type_info7__equalERKS_+0x28>
 8028f32:	6849      	ldr	r1, [r1, #4]
 8028f34:	780b      	ldrb	r3, [r1, #0]
 8028f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8028f38:	bf08      	it	eq
 8028f3a:	3101      	addeq	r1, #1
 8028f3c:	f7d7 f9d0 	bl	80002e0 <strcmp>
 8028f40:	fab0 f080 	clz	r0, r0
 8028f44:	0940      	lsrs	r0, r0, #5
 8028f46:	bd08      	pop	{r3, pc}
 8028f48:	2001      	movs	r0, #1
 8028f4a:	e7fc      	b.n	8028f46 <_ZNKSt9type_info7__equalERKS_+0x22>
 8028f4c:	2000      	movs	r0, #0
 8028f4e:	e7fa      	b.n	8028f46 <_ZNKSt9type_info7__equalERKS_+0x22>

08028f50 <abort>:
 8028f50:	b508      	push	{r3, lr}
 8028f52:	2006      	movs	r0, #6
 8028f54:	f000 fbe8 	bl	8029728 <raise>
 8028f58:	2001      	movs	r0, #1
 8028f5a:	f7e6 f823 	bl	800efa4 <_exit>
	...

08028f60 <malloc>:
 8028f60:	4b02      	ldr	r3, [pc, #8]	@ (8028f6c <malloc+0xc>)
 8028f62:	4601      	mov	r1, r0
 8028f64:	6818      	ldr	r0, [r3, #0]
 8028f66:	f000 b82d 	b.w	8028fc4 <_malloc_r>
 8028f6a:	bf00      	nop
 8028f6c:	24000038 	.word	0x24000038

08028f70 <free>:
 8028f70:	4b02      	ldr	r3, [pc, #8]	@ (8028f7c <free+0xc>)
 8028f72:	4601      	mov	r1, r0
 8028f74:	6818      	ldr	r0, [r3, #0]
 8028f76:	f000 bc85 	b.w	8029884 <_free_r>
 8028f7a:	bf00      	nop
 8028f7c:	24000038 	.word	0x24000038

08028f80 <sbrk_aligned>:
 8028f80:	b570      	push	{r4, r5, r6, lr}
 8028f82:	4e0f      	ldr	r6, [pc, #60]	@ (8028fc0 <sbrk_aligned+0x40>)
 8028f84:	460c      	mov	r4, r1
 8028f86:	6831      	ldr	r1, [r6, #0]
 8028f88:	4605      	mov	r5, r0
 8028f8a:	b911      	cbnz	r1, 8028f92 <sbrk_aligned+0x12>
 8028f8c:	f000 fc1c 	bl	80297c8 <_sbrk_r>
 8028f90:	6030      	str	r0, [r6, #0]
 8028f92:	4621      	mov	r1, r4
 8028f94:	4628      	mov	r0, r5
 8028f96:	f000 fc17 	bl	80297c8 <_sbrk_r>
 8028f9a:	1c43      	adds	r3, r0, #1
 8028f9c:	d103      	bne.n	8028fa6 <sbrk_aligned+0x26>
 8028f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8028fa2:	4620      	mov	r0, r4
 8028fa4:	bd70      	pop	{r4, r5, r6, pc}
 8028fa6:	1cc4      	adds	r4, r0, #3
 8028fa8:	f024 0403 	bic.w	r4, r4, #3
 8028fac:	42a0      	cmp	r0, r4
 8028fae:	d0f8      	beq.n	8028fa2 <sbrk_aligned+0x22>
 8028fb0:	1a21      	subs	r1, r4, r0
 8028fb2:	4628      	mov	r0, r5
 8028fb4:	f000 fc08 	bl	80297c8 <_sbrk_r>
 8028fb8:	3001      	adds	r0, #1
 8028fba:	d1f2      	bne.n	8028fa2 <sbrk_aligned+0x22>
 8028fbc:	e7ef      	b.n	8028f9e <sbrk_aligned+0x1e>
 8028fbe:	bf00      	nop
 8028fc0:	24000ac4 	.word	0x24000ac4

08028fc4 <_malloc_r>:
 8028fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028fc8:	1ccd      	adds	r5, r1, #3
 8028fca:	f025 0503 	bic.w	r5, r5, #3
 8028fce:	3508      	adds	r5, #8
 8028fd0:	2d0c      	cmp	r5, #12
 8028fd2:	bf38      	it	cc
 8028fd4:	250c      	movcc	r5, #12
 8028fd6:	2d00      	cmp	r5, #0
 8028fd8:	4606      	mov	r6, r0
 8028fda:	db01      	blt.n	8028fe0 <_malloc_r+0x1c>
 8028fdc:	42a9      	cmp	r1, r5
 8028fde:	d904      	bls.n	8028fea <_malloc_r+0x26>
 8028fe0:	230c      	movs	r3, #12
 8028fe2:	6033      	str	r3, [r6, #0]
 8028fe4:	2000      	movs	r0, #0
 8028fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80290c0 <_malloc_r+0xfc>
 8028fee:	f000 f869 	bl	80290c4 <__malloc_lock>
 8028ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8028ff6:	461c      	mov	r4, r3
 8028ff8:	bb44      	cbnz	r4, 802904c <_malloc_r+0x88>
 8028ffa:	4629      	mov	r1, r5
 8028ffc:	4630      	mov	r0, r6
 8028ffe:	f7ff ffbf 	bl	8028f80 <sbrk_aligned>
 8029002:	1c43      	adds	r3, r0, #1
 8029004:	4604      	mov	r4, r0
 8029006:	d158      	bne.n	80290ba <_malloc_r+0xf6>
 8029008:	f8d8 4000 	ldr.w	r4, [r8]
 802900c:	4627      	mov	r7, r4
 802900e:	2f00      	cmp	r7, #0
 8029010:	d143      	bne.n	802909a <_malloc_r+0xd6>
 8029012:	2c00      	cmp	r4, #0
 8029014:	d04b      	beq.n	80290ae <_malloc_r+0xea>
 8029016:	6823      	ldr	r3, [r4, #0]
 8029018:	4639      	mov	r1, r7
 802901a:	4630      	mov	r0, r6
 802901c:	eb04 0903 	add.w	r9, r4, r3
 8029020:	f000 fbd2 	bl	80297c8 <_sbrk_r>
 8029024:	4581      	cmp	r9, r0
 8029026:	d142      	bne.n	80290ae <_malloc_r+0xea>
 8029028:	6821      	ldr	r1, [r4, #0]
 802902a:	1a6d      	subs	r5, r5, r1
 802902c:	4629      	mov	r1, r5
 802902e:	4630      	mov	r0, r6
 8029030:	f7ff ffa6 	bl	8028f80 <sbrk_aligned>
 8029034:	3001      	adds	r0, #1
 8029036:	d03a      	beq.n	80290ae <_malloc_r+0xea>
 8029038:	6823      	ldr	r3, [r4, #0]
 802903a:	442b      	add	r3, r5
 802903c:	6023      	str	r3, [r4, #0]
 802903e:	f8d8 3000 	ldr.w	r3, [r8]
 8029042:	685a      	ldr	r2, [r3, #4]
 8029044:	bb62      	cbnz	r2, 80290a0 <_malloc_r+0xdc>
 8029046:	f8c8 7000 	str.w	r7, [r8]
 802904a:	e00f      	b.n	802906c <_malloc_r+0xa8>
 802904c:	6822      	ldr	r2, [r4, #0]
 802904e:	1b52      	subs	r2, r2, r5
 8029050:	d420      	bmi.n	8029094 <_malloc_r+0xd0>
 8029052:	2a0b      	cmp	r2, #11
 8029054:	d917      	bls.n	8029086 <_malloc_r+0xc2>
 8029056:	1961      	adds	r1, r4, r5
 8029058:	42a3      	cmp	r3, r4
 802905a:	6025      	str	r5, [r4, #0]
 802905c:	bf18      	it	ne
 802905e:	6059      	strne	r1, [r3, #4]
 8029060:	6863      	ldr	r3, [r4, #4]
 8029062:	bf08      	it	eq
 8029064:	f8c8 1000 	streq.w	r1, [r8]
 8029068:	5162      	str	r2, [r4, r5]
 802906a:	604b      	str	r3, [r1, #4]
 802906c:	4630      	mov	r0, r6
 802906e:	f000 f82f 	bl	80290d0 <__malloc_unlock>
 8029072:	f104 000b 	add.w	r0, r4, #11
 8029076:	1d23      	adds	r3, r4, #4
 8029078:	f020 0007 	bic.w	r0, r0, #7
 802907c:	1ac2      	subs	r2, r0, r3
 802907e:	bf1c      	itt	ne
 8029080:	1a1b      	subne	r3, r3, r0
 8029082:	50a3      	strne	r3, [r4, r2]
 8029084:	e7af      	b.n	8028fe6 <_malloc_r+0x22>
 8029086:	6862      	ldr	r2, [r4, #4]
 8029088:	42a3      	cmp	r3, r4
 802908a:	bf0c      	ite	eq
 802908c:	f8c8 2000 	streq.w	r2, [r8]
 8029090:	605a      	strne	r2, [r3, #4]
 8029092:	e7eb      	b.n	802906c <_malloc_r+0xa8>
 8029094:	4623      	mov	r3, r4
 8029096:	6864      	ldr	r4, [r4, #4]
 8029098:	e7ae      	b.n	8028ff8 <_malloc_r+0x34>
 802909a:	463c      	mov	r4, r7
 802909c:	687f      	ldr	r7, [r7, #4]
 802909e:	e7b6      	b.n	802900e <_malloc_r+0x4a>
 80290a0:	461a      	mov	r2, r3
 80290a2:	685b      	ldr	r3, [r3, #4]
 80290a4:	42a3      	cmp	r3, r4
 80290a6:	d1fb      	bne.n	80290a0 <_malloc_r+0xdc>
 80290a8:	2300      	movs	r3, #0
 80290aa:	6053      	str	r3, [r2, #4]
 80290ac:	e7de      	b.n	802906c <_malloc_r+0xa8>
 80290ae:	230c      	movs	r3, #12
 80290b0:	6033      	str	r3, [r6, #0]
 80290b2:	4630      	mov	r0, r6
 80290b4:	f000 f80c 	bl	80290d0 <__malloc_unlock>
 80290b8:	e794      	b.n	8028fe4 <_malloc_r+0x20>
 80290ba:	6005      	str	r5, [r0, #0]
 80290bc:	e7d6      	b.n	802906c <_malloc_r+0xa8>
 80290be:	bf00      	nop
 80290c0:	24000ac8 	.word	0x24000ac8

080290c4 <__malloc_lock>:
 80290c4:	4801      	ldr	r0, [pc, #4]	@ (80290cc <__malloc_lock+0x8>)
 80290c6:	f000 bbcc 	b.w	8029862 <__retarget_lock_acquire_recursive>
 80290ca:	bf00      	nop
 80290cc:	24000c0c 	.word	0x24000c0c

080290d0 <__malloc_unlock>:
 80290d0:	4801      	ldr	r0, [pc, #4]	@ (80290d8 <__malloc_unlock+0x8>)
 80290d2:	f000 bbc7 	b.w	8029864 <__retarget_lock_release_recursive>
 80290d6:	bf00      	nop
 80290d8:	24000c0c 	.word	0x24000c0c

080290dc <realloc>:
 80290dc:	4b02      	ldr	r3, [pc, #8]	@ (80290e8 <realloc+0xc>)
 80290de:	460a      	mov	r2, r1
 80290e0:	4601      	mov	r1, r0
 80290e2:	6818      	ldr	r0, [r3, #0]
 80290e4:	f000 b802 	b.w	80290ec <_realloc_r>
 80290e8:	24000038 	.word	0x24000038

080290ec <_realloc_r>:
 80290ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80290f0:	4680      	mov	r8, r0
 80290f2:	4615      	mov	r5, r2
 80290f4:	460c      	mov	r4, r1
 80290f6:	b921      	cbnz	r1, 8029102 <_realloc_r+0x16>
 80290f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80290fc:	4611      	mov	r1, r2
 80290fe:	f7ff bf61 	b.w	8028fc4 <_malloc_r>
 8029102:	b92a      	cbnz	r2, 8029110 <_realloc_r+0x24>
 8029104:	f000 fbbe 	bl	8029884 <_free_r>
 8029108:	2400      	movs	r4, #0
 802910a:	4620      	mov	r0, r4
 802910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029110:	f000 fc02 	bl	8029918 <_malloc_usable_size_r>
 8029114:	4285      	cmp	r5, r0
 8029116:	4606      	mov	r6, r0
 8029118:	d802      	bhi.n	8029120 <_realloc_r+0x34>
 802911a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802911e:	d8f4      	bhi.n	802910a <_realloc_r+0x1e>
 8029120:	4629      	mov	r1, r5
 8029122:	4640      	mov	r0, r8
 8029124:	f7ff ff4e 	bl	8028fc4 <_malloc_r>
 8029128:	4607      	mov	r7, r0
 802912a:	2800      	cmp	r0, #0
 802912c:	d0ec      	beq.n	8029108 <_realloc_r+0x1c>
 802912e:	42b5      	cmp	r5, r6
 8029130:	462a      	mov	r2, r5
 8029132:	4621      	mov	r1, r4
 8029134:	bf28      	it	cs
 8029136:	4632      	movcs	r2, r6
 8029138:	f000 fb95 	bl	8029866 <memcpy>
 802913c:	4621      	mov	r1, r4
 802913e:	4640      	mov	r0, r8
 8029140:	f000 fba0 	bl	8029884 <_free_r>
 8029144:	463c      	mov	r4, r7
 8029146:	e7e0      	b.n	802910a <_realloc_r+0x1e>

08029148 <_strtol_l.constprop.0>:
 8029148:	2b24      	cmp	r3, #36	@ 0x24
 802914a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802914e:	4686      	mov	lr, r0
 8029150:	4690      	mov	r8, r2
 8029152:	d801      	bhi.n	8029158 <_strtol_l.constprop.0+0x10>
 8029154:	2b01      	cmp	r3, #1
 8029156:	d106      	bne.n	8029166 <_strtol_l.constprop.0+0x1e>
 8029158:	f000 fb58 	bl	802980c <__errno>
 802915c:	2316      	movs	r3, #22
 802915e:	6003      	str	r3, [r0, #0]
 8029160:	2000      	movs	r0, #0
 8029162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029166:	4834      	ldr	r0, [pc, #208]	@ (8029238 <_strtol_l.constprop.0+0xf0>)
 8029168:	460d      	mov	r5, r1
 802916a:	462a      	mov	r2, r5
 802916c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029170:	5d06      	ldrb	r6, [r0, r4]
 8029172:	f016 0608 	ands.w	r6, r6, #8
 8029176:	d1f8      	bne.n	802916a <_strtol_l.constprop.0+0x22>
 8029178:	2c2d      	cmp	r4, #45	@ 0x2d
 802917a:	d12d      	bne.n	80291d8 <_strtol_l.constprop.0+0x90>
 802917c:	782c      	ldrb	r4, [r5, #0]
 802917e:	2601      	movs	r6, #1
 8029180:	1c95      	adds	r5, r2, #2
 8029182:	f033 0210 	bics.w	r2, r3, #16
 8029186:	d109      	bne.n	802919c <_strtol_l.constprop.0+0x54>
 8029188:	2c30      	cmp	r4, #48	@ 0x30
 802918a:	d12a      	bne.n	80291e2 <_strtol_l.constprop.0+0x9a>
 802918c:	782a      	ldrb	r2, [r5, #0]
 802918e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8029192:	2a58      	cmp	r2, #88	@ 0x58
 8029194:	d125      	bne.n	80291e2 <_strtol_l.constprop.0+0x9a>
 8029196:	786c      	ldrb	r4, [r5, #1]
 8029198:	2310      	movs	r3, #16
 802919a:	3502      	adds	r5, #2
 802919c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80291a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80291a4:	2200      	movs	r2, #0
 80291a6:	fbbc f9f3 	udiv	r9, ip, r3
 80291aa:	4610      	mov	r0, r2
 80291ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80291b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80291b4:	2f09      	cmp	r7, #9
 80291b6:	d81b      	bhi.n	80291f0 <_strtol_l.constprop.0+0xa8>
 80291b8:	463c      	mov	r4, r7
 80291ba:	42a3      	cmp	r3, r4
 80291bc:	dd27      	ble.n	802920e <_strtol_l.constprop.0+0xc6>
 80291be:	1c57      	adds	r7, r2, #1
 80291c0:	d007      	beq.n	80291d2 <_strtol_l.constprop.0+0x8a>
 80291c2:	4581      	cmp	r9, r0
 80291c4:	d320      	bcc.n	8029208 <_strtol_l.constprop.0+0xc0>
 80291c6:	d101      	bne.n	80291cc <_strtol_l.constprop.0+0x84>
 80291c8:	45a2      	cmp	sl, r4
 80291ca:	db1d      	blt.n	8029208 <_strtol_l.constprop.0+0xc0>
 80291cc:	fb00 4003 	mla	r0, r0, r3, r4
 80291d0:	2201      	movs	r2, #1
 80291d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80291d6:	e7eb      	b.n	80291b0 <_strtol_l.constprop.0+0x68>
 80291d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80291da:	bf04      	itt	eq
 80291dc:	782c      	ldrbeq	r4, [r5, #0]
 80291de:	1c95      	addeq	r5, r2, #2
 80291e0:	e7cf      	b.n	8029182 <_strtol_l.constprop.0+0x3a>
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d1da      	bne.n	802919c <_strtol_l.constprop.0+0x54>
 80291e6:	2c30      	cmp	r4, #48	@ 0x30
 80291e8:	bf0c      	ite	eq
 80291ea:	2308      	moveq	r3, #8
 80291ec:	230a      	movne	r3, #10
 80291ee:	e7d5      	b.n	802919c <_strtol_l.constprop.0+0x54>
 80291f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80291f4:	2f19      	cmp	r7, #25
 80291f6:	d801      	bhi.n	80291fc <_strtol_l.constprop.0+0xb4>
 80291f8:	3c37      	subs	r4, #55	@ 0x37
 80291fa:	e7de      	b.n	80291ba <_strtol_l.constprop.0+0x72>
 80291fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8029200:	2f19      	cmp	r7, #25
 8029202:	d804      	bhi.n	802920e <_strtol_l.constprop.0+0xc6>
 8029204:	3c57      	subs	r4, #87	@ 0x57
 8029206:	e7d8      	b.n	80291ba <_strtol_l.constprop.0+0x72>
 8029208:	f04f 32ff 	mov.w	r2, #4294967295
 802920c:	e7e1      	b.n	80291d2 <_strtol_l.constprop.0+0x8a>
 802920e:	1c53      	adds	r3, r2, #1
 8029210:	d108      	bne.n	8029224 <_strtol_l.constprop.0+0xdc>
 8029212:	2322      	movs	r3, #34	@ 0x22
 8029214:	f8ce 3000 	str.w	r3, [lr]
 8029218:	4660      	mov	r0, ip
 802921a:	f1b8 0f00 	cmp.w	r8, #0
 802921e:	d0a0      	beq.n	8029162 <_strtol_l.constprop.0+0x1a>
 8029220:	1e69      	subs	r1, r5, #1
 8029222:	e006      	b.n	8029232 <_strtol_l.constprop.0+0xea>
 8029224:	b106      	cbz	r6, 8029228 <_strtol_l.constprop.0+0xe0>
 8029226:	4240      	negs	r0, r0
 8029228:	f1b8 0f00 	cmp.w	r8, #0
 802922c:	d099      	beq.n	8029162 <_strtol_l.constprop.0+0x1a>
 802922e:	2a00      	cmp	r2, #0
 8029230:	d1f6      	bne.n	8029220 <_strtol_l.constprop.0+0xd8>
 8029232:	f8c8 1000 	str.w	r1, [r8]
 8029236:	e794      	b.n	8029162 <_strtol_l.constprop.0+0x1a>
 8029238:	0802b981 	.word	0x0802b981

0802923c <strtol>:
 802923c:	4613      	mov	r3, r2
 802923e:	460a      	mov	r2, r1
 8029240:	4601      	mov	r1, r0
 8029242:	4802      	ldr	r0, [pc, #8]	@ (802924c <strtol+0x10>)
 8029244:	6800      	ldr	r0, [r0, #0]
 8029246:	f7ff bf7f 	b.w	8029148 <_strtol_l.constprop.0>
 802924a:	bf00      	nop
 802924c:	24000038 	.word	0x24000038

08029250 <std>:
 8029250:	2300      	movs	r3, #0
 8029252:	b510      	push	{r4, lr}
 8029254:	4604      	mov	r4, r0
 8029256:	e9c0 3300 	strd	r3, r3, [r0]
 802925a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802925e:	6083      	str	r3, [r0, #8]
 8029260:	8181      	strh	r1, [r0, #12]
 8029262:	6643      	str	r3, [r0, #100]	@ 0x64
 8029264:	81c2      	strh	r2, [r0, #14]
 8029266:	6183      	str	r3, [r0, #24]
 8029268:	4619      	mov	r1, r3
 802926a:	2208      	movs	r2, #8
 802926c:	305c      	adds	r0, #92	@ 0x5c
 802926e:	f000 fa2b 	bl	80296c8 <memset>
 8029272:	4b0d      	ldr	r3, [pc, #52]	@ (80292a8 <std+0x58>)
 8029274:	6263      	str	r3, [r4, #36]	@ 0x24
 8029276:	4b0d      	ldr	r3, [pc, #52]	@ (80292ac <std+0x5c>)
 8029278:	62a3      	str	r3, [r4, #40]	@ 0x28
 802927a:	4b0d      	ldr	r3, [pc, #52]	@ (80292b0 <std+0x60>)
 802927c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802927e:	4b0d      	ldr	r3, [pc, #52]	@ (80292b4 <std+0x64>)
 8029280:	6323      	str	r3, [r4, #48]	@ 0x30
 8029282:	4b0d      	ldr	r3, [pc, #52]	@ (80292b8 <std+0x68>)
 8029284:	6224      	str	r4, [r4, #32]
 8029286:	429c      	cmp	r4, r3
 8029288:	d006      	beq.n	8029298 <std+0x48>
 802928a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802928e:	4294      	cmp	r4, r2
 8029290:	d002      	beq.n	8029298 <std+0x48>
 8029292:	33d0      	adds	r3, #208	@ 0xd0
 8029294:	429c      	cmp	r4, r3
 8029296:	d105      	bne.n	80292a4 <std+0x54>
 8029298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802929c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80292a0:	f000 bade 	b.w	8029860 <__retarget_lock_init_recursive>
 80292a4:	bd10      	pop	{r4, pc}
 80292a6:	bf00      	nop
 80292a8:	080294c5 	.word	0x080294c5
 80292ac:	080294e7 	.word	0x080294e7
 80292b0:	0802951f 	.word	0x0802951f
 80292b4:	08029543 	.word	0x08029543
 80292b8:	24000acc 	.word	0x24000acc

080292bc <stdio_exit_handler>:
 80292bc:	4a02      	ldr	r2, [pc, #8]	@ (80292c8 <stdio_exit_handler+0xc>)
 80292be:	4903      	ldr	r1, [pc, #12]	@ (80292cc <stdio_exit_handler+0x10>)
 80292c0:	4803      	ldr	r0, [pc, #12]	@ (80292d0 <stdio_exit_handler+0x14>)
 80292c2:	f000 b869 	b.w	8029398 <_fwalk_sglue>
 80292c6:	bf00      	nop
 80292c8:	2400002c 	.word	0x2400002c
 80292cc:	08029fd1 	.word	0x08029fd1
 80292d0:	2400003c 	.word	0x2400003c

080292d4 <cleanup_stdio>:
 80292d4:	6841      	ldr	r1, [r0, #4]
 80292d6:	4b0c      	ldr	r3, [pc, #48]	@ (8029308 <cleanup_stdio+0x34>)
 80292d8:	4299      	cmp	r1, r3
 80292da:	b510      	push	{r4, lr}
 80292dc:	4604      	mov	r4, r0
 80292de:	d001      	beq.n	80292e4 <cleanup_stdio+0x10>
 80292e0:	f000 fe76 	bl	8029fd0 <_fflush_r>
 80292e4:	68a1      	ldr	r1, [r4, #8]
 80292e6:	4b09      	ldr	r3, [pc, #36]	@ (802930c <cleanup_stdio+0x38>)
 80292e8:	4299      	cmp	r1, r3
 80292ea:	d002      	beq.n	80292f2 <cleanup_stdio+0x1e>
 80292ec:	4620      	mov	r0, r4
 80292ee:	f000 fe6f 	bl	8029fd0 <_fflush_r>
 80292f2:	68e1      	ldr	r1, [r4, #12]
 80292f4:	4b06      	ldr	r3, [pc, #24]	@ (8029310 <cleanup_stdio+0x3c>)
 80292f6:	4299      	cmp	r1, r3
 80292f8:	d004      	beq.n	8029304 <cleanup_stdio+0x30>
 80292fa:	4620      	mov	r0, r4
 80292fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029300:	f000 be66 	b.w	8029fd0 <_fflush_r>
 8029304:	bd10      	pop	{r4, pc}
 8029306:	bf00      	nop
 8029308:	24000acc 	.word	0x24000acc
 802930c:	24000b34 	.word	0x24000b34
 8029310:	24000b9c 	.word	0x24000b9c

08029314 <global_stdio_init.part.0>:
 8029314:	b510      	push	{r4, lr}
 8029316:	4b0b      	ldr	r3, [pc, #44]	@ (8029344 <global_stdio_init.part.0+0x30>)
 8029318:	4c0b      	ldr	r4, [pc, #44]	@ (8029348 <global_stdio_init.part.0+0x34>)
 802931a:	4a0c      	ldr	r2, [pc, #48]	@ (802934c <global_stdio_init.part.0+0x38>)
 802931c:	601a      	str	r2, [r3, #0]
 802931e:	4620      	mov	r0, r4
 8029320:	2200      	movs	r2, #0
 8029322:	2104      	movs	r1, #4
 8029324:	f7ff ff94 	bl	8029250 <std>
 8029328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802932c:	2201      	movs	r2, #1
 802932e:	2109      	movs	r1, #9
 8029330:	f7ff ff8e 	bl	8029250 <std>
 8029334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029338:	2202      	movs	r2, #2
 802933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802933e:	2112      	movs	r1, #18
 8029340:	f7ff bf86 	b.w	8029250 <std>
 8029344:	24000c04 	.word	0x24000c04
 8029348:	24000acc 	.word	0x24000acc
 802934c:	080292bd 	.word	0x080292bd

08029350 <__sfp_lock_acquire>:
 8029350:	4801      	ldr	r0, [pc, #4]	@ (8029358 <__sfp_lock_acquire+0x8>)
 8029352:	f000 ba86 	b.w	8029862 <__retarget_lock_acquire_recursive>
 8029356:	bf00      	nop
 8029358:	24000c0d 	.word	0x24000c0d

0802935c <__sfp_lock_release>:
 802935c:	4801      	ldr	r0, [pc, #4]	@ (8029364 <__sfp_lock_release+0x8>)
 802935e:	f000 ba81 	b.w	8029864 <__retarget_lock_release_recursive>
 8029362:	bf00      	nop
 8029364:	24000c0d 	.word	0x24000c0d

08029368 <__sinit>:
 8029368:	b510      	push	{r4, lr}
 802936a:	4604      	mov	r4, r0
 802936c:	f7ff fff0 	bl	8029350 <__sfp_lock_acquire>
 8029370:	6a23      	ldr	r3, [r4, #32]
 8029372:	b11b      	cbz	r3, 802937c <__sinit+0x14>
 8029374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029378:	f7ff bff0 	b.w	802935c <__sfp_lock_release>
 802937c:	4b04      	ldr	r3, [pc, #16]	@ (8029390 <__sinit+0x28>)
 802937e:	6223      	str	r3, [r4, #32]
 8029380:	4b04      	ldr	r3, [pc, #16]	@ (8029394 <__sinit+0x2c>)
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	2b00      	cmp	r3, #0
 8029386:	d1f5      	bne.n	8029374 <__sinit+0xc>
 8029388:	f7ff ffc4 	bl	8029314 <global_stdio_init.part.0>
 802938c:	e7f2      	b.n	8029374 <__sinit+0xc>
 802938e:	bf00      	nop
 8029390:	080292d5 	.word	0x080292d5
 8029394:	24000c04 	.word	0x24000c04

08029398 <_fwalk_sglue>:
 8029398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802939c:	4607      	mov	r7, r0
 802939e:	4688      	mov	r8, r1
 80293a0:	4614      	mov	r4, r2
 80293a2:	2600      	movs	r6, #0
 80293a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80293a8:	f1b9 0901 	subs.w	r9, r9, #1
 80293ac:	d505      	bpl.n	80293ba <_fwalk_sglue+0x22>
 80293ae:	6824      	ldr	r4, [r4, #0]
 80293b0:	2c00      	cmp	r4, #0
 80293b2:	d1f7      	bne.n	80293a4 <_fwalk_sglue+0xc>
 80293b4:	4630      	mov	r0, r6
 80293b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80293ba:	89ab      	ldrh	r3, [r5, #12]
 80293bc:	2b01      	cmp	r3, #1
 80293be:	d907      	bls.n	80293d0 <_fwalk_sglue+0x38>
 80293c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80293c4:	3301      	adds	r3, #1
 80293c6:	d003      	beq.n	80293d0 <_fwalk_sglue+0x38>
 80293c8:	4629      	mov	r1, r5
 80293ca:	4638      	mov	r0, r7
 80293cc:	47c0      	blx	r8
 80293ce:	4306      	orrs	r6, r0
 80293d0:	3568      	adds	r5, #104	@ 0x68
 80293d2:	e7e9      	b.n	80293a8 <_fwalk_sglue+0x10>

080293d4 <iprintf>:
 80293d4:	b40f      	push	{r0, r1, r2, r3}
 80293d6:	b507      	push	{r0, r1, r2, lr}
 80293d8:	4906      	ldr	r1, [pc, #24]	@ (80293f4 <iprintf+0x20>)
 80293da:	ab04      	add	r3, sp, #16
 80293dc:	6808      	ldr	r0, [r1, #0]
 80293de:	f853 2b04 	ldr.w	r2, [r3], #4
 80293e2:	6881      	ldr	r1, [r0, #8]
 80293e4:	9301      	str	r3, [sp, #4]
 80293e6:	f000 fac9 	bl	802997c <_vfiprintf_r>
 80293ea:	b003      	add	sp, #12
 80293ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80293f0:	b004      	add	sp, #16
 80293f2:	4770      	bx	lr
 80293f4:	24000038 	.word	0x24000038

080293f8 <putchar>:
 80293f8:	4b02      	ldr	r3, [pc, #8]	@ (8029404 <putchar+0xc>)
 80293fa:	4601      	mov	r1, r0
 80293fc:	6818      	ldr	r0, [r3, #0]
 80293fe:	6882      	ldr	r2, [r0, #8]
 8029400:	f000 be70 	b.w	802a0e4 <_putc_r>
 8029404:	24000038 	.word	0x24000038

08029408 <_puts_r>:
 8029408:	6a03      	ldr	r3, [r0, #32]
 802940a:	b570      	push	{r4, r5, r6, lr}
 802940c:	6884      	ldr	r4, [r0, #8]
 802940e:	4605      	mov	r5, r0
 8029410:	460e      	mov	r6, r1
 8029412:	b90b      	cbnz	r3, 8029418 <_puts_r+0x10>
 8029414:	f7ff ffa8 	bl	8029368 <__sinit>
 8029418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802941a:	07db      	lsls	r3, r3, #31
 802941c:	d405      	bmi.n	802942a <_puts_r+0x22>
 802941e:	89a3      	ldrh	r3, [r4, #12]
 8029420:	0598      	lsls	r0, r3, #22
 8029422:	d402      	bmi.n	802942a <_puts_r+0x22>
 8029424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029426:	f000 fa1c 	bl	8029862 <__retarget_lock_acquire_recursive>
 802942a:	89a3      	ldrh	r3, [r4, #12]
 802942c:	0719      	lsls	r1, r3, #28
 802942e:	d502      	bpl.n	8029436 <_puts_r+0x2e>
 8029430:	6923      	ldr	r3, [r4, #16]
 8029432:	2b00      	cmp	r3, #0
 8029434:	d135      	bne.n	80294a2 <_puts_r+0x9a>
 8029436:	4621      	mov	r1, r4
 8029438:	4628      	mov	r0, r5
 802943a:	f000 f8c5 	bl	80295c8 <__swsetup_r>
 802943e:	b380      	cbz	r0, 80294a2 <_puts_r+0x9a>
 8029440:	f04f 35ff 	mov.w	r5, #4294967295
 8029444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029446:	07da      	lsls	r2, r3, #31
 8029448:	d405      	bmi.n	8029456 <_puts_r+0x4e>
 802944a:	89a3      	ldrh	r3, [r4, #12]
 802944c:	059b      	lsls	r3, r3, #22
 802944e:	d402      	bmi.n	8029456 <_puts_r+0x4e>
 8029450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029452:	f000 fa07 	bl	8029864 <__retarget_lock_release_recursive>
 8029456:	4628      	mov	r0, r5
 8029458:	bd70      	pop	{r4, r5, r6, pc}
 802945a:	2b00      	cmp	r3, #0
 802945c:	da04      	bge.n	8029468 <_puts_r+0x60>
 802945e:	69a2      	ldr	r2, [r4, #24]
 8029460:	429a      	cmp	r2, r3
 8029462:	dc17      	bgt.n	8029494 <_puts_r+0x8c>
 8029464:	290a      	cmp	r1, #10
 8029466:	d015      	beq.n	8029494 <_puts_r+0x8c>
 8029468:	6823      	ldr	r3, [r4, #0]
 802946a:	1c5a      	adds	r2, r3, #1
 802946c:	6022      	str	r2, [r4, #0]
 802946e:	7019      	strb	r1, [r3, #0]
 8029470:	68a3      	ldr	r3, [r4, #8]
 8029472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8029476:	3b01      	subs	r3, #1
 8029478:	60a3      	str	r3, [r4, #8]
 802947a:	2900      	cmp	r1, #0
 802947c:	d1ed      	bne.n	802945a <_puts_r+0x52>
 802947e:	2b00      	cmp	r3, #0
 8029480:	da11      	bge.n	80294a6 <_puts_r+0x9e>
 8029482:	4622      	mov	r2, r4
 8029484:	210a      	movs	r1, #10
 8029486:	4628      	mov	r0, r5
 8029488:	f000 f85f 	bl	802954a <__swbuf_r>
 802948c:	3001      	adds	r0, #1
 802948e:	d0d7      	beq.n	8029440 <_puts_r+0x38>
 8029490:	250a      	movs	r5, #10
 8029492:	e7d7      	b.n	8029444 <_puts_r+0x3c>
 8029494:	4622      	mov	r2, r4
 8029496:	4628      	mov	r0, r5
 8029498:	f000 f857 	bl	802954a <__swbuf_r>
 802949c:	3001      	adds	r0, #1
 802949e:	d1e7      	bne.n	8029470 <_puts_r+0x68>
 80294a0:	e7ce      	b.n	8029440 <_puts_r+0x38>
 80294a2:	3e01      	subs	r6, #1
 80294a4:	e7e4      	b.n	8029470 <_puts_r+0x68>
 80294a6:	6823      	ldr	r3, [r4, #0]
 80294a8:	1c5a      	adds	r2, r3, #1
 80294aa:	6022      	str	r2, [r4, #0]
 80294ac:	220a      	movs	r2, #10
 80294ae:	701a      	strb	r2, [r3, #0]
 80294b0:	e7ee      	b.n	8029490 <_puts_r+0x88>
	...

080294b4 <puts>:
 80294b4:	4b02      	ldr	r3, [pc, #8]	@ (80294c0 <puts+0xc>)
 80294b6:	4601      	mov	r1, r0
 80294b8:	6818      	ldr	r0, [r3, #0]
 80294ba:	f7ff bfa5 	b.w	8029408 <_puts_r>
 80294be:	bf00      	nop
 80294c0:	24000038 	.word	0x24000038

080294c4 <__sread>:
 80294c4:	b510      	push	{r4, lr}
 80294c6:	460c      	mov	r4, r1
 80294c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294cc:	f000 f956 	bl	802977c <_read_r>
 80294d0:	2800      	cmp	r0, #0
 80294d2:	bfab      	itete	ge
 80294d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80294d6:	89a3      	ldrhlt	r3, [r4, #12]
 80294d8:	181b      	addge	r3, r3, r0
 80294da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80294de:	bfac      	ite	ge
 80294e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80294e2:	81a3      	strhlt	r3, [r4, #12]
 80294e4:	bd10      	pop	{r4, pc}

080294e6 <__swrite>:
 80294e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80294ea:	461f      	mov	r7, r3
 80294ec:	898b      	ldrh	r3, [r1, #12]
 80294ee:	05db      	lsls	r3, r3, #23
 80294f0:	4605      	mov	r5, r0
 80294f2:	460c      	mov	r4, r1
 80294f4:	4616      	mov	r6, r2
 80294f6:	d505      	bpl.n	8029504 <__swrite+0x1e>
 80294f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80294fc:	2302      	movs	r3, #2
 80294fe:	2200      	movs	r2, #0
 8029500:	f000 f92a 	bl	8029758 <_lseek_r>
 8029504:	89a3      	ldrh	r3, [r4, #12]
 8029506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802950a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802950e:	81a3      	strh	r3, [r4, #12]
 8029510:	4632      	mov	r2, r6
 8029512:	463b      	mov	r3, r7
 8029514:	4628      	mov	r0, r5
 8029516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802951a:	f000 b965 	b.w	80297e8 <_write_r>

0802951e <__sseek>:
 802951e:	b510      	push	{r4, lr}
 8029520:	460c      	mov	r4, r1
 8029522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029526:	f000 f917 	bl	8029758 <_lseek_r>
 802952a:	1c43      	adds	r3, r0, #1
 802952c:	89a3      	ldrh	r3, [r4, #12]
 802952e:	bf15      	itete	ne
 8029530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802953a:	81a3      	strheq	r3, [r4, #12]
 802953c:	bf18      	it	ne
 802953e:	81a3      	strhne	r3, [r4, #12]
 8029540:	bd10      	pop	{r4, pc}

08029542 <__sclose>:
 8029542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029546:	f000 b8f7 	b.w	8029738 <_close_r>

0802954a <__swbuf_r>:
 802954a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802954c:	460e      	mov	r6, r1
 802954e:	4614      	mov	r4, r2
 8029550:	4605      	mov	r5, r0
 8029552:	b118      	cbz	r0, 802955c <__swbuf_r+0x12>
 8029554:	6a03      	ldr	r3, [r0, #32]
 8029556:	b90b      	cbnz	r3, 802955c <__swbuf_r+0x12>
 8029558:	f7ff ff06 	bl	8029368 <__sinit>
 802955c:	69a3      	ldr	r3, [r4, #24]
 802955e:	60a3      	str	r3, [r4, #8]
 8029560:	89a3      	ldrh	r3, [r4, #12]
 8029562:	071a      	lsls	r2, r3, #28
 8029564:	d501      	bpl.n	802956a <__swbuf_r+0x20>
 8029566:	6923      	ldr	r3, [r4, #16]
 8029568:	b943      	cbnz	r3, 802957c <__swbuf_r+0x32>
 802956a:	4621      	mov	r1, r4
 802956c:	4628      	mov	r0, r5
 802956e:	f000 f82b 	bl	80295c8 <__swsetup_r>
 8029572:	b118      	cbz	r0, 802957c <__swbuf_r+0x32>
 8029574:	f04f 37ff 	mov.w	r7, #4294967295
 8029578:	4638      	mov	r0, r7
 802957a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802957c:	6823      	ldr	r3, [r4, #0]
 802957e:	6922      	ldr	r2, [r4, #16]
 8029580:	1a98      	subs	r0, r3, r2
 8029582:	6963      	ldr	r3, [r4, #20]
 8029584:	b2f6      	uxtb	r6, r6
 8029586:	4283      	cmp	r3, r0
 8029588:	4637      	mov	r7, r6
 802958a:	dc05      	bgt.n	8029598 <__swbuf_r+0x4e>
 802958c:	4621      	mov	r1, r4
 802958e:	4628      	mov	r0, r5
 8029590:	f000 fd1e 	bl	8029fd0 <_fflush_r>
 8029594:	2800      	cmp	r0, #0
 8029596:	d1ed      	bne.n	8029574 <__swbuf_r+0x2a>
 8029598:	68a3      	ldr	r3, [r4, #8]
 802959a:	3b01      	subs	r3, #1
 802959c:	60a3      	str	r3, [r4, #8]
 802959e:	6823      	ldr	r3, [r4, #0]
 80295a0:	1c5a      	adds	r2, r3, #1
 80295a2:	6022      	str	r2, [r4, #0]
 80295a4:	701e      	strb	r6, [r3, #0]
 80295a6:	6962      	ldr	r2, [r4, #20]
 80295a8:	1c43      	adds	r3, r0, #1
 80295aa:	429a      	cmp	r2, r3
 80295ac:	d004      	beq.n	80295b8 <__swbuf_r+0x6e>
 80295ae:	89a3      	ldrh	r3, [r4, #12]
 80295b0:	07db      	lsls	r3, r3, #31
 80295b2:	d5e1      	bpl.n	8029578 <__swbuf_r+0x2e>
 80295b4:	2e0a      	cmp	r6, #10
 80295b6:	d1df      	bne.n	8029578 <__swbuf_r+0x2e>
 80295b8:	4621      	mov	r1, r4
 80295ba:	4628      	mov	r0, r5
 80295bc:	f000 fd08 	bl	8029fd0 <_fflush_r>
 80295c0:	2800      	cmp	r0, #0
 80295c2:	d0d9      	beq.n	8029578 <__swbuf_r+0x2e>
 80295c4:	e7d6      	b.n	8029574 <__swbuf_r+0x2a>
	...

080295c8 <__swsetup_r>:
 80295c8:	b538      	push	{r3, r4, r5, lr}
 80295ca:	4b29      	ldr	r3, [pc, #164]	@ (8029670 <__swsetup_r+0xa8>)
 80295cc:	4605      	mov	r5, r0
 80295ce:	6818      	ldr	r0, [r3, #0]
 80295d0:	460c      	mov	r4, r1
 80295d2:	b118      	cbz	r0, 80295dc <__swsetup_r+0x14>
 80295d4:	6a03      	ldr	r3, [r0, #32]
 80295d6:	b90b      	cbnz	r3, 80295dc <__swsetup_r+0x14>
 80295d8:	f7ff fec6 	bl	8029368 <__sinit>
 80295dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80295e0:	0719      	lsls	r1, r3, #28
 80295e2:	d422      	bmi.n	802962a <__swsetup_r+0x62>
 80295e4:	06da      	lsls	r2, r3, #27
 80295e6:	d407      	bmi.n	80295f8 <__swsetup_r+0x30>
 80295e8:	2209      	movs	r2, #9
 80295ea:	602a      	str	r2, [r5, #0]
 80295ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80295f0:	81a3      	strh	r3, [r4, #12]
 80295f2:	f04f 30ff 	mov.w	r0, #4294967295
 80295f6:	e033      	b.n	8029660 <__swsetup_r+0x98>
 80295f8:	0758      	lsls	r0, r3, #29
 80295fa:	d512      	bpl.n	8029622 <__swsetup_r+0x5a>
 80295fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80295fe:	b141      	cbz	r1, 8029612 <__swsetup_r+0x4a>
 8029600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029604:	4299      	cmp	r1, r3
 8029606:	d002      	beq.n	802960e <__swsetup_r+0x46>
 8029608:	4628      	mov	r0, r5
 802960a:	f000 f93b 	bl	8029884 <_free_r>
 802960e:	2300      	movs	r3, #0
 8029610:	6363      	str	r3, [r4, #52]	@ 0x34
 8029612:	89a3      	ldrh	r3, [r4, #12]
 8029614:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029618:	81a3      	strh	r3, [r4, #12]
 802961a:	2300      	movs	r3, #0
 802961c:	6063      	str	r3, [r4, #4]
 802961e:	6923      	ldr	r3, [r4, #16]
 8029620:	6023      	str	r3, [r4, #0]
 8029622:	89a3      	ldrh	r3, [r4, #12]
 8029624:	f043 0308 	orr.w	r3, r3, #8
 8029628:	81a3      	strh	r3, [r4, #12]
 802962a:	6923      	ldr	r3, [r4, #16]
 802962c:	b94b      	cbnz	r3, 8029642 <__swsetup_r+0x7a>
 802962e:	89a3      	ldrh	r3, [r4, #12]
 8029630:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029638:	d003      	beq.n	8029642 <__swsetup_r+0x7a>
 802963a:	4621      	mov	r1, r4
 802963c:	4628      	mov	r0, r5
 802963e:	f000 fd15 	bl	802a06c <__smakebuf_r>
 8029642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029646:	f013 0201 	ands.w	r2, r3, #1
 802964a:	d00a      	beq.n	8029662 <__swsetup_r+0x9a>
 802964c:	2200      	movs	r2, #0
 802964e:	60a2      	str	r2, [r4, #8]
 8029650:	6962      	ldr	r2, [r4, #20]
 8029652:	4252      	negs	r2, r2
 8029654:	61a2      	str	r2, [r4, #24]
 8029656:	6922      	ldr	r2, [r4, #16]
 8029658:	b942      	cbnz	r2, 802966c <__swsetup_r+0xa4>
 802965a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802965e:	d1c5      	bne.n	80295ec <__swsetup_r+0x24>
 8029660:	bd38      	pop	{r3, r4, r5, pc}
 8029662:	0799      	lsls	r1, r3, #30
 8029664:	bf58      	it	pl
 8029666:	6962      	ldrpl	r2, [r4, #20]
 8029668:	60a2      	str	r2, [r4, #8]
 802966a:	e7f4      	b.n	8029656 <__swsetup_r+0x8e>
 802966c:	2000      	movs	r0, #0
 802966e:	e7f7      	b.n	8029660 <__swsetup_r+0x98>
 8029670:	24000038 	.word	0x24000038

08029674 <memcmp>:
 8029674:	b510      	push	{r4, lr}
 8029676:	3901      	subs	r1, #1
 8029678:	4402      	add	r2, r0
 802967a:	4290      	cmp	r0, r2
 802967c:	d101      	bne.n	8029682 <memcmp+0xe>
 802967e:	2000      	movs	r0, #0
 8029680:	e005      	b.n	802968e <memcmp+0x1a>
 8029682:	7803      	ldrb	r3, [r0, #0]
 8029684:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029688:	42a3      	cmp	r3, r4
 802968a:	d001      	beq.n	8029690 <memcmp+0x1c>
 802968c:	1b18      	subs	r0, r3, r4
 802968e:	bd10      	pop	{r4, pc}
 8029690:	3001      	adds	r0, #1
 8029692:	e7f2      	b.n	802967a <memcmp+0x6>

08029694 <memmove>:
 8029694:	4288      	cmp	r0, r1
 8029696:	b510      	push	{r4, lr}
 8029698:	eb01 0402 	add.w	r4, r1, r2
 802969c:	d902      	bls.n	80296a4 <memmove+0x10>
 802969e:	4284      	cmp	r4, r0
 80296a0:	4623      	mov	r3, r4
 80296a2:	d807      	bhi.n	80296b4 <memmove+0x20>
 80296a4:	1e43      	subs	r3, r0, #1
 80296a6:	42a1      	cmp	r1, r4
 80296a8:	d008      	beq.n	80296bc <memmove+0x28>
 80296aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80296ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80296b2:	e7f8      	b.n	80296a6 <memmove+0x12>
 80296b4:	4402      	add	r2, r0
 80296b6:	4601      	mov	r1, r0
 80296b8:	428a      	cmp	r2, r1
 80296ba:	d100      	bne.n	80296be <memmove+0x2a>
 80296bc:	bd10      	pop	{r4, pc}
 80296be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80296c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80296c6:	e7f7      	b.n	80296b8 <memmove+0x24>

080296c8 <memset>:
 80296c8:	4402      	add	r2, r0
 80296ca:	4603      	mov	r3, r0
 80296cc:	4293      	cmp	r3, r2
 80296ce:	d100      	bne.n	80296d2 <memset+0xa>
 80296d0:	4770      	bx	lr
 80296d2:	f803 1b01 	strb.w	r1, [r3], #1
 80296d6:	e7f9      	b.n	80296cc <memset+0x4>

080296d8 <_raise_r>:
 80296d8:	291f      	cmp	r1, #31
 80296da:	b538      	push	{r3, r4, r5, lr}
 80296dc:	4605      	mov	r5, r0
 80296de:	460c      	mov	r4, r1
 80296e0:	d904      	bls.n	80296ec <_raise_r+0x14>
 80296e2:	2316      	movs	r3, #22
 80296e4:	6003      	str	r3, [r0, #0]
 80296e6:	f04f 30ff 	mov.w	r0, #4294967295
 80296ea:	bd38      	pop	{r3, r4, r5, pc}
 80296ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80296ee:	b112      	cbz	r2, 80296f6 <_raise_r+0x1e>
 80296f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80296f4:	b94b      	cbnz	r3, 802970a <_raise_r+0x32>
 80296f6:	4628      	mov	r0, r5
 80296f8:	f000 f864 	bl	80297c4 <_getpid_r>
 80296fc:	4622      	mov	r2, r4
 80296fe:	4601      	mov	r1, r0
 8029700:	4628      	mov	r0, r5
 8029702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029706:	f000 b84b 	b.w	80297a0 <_kill_r>
 802970a:	2b01      	cmp	r3, #1
 802970c:	d00a      	beq.n	8029724 <_raise_r+0x4c>
 802970e:	1c59      	adds	r1, r3, #1
 8029710:	d103      	bne.n	802971a <_raise_r+0x42>
 8029712:	2316      	movs	r3, #22
 8029714:	6003      	str	r3, [r0, #0]
 8029716:	2001      	movs	r0, #1
 8029718:	e7e7      	b.n	80296ea <_raise_r+0x12>
 802971a:	2100      	movs	r1, #0
 802971c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029720:	4620      	mov	r0, r4
 8029722:	4798      	blx	r3
 8029724:	2000      	movs	r0, #0
 8029726:	e7e0      	b.n	80296ea <_raise_r+0x12>

08029728 <raise>:
 8029728:	4b02      	ldr	r3, [pc, #8]	@ (8029734 <raise+0xc>)
 802972a:	4601      	mov	r1, r0
 802972c:	6818      	ldr	r0, [r3, #0]
 802972e:	f7ff bfd3 	b.w	80296d8 <_raise_r>
 8029732:	bf00      	nop
 8029734:	24000038 	.word	0x24000038

08029738 <_close_r>:
 8029738:	b538      	push	{r3, r4, r5, lr}
 802973a:	4d06      	ldr	r5, [pc, #24]	@ (8029754 <_close_r+0x1c>)
 802973c:	2300      	movs	r3, #0
 802973e:	4604      	mov	r4, r0
 8029740:	4608      	mov	r0, r1
 8029742:	602b      	str	r3, [r5, #0]
 8029744:	f7e5 fc72 	bl	800f02c <_close>
 8029748:	1c43      	adds	r3, r0, #1
 802974a:	d102      	bne.n	8029752 <_close_r+0x1a>
 802974c:	682b      	ldr	r3, [r5, #0]
 802974e:	b103      	cbz	r3, 8029752 <_close_r+0x1a>
 8029750:	6023      	str	r3, [r4, #0]
 8029752:	bd38      	pop	{r3, r4, r5, pc}
 8029754:	24000c08 	.word	0x24000c08

08029758 <_lseek_r>:
 8029758:	b538      	push	{r3, r4, r5, lr}
 802975a:	4d07      	ldr	r5, [pc, #28]	@ (8029778 <_lseek_r+0x20>)
 802975c:	4604      	mov	r4, r0
 802975e:	4608      	mov	r0, r1
 8029760:	4611      	mov	r1, r2
 8029762:	2200      	movs	r2, #0
 8029764:	602a      	str	r2, [r5, #0]
 8029766:	461a      	mov	r2, r3
 8029768:	f7e5 fc87 	bl	800f07a <_lseek>
 802976c:	1c43      	adds	r3, r0, #1
 802976e:	d102      	bne.n	8029776 <_lseek_r+0x1e>
 8029770:	682b      	ldr	r3, [r5, #0]
 8029772:	b103      	cbz	r3, 8029776 <_lseek_r+0x1e>
 8029774:	6023      	str	r3, [r4, #0]
 8029776:	bd38      	pop	{r3, r4, r5, pc}
 8029778:	24000c08 	.word	0x24000c08

0802977c <_read_r>:
 802977c:	b538      	push	{r3, r4, r5, lr}
 802977e:	4d07      	ldr	r5, [pc, #28]	@ (802979c <_read_r+0x20>)
 8029780:	4604      	mov	r4, r0
 8029782:	4608      	mov	r0, r1
 8029784:	4611      	mov	r1, r2
 8029786:	2200      	movs	r2, #0
 8029788:	602a      	str	r2, [r5, #0]
 802978a:	461a      	mov	r2, r3
 802978c:	f7e5 fc15 	bl	800efba <_read>
 8029790:	1c43      	adds	r3, r0, #1
 8029792:	d102      	bne.n	802979a <_read_r+0x1e>
 8029794:	682b      	ldr	r3, [r5, #0]
 8029796:	b103      	cbz	r3, 802979a <_read_r+0x1e>
 8029798:	6023      	str	r3, [r4, #0]
 802979a:	bd38      	pop	{r3, r4, r5, pc}
 802979c:	24000c08 	.word	0x24000c08

080297a0 <_kill_r>:
 80297a0:	b538      	push	{r3, r4, r5, lr}
 80297a2:	4d07      	ldr	r5, [pc, #28]	@ (80297c0 <_kill_r+0x20>)
 80297a4:	2300      	movs	r3, #0
 80297a6:	4604      	mov	r4, r0
 80297a8:	4608      	mov	r0, r1
 80297aa:	4611      	mov	r1, r2
 80297ac:	602b      	str	r3, [r5, #0]
 80297ae:	f7e5 fbe9 	bl	800ef84 <_kill>
 80297b2:	1c43      	adds	r3, r0, #1
 80297b4:	d102      	bne.n	80297bc <_kill_r+0x1c>
 80297b6:	682b      	ldr	r3, [r5, #0]
 80297b8:	b103      	cbz	r3, 80297bc <_kill_r+0x1c>
 80297ba:	6023      	str	r3, [r4, #0]
 80297bc:	bd38      	pop	{r3, r4, r5, pc}
 80297be:	bf00      	nop
 80297c0:	24000c08 	.word	0x24000c08

080297c4 <_getpid_r>:
 80297c4:	f7e5 bbd6 	b.w	800ef74 <_getpid>

080297c8 <_sbrk_r>:
 80297c8:	b538      	push	{r3, r4, r5, lr}
 80297ca:	4d06      	ldr	r5, [pc, #24]	@ (80297e4 <_sbrk_r+0x1c>)
 80297cc:	2300      	movs	r3, #0
 80297ce:	4604      	mov	r4, r0
 80297d0:	4608      	mov	r0, r1
 80297d2:	602b      	str	r3, [r5, #0]
 80297d4:	f7e5 fc5e 	bl	800f094 <_sbrk>
 80297d8:	1c43      	adds	r3, r0, #1
 80297da:	d102      	bne.n	80297e2 <_sbrk_r+0x1a>
 80297dc:	682b      	ldr	r3, [r5, #0]
 80297de:	b103      	cbz	r3, 80297e2 <_sbrk_r+0x1a>
 80297e0:	6023      	str	r3, [r4, #0]
 80297e2:	bd38      	pop	{r3, r4, r5, pc}
 80297e4:	24000c08 	.word	0x24000c08

080297e8 <_write_r>:
 80297e8:	b538      	push	{r3, r4, r5, lr}
 80297ea:	4d07      	ldr	r5, [pc, #28]	@ (8029808 <_write_r+0x20>)
 80297ec:	4604      	mov	r4, r0
 80297ee:	4608      	mov	r0, r1
 80297f0:	4611      	mov	r1, r2
 80297f2:	2200      	movs	r2, #0
 80297f4:	602a      	str	r2, [r5, #0]
 80297f6:	461a      	mov	r2, r3
 80297f8:	f7e5 fbfc 	bl	800eff4 <_write>
 80297fc:	1c43      	adds	r3, r0, #1
 80297fe:	d102      	bne.n	8029806 <_write_r+0x1e>
 8029800:	682b      	ldr	r3, [r5, #0]
 8029802:	b103      	cbz	r3, 8029806 <_write_r+0x1e>
 8029804:	6023      	str	r3, [r4, #0]
 8029806:	bd38      	pop	{r3, r4, r5, pc}
 8029808:	24000c08 	.word	0x24000c08

0802980c <__errno>:
 802980c:	4b01      	ldr	r3, [pc, #4]	@ (8029814 <__errno+0x8>)
 802980e:	6818      	ldr	r0, [r3, #0]
 8029810:	4770      	bx	lr
 8029812:	bf00      	nop
 8029814:	24000038 	.word	0x24000038

08029818 <__libc_init_array>:
 8029818:	b570      	push	{r4, r5, r6, lr}
 802981a:	4d0d      	ldr	r5, [pc, #52]	@ (8029850 <__libc_init_array+0x38>)
 802981c:	4c0d      	ldr	r4, [pc, #52]	@ (8029854 <__libc_init_array+0x3c>)
 802981e:	1b64      	subs	r4, r4, r5
 8029820:	10a4      	asrs	r4, r4, #2
 8029822:	2600      	movs	r6, #0
 8029824:	42a6      	cmp	r6, r4
 8029826:	d109      	bne.n	802983c <__libc_init_array+0x24>
 8029828:	4d0b      	ldr	r5, [pc, #44]	@ (8029858 <__libc_init_array+0x40>)
 802982a:	4c0c      	ldr	r4, [pc, #48]	@ (802985c <__libc_init_array+0x44>)
 802982c:	f000 fcb0 	bl	802a190 <_init>
 8029830:	1b64      	subs	r4, r4, r5
 8029832:	10a4      	asrs	r4, r4, #2
 8029834:	2600      	movs	r6, #0
 8029836:	42a6      	cmp	r6, r4
 8029838:	d105      	bne.n	8029846 <__libc_init_array+0x2e>
 802983a:	bd70      	pop	{r4, r5, r6, pc}
 802983c:	f855 3b04 	ldr.w	r3, [r5], #4
 8029840:	4798      	blx	r3
 8029842:	3601      	adds	r6, #1
 8029844:	e7ee      	b.n	8029824 <__libc_init_array+0xc>
 8029846:	f855 3b04 	ldr.w	r3, [r5], #4
 802984a:	4798      	blx	r3
 802984c:	3601      	adds	r6, #1
 802984e:	e7f2      	b.n	8029836 <__libc_init_array+0x1e>
 8029850:	0802babc 	.word	0x0802babc
 8029854:	0802babc 	.word	0x0802babc
 8029858:	0802babc 	.word	0x0802babc
 802985c:	0802bac8 	.word	0x0802bac8

08029860 <__retarget_lock_init_recursive>:
 8029860:	4770      	bx	lr

08029862 <__retarget_lock_acquire_recursive>:
 8029862:	4770      	bx	lr

08029864 <__retarget_lock_release_recursive>:
 8029864:	4770      	bx	lr

08029866 <memcpy>:
 8029866:	440a      	add	r2, r1
 8029868:	4291      	cmp	r1, r2
 802986a:	f100 33ff 	add.w	r3, r0, #4294967295
 802986e:	d100      	bne.n	8029872 <memcpy+0xc>
 8029870:	4770      	bx	lr
 8029872:	b510      	push	{r4, lr}
 8029874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029878:	f803 4f01 	strb.w	r4, [r3, #1]!
 802987c:	4291      	cmp	r1, r2
 802987e:	d1f9      	bne.n	8029874 <memcpy+0xe>
 8029880:	bd10      	pop	{r4, pc}
	...

08029884 <_free_r>:
 8029884:	b538      	push	{r3, r4, r5, lr}
 8029886:	4605      	mov	r5, r0
 8029888:	2900      	cmp	r1, #0
 802988a:	d041      	beq.n	8029910 <_free_r+0x8c>
 802988c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029890:	1f0c      	subs	r4, r1, #4
 8029892:	2b00      	cmp	r3, #0
 8029894:	bfb8      	it	lt
 8029896:	18e4      	addlt	r4, r4, r3
 8029898:	f7ff fc14 	bl	80290c4 <__malloc_lock>
 802989c:	4a1d      	ldr	r2, [pc, #116]	@ (8029914 <_free_r+0x90>)
 802989e:	6813      	ldr	r3, [r2, #0]
 80298a0:	b933      	cbnz	r3, 80298b0 <_free_r+0x2c>
 80298a2:	6063      	str	r3, [r4, #4]
 80298a4:	6014      	str	r4, [r2, #0]
 80298a6:	4628      	mov	r0, r5
 80298a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80298ac:	f7ff bc10 	b.w	80290d0 <__malloc_unlock>
 80298b0:	42a3      	cmp	r3, r4
 80298b2:	d908      	bls.n	80298c6 <_free_r+0x42>
 80298b4:	6820      	ldr	r0, [r4, #0]
 80298b6:	1821      	adds	r1, r4, r0
 80298b8:	428b      	cmp	r3, r1
 80298ba:	bf01      	itttt	eq
 80298bc:	6819      	ldreq	r1, [r3, #0]
 80298be:	685b      	ldreq	r3, [r3, #4]
 80298c0:	1809      	addeq	r1, r1, r0
 80298c2:	6021      	streq	r1, [r4, #0]
 80298c4:	e7ed      	b.n	80298a2 <_free_r+0x1e>
 80298c6:	461a      	mov	r2, r3
 80298c8:	685b      	ldr	r3, [r3, #4]
 80298ca:	b10b      	cbz	r3, 80298d0 <_free_r+0x4c>
 80298cc:	42a3      	cmp	r3, r4
 80298ce:	d9fa      	bls.n	80298c6 <_free_r+0x42>
 80298d0:	6811      	ldr	r1, [r2, #0]
 80298d2:	1850      	adds	r0, r2, r1
 80298d4:	42a0      	cmp	r0, r4
 80298d6:	d10b      	bne.n	80298f0 <_free_r+0x6c>
 80298d8:	6820      	ldr	r0, [r4, #0]
 80298da:	4401      	add	r1, r0
 80298dc:	1850      	adds	r0, r2, r1
 80298de:	4283      	cmp	r3, r0
 80298e0:	6011      	str	r1, [r2, #0]
 80298e2:	d1e0      	bne.n	80298a6 <_free_r+0x22>
 80298e4:	6818      	ldr	r0, [r3, #0]
 80298e6:	685b      	ldr	r3, [r3, #4]
 80298e8:	6053      	str	r3, [r2, #4]
 80298ea:	4408      	add	r0, r1
 80298ec:	6010      	str	r0, [r2, #0]
 80298ee:	e7da      	b.n	80298a6 <_free_r+0x22>
 80298f0:	d902      	bls.n	80298f8 <_free_r+0x74>
 80298f2:	230c      	movs	r3, #12
 80298f4:	602b      	str	r3, [r5, #0]
 80298f6:	e7d6      	b.n	80298a6 <_free_r+0x22>
 80298f8:	6820      	ldr	r0, [r4, #0]
 80298fa:	1821      	adds	r1, r4, r0
 80298fc:	428b      	cmp	r3, r1
 80298fe:	bf04      	itt	eq
 8029900:	6819      	ldreq	r1, [r3, #0]
 8029902:	685b      	ldreq	r3, [r3, #4]
 8029904:	6063      	str	r3, [r4, #4]
 8029906:	bf04      	itt	eq
 8029908:	1809      	addeq	r1, r1, r0
 802990a:	6021      	streq	r1, [r4, #0]
 802990c:	6054      	str	r4, [r2, #4]
 802990e:	e7ca      	b.n	80298a6 <_free_r+0x22>
 8029910:	bd38      	pop	{r3, r4, r5, pc}
 8029912:	bf00      	nop
 8029914:	24000ac8 	.word	0x24000ac8

08029918 <_malloc_usable_size_r>:
 8029918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802991c:	1f18      	subs	r0, r3, #4
 802991e:	2b00      	cmp	r3, #0
 8029920:	bfbc      	itt	lt
 8029922:	580b      	ldrlt	r3, [r1, r0]
 8029924:	18c0      	addlt	r0, r0, r3
 8029926:	4770      	bx	lr

08029928 <__sfputc_r>:
 8029928:	6893      	ldr	r3, [r2, #8]
 802992a:	3b01      	subs	r3, #1
 802992c:	2b00      	cmp	r3, #0
 802992e:	b410      	push	{r4}
 8029930:	6093      	str	r3, [r2, #8]
 8029932:	da08      	bge.n	8029946 <__sfputc_r+0x1e>
 8029934:	6994      	ldr	r4, [r2, #24]
 8029936:	42a3      	cmp	r3, r4
 8029938:	db01      	blt.n	802993e <__sfputc_r+0x16>
 802993a:	290a      	cmp	r1, #10
 802993c:	d103      	bne.n	8029946 <__sfputc_r+0x1e>
 802993e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029942:	f7ff be02 	b.w	802954a <__swbuf_r>
 8029946:	6813      	ldr	r3, [r2, #0]
 8029948:	1c58      	adds	r0, r3, #1
 802994a:	6010      	str	r0, [r2, #0]
 802994c:	7019      	strb	r1, [r3, #0]
 802994e:	4608      	mov	r0, r1
 8029950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029954:	4770      	bx	lr

08029956 <__sfputs_r>:
 8029956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029958:	4606      	mov	r6, r0
 802995a:	460f      	mov	r7, r1
 802995c:	4614      	mov	r4, r2
 802995e:	18d5      	adds	r5, r2, r3
 8029960:	42ac      	cmp	r4, r5
 8029962:	d101      	bne.n	8029968 <__sfputs_r+0x12>
 8029964:	2000      	movs	r0, #0
 8029966:	e007      	b.n	8029978 <__sfputs_r+0x22>
 8029968:	f814 1b01 	ldrb.w	r1, [r4], #1
 802996c:	463a      	mov	r2, r7
 802996e:	4630      	mov	r0, r6
 8029970:	f7ff ffda 	bl	8029928 <__sfputc_r>
 8029974:	1c43      	adds	r3, r0, #1
 8029976:	d1f3      	bne.n	8029960 <__sfputs_r+0xa>
 8029978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802997c <_vfiprintf_r>:
 802997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029980:	460d      	mov	r5, r1
 8029982:	b09d      	sub	sp, #116	@ 0x74
 8029984:	4614      	mov	r4, r2
 8029986:	4698      	mov	r8, r3
 8029988:	4606      	mov	r6, r0
 802998a:	b118      	cbz	r0, 8029994 <_vfiprintf_r+0x18>
 802998c:	6a03      	ldr	r3, [r0, #32]
 802998e:	b90b      	cbnz	r3, 8029994 <_vfiprintf_r+0x18>
 8029990:	f7ff fcea 	bl	8029368 <__sinit>
 8029994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029996:	07d9      	lsls	r1, r3, #31
 8029998:	d405      	bmi.n	80299a6 <_vfiprintf_r+0x2a>
 802999a:	89ab      	ldrh	r3, [r5, #12]
 802999c:	059a      	lsls	r2, r3, #22
 802999e:	d402      	bmi.n	80299a6 <_vfiprintf_r+0x2a>
 80299a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80299a2:	f7ff ff5e 	bl	8029862 <__retarget_lock_acquire_recursive>
 80299a6:	89ab      	ldrh	r3, [r5, #12]
 80299a8:	071b      	lsls	r3, r3, #28
 80299aa:	d501      	bpl.n	80299b0 <_vfiprintf_r+0x34>
 80299ac:	692b      	ldr	r3, [r5, #16]
 80299ae:	b99b      	cbnz	r3, 80299d8 <_vfiprintf_r+0x5c>
 80299b0:	4629      	mov	r1, r5
 80299b2:	4630      	mov	r0, r6
 80299b4:	f7ff fe08 	bl	80295c8 <__swsetup_r>
 80299b8:	b170      	cbz	r0, 80299d8 <_vfiprintf_r+0x5c>
 80299ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80299bc:	07dc      	lsls	r4, r3, #31
 80299be:	d504      	bpl.n	80299ca <_vfiprintf_r+0x4e>
 80299c0:	f04f 30ff 	mov.w	r0, #4294967295
 80299c4:	b01d      	add	sp, #116	@ 0x74
 80299c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299ca:	89ab      	ldrh	r3, [r5, #12]
 80299cc:	0598      	lsls	r0, r3, #22
 80299ce:	d4f7      	bmi.n	80299c0 <_vfiprintf_r+0x44>
 80299d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80299d2:	f7ff ff47 	bl	8029864 <__retarget_lock_release_recursive>
 80299d6:	e7f3      	b.n	80299c0 <_vfiprintf_r+0x44>
 80299d8:	2300      	movs	r3, #0
 80299da:	9309      	str	r3, [sp, #36]	@ 0x24
 80299dc:	2320      	movs	r3, #32
 80299de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80299e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80299e6:	2330      	movs	r3, #48	@ 0x30
 80299e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029b98 <_vfiprintf_r+0x21c>
 80299ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80299f0:	f04f 0901 	mov.w	r9, #1
 80299f4:	4623      	mov	r3, r4
 80299f6:	469a      	mov	sl, r3
 80299f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80299fc:	b10a      	cbz	r2, 8029a02 <_vfiprintf_r+0x86>
 80299fe:	2a25      	cmp	r2, #37	@ 0x25
 8029a00:	d1f9      	bne.n	80299f6 <_vfiprintf_r+0x7a>
 8029a02:	ebba 0b04 	subs.w	fp, sl, r4
 8029a06:	d00b      	beq.n	8029a20 <_vfiprintf_r+0xa4>
 8029a08:	465b      	mov	r3, fp
 8029a0a:	4622      	mov	r2, r4
 8029a0c:	4629      	mov	r1, r5
 8029a0e:	4630      	mov	r0, r6
 8029a10:	f7ff ffa1 	bl	8029956 <__sfputs_r>
 8029a14:	3001      	adds	r0, #1
 8029a16:	f000 80a7 	beq.w	8029b68 <_vfiprintf_r+0x1ec>
 8029a1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029a1c:	445a      	add	r2, fp
 8029a1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8029a20:	f89a 3000 	ldrb.w	r3, [sl]
 8029a24:	2b00      	cmp	r3, #0
 8029a26:	f000 809f 	beq.w	8029b68 <_vfiprintf_r+0x1ec>
 8029a2a:	2300      	movs	r3, #0
 8029a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8029a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029a34:	f10a 0a01 	add.w	sl, sl, #1
 8029a38:	9304      	str	r3, [sp, #16]
 8029a3a:	9307      	str	r3, [sp, #28]
 8029a3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029a40:	931a      	str	r3, [sp, #104]	@ 0x68
 8029a42:	4654      	mov	r4, sl
 8029a44:	2205      	movs	r2, #5
 8029a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a4a:	4853      	ldr	r0, [pc, #332]	@ (8029b98 <_vfiprintf_r+0x21c>)
 8029a4c:	f7d6 fc58 	bl	8000300 <memchr>
 8029a50:	9a04      	ldr	r2, [sp, #16]
 8029a52:	b9d8      	cbnz	r0, 8029a8c <_vfiprintf_r+0x110>
 8029a54:	06d1      	lsls	r1, r2, #27
 8029a56:	bf44      	itt	mi
 8029a58:	2320      	movmi	r3, #32
 8029a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029a5e:	0713      	lsls	r3, r2, #28
 8029a60:	bf44      	itt	mi
 8029a62:	232b      	movmi	r3, #43	@ 0x2b
 8029a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029a68:	f89a 3000 	ldrb.w	r3, [sl]
 8029a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8029a6e:	d015      	beq.n	8029a9c <_vfiprintf_r+0x120>
 8029a70:	9a07      	ldr	r2, [sp, #28]
 8029a72:	4654      	mov	r4, sl
 8029a74:	2000      	movs	r0, #0
 8029a76:	f04f 0c0a 	mov.w	ip, #10
 8029a7a:	4621      	mov	r1, r4
 8029a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029a80:	3b30      	subs	r3, #48	@ 0x30
 8029a82:	2b09      	cmp	r3, #9
 8029a84:	d94b      	bls.n	8029b1e <_vfiprintf_r+0x1a2>
 8029a86:	b1b0      	cbz	r0, 8029ab6 <_vfiprintf_r+0x13a>
 8029a88:	9207      	str	r2, [sp, #28]
 8029a8a:	e014      	b.n	8029ab6 <_vfiprintf_r+0x13a>
 8029a8c:	eba0 0308 	sub.w	r3, r0, r8
 8029a90:	fa09 f303 	lsl.w	r3, r9, r3
 8029a94:	4313      	orrs	r3, r2
 8029a96:	9304      	str	r3, [sp, #16]
 8029a98:	46a2      	mov	sl, r4
 8029a9a:	e7d2      	b.n	8029a42 <_vfiprintf_r+0xc6>
 8029a9c:	9b03      	ldr	r3, [sp, #12]
 8029a9e:	1d19      	adds	r1, r3, #4
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	9103      	str	r1, [sp, #12]
 8029aa4:	2b00      	cmp	r3, #0
 8029aa6:	bfbb      	ittet	lt
 8029aa8:	425b      	neglt	r3, r3
 8029aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8029aae:	9307      	strge	r3, [sp, #28]
 8029ab0:	9307      	strlt	r3, [sp, #28]
 8029ab2:	bfb8      	it	lt
 8029ab4:	9204      	strlt	r2, [sp, #16]
 8029ab6:	7823      	ldrb	r3, [r4, #0]
 8029ab8:	2b2e      	cmp	r3, #46	@ 0x2e
 8029aba:	d10a      	bne.n	8029ad2 <_vfiprintf_r+0x156>
 8029abc:	7863      	ldrb	r3, [r4, #1]
 8029abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8029ac0:	d132      	bne.n	8029b28 <_vfiprintf_r+0x1ac>
 8029ac2:	9b03      	ldr	r3, [sp, #12]
 8029ac4:	1d1a      	adds	r2, r3, #4
 8029ac6:	681b      	ldr	r3, [r3, #0]
 8029ac8:	9203      	str	r2, [sp, #12]
 8029aca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029ace:	3402      	adds	r4, #2
 8029ad0:	9305      	str	r3, [sp, #20]
 8029ad2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029ba8 <_vfiprintf_r+0x22c>
 8029ad6:	7821      	ldrb	r1, [r4, #0]
 8029ad8:	2203      	movs	r2, #3
 8029ada:	4650      	mov	r0, sl
 8029adc:	f7d6 fc10 	bl	8000300 <memchr>
 8029ae0:	b138      	cbz	r0, 8029af2 <_vfiprintf_r+0x176>
 8029ae2:	9b04      	ldr	r3, [sp, #16]
 8029ae4:	eba0 000a 	sub.w	r0, r0, sl
 8029ae8:	2240      	movs	r2, #64	@ 0x40
 8029aea:	4082      	lsls	r2, r0
 8029aec:	4313      	orrs	r3, r2
 8029aee:	3401      	adds	r4, #1
 8029af0:	9304      	str	r3, [sp, #16]
 8029af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029af6:	4829      	ldr	r0, [pc, #164]	@ (8029b9c <_vfiprintf_r+0x220>)
 8029af8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029afc:	2206      	movs	r2, #6
 8029afe:	f7d6 fbff 	bl	8000300 <memchr>
 8029b02:	2800      	cmp	r0, #0
 8029b04:	d03f      	beq.n	8029b86 <_vfiprintf_r+0x20a>
 8029b06:	4b26      	ldr	r3, [pc, #152]	@ (8029ba0 <_vfiprintf_r+0x224>)
 8029b08:	bb1b      	cbnz	r3, 8029b52 <_vfiprintf_r+0x1d6>
 8029b0a:	9b03      	ldr	r3, [sp, #12]
 8029b0c:	3307      	adds	r3, #7
 8029b0e:	f023 0307 	bic.w	r3, r3, #7
 8029b12:	3308      	adds	r3, #8
 8029b14:	9303      	str	r3, [sp, #12]
 8029b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b18:	443b      	add	r3, r7
 8029b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029b1c:	e76a      	b.n	80299f4 <_vfiprintf_r+0x78>
 8029b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8029b22:	460c      	mov	r4, r1
 8029b24:	2001      	movs	r0, #1
 8029b26:	e7a8      	b.n	8029a7a <_vfiprintf_r+0xfe>
 8029b28:	2300      	movs	r3, #0
 8029b2a:	3401      	adds	r4, #1
 8029b2c:	9305      	str	r3, [sp, #20]
 8029b2e:	4619      	mov	r1, r3
 8029b30:	f04f 0c0a 	mov.w	ip, #10
 8029b34:	4620      	mov	r0, r4
 8029b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029b3a:	3a30      	subs	r2, #48	@ 0x30
 8029b3c:	2a09      	cmp	r2, #9
 8029b3e:	d903      	bls.n	8029b48 <_vfiprintf_r+0x1cc>
 8029b40:	2b00      	cmp	r3, #0
 8029b42:	d0c6      	beq.n	8029ad2 <_vfiprintf_r+0x156>
 8029b44:	9105      	str	r1, [sp, #20]
 8029b46:	e7c4      	b.n	8029ad2 <_vfiprintf_r+0x156>
 8029b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8029b4c:	4604      	mov	r4, r0
 8029b4e:	2301      	movs	r3, #1
 8029b50:	e7f0      	b.n	8029b34 <_vfiprintf_r+0x1b8>
 8029b52:	ab03      	add	r3, sp, #12
 8029b54:	9300      	str	r3, [sp, #0]
 8029b56:	462a      	mov	r2, r5
 8029b58:	4b12      	ldr	r3, [pc, #72]	@ (8029ba4 <_vfiprintf_r+0x228>)
 8029b5a:	a904      	add	r1, sp, #16
 8029b5c:	4630      	mov	r0, r6
 8029b5e:	f3af 8000 	nop.w
 8029b62:	4607      	mov	r7, r0
 8029b64:	1c78      	adds	r0, r7, #1
 8029b66:	d1d6      	bne.n	8029b16 <_vfiprintf_r+0x19a>
 8029b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029b6a:	07d9      	lsls	r1, r3, #31
 8029b6c:	d405      	bmi.n	8029b7a <_vfiprintf_r+0x1fe>
 8029b6e:	89ab      	ldrh	r3, [r5, #12]
 8029b70:	059a      	lsls	r2, r3, #22
 8029b72:	d402      	bmi.n	8029b7a <_vfiprintf_r+0x1fe>
 8029b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029b76:	f7ff fe75 	bl	8029864 <__retarget_lock_release_recursive>
 8029b7a:	89ab      	ldrh	r3, [r5, #12]
 8029b7c:	065b      	lsls	r3, r3, #25
 8029b7e:	f53f af1f 	bmi.w	80299c0 <_vfiprintf_r+0x44>
 8029b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029b84:	e71e      	b.n	80299c4 <_vfiprintf_r+0x48>
 8029b86:	ab03      	add	r3, sp, #12
 8029b88:	9300      	str	r3, [sp, #0]
 8029b8a:	462a      	mov	r2, r5
 8029b8c:	4b05      	ldr	r3, [pc, #20]	@ (8029ba4 <_vfiprintf_r+0x228>)
 8029b8e:	a904      	add	r1, sp, #16
 8029b90:	4630      	mov	r0, r6
 8029b92:	f000 f879 	bl	8029c88 <_printf_i>
 8029b96:	e7e4      	b.n	8029b62 <_vfiprintf_r+0x1e6>
 8029b98:	0802ba81 	.word	0x0802ba81
 8029b9c:	0802ba8b 	.word	0x0802ba8b
 8029ba0:	00000000 	.word	0x00000000
 8029ba4:	08029957 	.word	0x08029957
 8029ba8:	0802ba87 	.word	0x0802ba87

08029bac <_printf_common>:
 8029bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029bb0:	4616      	mov	r6, r2
 8029bb2:	4698      	mov	r8, r3
 8029bb4:	688a      	ldr	r2, [r1, #8]
 8029bb6:	690b      	ldr	r3, [r1, #16]
 8029bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029bbc:	4293      	cmp	r3, r2
 8029bbe:	bfb8      	it	lt
 8029bc0:	4613      	movlt	r3, r2
 8029bc2:	6033      	str	r3, [r6, #0]
 8029bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029bc8:	4607      	mov	r7, r0
 8029bca:	460c      	mov	r4, r1
 8029bcc:	b10a      	cbz	r2, 8029bd2 <_printf_common+0x26>
 8029bce:	3301      	adds	r3, #1
 8029bd0:	6033      	str	r3, [r6, #0]
 8029bd2:	6823      	ldr	r3, [r4, #0]
 8029bd4:	0699      	lsls	r1, r3, #26
 8029bd6:	bf42      	ittt	mi
 8029bd8:	6833      	ldrmi	r3, [r6, #0]
 8029bda:	3302      	addmi	r3, #2
 8029bdc:	6033      	strmi	r3, [r6, #0]
 8029bde:	6825      	ldr	r5, [r4, #0]
 8029be0:	f015 0506 	ands.w	r5, r5, #6
 8029be4:	d106      	bne.n	8029bf4 <_printf_common+0x48>
 8029be6:	f104 0a19 	add.w	sl, r4, #25
 8029bea:	68e3      	ldr	r3, [r4, #12]
 8029bec:	6832      	ldr	r2, [r6, #0]
 8029bee:	1a9b      	subs	r3, r3, r2
 8029bf0:	42ab      	cmp	r3, r5
 8029bf2:	dc26      	bgt.n	8029c42 <_printf_common+0x96>
 8029bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029bf8:	6822      	ldr	r2, [r4, #0]
 8029bfa:	3b00      	subs	r3, #0
 8029bfc:	bf18      	it	ne
 8029bfe:	2301      	movne	r3, #1
 8029c00:	0692      	lsls	r2, r2, #26
 8029c02:	d42b      	bmi.n	8029c5c <_printf_common+0xb0>
 8029c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029c08:	4641      	mov	r1, r8
 8029c0a:	4638      	mov	r0, r7
 8029c0c:	47c8      	blx	r9
 8029c0e:	3001      	adds	r0, #1
 8029c10:	d01e      	beq.n	8029c50 <_printf_common+0xa4>
 8029c12:	6823      	ldr	r3, [r4, #0]
 8029c14:	6922      	ldr	r2, [r4, #16]
 8029c16:	f003 0306 	and.w	r3, r3, #6
 8029c1a:	2b04      	cmp	r3, #4
 8029c1c:	bf02      	ittt	eq
 8029c1e:	68e5      	ldreq	r5, [r4, #12]
 8029c20:	6833      	ldreq	r3, [r6, #0]
 8029c22:	1aed      	subeq	r5, r5, r3
 8029c24:	68a3      	ldr	r3, [r4, #8]
 8029c26:	bf0c      	ite	eq
 8029c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029c2c:	2500      	movne	r5, #0
 8029c2e:	4293      	cmp	r3, r2
 8029c30:	bfc4      	itt	gt
 8029c32:	1a9b      	subgt	r3, r3, r2
 8029c34:	18ed      	addgt	r5, r5, r3
 8029c36:	2600      	movs	r6, #0
 8029c38:	341a      	adds	r4, #26
 8029c3a:	42b5      	cmp	r5, r6
 8029c3c:	d11a      	bne.n	8029c74 <_printf_common+0xc8>
 8029c3e:	2000      	movs	r0, #0
 8029c40:	e008      	b.n	8029c54 <_printf_common+0xa8>
 8029c42:	2301      	movs	r3, #1
 8029c44:	4652      	mov	r2, sl
 8029c46:	4641      	mov	r1, r8
 8029c48:	4638      	mov	r0, r7
 8029c4a:	47c8      	blx	r9
 8029c4c:	3001      	adds	r0, #1
 8029c4e:	d103      	bne.n	8029c58 <_printf_common+0xac>
 8029c50:	f04f 30ff 	mov.w	r0, #4294967295
 8029c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c58:	3501      	adds	r5, #1
 8029c5a:	e7c6      	b.n	8029bea <_printf_common+0x3e>
 8029c5c:	18e1      	adds	r1, r4, r3
 8029c5e:	1c5a      	adds	r2, r3, #1
 8029c60:	2030      	movs	r0, #48	@ 0x30
 8029c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029c66:	4422      	add	r2, r4
 8029c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029c70:	3302      	adds	r3, #2
 8029c72:	e7c7      	b.n	8029c04 <_printf_common+0x58>
 8029c74:	2301      	movs	r3, #1
 8029c76:	4622      	mov	r2, r4
 8029c78:	4641      	mov	r1, r8
 8029c7a:	4638      	mov	r0, r7
 8029c7c:	47c8      	blx	r9
 8029c7e:	3001      	adds	r0, #1
 8029c80:	d0e6      	beq.n	8029c50 <_printf_common+0xa4>
 8029c82:	3601      	adds	r6, #1
 8029c84:	e7d9      	b.n	8029c3a <_printf_common+0x8e>
	...

08029c88 <_printf_i>:
 8029c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029c8c:	7e0f      	ldrb	r7, [r1, #24]
 8029c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029c90:	2f78      	cmp	r7, #120	@ 0x78
 8029c92:	4691      	mov	r9, r2
 8029c94:	4680      	mov	r8, r0
 8029c96:	460c      	mov	r4, r1
 8029c98:	469a      	mov	sl, r3
 8029c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029c9e:	d807      	bhi.n	8029cb0 <_printf_i+0x28>
 8029ca0:	2f62      	cmp	r7, #98	@ 0x62
 8029ca2:	d80a      	bhi.n	8029cba <_printf_i+0x32>
 8029ca4:	2f00      	cmp	r7, #0
 8029ca6:	f000 80d2 	beq.w	8029e4e <_printf_i+0x1c6>
 8029caa:	2f58      	cmp	r7, #88	@ 0x58
 8029cac:	f000 80b9 	beq.w	8029e22 <_printf_i+0x19a>
 8029cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029cb8:	e03a      	b.n	8029d30 <_printf_i+0xa8>
 8029cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029cbe:	2b15      	cmp	r3, #21
 8029cc0:	d8f6      	bhi.n	8029cb0 <_printf_i+0x28>
 8029cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8029cc8 <_printf_i+0x40>)
 8029cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029cc8:	08029d21 	.word	0x08029d21
 8029ccc:	08029d35 	.word	0x08029d35
 8029cd0:	08029cb1 	.word	0x08029cb1
 8029cd4:	08029cb1 	.word	0x08029cb1
 8029cd8:	08029cb1 	.word	0x08029cb1
 8029cdc:	08029cb1 	.word	0x08029cb1
 8029ce0:	08029d35 	.word	0x08029d35
 8029ce4:	08029cb1 	.word	0x08029cb1
 8029ce8:	08029cb1 	.word	0x08029cb1
 8029cec:	08029cb1 	.word	0x08029cb1
 8029cf0:	08029cb1 	.word	0x08029cb1
 8029cf4:	08029e35 	.word	0x08029e35
 8029cf8:	08029d5f 	.word	0x08029d5f
 8029cfc:	08029def 	.word	0x08029def
 8029d00:	08029cb1 	.word	0x08029cb1
 8029d04:	08029cb1 	.word	0x08029cb1
 8029d08:	08029e57 	.word	0x08029e57
 8029d0c:	08029cb1 	.word	0x08029cb1
 8029d10:	08029d5f 	.word	0x08029d5f
 8029d14:	08029cb1 	.word	0x08029cb1
 8029d18:	08029cb1 	.word	0x08029cb1
 8029d1c:	08029df7 	.word	0x08029df7
 8029d20:	6833      	ldr	r3, [r6, #0]
 8029d22:	1d1a      	adds	r2, r3, #4
 8029d24:	681b      	ldr	r3, [r3, #0]
 8029d26:	6032      	str	r2, [r6, #0]
 8029d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029d30:	2301      	movs	r3, #1
 8029d32:	e09d      	b.n	8029e70 <_printf_i+0x1e8>
 8029d34:	6833      	ldr	r3, [r6, #0]
 8029d36:	6820      	ldr	r0, [r4, #0]
 8029d38:	1d19      	adds	r1, r3, #4
 8029d3a:	6031      	str	r1, [r6, #0]
 8029d3c:	0606      	lsls	r6, r0, #24
 8029d3e:	d501      	bpl.n	8029d44 <_printf_i+0xbc>
 8029d40:	681d      	ldr	r5, [r3, #0]
 8029d42:	e003      	b.n	8029d4c <_printf_i+0xc4>
 8029d44:	0645      	lsls	r5, r0, #25
 8029d46:	d5fb      	bpl.n	8029d40 <_printf_i+0xb8>
 8029d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029d4c:	2d00      	cmp	r5, #0
 8029d4e:	da03      	bge.n	8029d58 <_printf_i+0xd0>
 8029d50:	232d      	movs	r3, #45	@ 0x2d
 8029d52:	426d      	negs	r5, r5
 8029d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029d58:	4859      	ldr	r0, [pc, #356]	@ (8029ec0 <_printf_i+0x238>)
 8029d5a:	230a      	movs	r3, #10
 8029d5c:	e011      	b.n	8029d82 <_printf_i+0xfa>
 8029d5e:	6821      	ldr	r1, [r4, #0]
 8029d60:	6833      	ldr	r3, [r6, #0]
 8029d62:	0608      	lsls	r0, r1, #24
 8029d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8029d68:	d402      	bmi.n	8029d70 <_printf_i+0xe8>
 8029d6a:	0649      	lsls	r1, r1, #25
 8029d6c:	bf48      	it	mi
 8029d6e:	b2ad      	uxthmi	r5, r5
 8029d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8029d72:	4853      	ldr	r0, [pc, #332]	@ (8029ec0 <_printf_i+0x238>)
 8029d74:	6033      	str	r3, [r6, #0]
 8029d76:	bf14      	ite	ne
 8029d78:	230a      	movne	r3, #10
 8029d7a:	2308      	moveq	r3, #8
 8029d7c:	2100      	movs	r1, #0
 8029d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029d82:	6866      	ldr	r6, [r4, #4]
 8029d84:	60a6      	str	r6, [r4, #8]
 8029d86:	2e00      	cmp	r6, #0
 8029d88:	bfa2      	ittt	ge
 8029d8a:	6821      	ldrge	r1, [r4, #0]
 8029d8c:	f021 0104 	bicge.w	r1, r1, #4
 8029d90:	6021      	strge	r1, [r4, #0]
 8029d92:	b90d      	cbnz	r5, 8029d98 <_printf_i+0x110>
 8029d94:	2e00      	cmp	r6, #0
 8029d96:	d04b      	beq.n	8029e30 <_printf_i+0x1a8>
 8029d98:	4616      	mov	r6, r2
 8029d9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8029d9e:	fb03 5711 	mls	r7, r3, r1, r5
 8029da2:	5dc7      	ldrb	r7, [r0, r7]
 8029da4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029da8:	462f      	mov	r7, r5
 8029daa:	42bb      	cmp	r3, r7
 8029dac:	460d      	mov	r5, r1
 8029dae:	d9f4      	bls.n	8029d9a <_printf_i+0x112>
 8029db0:	2b08      	cmp	r3, #8
 8029db2:	d10b      	bne.n	8029dcc <_printf_i+0x144>
 8029db4:	6823      	ldr	r3, [r4, #0]
 8029db6:	07df      	lsls	r7, r3, #31
 8029db8:	d508      	bpl.n	8029dcc <_printf_i+0x144>
 8029dba:	6923      	ldr	r3, [r4, #16]
 8029dbc:	6861      	ldr	r1, [r4, #4]
 8029dbe:	4299      	cmp	r1, r3
 8029dc0:	bfde      	ittt	le
 8029dc2:	2330      	movle	r3, #48	@ 0x30
 8029dc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029dc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029dcc:	1b92      	subs	r2, r2, r6
 8029dce:	6122      	str	r2, [r4, #16]
 8029dd0:	f8cd a000 	str.w	sl, [sp]
 8029dd4:	464b      	mov	r3, r9
 8029dd6:	aa03      	add	r2, sp, #12
 8029dd8:	4621      	mov	r1, r4
 8029dda:	4640      	mov	r0, r8
 8029ddc:	f7ff fee6 	bl	8029bac <_printf_common>
 8029de0:	3001      	adds	r0, #1
 8029de2:	d14a      	bne.n	8029e7a <_printf_i+0x1f2>
 8029de4:	f04f 30ff 	mov.w	r0, #4294967295
 8029de8:	b004      	add	sp, #16
 8029dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029dee:	6823      	ldr	r3, [r4, #0]
 8029df0:	f043 0320 	orr.w	r3, r3, #32
 8029df4:	6023      	str	r3, [r4, #0]
 8029df6:	4833      	ldr	r0, [pc, #204]	@ (8029ec4 <_printf_i+0x23c>)
 8029df8:	2778      	movs	r7, #120	@ 0x78
 8029dfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029dfe:	6823      	ldr	r3, [r4, #0]
 8029e00:	6831      	ldr	r1, [r6, #0]
 8029e02:	061f      	lsls	r7, r3, #24
 8029e04:	f851 5b04 	ldr.w	r5, [r1], #4
 8029e08:	d402      	bmi.n	8029e10 <_printf_i+0x188>
 8029e0a:	065f      	lsls	r7, r3, #25
 8029e0c:	bf48      	it	mi
 8029e0e:	b2ad      	uxthmi	r5, r5
 8029e10:	6031      	str	r1, [r6, #0]
 8029e12:	07d9      	lsls	r1, r3, #31
 8029e14:	bf44      	itt	mi
 8029e16:	f043 0320 	orrmi.w	r3, r3, #32
 8029e1a:	6023      	strmi	r3, [r4, #0]
 8029e1c:	b11d      	cbz	r5, 8029e26 <_printf_i+0x19e>
 8029e1e:	2310      	movs	r3, #16
 8029e20:	e7ac      	b.n	8029d7c <_printf_i+0xf4>
 8029e22:	4827      	ldr	r0, [pc, #156]	@ (8029ec0 <_printf_i+0x238>)
 8029e24:	e7e9      	b.n	8029dfa <_printf_i+0x172>
 8029e26:	6823      	ldr	r3, [r4, #0]
 8029e28:	f023 0320 	bic.w	r3, r3, #32
 8029e2c:	6023      	str	r3, [r4, #0]
 8029e2e:	e7f6      	b.n	8029e1e <_printf_i+0x196>
 8029e30:	4616      	mov	r6, r2
 8029e32:	e7bd      	b.n	8029db0 <_printf_i+0x128>
 8029e34:	6833      	ldr	r3, [r6, #0]
 8029e36:	6825      	ldr	r5, [r4, #0]
 8029e38:	6961      	ldr	r1, [r4, #20]
 8029e3a:	1d18      	adds	r0, r3, #4
 8029e3c:	6030      	str	r0, [r6, #0]
 8029e3e:	062e      	lsls	r6, r5, #24
 8029e40:	681b      	ldr	r3, [r3, #0]
 8029e42:	d501      	bpl.n	8029e48 <_printf_i+0x1c0>
 8029e44:	6019      	str	r1, [r3, #0]
 8029e46:	e002      	b.n	8029e4e <_printf_i+0x1c6>
 8029e48:	0668      	lsls	r0, r5, #25
 8029e4a:	d5fb      	bpl.n	8029e44 <_printf_i+0x1bc>
 8029e4c:	8019      	strh	r1, [r3, #0]
 8029e4e:	2300      	movs	r3, #0
 8029e50:	6123      	str	r3, [r4, #16]
 8029e52:	4616      	mov	r6, r2
 8029e54:	e7bc      	b.n	8029dd0 <_printf_i+0x148>
 8029e56:	6833      	ldr	r3, [r6, #0]
 8029e58:	1d1a      	adds	r2, r3, #4
 8029e5a:	6032      	str	r2, [r6, #0]
 8029e5c:	681e      	ldr	r6, [r3, #0]
 8029e5e:	6862      	ldr	r2, [r4, #4]
 8029e60:	2100      	movs	r1, #0
 8029e62:	4630      	mov	r0, r6
 8029e64:	f7d6 fa4c 	bl	8000300 <memchr>
 8029e68:	b108      	cbz	r0, 8029e6e <_printf_i+0x1e6>
 8029e6a:	1b80      	subs	r0, r0, r6
 8029e6c:	6060      	str	r0, [r4, #4]
 8029e6e:	6863      	ldr	r3, [r4, #4]
 8029e70:	6123      	str	r3, [r4, #16]
 8029e72:	2300      	movs	r3, #0
 8029e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029e78:	e7aa      	b.n	8029dd0 <_printf_i+0x148>
 8029e7a:	6923      	ldr	r3, [r4, #16]
 8029e7c:	4632      	mov	r2, r6
 8029e7e:	4649      	mov	r1, r9
 8029e80:	4640      	mov	r0, r8
 8029e82:	47d0      	blx	sl
 8029e84:	3001      	adds	r0, #1
 8029e86:	d0ad      	beq.n	8029de4 <_printf_i+0x15c>
 8029e88:	6823      	ldr	r3, [r4, #0]
 8029e8a:	079b      	lsls	r3, r3, #30
 8029e8c:	d413      	bmi.n	8029eb6 <_printf_i+0x22e>
 8029e8e:	68e0      	ldr	r0, [r4, #12]
 8029e90:	9b03      	ldr	r3, [sp, #12]
 8029e92:	4298      	cmp	r0, r3
 8029e94:	bfb8      	it	lt
 8029e96:	4618      	movlt	r0, r3
 8029e98:	e7a6      	b.n	8029de8 <_printf_i+0x160>
 8029e9a:	2301      	movs	r3, #1
 8029e9c:	4632      	mov	r2, r6
 8029e9e:	4649      	mov	r1, r9
 8029ea0:	4640      	mov	r0, r8
 8029ea2:	47d0      	blx	sl
 8029ea4:	3001      	adds	r0, #1
 8029ea6:	d09d      	beq.n	8029de4 <_printf_i+0x15c>
 8029ea8:	3501      	adds	r5, #1
 8029eaa:	68e3      	ldr	r3, [r4, #12]
 8029eac:	9903      	ldr	r1, [sp, #12]
 8029eae:	1a5b      	subs	r3, r3, r1
 8029eb0:	42ab      	cmp	r3, r5
 8029eb2:	dcf2      	bgt.n	8029e9a <_printf_i+0x212>
 8029eb4:	e7eb      	b.n	8029e8e <_printf_i+0x206>
 8029eb6:	2500      	movs	r5, #0
 8029eb8:	f104 0619 	add.w	r6, r4, #25
 8029ebc:	e7f5      	b.n	8029eaa <_printf_i+0x222>
 8029ebe:	bf00      	nop
 8029ec0:	0802ba92 	.word	0x0802ba92
 8029ec4:	0802baa3 	.word	0x0802baa3

08029ec8 <__sflush_r>:
 8029ec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ed0:	0716      	lsls	r6, r2, #28
 8029ed2:	4605      	mov	r5, r0
 8029ed4:	460c      	mov	r4, r1
 8029ed6:	d454      	bmi.n	8029f82 <__sflush_r+0xba>
 8029ed8:	684b      	ldr	r3, [r1, #4]
 8029eda:	2b00      	cmp	r3, #0
 8029edc:	dc02      	bgt.n	8029ee4 <__sflush_r+0x1c>
 8029ede:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029ee0:	2b00      	cmp	r3, #0
 8029ee2:	dd48      	ble.n	8029f76 <__sflush_r+0xae>
 8029ee4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029ee6:	2e00      	cmp	r6, #0
 8029ee8:	d045      	beq.n	8029f76 <__sflush_r+0xae>
 8029eea:	2300      	movs	r3, #0
 8029eec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029ef0:	682f      	ldr	r7, [r5, #0]
 8029ef2:	6a21      	ldr	r1, [r4, #32]
 8029ef4:	602b      	str	r3, [r5, #0]
 8029ef6:	d030      	beq.n	8029f5a <__sflush_r+0x92>
 8029ef8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8029efa:	89a3      	ldrh	r3, [r4, #12]
 8029efc:	0759      	lsls	r1, r3, #29
 8029efe:	d505      	bpl.n	8029f0c <__sflush_r+0x44>
 8029f00:	6863      	ldr	r3, [r4, #4]
 8029f02:	1ad2      	subs	r2, r2, r3
 8029f04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029f06:	b10b      	cbz	r3, 8029f0c <__sflush_r+0x44>
 8029f08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029f0a:	1ad2      	subs	r2, r2, r3
 8029f0c:	2300      	movs	r3, #0
 8029f0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029f10:	6a21      	ldr	r1, [r4, #32]
 8029f12:	4628      	mov	r0, r5
 8029f14:	47b0      	blx	r6
 8029f16:	1c43      	adds	r3, r0, #1
 8029f18:	89a3      	ldrh	r3, [r4, #12]
 8029f1a:	d106      	bne.n	8029f2a <__sflush_r+0x62>
 8029f1c:	6829      	ldr	r1, [r5, #0]
 8029f1e:	291d      	cmp	r1, #29
 8029f20:	d82b      	bhi.n	8029f7a <__sflush_r+0xb2>
 8029f22:	4a2a      	ldr	r2, [pc, #168]	@ (8029fcc <__sflush_r+0x104>)
 8029f24:	410a      	asrs	r2, r1
 8029f26:	07d6      	lsls	r6, r2, #31
 8029f28:	d427      	bmi.n	8029f7a <__sflush_r+0xb2>
 8029f2a:	2200      	movs	r2, #0
 8029f2c:	6062      	str	r2, [r4, #4]
 8029f2e:	04d9      	lsls	r1, r3, #19
 8029f30:	6922      	ldr	r2, [r4, #16]
 8029f32:	6022      	str	r2, [r4, #0]
 8029f34:	d504      	bpl.n	8029f40 <__sflush_r+0x78>
 8029f36:	1c42      	adds	r2, r0, #1
 8029f38:	d101      	bne.n	8029f3e <__sflush_r+0x76>
 8029f3a:	682b      	ldr	r3, [r5, #0]
 8029f3c:	b903      	cbnz	r3, 8029f40 <__sflush_r+0x78>
 8029f3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8029f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029f42:	602f      	str	r7, [r5, #0]
 8029f44:	b1b9      	cbz	r1, 8029f76 <__sflush_r+0xae>
 8029f46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029f4a:	4299      	cmp	r1, r3
 8029f4c:	d002      	beq.n	8029f54 <__sflush_r+0x8c>
 8029f4e:	4628      	mov	r0, r5
 8029f50:	f7ff fc98 	bl	8029884 <_free_r>
 8029f54:	2300      	movs	r3, #0
 8029f56:	6363      	str	r3, [r4, #52]	@ 0x34
 8029f58:	e00d      	b.n	8029f76 <__sflush_r+0xae>
 8029f5a:	2301      	movs	r3, #1
 8029f5c:	4628      	mov	r0, r5
 8029f5e:	47b0      	blx	r6
 8029f60:	4602      	mov	r2, r0
 8029f62:	1c50      	adds	r0, r2, #1
 8029f64:	d1c9      	bne.n	8029efa <__sflush_r+0x32>
 8029f66:	682b      	ldr	r3, [r5, #0]
 8029f68:	2b00      	cmp	r3, #0
 8029f6a:	d0c6      	beq.n	8029efa <__sflush_r+0x32>
 8029f6c:	2b1d      	cmp	r3, #29
 8029f6e:	d001      	beq.n	8029f74 <__sflush_r+0xac>
 8029f70:	2b16      	cmp	r3, #22
 8029f72:	d11e      	bne.n	8029fb2 <__sflush_r+0xea>
 8029f74:	602f      	str	r7, [r5, #0]
 8029f76:	2000      	movs	r0, #0
 8029f78:	e022      	b.n	8029fc0 <__sflush_r+0xf8>
 8029f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029f7e:	b21b      	sxth	r3, r3
 8029f80:	e01b      	b.n	8029fba <__sflush_r+0xf2>
 8029f82:	690f      	ldr	r7, [r1, #16]
 8029f84:	2f00      	cmp	r7, #0
 8029f86:	d0f6      	beq.n	8029f76 <__sflush_r+0xae>
 8029f88:	0793      	lsls	r3, r2, #30
 8029f8a:	680e      	ldr	r6, [r1, #0]
 8029f8c:	bf08      	it	eq
 8029f8e:	694b      	ldreq	r3, [r1, #20]
 8029f90:	600f      	str	r7, [r1, #0]
 8029f92:	bf18      	it	ne
 8029f94:	2300      	movne	r3, #0
 8029f96:	eba6 0807 	sub.w	r8, r6, r7
 8029f9a:	608b      	str	r3, [r1, #8]
 8029f9c:	f1b8 0f00 	cmp.w	r8, #0
 8029fa0:	dde9      	ble.n	8029f76 <__sflush_r+0xae>
 8029fa2:	6a21      	ldr	r1, [r4, #32]
 8029fa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029fa6:	4643      	mov	r3, r8
 8029fa8:	463a      	mov	r2, r7
 8029faa:	4628      	mov	r0, r5
 8029fac:	47b0      	blx	r6
 8029fae:	2800      	cmp	r0, #0
 8029fb0:	dc08      	bgt.n	8029fc4 <__sflush_r+0xfc>
 8029fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029fba:	81a3      	strh	r3, [r4, #12]
 8029fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8029fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029fc4:	4407      	add	r7, r0
 8029fc6:	eba8 0800 	sub.w	r8, r8, r0
 8029fca:	e7e7      	b.n	8029f9c <__sflush_r+0xd4>
 8029fcc:	dfbffffe 	.word	0xdfbffffe

08029fd0 <_fflush_r>:
 8029fd0:	b538      	push	{r3, r4, r5, lr}
 8029fd2:	690b      	ldr	r3, [r1, #16]
 8029fd4:	4605      	mov	r5, r0
 8029fd6:	460c      	mov	r4, r1
 8029fd8:	b913      	cbnz	r3, 8029fe0 <_fflush_r+0x10>
 8029fda:	2500      	movs	r5, #0
 8029fdc:	4628      	mov	r0, r5
 8029fde:	bd38      	pop	{r3, r4, r5, pc}
 8029fe0:	b118      	cbz	r0, 8029fea <_fflush_r+0x1a>
 8029fe2:	6a03      	ldr	r3, [r0, #32]
 8029fe4:	b90b      	cbnz	r3, 8029fea <_fflush_r+0x1a>
 8029fe6:	f7ff f9bf 	bl	8029368 <__sinit>
 8029fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029fee:	2b00      	cmp	r3, #0
 8029ff0:	d0f3      	beq.n	8029fda <_fflush_r+0xa>
 8029ff2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029ff4:	07d0      	lsls	r0, r2, #31
 8029ff6:	d404      	bmi.n	802a002 <_fflush_r+0x32>
 8029ff8:	0599      	lsls	r1, r3, #22
 8029ffa:	d402      	bmi.n	802a002 <_fflush_r+0x32>
 8029ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029ffe:	f7ff fc30 	bl	8029862 <__retarget_lock_acquire_recursive>
 802a002:	4628      	mov	r0, r5
 802a004:	4621      	mov	r1, r4
 802a006:	f7ff ff5f 	bl	8029ec8 <__sflush_r>
 802a00a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a00c:	07da      	lsls	r2, r3, #31
 802a00e:	4605      	mov	r5, r0
 802a010:	d4e4      	bmi.n	8029fdc <_fflush_r+0xc>
 802a012:	89a3      	ldrh	r3, [r4, #12]
 802a014:	059b      	lsls	r3, r3, #22
 802a016:	d4e1      	bmi.n	8029fdc <_fflush_r+0xc>
 802a018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a01a:	f7ff fc23 	bl	8029864 <__retarget_lock_release_recursive>
 802a01e:	e7dd      	b.n	8029fdc <_fflush_r+0xc>

0802a020 <__swhatbuf_r>:
 802a020:	b570      	push	{r4, r5, r6, lr}
 802a022:	460c      	mov	r4, r1
 802a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a028:	2900      	cmp	r1, #0
 802a02a:	b096      	sub	sp, #88	@ 0x58
 802a02c:	4615      	mov	r5, r2
 802a02e:	461e      	mov	r6, r3
 802a030:	da0d      	bge.n	802a04e <__swhatbuf_r+0x2e>
 802a032:	89a3      	ldrh	r3, [r4, #12]
 802a034:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a038:	f04f 0100 	mov.w	r1, #0
 802a03c:	bf14      	ite	ne
 802a03e:	2340      	movne	r3, #64	@ 0x40
 802a040:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a044:	2000      	movs	r0, #0
 802a046:	6031      	str	r1, [r6, #0]
 802a048:	602b      	str	r3, [r5, #0]
 802a04a:	b016      	add	sp, #88	@ 0x58
 802a04c:	bd70      	pop	{r4, r5, r6, pc}
 802a04e:	466a      	mov	r2, sp
 802a050:	f000 f87c 	bl	802a14c <_fstat_r>
 802a054:	2800      	cmp	r0, #0
 802a056:	dbec      	blt.n	802a032 <__swhatbuf_r+0x12>
 802a058:	9901      	ldr	r1, [sp, #4]
 802a05a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a05e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a062:	4259      	negs	r1, r3
 802a064:	4159      	adcs	r1, r3
 802a066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a06a:	e7eb      	b.n	802a044 <__swhatbuf_r+0x24>

0802a06c <__smakebuf_r>:
 802a06c:	898b      	ldrh	r3, [r1, #12]
 802a06e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a070:	079d      	lsls	r5, r3, #30
 802a072:	4606      	mov	r6, r0
 802a074:	460c      	mov	r4, r1
 802a076:	d507      	bpl.n	802a088 <__smakebuf_r+0x1c>
 802a078:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a07c:	6023      	str	r3, [r4, #0]
 802a07e:	6123      	str	r3, [r4, #16]
 802a080:	2301      	movs	r3, #1
 802a082:	6163      	str	r3, [r4, #20]
 802a084:	b003      	add	sp, #12
 802a086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a088:	ab01      	add	r3, sp, #4
 802a08a:	466a      	mov	r2, sp
 802a08c:	f7ff ffc8 	bl	802a020 <__swhatbuf_r>
 802a090:	9f00      	ldr	r7, [sp, #0]
 802a092:	4605      	mov	r5, r0
 802a094:	4639      	mov	r1, r7
 802a096:	4630      	mov	r0, r6
 802a098:	f7fe ff94 	bl	8028fc4 <_malloc_r>
 802a09c:	b948      	cbnz	r0, 802a0b2 <__smakebuf_r+0x46>
 802a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a0a2:	059a      	lsls	r2, r3, #22
 802a0a4:	d4ee      	bmi.n	802a084 <__smakebuf_r+0x18>
 802a0a6:	f023 0303 	bic.w	r3, r3, #3
 802a0aa:	f043 0302 	orr.w	r3, r3, #2
 802a0ae:	81a3      	strh	r3, [r4, #12]
 802a0b0:	e7e2      	b.n	802a078 <__smakebuf_r+0xc>
 802a0b2:	89a3      	ldrh	r3, [r4, #12]
 802a0b4:	6020      	str	r0, [r4, #0]
 802a0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a0ba:	81a3      	strh	r3, [r4, #12]
 802a0bc:	9b01      	ldr	r3, [sp, #4]
 802a0be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a0c2:	b15b      	cbz	r3, 802a0dc <__smakebuf_r+0x70>
 802a0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a0c8:	4630      	mov	r0, r6
 802a0ca:	f000 f851 	bl	802a170 <_isatty_r>
 802a0ce:	b128      	cbz	r0, 802a0dc <__smakebuf_r+0x70>
 802a0d0:	89a3      	ldrh	r3, [r4, #12]
 802a0d2:	f023 0303 	bic.w	r3, r3, #3
 802a0d6:	f043 0301 	orr.w	r3, r3, #1
 802a0da:	81a3      	strh	r3, [r4, #12]
 802a0dc:	89a3      	ldrh	r3, [r4, #12]
 802a0de:	431d      	orrs	r5, r3
 802a0e0:	81a5      	strh	r5, [r4, #12]
 802a0e2:	e7cf      	b.n	802a084 <__smakebuf_r+0x18>

0802a0e4 <_putc_r>:
 802a0e4:	b570      	push	{r4, r5, r6, lr}
 802a0e6:	460d      	mov	r5, r1
 802a0e8:	4614      	mov	r4, r2
 802a0ea:	4606      	mov	r6, r0
 802a0ec:	b118      	cbz	r0, 802a0f6 <_putc_r+0x12>
 802a0ee:	6a03      	ldr	r3, [r0, #32]
 802a0f0:	b90b      	cbnz	r3, 802a0f6 <_putc_r+0x12>
 802a0f2:	f7ff f939 	bl	8029368 <__sinit>
 802a0f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a0f8:	07d8      	lsls	r0, r3, #31
 802a0fa:	d405      	bmi.n	802a108 <_putc_r+0x24>
 802a0fc:	89a3      	ldrh	r3, [r4, #12]
 802a0fe:	0599      	lsls	r1, r3, #22
 802a100:	d402      	bmi.n	802a108 <_putc_r+0x24>
 802a102:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a104:	f7ff fbad 	bl	8029862 <__retarget_lock_acquire_recursive>
 802a108:	68a3      	ldr	r3, [r4, #8]
 802a10a:	3b01      	subs	r3, #1
 802a10c:	2b00      	cmp	r3, #0
 802a10e:	60a3      	str	r3, [r4, #8]
 802a110:	da05      	bge.n	802a11e <_putc_r+0x3a>
 802a112:	69a2      	ldr	r2, [r4, #24]
 802a114:	4293      	cmp	r3, r2
 802a116:	db12      	blt.n	802a13e <_putc_r+0x5a>
 802a118:	b2eb      	uxtb	r3, r5
 802a11a:	2b0a      	cmp	r3, #10
 802a11c:	d00f      	beq.n	802a13e <_putc_r+0x5a>
 802a11e:	6823      	ldr	r3, [r4, #0]
 802a120:	1c5a      	adds	r2, r3, #1
 802a122:	6022      	str	r2, [r4, #0]
 802a124:	701d      	strb	r5, [r3, #0]
 802a126:	b2ed      	uxtb	r5, r5
 802a128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a12a:	07da      	lsls	r2, r3, #31
 802a12c:	d405      	bmi.n	802a13a <_putc_r+0x56>
 802a12e:	89a3      	ldrh	r3, [r4, #12]
 802a130:	059b      	lsls	r3, r3, #22
 802a132:	d402      	bmi.n	802a13a <_putc_r+0x56>
 802a134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a136:	f7ff fb95 	bl	8029864 <__retarget_lock_release_recursive>
 802a13a:	4628      	mov	r0, r5
 802a13c:	bd70      	pop	{r4, r5, r6, pc}
 802a13e:	4629      	mov	r1, r5
 802a140:	4622      	mov	r2, r4
 802a142:	4630      	mov	r0, r6
 802a144:	f7ff fa01 	bl	802954a <__swbuf_r>
 802a148:	4605      	mov	r5, r0
 802a14a:	e7ed      	b.n	802a128 <_putc_r+0x44>

0802a14c <_fstat_r>:
 802a14c:	b538      	push	{r3, r4, r5, lr}
 802a14e:	4d07      	ldr	r5, [pc, #28]	@ (802a16c <_fstat_r+0x20>)
 802a150:	2300      	movs	r3, #0
 802a152:	4604      	mov	r4, r0
 802a154:	4608      	mov	r0, r1
 802a156:	4611      	mov	r1, r2
 802a158:	602b      	str	r3, [r5, #0]
 802a15a:	f7e4 ff73 	bl	800f044 <_fstat>
 802a15e:	1c43      	adds	r3, r0, #1
 802a160:	d102      	bne.n	802a168 <_fstat_r+0x1c>
 802a162:	682b      	ldr	r3, [r5, #0]
 802a164:	b103      	cbz	r3, 802a168 <_fstat_r+0x1c>
 802a166:	6023      	str	r3, [r4, #0]
 802a168:	bd38      	pop	{r3, r4, r5, pc}
 802a16a:	bf00      	nop
 802a16c:	24000c08 	.word	0x24000c08

0802a170 <_isatty_r>:
 802a170:	b538      	push	{r3, r4, r5, lr}
 802a172:	4d06      	ldr	r5, [pc, #24]	@ (802a18c <_isatty_r+0x1c>)
 802a174:	2300      	movs	r3, #0
 802a176:	4604      	mov	r4, r0
 802a178:	4608      	mov	r0, r1
 802a17a:	602b      	str	r3, [r5, #0]
 802a17c:	f7e4 ff72 	bl	800f064 <_isatty>
 802a180:	1c43      	adds	r3, r0, #1
 802a182:	d102      	bne.n	802a18a <_isatty_r+0x1a>
 802a184:	682b      	ldr	r3, [r5, #0]
 802a186:	b103      	cbz	r3, 802a18a <_isatty_r+0x1a>
 802a188:	6023      	str	r3, [r4, #0]
 802a18a:	bd38      	pop	{r3, r4, r5, pc}
 802a18c:	24000c08 	.word	0x24000c08

0802a190 <_init>:
 802a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a192:	bf00      	nop
 802a194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a196:	bc08      	pop	{r3}
 802a198:	469e      	mov	lr, r3
 802a19a:	4770      	bx	lr

0802a19c <_fini>:
 802a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a19e:	bf00      	nop
 802a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a1a2:	bc08      	pop	{r3}
 802a1a4:	469e      	mov	lr, r3
 802a1a6:	4770      	bx	lr
