
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029df0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000190c  0802a090  0802a090  0002b090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802b99c  0802b99c  0002c99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0802b9a4  0802b9a4  0002c9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802b9b0  0802b9b0  0002c9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0802b9b4  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b88  24000088  0802ba3c  0002d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c10  0802ba3c  0002dc10  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY
 11 .debug_info   001ec45f  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001bf51  00000000  00000000  00219515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00009188  00000000  00000000  00235468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00006eee  00000000  00000000  0023e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000577b4  00000000  00000000  002454de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0009d00f  00000000  00000000  0029cc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d97d2  00000000  00000000  00339ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00513473  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0002b91c  00000000  00000000  005134b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0053edd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a078 	.word	0x0802a078

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0802a078 	.word	0x0802a078

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f010 ffd2 	bl	8011d30 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0802b060 	.word	0x0802b060

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f027 fbca 	bl	8028546 <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0802b030 	.word	0x0802b030
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0802b030 	.word	0x0802b030

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f027 fb73 	bl	8028546 <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f01d fb40 	bl	801e548 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f028 fa67 	bl	802939c <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f022 fe56 	bl	8023c10 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f028 fa0a 	bl	802939c <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f01d fab9 	bl	801e548 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f028 f9e0 	bl	802939c <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f01a ff47 	bl	801bec8 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f01a ff0b 	bl	801bec8 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f028 f966 	bl	802939c <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f01a fec0 	bl	801bec8 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0802a090 	.word	0x0802a090
 8001160:	0802a0ac 	.word	0x0802a0ac
 8001164:	0802a0c8 	.word	0x0802a0c8
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0802a0e4 	.word	0x0802a0e4
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f027 f9f1 	bl	8028568 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f01a fdd6 	bl	801bd66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f01a fdea 	bl	801bd9a <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f027 f9ce 	bl	8028568 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f01a fdb3 	bl	801bd66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f01a fdc7 	bl	801bd9a <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f027 f9ab 	bl	8028568 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f01a fd90 	bl	801bd66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f01a fda4 	bl	801bd9a <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f028 f82e 	bl	802939c <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0802a114 	.word	0x0802a114

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f01c fc17 	bl	801dd20 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f01c fbeb 	bl	801dd20 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f01b f92e 	bl	801c7c0 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f019 ffe7 	bl	801bd9a <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f027 fa8d 	bl	802939c <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f019 ff86 	bl	801bd9a <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0802a124 	.word	0x0802a124

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f01a fb50 	bl	801c580 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f01a ff7b 	bl	801cdfc <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f01a fc50 	bl	801c7c0 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 ff6b 	bl	8004e20 <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 ff66 	bl	8004e40 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0802b024 	.word	0x0802b024

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f026 fae4 	bl	80285ba <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00f fde0 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0802b060 	.word	0x0802b060

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_>:
#include "SoftwareSPI.h"

SoftwareSPI::SoftwareSPI(const std::string& mosi, const std::string& miso, const std::string& sck)
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
    : mosi_pin(mosi, OUTPUT), miso_pin(miso, INPUT, PULLUP), sck_pin(sck, OUTPUT), delayTicks(2) {
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fba0 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002206:	2302      	movs	r3, #2
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f002 fbc0 	bl	8004990 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3380      	adds	r3, #128	@ 0x80
 8002214:	2201      	movs	r2, #1
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fb91 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2202      	movs	r2, #2
 8002222:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN11SoftwareSPI4initEv>:

void SoftwareSPI::init()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	sck_pin.set(true);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3380      	adds	r3, #128	@ 0x80
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fd28 	bl	8004c94 <_ZN3Pin3setEb>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZN11SoftwareSPI8transferEh>:

void SoftwareSPI::begin() {}

uint8_t SoftwareSPI::transfer(uint8_t data) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
    uint8_t received = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]

    sck_pin.set(false);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3380      	adds	r3, #128	@ 0x80
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f002 fd16 	bl	8004c94 <_ZN3Pin3setEb>

    for (uint8_t i = 7; i >=1; i--) {
 8002268:	2307      	movs	r3, #7
 800226a:	73bb      	strb	r3, [r7, #14]
 800226c:	e035      	b.n	80022da <_ZN11SoftwareSPI8transferEh+0x8e>
    	!!(data & (1<<i))? mosi_pin.set(true) : mosi_pin.set(false);
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	fa42 f303 	asr.w	r3, r2, r3
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <_ZN11SoftwareSPI8transferEh+0x3e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fd06 	bl	8004c94 <_ZN3Pin3setEb>
 8002288:	e004      	b.n	8002294 <_ZN11SoftwareSPI8transferEh+0x48>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fd00 	bl	8004c94 <_ZN3Pin3setEb>
    	sck_pin.set(true);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3380      	adds	r3, #128	@ 0x80
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fcfa 	bl	8004c94 <_ZN3Pin3setEb>
    	received |= (miso_pin.get() ? 1 : 0) << i;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3340      	adds	r3, #64	@ 0x40
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fcdf 	bl	8004c68 <_ZNK3Pin3getEv>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <_ZN11SoftwareSPI8transferEh+0x68>
 80022b0:	2201      	movs	r2, #1
 80022b2:	e000      	b.n	80022b6 <_ZN11SoftwareSPI8transferEh+0x6a>
 80022b4:	2200      	movs	r2, #0
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	b25a      	sxtb	r2, r3
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	73fb      	strb	r3, [r7, #15]
    	sck_pin.set(false);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3380      	adds	r3, #128	@ 0x80
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fce0 	bl	8004c94 <_ZN3Pin3setEb>
    for (uint8_t i = 7; i >=1; i--) {
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	73bb      	strb	r3, [r7, #14]
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1c6      	bne.n	800226e <_ZN11SoftwareSPI8transferEh+0x22>
    }

    !!(data & (1<<0))? mosi_pin.set(true) : mosi_pin.set(false);
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <_ZN11SoftwareSPI8transferEh+0xaa>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fcd0 	bl	8004c94 <_ZN3Pin3setEb>
 80022f4:	e004      	b.n	8002300 <_ZN11SoftwareSPI8transferEh+0xb4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fcca 	bl	8004c94 <_ZN3Pin3setEb>
    sck_pin.set(true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3380      	adds	r3, #128	@ 0x80
 8002304:	2101      	movs	r1, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fcc4 	bl	8004c94 <_ZN3Pin3setEb>
    received |= (miso_pin.get() ? 1 : 0) << 0;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3340      	adds	r3, #64	@ 0x40
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fca9 	bl	8004c68 <_ZNK3Pin3getEv>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <_ZN11SoftwareSPI8transferEh+0xd4>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <_ZN11SoftwareSPI8transferEh+0xd6>
 8002320:	2300      	movs	r3, #0
 8002322:	b25a      	sxtb	r2, r3
 8002324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002328:	4313      	orrs	r3, r2
 800232a:	b25b      	sxtb	r3, r3
 800232c:	73fb      	strb	r3, [r7, #15]

    return received;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	f026 f9d8 	bl	8028712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3318      	adds	r3, #24
 8002366:	4618      	mov	r0, r3
 8002368:	f026 f9d3 	bl	8028712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f026 fab6 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002372:	4603      	mov	r3, r0
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f026 fa4d 	bl	8028822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f026 faa8 	bl	80288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800238e:	4603      	mov	r3, r0
 8002390:	f083 0301 	eor.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3318      	adds	r3, #24
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f026 fa3e 	bl	8028822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3318      	adds	r3, #24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f026 fbba 	bl	8028b28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 80023d0:	2040      	movs	r0, #64	@ 0x40
 80023d2:	f026 f8c9 	bl	8028568 <_Znwj>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461c      	mov	r4, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3318      	adds	r3, #24
 80023de:	2201      	movs	r2, #1
 80023e0:	4619      	mov	r1, r3
 80023e2:	4620      	mov	r0, r4
 80023e4:	f002 faac 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f848 	bl	800248a <_ZN14SoftwareSerial5setTXEv>
 80023fa:	e020      	b.n	800243e <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 80023fc:	2040      	movs	r0, #64	@ 0x40
 80023fe:	f026 f8b3 	bl	8028568 <_Znwj>
 8002402:	4603      	mov	r3, r0
 8002404:	461c      	mov	r4, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	4619      	mov	r1, r3
 800240c:	4620      	mov	r0, r4
 800240e:	f002 fa97 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f837 	bl	800248a <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 800241c:	2040      	movs	r0, #64	@ 0x40
 800241e:	f026 f8a3 	bl	8028568 <_Znwj>
 8002422:	4603      	mov	r3, r0
 8002424:	461c      	mov	r4, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3318      	adds	r3, #24
 800242a:	2201      	movs	r2, #1
 800242c:	4619      	mov	r1, r3
 800242e:	4620      	mov	r0, r4
 8002430:	f002 fa86 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f839 	bl	80024b0 <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}

08002468 <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 8002472:	f644 4390 	movw	r3, #19600	@ 0x4c90
 8002476:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4618      	mov	r0, r3
 8002498:	f002 fc13 	bl	8004cc2 <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	2101      	movs	r1, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fbf6 	bl	8004c94 <_ZN3Pin3setEb>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fc11 	bl	8004ce4 <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fc1d 	bl	8004d06 <_ZN3Pin9setPullUpEv>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01f      	beq.n	800252a <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffdd 	bl	80024b0 <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 8002510:	e00b      	b.n	800252a <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffb4 	bl	800248a <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 8002542:	2101      	movs	r1, #1
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffc5 	bl	80024d4 <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f80c 	bl	8002588 <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f867 	bl	800264e <_ZN14SoftwareSerial7receiveEv>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bfd4      	ite	le
 80025a8:	2301      	movle	r3, #1
 80025aa:	2300      	movgt	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d049      	beq.n	8002646 <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b8:	1c59      	adds	r1, r3, #1
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	bfd4      	ite	le
 80025c4:	2301      	movle	r3, #1
 80025c6:	2300      	movgt	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01b      	beq.n	8002606 <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f002 fb53 	bl	8004c94 <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f4:	105a      	asrs	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 8002604:	e01f      	b.n	8002646 <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002620:	e011      	b.n	8002646 <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002628:	2b19      	cmp	r3, #25
 800262a:	d90c      	bls.n	8002646 <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 8002636:	2101      	movs	r1, #1
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff4b 	bl	80024d4 <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfd4      	ite	le
 800266e:	2301      	movle	r3, #1
 8002670:	2300      	movgt	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d06f      	beq.n	8002758 <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	4618      	mov	r0, r3
 800267e:	f002 faf3 	bl	8004c68 <_ZNK3Pin3getEv>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d114      	bne.n	80026bc <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10c      	bne.n	80026b2 <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 80026b0:	e052      	b.n	8002758 <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80026ba:	e04d      	b.n	8002758 <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	2b07      	cmp	r3, #7
 80026c4:	dd2b      	ble.n	800271e <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026d2:	4619      	mov	r1, r3
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	440b      	add	r3, r1
 80026da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026f6:	bf8c      	ite	hi
 80026f8:	2301      	movhi	r3, #1
 80026fa:	2300      	movls	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 800271c:	e01c      	b.n	8002758 <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002724:	105a      	asrs	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <_ZN14SoftwareSerial7receiveEv+0xf4>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002776:	1ad3      	subs	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 8002796:	e002      	b.n	800279e <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fdcd 	bl	8002338 <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f7      	bne.n	8002798 <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <_ZN14SoftwareSerial5writeEi+0x54>
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fe7e 	bl	80024d4 <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002804:	429a      	cmp	r2, r3
 8002806:	d102      	bne.n	800280e <_ZN14SoftwareSerial4readEv+0x1e>
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e020      	b.n	8002850 <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800281e:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002826:	3301      	adds	r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002836:	2b3f      	cmp	r3, #63	@ 0x3f
 8002838:	bf8c      	ite	hi
 800283a:	2301      	movhi	r3, #1
 800283c:	2300      	movls	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <_ZN14SoftwareSerial4readEv+0x5c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	b21b      	sxth	r3, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_ZN14TMC2130Stepper8CHOPCONFEv>:

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF

uint32_t TMC2130Stepper::CHOPCONF() {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	216c      	movs	r1, #108	@ 0x6c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
    CHOPCONF_register.sr = input;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 800289a:	216c      	movs	r1, #108	@ 0x6c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(      uint8_t B ) { SET_REG(toff);    }
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	b2d9      	uxtb	r1, r3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 80028c2:	f361 0303 	bfi	r3, r1, #0, #4
 80028c6:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 80028d6:	216c      	movs	r1, #108	@ 0x6c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(     uint8_t B ) { SET_REG(hstrt);   }
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	b2d9      	uxtb	r1, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 80028fe:	f361 1306 	bfi	r3, r1, #4, #3
 8002902:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002912:	216c      	movs	r1, #108	@ 0x6c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(      uint8_t B ) { SET_REG(hend);    }
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f002 0101 	and.w	r1, r2, #1
 800293a:	01cc      	lsls	r4, r1, #7
 800293c:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8002940:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002944:	4608      	mov	r0, r1
 8002946:	4621      	mov	r1, r4
 8002948:	4301      	orrs	r1, r0
 800294a:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f002 0207 	and.w	r2, r2, #7
 8002956:	f002 0007 	and.w	r0, r2, #7
 800295a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800295e:	f022 0207 	bic.w	r2, r2, #7
 8002962:	4611      	mov	r1, r2
 8002964:	4602      	mov	r2, r0
 8002966:	430a      	orrs	r2, r1
 8002968:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002978:	216c      	movs	r1, #108	@ 0x6c
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}

08002986 <_ZN14TMC2130Stepper3tblEh>:
//void TMC2130Stepper::fd(      uint8_t B ) { SET_REG(fd);      }
void TMC2130Stepper::disfdcc(   bool    B ) { SET_REG(disfdcc); }
void TMC2130Stepper::rndtf(     bool    B ) { SET_REG(rndtf);   }
void TMC2130Stepper::chm(       bool    B ) { SET_REG(chm);     }
void TMC2130Stepper::tbl(       uint8_t B ) { SET_REG(tbl);     }
 8002986:	b590      	push	{r4, r7, lr}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	70fb      	strb	r3, [r7, #3]
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f002 0101 	and.w	r1, r2, #1
 80029a0:	01cc      	lsls	r4, r1, #7
 80029a2:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80029a6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80029aa:	4608      	mov	r0, r1
 80029ac:	4621      	mov	r1, r4
 80029ae:	4301      	orrs	r1, r0
 80029b0:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
 80029b4:	0852      	lsrs	r2, r2, #1
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f002 0201 	and.w	r2, r2, #1
 80029bc:	f002 0001 	and.w	r0, r2, #1
 80029c0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	4611      	mov	r1, r2
 80029ca:	4602      	mov	r2, r0
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 80029de:	216c      	movs	r1, #108	@ 0x6c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(    bool    B ) { SET_REG(vsense);  }
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 80029fe:	78f9      	ldrb	r1, [r7, #3]
 8002a00:	f361 0341 	bfi	r3, r1, #1, #1
 8002a04:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002a14:	216c      	movs	r1, #108	@ 0x6c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(   bool    B ) { SET_REG(vhighfs); }
void TMC2130Stepper::vhighchm(  bool    B ) { SET_REG(vhighchm);}
void TMC2130Stepper::sync(      uint8_t B ) { SET_REG(sync);    }
void TMC2130Stepper::mres(      uint8_t B ) { SET_REG(mres);    }
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	b2d9      	uxtb	r1, r3
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8002a3c:	f361 0303 	bfi	r3, r1, #0, #4
 8002a40:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002a50:	216c      	movs	r1, #108	@ 0x6c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZN14TMC2130Stepper5hstrtEv>:
void TMC2130Stepper::intpol(    bool    B ) { SET_REG(intpol);  }
void TMC2130Stepper::dedge(     bool    B ) { SET_REG(dedge);   }
void TMC2130Stepper::diss2g(    bool    B ) { SET_REG(diss2g);  }

uint8_t TMC2130Stepper::toff()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;    }
uint8_t TMC2130Stepper::hstrt()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;   }
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fef6 	bl	800285c <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	7b3b      	ldrb	r3, [r7, #12]
 8002a76:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;    }
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fee3 	bl	800285c <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002a96:	4603      	mov	r3, r0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;      }
bool    TMC2130Stepper::disfdcc()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc; }
bool    TMC2130Stepper::rndtf()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;   }
bool    TMC2130Stepper::chm()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;     }
uint8_t TMC2130Stepper::tbl()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;     }
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fed0 	bl	800285c <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN14TMC2130Stepper6vsenseEv>:
bool    TMC2130Stepper::vsense()    { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;  }
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff febd 	bl	800285c <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_ZN14TMC2130Stepper4mresEv>:
bool    TMC2130Stepper::vhighfs()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs; }
bool    TMC2130Stepper::vhighchm()  { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;    }
uint8_t TMC2130Stepper::mres()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;    }
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff feaa 	bl	800285c <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>:

void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	216c      	movs	r1, #108	@ 0x6c
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	b2d9      	uxtb	r1, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002b56:	f361 0303 	bfi	r3, r1, #0, #4
 8002b5a:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002b6a:	216c      	movs	r1, #108	@ 0x6c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	b2d9      	uxtb	r1, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002b92:	f361 1306 	bfi	r3, r1, #4, #3
 8002b96:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002ba6:	216c      	movs	r1, #108	@ 0x6c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f002 0101 	and.w	r1, r2, #1
 8002bce:	01cc      	lsls	r4, r1, #7
 8002bd0:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 8002bd4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	4301      	orrs	r1, r0
 8002bde:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 0207 	and.w	r2, r2, #7
 8002bea:	f002 0007 	and.w	r0, r2, #7
 8002bee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002bf2:	f022 0207 	bic.w	r2, r2, #7
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002c0c:	216c      	movs	r1, #108	@ 0x6c
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd90      	pop	{r4, r7, pc}

08002c1a <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002c1a:	b590      	push	{r4, r7, lr}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f002 0101 	and.w	r1, r2, #1
 8002c34:	01cc      	lsls	r4, r1, #7
 8002c36:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002c3a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002c3e:	4608      	mov	r0, r1
 8002c40:	4621      	mov	r1, r4
 8002c42:	4301      	orrs	r1, r0
 8002c44:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002c48:	0852      	lsrs	r2, r2, #1
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 0201 	and.w	r2, r2, #1
 8002c50:	f002 0001 	and.w	r0, r2, #1
 8002c54:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4602      	mov	r2, r0
 8002c60:	430a      	orrs	r2, r1
 8002c62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002c72:	216c      	movs	r1, #108	@ 0x6c
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}

08002c80 <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002c92:	78f9      	ldrb	r1, [r7, #3]
 8002c94:	f361 0341 	bfi	r3, r1, #1, #1
 8002c98:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002ca8:	216c      	movs	r1, #108	@ 0x6c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	70fb      	strb	r3, [r7, #3]
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	b2d9      	uxtb	r1, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8002cd0:	f361 0303 	bfi	r3, r1, #0, #4
 8002cd4:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002ce4:	216c      	movs	r1, #108	@ 0x6c
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ff0c 	bl	8002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fef9 	bl	8002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	89bb      	ldrh	r3, [r7, #12]
 8002d30:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fee6 	bl	8002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d50:	4603      	mov	r3, r0
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fed3 	bl	8002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fec0 	bl	8002b1c <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	b2d1      	uxtb	r1, r2
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	4301      	orrs	r1, r0
 8002dc8:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 8002dcc:	0a11      	lsrs	r1, r2, #8
 8002dce:	b2c9      	uxtb	r1, r1
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	4301      	orrs	r1, r0
 8002dd4:	f883 102a 	strb.w	r1, [r3, #42]	@ 0x2a
 8002dd8:	0c11      	lsrs	r1, r2, #16
 8002dda:	b2c9      	uxtb	r1, r1
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4301      	orrs	r1, r0
 8002de0:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002de4:	0e12      	lsrs	r2, r2, #24
 8002de6:	f002 0201 	and.w	r2, r2, #1
 8002dea:	f002 0001 	and.w	r0, r2, #1
 8002dee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	4611      	mov	r1, r2
 8002df8:	4602      	mov	r2, r0
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e0a:	0a12      	lsrs	r2, r2, #8
 8002e0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	4313      	orrs	r3, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	216d      	movs	r1, #109	@ 0x6d
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	47a0      	blx	r4
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	b2d9      	uxtb	r1, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 8002e42:	f361 0303 	bfi	r3, r1, #0, #4
 8002e46:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e54:	0a12      	lsrs	r2, r2, #8
 8002e56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	4313      	orrs	r3, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	216d      	movs	r1, #109	@ 0x6d
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	47a0      	blx	r4
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}

08002e72 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8002e72:	b590      	push	{r4, r7, lr}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	b2d9      	uxtb	r1, r3
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8002e8c:	f361 0303 	bfi	r3, r1, #0, #4
 8002e90:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681c      	ldr	r4, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e9e:	0a12      	lsrs	r2, r2, #8
 8002ea0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	216d      	movs	r1, #109	@ 0x6d
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	47a0      	blx	r4
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8002ed6:	f361 1346 	bfi	r3, r1, #5, #2
 8002eda:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681c      	ldr	r4, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee8:	0a12      	lsrs	r2, r2, #8
 8002eea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	061b      	lsls	r3, r3, #24
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	216d      	movs	r1, #109	@ 0x6d
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	47a0      	blx	r4
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}

08002f06 <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2d9      	uxtb	r1, r3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002f20:	f361 0303 	bfi	r3, r1, #0, #4
 8002f24:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002f36:	b292      	uxth	r2, r2
 8002f38:	2142      	movs	r1, #66	@ 0x42
 8002f3a:	4798      	blx	r3
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2d9      	uxtb	r1, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002f5e:	f361 0303 	bfi	r3, r1, #0, #4
 8002f62:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002f74:	b292      	uxth	r2, r2
 8002f76:	2142      	movs	r1, #66	@ 0x42
 8002f78:	4798      	blx	r3
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	70fb      	strb	r3, [r7, #3]
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	b2d9      	uxtb	r1, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002f9c:	f361 1346 	bfi	r3, r1, #5, #2
 8002fa0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	2142      	movs	r1, #66	@ 0x42
 8002fb6:	4798      	blx	r3
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	216f      	movs	r1, #111	@ 0x6f
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }

uint32_t TMC2208Stepper::DRV_STATUS() {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3304      	adds	r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	216f      	movs	r1, #111	@ 0x6f
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN14TMC2130Stepper5GCONFEm>:
// GCONF

uint32_t TMC2130Stepper::GCONF() {
    return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    GCONF_register.sr = input;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	b2d1      	uxtb	r1, r2
 8003014:	2000      	movs	r0, #0
 8003016:	4301      	orrs	r1, r0
 8003018:	7559      	strb	r1, [r3, #21]
 800301a:	0a11      	lsrs	r1, r2, #8
 800301c:	b2c9      	uxtb	r1, r1
 800301e:	2000      	movs	r0, #0
 8003020:	4301      	orrs	r1, r0
 8003022:	7599      	strb	r1, [r3, #22]
 8003024:	0c12      	lsrs	r2, r2, #16
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	f002 0003 	and.w	r0, r2, #3
 800302e:	7dda      	ldrb	r2, [r3, #23]
 8003030:	f022 0203 	bic.w	r2, r2, #3
 8003034:	4611      	mov	r1, r2
 8003036:	4602      	mov	r2, r0
 8003038:	430a      	orrs	r2, r1
 800303a:	75da      	strb	r2, [r3, #23]
    write(GCONF_register.address, GCONF_register.sr);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6952      	ldr	r2, [r2, #20]
 8003046:	f3c2 2211 	ubfx	r2, r2, #8, #18
 800304a:	2100      	movs	r1, #0
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800306a:	78f9      	ldrb	r1, [r7, #3]
 800306c:	f361 0382 	bfi	r3, r1, #2, #1
 8003070:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6a12      	ldr	r2, [r2, #32]
 800307e:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8003082:	b292      	uxth	r2, r2
 8003084:	2100      	movs	r1, #0
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80030a4:	78f9      	ldrb	r1, [r7, #3]
 80030a6:	f361 1386 	bfi	r3, r1, #6, #1
 80030aa:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6a12      	ldr	r2, [r2, #32]
 80030b8:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80030bc:	b292      	uxth	r2, r2
 80030be:	2100      	movs	r1, #0
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80030de:	78f9      	ldrb	r1, [r7, #3]
 80030e0:	f361 13c7 	bfi	r3, r1, #7, #1
 80030e4:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6a12      	ldr	r2, [r2, #32]
 80030f2:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80030f6:	b292      	uxth	r2, r2
 80030f8:	2100      	movs	r1, #0
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    IHOLD_IRUN_register.sr = input;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	b291      	uxth	r1, r2
 800311a:	2000      	movs	r0, #0
 800311c:	4301      	orrs	r1, r0
 800311e:	8099      	strh	r1, [r3, #4]
 8003120:	0c12      	lsrs	r2, r2, #16
 8003122:	f002 020f 	and.w	r2, r2, #15
 8003126:	f002 000f 	and.w	r0, r2, #15
 800312a:	799a      	ldrb	r2, [r3, #6]
 800312c:	f022 020f 	bic.w	r2, r2, #15
 8003130:	4611      	mov	r1, r2
 8003132:	4602      	mov	r2, r0
 8003134:	430a      	orrs	r2, r1
 8003136:	719a      	strb	r2, [r3, #6]
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6852      	ldr	r2, [r2, #4]
 8003142:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003146:	2110      	movs	r1, #16
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN10TMCStepper5iholdEh>:

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	b2d9      	uxtb	r1, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	7913      	ldrb	r3, [r2, #4]
 800316c:	f361 0304 	bfi	r3, r1, #0, #5
 8003170:	7113      	strb	r3, [r2, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6852      	ldr	r2, [r2, #4]
 800317c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003180:	2110      	movs	r1, #16
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	b2d9      	uxtb	r1, r3
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	7953      	ldrb	r3, [r2, #5]
 80031a6:	f361 0304 	bfi	r3, r1, #0, #5
 80031aa:	7153      	strb	r3, [r2, #5]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6852      	ldr	r2, [r2, #4]
 80031b6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80031ba:	2110      	movs	r1, #16
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	b2d9      	uxtb	r1, r3
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	7993      	ldrb	r3, [r2, #6]
 80031e0:	f361 0303 	bfi	r3, r1, #0, #4
 80031e4:	7193      	strb	r3, [r2, #6]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6852      	ldr	r2, [r2, #4]
 80031f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80031f4:	2110      	movs	r1, #16
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	write(PWMCONF_register.address, PWMCONF_register.sr);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003222:	2170      	movs	r1, #112	@ 0x70
 8003224:	4798      	blx	r3
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_ZN14TMC2160Stepper13pwm_autoscaleEb>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	70fb      	strb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8003240:	78f9      	ldrb	r1, [r7, #3]
 8003242:	f361 0382 	bfi	r3, r1, #2, #1
 8003246:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003258:	2170      	movs	r1, #112	@ 0x70
 800325a:	4798      	blx	r3
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8003276:	78f9      	ldrb	r1, [r7, #3]
 8003278:	f361 0382 	bfi	r3, r1, #2, #1
 800327c:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 800328c:	2170      	movs	r1, #112	@ 0x70
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	ed87 0a00 	vstr	s0, [r7]
 80032a8:	4a10      	ldr	r2, [pc, #64]	@ (80032ec <_ZN10TMCStepperC1Ef+0x50>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2100      	movs	r1, #0
 80032b4:	460a      	mov	r2, r1
 80032b6:	801a      	strh	r2, [r3, #0]
 80032b8:	460a      	mov	r2, r1
 80032ba:	709a      	strb	r2, [r3, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	71da      	strb	r2, [r3, #7]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	811a      	strh	r2, [r3, #8]
 80032c8:	7a9a      	ldrb	r2, [r3, #10]
 80032ca:	f022 020f 	bic.w	r2, r2, #15
 80032ce:	729a      	strb	r2, [r3, #10]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	0802b108 	.word	0x0802b108

080032f0 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:

    if (link > chain_length)
      chain_length = link;
  }

TMC2130Stepper::TMC2130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6178      	str	r0, [r7, #20]
 80032f8:	6139      	str	r1, [r7, #16]
 80032fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	607b      	str	r3, [r7, #4]
  TMCStepper(RS),
  _pinCS(pinCS, OUTPUT),
  link_index(link)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	ed97 0a03 	vldr	s0, [r7, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffc7 	bl	800329c <_ZN10TMCStepperC1Ef>
 800330e:	4a4a      	ldr	r2, [pc, #296]	@ (8003438 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x148>)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3315      	adds	r3, #21
 8003318:	2200      	movs	r2, #0
 800331a:	801a      	strh	r2, [r3, #0]
 800331c:	709a      	strb	r2, [r3, #2]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	831a      	strh	r2, [r3, #24]
 8003324:	7e9a      	ldrb	r2, [r3, #26]
 8003326:	f022 020f 	bic.w	r2, r2, #15
 800332a:	769a      	strb	r2, [r3, #26]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2200      	movs	r2, #0
 8003330:	76da      	strb	r2, [r3, #27]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
 8003336:	7f5a      	ldrb	r2, [r3, #29]
 8003338:	f022 020f 	bic.w	r2, r2, #15
 800333c:	775a      	strb	r2, [r3, #29]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	83da      	strh	r2, [r3, #30]
 8003344:	8c1a      	ldrh	r2, [r3, #32]
 8003346:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	841a      	strh	r2, [r3, #32]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	845a      	strh	r2, [r3, #34]	@ 0x22
 8003356:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800335a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003384:	2200      	movs	r2, #0
 8003386:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 800338a:	2200      	movs	r2, #0
 800338c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003390:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	332d      	adds	r3, #45	@ 0x2d
 80033a0:	2200      	movs	r2, #0
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	709a      	strb	r2, [r3, #2]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3330      	adds	r3, #48	@ 0x30
 80033aa:	2100      	movs	r1, #0
 80033ac:	460a      	mov	r2, r1
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	460a      	mov	r2, r1
 80033b2:	709a      	strb	r2, [r3, #2]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 80033ba:	f36f 0301 	bfc	r3, #0, #2
 80033be:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
  _pinCS(pinCS, OUTPUT),
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3334      	adds	r3, #52	@ 0x34
 80033c6:	2201      	movs	r2, #1
 80033c8:	6939      	ldr	r1, [r7, #16]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fab8 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
  link_index(link)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80033dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  {
	SoftwareSPI* SW_SPI_Obj = new SoftwareSPI(pinMOSI, pinMISO, pinSCK);
 80033e0:	20c4      	movs	r0, #196	@ 0xc4
 80033e2:	f025 f8c1 	bl	8028568 <_Znwj>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461c      	mov	r4, r3
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4620      	mov	r0, r4
 80033f2:	f7fe fef8 	bl	80021e6 <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_>
 80033f6:	61fc      	str	r4, [r7, #28]
    TMC_SW_SPI = SW_SPI_Obj;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	675a      	str	r2, [r3, #116]	@ 0x74
    defaults();
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f000 f81e 	bl	8003440 <_ZN14TMC2130Stepper8defaultsEv>

    switchCSpin(HIGH);
 8003404:	2101      	movs	r1, #1
 8003406:	6978      	ldr	r0, [r7, #20]
 8003408:	f000 f831 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
    TMC_SW_SPI->init();
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe ff0d 	bl	8002230 <_ZN11SoftwareSPI4initEv>

    if (link > chain_length)
 8003416:	4b09      	ldr	r3, [pc, #36]	@ (800343c <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x14c>)
 8003418:	f993 3000 	ldrsb.w	r3, [r3]
 800341c:	f997 2034 	ldrsb.w	r2, [r7, #52]	@ 0x34
 8003420:	429a      	cmp	r2, r3
 8003422:	dd03      	ble.n	800342c <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x13c>
      chain_length = link;
 8003424:	4a05      	ldr	r2, [pc, #20]	@ (800343c <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x14c>)
 8003426:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800342a:	7013      	strb	r3, [r2, #0]
  }
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop
 8003438:	0802b0cc 	.word	0x0802b0cc
 800343c:	240000a4 	.word	0x240000a4

08003440 <_ZN14TMC2130Stepper8defaultsEv>:

void TMC2130Stepper::defaults() {
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f442 6290 	orr.w	r2, r2, #1152	@ 0x480
 8003450:	861a      	strh	r2, [r3, #48]	@ 0x30
 8003452:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8003456:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800345a:	f042 0205 	orr.w	r2, r2, #5
 800345e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	70fb      	strb	r3, [r7, #3]
  _pinCS.set(state);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3334      	adds	r3, #52	@ 0x34
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fc06 	bl	8004c94 <_ZN3Pin3setEb>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_ZN14TMC2130Stepper8transferEh>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  uint8_t out = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  if (TMC_SW_SPI != nullptr) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <_ZN14TMC2130Stepper8transferEh+0x2a>
    out = TMC_SW_SPI->transfer(data);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe feb7 	bl	800224c <_ZN11SoftwareSPI8transferEh>
 80034de:	4603      	mov	r3, r0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  else {
    //out = SPI.transfer(data);
  }
  return out;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZN14TMC2130Stepper18transferEmptyBytesEh>:

void TMC2130Stepper::transferEmptyBytes(const uint8_t n) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e006      	b.n	800350c <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x20>
    transfer(0x00);
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffd9 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
  for (uint8_t i = 0; i < n; i++) {
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	3301      	adds	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	429a      	cmp	r2, r3
 8003512:	d3f4      	bcc.n	80034fe <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x12>
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <_ZN14TMC2130Stepper4readEh>:

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  uint32_t out = 0UL;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  int8_t i = 1;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]

  beginTransaction();
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ffab 	bl	8003490 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff96 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
  transfer(addressByte);
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffb6 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
  // Clear SPI
  transferEmptyBytes(4);
 800354c:	2104      	movs	r1, #4
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffcc 	bl	80034ec <_ZN14TMC2130Stepper18transferEmptyBytesEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 8003554:	e009      	b.n	800356a <_ZN14TMC2130Stepper4readEh+0x4a>
    transferEmptyBytes(5);
 8003556:	2105      	movs	r1, #5
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffc7 	bl	80034ec <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	73fb      	strb	r3, [r7, #15]
  while(i < link_index) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f993 3078 	ldrsb.w	r3, [r3, #120]	@ 0x78
 8003570:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003574:	429a      	cmp	r2, r3
 8003576:	dbee      	blt.n	8003556 <_ZN14TMC2130Stepper4readEh+0x36>
  }

  switchCSpin(HIGH);
 8003578:	2101      	movs	r1, #1
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ff77 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
  switchCSpin(LOW);
 8003580:	2100      	movs	r1, #0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff73 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>

  // Shift data from target link into the last one...
  while(i < chain_length) {
 8003588:	e009      	b.n	800359e <_ZN14TMC2130Stepper4readEh+0x7e>
    transferEmptyBytes(5);
 800358a:	2105      	movs	r1, #5
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffad 	bl	80034ec <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	73fb      	strb	r3, [r7, #15]
  while(i < chain_length) {
 800359e:	4b23      	ldr	r3, [pc, #140]	@ (800362c <_ZN14TMC2130Stepper4readEh+0x10c>)
 80035a0:	f993 3000 	ldrsb.w	r3, [r3]
 80035a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbee      	blt.n	800358a <_ZN14TMC2130Stepper4readEh+0x6a>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff81 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	751a      	strb	r2, [r3, #20]
  out  = transfer(0x00);
 80035be:	2100      	movs	r1, #0
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff79 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 80035c6:	4603      	mov	r3, r0
 80035c8:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff70 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff64 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 8003600:	2100      	movs	r1, #0
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff58 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]

  endTransaction();
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff46 	bl	80034a4 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 8003618:	2101      	movs	r1, #1
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ff27 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
  return out;
 8003620:	68bb      	ldr	r3, [r7, #8]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	240000a4 	.word	0x240000a4

08003630 <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	460b      	mov	r3, r1
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	72fb      	strb	r3, [r7, #11]
  addressByte |= TMC_WRITE;
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003644:	72fb      	strb	r3, [r7, #11]
  int8_t i = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]

  beginTransaction();
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff ff20 	bl	8003490 <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 8003650:	2100      	movs	r1, #0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f7ff ff0b 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
  status_response = transfer(addressByte);
 8003658:	7afb      	ldrb	r3, [r7, #11]
 800365a:	4619      	mov	r1, r3
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff2b 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	751a      	strb	r2, [r3, #20]
  transfer(config>>24);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0e1b      	lsrs	r3, r3, #24
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff ff20 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>16);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4619      	mov	r1, r3
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff19 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>8);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff12 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>
  transfer(config);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff ff0c 	bl	80034b8 <_ZN14TMC2130Stepper8transferEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 80036a0:	e009      	b.n	80036b6 <_ZN14TMC2130Stepper5writeEhm+0x86>
    transferEmptyBytes(5);
 80036a2:	2105      	movs	r1, #5
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff ff21 	bl	80034ec <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 80036aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	75fb      	strb	r3, [r7, #23]
  while(i < link_index) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f993 3078 	ldrsb.w	r3, [r3, #120]	@ 0x78
 80036bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dbee      	blt.n	80036a2 <_ZN14TMC2130Stepper5writeEhm+0x72>
  }

  endTransaction();
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff feed 	bl	80034a4 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 80036ca:	2101      	movs	r1, #1
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff fece 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	b291      	uxth	r1, r2
 80036ee:	2000      	movs	r0, #0
 80036f0:	4301      	orrs	r1, r0
 80036f2:	8319      	strh	r1, [r3, #24]
 80036f4:	0c12      	lsrs	r2, r2, #16
 80036f6:	f002 020f 	and.w	r2, r2, #15
 80036fa:	f002 000f 	and.w	r0, r2, #15
 80036fe:	7e9a      	ldrb	r2, [r3, #26]
 8003700:	f022 020f 	bic.w	r2, r2, #15
 8003704:	4611      	mov	r1, r2
 8003706:	4602      	mov	r2, r0
 8003708:	430a      	orrs	r2, r1
 800370a:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6992      	ldr	r2, [r2, #24]
 8003716:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800371a:	2114      	movs	r1, #20
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"


TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	6178      	str	r0, [r7, #20]
 8003730:	6139      	str	r1, [r7, #16]
 8003732:	ed87 0a03 	vstr	s0, [r7, #12]
 8003736:	60ba      	str	r2, [r7, #8]
 8003738:	607b      	str	r3, [r7, #4]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	ed97 0a03 	vldr	s0, [r7, #12]
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	f7ff fdce 	bl	80032f0 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8003754:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x6c>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3379      	adds	r3, #121	@ 0x79
 800375e:	2200      	movs	r2, #0
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	709a      	strb	r2, [r3, #2]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	337c      	adds	r3, #124	@ 0x7c
 8003768:	2100      	movs	r1, #0
 800376a:	460a      	mov	r2, r1
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	460a      	mov	r2, r1
 8003770:	709a      	strb	r2, [r3, #2]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  { defaults(); }
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f000 f85a 	bl	800383c <_ZN14TMC2160Stepper8defaultsEv>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	0802b144 	.word	0x0802b144

08003798 <_ZN14TMC2160Stepper5beginEv>:

TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  //set pins
  switchCSpin(HIGH);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe62 	bl	800346e <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <_ZN14TMC2160Stepper5beginEv+0x24>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fd3a 	bl	8002230 <_ZN11SoftwareSPI4initEv>

  GCONF(GCONF_register.sr);
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f3c3 2311 	ubfx	r3, r3, #8, #18
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f7ff fc19 	bl	8003000 <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f7ff f84f 	bl	800287c <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037e4:	0a12      	lsrs	r2, r2, #8
 80037e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	4313      	orrs	r3, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	f7ff fadc 	bl	8002db0 <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fcfe 	bl	8003202 <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7ff fc77 	bl	8003106 <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2108      	movs	r1, #8
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff f843 	bl	80028a8 <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	332c      	adds	r3, #44	@ 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	2101      	movs	r1, #1
 800382e:	4610      	mov	r0, r2
 8003830:	4798      	blx	r3
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f892 3079 	ldrb.w	r3, [r2, #121]	@ 0x79
 800384a:	2106      	movs	r1, #6
 800384c:	f361 0303 	bfi	r3, r1, #0, #4
 8003850:	f882 3079 	strb.w	r3, [r2, #121]	@ 0x79
  SHORT_CONF_register.s2g_level = 6;
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	f892 307a 	ldrb.w	r3, [r2, #122]	@ 0x7a
 800385a:	2106      	movs	r1, #6
 800385c:	f361 0303 	bfi	r3, r1, #0, #4
 8003860:	f882 307a 	strb.w	r3, [r2, #122]	@ 0x7a
  SHORT_CONF_register.shortfilter = 0b01;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	f892 307b 	ldrb.w	r3, [r2, #123]	@ 0x7b
 800386a:	2101      	movs	r1, #1
 800386c:	f361 0301 	bfi	r3, r1, #0, #2
 8003870:	f882 307b 	strb.w	r3, [r2, #123]	@ 0x7b
  SHORT_CONF_register.shortdelay = 0;
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	f892 307b 	ldrb.w	r3, [r2, #123]	@ 0x7b
 800387a:	f36f 0382 	bfc	r3, #2, #1
 800387e:	f882 307b 	strb.w	r3, [r2, #123]	@ 0x7b
  DRV_CONF_register.bbmtime = 0;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 8003888:	f36f 0304 	bfc	r3, #0, #5
 800388c:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
  DRV_CONF_register.bbmclks = 4;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	f892 307d 	ldrb.w	r3, [r2, #125]	@ 0x7d
 8003896:	2104      	movs	r1, #4
 8003898:	f361 0303 	bfi	r3, r1, #0, #4
 800389c:	f882 307d 	strb.w	r3, [r2, #125]	@ 0x7d
  DRV_CONF_register.otselect = 0b00;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 80038a6:	f36f 0301 	bfc	r3, #0, #2
 80038aa:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  DRV_CONF_register.drvstrength = 0b10;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 80038b4:	2102      	movs	r1, #2
 80038b6:	f361 0383 	bfi	r3, r1, #2, #2
 80038ba:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  DRV_CONF_register.filt_isense = 0b00;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 80038c4:	f36f 1305 	bfc	r3, #4, #2
 80038c8:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  TPOWERDOWN_register.sr = 10;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	220a      	movs	r2, #10
 80038d0:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80038de:	2200      	movs	r2, #0
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80038e8:	2200      	movs	r2, #0
 80038ea:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 80038ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80038f2:	2200      	movs	r2, #0
 80038f4:	f042 0210 	orr.w	r2, r2, #16
 80038f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <_ZN14TMC2160Stepper8defaultsEv+0xd4>)
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	c40c001e 	.word	0xc40c001e

08003914 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	@ 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	460b      	mov	r3, r1
 800391e:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 8003920:	f240 1345 	movw	r3, #325	@ 0x145
 8003924:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 8003926:	231f      	movs	r3, #31
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t scaler = 0; // = 256
 800392c:	2300      	movs	r3, #0
 800392e:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	edd3 7a03 	vldr	s15, [r3, #12]
 8003936:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003a0c <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 800393a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	ee17 3a90 	vmov	r3, s15
 8003946:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 8003948:	f642 5341 	movw	r3, #11585	@ 0x2d41
 800394c:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 800394e:	8b7a      	ldrh	r2, [r7, #26]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 800395e:	897a      	ldrh	r2, [r7, #10]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 8003968:	4b29      	ldr	r3, [pc, #164]	@ (8003a10 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 800396a:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003970:	3301      	adds	r3, #1
 8003972:	461a      	mov	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	2bff      	cmp	r3, #255	@ 0xff
 800398a:	d902      	bls.n	8003992 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	e007      	b.n	80039a2 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2b7f      	cmp	r3, #127	@ 0x7f
 8003996:	d804      	bhi.n	80039a2 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 8003998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399c:	3b01      	subs	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while(0 < scaler && scaler < 128);
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <_ZN14TMC2160Stepper11rms_currentEt+0x9a>
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80039ac:	d9dc      	bls.n	8003968 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b2:	2b1f      	cmp	r3, #31
 80039b4:	d902      	bls.n	80039bc <_ZN14TMC2160Stepper11rms_currentEt+0xa8>
    CS = 31;
 80039b6:	231f      	movs	r3, #31
 80039b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  GLOBAL_SCALER(scaler);
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f826 	bl	8003a14 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fbdc 	bl	800318e <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80039f6:	793b      	ldrb	r3, [r7, #4]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7ff fba9 	bl	8003154 <_ZN10TMCStepper5iholdEh>
}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	@ 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	477fff00 	.word	0x477fff00
 8003a10:	000144fe 	.word	0x000144fe

08003a14 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	f892 207f 	ldrb.w	r2, [r2, #127]	@ 0x7f
 8003a36:	210b      	movs	r1, #11
 8003a38:	4798      	blx	r3
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b095      	sub	sp, #84	@ 0x54
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6178      	str	r0, [r7, #20]
 8003a4c:	6139      	str	r1, [r7, #16]
 8003a4e:	60fa      	str	r2, [r7, #12]
 8003a50:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a54:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	ed97 0a02 	vldr	s0, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fc1d 	bl	800329c <_ZN10TMCStepperC1Ef>
 8003a62:	4a47      	ldr	r2, [pc, #284]	@ (8003b80 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	831a      	strh	r2, [r3, #24]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	4a44      	ldr	r2, [pc, #272]	@ (8003b84 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8003a72:	61da      	str	r2, [r3, #28]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2020 	strb.w	r2, [r3, #32]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003a84:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003a88:	f022 0203 	bic.w	r2, r2, #3
 8003a8c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8003a98:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003a9c:	f022 020f 	bic.w	r2, r2, #15
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3334      	adds	r3, #52	@ 0x34
 8003b04:	6939      	ldr	r1, [r7, #16]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f025 f839 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	334c      	adds	r3, #76	@ 0x4c
 8003b10:	6939      	ldr	r1, [r7, #16]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f025 f833 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	79fa      	ldrb	r2, [r7, #7]
 8003b1c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8003b20:	209c      	movs	r0, #156	@ 0x9c
 8003b22:	f024 fd21 	bl	8028568 <_Znwj>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461c      	mov	r4, r3
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	6939      	ldr	r1, [r7, #16]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f025 f824 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003b36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f025 f81e 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003b42:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7fe fbfe 	bl	800234e <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8003b52:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8003b54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f024 fe00 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4618      	mov	r0, r3
 8003b64:	f024 fdfb 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b6c:	615a      	str	r2, [r3, #20]
        defaults();
 8003b6e:	6978      	ldr	r0, [r7, #20]
 8003b70:	f000 f832 	bl	8003bd8 <_ZN14TMC2208Stepper8defaultsEv>
    }
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4618      	mov	r0, r3
 8003b78:	3754      	adds	r7, #84	@ 0x54
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	0802b090 	.word	0x0802b090
 8003b84:	3de147ae 	.word	0x3de147ae

08003b88 <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fc64 	bl	8002468 <_ZN14SoftwareSerial5beginEi>
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8003bb0:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ffe7 	bl	8003b88 <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8003bba:	2101      	movs	r1, #1
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fa68 	bl	8003092 <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fa81 	bl	80030cc <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f017 ffaa 	bl	801bb24 <HAL_Delay>

}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003bf4:	f36f 0341 	bfc	r3, #1, #1
 8003bf8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003c02:	f36f 0382 	bfc	r3, #2, #1
 8003c06:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	7993      	ldrb	r3, [r2, #6]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f361 0303 	bfi	r3, r1, #0, #4
 8003c22:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2214      	movs	r2, #20
 8003c28:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8003c32:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003c42:	2200      	movs	r2, #0
 8003c44:	f042 0210 	orr.w	r2, r2, #16
 8003c48:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8003c54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f042 020d 	orr.w	r2, r2, #13
 8003c64:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8003c6e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8003c90:	2300      	movs	r3, #0
 8003c92:	75bb      	strb	r3, [r7, #22]
 8003c94:	e027      	b.n	8003ce6 <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8003c96:	7dbb      	ldrb	r3, [r7, #22]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	753b      	strb	r3, [r7, #20]
 8003ca4:	e019      	b.n	8003cda <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	09db      	lsrs	r3, r3, #7
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	7d7b      	ldrb	r3, [r7, #21]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d007      	beq.n	8003cc8 <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f083 0307 	eor.w	r3, r3, #7
 8003cc2:	b25b      	sxtb	r3, r3
 8003cc4:	75fb      	strb	r3, [r7, #23]
 8003cc6:	e002      	b.n	8003cce <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8003cce:	7d7b      	ldrb	r3, [r7, #21]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003cd4:	7d3b      	ldrb	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	753b      	strb	r3, [r7, #20]
 8003cda:	7d3b      	ldrb	r3, [r7, #20]
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d9e2      	bls.n	8003ca6 <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8003ce0:	7dbb      	ldrb	r3, [r7, #22]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	75bb      	strb	r3, [r7, #22]
 8003ce6:	7dba      	ldrb	r2, [r7, #22]
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3d3      	bcc.n	8003c96 <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    int out = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fd27 	bl	8002760 <_ZN14SoftwareSerial9availableEv>
 8003d12:	60f8      	str	r0, [r7, #12]

    return out;
 8003d14:	68fb      	ldr	r3, [r7, #12]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fbf7 	bl	8002532 <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fd33 	bl	80027f0 <_ZN14SoftwareSerial4readEv>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	81fb      	strh	r3, [r7, #14]

	return out;
 8003d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fce6 	bl	8002784 <_ZN14SoftwareSerial5writeEi>

    return out;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	b2db      	uxtb	r3, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b089      	sub	sp, #36	@ 0x24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8003dd2:	2307      	movs	r3, #7
 8003dd4:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ddc:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	2305      	movs	r3, #5
 8003dea:	753b      	strb	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8003df2:	757b      	strb	r3, [r7, #21]
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	75bb      	strb	r3, [r7, #22]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0e1b      	lsrs	r3, r3, #24
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	75fb      	strb	r3, [r7, #23]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	763b      	strb	r3, [r7, #24]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	767b      	strb	r3, [r7, #25]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 8003e16:	7fbc      	ldrb	r4, [r7, #30]
 8003e18:	7fba      	ldrb	r2, [r7, #30]
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ff2c 	bl	8003c7e <_ZN14TMC2208Stepper7calcCRCEPhh>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f104 0320 	add.w	r3, r4, #32
 8003e2e:	443b      	add	r3, r7
 8003e30:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ff72 	bl	8003d1e <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e013      	b.n	8003e68 <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	3320      	adds	r3, #32
 8003e44:	443b      	add	r3, r7
 8003e46:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7ff ffa4 	bl	8003d9a <_ZN14TMC2208Stepper12serial_writeEh>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8b1b      	ldrh	r3, [r3, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 8003e62:	7ffb      	ldrb	r3, [r7, #31]
 8003e64:	3301      	adds	r3, #1
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	7ffa      	ldrb	r2, [r7, #31]
 8003e6a:	7fbb      	ldrb	r3, [r7, #30]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d9e7      	bls.n	8003e40 <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ff6b 	bl	8003d4c <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 8003e76:	2005      	movs	r0, #5
 8003e78:	f017 fe54 	bl	801bb24 <HAL_Delay>
}
 8003e7c:	bf00      	nop
 8003e7e:	3724      	adds	r7, #36	@ 0x24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}

08003e84 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b092      	sub	sp, #72	@ 0x48
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6178      	str	r0, [r7, #20]
 8003e8e:	6139      	str	r1, [r7, #16]
 8003e90:	4611      	mov	r1, r2
 8003e92:	461a      	mov	r2, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 8003e9c:	e002      	b.n	8003ea4 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f7ff ff68 	bl	8003d74 <_ZN14TMC2208Stepper11serial_readEv>
 8003ea4:	6978      	ldr	r0, [r7, #20]
 8003ea6:	f7ff ff29 	bl	8003cfc <_ZN14TMC2208Stepper9availableEv>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bfcc      	ite	gt
 8003eb0:	2301      	movgt	r3, #1
 8003eb2:	2300      	movle	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f1      	bne.n	8003e9e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff2f 	bl	8003d1e <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec4:	e00a      	b.n	8003edc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6978      	ldr	r0, [r7, #20]
 8003ed2:	f7ff ff62 	bl	8003d9a <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed8:	3301      	adds	r3, #1
 8003eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	ddf0      	ble.n	8003ec6 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	f7ff ff31 	bl	8003d4c <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 8003eea:	f017 fe0f 	bl	801bb0c <HAL_GetTick>
 8003eee:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	3202      	adds	r2, #2
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 8003f08:	f017 fe00 	bl	801bb0c <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d004      	beq.n	8003f20 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 8003f1a:	89bb      	ldrh	r3, [r7, #12]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8003f20:	89bb      	ldrh	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e080      	b.n	8004032 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f7ff ff1f 	bl	8003d74 <_ZN14TMC2208Stepper11serial_readEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 8003f3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db0c      	blt.n	8003f5c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 8003f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 8003f48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 8003f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5a:	e000      	b.n	8003f5e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 8003f5c:	bf00      	nop

	} while (sync != sync_target);
 8003f5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d1d0      	bne.n	8003f08 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	2200      	movs	r2, #0
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f72:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 8003f76:	f017 fdc9 	bl	801bb0c <HAL_GetTick>
 8003f7a:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 8003f7c:	2305      	movs	r3, #5
 8003f7e:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003f86:	e03f      	b.n	8004008 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 8003f88:	f017 fdc0 	bl	801bb0c <HAL_GetTick>
 8003f8c:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d004      	beq.n	8003fa0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 8003f9a:	89bb      	ldrh	r3, [r7, #12]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8003fa0:	89bb      	ldrh	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e040      	b.n	8004032 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8003fb0:	6978      	ldr	r0, [r7, #20]
 8003fb2:	f7ff fedf 	bl	8003d74 <_ZN14TMC2208Stepper11serial_readEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 8003fba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db21      	blt.n	8004006 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 8003fc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	020b      	lsls	r3, r1, #8
 8003fd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fd4:	0202      	lsls	r2, r0, #8
 8003fd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 8003fda:	8b7b      	ldrh	r3, [r7, #26]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2200      	movs	r2, #0
 8003fe0:	469a      	mov	sl, r3
 8003fe2:	4693      	mov	fp, r2
 8003fe4:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 8003fe8:	2500      	movs	r5, #0
 8003fea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003fee:	ea42 0804 	orr.w	r8, r2, r4
 8003ff2:	ea43 0905 	orr.w	r9, r3, r5
 8003ff6:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 8003ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ffe:	3301      	adds	r3, #1
 8004000:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004004:	e000      	b.n	8004008 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 8004006:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 8004008:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800400c:	2b04      	cmp	r3, #4
 800400e:	d9bb      	bls.n	8003f88 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 8004010:	e002      	b.n	8004018 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff feae 	bl	8003d74 <_ZN14TMC2208Stepper11serial_readEv>
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff fe6f 	bl	8003cfc <_ZN14TMC2208Stepper9availableEv>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	bfcc      	ite	gt
 8004024:	2301      	movgt	r3, #1
 8004026:	2300      	movle	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f1      	bne.n	8004012 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 800402e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	3748      	adds	r7, #72	@ 0x48
 8004038:	46bd      	mov	sp, r7
 800403a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800403e <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 800403e:	b580      	push	{r7, lr}
 8004040:	b088      	sub	sp, #32
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 800404a:	2303      	movs	r3, #3
 800404c:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	2305      	movs	r3, #5
 8004054:	743b      	strb	r3, [r7, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800405c:	747b      	strb	r3, [r7, #17]
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	2203      	movs	r2, #3
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fe07 	bl	8003c7e <_ZN14TMC2208Stepper7calcCRCEPhh>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]
 8004084:	e080      	b.n	8004188 <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fe53 	bl	8003d32 <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 800408c:	f107 0110 	add.w	r1, r7, #16
 8004090:	2305      	movs	r3, #5
 8004092:	2203      	movs	r2, #3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fef5 	bl	8003e84 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 800409a:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fe5e 	bl	8003d60 <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 80040a4:	2005      	movs	r0, #5
 80040a6:	f017 fd3d 	bl	801bb24 <HAL_Delay>

        CRCerror = false;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 80040b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	0e0a      	lsrs	r2, r1, #24
 80040c0:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 80040c2:	b2d3      	uxtb	r3, r2
 80040c4:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 80040c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	0c0a      	lsrs	r2, r1, #16
 80040d4:	2300      	movs	r3, #0
        };
 80040d6:	b2d3      	uxtb	r3, r2
 80040d8:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 80040da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	0a0a      	lsrs	r2, r1, #8
 80040e8:	2300      	movs	r3, #0
        };
 80040ea:	b2d3      	uxtb	r3, r2
 80040ec:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 80040ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	000a      	movs	r2, r1
 80040fc:	2300      	movs	r3, #0
        };
 80040fe:	b2d3      	uxtb	r3, r2
 8004100:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 8004102:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	0e02      	lsrs	r2, r0, #24
 8004110:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004114:	0e0b      	lsrs	r3, r1, #24
        };
 8004116:	b2d3      	uxtb	r3, r2
 8004118:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 800411a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	0c02      	lsrs	r2, r0, #16
 8004128:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800412c:	0c0b      	lsrs	r3, r1, #16
        };
 800412e:	b2d3      	uxtb	r3, r2
 8004130:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 8004132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	0a02      	lsrs	r2, r0, #8
 8004140:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004144:	0a0b      	lsrs	r3, r1, #8
        };
 8004146:	b2d3      	uxtb	r3, r2
 8004148:	73bb      	strb	r3, [r7, #14]
 800414a:	7e3b      	ldrb	r3, [r7, #24]
 800414c:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	2207      	movs	r2, #7
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fd91 	bl	8003c7e <_ZN14TMC2208Stepper7calcCRCEPhh>
 800415c:	4603      	mov	r3, r0
 800415e:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 8004160:	7e3b      	ldrb	r3, [r7, #24]
 8004162:	7d7a      	ldrb	r2, [r7, #21]
 8004164:	429a      	cmp	r2, r3
 8004166:	d102      	bne.n	800416e <_ZN14TMC2208Stepper4readEh+0x130>
 8004168:	7d7b      	ldrb	r3, [r7, #21]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d110      	bne.n	8004190 <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	3301      	adds	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b01      	cmp	r3, #1
 800418c:	f67f af7b 	bls.w	8004086 <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 8004190:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	0a02      	lsrs	r2, r0, #8
 800419e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80041a2:	0a0b      	lsrs	r3, r1, #8
 80041a4:	4613      	mov	r3, r2
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80041d0:	2140      	movs	r1, #64	@ 0x40
 80041d2:	4798      	blx	r3
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	b2d1      	uxtb	r1, r2
 80041f0:	2000      	movs	r0, #0
 80041f2:	4301      	orrs	r1, r0
 80041f4:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 80041f8:	0a11      	lsrs	r1, r2, #8
 80041fa:	b2c9      	uxtb	r1, r1
 80041fc:	2000      	movs	r0, #0
 80041fe:	4301      	orrs	r1, r0
 8004200:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 8004204:	0c12      	lsrs	r2, r2, #16
 8004206:	f002 020f 	and.w	r2, r2, #15
 800420a:	f002 000f 	and.w	r0, r2, #15
 800420e:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8004212:	f022 020f 	bic.w	r2, r2, #15
 8004216:	4611      	mov	r1, r2
 8004218:	4602      	mov	r2, r0
 800421a:	430a      	orrs	r2, r1
 800421c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800422c:	f3c2 2213 	ubfx	r2, r2, #8, #20
 8004230:	2114      	movs	r1, #20
 8004232:	4798      	blx	r3
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8
 8004242:	6178      	str	r0, [r7, #20]
 8004244:	6139      	str	r1, [r7, #16]
 8004246:	ed87 0a03 	vstr	s0, [r7, #12]
 800424a:	60ba      	str	r2, [r7, #8]
 800424c:	607b      	str	r3, [r7, #4]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004262:	6939      	ldr	r1, [r7, #16]
 8004264:	f7ff fa60 	bl	8003728 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8004268:	4a48      	ldr	r2, [pc, #288]	@ (800438c <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x150>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	f8b2 3084 	ldrh.w	r3, [r2, #132]	@ 0x84
 8004274:	f36f 030b 	bfc	r3, #0, #12
 8004278:	f8a2 3084 	strh.w	r3, [r2, #132]	@ 0x84
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	f892 3086 	ldrb.w	r3, [r2, #134]	@ 0x86
 8004282:	f36f 0300 	bfc	r3, #0, #1
 8004286:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	f892 308b 	ldrb.w	r3, [r2, #139]	@ 0x8b
 80042aa:	f36f 0301 	bfc	r3, #0, #2
 80042ae:	f882 308b 	strb.w	r3, [r2, #139]	@ 0x8b
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
 80042c2:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80042c6:	f022 0203 	bic.w	r2, r2, #3
 80042ca:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 80042ea:	f893 2097 	ldrb.w	r2, [r3, #151]	@ 0x97
 80042ee:	f022 020f 	bic.w	r2, r2, #15
 80042f2:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8004306:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 800430a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800430e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 800431a:	2200      	movs	r2, #0
 800431c:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 209f 	strb.w	r2, [r3, #159]	@ 0x9f
 8004328:	2200      	movs	r2, #0
 800432a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004336:	2200      	movs	r2, #0
 8004338:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 800433c:	f893 20a3 	ldrb.w	r2, [r3, #163]	@ 0xa3
 8004340:	f022 0203 	bic.w	r2, r2, #3
 8004344:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	@ 0xa6
 8004356:	f36f 030b 	bfc	r3, #0, #12
 800435a:	f8a2 30a6 	strh.w	r3, [r2, #166]	@ 0xa6
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	@ 0xa8
 8004364:	f36f 030a 	bfc	r3, #0, #11
 8004368:	f8a2 30a8 	strh.w	r3, [r2, #168]	@ 0xa8
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8004374:	2200      	movs	r2, #0
 8004376:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  { defaults(); }
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f000 f81c 	bl	80043b8 <_ZN14TMC5130Stepper8defaultsEv>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	0802b180 	.word	0x0802b180

08004390 <_ZN14TMC5130Stepper5beginEv>:

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff f9fc 	bl	8003798 <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 80043a0:	2100      	movs	r1, #0
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f838 	bl	8004418 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 80043a8:	2100      	movs	r1, #0
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f824 	bl	80043f8 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	f892 3086 	ldrb.w	r3, [r2, #134]	@ 0x86
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
  ENC_CONST_register.sr = 65536;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 80043d6:	2200      	movs	r2, #0
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a04      	ldr	r2, [pc, #16]	@ (80043f4 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	00050480 	.word	0x00050480

080043f8 <_ZN14TMC5130Stepper7XACTUALEl>:
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	2121      	movs	r1, #33	@ 0x21
 800440e:	4798      	blx	r3
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ZN14TMC5130Stepper7XTARGETEl>:
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	212d      	movs	r1, #45	@ 0x2d
 800442e:	4798      	blx	r3
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	6178      	str	r0, [r7, #20]
 8004440:	6139      	str	r1, [r7, #16]
 8004442:	ed87 0a03 	vstr	s0, [r7, #12]
 8004446:	60ba      	str	r2, [r7, #8]
 8004448:	607b      	str	r3, [r7, #4]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 800444a:	6978      	ldr	r0, [r7, #20]
 800444c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	ed97 0a03 	vldr	s0, [r7, #12]
 800445e:	6939      	ldr	r1, [r7, #16]
 8004460:	f7ff feec 	bl	800423c <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8004464:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x58>)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8004472:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8004476:	f022 020f 	bic.w	r2, r2, #15
 800447a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  { defaults(); }
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f000 f808 	bl	8004494 <_ZN14TMC5160Stepper8defaultsEv>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	0802b1bc 	.word	0x0802b1bc

08004494 <_ZN14TMC5160Stepper8defaultsEv>:

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f892 3079 	ldrb.w	r3, [r2, #121]	@ 0x79
 80044a2:	2106      	movs	r1, #6
 80044a4:	f361 0303 	bfi	r3, r1, #0, #4
 80044a8:	f882 3079 	strb.w	r3, [r2, #121]	@ 0x79
  SHORT_CONF_register.s2g_level = 6;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	f892 307a 	ldrb.w	r3, [r2, #122]	@ 0x7a
 80044b2:	2106      	movs	r1, #6
 80044b4:	f361 0303 	bfi	r3, r1, #0, #4
 80044b8:	f882 307a 	strb.w	r3, [r2, #122]	@ 0x7a
  SHORT_CONF_register.shortfilter = 0b01;
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f892 307b 	ldrb.w	r3, [r2, #123]	@ 0x7b
 80044c2:	2101      	movs	r1, #1
 80044c4:	f361 0301 	bfi	r3, r1, #0, #2
 80044c8:	f882 307b 	strb.w	r3, [r2, #123]	@ 0x7b
  SHORT_CONF_register.shortdelay = 0;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	f892 307b 	ldrb.w	r3, [r2, #123]	@ 0x7b
 80044d2:	f36f 0382 	bfc	r3, #2, #1
 80044d6:	f882 307b 	strb.w	r3, [r2, #123]	@ 0x7b
  DRV_CONF_register.bbmtime = 0;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	f892 307c 	ldrb.w	r3, [r2, #124]	@ 0x7c
 80044e0:	f36f 0304 	bfc	r3, #0, #5
 80044e4:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
  DRV_CONF_register.bbmclks = 4;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	f892 307d 	ldrb.w	r3, [r2, #125]	@ 0x7d
 80044ee:	2104      	movs	r1, #4
 80044f0:	f361 0303 	bfi	r3, r1, #0, #4
 80044f4:	f882 307d 	strb.w	r3, [r2, #125]	@ 0x7d
  DRV_CONF_register.otselect = 0b00;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 80044fe:	f36f 0301 	bfc	r3, #0, #2
 8004502:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  DRV_CONF_register.drvstrength = 0b10;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 800450c:	2102      	movs	r1, #2
 800450e:	f361 0383 	bfi	r3, r1, #2, #2
 8004512:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  DRV_CONF_register.filt_isense = 0b00;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 800451c:	f36f 1305 	bfc	r3, #4, #2
 8004520:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  TPOWERDOWN_register.sr = 10;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	220a      	movs	r2, #10
 8004528:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004536:	2200      	movs	r2, #0
 8004538:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 800453c:	f893 20a3 	ldrb.w	r2, [r3, #163]	@ 0xa3
 8004540:	f022 0203 	bic.w	r2, r2, #3
 8004544:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  ENC_CONST_register.sr = 65536;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
 8004550:	2200      	movs	r2, #0
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8004566:	2200      	movs	r2, #0
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8004570:	2200      	movs	r2, #0
 8004572:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8004576:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800457a:	2200      	movs	r2, #0
 800457c:	f042 0210 	orr.w	r2, r2, #16
 8004580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <_ZN14TMC5160Stepper8defaultsEv+0x104>)
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	c40c001e 	.word	0xc40c001e
 800459c:	00000000 	.word	0x00000000

080045a0 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	460b      	mov	r3, r1
 80045aa:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80045b6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80046b0 <_ZN10TMCStepper11rms_currentEt+0x110>
 80045ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045be:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 80046b8 <_ZN10TMCStepper11rms_currentEt+0x118>
 80045c2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045d0:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 80046c0 <_ZN10TMCStepper11rms_currentEt+0x120>
 80045d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80045d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80045dc:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 80046c8 <_ZN10TMCStepper11rms_currentEt+0x128>
 80045e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80045e4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80045e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80045ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80045f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80045f4:	793b      	ldrb	r3, [r7, #4]
 80045f6:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d82d      	bhi.n	800465a <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3308      	adds	r3, #8
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004616:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 80046b0 <_ZN10TMCStepper11rms_currentEt+0x110>
 800461a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800461e:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 80046b8 <_ZN10TMCStepper11rms_currentEt+0x118>
 8004622:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	edd3 7a03 	vldr	s15, [r3, #12]
 800462c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004630:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 80046c0 <_ZN10TMCStepper11rms_currentEt+0x120>
 8004634:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004638:	ee26 6b07 	vmul.f64	d6, d6, d7
 800463c:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 80046d0 <_ZN10TMCStepper11rms_currentEt+0x130>
 8004640:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004644:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004648:	ee37 7b46 	vsub.f64	d7, d7, d6
 800464c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004650:	edc7 7a01 	vstr	s15, [r7, #4]
 8004654:	793b      	ldrb	r3, [r7, #4]
 8004656:	75fb      	strb	r3, [r7, #23]
 8004658:	e006      	b.n	8004668 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2100      	movs	r1, #0
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	4798      	blx	r3
  }

  if (CS > 31)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b1f      	cmp	r3, #31
 800466c:	d901      	bls.n	8004672 <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 800466e:	231f      	movs	r3, #31
 8004670:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	4619      	mov	r1, r3
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7fe fd89 	bl	800318e <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	edd3 7a04 	vldr	s15, [r3, #16]
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004694:	edc7 7a01 	vstr	s15, [r7, #4]
 8004698:	793b      	ldrb	r3, [r7, #4]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	4619      	mov	r1, r3
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7fe fd58 	bl	8003154 <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	f3af 8000 	nop.w
 80046b0:	aa3ad18d 	.word	0xaa3ad18d
 80046b4:	4046a09a 	.word	0x4046a09a
 80046b8:	00000000 	.word	0x00000000
 80046bc:	408f4000 	.word	0x408f4000
 80046c0:	47ae147b 	.word	0x47ae147b
 80046c4:	3f947ae1 	.word	0x3f947ae1
 80046c8:	cccccccd 	.word	0xcccccccd
 80046cc:	3fd4cccc 	.word	0x3fd4cccc
 80046d0:	70a3d70a 	.word	0x70a3d70a
 80046d4:	3fc70a3d 	.word	0x3fc70a3d

080046d8 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3310      	adds	r3, #16
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
 80046ec:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <_ZN10TMCStepper15test_connectionEv+0x28>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d103      	bne.n	8004704 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e002      	b.n	8004706 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 8004700:	2302      	movs	r3, #2
 8004702:	e000      	b.n	8004706 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 8004704:	2300      	movs	r3, #0
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004722:	d058      	beq.n	80047d6 <_ZN10TMCStepper10microstepsEt+0xc6>
 8004724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004728:	f300 809d 	bgt.w	8004866 <_ZN10TMCStepper10microstepsEt+0x156>
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d05a      	beq.n	80047e6 <_ZN10TMCStepper10microstepsEt+0xd6>
 8004730:	2b80      	cmp	r3, #128	@ 0x80
 8004732:	f300 8098 	bgt.w	8004866 <_ZN10TMCStepper10microstepsEt+0x156>
 8004736:	2b20      	cmp	r3, #32
 8004738:	dc4a      	bgt.n	80047d0 <_ZN10TMCStepper10microstepsEt+0xc0>
 800473a:	2b00      	cmp	r3, #0
 800473c:	f340 8093 	ble.w	8004866 <_ZN10TMCStepper10microstepsEt+0x156>
 8004740:	3b01      	subs	r3, #1
 8004742:	2b1f      	cmp	r3, #31
 8004744:	f200 808f 	bhi.w	8004866 <_ZN10TMCStepper10microstepsEt+0x156>
 8004748:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <_ZN10TMCStepper10microstepsEt+0x40>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004857 	.word	0x08004857
 8004754:	08004847 	.word	0x08004847
 8004758:	08004867 	.word	0x08004867
 800475c:	08004837 	.word	0x08004837
 8004760:	08004867 	.word	0x08004867
 8004764:	08004867 	.word	0x08004867
 8004768:	08004867 	.word	0x08004867
 800476c:	08004827 	.word	0x08004827
 8004770:	08004867 	.word	0x08004867
 8004774:	08004867 	.word	0x08004867
 8004778:	08004867 	.word	0x08004867
 800477c:	08004867 	.word	0x08004867
 8004780:	08004867 	.word	0x08004867
 8004784:	08004867 	.word	0x08004867
 8004788:	08004867 	.word	0x08004867
 800478c:	08004817 	.word	0x08004817
 8004790:	08004867 	.word	0x08004867
 8004794:	08004867 	.word	0x08004867
 8004798:	08004867 	.word	0x08004867
 800479c:	08004867 	.word	0x08004867
 80047a0:	08004867 	.word	0x08004867
 80047a4:	08004867 	.word	0x08004867
 80047a8:	08004867 	.word	0x08004867
 80047ac:	08004867 	.word	0x08004867
 80047b0:	08004867 	.word	0x08004867
 80047b4:	08004867 	.word	0x08004867
 80047b8:	08004867 	.word	0x08004867
 80047bc:	08004867 	.word	0x08004867
 80047c0:	08004867 	.word	0x08004867
 80047c4:	08004867 	.word	0x08004867
 80047c8:	08004867 	.word	0x08004867
 80047cc:	08004807 	.word	0x08004807
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	d010      	beq.n	80047f6 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 80047d4:	e047      	b.n	8004866 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3324      	adds	r3, #36	@ 0x24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2100      	movs	r1, #0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
 80047e4:	e040      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3324      	adds	r3, #36	@ 0x24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2101      	movs	r1, #1
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
 80047f4:	e038      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3324      	adds	r3, #36	@ 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2102      	movs	r1, #2
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	e030      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3324      	adds	r3, #36	@ 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2103      	movs	r1, #3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	e028      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3324      	adds	r3, #36	@ 0x24
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2104      	movs	r1, #4
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	e020      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3324      	adds	r3, #36	@ 0x24
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2105      	movs	r1, #5
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
 8004834:	e018      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3324      	adds	r3, #36	@ 0x24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2106      	movs	r1, #6
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
 8004844:	e010      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3324      	adds	r3, #36	@ 0x24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2107      	movs	r1, #7
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
 8004854:	e008      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3324      	adds	r3, #36	@ 0x24
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2108      	movs	r1, #8
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
 8004864:	e000      	b.n	8004868 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 8004866:	bf00      	nop
  }
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2b36      	cmp	r3, #54	@ 0x36
 8004880:	d022      	beq.n	80048c8 <_ZN10TMCStepper10blank_timeEh+0x58>
 8004882:	2b36      	cmp	r3, #54	@ 0x36
 8004884:	dc28      	bgt.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004886:	2b24      	cmp	r3, #36	@ 0x24
 8004888:	d016      	beq.n	80048b8 <_ZN10TMCStepper10blank_timeEh+0x48>
 800488a:	2b24      	cmp	r3, #36	@ 0x24
 800488c:	dc24      	bgt.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
 800488e:	2b10      	cmp	r3, #16
 8004890:	d002      	beq.n	8004898 <_ZN10TMCStepper10blank_timeEh+0x28>
 8004892:	2b18      	cmp	r3, #24
 8004894:	d008      	beq.n	80048a8 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 8004896:	e01f      	b.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	332c      	adds	r3, #44	@ 0x2c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2100      	movs	r1, #0
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
 80048a6:	e017      	b.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	332c      	adds	r3, #44	@ 0x2c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
 80048b6:	e00f      	b.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	332c      	adds	r3, #44	@ 0x2c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2102      	movs	r1, #2
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e007      	b.n	80048d8 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	332c      	adds	r3, #44	@ 0x2c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2103      	movs	r1, #3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
 80048d6:	bf00      	nop
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	79d2      	ldrb	r2, [r2, #7]
 80048fc:	2111      	movs	r1, #17
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f024 f903 	bl	8028b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4904      	ldr	r1, [pc, #16]	@ (8004938 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8004928:	4804      	ldr	r0, [pc, #16]	@ (800493c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800492a:	f000 fa34 	bl	8004d96 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800492e:	4603      	mov	r3, r0
					__idx, __base); }
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	0802a138 	.word	0x0802a138
 800493c:	08029125 	.word	0x08029125

08004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	4618      	mov	r0, r3
 8004952:	f024 f914 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	761a      	strb	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	765a      	strb	r2, [r3, #25]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	332c      	adds	r3, #44	@ 0x2c
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	611a      	str	r2, [r3, #16]
    configurePin();
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f835 	bl	80049e4 <_ZN3Pin12configurePinEv>
    enableClock();
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8a8 	bl	8004ad0 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f949 	bl	8004c18 <_ZN3Pin13initialisePinEv>
}
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f024 f8eb 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	761a      	strb	r2, [r3, #24]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	765a      	strb	r2, [r3, #25]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	332c      	adds	r3, #44	@ 0x2c
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	611a      	str	r2, [r3, #16]
    configurePin();
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f80b 	bl	80049e4 <_ZN3Pin12configurePinEv>
    enableClock();
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f87e 	bl	8004ad0 <_ZN3Pin11enableClockEv>
    initialisePin();
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f91f 	bl	8004c18 <_ZN3Pin13initialisePinEv>
}
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 80049e4:	b5b0      	push	{r4, r5, r7, lr}
 80049e6:	b090      	sub	sp, #64	@ 0x40
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 80049ec:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <_ZN3Pin12configurePinEv+0xe4>)
 80049ee:	f107 0408 	add.w	r4, r7, #8
 80049f2:	461d      	mov	r5, r3
 80049f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80049fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f023 ff6f 	bl	80288e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b50      	cmp	r3, #80	@ 0x50
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d042      	beq.n	8004aa2 <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f023 ff61 	bl	80288e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004a26:	4603      	mov	r3, r0
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	3b41      	subs	r3, #65	@ 0x41
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f024 f8cf 	bl	8028be0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a46:	220a      	movs	r2, #10
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff5e 	bl	800490c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004a50:	4603      	mov	r3, r0
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	839a      	strh	r2, [r3, #28]
 8004a58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f023 fe7e 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8b9b      	ldrh	r3, [r3, #28]
 8004a66:	461a      	mov	r2, r3
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4093      	lsls	r3, r2
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7e9b      	ldrb	r3, [r3, #26]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	3340      	adds	r3, #64	@ 0x40
 8004a7a:	443b      	add	r3, r7
 8004a7c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7e1b      	ldrb	r3, [r3, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7e5b      	ldrb	r3, [r3, #25]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d00c      	beq.n	8004aba <_ZN3Pin12configurePinEv+0xd6>
 8004aa0:	e003      	b.n	8004aaa <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 8004aa2:	480a      	ldr	r0, [pc, #40]	@ (8004acc <_ZN3Pin12configurePinEv+0xe8>)
 8004aa4:	f024 fc7a 	bl	802939c <puts>
 8004aa8:	e00a      	b.n	8004ac0 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d101      	bne.n	8004ab6 <_ZN3Pin12configurePinEv+0xd2>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e002      	b.n	8004abc <_ZN3Pin12configurePinEv+0xd8>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <_ZN3Pin12configurePinEv+0xd8>
 8004aba:	2301      	movs	r3, #1
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8004ac0:	3740      	adds	r7, #64	@ 0x40
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0802a160 	.word	0x0802a160
 8004acc:	0802a140 	.word	0x0802a140

08004ad0 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b08b      	sub	sp, #44	@ 0x2c
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7e9b      	ldrb	r3, [r3, #26]
 8004adc:	2b07      	cmp	r3, #7
 8004ade:	f200 8093 	bhi.w	8004c08 <_ZN3Pin11enableClockEv+0x138>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <_ZN3Pin11enableClockEv+0x18>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b49 	.word	0x08004b49
 8004af4:	08004b69 	.word	0x08004b69
 8004af8:	08004b89 	.word	0x08004b89
 8004afc:	08004ba9 	.word	0x08004ba9
 8004b00:	08004bc9 	.word	0x08004bc9
 8004b04:	08004be9 	.word	0x08004be9
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8004b08:	4b42      	ldr	r3, [pc, #264]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b0e:	4a41      	ldr	r2, [pc, #260]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b18:	4b3e      	ldr	r3, [pc, #248]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	e06f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8004b28:	4b3a      	ldr	r3, [pc, #232]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2e:	4a39      	ldr	r2, [pc, #228]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b38:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	e05f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8004b48:	4b32      	ldr	r3, [pc, #200]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b4e:	4a31      	ldr	r2, [pc, #196]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b58:	4b2e      	ldr	r3, [pc, #184]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	e04f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8004b68:	4b2a      	ldr	r3, [pc, #168]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b6e:	4a29      	ldr	r2, [pc, #164]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b70:	f043 0308 	orr.w	r3, r3, #8
 8004b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b78:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	e03f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8004b88:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b90:	f043 0310 	orr.w	r3, r3, #16
 8004b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b98:	4b1e      	ldr	r3, [pc, #120]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	e02f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bae:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bb8:	4b16      	ldr	r3, [pc, #88]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	e01f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8004bc8:	4b12      	ldr	r3, [pc, #72]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bce:	4a11      	ldr	r2, [pc, #68]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	e00f      	b.n	8004c08 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <_ZN3Pin11enableClockEv+0x144>)
 8004bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	bf00      	nop
    }
}
 8004c08:	bf00      	nop
 8004c0a:	372c      	adds	r7, #44	@ 0x2c
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	58024400 	.word	0x58024400

08004c18 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8bdb      	ldrh	r3, [r3, #30]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f019 fe54 	bl	801e8d8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8bdb      	ldrh	r3, [r3, #30]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1a      	ldr	r2, [r3, #32]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	332c      	adds	r3, #44	@ 0x2c
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f019 fc74 	bl	801e548 <HAL_GPIO_Init>
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8bdb      	ldrh	r3, [r3, #30]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f019 fe14 	bl	801e8a8 <HAL_GPIO_ReadPin>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8bd9      	ldrh	r1, [r3, #30]
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <_ZN3Pin3setEb+0x1e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <_ZN3Pin3setEb+0x20>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f019 fe0f 	bl	801e8d8 <HAL_GPIO_WritePin>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ff9e 	bl	8004c18 <_ZN3Pin13initialisePinEv>
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff8d 	bl	8004c18 <_ZN3Pin13initialisePinEv>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff7f 	bl	8004c18 <_ZN3Pin13initialisePinEv>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	f024 fce3 	bl	80296f4 <__errno>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f024 fcdd 	bl	80296f4 <__errno>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8004d4a:	b590      	push	{r4, r7, lr}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	f024 fccf 	bl	80296f4 <__errno>
 8004d56:	4603      	mov	r3, r0
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	f024 fcc2 	bl	80296f4 <__errno>
 8004d70:	4603      	mov	r3, r0
 8004d72:	601c      	str	r4, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}

08004d7e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8004d88:	2300      	movs	r3, #0
	  }
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8004d96:	b590      	push	{r4, r7, lr}
 8004d98:	b08b      	sub	sp, #44	@ 0x2c
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ffba 	bl	8004d22 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f107 0118 	add.w	r1, r7, #24
 8004db4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
 8004dba:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d102      	bne.n	8004dca <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8004dc4:	68b8      	ldr	r0, [r7, #8]
 8004dc6:	f023 fbeb 	bl	80285a0 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8004dca:	f024 fc93 	bl	80296f4 <__errno>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8004dd2:	2b22      	cmp	r3, #34	@ 0x22
 8004dd4:	d006      	beq.n	8004de4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dda:	f7ff ffd0 	bl	8004d7e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8004de8:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8004dee:	68b8      	ldr	r0, [r7, #8]
 8004df0:	f023 fbdc 	bl	80285ac <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	623b      	str	r3, [r7, #32]

      if (__idx)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	601a      	str	r2, [r3, #0]

      return __ret;
 8004e0a:	6a3c      	ldr	r4, [r7, #32]
    }
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ff9a 	bl	8004d4a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8004e16:	4623      	mov	r3, r4
    }
 8004e18:	4618      	mov	r0, r3
 8004e1a:	372c      	adds	r7, #44	@ 0x2c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}

08004e20 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	4a04      	ldr	r2, [pc, #16]	@ (8004e3c <_ZN9InterruptC1Ev+0x1c>)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	0802b1f8 	.word	0x0802b1f8

08004e40 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4805      	ldr	r0, [pc, #20]	@ (8004e64 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8004e4e:	f024 fa35 	bl	80292bc <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8004e52:	4905      	ldr	r1, [pc, #20]	@ (8004e68 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	0802a180 	.word	0x0802a180
 8004e68:	240000a8 	.word	0x240000a8

08004e6c <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a02      	ldr	r2, [pc, #8]	@ (8004e84 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8004e7a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
}
 8004e80:	bf00      	nop
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	240000a8 	.word	0x240000a8

08004e88 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8004e8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a02      	ldr	r2, [pc, #8]	@ (8004ea0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8004e96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
}
 8004e9c:	bf00      	nop
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	240000a8 	.word	0x240000a8

08004ea4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a02      	ldr	r2, [pc, #8]	@ (8004ebc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8004eb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
}
 8004eb8:	bf00      	nop
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	240000a8 	.word	0x240000a8

08004ec0 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a02      	ldr	r2, [pc, #8]	@ (8004ed8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8004ece:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	240000a8 	.word	0x240000a8

08004edc <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8004ee0:	4b04      	ldr	r3, [pc, #16]	@ (8004ef4 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a02      	ldr	r2, [pc, #8]	@ (8004ef4 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8004eea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004eec:	4610      	mov	r0, r2
 8004eee:	4798      	blx	r3
}
 8004ef0:	bf00      	nop
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	240000a8 	.word	0x240000a8

08004ef8 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8004efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a02      	ldr	r2, [pc, #8]	@ (8004f10 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8004f06:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4798      	blx	r3
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	240000a8 	.word	0x240000a8

08004f14 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8004f18:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8004f2c:	f7ff fff2 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f002 f948 	bl	80071cc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	e004      	b.n	8004f4a <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fb fa2d 	bl	80003a0 <strlen>
 8004f46:	4603      	mov	r3, r0
 8004f48:	bf00      	nop
      }
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
    return malloc(size);
 8004f5c:	6838      	ldr	r0, [r7, #0]
 8004f5e:	f023 ff73 	bl	8028e48 <malloc>
 8004f62:	4603      	mov	r3, r0
  }
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
    free(ptr);
 8004f76:	6838      	ldr	r0, [r7, #0]
 8004f78:	f023 ff6e 	bl	8028e58 <free>
  }
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	68b8      	ldr	r0, [r7, #8]
 8004f94:	f024 f816 	bl	8028fc4 <realloc>
 8004f98:	4603      	mov	r3, r0
  }
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8004fa8:	4b02      	ldr	r3, [pc, #8]	@ (8004fb4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 8004faa:	4618      	mov	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	24000000 	.word	0x24000000

08004fb8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3309      	adds	r3, #9
  }
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe0:	d301      	bcc.n	8004fe6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e01b      	b.n	800501e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ffe6 	bl	8004fb8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 8004fec:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d201      	bcs.n	8004ffa <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e011      	b.n	800501e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	4798      	blx	r3
 8005006:	60b8      	str	r0, [r7, #8]
    if (node) {
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	b29a      	uxth	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2201      	movs	r2, #1
 800501a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800501c:	68bb      	ldr	r3, [r7, #8]
  }
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8005026:	b5b0      	push	{r4, r5, r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005038:	d20e      	bcs.n	8005058 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	681c      	ldr	r4, [r3, #0]
 8005042:	687d      	ldr	r5, [r7, #4]
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f7ff ffb7 	bl	8004fb8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	4628      	mov	r0, r5
 8005052:	47a0      	blx	r4
 8005054:	6178      	str	r0, [r7, #20]
 8005056:	e001      	b.n	800505c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
    if (newNode)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	b29a      	uxth	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	80da      	strh	r2, [r3, #6]
 800506a:	e006      	b.n	800507a <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
    return newNode;
 800507a:	697b      	ldr	r3, [r7, #20]
  }
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bdb0      	pop	{r4, r5, r7, pc}

08005084 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3304      	adds	r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	4798      	blx	r3
  }
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	721a      	strb	r2, [r3, #8]
  }
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
    return !str_;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
  }
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    return size_;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
  }
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
    return str_;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
  }
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800512e:	e00a      	b.n	8005146 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff9f 	bl	8005084 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	601a      	str	r2, [r3, #0]
    strings_ = node;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]
  }
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e029      	b.n	80051e8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	3308      	adds	r3, #8
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	d11f      	bne.n	80051de <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	889b      	ldrh	r3, [r3, #4]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	809a      	strh	r2, [r3, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	889b      	ldrh	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e003      	b.n	80051d4 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6938      	ldr	r0, [r7, #16]
 80051d8:	f7ff ff54 	bl	8005084 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 80051dc:	e008      	b.n	80051f0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1d2      	bne.n	8005194 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 80051ee:	e000      	b.n	80051f2 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 80051f0:	bf00      	nop
    }
  }
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	2301      	movs	r3, #1
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	f7ff ff4c 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8005216:	b590      	push	{r4, r7, lr}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8005224:	68fc      	ldr	r4, [r7, #12]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f7fb f8b7 	bl	80003a0 <strlen>
 8005232:	4602      	mov	r2, r0
 8005234:	e000      	b.n	8005238 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8005236:	2200      	movs	r2, #0
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff ff31 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    return str_.data();
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff58 	bl	800510c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800525c:	4603      	mov	r3, r0
  }
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
    return s.str_;
 800526e:	687b      	ldr	r3, [r7, #4]
  }
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005290:	809a      	strh	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
  }
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
  }
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f805 	bl	8005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80052f8:	4603      	mov	r3, r0
  }
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
  }
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
    return p;
 8005324:	683b      	ldr	r3, [r7, #0]
  }
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	460a      	mov	r2, r1
 8005356:	71fb      	strb	r3, [r7, #7]
 8005358:	4613      	mov	r3, r2
 800535a:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	4013      	ands	r3, r2
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
    return p;
 800539a:	683b      	ldr	r3, [r7, #0]
  }
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ffe1 	bl	800537a <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	711a      	strb	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053c4:	80da      	strh	r2, [r3, #6]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    return next_;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	88db      	ldrh	r3, [r3, #6]
  }
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	80da      	strh	r2, [r3, #6]
  }
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f85f 	bl	80054d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	e000      	b.n	8005420 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 800541e:	2300      	movs	r3, #0
  }
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f85f 	bl	80054f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	e000      	b.n	8005442 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8005440:	2300      	movs	r3, #0
  }
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f86c 	bl	8005530 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	e000      	b.n	8005464 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8005462:	2300      	movs	r3, #0
  }
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ffe8 	bl	800544a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800547a:	4603      	mov	r3, r0
  }
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
    switch (type_) {
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	791b      	ldrb	r3, [r3, #4]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d002      	beq.n	800549c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8005496:	2b05      	cmp	r3, #5
 8005498:	d008      	beq.n	80054ac <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 800549a:	e013      	b.n	80054c4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff feb6 	bl	8005216 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 80054aa:	e00e      	b.n	80054ca <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	88da      	ldrh	r2, [r3, #6]
 80054ba:	2300      	movs	r3, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 fea5 	bl	800720c <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 80054c2:	e002      	b.n	80054ca <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fe97 	bl	80051f8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	2b40      	cmp	r3, #64	@ 0x40
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
  }
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	2160      	movs	r1, #96	@ 0x60
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff ff22 	bl	800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8005508:	4603      	mov	r3, r0
  }
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	2108      	movs	r1, #8
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff13 	bl	800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8005526:	4603      	mov	r3, r0
  }
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	791b      	ldrb	r3, [r3, #4]
 800553c:	2b20      	cmp	r3, #32
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
  }
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	711a      	strb	r2, [r3, #4]
  }
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2206      	movs	r2, #6
 800557c:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	701a      	strb	r2, [r3, #0]
  }
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f805 	bl	80055ae <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80055a4:	2301      	movs	r3, #1
  }
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2205      	movs	r2, #5
 80055bc:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]
  }
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055e6:	805a      	strh	r2, [r3, #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ffe5 	bl	80055d0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4619      	mov	r1, r3
 8005622:	2004      	movs	r0, #4
 8005624:	f7ff fe79 	bl	800531a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d006      	beq.n	800563c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 800562e:	2200      	movs	r2, #0
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	805a      	strh	r2, [r3, #2]
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff ffdd 	bl	80055f6 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 800563c:	687b      	ldr	r3, [r7, #4]
  }
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ffbd 	bl	80055d0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	2004      	movs	r0, #4
 8005674:	f7ff fe51 	bl	800531a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 800567e:	2200      	movs	r2, #0
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	805a      	strh	r2, [r3, #2]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ffdd 	bl	8005646 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 800568c:	687b      	ldr	r3, [r7, #4]
  }
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	621a      	str	r2, [r3, #32]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	84da      	strh	r2, [r3, #38]	@ 0x26
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	711a      	strb	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3308      	adds	r3, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff ffca 	bl	8005696 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	330c      	adds	r3, #12
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ffd3 	bl	80056b2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3308      	adds	r3, #8
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fd16 	bl	8005158 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	6838      	ldr	r0, [r7, #0]
 8005746:	f7ff fc43 	bl	8004fd0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800574a:	60f8      	str	r0, [r7, #12]
    if (!node)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	711a      	strb	r2, [r3, #4]
    return node;
 8005758:	68fb      	ldr	r3, [r7, #12]
  }
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f7ff fc55 	bl	8005026 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 800577c:	60b8      	str	r0, [r7, #8]
    if (!node)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	711a      	strb	r2, [r3, #4]
    return node;
 800578a:	68bb      	ldr	r3, [r7, #8]
  }
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f7ff fc6d 	bl	8005084 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f103 0008 	add.w	r0, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	f7ff fcd7 	bl	800517c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 020c 	add.w	r2, r3, #12
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f001 fd24 	bl	8007238 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f103 0208 	add.w	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7ff fc8e 	bl	8005124 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f103 020c 	add.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f001 fd3f 	bl	80072a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    return data_;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
  }
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
    return resources_;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
  }
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
    return resources_;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
  }
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
    return data_;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
  }
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	463b      	mov	r3, r7
 80058e6:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80058ea:	463b      	mov	r3, r7
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fd13 	bl	8007318 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80058f2:	60f8      	str	r0, [r7, #12]
    return !!data;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
  }
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fcb2 	bl	800527c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	1d38      	adds	r0, r7, #4
 800592c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005930:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	461a      	mov	r2, r3
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800593c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fcce 	bl	8005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005966:	4601      	mov	r1, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	461a      	mov	r2, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ff8a 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fc98 	bl	80052c2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8005992:	4603      	mov	r3, r0
  }
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f000 f936 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 80059b2:	687b      	ldr	r3, [r7, #4]
  }
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
    if (!data_)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ff76 	bl	8005908 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8005a1c:	e011      	b.n	8005a42 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	f107 0308 	add.w	r3, r7, #8
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f919 	bl	8005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f107 0208 	add.w	r2, r7, #8
 8005a3a:	ca06      	ldmia	r2, {r1, r2}
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff ff70 	bl	8005922 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
    return iterator();
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff ff57 	bl	8005908 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	605a      	str	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
    return resources_;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
  }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fc2f 	bl	8005332 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8005ad4:	4603      	mov	r3, r0
  }
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fdf8 	bl	80056e2 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3338      	adds	r3, #56	@ 0x38
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc56 	bl	80053a8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fe7d 	bl	8005810 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fe54 	bl	80057d6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3338      	adds	r3, #56	@ 0x38
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fd0d 	bl	8005552 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    return &resources_;
 8005b48:	687b      	ldr	r3, [r7, #4]
  }
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
    return &data_;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3338      	adds	r3, #56	@ 0x38
  }
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
    return &data_;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3338      	adds	r3, #56	@ 0x38
  }
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8005b90:	f107 0308 	add.w	r3, r7, #8
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f93e 	bl	8005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8005b9c:	f107 0308 	add.w	r3, r7, #8
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fbdd 	bl	8007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f083 0301 	eor.w	r3, r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e00d      	b.n	8005bd2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f107 0208 	add.w	r2, r7, #8
 8005bbe:	ca06      	ldmia	r2, {r1, r2}
 8005bc0:	f000 f867 	bl	8005c92 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8005bc4:	f107 0308 	add.w	r3, r7, #8
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fbda 	bl	8007382 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	bf00      	nop
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	4613      	mov	r3, r2
 8005be6:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fbe5 	bl	80053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	e001      	b.n	8005c10 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8005c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	80da      	strh	r2, [r3, #6]
}
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	88db      	ldrh	r3, [r3, #6]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6838      	ldr	r0, [r7, #0]
 8005c30:	f000 f965 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005c34:	4602      	mov	r2, r0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	88da      	ldrh	r2, [r3, #6]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fbbe 	bl	80053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	80da      	strh	r2, [r3, #6]
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f941 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff ffa8 	bl	8005bda <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8005c92:	b590      	push	{r4, r7, lr}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	1d38      	adds	r0, r7, #4
 8005c9c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ca0:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	885b      	ldrh	r3, [r3, #2]
 8005ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d019      	beq.n	8005ce2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	885b      	ldrh	r3, [r3, #2]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f000 f922 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005cba:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8005cbc:	697c      	ldr	r4, [r7, #20]
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fb6a 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff fb8c 	bl	80053e8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8005cd0:	1d3b      	adds	r3, r7, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fb61 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8005ce0:	e00f      	b.n	8005d02 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8005ce2:	1d3b      	adds	r3, r7, #4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fb58 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fb50 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	805a      	strh	r2, [r3, #2]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd90      	pop	{r4, r7, pc}

08005d0a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	1d38      	adds	r0, r7, #4
 8005d16:	e880 0006 	stmia.w	r0, {r1, r2}
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fb47 	bl	80073b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005d24:	4604      	mov	r4, r0
 8005d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fb35 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005d30:	4603      	mov	r3, r0
 8005d32:	4619      	mov	r1, r3
 8005d34:	4620      	mov	r0, r4
 8005d36:	f7ff fb57 	bl	80053e8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	885b      	ldrh	r3, [r3, #2]
 8005d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01a      	beq.n	8005d7c <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	885b      	ldrh	r3, [r3, #2]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005d4e:	f000 f8d6 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005d52:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8005d54:	697c      	ldr	r4, [r7, #20]
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fb1e 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4619      	mov	r1, r3
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fb40 	bl	80053e8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8005d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fb14 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8005d7a:	e010      	b.n	8005d9e <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fb0b 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8005d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fb02 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	805a      	strh	r2, [r3, #2]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005da8:	b002      	add	sp, #8
 8005daa:	4770      	bx	lr

08005dac <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8005dbc:	e01b      	b.n	8005df6 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8005dbe:	8afb      	ldrh	r3, [r7, #22]
 8005dc0:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8005dc2:	8afb      	ldrh	r3, [r7, #22]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f000 f899 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005dcc:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8005dce:	6938      	ldr	r0, [r7, #16]
 8005dd0:	f7ff fafe 	bl	80053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8005dd8:	683c      	ldr	r4, [r7, #0]
 8005dda:	8aba      	ldrh	r2, [r7, #20]
 8005ddc:	f107 0308 	add.w	r3, r7, #8
 8005de0:	6939      	ldr	r1, [r7, #16]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 faf1 	bl	80073ca <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8005de8:	f107 0308 	add.w	r3, r7, #8
 8005dec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 f851 	bl	8005e98 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8005df6:	8afb      	ldrh	r3, [r7, #22]
 8005df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d1de      	bne.n	8005dbe <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e06:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e0e:	805a      	strh	r2, [r3, #2]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f103 010c 	add.w	r1, r3, #12
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f107 0308 	add.w	r3, r7, #8
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 faf0 	bl	8007416 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fb2e 	bl	800749c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005e40:	4603      	mov	r3, r0
 8005e42:	f083 0301 	eor.w	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	711a      	strb	r2, [r3, #4]
    return {};
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 facd 	bl	80073f2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8005e58:	e01a      	b.n	8005e90 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fb2d 	bl	80074be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4619      	mov	r1, r3
 8005e68:	2008      	movs	r0, #8
 8005e6a:	f7ff fa91 	bl	8005390 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	d002      	beq.n	8005e7a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fa97 	bl	80053a8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 fb29 	bl	80074d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	4621      	mov	r1, r4
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 fa9d 	bl	80073ca <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}

08005e98 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8005e98:	b5b0      	push	{r4, r5, r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fa82 	bl	80073b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fa1c 	bl	80062f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f103 040c 	add.w	r4, r3, #12
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fa5e 	bl	8007382 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fb10 	bl	80074ee <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 8005ece:	4605      	mov	r5, r0
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fa61 	bl	800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fb10 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8005ee8:	f107 0310 	add.w	r3, r7, #16
 8005eec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f001 fb1d 	bl	8007530 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bdb0      	pop	{r4, r5, r7, pc}

08005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 fb28 	bl	8007568 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8005f22:	b590      	push	{r4, r7, lr}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f103 010c 	add.w	r1, r3, #12
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	f107 0308 	add.w	r3, r7, #8
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fa6b 	bl	8007416 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8005f40:	f107 0308 	add.w	r3, r7, #8
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 faa9 	bl	800749c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f083 0301 	eor.w	r3, r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	711a      	strb	r2, [r3, #4]
    return {};
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fb27 	bl	80075b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8005f62:	e011      	b.n	8005f88 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 faa8 	bl	80074be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	461c      	mov	r4, r3
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 faad 	bl	80074d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4621      	mov	r1, r4
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fb26 	bl	80075d4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd90      	pop	{r4, r7, pc}

08005f90 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f816 	bl	8005fd2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8005fa6:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 040c 	add.w	r4, r3, #12
 8005fae:	887a      	ldrh	r2, [r7, #2]
 8005fb0:	f107 030c 	add.w	r3, r7, #12
 8005fb4:	6979      	ldr	r1, [r7, #20]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 faa6 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f001 fab3 	bl	8007530 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd90      	pop	{r4, r7, pc}

08005fd2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fabe 	bl	8007568 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005fec:	4603      	mov	r3, r0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8006000:	2000      	movs	r0, #0
 8006002:	f000 f819 	bl	8006038 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8006006:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8006010:	2300      	movs	r3, #0
 8006012:	e00c      	b.n	800602e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	79fa      	ldrb	r2, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	d103      	bne.n	8006026 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3301      	adds	r3, #1
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	e003      	b.n	800602e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3302      	adds	r3, #2
 800602a:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800602c:	e7ec      	b.n	8006008 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8006048:	2304      	movs	r3, #4
 800604a:	e000      	b.n	800604e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 800604c:	2300      	movs	r3, #0
 800604e:	4a04      	ldr	r2, [pc, #16]	@ (8006060 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8006050:	4413      	add	r3, r2
  }
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	0802a1b4 	.word	0x0802a1b4

08006064 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
    if (node_)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7ff fb73 	bl	8005794 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	609a      	str	r2, [r3, #8]
    if (!node_)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	211f      	movs	r1, #31
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fb2d 	bl	8005734 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	605a      	str	r2, [r3, #4]
  }
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	4413      	add	r3, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681c      	ldr	r4, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f103 0108 	add.w	r1, r3, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fa72 	bl	80075fc <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8006118:	f107 0308 	add.w	r3, r7, #8
 800611c:	4619      	mov	r1, r3
 800611e:	4620      	mov	r0, r4
 8006120:	f001 fa7d 	bl	800761e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8006124:	6178      	str	r0, [r7, #20]
    if (!node) {
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d113      	bne.n	8006154 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	461a      	mov	r2, r3
 800613a:	f7ff fb12 	bl	8005762 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800613e:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fae5 	bl	8005716 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	e005      	b.n	8006160 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	889b      	ldrh	r3, [r3, #4]
 8006158:	3301      	adds	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8006160:	697b      	ldr	r3, [r7, #20]
  }
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}

0800616a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 800616a:	b590      	push	{r4, r7, lr}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d014      	beq.n	80061a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6852      	ldr	r2, [r2, #4]
 8006186:	88d2      	ldrh	r2, [r2, #6]
 8006188:	4293      	cmp	r3, r2
 800618a:	d10d      	bne.n	80061a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	3301      	adds	r3, #1
 800619c:	461a      	mov	r2, r3
 800619e:	f7ff fae0 	bl	8005762 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80061a2:	4602      	mov	r2, r0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	605a      	str	r2, [r3, #4]
    if (node_)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80061b0:	78fc      	ldrb	r4, [r7, #3]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	1c58      	adds	r0, r3, #1
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	6088      	str	r0, [r1, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	4622      	mov	r2, r4
 80061c4:	721a      	strb	r2, [r3, #8]
  }
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}

080061ce <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf14      	ite	ne
 80061de:	2301      	movne	r3, #1
 80061e0:	2300      	moveq	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
  }
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4413      	add	r3, r2
 8006204:	2200      	movs	r2, #0
 8006206:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f103 0108 	add.w	r1, r3, #8
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	2300      	movs	r3, #0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fa11 	bl	800763e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	463b      	mov	r3, r7
 800622c:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8006230:	463b      	mov	r3, r7
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f87c 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8006238:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	6979      	ldr	r1, [r7, #20]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff f91c 	bl	8005484 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 800624c:	f107 0308 	add.w	r3, r7, #8
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fffb 	bl	800524c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8006256:	4603      	mov	r3, r0
 8006258:	e000      	b.n	800625c <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 800625a:	2300      	movs	r3, #0
  }
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f84f 	bl	8007318 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800627a:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f9ef 	bl	8007662 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8006284:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 800628c:	6978      	ldr	r0, [r7, #20]
 800628e:	f7ff f8ba 	bl	8005406 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8006292:	4603      	mov	r3, r0
 8006294:	e000      	b.n	8006298 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 8006296:	2300      	movs	r3, #0
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fb9e 	bl	80059de <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	1d3b      	adds	r3, r7, #4
 80062b4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80062b8:	1d3b      	adds	r3, r7, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f82c 	bl	8007318 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80062c0:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f9cc 	bl	8007662 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80062ca:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff f8b9 	bl	800544a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80062d8:	4603      	mov	r3, r0
 80062da:	e000      	b.n	80062de <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 80062dc:	2300      	movs	r3, #0
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fbce 	bl	8005a84 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	791b      	ldrb	r3, [r3, #4]
 80062fe:	2101      	movs	r1, #1
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff f823 	bl	800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	4619      	mov	r1, r3
 8006314:	6838      	ldr	r0, [r7, #0]
 8006316:	f7ff fa4c 	bl	80057b2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	791b      	ldrb	r3, [r3, #4]
 800631e:	2110      	movs	r1, #16
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff f813 	bl	800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	6838      	ldr	r0, [r7, #0]
 8006334:	f7ff fe2c 	bl	8005f90 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff f875 	bl	8005428 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800633e:	60f8      	str	r0, [r7, #12]
  if (collection)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff fd2f 	bl	8005dac <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	711a      	strb	r2, [r3, #4]
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	2110      	movs	r1, #16
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe ffed 	bl	800534c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006372:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	4619      	mov	r1, r3
 800637e:	6838      	ldr	r0, [r7, #0]
 8006380:	f7ff fe27 	bl	8005fd2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8006384:	4603      	mov	r3, r0
             : nullptr;
 8006386:	e000      	b.n	800638a <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
    return code_;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	781b      	ldrb	r3, [r3, #0]
  }
 80063be:	4618      	mov	r0, r3
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	4b04      	ldr	r3, [pc, #16]	@ (80063ec <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 80063dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	24000004 	.word	0x24000004

080063f0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    return true;
 80063f8:	2301      	movs	r3, #1
  }
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
    return true;
 800640e:	2301      	movs	r3, #1
  }
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
    return true;
 8006424:	2301      	movs	r3, #1
  }
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
    return true;
 800643a:	2301      	movs	r3, #1
  }
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	220a      	movs	r2, #10
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	3b01      	subs	r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff ffe2 	bl	8006464 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 80064a0:	7b3b      	ldrb	r3, [r7, #12]
  }
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
  }
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 80064d4:	793b      	ldrb	r3, [r7, #4]
 80064d6:	737b      	strb	r3, [r7, #13]
 80064d8:	2300      	movs	r3, #0
 80064da:	7b3a      	ldrb	r2, [r7, #12]
 80064dc:	f362 0307 	bfi	r3, r2, #0, #8
 80064e0:	7b7a      	ldrb	r2, [r7, #13]
 80064e2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fb03 	bl	8005b06 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8006518:	d305      	bcc.n	8006526 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006520:	d201      	bcs.n	8006526 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006544:	d305      	bcc.n	8006552 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800654c:	d201      	bcs.n	8006552 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800658e:	887b      	ldrh	r3, [r7, #2]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ffb9 	bl	8006508 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 800659c:	887b      	ldrh	r3, [r7, #2]
 800659e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	801a      	strh	r2, [r3, #0]
      return false;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e018      	b.n	80065de <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 80065ac:	887b      	ldrh	r3, [r7, #2]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff ffc0 	bl	8006534 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	029a      	lsls	r2, r3, #10
 80065c0:	887b      	ldrh	r3, [r7, #2]
 80065c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80065cc:	461a      	mov	r2, r3
      codepoint_ =
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]
      return true;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e003      	b.n	80065de <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
    return true;
 80065dc:	2301      	movs	r3, #1
  }
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
  }
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	4603      	mov	r3, r0
 8006606:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	2b2f      	cmp	r3, #47	@ 0x2f
 800660c:	d904      	bls.n	8006618 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b39      	cmp	r3, #57	@ 0x39
 8006612:	d801      	bhi.n	8006618 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	ed87 0a00 	vstr	s0, [r7]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	e9c7 2300 	strd	r2, r3, [r7]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666e:	e9c1 2300 	strd	r2, r3, [r1]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	e9c7 2300 	strd	r2, r3, [r7]
 800668c:	68f9      	ldr	r1, [r7, #12]
 800668e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006692:	e9c1 2300 	strd	r2, r3, [r1]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	ed87 0b00 	vstr	d0, [r7]
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b6:	e9c1 2300 	strd	r2, r3, [r1]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3308      	adds	r3, #8
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff ffa3 	bl	8006626 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	ed87 0a00 	vstr	s0, [r7]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3308      	adds	r3, #8
 8006700:	ed97 0a00 	vldr	s0, [r7]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff ff99 	bl	800663c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	e9c7 2300 	strd	r2, r3, [r7]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2202      	movs	r2, #2
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f103 0108 	add.w	r1, r3, #8
 800672c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006730:	4608      	mov	r0, r1
 8006732:	f7ff ff93 	bl	800665c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	e9c7 2300 	strd	r2, r3, [r7]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2203      	movs	r2, #3
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f103 0108 	add.w	r1, r3, #8
 8006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675c:	4608      	mov	r0, r1
 800675e:	f7ff ff8f 	bl	8006680 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	ed87 0b00 	vstr	d0, [r7]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2204      	movs	r2, #4
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3308      	adds	r3, #8
 8006782:	ed97 0b00 	vldr	d0, [r7]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff8c 	bl	80066a4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
    return type_;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	781b      	ldrb	r3, [r3, #0]
  }
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	ee07 3a90 	vmov	s15, r3
  }
 80067f6:	eeb0 0a67 	vmov.f32	s0, s15
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006812:	ec43 2b17 	vmov	d7, r2, r3
  }
 8006816:	eeb0 0b47 	vmov.f64	d0, d7
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8006824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006828:	b0a6      	sub	sp, #152	@ 0x98
 800682a:	af00      	add	r7, sp, #0
 800682c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800682e:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8006836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b2b      	cmp	r3, #43	@ 0x2b
 800683c:	d008      	beq.n	8006850 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 800683e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006840:	d10a      	bne.n	8006858 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8006848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800684a:	3301      	adds	r3, #1
 800684c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800684e:	e003      	b.n	8006858 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8006850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006852:	3301      	adds	r3, #1
 8006854:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006856:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8006858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fece 	bl	80065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006862:	4603      	mov	r3, r0
 8006864:	f083 0301 	eor.w	r3, r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 800686e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b2e      	cmp	r3, #46	@ 0x2e
 8006874:	d001      	beq.n	800687a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8006880:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006882:	f7ff ff21 	bl	80066c8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006886:	e1f5      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 80068a6:	e054      	b.n	8006952 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 80068a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	3b30      	subs	r3, #48	@ 0x30
 80068ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 80068b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80068b6:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 80068ba:	49ae      	ldr	r1, [pc, #696]	@ (8006b74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 80068bc:	418b      	sbcs	r3, r1
 80068be:	d251      	bcs.n	8006964 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 80068c0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	0099      	lsls	r1, r3, #2
 80068d2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80068d6:	0090      	lsls	r0, r2, #2
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	eb12 0804 	adds.w	r8, r2, r4
 80068e0:	eb43 0905 	adc.w	r9, r3, r5
 80068e4:	eb18 0308 	adds.w	r3, r8, r8
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	eb49 0309 	adc.w	r3, r9, r9
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80068f4:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 80068f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80068fc:	2200      	movs	r2, #0
 80068fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006900:	647a      	str	r2, [r7, #68]	@ 0x44
 8006902:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006906:	460b      	mov	r3, r1
 8006908:	43db      	mvns	r3, r3
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	4613      	mov	r3, r2
 800690e:	43db      	mvns	r3, r3
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006912:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006916:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800691a:	4621      	mov	r1, r4
 800691c:	4291      	cmp	r1, r2
 800691e:	4629      	mov	r1, r5
 8006920:	eb71 0303 	sbcs.w	r3, r1, r3
 8006924:	d320      	bcc.n	8006968 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8006926:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800692a:	2200      	movs	r2, #0
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30
 800692e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006930:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006934:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006938:	4621      	mov	r1, r4
 800693a:	1851      	adds	r1, r2, r1
 800693c:	6139      	str	r1, [r7, #16]
 800693e:	4629      	mov	r1, r5
 8006940:	414b      	adcs	r3, r1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006948:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 800694c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800694e:	3301      	adds	r3, #1
 8006950:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fe51 	bl	80065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1a2      	bne.n	80068a8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8006962:	e002      	b.n	800696a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006968:	bf00      	nop
  }

  if (*s == '\0') {
 800696a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d136      	bne.n	80069e0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8006972:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006976:	2b00      	cmp	r3, #0
 8006978:	d019      	beq.n	80069ae <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006982:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8006986:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800698a:	2a01      	cmp	r2, #1
 800698c:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8006990:	d226      	bcs.n	80069e0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8006992:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006996:	2100      	movs	r1, #0
 8006998:	4250      	negs	r0, r2
 800699a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800699c:	eb61 0303 	sbc.w	r3, r1, r3
 80069a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80069a8:	f7ff feb4 	bl	8006714 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 80069ac:	e162      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 80069ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80069b2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80069b4:	f7ff fec4 	bl	8006740 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 80069b8:	e15c      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 80069ba:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80069be:	f04f 020a 	mov.w	r2, #10
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	f7f9 ffbd 	bl	8000944 <__aeabi_uldivmod>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 80069d2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3301      	adds	r3, #1
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 80069e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80069e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069e8:	d2e7      	bcs.n	80069ba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80069ea:	e009      	b.n	8006a00 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 80069ec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3301      	adds	r3, #1
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 80069fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069fc:	3301      	adds	r3, #1
 80069fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fdfa 	bl	80065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1ed      	bne.n	80069ec <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8006a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a16:	d14c      	bne.n	8006ab2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8006a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006a1e:	e040      	b.n	8006aa2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8006a20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006a24:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8006a28:	4953      	ldr	r1, [pc, #332]	@ (8006b78 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8006a2a:	418b      	sbcs	r3, r1
 8006a2c:	d236      	bcs.n	8006a9c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8006a2e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006a32:	4622      	mov	r2, r4
 8006a34:	462b      	mov	r3, r5
 8006a36:	f04f 0000 	mov.w	r0, #0
 8006a3a:	f04f 0100 	mov.w	r1, #0
 8006a3e:	0099      	lsls	r1, r3, #2
 8006a40:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006a44:	0090      	lsls	r0, r2, #2
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	eb12 0a04 	adds.w	sl, r2, r4
 8006a4e:	eb43 0b05 	adc.w	fp, r3, r5
 8006a52:	eb1a 030a 	adds.w	r3, sl, sl
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	eb4b 030b 	adc.w	r3, fp, fp
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006a68:	7809      	ldrb	r1, [r1, #0]
 8006a6a:	3930      	subs	r1, #48	@ 0x30
 8006a6c:	b2c9      	uxtb	r1, r1
 8006a6e:	b2c9      	uxtb	r1, r1
 8006a70:	2000      	movs	r0, #0
 8006a72:	6239      	str	r1, [r7, #32]
 8006a74:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	1851      	adds	r1, r2, r1
 8006a7e:	6039      	str	r1, [r7, #0]
 8006a80:	4629      	mov	r1, r5
 8006a82:	414b      	adcs	r3, r1
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006a8a:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8006a8e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8006a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff fda9 	bl	80065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1b6      	bne.n	8006a20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8006ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b65      	cmp	r3, #101	@ 0x65
 8006abe:	d003      	beq.n	8006ac8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b45      	cmp	r3, #69	@ 0x45
 8006ac6:	d171      	bne.n	8006bac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aca:	3301      	adds	r3, #1
 8006acc:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ada:	d106      	bne.n	8006aea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae8:	e04f      	b.n	8006b8a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8006aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8006af0:	d14b      	bne.n	8006b8a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8006af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af4:	3301      	adds	r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8006af8:	e047      	b.n	8006b8a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8006afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	461a      	mov	r2, r3
 8006b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	3b30      	subs	r3, #48	@ 0x30
 8006b0e:	4413      	add	r3, r2
 8006b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8006b14:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8006b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8006b22:	dd2f      	ble.n	8006b84 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8006b24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8006b2c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8006b34:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006b7c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8006b38:	e001      	b.n	8006b3e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8006b3a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006b80 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 8006b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b42:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b44:	f7ff fdd1 	bl	80066ea <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8006b48:	e094      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8006b4a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d006      	beq.n	8006b60 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8006b52:	f000 fda7 	bl	80076a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006b56:	eeb0 7b40 	vmov.f64	d7, d0
 8006b5a:	eeb1 7b47 	vneg.f64	d7, d7
 8006b5e:	e003      	b.n	8006b68 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8006b60:	f000 fda0 	bl	80076a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006b64:	eeb0 7b40 	vmov.f64	d7, d0
 8006b68:	eeb0 0b47 	vmov.f64	d0, d7
 8006b6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b6e:	f7ff fdfd 	bl	800676c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006b72:	e07f      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8006b74:	19999999 	.word	0x19999999
 8006b78:	00019999 	.word	0x00019999
 8006b7c:	80000000 	.word	0x80000000
 8006b80:	00000000 	.word	0x00000000
      }
      s++;
 8006b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b86:	3301      	adds	r3, #1
 8006b88:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fd35 	bl	80065fe <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1af      	bne.n	8006afa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8006b9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8006ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ba6:	425b      	negs	r3, r3
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8006bac:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006bb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8006bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8006bc2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006bc4:	f7ff fd80 	bl	80066c8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006bc8:	e054      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8006bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bce:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8006bd2:	db0a      	blt.n	8006bea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bd8:	2b26      	cmp	r3, #38	@ 0x26
 8006bda:	dc06      	bgt.n	8006bea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8006bdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006be0:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8006be4:	f173 0300 	sbcs.w	r3, r3, #0
 8006be8:	d301      	bcc.n	8006bee <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8006bee:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006bf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8006bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01e      	beq.n	8006c3a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8006bfc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006c00:	f7f9 fd5c 	bl	80006bc <__aeabi_ul2d>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006c0c:	ec43 2b10 	vmov	d0, r2, r3
 8006c10:	f000 fd56 	bl	80076c0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8006c14:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8006c18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8006c20:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006c24:	eeb1 7b47 	vneg.f64	d7, d7
 8006c28:	e001      	b.n	8006c2e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8006c2a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006c2e:	eeb0 0b47 	vmov.f64	d0, d7
 8006c32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006c34:	f7ff fd9a 	bl	800676c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006c38:	e01c      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8006c3a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006c3e:	f7f9 fe3b 	bl	80008b8 <__aeabi_ul2f>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006c48:	ee00 3a10 	vmov	s0, r3
 8006c4c:	f000 fd79 	bl	8007742 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8006c50:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8006c54:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8006c5c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006c60:	eef1 7a67 	vneg.f32	s15, s15
 8006c64:	e001      	b.n	8006c6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8006c66:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006c70:	f7ff fd3b 	bl	80066ea <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8006c74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006c76:	3798      	adds	r7, #152	@ 0x98
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7e:	bf00      	nop

08006c80 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8006cb8:	b590      	push	{r4, r7, lr}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]
	configError(false)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	1d1c      	adds	r4, r3, #4
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f021 fc5a 	bl	802858a <_ZNSaIcEC1Ev>
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4914      	ldr	r1, [pc, #80]	@ (8006d30 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fd70 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006ce4:	f107 030c 	add.w	r3, r7, #12
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f021 fc4f 	bl	802858c <_ZNSaIcED1Ev>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a10      	ldr	r2, [pc, #64]	@ (8006d34 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8006cf2:	61da      	str	r2, [r3, #28]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f103 0420 	add.w	r4, r3, #32
 8006cfa:	f7fe f953 	bl	8004fa4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4619      	mov	r1, r3
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7fe feeb 	bl	8005ade <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3360      	adds	r3, #96	@ 0x60
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe fea8 	bl	8005a62 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f80c 	bl	8006d38 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f82b 	bl	8006d7c <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}
 8006d30:	0802a20c 	.word	0x0802a20c
 8006d34:	0802a210 	.word	0x0802a210

08006d38 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f021 fdc5 	bl	80288d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3320      	adds	r3, #32
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fee5 	bl	8005b1e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f903 	bl	8006f60 <_ZN17JsonConfigHandler16readFileContentsEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f083 0301 	eor.w	r3, r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e003      	b.n	8006d72 <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9c8 	bl	8007100 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8006d70:	2301      	movs	r3, #1
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b0a1      	sub	sp, #132	@ 0x84
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 808e 	bne.w	8006eac <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8006d90:	4848      	ldr	r0, [pc, #288]	@ (8006eb4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8006d92:	f022 fb03 	bl	802939c <puts>

    JsonArray Threads = doc["Threads"];
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f103 0120 	add.w	r1, r3, #32
 8006d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006da0:	4a45      	ldr	r2, [pc, #276]	@ (8006eb8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fd38 	bl	8007818 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006da8:	f107 031c 	add.w	r3, r7, #28
 8006dac:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fd49 	bl	800784a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	f107 021c 	add.w	r2, r7, #28
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fe1e 	bl	8005a04 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006dc8:	e05c      	b.n	8006e84 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8006dca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006dce:	f107 0210 	add.w	r2, r7, #16
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fdbd 	bl	8005954 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8006dda:	68fc      	ldr	r4, [r7, #12]
 8006ddc:	463b      	mov	r3, r7
 8006dde:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fd3f 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8006dea:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8006dee:	463a      	mov	r2, r7
 8006df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006df4:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006dfe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006e02:	4a2e      	ldr	r2, [pc, #184]	@ (8006ebc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fd3e 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006e0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fd5e 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8006e14:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006e1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006e20:	4a27      	ldr	r2, [pc, #156]	@ (8006ec0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fd60 	bl	80078e8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006e28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fd80 	bl	8007932 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8006e32:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8006e34:	4923      	ldr	r1, [pc, #140]	@ (8006ec4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8006e36:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006e38:	f7f9 fa52 	bl	80002e0 <strcmp>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8006e42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e44:	4820      	ldr	r0, [pc, #128]	@ (8006ec8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8006e46:	f022 fa39 	bl	80292bc <iprintf>
            remoraInstance->setBaseFreq(freq);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff ff15 	bl	8006c80 <_ZN6Remora11setBaseFreqEm>
 8006e56:	e010      	b.n	8006e7a <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8006e58:	491c      	ldr	r1, [pc, #112]	@ (8006ecc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 8006e5a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006e5c:	f7f9 fa40 	bl	80002e0 <strcmp>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8006e66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e68:	4819      	ldr	r0, [pc, #100]	@ (8006ed0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 8006e6a:	f022 fa27 	bl	80292bc <iprintf>
            remoraInstance->setServoFreq(freq);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff ff11 	bl	8006c9c <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fd8c 	bl	800599c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8006e84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006e88:	f107 021c 	add.w	r2, r7, #28
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fddb 	bl	8005a4a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8006e94:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fd6c 	bl	800597c <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d18f      	bne.n	8006dca <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 8006eaa:	e000      	b.n	8006eae <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 8006eac:	bf00      	nop
        }
    }
}
 8006eae:	3784      	adds	r7, #132	@ 0x84
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}
 8006eb4:	0802a21c 	.word	0x0802a21c
 8006eb8:	0802a23c 	.word	0x0802a23c
 8006ebc:	0802a244 	.word	0x0802a244
 8006ec0:	0802a24c 	.word	0x0802a24c
 8006ec4:	0802a258 	.word	0x0802a258
 8006ec8:	0802a260 	.word	0x0802a260
 8006ecc:	0802a288 	.word	0x0802a288
 8006ed0:	0802a290 	.word	0x0802a290

08006ed4 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b08f      	sub	sp, #60	@ 0x3c
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f103 0120 	add.w	r1, r3, #32
 8006ee4:	f107 0308 	add.w	r3, r7, #8
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f5c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fc94 	bl	8007818 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 8006efa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006efc:	f001 fc9a 	bl	8008834 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8006f00:	4604      	mov	r4, r0
 8006f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f04:	f001 fca6 	bl	8008854 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fcb9 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8006f16:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8006f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f20:	f7fe fcdd 	bl	80058de <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8006f24:	4603      	mov	r3, r0
 8006f26:	bf00      	nop
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f103 0120 	add.w	r1, r3, #32
 8006f32:	f107 0318 	add.w	r3, r7, #24
 8006f36:	4a09      	ldr	r2, [pc, #36]	@ (8006f5c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fc6d 	bl	8007818 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f107 0218 	add.w	r2, r7, #24
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fcff 	bl	800794a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8006f4c:	e002      	b.n	8006f54 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fe fd34 	bl	80059bc <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	373c      	adds	r7, #60	@ 0x3c
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd90      	pop	{r4, r7, pc}
 8006f5c:	0802a2b8 	.word	0x0802a2b8

08006f60 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8006f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f64:	b08f      	sub	sp, #60	@ 0x3c
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8006f6a:	485a      	ldr	r0, [pc, #360]	@ (80070d4 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 8006f6c:	f022 fa16 	bl	802939c <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8006f70:	4859      	ldr	r0, [pc, #356]	@ (80070d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 8006f72:	f022 fa13 	bl	802939c <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8006f76:	2200      	movs	r2, #0
 8006f78:	4958      	ldr	r1, [pc, #352]	@ (80070dc <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 8006f7a:	4859      	ldr	r0, [pc, #356]	@ (80070e0 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 8006f7c:	f020 fea0 	bl	8027cc0 <f_mount>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bf14      	ite	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	2300      	moveq	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8006f90:	4854      	ldr	r0, [pc, #336]	@ (80070e4 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 8006f92:	f022 f993 	bl	80292bc <iprintf>
    	Error_Handler();
 8006f96:	f003 fc4b 	bl	800a830 <Error_Handler>
 8006f9a:	e094      	b.n	80070c6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4850      	ldr	r0, [pc, #320]	@ (80070e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8006fa6:	f020 fed1 	bl	8027d4c <f_open>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 8006fba:	484c      	ldr	r0, [pc, #304]	@ (80070ec <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 8006fbc:	f022 f9ee 	bl	802939c <puts>
			Error_Handler();
 8006fc0:	f003 fc36 	bl	800a830 <Error_Handler>
 8006fc4:	e07f      	b.n	80070c6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 8006fc6:	466b      	mov	r3, sp
 8006fc8:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8006fca:	4b47      	ldr	r3, [pc, #284]	@ (80070e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8006fd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fd2:	4847      	ldr	r0, [pc, #284]	@ (80070f0 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8006fd4:	f022 f972 	bl	80292bc <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8006fd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fda:	1e4b      	subs	r3, r1, #1
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fde:	460a      	mov	r2, r1
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4690      	mov	r8, r2
 8006fe4:	4699      	mov	r9, r3
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ffa:	460a      	mov	r2, r1
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4614      	mov	r4, r2
 8007000:	461d      	mov	r5, r3
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	00eb      	lsls	r3, r5, #3
 800700c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007010:	00e2      	lsls	r2, r4, #3
 8007012:	460b      	mov	r3, r1
 8007014:	3318      	adds	r3, #24
 8007016:	3307      	adds	r3, #7
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	ebad 0d03 	sub.w	sp, sp, r3
 8007020:	466b      	mov	r3, sp
 8007022:	331f      	adds	r3, #31
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	015b      	lsls	r3, r3, #5
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800702a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007032:	482d      	ldr	r0, [pc, #180]	@ (80070e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007034:	f021 f844 	bl	80280c0 <f_read>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8007048:	482a      	ldr	r0, [pc, #168]	@ (80070f4 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 800704a:	f022 f9a7 	bl	802939c <puts>
 800704e:	e036      	b.n	80070be <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8007050:	4829      	ldr	r0, [pc, #164]	@ (80070f8 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8007052:	f022 f9a3 	bl	802939c <puts>
				jsonContent.reserve(length + 1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	1d1a      	adds	r2, r3, #4
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	3301      	adds	r3, #1
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f021 fc1c 	bl	802889e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8007066:	2300      	movs	r3, #0
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
 800706a:	e01a      	b.n	80070a2 <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1d19      	adds	r1, r3, #4
 8007070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007074:	4413      	add	r3, r2
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	f107 0310 	add.w	r3, r7, #16
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fc88 	bl	8007992 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	f107 0210 	add.w	r2, r7, #16
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f021 fb6c 	bl	802876a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	4618      	mov	r0, r3
 8007098:	f021 fb61 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 800709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709e:	3301      	adds	r3, #1
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	429a      	cmp	r2, r3
 80070a8:	dbe0      	blt.n	800706c <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4618      	mov	r0, r3
 80070b0:	f021 fd38 	bl	8028b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4619      	mov	r1, r3
 80070b8:	4810      	ldr	r0, [pc, #64]	@ (80070fc <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80070ba:	f022 f8ff 	bl	80292bc <iprintf>
			f_close(&SDFile);
 80070be:	480a      	ldr	r0, [pc, #40]	@ (80070e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80070c0:	f021 f9bb 	bl	802843a <f_close>
 80070c4:	46b5      	mov	sp, r6
    }

	return true;
 80070c6:	2301      	movs	r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	373c      	adds	r7, #60	@ 0x3c
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070d2:	bf00      	nop
 80070d4:	0802a2c0 	.word	0x0802a2c0
 80070d8:	0802a2e4 	.word	0x0802a2e4
 80070dc:	24000420 	.word	0x24000420
 80070e0:	24000424 	.word	0x24000424
 80070e4:	0802a304 	.word	0x0802a304
 80070e8:	24000654 	.word	0x24000654
 80070ec:	0802a320 	.word	0x0802a320
 80070f0:	0802a344 	.word	0x0802a344
 80070f4:	0802a368 	.word	0x0802a368
 80070f8:	0802a388 	.word	0x0802a388
 80070fc:	0802a3a8 	.word	0x0802a3a8

08007100 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8007108:	482a      	ldr	r0, [pc, #168]	@ (80071b4 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 800710a:	f022 f947 	bl	802939c <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3320      	adds	r3, #32
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fd03 	bl	8005b1e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f103 0420 	add.w	r4, r3, #32
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4618      	mov	r0, r3
 8007124:	f021 fcfe 	bl	8028b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007128:	4603      	mov	r3, r0
 800712a:	4619      	mov	r1, r3
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fc46 	bl	80079be <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8007132:	4603      	mov	r3, r0
 8007134:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8007136:	4820      	ldr	r0, [pc, #128]	@ (80071b8 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8007138:	f022 f8c0 	bl	80292bc <iprintf>

    switch (error.code())
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff f936 	bl	80063b2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8007146:	4603      	mov	r3, r0
 8007148:	2b04      	cmp	r3, #4
 800714a:	d012      	beq.n	8007172 <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 800714c:	2b04      	cmp	r3, #4
 800714e:	dc18      	bgt.n	8007182 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d004      	beq.n	8007162 <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8007158:	e013      	b.n	8007182 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800715a:	4818      	ldr	r0, [pc, #96]	@ (80071bc <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 800715c:	f022 f91e 	bl	802939c <puts>
            break;
 8007160:	e023      	b.n	80071aa <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8007162:	4817      	ldr	r0, [pc, #92]	@ (80071c0 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 8007164:	f022 f91a 	bl	802939c <puts>
            configError = true;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007170:	e01b      	b.n	80071aa <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8007172:	4814      	ldr	r0, [pc, #80]	@ (80071c4 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 8007174:	f022 f912 	bl	802939c <puts>
            configError = true;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007180:	e013      	b.n	80071aa <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 8007182:	4811      	ldr	r0, [pc, #68]	@ (80071c8 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 8007184:	f022 f89a 	bl	80292bc <iprintf>
            printf(error.c_str());
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff f91d 	bl	80063cc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 8007192:	4603      	mov	r3, r0
 8007194:	4618      	mov	r0, r3
 8007196:	f022 f891 	bl	80292bc <iprintf>
            printf("\n");
 800719a:	200a      	movs	r0, #10
 800719c:	f022 f8a0 	bl	80292e0 <putchar>
            configError = true;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80071a8:	bf00      	nop
    }

    return true;
 80071aa:	2301      	movs	r3, #1
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}
 80071b4:	0802a3b0 	.word	0x0802a3b0
 80071b8:	0802a3d4 	.word	0x0802a3d4
 80071bc:	0802a3f0 	.word	0x0802a3f0
 80071c0:	0802a40c 	.word	0x0802a40c
 80071c4:	0802a41c 	.word	0x0802a41c
 80071c8:	0802a430 	.word	0x0802a430

080071cc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80071d8:	e002      	b.n	80071e0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	72fa      	strb	r2, [r7, #11]
 80071ea:	f107 020b 	add.w	r2, r7, #11
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fbf7 	bl	80079e4 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f083 0301 	eor.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1eb      	bne.n	80071da <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8007202:	68fb      	ldr	r3, [r7, #12]
    }
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4611      	mov	r1, r2
 8007218:	461a      	mov	r2, r3
 800721a:	460b      	mov	r3, r1
 800721c:	80fb      	strh	r3, [r7, #6]
 800721e:	4613      	mov	r3, r2
 8007220:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	797b      	ldrb	r3, [r7, #5]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	f7fd ff3b 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	81fb      	strh	r3, [r7, #14]
 8007246:	e00b      	b.n	8007260 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1a      	ldr	r2, [r3, #32]
 800724c:	89fb      	ldrh	r3, [r7, #14]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fc40 	bl	8007ada <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 800725a:	89fb      	ldrh	r3, [r7, #14]
 800725c:	3301      	adds	r3, #1
 800725e:	81fb      	strh	r3, [r7, #14]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007264:	89fa      	ldrh	r2, [r7, #14]
 8007266:	429a      	cmp	r2, r3
 8007268:	d3ee      	bcc.n	8007248 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007276:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1a      	ldr	r2, [r3, #32]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d00e      	beq.n	80072a0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6a12      	ldr	r2, [r2, #32]
 800728e:	4611      	mov	r1, r2
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	4798      	blx	r3
      pools_ = preallocatedPools_;
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00d      	beq.n	80072d6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072c2:	4619      	mov	r1, r3
 80072c4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80072c8:	440b      	add	r3, r1
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fc2e 	bl	8007b32 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d017      	beq.n	8007310 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d011      	beq.n	8007310 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6a11      	ldr	r1, [r2, #32]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80072fc:	00d2      	lsls	r2, r2, #3
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	4798      	blx	r3
 8007302:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fe fad0 	bl	80058c6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8007326:	4603      	mov	r3, r0
  }
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fe fa8d 	bl	8005858 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800733e:	4603      	mov	r3, r0
  }
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fe fa8d 	bl	8005870 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8007356:	4603      	mov	r3, r0
  }
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf14      	ite	ne
 8007370:	2301      	movne	r3, #1
 8007372:	2300      	moveq	r3, #0
 8007374:	b2db      	uxtb	r3, r3
  }
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
    return ptr_;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
  }
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
    return id_;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	889b      	ldrh	r3, [r3, #4]
  }
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
  }
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	88fa      	ldrh	r2, [r7, #6]
 80073e2:	809a      	strh	r2, [r3, #4]
  }
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007406:	809a      	strh	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8007416:	b580      	push	{r7, lr}
 8007418:	b088      	sub	sp, #32
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800742a:	4293      	cmp	r3, r2
 800742c:	d005      	beq.n	800743a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fbda 	bl	8007bec <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8007438:	e02c      	b.n	8007494 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8007442:	f107 0314 	add.w	r3, r7, #20
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fbec 	bl	8007c26 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 800744e:	f107 0314 	add.w	r3, r7, #20
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f822 	bl	800749c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	461a      	mov	r2, r3
 8007462:	f107 0314 	add.w	r3, r7, #20
 8007466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800746a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800746e:	e011      	b.n	8007494 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	68b8      	ldr	r0, [r7, #8]
 8007474:	f000 fc14 	bl	8007ca0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8007478:	61f8      	str	r0, [r7, #28]
    if (!pool)
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fc49 	bl	8007d18 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007486:	e005      	b.n	8007494 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fbca 	bl	8007c26 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8007492:	bf00      	nop
  }
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
  }
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
  }
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
    return id_;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	889b      	ldrh	r3, [r3, #4]
  }
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	809a      	strh	r2, [r3, #4]
  }
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8007530:	b590      	push	{r4, r7, lr}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8007542:	1d3b      	adds	r3, r7, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fbf9 	bl	8007d3c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800754a:	4603      	mov	r3, r0
 800754c:	4622      	mov	r2, r4
 800754e:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ffbf 	bl	80074d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}

08007568 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 800757e:	2300      	movs	r3, #0
 8007580:	e012      	b.n	80075a8 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	09db      	lsrs	r3, r3, #7
 8007586:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800758e:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	89ba      	ldrh	r2, [r7, #12]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fbd8 	bl	8007d54 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80075a4:	4603      	mov	r3, r0
 80075a6:	bf00      	nop
  }
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075c4:	809a      	strh	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	809a      	strh	r2, [r3, #4]
  }
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fbe6 	bl	8007de0 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8007614:	bf00      	nop
}
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3308      	adds	r3, #8
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fbe6 	bl	8007e00 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8007634:	4603      	mov	r3, r0
  }
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	f7fd fd26 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fe f91f 	bl	80058ae <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007670:	4603      	mov	r3, r0
  }
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8007684:	6838      	ldr	r0, [r7, #0]
 8007686:	f000 fbf6 	bl	8007e76 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800768a:	4603      	mov	r3, r0
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fdea 	bl	8005266 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8007692:	4602      	mov	r2, r0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	ca07      	ldmia	r2, {r0, r1, r2}
 8007698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 80076a8:	f04f 0000 	mov.w	r0, #0
 80076ac:	4903      	ldr	r1, [pc, #12]	@ (80076bc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 80076ae:	f000 fc0d 	bl	8007ecc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 80076b2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80076b6:	eeb0 0b47 	vmov.f64	d0, d7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	7ff00000 	.word	0x7ff00000

080076c0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80076ca:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dd04      	ble.n	80076dc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 80076d2:	f000 fb51 	bl	8007d78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	e003      	b.n	80076e4 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 80076dc:	f000 fb70 	bl	8007dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80076e0:	4603      	mov	r3, r0
 80076e2:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc02      	bgt.n	80076f0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	425b      	negs	r3, r3
 80076ee:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80076f0:	2300      	movs	r3, #0
 80076f2:	75fb      	strb	r3, [r7, #23]
 80076f4:	e019      	b.n	800772a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8007700:	7dfa      	ldrb	r2, [r7, #23]
 8007702:	f107 0310 	add.w	r3, r7, #16
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fb45 	bl	8007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 800770e:	eeb0 6b40 	vmov.f64	d6, d0
 8007712:	ed97 7b02 	vldr	d7, [r7, #8]
 8007716:	ee27 7b06 	vmul.f64	d7, d7, d6
 800771a:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	105b      	asrs	r3, r3, #1
 8007722:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	3301      	adds	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e2      	bne.n	80076f6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8007730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007734:	ec43 2b17 	vmov	d7, r2, r3
}
 8007738:	eeb0 0b47 	vmov.f64	d0, d7
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	ed87 0a01 	vstr	s0, [r7, #4]
 800774c:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	dd04      	ble.n	800775e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8007754:	f000 fbca 	bl	8007eec <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8007758:	4603      	mov	r3, r0
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	e003      	b.n	8007766 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800775e:	f000 fbd5 	bl	8007f0c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8007762:	4603      	mov	r3, r0
 8007764:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dc02      	bgt.n	8007772 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	425b      	negs	r3, r3
 8007770:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	e019      	b.n	80077ac <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8007782:	7bfa      	ldrb	r2, [r7, #15]
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fbce 	bl	8007f2c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8007790:	eeb0 7a40 	vmov.f32	s14, s0
 8007794:	edd7 7a01 	vldr	s15, [r7, #4]
 8007798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800779c:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	105b      	asrs	r3, r3, #1
 80077a4:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	3301      	adds	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e2      	bne.n	8007778 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	ee07 3a90 	vmov	s15, r3
}
 80077b8:	eeb0 0a67 	vmov.f32	s0, s15
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 80077d0:	68fc      	ldr	r4, [r7, #12]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f020 ff07 	bl	80285e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80077d8:	4603      	mov	r3, r0
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4619      	mov	r1, r3
 80077de:	4620      	mov	r0, r4
 80077e0:	f021 f9b0 	bl	8028b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d102      	bne.n	80077f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80077ea:	480a      	ldr	r0, [pc, #40]	@ (8007814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80077ec:	f020 fed5 	bl	802859a <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80077f0:	68b8      	ldr	r0, [r7, #8]
 80077f2:	f7fd fb97 	bl	8004f24 <_ZNSt11char_traitsIcE6lengthEPKc>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4413      	add	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80077fe:	462b      	mov	r3, r5
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f922 	bl	8007a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bdb0      	pop	{r4, r5, r7, pc}
 8007814:	0802a44c 	.word	0x0802a44c

08007818 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	@ 0x28
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007824:	f107 0314 	add.w	r3, r7, #20
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fb92 	bl	8007f54 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	cb0c      	ldmia	r3, {r2, r3}
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fb9c 	bl	8007f7a <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f000 f876 	bl	800794a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 800785e:	bf00      	nop
  }
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fb9b 	bl	8007fb2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 800787c:	bf00      	nop
  }
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007886:	b580      	push	{r7, lr}
 8007888:	b08c      	sub	sp, #48	@ 0x30
 800788a:	af02      	add	r7, sp, #8
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800789c:	e883 0003 	stmia.w	r3, {r0, r1}
 80078a0:	f107 031c 	add.w	r3, r7, #28
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fba7 	bl	8007ffa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80078ac:	466a      	mov	r2, sp
 80078ae:	f107 0320 	add.w	r3, r7, #32
 80078b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	f107 0214 	add.w	r2, r7, #20
 80078c0:	ca06      	ldmia	r2, {r1, r2}
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f973 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	3728      	adds	r7, #40	@ 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fba1 	bl	8008020 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 80078de:	4603      	mov	r3, r0
  }
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08c      	sub	sp, #48	@ 0x30
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8007902:	f107 031c 	add.w	r3, r7, #28
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fbab 	bl	8008064 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800790e:	466a      	mov	r2, sp
 8007910:	f107 0320 	add.w	r3, r7, #32
 8007914:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007918:	e882 0003 	stmia.w	r2, {r0, r1}
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f107 0214 	add.w	r2, r7, #20
 8007922:	ca06      	ldmia	r2, {r1, r2}
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f942 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	3728      	adds	r7, #40	@ 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
    return as<T>();
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fba5 	bl	800808a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8007940:	4603      	mov	r3, r0
  }
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800794a:	b590      	push	{r4, r7, lr}
 800794c:	b087      	sub	sp, #28
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800795c:	6938      	ldr	r0, [r7, #16]
 800795e:	f000 ff69 	bl	8008834 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8007962:	4604      	mov	r4, r0
 8007964:	6938      	ldr	r0, [r7, #16]
 8007966:	f000 ff75 	bl	8008854 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 800796a:	4602      	mov	r2, r0
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	4621      	mov	r1, r4
 8007972:	4618      	mov	r0, r3
 8007974:	f7fd ff88 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8007978:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f107 0308 	add.w	r3, r7, #8
 8007980:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007984:	f7fe fc6e 	bl	8006264 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8007988:	bf00      	nop
}
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}

08007992 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4613      	mov	r3, r2
 800799e:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f021 f8eb 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 80079a8:	79fb      	ldrb	r3, [r7, #7]
 80079aa:	461a      	mov	r2, r3
 80079ac:	2101      	movs	r1, #1
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f020 fff4 	bl	802899c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 80079b4:	bf00      	nop
    }
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fb80 	bl	80080ce <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 80079ce:	4602      	mov	r2, r0
 80079d0:	463b      	mov	r3, r7
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f000 fb85 	bl	80080e4 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 80079da:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	781a      	ldrb	r2, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f020 fe02 	bl	8028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b088      	sub	sp, #32
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	68b8      	ldr	r0, [r7, #8]
 8007a60:	f000 fb61 	bl	8008126 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007a64:	4603      	mov	r3, r0
 8007a66:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	d911      	bls.n	8007a92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8007a6e:	f107 0318 	add.w	r3, r7, #24
 8007a72:	2200      	movs	r2, #0
 8007a74:	4619      	mov	r1, r3
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f020 fdc4 	bl	8028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f020 fdac 	bl	80285de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f020 fdad 	bl	80285ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8007a90:	e005      	b.n	8007a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8007a96:	69f8      	ldr	r0, [r7, #28]
 8007a98:	f020 fda5 	bl	80285e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8007a9c:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8007a9e:	f107 0314 	add.w	r3, r7, #20
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff ffb1 	bl	8007a0c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f020 fd99 	bl	80285e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f020 fe26 	bl	8028708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f020 fd92 	bl	80285ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8007aca:	f107 0314 	add.w	r3, r7, #20
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ffab 	bl	8007a2a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
    if (slots_)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d008      	beq.n	8007afe <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6852      	ldr	r2, [r2, #4]
 8007af8:	4611      	mov	r1, r2
 8007afa:	6838      	ldr	r0, [r7, #0]
 8007afc:	4798      	blx	r3
    slots_ = nullptr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	805a      	strh	r2, [r3, #2]
  }
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	00db      	lsls	r3, r3, #3
  }
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8007b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	681c      	ldr	r4, [r3, #0]
 8007b44:	683d      	ldr	r5, [r7, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685e      	ldr	r6, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	885b      	ldrh	r3, [r3, #2]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff ffe2 	bl	8007b18 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	4631      	mov	r1, r6
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47a0      	blx	r4
 8007b5e:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d006      	beq.n	8007b74 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	885a      	ldrh	r2, [r3, #2]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	801a      	strh	r2, [r3, #0]
  }
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b7c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	4638      	mov	r0, r7
 8007b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e008      	b.n	8007ba6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b9e:	f000 fad6 	bl	800814e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	bf00      	nop
  }
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8007bae:	b082      	sub	sp, #8
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	1d38      	adds	r0, r7, #4
 8007bba:	e880 0006 	stmia.w	r0, {r1, r2}
 8007bbe:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	1d3a      	adds	r2, r7, #4
 8007bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bca:	e883 0003 	stmia.w	r3, {r0, r1}
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	f107 021c 	add.w	r2, r7, #28
 8007bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007bd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	b002      	add	sp, #8
 8007bea:	4770      	bx	lr

08007bec <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bfa:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c00:	4619      	mov	r1, r3
 8007c02:	6838      	ldr	r0, [r7, #0]
 8007c04:	f7ff fcb0 	bl	8007568 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007c08:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	881a      	ldrh	r2, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8007c12:	89fb      	ldrh	r3, [r7, #14]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff fc75 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8007c26:	b5b0      	push	{r4, r5, r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c34:	3b01      	subs	r3, #1
 8007c36:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	6a1a      	ldr	r2, [r3, #32]
 8007c3c:	8afb      	ldrh	r3, [r7, #22]
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	441a      	add	r2, r3
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 faad 	bl	80081a8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fc22 	bl	800749c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f083 0301 	eor.w	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f857 	bl	8007d18 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007c6a:	e015      	b.n	8007c98 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8007c6c:	f107 030c 	add.w	r3, r7, #12
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f863 	bl	8007d3c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8007c76:	4605      	mov	r5, r0
 8007c78:	8afb      	ldrh	r3, [r7, #22]
 8007c7a:	01db      	lsls	r3, r3, #7
 8007c7c:	b29c      	uxth	r4, r3
 8007c7e:	f107 030c 	add.w	r3, r7, #12
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fc27 	bl	80074d6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	4423      	add	r3, r4
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4629      	mov	r1, r5
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fc38 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ca0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d10b      	bne.n	8007cce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 faa1 	bl	8008200 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f083 0301 	eor.w	r3, r3, #1
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e01b      	b.n	8007d10 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1a      	ldr	r2, [r3, #32]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	b288      	uxth	r0, r1
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	8488      	strh	r0, [r1, #36]	@ 0x24
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	4413      	add	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8007cee:	2380      	movs	r3, #128	@ 0x80
 8007cf0:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfa:	d102      	bne.n	8007d02 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8007cfc:	89fb      	ldrh	r3, [r7, #14]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	4619      	mov	r1, r3
 8007d08:	68b8      	ldr	r0, [r7, #8]
 8007d0a:	f000 fabe 	bl	800828a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
  }
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d2c:	809a      	strh	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
  }
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	887b      	ldrh	r3, [r7, #2]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
  }
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007d7e:	1d3b      	adds	r3, r7, #4
 8007d80:	4904      	ldr	r1, [pc, #16]	@ (8007d94 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 faa7 	bl	80082d6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007d88:	687b      	ldr	r3, [r7, #4]
  }
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	0802b200 	.word	0x0802b200

08007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	4413      	add	r3, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 faa1 	bl	80082f4 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8007db2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007db6:	eeb0 0b47 	vmov.f64	d0, d7
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007dc6:	1d3b      	adds	r3, r7, #4
 8007dc8:	4904      	ldr	r1, [pc, #16]	@ (8007ddc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fa83 	bl	80082d6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007dd0:	687b      	ldr	r3, [r7, #4]
  }
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	0802b248 	.word	0x0802b248

08007de0 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8007dec:	2300      	movs	r3, #0
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7fd f956 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b089      	sub	sp, #36	@ 0x24
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	e01e      	b.n	8007e50 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f103 0108 	add.w	r1, r3, #8
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	88db      	ldrh	r3, [r3, #6]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f107 0308 	add.w	r3, r7, #8
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff fbea 	bl	80075fc <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	466c      	mov	r4, sp
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e34:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e3c:	f000 fa6a 	bl	8008314 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	e006      	b.n	8007e58 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1dd      	bne.n	8007e12 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8007e56:	2300      	movs	r3, #0
  }
 8007e58:	4618      	mov	r0, r3
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd90      	pop	{r4, r7, pc}

08007e60 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007e68:	687b      	ldr	r3, [r7, #4]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007e7e:	687b      	ldr	r3, [r7, #4]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa7f 	bl	8008398 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fa86 	bl	80083ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007ea2:	4603      	mov	r3, r0
  }
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fa6f 	bl	8008398 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fa82 	bl	80083c6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007ec2:	4603      	mov	r3, r0
  }
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8007ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eda:	f000 fa80 	bl	80083de <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 8007ede:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007ef2:	1d3b      	adds	r3, r7, #4
 8007ef4:	4904      	ldr	r1, [pc, #16]	@ (8007f08 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fa85 	bl	8008406 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8007efc:	687b      	ldr	r3, [r7, #4]
  }
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	0802b290 	.word	0x0802b290

08007f0c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	4904      	ldr	r1, [pc, #16]	@ (8007f28 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fa75 	bl	8008406 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8007f1c:	687b      	ldr	r3, [r7, #4]
  }
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	0802b2a8 	.word	0x0802b2a8

08007f2c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fa6f 	bl	8008424 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8007f46:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8007f5e:	6838      	ldr	r0, [r7, #0]
 8007f60:	f000 fa6f 	bl	8008442 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fa74 	bl	8008458 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8007f70:	bf00      	nop
}
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	f107 0110 	add.w	r1, r7, #16
 8007f8a:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	f107 0210 	add.w	r2, r7, #16
 8007f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	b002      	add	sp, #8
 8007fb0:	4770      	bx	lr

08007fb2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8007fb2:	b590      	push	{r4, r7, lr}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8007fc4:	6938      	ldr	r0, [r7, #16]
 8007fc6:	f7ff ff71 	bl	8007eac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	6938      	ldr	r0, [r7, #16]
 8007fce:	f7ff ff5d 	bl	8007e8c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fd fc54 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8007fe0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f107 0308 	add.w	r3, r7, #8
 8007fe8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007fec:	f7fe f95d 	bl	80062aa <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8007ff0:	bf00      	nop
}
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd90      	pop	{r4, r7, pc}

08007ffa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008004:	6838      	ldr	r0, [r7, #0]
 8008006:	f000 fa36 	bl	8008476 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800800a:	4602      	mov	r2, r0
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fa3b 	bl	800848c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8008016:	bf00      	nop
}
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008030:	6938      	ldr	r0, [r7, #16]
 8008032:	f000 fcce 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8008036:	4604      	mov	r4, r0
 8008038:	6938      	ldr	r0, [r7, #16]
 800803a:	f000 fb58 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800803e:	4602      	mov	r2, r0
 8008040:	f107 0308 	add.w	r3, r7, #8
 8008044:	4621      	mov	r1, r4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fd fbf3 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800804c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800804e:	f107 0308 	add.w	r3, r7, #8
 8008052:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008056:	f7fe f8e5 	bl	8006224 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800805a:	4603      	mov	r3, r0
}
 800805c:	4618      	mov	r0, r3
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd90      	pop	{r4, r7, pc}

08008064 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800806e:	6838      	ldr	r0, [r7, #0]
 8008070:	f000 fa1b 	bl	80084aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008074:	4602      	mov	r2, r0
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fa20 	bl	80084c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8008080:	bf00      	nop
}
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800808a:	b590      	push	{r4, r7, lr}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f000 fc99 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80080a0:	4604      	mov	r4, r0
 80080a2:	6938      	ldr	r0, [r7, #16]
 80080a4:	f000 fb23 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80080a8:	4602      	mov	r2, r0
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	4621      	mov	r1, r4
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fd fbbe 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80080b6:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80080b8:	f107 0308 	add.w	r3, r7, #8
 80080bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080c0:	f000 fa0d 	bl	80084de <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 80080c4:	4603      	mov	r3, r0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd90      	pop	{r4, r7, pc}

080080ce <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80080d6:	687b      	ldr	r3, [r7, #4]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 80080ee:	6838      	ldr	r0, [r7, #0]
 80080f0:	f7ff feb6 	bl	8007e60 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fa0f 	bl	800851a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 80080fc:	4604      	mov	r4, r0
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe f9a0 	bl	8006448 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8008108:	7a38      	ldrb	r0, [r7, #8]
 800810a:	f7fe f9df 	bl	80064cc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800810e:	4603      	mov	r3, r0
 8008110:	81bb      	strh	r3, [r7, #12]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4621      	mov	r1, r4
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa20 	bl	800855c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 800811c:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bd90      	pop	{r4, r7, pc}

08008126 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008126:	b5b0      	push	{r4, r5, r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008130:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fa4a 	bl	80085ce <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800813a:	462a      	mov	r2, r5
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fa4f 	bl	80085e2 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008144:	4603      	mov	r3, r0
    }
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bdb0      	pop	{r4, r5, r7, pc}

0800814e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800814e:	b580      	push	{r7, lr}
 8008150:	b088      	sub	sp, #32
 8008152:	af02      	add	r7, sp, #8
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	4638      	mov	r0, r7
 8008158:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 800815c:	f107 0010 	add.w	r0, r7, #16
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	463b      	mov	r3, r7
 800816a:	cb0c      	ldmia	r3, {r2, r3}
 800816c:	68f9      	ldr	r1, [r7, #12]
 800816e:	f000 fa47 	bl	8008600 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 8008172:	f107 0310 	add.w	r3, r7, #16
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd f892 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 8008182:	2300      	movs	r3, #0
 8008184:	e00c      	b.n	80081a0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 8008186:	f107 0310 	add.w	r3, r7, #16
 800818a:	6a39      	ldr	r1, [r7, #32]
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fd46 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd f8b3 	bl	8005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800819c:	4603      	mov	r3, r0
 800819e:	bf00      	nop
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff fdac 	bl	8007d18 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80081c0:	e01a      	b.n	80081f8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885a      	ldrh	r2, [r3, #2]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d303      	bcc.n	80081d6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fda2 	bl	8007d18 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80081d4:	e010      	b.n	80081f8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	885b      	ldrh	r3, [r3, #2]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	b291      	uxth	r1, r2
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	8051      	strh	r1, [r2, #2]
 80081e2:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	89fb      	ldrh	r3, [r7, #14]
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	89fa      	ldrh	r2, [r7, #14]
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff f988 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800820e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008212:	d101      	bne.n	8008218 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8008214:	2300      	movs	r3, #0
 8008216:	e034      	b.n	8008282 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a1a      	ldr	r2, [r3, #32]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d114      	bne.n	8008254 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	897a      	ldrh	r2, [r7, #10]
 8008232:	00d2      	lsls	r2, r2, #3
 8008234:	4611      	mov	r1, r2
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	4798      	blx	r3
 800823a:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8008242:	2300      	movs	r3, #0
 8008244:	e01d      	b.n	8008282 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f021 fa7e 	bl	802974e <memcpy>
 8008252:	e00f      	b.n	8008274 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3308      	adds	r3, #8
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6a11      	ldr	r1, [r2, #32]
 8008260:	897a      	ldrh	r2, [r7, #10]
 8008262:	00d2      	lsls	r2, r2, #3
 8008264:	6838      	ldr	r0, [r7, #0]
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8008270:	2300      	movs	r3, #0
 8008272:	e006      	b.n	8008282 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	897a      	ldrh	r2, [r7, #10]
 800827e:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8008280:	2301      	movs	r3, #1
  }
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 800828a:	b5b0      	push	{r4, r5, r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	460b      	mov	r3, r1
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681c      	ldr	r4, [r3, #0]
 800829e:	687d      	ldr	r5, [r7, #4]
 80082a0:	897b      	ldrh	r3, [r7, #10]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fc38 	bl	8007b18 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80082a8:	4603      	mov	r3, r0
 80082aa:	4619      	mov	r1, r3
 80082ac:	4628      	mov	r0, r5
 80082ae:	47a0      	blx	r4
 80082b0:	4602      	mov	r2, r0
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80082be:	897a      	ldrh	r2, [r7, #10]
 80082c0:	e000      	b.n	80082c4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80082c2:	2200      	movs	r2, #0
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	805a      	strh	r2, [r3, #2]
  }
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bdb0      	pop	{r4, r5, r7, pc}

080082d6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  return *p;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	ec43 2b17 	vmov	d7, r2, r3
}
 8008306:	eeb0 0b47 	vmov.f64	d0, d7
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8008314:	b082      	sub	sp, #8
 8008316:	b590      	push	{r4, r7, lr}
 8008318:	b089      	sub	sp, #36	@ 0x24
 800831a:	af00      	add	r7, sp, #0
 800831c:	1d3c      	adds	r4, r7, #4
 800831e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8008324:	1d3b      	adds	r3, r7, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fc fee4 	bl	80050f4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800832c:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800832e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008332:	4618      	mov	r0, r3
 8008334:	f7fc fede 	bl	80050f4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8008338:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	429a      	cmp	r2, r3
 8008340:	d001      	beq.n	8008346 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 8008342:	2300      	movs	r3, #0
 8008344:	e021      	b.n	800838a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
 800834a:	e019      	b.n	8008380 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 800834c:	1d3b      	adds	r3, r7, #4
 800834e:	69f9      	ldr	r1, [r7, #28]
 8008350:	4618      	mov	r0, r3
 8008352:	f7f8 fcd9 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8008356:	4603      	mov	r3, r0
 8008358:	461c      	mov	r4, r3
 800835a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800835e:	69f9      	ldr	r1, [r7, #28]
 8008360:	4618      	mov	r0, r3
 8008362:	f7f8 fcd1 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8008366:	4603      	mov	r3, r0
 8008368:	429c      	cmp	r4, r3
 800836a:	bf14      	ite	ne
 800836c:	2301      	movne	r3, #1
 800836e:	2300      	moveq	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 8008376:	2300      	movs	r3, #0
 8008378:	e007      	b.n	800838a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	3301      	adds	r3, #1
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	d3e1      	bcc.n	800834c <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8008388:	2301      	movs	r3, #1
}
 800838a:	4618      	mov	r0, r3
 800838c:	3724      	adds	r7, #36	@ 0x24
 800838e:	46bd      	mov	sp, r7
 8008390:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008394:	b002      	add	sp, #8
 8008396:	4770      	bx	lr

08008398 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80083a0:	687b      	ldr	r3, [r7, #4]
  }
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7fd fa79 	bl	80058ae <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80083bc:	4603      	mov	r3, r0
  }
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fd fa79 	bl	80058c6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80083d4:	4603      	mov	r3, r0
  }
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 80083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80083f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80083f8:	eeb0 0b47 	vmov.f64	d0, d7
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  return *p;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	ee07 3a90 	vmov	s15, r3
}
 8008434:	eeb0 0a67 	vmov.f32	s0, s15
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800844a:	687b      	ldr	r3, [r7, #4]
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008462:	2301      	movs	r3, #1
 8008464:	2207      	movs	r2, #7
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7fc fe1b 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800847e:	687b      	ldr	r3, [r7, #4]
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008496:	2301      	movs	r3, #1
 8008498:	2206      	movs	r2, #6
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fc fe01 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80084b2:	687b      	ldr	r3, [r7, #4]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80084ca:	2301      	movs	r3, #1
 80084cc:	2209      	movs	r2, #9
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7fc fde7 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	463b      	mov	r3, r7
 80084e6:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80084ea:	463b      	mov	r3, r7
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe ff1f 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80084f2:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80084f4:	463b      	mov	r3, r7
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe ff26 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80084fc:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f902 	bl	8008710 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 800850c:	4603      	mov	r3, r0
 800850e:	e000      	b.n	8008512 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8008510:	2300      	movs	r3, #0
  }
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff fc9c 	bl	8007e60 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008528:	4603      	mov	r3, r0
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f99e 	bl	8008874 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8008538:	68fb      	ldr	r3, [r7, #12]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	f7fd fd9e 	bl	800608e <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b0a1      	sub	sp, #132	@ 0x84
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f999 	bl	80088a0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 800856e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8008570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8008576:	f107 0318 	add.w	r3, r7, #24
 800857a:	2104      	movs	r1, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd ff08 	bl	8006392 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008582:	7e3b      	ldrb	r3, [r7, #24]
 8008584:	e01f      	b.n	80085c6 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f996 	bl	80088b8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 800858c:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7fd fac5 	bl	8005b1e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8008594:	f107 031c 	add.w	r3, r7, #28
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f997 	bl	80088d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 80085a2:	f107 001c 	add.w	r0, r7, #28
 80085a6:	797b      	ldrb	r3, [r7, #5]
 80085a8:	4622      	mov	r2, r4
 80085aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085ac:	f000 f9ac 	bl	8008908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80085b0:	4603      	mov	r3, r0
 80085b2:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 80085b4:	f107 031c 	add.w	r3, r7, #28
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff ffc2 	bl	8008542 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7fd ff97 	bl	80064f2 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 80085c4:	7d3b      	ldrb	r3, [r7, #20]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3784      	adds	r7, #132	@ 0x84
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd90      	pop	{r4, r7, pc}

080085ce <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	1ad3      	subs	r3, r2, r3
    }
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8008600:	b082      	sub	sp, #8
 8008602:	b580      	push	{r7, lr}
 8008604:	b08e      	sub	sp, #56	@ 0x38
 8008606:	af02      	add	r7, sp, #8
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
 800860c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8008610:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8008614:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008618:	f7fc fd5b 	bl	80050d2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fc fe2a 	bl	800527c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8008628:	e05a      	b.n	80086e0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	f107 030c 	add.w	r3, r7, #12
 8008636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008638:	4618      	mov	r0, r3
 800863a:	f7fd fb13 	bl	8005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800863e:	e041      	b.n	80086c4 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8008640:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008644:	2b00      	cmp	r3, #0
 8008646:	d025      	beq.n	8008694 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	4618      	mov	r0, r3
 800864e:	f7fc fe4c 	bl	80052ea <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8008652:	4602      	mov	r2, r0
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fc ff12 	bl	8005484 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8008660:	f107 0320 	add.w	r3, r7, #32
 8008664:	f107 0214 	add.w	r2, r7, #20
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f985 	bl	800897a <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8008670:	466a      	mov	r2, sp
 8008672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800867a:	e882 0003 	stmia.w	r2, {r0, r1}
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008684:	ca07      	ldmia	r2, {r0, r1, r2}
 8008686:	f7ff fe45 	bl	8008314 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8008694:	2300      	movs	r3, #0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	461a      	mov	r2, r3
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086a6:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 80086aa:	e019      	b.n	80086e0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 80086ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086b0:	f083 0301 	eor.w	r3, r3, #1
 80086b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd faad 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 80086c4:	f107 030c 	add.w	r3, r7, #12
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fc fde9 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f083 0301 	eor.w	r3, r3, #1
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1b2      	bne.n	8008640 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fc fdce 	bl	800527c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	3730      	adds	r7, #48	@ 0x30
 80086e4:	46bd      	mov	sp, r7
 80086e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086ea:	b002      	add	sp, #8
 80086ec:	4770      	bx	lr

080086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f954 	bl	80089a4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f95b 	bl	80089ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008704:	4603      	mov	r3, r0
  }
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7fd fe1d 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8008722:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	791b      	ldrb	r3, [r3, #4]
 8008728:	3b04      	subs	r3, #4
 800872a:	2b1a      	cmp	r3, #26
 800872c:	d87c      	bhi.n	8008828 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 800872e:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	080087e7 	.word	0x080087e7
 8008738:	080087f5 	.word	0x080087f5
 800873c:	080087a1 	.word	0x080087a1
 8008740:	08008829 	.word	0x08008829
 8008744:	08008829 	.word	0x08008829
 8008748:	08008829 	.word	0x08008829
 800874c:	080087a7 	.word	0x080087a7
 8008750:	08008829 	.word	0x08008829
 8008754:	080087b5 	.word	0x080087b5
 8008758:	08008829 	.word	0x08008829
 800875c:	08008805 	.word	0x08008805
 8008760:	08008829 	.word	0x08008829
 8008764:	08008829 	.word	0x08008829
 8008768:	08008829 	.word	0x08008829
 800876c:	08008829 	.word	0x08008829
 8008770:	08008829 	.word	0x08008829
 8008774:	08008829 	.word	0x08008829
 8008778:	08008829 	.word	0x08008829
 800877c:	08008829 	.word	0x08008829
 8008780:	08008829 	.word	0x08008829
 8008784:	08008829 	.word	0x08008829
 8008788:	08008829 	.word	0x08008829
 800878c:	080087c3 	.word	0x080087c3
 8008790:	08008829 	.word	0x08008829
 8008794:	080087d5 	.word	0x080087d5
 8008798:	08008829 	.word	0x08008829
 800879c:	08008817 	.word	0x08008817
        return content_.asBoolean;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	e041      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f921 	bl	80089f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 80087b0:	4603      	mov	r3, r0
 80087b2:	e03a      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f92b 	bl	8008a14 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 80087be:	4603      	mov	r3, r0
 80087c0:	e033      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4610      	mov	r0, r2
 80087ca:	4619      	mov	r1, r3
 80087cc:	f000 f933 	bl	8008a36 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 80087d0:	4603      	mov	r3, r0
 80087d2:	e02a      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	4610      	mov	r0, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	f000 f93d 	bl	8008a5c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80087e2:	4603      	mov	r3, r0
 80087e4:	e021      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f949 	bl	8008a82 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80087f0:	4603      	mov	r3, r0
 80087f2:	e01a      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f941 	bl	8008a82 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8008800:	4603      	mov	r3, r0
 8008802:	e012      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	edd3 7a00 	vldr	s15, [r3]
 800880a:	eeb0 0a67 	vmov.f32	s0, s15
 800880e:	f000 f94c 	bl	8008aaa <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8008812:	4603      	mov	r3, r0
 8008814:	e009      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	ed93 7b00 	vldr	d7, [r3]
 800881c:	eeb0 0b47 	vmov.f64	d0, d7
 8008820:	f000 f95b 	bl	8008ada <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8008824:	4603      	mov	r3, r0
 8008826:	e000      	b.n	800882a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8008828:	2300      	movs	r3, #0
  }
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop

08008834 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f964 	bl	8008b0a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008842:	4603      	mov	r3, r0
 8008844:	4618      	mov	r0, r3
 8008846:	f000 f96b 	bl	8008b20 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800884a:	4603      	mov	r3, r0
  }
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f954 	bl	8008b0a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008862:	4603      	mov	r3, r0
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f967 	bl	8008b38 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800886a:	4603      	mov	r3, r0
  }
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	e000      	b.n	800888a <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8008888:	4b04      	ldr	r3, [pc, #16]	@ (800889c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	0802a20c 	.word	0x0802a20c

080088a0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fd f960 	bl	8005b6e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 80088ae:	4603      	mov	r3, r0
  }
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7fd f93d 	bl	8005b40 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 80088c6:	4603      	mov	r3, r0
  }
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd fbbf 	bl	8006064 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3310      	adds	r3, #16
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f92c 	bl	8008b50 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	619a      	str	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8008908:	b590      	push	{r4, r7, lr}
 800890a:	b089      	sub	sp, #36	@ 0x24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	713a      	strb	r2, [r7, #4]
 8008914:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8008916:	783b      	ldrb	r3, [r7, #0]
 8008918:	4622      	mov	r2, r4
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f929 	bl	8008b74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10f      	bne.n	800894c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3310      	adds	r3, #16
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fa0d 	bl	8008d50 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 800893c:	68b8      	ldr	r0, [r7, #8]
 800893e:	f7fc fde8 	bl	8005512 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 800894c:	2300      	movs	r3, #0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8008952:	f107 0318 	add.w	r3, r7, #24
 8008956:	2103      	movs	r1, #3
 8008958:	4618      	mov	r0, r3
 800895a:	f7fd fd1a 	bl	8006392 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 800895e:	7e3b      	ldrb	r3, [r7, #24]
 8008960:	e007      	b.n	8008972 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8008962:	7dfa      	ldrb	r2, [r7, #23]
 8008964:	f107 031c 	add.w	r3, r7, #28
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd fd11 	bl	8006392 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008970:	7f3b      	ldrb	r3, [r7, #28]
  }
 8008972:	4618      	mov	r0, r3
 8008974:	3724      	adds	r7, #36	@ 0x24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd90      	pop	{r4, r7, pc}

0800897a <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008984:	6838      	ldr	r0, [r7, #0]
 8008986:	f000 f9ef 	bl	8008d68 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 800898a:	4603      	mov	r3, r0
 800898c:	4618      	mov	r0, r3
 800898e:	f7fc fc6a 	bl	8005266 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8008992:	4602      	mov	r2, r0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	ca07      	ldmia	r2, {r0, r1, r2}
 8008998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80089ac:	687b      	ldr	r3, [r7, #4]
  }
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f9db 	bl	8008d7e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 80089c8:	4603      	mov	r3, r0
  }
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff ffe2 	bl	80089a4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f9d9 	bl	8008d9a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 80089e8:	4603      	mov	r3, r0
  }
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9d9 	bl	8008db2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	e000      	b.n	8008a0c <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f9d9 	bl	8008dd4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	e000      	b.n	8008a2e <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a44:	f000 f9dc 	bl	8008e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	e000      	b.n	8008a54 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a6a:	f000 f9e1 	bl	8008e30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	e000      	b.n	8008a7a <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fd fec7 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8008a96:	f107 0308 	add.w	r3, r7, #8
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f9e6 	bl	8008e6c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8008aa0:	4603      	mov	r3, r0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008ab4:	ed97 0a01 	vldr	s0, [r7, #4]
 8008ab8:	f000 fa1e 	bl	8008ef8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d006      	beq.n	8008ad0 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 8008ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8008ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aca:	ee17 3a90 	vmov	r3, s15
 8008ace:	e000      	b.n	8008ad2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008ae4:	ed97 0b00 	vldr	d0, [r7]
 8008ae8:	f000 fa34 	bl	8008f54 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8008af2:	ed97 7b00 	vldr	d7, [r7]
 8008af6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008afa:	ee17 3a90 	vmov	r3, s15
 8008afe:	e000      	b.n	8008b02 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008b12:	687b      	ldr	r3, [r7, #4]
  }
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa39 	bl	8008fa0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 8008b2e:	4603      	mov	r3, r0
  }
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa49 	bl	8008fd8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8008b46:	4603      	mov	r3, r0
  }
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8008b74:	b5b0      	push	{r4, r5, r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	713a      	strb	r2, [r7, #4]
 8008b80:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fa36 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]
    if (err)
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	e0d2      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fa62 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b7b      	cmp	r3, #123	@ 0x7b
 8008ba0:	f300 80ba 	bgt.w	8008d18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008ba4:	2b5b      	cmp	r3, #91	@ 0x5b
 8008ba6:	da04      	bge.n	8008bb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8008ba8:	2b22      	cmp	r3, #34	@ 0x22
 8008baa:	d07b      	beq.n	8008ca4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008bac:	2b27      	cmp	r3, #39	@ 0x27
 8008bae:	d079      	beq.n	8008ca4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008bb0:	e0b2      	b.n	8008d18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008bb2:	3b5b      	subs	r3, #91	@ 0x5b
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	f200 80af 	bhi.w	8008d18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008bba:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008c45 	.word	0x08008c45
 8008bc4:	08008d19 	.word	0x08008d19
 8008bc8:	08008d19 	.word	0x08008d19
 8008bcc:	08008d19 	.word	0x08008d19
 8008bd0:	08008d19 	.word	0x08008d19
 8008bd4:	08008d19 	.word	0x08008d19
 8008bd8:	08008d19 	.word	0x08008d19
 8008bdc:	08008d19 	.word	0x08008d19
 8008be0:	08008d19 	.word	0x08008d19
 8008be4:	08008d19 	.word	0x08008d19
 8008be8:	08008d19 	.word	0x08008d19
 8008bec:	08008ceb 	.word	0x08008ceb
 8008bf0:	08008d19 	.word	0x08008d19
 8008bf4:	08008d19 	.word	0x08008d19
 8008bf8:	08008d19 	.word	0x08008d19
 8008bfc:	08008d19 	.word	0x08008d19
 8008c00:	08008d19 	.word	0x08008d19
 8008c04:	08008d19 	.word	0x08008d19
 8008c08:	08008d19 	.word	0x08008d19
 8008c0c:	08008d0d 	.word	0x08008d0d
 8008c10:	08008d19 	.word	0x08008d19
 8008c14:	08008d19 	.word	0x08008d19
 8008c18:	08008d19 	.word	0x08008d19
 8008c1c:	08008d19 	.word	0x08008d19
 8008c20:	08008d19 	.word	0x08008d19
 8008c24:	08008cc9 	.word	0x08008cc9
 8008c28:	08008d19 	.word	0x08008d19
 8008c2c:	08008d19 	.word	0x08008d19
 8008c30:	08008d19 	.word	0x08008d19
 8008c34:	08008d19 	.word	0x08008d19
 8008c38:	08008d19 	.word	0x08008d19
 8008c3c:	08008d19 	.word	0x08008d19
 8008c40:	08008c75 	.word	0x08008c75
        if (filter.allowArray())
 8008c44:	1d3b      	adds	r3, r7, #4
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fd fbdd 	bl	8006406 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8008c52:	68b8      	ldr	r0, [r7, #8]
 8008c54:	f7fc fcdc 	bl	8005610 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008c58:	4601      	mov	r1, r0
 8008c5a:	783b      	ldrb	r3, [r7, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fa15 	bl	800908e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8008c64:	4603      	mov	r3, r0
 8008c66:	e069      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8008c68:	7839      	ldrb	r1, [r7, #0]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fa95 	bl	800919a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008c70:	4603      	mov	r3, r0
 8008c72:	e063      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8008c74:	1d3b      	adds	r3, r7, #4
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd fbd0 	bl	800641c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8008c82:	68b8      	ldr	r0, [r7, #8]
 8008c84:	f7fc fcec 	bl	8005660 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8008c88:	4601      	mov	r1, r0
 8008c8a:	783b      	ldrb	r3, [r7, #0]
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fac6 	bl	8009220 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8008c94:	4603      	mov	r3, r0
 8008c96:	e051      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8008c98:	7839      	ldrb	r1, [r7, #0]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fbac 	bl	80093f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	e04b      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008ca4:	1d3b      	adds	r3, r7, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fd fbc3 	bl	8006432 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fc1f 	bl	80094f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	e03e      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fc3b 	bl	800953a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	e039      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008cc8:	1d3b      	adds	r3, r7, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd fbb1 	bl	8006432 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	68b8      	ldr	r0, [r7, #8]
 8008cda:	f7fc fc47 	bl	800556c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8008cde:	4919      	ldr	r1, [pc, #100]	@ (8008d44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fc5f 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	e028      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fd fba0 	bl	8006432 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	68b8      	ldr	r0, [r7, #8]
 8008cfc:	f7fc fc36 	bl	800556c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8008d00:	4911      	ldr	r1, [pc, #68]	@ (8008d48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 fc4e 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	e017      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8008d0c:	490f      	ldr	r1, [pc, #60]	@ (8008d4c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fc48 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008d14:	4603      	mov	r3, r0
 8008d16:	e011      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008d18:	1d3b      	adds	r3, r7, #4
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd fb89 	bl	8006432 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fc61 	bl	80095f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	e004      	b.n	8008d3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 fd04 	bl	8009740 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	bf00      	nop
  }
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bdb0      	pop	{r4, r5, r7, pc}
 8008d44:	0802a480 	.word	0x0802a480
 8008d48:	0802a488 	.word	0x0802a488
 8008d4c:	0802a490 	.word	0x0802a490

08008d50 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
    return current_;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	791b      	ldrb	r3, [r3, #4]
  }
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008d70:	687b      	ldr	r3, [r7, #4]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fcf6 	bl	800977c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008d90:	4603      	mov	r3, r0
  }
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fd04 	bl	80097b0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8008da8:	4603      	mov	r3, r0
  }
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008dba:	f000 f8c2 	bl	8008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	bf94      	ite	ls
 8008dc6:	2301      	movls	r3, #1
 8008dc8:	2300      	movhi	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da01      	bge.n	8008de6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e008      	b.n	8008df8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8008de6:	f000 f8ac 	bl	8008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008dea:	4602      	mov	r2, r0
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	bf2c      	ite	cs
 8008df2:	2301      	movcs	r3, #1
 8008df4:	2300      	movcc	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008e00:	b5b0      	push	{r4, r5, r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008e0a:	f000 f89a 	bl	8008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2200      	movs	r2, #0
 8008e12:	461c      	mov	r4, r3
 8008e14:	4615      	mov	r5, r2
 8008e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e1a:	4294      	cmp	r4, r2
 8008e1c:	eb75 0303 	sbcs.w	r3, r5, r3
 8008e20:	bf2c      	ite	cs
 8008e22:	2301      	movcs	r3, #1
 8008e24:	2300      	movcc	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bdb0      	pop	{r4, r5, r7, pc}

08008e30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008e30:	b5b0      	push	{r4, r5, r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8008e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da01      	bge.n	8008e46 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e00e      	b.n	8008e64 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8008e46:	f000 f87c 	bl	8008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	461c      	mov	r4, r3
 8008e50:	4615      	mov	r5, r2
 8008e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e56:	4294      	cmp	r4, r2
 8008e58:	eb75 0303 	sbcs.w	r3, r5, r3
 8008e5c:	bfac      	ite	ge
 8008e5e:	2301      	movge	r3, #1
 8008e60:	2300      	movlt	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bdb0      	pop	{r4, r5, r7, pc}

08008e6c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d82e      	bhi.n	8008edc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8008e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008e95 	.word	0x08008e95
 8008e88:	08008ea7 	.word	0x08008ea7
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008ecb 	.word	0x08008ecb
        return convertNumber<T>(value_.asFloat);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9e:	f7ff fe04 	bl	8008aaa <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	e01b      	b.n	8008ede <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008eac:	4610      	mov	r0, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f7ff fdd4 	bl	8008a5c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	e012      	b.n	8008ede <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f7ff fdb8 	bl	8008a36 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	e009      	b.n	8008ede <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ed0:	eeb0 0b47 	vmov.f64	d0, d7
 8008ed4:	f7ff fe01 	bl	8008ada <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	e000      	b.n	8008ede <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8008edc:	2300      	movs	r3, #0
  }
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop

08008ee8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
    return 0;
 8008eec:	2300      	movs	r3, #0
  }
 8008eee:	4618      	mov	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8008f02:	f7ff fff1 	bl	8008ee8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8008f06:	ee07 0a90 	vmov	s15, r0
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1a:	db0d      	blt.n	8008f38 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f000 fc63 	bl	80097e8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8008f22:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8008f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	d801      	bhi.n	8008f38 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8008f42:	b480      	push	{r7}
 8008f44:	af00      	add	r7, sp, #0
    return T(-1);
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8008f5e:	f7ff ffc3 	bl	8008ee8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8008f62:	ee07 0a90 	vmov	s15, r0
 8008f66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f6a:	ed97 6b00 	vldr	d6, [r7]
 8008f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	db0e      	blt.n	8008f96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8008f78:	f7ff ffe3 	bl	8008f42 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008f7c:	ee07 0a90 	vmov	s15, r0
 8008f80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8008f84:	ed97 6b00 	vldr	d6, [r7]
 8008f88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f90:	d801      	bhi.n	8008f96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fc2b 	bl	8009808 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 8008fb2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff fc7d 	bl	80088b8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008fbe:	4602      	mov	r2, r0
    return VariantData::getMember(
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	9200      	str	r2, [sp, #0]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fc29 	bl	8009820 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8008fce:	4603      	mov	r3, r0
  }
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd90      	pop	{r4, r7, pc}

08008fd8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fc67 	bl	80088b8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008fea:	4603      	mov	r3, r0
  }
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f82f 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d013      	beq.n	8009030 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8009008:	2b00      	cmp	r3, #0
 800900a:	db1d      	blt.n	8009048 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800900c:	2b20      	cmp	r3, #32
 800900e:	dc1b      	bgt.n	8009048 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009010:	2b09      	cmp	r3, #9
 8009012:	db19      	blt.n	8009048 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009014:	3b09      	subs	r3, #9
 8009016:	4a11      	ldr	r2, [pc, #68]	@ (800905c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8009018:	fa22 f303 	lsr.w	r3, r2, r3
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf14      	ite	ne
 8009024:	2301      	movne	r3, #1
 8009026:	2300      	moveq	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d108      	bne.n	8009040 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800902e:	e00b      	b.n	8009048 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7b1b      	ldrb	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8009038:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800903a:	e00b      	b.n	8009054 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800903c:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800903e:	e009      	b.n	8009054 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fc06 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8009046:	e004      	b.n	8009052 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800904e:	2300      	movs	r3, #0
 8009050:	e000      	b.n	8009054 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 8009052:	e7d3      	b.n	8008ffc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	00800013 	.word	0x00800013

08009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3310      	adds	r3, #16
 800906c:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	795b      	ldrb	r3, [r3, #5]
 8009072:	f083 0301 	eor.w	r3, r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 ff1a 	bl	8009eb6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	791b      	ldrb	r3, [r3, #4]
  }
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800908e:	b590      	push	{r4, r7, lr}
 8009090:	b089      	sub	sp, #36	@ 0x24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	713a      	strb	r2, [r7, #4]
 800909a:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800909c:	463b      	mov	r3, r7
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd fa03 	bl	80064aa <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80090aa:	2305      	movs	r3, #5
 80090ac:	e071      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fbcf 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff ff9d 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80090ba:	4603      	mov	r3, r0
 80090bc:	77fb      	strb	r3, [r7, #31]
    if (err)
 80090be:	7ffb      	ldrb	r3, [r7, #31]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 80090c4:	7ffb      	ldrb	r3, [r7, #31]
 80090c6:	e064      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 80090c8:	215d      	movs	r1, #93	@ 0x5d
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 fbce 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e05b      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	f107 0214 	add.w	r2, r7, #20
 80090e2:	1d3b      	adds	r3, r7, #4
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fbdd 	bl	80098a6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 80090ec:	f107 0310 	add.w	r3, r7, #16
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fd f97d 	bl	80063f0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01c      	beq.n	8009136 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	4619      	mov	r1, r3
 8009102:	68b8      	ldr	r0, [r7, #8]
 8009104:	f7fc fd3f 	bl	8005b86 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8009108:	61b8      	str	r0, [r7, #24]
        if (!value)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8009110:	2304      	movs	r3, #4
 8009112:	e03e      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8009114:	463b      	mov	r3, r7
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd f9b4 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800911c:	4603      	mov	r3, r0
 800911e:	4622      	mov	r2, r4
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff fd26 	bl	8008b74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009128:	4603      	mov	r3, r0
 800912a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800912c:	7ffb      	ldrb	r3, [r7, #31]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d011      	beq.n	8009156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8009132:	7ffb      	ldrb	r3, [r7, #31]
 8009134:	e02d      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8009136:	463b      	mov	r3, r7
 8009138:	4618      	mov	r0, r3
 800913a:	f7fd f9a3 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800913e:	4603      	mov	r3, r0
 8009140:	4619      	mov	r1, r3
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fbbc 	bl	80098c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009148:	4603      	mov	r3, r0
 800914a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800914c:	7ffb      	ldrb	r3, [r7, #31]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8009152:	7ffb      	ldrb	r3, [r7, #31]
 8009154:	e01d      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f7ff ff4c 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800915c:	4603      	mov	r3, r0
 800915e:	77fb      	strb	r3, [r7, #31]
      if (err)
 8009160:	7ffb      	ldrb	r3, [r7, #31]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 8009166:	7ffb      	ldrb	r3, [r7, #31]
 8009168:	e013      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 800916a:	215d      	movs	r1, #93	@ 0x5d
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb7d 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8009178:	2300      	movs	r3, #0
 800917a:	e00a      	b.n	8009192 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 800917c:	212c      	movs	r1, #44	@ 0x2c
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fb74 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009184:	4603      	mov	r3, r0
 8009186:	f083 0301 	eor.w	r3, r3, #1
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0ad      	beq.n	80090ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8009190:	2303      	movs	r3, #3
  }
 8009192:	4618      	mov	r0, r3
 8009194:	3724      	adds	r7, #36	@ 0x24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd90      	pop	{r4, r7, pc}

0800919a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80091a4:	463b      	mov	r3, r7
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fd f97f 	bl	80064aa <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80091b2:	2305      	movs	r3, #5
 80091b4:	e030      	b.n	8009218 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb4b 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80091bc:	463b      	mov	r3, r7
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fd f960 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80091c4:	4603      	mov	r3, r0
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fb79 	bl	80098c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
      if (err)
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	e01d      	b.n	8009218 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ff09 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
      if (err)
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	e013      	b.n	8009218 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 80091f0:	215d      	movs	r1, #93	@ 0x5d
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fb3a 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80091fe:	2300      	movs	r3, #0
 8009200:	e00a      	b.n	8009218 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 8009202:	212c      	movs	r1, #44	@ 0x2c
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb31 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800920a:	4603      	mov	r3, r0
 800920c:	f083 0301 	eor.w	r3, r3, #1
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0d2      	beq.n	80091bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8009216:	2303      	movs	r3, #3
  }
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b091      	sub	sp, #68	@ 0x44
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	713a      	strb	r2, [r7, #4]
 800922c:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800922e:	463b      	mov	r3, r7
 8009230:	4618      	mov	r0, r3
 8009232:	f7fd f93a 	bl	80064aa <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800923c:	2305      	movs	r3, #5
 800923e:	e0d7      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 fb06 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f7ff fed4 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 8009252:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 800925a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800925e:	e0c7      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8009260:	217d      	movs	r1, #125	@ 0x7d
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fb02 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 800926e:	2300      	movs	r3, #0
 8009270:	e0be      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fbba 	bl	80099ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8009278:	4603      	mov	r3, r0
 800927a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800927e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 8009286:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800928a:	e0b1      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff feb1 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8009298:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80092a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092a4:	e0a4      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80092a6:	213a      	movs	r1, #58	@ 0x3a
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fadf 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f083 0301 	eor.w	r3, r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e098      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	f107 0314 	add.w	r3, r7, #20
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fc ff92 	bl	80061f0 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 80092cc:	f107 0214 	add.w	r2, r7, #20
 80092d0:	1d3b      	adds	r3, r7, #4
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fba9 	bl	8009a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 80092da:	f107 0310 	add.w	r3, r7, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd f886 	bl	80063f0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d040      	beq.n	800936c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 80092ea:	f107 0320 	add.w	r3, r7, #32
 80092ee:	f107 0214 	add.w	r2, r7, #20
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe f9c0 	bl	800767a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	f107 0320 	add.w	r3, r7, #32
 8009304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009306:	68b8      	ldr	r0, [r7, #8]
 8009308:	f7fe ff21 	bl	800814e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800930c:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	2b00      	cmp	r3, #0
 8009312:	d111      	bne.n	8009338 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4618      	mov	r0, r3
 8009318:	f7fc fee6 	bl	80060e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 800931c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	461a      	mov	r2, r3
 8009324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009326:	68b8      	ldr	r0, [r7, #8]
 8009328:	f000 fb8c 	bl	8009a44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800932c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800932e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009330:	2b00      	cmp	r3, #0
 8009332:	d107      	bne.n	8009344 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8009334:	2304      	movs	r3, #4
 8009336:	e05b      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	4619      	mov	r1, r3
 800933e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009340:	f7fc ffd6 	bl	80062f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8009344:	463b      	mov	r3, r7
 8009346:	4618      	mov	r0, r3
 8009348:	f7fd f89c 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800934c:	4603      	mov	r3, r0
 800934e:	4622      	mov	r2, r4
 8009350:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff fc0e 	bl	8008b74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800935e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009362:	2b00      	cmp	r3, #0
 8009364:	d015      	beq.n	8009392 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8009366:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800936a:	e041      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 800936c:	463b      	mov	r3, r7
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd f888 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009374:	4603      	mov	r3, r0
 8009376:	4619      	mov	r1, r3
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 faa1 	bl	80098c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8009384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800938c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009390:	e02e      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff fe2e 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800939e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80093a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093aa:	e021      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80093ac:	217d      	movs	r1, #125	@ 0x7d
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fa5c 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e018      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80093be:	212c      	movs	r1, #44	@ 0x2c
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fa53 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f083 0301 	eor.w	r3, r3, #1
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e00c      	b.n	80093f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff fe0c 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80093dc:	4603      	mov	r3, r0
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80093e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f af43 	beq.w	8009272 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 80093ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 80093f0:	4618      	mov	r0, r3
 80093f2:	373c      	adds	r7, #60	@ 0x3c
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}

080093f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8009402:	463b      	mov	r3, r7
 8009404:	4618      	mov	r0, r3
 8009406:	f7fd f850 	bl	80064aa <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8009410:	2305      	movs	r3, #5
 8009412:	e06d      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa1c 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff fdea 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	e060      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 800942e:	217d      	movs	r1, #125	@ 0x7d
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fa1b 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 800943c:	2300      	movs	r3, #0
 800943e:	e057      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fb54 	bl	8009aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
      if (err)
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	e04d      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fdcd 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800945e:	7bfb      	ldrb	r3, [r7, #15]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	e043      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8009468:	213a      	movs	r1, #58	@ 0x3a
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9fe 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009470:	4603      	mov	r3, r0
 8009472:	f083 0301 	eor.w	r3, r3, #1
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 800947c:	2303      	movs	r3, #3
 800947e:	e037      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8009480:	463b      	mov	r3, r7
 8009482:	4618      	mov	r0, r3
 8009484:	f7fc fffe 	bl	8006484 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009488:	4603      	mov	r3, r0
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa17 	bl	80098c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	e027      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fda7 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]
      if (err)
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	e01d      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 80094b4:	217d      	movs	r1, #125	@ 0x7d
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f9d8 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e014      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 80094c6:	212c      	movs	r1, #44	@ 0x2c
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f9cf 	bl	800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f083 0301 	eor.w	r3, r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 80094da:	2303      	movs	r3, #3
 80094dc:	e008      	b.n	80094f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fd88 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]
      if (err)
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0a8      	beq.n	8009440 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
  }
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	f7fc fdd7 	bl	80060b8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fb0b 	bl	8009b26 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	e009      	b.n	8009532 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	f7fc fde1 	bl	80060e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8009526:	4603      	mov	r3, r0
 8009528:	4619      	mov	r1, r3
 800952a:	6838      	ldr	r0, [r7, #0]
 800952c:	f7fc f83f 	bl	80055ae <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8009530:	2300      	movs	r3, #0
  }
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fd8c 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
    move();
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f980 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7ff fd84 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]
      move();
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f978 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009562:	7bba      	ldrb	r2, [r7, #14]
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	429a      	cmp	r2, r3
 8009568:	d016      	beq.n	8009598 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8009570:	2302      	movs	r3, #2
 8009572:	e013      	b.n	800959c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b5c      	cmp	r3, #92	@ 0x5c
 8009578:	d1eb      	bne.n	8009552 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fd70 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0e0      	beq.n	8009552 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f95e 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8009596:	e7dc      	b.n	8009552 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8009598:	bf00      	nop
    return DeserializationError::Ok;
 800959a:	2300      	movs	r3, #0
  }
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
    while (*s) {
 80095ae:	e016      	b.n	80095de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff fd55 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 80095c0:	2302      	movs	r3, #2
 80095c2:	e011      	b.n	80095e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	7bfa      	ldrb	r2, [r7, #15]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d001      	beq.n	80095d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e00a      	b.n	80095e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	603b      	str	r3, [r7, #0]
      move();
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f93a 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e4      	bne.n	80095b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 80095e6:	2300      	movs	r3, #0
  }
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	@ 0x28
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fd2e 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009604:	4603      	mov	r3, r0
 8009606:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8009608:	e00f      	b.n	800962a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f921 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8009610:	7fba      	ldrb	r2, [r7, #30]
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	1c59      	adds	r1, r3, #1
 8009616:	77f9      	strb	r1, [r7, #31]
 8009618:	4619      	mov	r1, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	440b      	add	r3, r1
 800961e:	771a      	strb	r2, [r3, #28]
      c = current();
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff fd1d 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009626:	4603      	mov	r3, r0
 8009628:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 800962a:	7fbb      	ldrb	r3, [r7, #30]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fafb 	bl	8009c28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009638:	7ffb      	ldrb	r3, [r7, #31]
 800963a:	2b3e      	cmp	r3, #62	@ 0x3e
 800963c:	d801      	bhi.n	8009642 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 800963e:	2301      	movs	r3, #1
 8009640:	e000      	b.n	8009644 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8009642:	2300      	movs	r3, #0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e0      	bne.n	800960a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8009648:	7ffb      	ldrb	r3, [r7, #31]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	2200      	movs	r2, #0
 8009650:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f103 021c 	add.w	r2, r3, #28
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f7fd f8e0 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8009664:	f107 0308 	add.w	r3, r7, #8
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd f894 	bl	8006796 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 800966e:	4603      	mov	r3, r0
 8009670:	3b01      	subs	r3, #1
 8009672:	2b03      	cmp	r3, #3
 8009674:	d85e      	bhi.n	8009734 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	080096dd 	.word	0x080096dd
 8009680:	080096b5 	.word	0x080096b5
 8009684:	0800968d 	.word	0x0800968d
 8009688:	08009709 	.word	0x08009709
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd f89a 	bl	80067ca <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	6989      	ldr	r1, [r1, #24]
 800969e:	9100      	str	r1, [sp, #0]
 80096a0:	6838      	ldr	r0, [r7, #0]
 80096a2:	f000 fae5 	bl	8009c70 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 80096ac:	2300      	movs	r3, #0
 80096ae:	e042      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80096b0:	2304      	movs	r3, #4
 80096b2:	e040      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 80096b4:	f107 0308 	add.w	r3, r7, #8
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fd f878 	bl	80067ae <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	6989      	ldr	r1, [r1, #24]
 80096c6:	9100      	str	r1, [sp, #0]
 80096c8:	6838      	ldr	r0, [r7, #0]
 80096ca:	f000 fb13 	bl	8009cf4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e02e      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80096d8:	2304      	movs	r3, #4
 80096da:	e02c      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 80096dc:	f107 0308 	add.w	r3, r7, #8
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd f880 	bl	80067e6 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 80096e6:	eef0 7a40 	vmov.f32	s15, s0
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	4619      	mov	r1, r3
 80096f0:	eeb0 0a67 	vmov.f32	s0, s15
 80096f4:	6838      	ldr	r0, [r7, #0]
 80096f6:	f000 fb3f 	bl	8009d78 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8009700:	2300      	movs	r3, #0
 8009702:	e018      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009704:	2304      	movs	r3, #4
 8009706:	e016      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8009708:	f107 0308 	add.w	r3, r7, #8
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd f879 	bl	8006804 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8009712:	eeb0 7b40 	vmov.f64	d7, d0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	4619      	mov	r1, r3
 800971c:	eeb0 0b47 	vmov.f64	d0, d7
 8009720:	6838      	ldr	r0, [r7, #0]
 8009722:	f000 fb3d 	bl	8009da0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 800972c:	2300      	movs	r3, #0
 800972e:	e002      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009730:	2304      	movs	r3, #4
 8009732:	e000      	b.n	8009736 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8009734:	2303      	movs	r3, #3
  }
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
    char c = current();
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fc89 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009752:	e007      	b.n	8009764 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f87c 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fc80 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fa5e 	bl	8009c28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f0      	bne.n	8009754 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8009772:	2300      	movs	r3, #0
  }
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fc f990 	bl	8005aaa <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 800978a:	4603      	mov	r3, r0
  }
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fb4c 	bl	8009e3a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 80097a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80097a6:	eeb0 0a67 	vmov.f32	s0, s15
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fb4c 	bl	8009e5a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 80097c2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff ffd7 	bl	800977c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80097ce:	4602      	mov	r2, r0
    return VariantData::getMember(
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	9200      	str	r2, [sp, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f821 	bl	8009820 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 80097de:	4603      	mov	r3, r0
  }
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}

080097e8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 80097f0:	4804      	ldr	r0, [pc, #16]	@ (8009804 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 80097f2:	f7ff ffcf 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80097f6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80097fa:	eeb0 0a67 	vmov.f32	s0, s15
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	4f7fffff 	.word	0x4f7fffff

08009808 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7fc f9a0 	bl	8005b56 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8009816:	4603      	mov	r3, r0
  }
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	4638      	mov	r0, r7
 800982a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8009834:	2300      	movs	r3, #0
 8009836:	e008      	b.n	800984a <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	463b      	mov	r3, r7
 8009840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009842:	f000 fb16 	bl	8009e72 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8009846:	4603      	mov	r3, r0
 8009848:	bf00      	nop
  }
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
    latch_.clear();
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3310      	adds	r3, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fb1c 	bl	8009e9c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff fbf1 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800987e:	4603      	mov	r3, r0
 8009880:	461a      	mov	r2, r3
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	4293      	cmp	r3, r2
 8009886:	bf14      	ite	ne
 8009888:	2301      	movne	r3, #1
 800988a:	2300      	moveq	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8009892:	2300      	movs	r3, #0
 8009894:	e003      	b.n	800989e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff ffdb 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 800989c:	2301      	movs	r3, #1
  }
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 80098a6:	b480      	push	{r7}
 80098a8:	b083      	sub	sp, #12
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 80098b0:	bf00      	nop
  }
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
	...

080098c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7ff fb92 	bl	8008ff4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
    if (err)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	e07c      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fbbe 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b7b      	cmp	r3, #123	@ 0x7b
 80098e8:	dc71      	bgt.n	80099ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80098ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80098ec:	da04      	bge.n	80098f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 80098ee:	2b22      	cmp	r3, #34	@ 0x22
 80098f0:	d056      	beq.n	80099a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80098f2:	2b27      	cmp	r3, #39	@ 0x27
 80098f4:	d054      	beq.n	80099a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 80098f6:	e06a      	b.n	80099ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80098f8:	3b5b      	subs	r3, #91	@ 0x5b
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	d867      	bhi.n	80099ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 80098fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009904 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009989 	.word	0x08009989
 8009908:	080099cf 	.word	0x080099cf
 800990c:	080099cf 	.word	0x080099cf
 8009910:	080099cf 	.word	0x080099cf
 8009914:	080099cf 	.word	0x080099cf
 8009918:	080099cf 	.word	0x080099cf
 800991c:	080099cf 	.word	0x080099cf
 8009920:	080099cf 	.word	0x080099cf
 8009924:	080099cf 	.word	0x080099cf
 8009928:	080099cf 	.word	0x080099cf
 800992c:	080099cf 	.word	0x080099cf
 8009930:	080099b7 	.word	0x080099b7
 8009934:	080099cf 	.word	0x080099cf
 8009938:	080099cf 	.word	0x080099cf
 800993c:	080099cf 	.word	0x080099cf
 8009940:	080099cf 	.word	0x080099cf
 8009944:	080099cf 	.word	0x080099cf
 8009948:	080099cf 	.word	0x080099cf
 800994c:	080099cf 	.word	0x080099cf
 8009950:	080099c3 	.word	0x080099c3
 8009954:	080099cf 	.word	0x080099cf
 8009958:	080099cf 	.word	0x080099cf
 800995c:	080099cf 	.word	0x080099cf
 8009960:	080099cf 	.word	0x080099cf
 8009964:	080099cf 	.word	0x080099cf
 8009968:	080099ab 	.word	0x080099ab
 800996c:	080099cf 	.word	0x080099cf
 8009970:	080099cf 	.word	0x080099cf
 8009974:	080099cf 	.word	0x080099cf
 8009978:	080099cf 	.word	0x080099cf
 800997c:	080099cf 	.word	0x080099cf
 8009980:	080099cf 	.word	0x080099cf
 8009984:	08009995 	.word	0x08009995
        return skipArray(nestingLimit);
 8009988:	7839      	ldrb	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fc05 	bl	800919a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8009990:	4603      	mov	r3, r0
 8009992:	e021      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8009994:	7839      	ldrb	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fd2e 	bl	80093f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800999c:	4603      	mov	r3, r0
 800999e:	e01b      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff fdca 	bl	800953a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 80099a6:	4603      	mov	r3, r0
 80099a8:	e016      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 80099aa:	490d      	ldr	r1, [pc, #52]	@ (80099e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff fdf9 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 80099b2:	4603      	mov	r3, r0
 80099b4:	e010      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 80099b6:	490b      	ldr	r1, [pc, #44]	@ (80099e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fdf3 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 80099be:	4603      	mov	r3, r0
 80099c0:	e00a      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 80099c2:	4909      	ldr	r1, [pc, #36]	@ (80099e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff fded 	bl	80095a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 80099ca:	4603      	mov	r3, r0
 80099cc:	e004      	b.n	80099d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff feb6 	bl	8009740 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 80099d4:	4603      	mov	r3, r0
 80099d6:	bf00      	nop
  }
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	0802a480 	.word	0x0802a480
 80099e4:	0802a488 	.word	0x0802a488
 80099e8:	0802a490 	.word	0x0802a490

080099ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fc fb5e 	bl	80060b8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff fb2f 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fa6c 	bl	8009ee2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f888 	bl	8009b26 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009a16:	4603      	mov	r3, r0
 8009a18:	e004      	b.n	8009a24 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa75 	bl	8009f0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8009a20:	4603      	mov	r3, r0
 8009a22:	bf00      	nop
  }
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009a36:	bf00      	nop
  }
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	@ 0x28
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8009a50:	f107 0318 	add.w	r3, r7, #24
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fc f9de 	bl	8005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8009a5c:	f107 0318 	add.w	r3, r7, #24
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fd fc7d 	bl	8007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f083 0301 	eor.w	r3, r3, #1
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e037      	b.n	8009ae6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8009a76:	f107 0310 	add.w	r3, r7, #16
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fc f9cb 	bl	8005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8009a82:	f107 0310 	add.w	r3, r7, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fd fc6a 	bl	8007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f083 0301 	eor.w	r3, r3, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e024      	b.n	8009ae6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8009a9c:	f107 0318 	add.w	r3, r7, #24
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd fc86 	bl	80073b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fb fd6f 	bl	8005590 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f083 0301 	eor.w	r3, r3, #1
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e011      	b.n	8009ae6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f107 0218 	add.w	r2, r7, #24
 8009ad2:	ca06      	ldmia	r2, {r1, r2}
 8009ad4:	f7fc f919 	bl	8005d0a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8009ad8:	f107 0310 	add.w	r3, r7, #16
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fd fc50 	bl	8007382 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	bf00      	nop
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff fab2 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 f9ef 	bl	8009ee2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d004      	beq.n	8009b14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fd15 	bl	800953a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009b10:	4603      	mov	r3, r0
 8009b12:	e004      	b.n	8009b1e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fa31 	bl	8009f7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	bf00      	nop
  }
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b086      	sub	sp, #24
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fc fd14 	bl	8006560 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff fa91 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75bb      	strb	r3, [r7, #22]
    move();
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fe85 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fa89 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75fb      	strb	r3, [r7, #23]
      move();
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fe7d 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009b58:	7dfa      	ldrb	r2, [r7, #23]
 8009b5a:	7dbb      	ldrb	r3, [r7, #22]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d051      	beq.n	8009c04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8009b66:	2302      	movs	r3, #2
 8009b68:	e05a      	b.n	8009c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b6e:	d140      	bne.n	8009bf2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff fa75 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8009b80:	2302      	movs	r3, #2
 8009b82:	e04d      	b.n	8009c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	2b75      	cmp	r3, #117	@ 0x75
 8009b88:	d125      	bne.n	8009bd6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fe61 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8009b90:	f107 030a 	add.w	r3, r7, #10
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa0e 	bl	8009fb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	757b      	strb	r3, [r7, #21]
          if (err)
 8009ba0:	7d7b      	ldrb	r3, [r7, #21]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8009ba6:	7d7b      	ldrb	r3, [r7, #21]
 8009ba8:	e03a      	b.n	8009c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8009baa:	897a      	ldrh	r2, [r7, #10]
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fc fce5 	bl	8006582 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d020      	beq.n	8009c00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8009bbe:	f107 030c 	add.w	r3, r7, #12
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fc fd0f 	bl	80065e6 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f000 fa2b 	bl	800a02a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8009bd4:	e7b8      	b.n	8009b48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fc fa0c 	bl	8005ff6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e019      	b.n	8009c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff fe30 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	7dfa      	ldrb	r2, [r7, #23]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fc fab6 	bl	800616a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8009bfe:	e7a3      	b.n	8009b48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8009c00:	bf00      	nop
    for (;;) {
 8009c02:	e7a1      	b.n	8009b48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8009c04:	bf00      	nop
    if (!stringBuilder_.isValid())
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fc fae0 	bl	80061ce <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	f083 0301 	eor.w	r3, r3, #1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	e000      	b.n	8009c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8009c1e:	2300      	movs	r3, #0
  }
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	2239      	movs	r2, #57	@ 0x39
 8009c36:	2130      	movs	r1, #48	@ 0x30
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 fa7a 	bl	800a132 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009c3e:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10e      	bne.n	8009c62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c48:	d00b      	beq.n	8009c62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c4e:	d008      	beq.n	8009c62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c54:	d005      	beq.n	8009c62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	2b65      	cmp	r3, #101	@ 0x65
 8009c5a:	d002      	beq.n	8009c62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	2b45      	cmp	r3, #69	@ 0x45
 8009c60:	d101      	bne.n	8009c66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e000      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8009c66:	2300      	movs	r3, #0
  }
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8009c70:	b5b0      	push	{r4, r5, r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8009c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c80:	f7ff f8be 	bl	8008e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	e028      	b.n	8009cea <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8009c98:	f107 0310 	add.w	r3, r7, #16
 8009c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fc f93f 	bl	8005f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009ca4:	f107 0310 	add.w	r3, r7, #16
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fa5c 	bl	800a166 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f083 0301 	eor.w	r3, r3, #1
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e016      	b.n	8009cec <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	221a      	movs	r2, #26
 8009cc2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009cc4:	f107 0310 	add.w	r3, r7, #16
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fa5d 	bl	800a188 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8009cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fa5e 	bl	800a1a0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8009cea:	2301      	movs	r3, #1
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bdb0      	pop	{r4, r5, r7, pc}

08009cf4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8009cf4:	b5b0      	push	{r4, r5, r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8009d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d04:	f000 fa58 	bl	800a1b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d006      	beq.n	8009d1c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	220c      	movs	r2, #12
 8009d12:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e028      	b.n	8009d6e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8009d1c:	f107 0310 	add.w	r3, r7, #16
 8009d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fc f8fd 	bl	8005f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009d28:	f107 0310 	add.w	r3, r7, #16
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fa1a 	bl	800a166 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f083 0301 	eor.w	r3, r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e016      	b.n	8009d70 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	221c      	movs	r2, #28
 8009d46:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009d48:	f107 0310 	add.w	r3, r7, #16
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fa1b 	bl	800a188 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8009d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d5e:	f107 0310 	add.w	r3, r7, #16
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fa1c 	bl	800a1a0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009d6e:	2301      	movs	r3, #1
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3718      	adds	r7, #24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bdb0      	pop	{r4, r5, r7, pc}

08009d78 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	ed87 0a02 	vstr	s0, [r7, #8]
 8009d84:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	220e      	movs	r2, #14
 8009d8a:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	601a      	str	r2, [r3, #0]
    return true;
 8009d92:	2301      	movs	r3, #1
  }
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8009da0:	b5b0      	push	{r4, r5, r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	ed87 0b00 	vstr	d0, [r7]
 8009dac:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8009dae:	ed97 7b00 	vldr	d7, [r7]
 8009db2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009db6:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8009dba:	edd7 7a07 	vldr	s15, [r7, #28]
 8009dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009dc2:	ed97 6b00 	vldr	d6, [r7]
 8009dc6:	eeb4 6b47 	vcmp.f64	d6, d7
 8009dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dce:	d106      	bne.n	8009dde <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	220e      	movs	r2, #14
 8009dd4:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	e028      	b.n	8009e30 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	68b9      	ldr	r1, [r7, #8]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc f89c 	bl	8005f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009dea:	f107 0314 	add.w	r3, r7, #20
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f9b9 	bl	800a166 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f083 0301 	eor.w	r3, r3, #1
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8009e00:	2300      	movs	r3, #0
 8009e02:	e016      	b.n	8009e32 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	221e      	movs	r2, #30
 8009e08:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009e0a:	f107 0314 	add.w	r3, r7, #20
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f9ba 	bl	800a188 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8009e1c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f9bb 	bl	800a1a0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009e30:	2301      	movs	r3, #1
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3720      	adds	r7, #32
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bdb0      	pop	{r4, r5, r7, pc}

08009e3a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	ee07 3a90 	vmov	s15, r3
}
 8009e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
    return client.getData();
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fb fe2d 	bl	8005ac2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8009e68:	4603      	mov	r3, r0
  }
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af02      	add	r7, sp, #8
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7fb faf3 	bl	800546c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e8e:	f7fd fe75 	bl	8007b7c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8009e92:	4603      	mov	r3, r0
  }
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	715a      	strb	r2, [r3, #5]
  }
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f99f 	bl	800a204 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8009ec6:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	715a      	strb	r2, [r3, #5]
  }
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	4603      	mov	r3, r0
 8009eea:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b27      	cmp	r3, #39	@ 0x27
 8009ef0:	d002      	beq.n	8009ef8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	2b22      	cmp	r3, #34	@ 0x22
 8009ef6:	d101      	bne.n	8009efc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e000      	b.n	8009efe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8009efc:	2300      	movs	r3, #0
  }
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
    char c = current();
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff f8a4 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 f980 	bl	800a224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d015      	beq.n	8009f56 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff fc91 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	7bfa      	ldrb	r2, [r7, #15]
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fc f917 	bl	800616a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff f88f 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f96b 	bl	800a224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1ea      	bne.n	8009f2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8009f54:	e001      	b.n	8009f5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e00c      	b.n	8009f74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fc f936 	bl	80061ce <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f083 0301 	eor.w	r3, r3, #1
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 8009f6e:	2304      	movs	r3, #4
 8009f70:	e000      	b.n	8009f74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 8009f72:	2300      	movs	r3, #0
  }
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
    char c = current();
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff f86b 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8009f8e:	e007      	b.n	8009fa0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff fc5e 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff f862 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 f93e 	bl	800a224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f0      	bne.n	8009f90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8009fae:	2300      	movs	r3, #0
  }
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
    result = 0;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	e025      	b.n	800a01a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff f846 	bl	8009060 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e01f      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f944 	bl	800a272 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 8009fea:	4603      	mov	r3, r0
 8009fec:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8009fee:	7b7b      	ldrb	r3, [r7, #13]
 8009ff0:	2b0f      	cmp	r3, #15
 8009ff2:	d901      	bls.n	8009ff8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e014      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	b21a      	sxth	r2, r3
 800a000:	7b7b      	ldrb	r3, [r7, #13]
 800a002:	b21b      	sxth	r3, r3
 800a004:	4313      	orrs	r3, r2
 800a006:	b21b      	sxth	r3, r3
 800a008:	b29a      	uxth	r2, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	801a      	strh	r2, [r3, #0]
      move();
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fc1f 	bl	8009852 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	3301      	adds	r3, #1
 800a018:	73fb      	strb	r3, [r7, #15]
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d9d6      	bls.n	8009fce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800a020:	2300      	movs	r3, #0
  }
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b7f      	cmp	r3, #127	@ 0x7f
 800a038:	d806      	bhi.n	800a048 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	6838      	ldr	r0, [r7, #0]
 800a042:	f7fc f892 	bl	800616a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800a046:	e070      	b.n	800a12a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	617a      	str	r2, [r7, #20]
 800a054:	2200      	movs	r2, #0
 800a056:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a060:	b2db      	uxtb	r3, r3
 800a062:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a066:	b2d9      	uxtb	r1, r3
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	617a      	str	r2, [r7, #20]
 800a06e:	460a      	mov	r2, r1
 800a070:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	099b      	lsrs	r3, r3, #6
 800a076:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800a078:	8a7b      	ldrh	r3, [r7, #18]
 800a07a:	2b1f      	cmp	r3, #31
 800a07c:	d80a      	bhi.n	800a094 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 800a07e:	8a7b      	ldrh	r3, [r7, #18]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800a086:	b2d9      	uxtb	r1, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	617a      	str	r2, [r7, #20]
 800a08e:	460a      	mov	r2, r1
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e03e      	b.n	800a112 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a094:	8a7b      	ldrh	r3, [r7, #18]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0a2:	b2d9      	uxtb	r1, r3
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	617a      	str	r2, [r7, #20]
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800a0ae:	8a7b      	ldrh	r3, [r7, #18]
 800a0b0:	099b      	lsrs	r3, r3, #6
 800a0b2:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800a0b4:	8a7b      	ldrh	r3, [r7, #18]
 800a0b6:	2b0f      	cmp	r3, #15
 800a0b8:	d80a      	bhi.n	800a0d0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 800a0ba:	8a7b      	ldrh	r3, [r7, #18]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f063 031f 	orn	r3, r3, #31
 800a0c2:	b2d9      	uxtb	r1, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	617a      	str	r2, [r7, #20]
 800a0ca:	460a      	mov	r2, r1
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	e020      	b.n	800a112 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a0d0:	8a7b      	ldrh	r3, [r7, #18]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0de:	b2d9      	uxtb	r1, r3
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	617a      	str	r2, [r7, #20]
 800a0e6:	460a      	mov	r2, r1
 800a0e8:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800a0ea:	8a7b      	ldrh	r3, [r7, #18]
 800a0ec:	099b      	lsrs	r3, r3, #6
 800a0ee:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800a0f0:	8a7b      	ldrh	r3, [r7, #18]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f063 030f 	orn	r3, r3, #15
 800a0f8:	b2d9      	uxtb	r1, r3
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	617a      	str	r2, [r7, #20]
 800a100:	460a      	mov	r2, r1
 800a102:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800a104:	e005      	b.n	800a112 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6838      	ldr	r0, [r7, #0]
 800a10e:	f7fc f82c 	bl	800616a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	3b01      	subs	r3, #1
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2300      	moveq	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1ed      	bne.n	800a106 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	4603      	mov	r3, r0
 800a13a:	71fb      	strb	r3, [r7, #7]
 800a13c:	460b      	mov	r3, r1
 800a13e:	71bb      	strb	r3, [r7, #6]
 800a140:	4613      	mov	r3, r2
 800a142:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800a144:	79ba      	ldrb	r2, [r7, #6]
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d805      	bhi.n	800a158 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a14c:	79fa      	ldrb	r2, [r7, #7]
 800a14e:	797b      	ldrb	r3, [r7, #5]
 800a150:	429a      	cmp	r2, r3
 800a152:	d801      	bhi.n	800a158 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 800a158:	2300      	movs	r3, #0
  }
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	bf14      	ite	ne
 800a176:	2301      	movne	r3, #1
 800a178:	2300      	moveq	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
  }
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
    return id_;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	889b      	ldrh	r3, [r3, #4]
  }
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
    return ptr_;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
  }
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a1b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a1c4:	f000 f86e 	bl	800a2a4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	17da      	asrs	r2, r3, #31
 800a1cc:	4698      	mov	r8, r3
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d4:	4542      	cmp	r2, r8
 800a1d6:	eb73 0309 	sbcs.w	r3, r3, r9
 800a1da:	db0d      	blt.n	800a1f8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800a1dc:	f000 f86b 	bl	800a2b6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	17da      	asrs	r2, r3, #31
 800a1e4:	461c      	mov	r4, r3
 800a1e6:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ec:	4294      	cmp	r4, r2
 800a1ee:	eb75 0303 	sbcs.w	r3, r5, r3
 800a1f2:	db01      	blt.n	800a1f8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a204 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	1c59      	adds	r1, r3, #1
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
  }
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2239      	movs	r2, #57	@ 0x39
 800a232:	2130      	movs	r1, #48	@ 0x30
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ff7c 	bl	800a132 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d111      	bne.n	800a264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800a240:	79fb      	ldrb	r3, [r7, #7]
 800a242:	227a      	movs	r2, #122	@ 0x7a
 800a244:	215f      	movs	r1, #95	@ 0x5f
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff ff73 	bl	800a132 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d108      	bne.n	800a264 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800a252:	79fb      	ldrb	r3, [r7, #7]
 800a254:	225a      	movs	r2, #90	@ 0x5a
 800a256:	2141      	movs	r1, #65	@ 0x41
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff ff6a 	bl	800a132 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a25e:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 800a268:	2300      	movs	r3, #0
  }
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800a272:	b480      	push	{r7}
 800a274:	b083      	sub	sp, #12
 800a276:	af00      	add	r7, sp, #0
 800a278:	4603      	mov	r3, r0
 800a27a:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b40      	cmp	r3, #64	@ 0x40
 800a280:	d803      	bhi.n	800a28a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	3b30      	subs	r3, #48	@ 0x30
 800a286:	b2db      	uxtb	r3, r3
 800a288:	e006      	b.n	800a298 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	f023 0320 	bic.w	r3, r3, #32
 800a290:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	3b37      	subs	r3, #55	@ 0x37
 800a296:	b2db      	uxtb	r3, r3
  }
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a2a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a2ba:	f7ff fff3 	bl	800a2a4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	43db      	mvns	r3, r3
  }
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a2d0:	1d39      	adds	r1, r7, #4
 800a2d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	4803      	ldr	r0, [pc, #12]	@ (800a2e8 <__io_putchar+0x20>)
 800a2da:	f019 fe32 	bl	8023f42 <HAL_UART_Transmit>
	  return ch;
 800a2de:	687b      	ldr	r3, [r7, #4]
	}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	24000378 	.word	0x24000378

0800a2ec <main>:
}

int main(void)
{
 800a2ec:	b590      	push	{r4, r7, lr}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
	MPU_Config();
 800a2f2:	f000 fa55 	bl	800a7a0 <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 800a2f6:	f011 fb83 	bl	801ba00 <HAL_Init>
	SystemClock_Config();
 800a2fa:	f000 f867 	bl	800a3cc <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800a2fe:	f000 f92f 	bl	800a560 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a302:	f3bf 8f4f 	dsb	sy
}
 800a306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a308:	f3bf 8f6f 	isb	sy
}
 800a30c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800a30e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c4 <main+0xd8>)
 800a310:	2200      	movs	r2, #0
 800a312:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a316:	f3bf 8f4f 	dsb	sy
}
 800a31a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a31c:	f3bf 8f6f 	isb	sy
}
 800a320:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800a322:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a324:	4b27      	ldr	r3, [pc, #156]	@ (800a3c4 <main+0xd8>)
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d11b      	bne.n	800a372 <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 800a33a:	f3bf 8f4f 	dsb	sy
}
 800a33e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a340:	f3bf 8f6f 	isb	sy
}
 800a344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a346:	4b1f      	ldr	r3, [pc, #124]	@ (800a3c4 <main+0xd8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a34e:	f3bf 8f4f 	dsb	sy
}
 800a352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a354:	f3bf 8f6f 	isb	sy
}
 800a358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a35a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c4 <main+0xd8>)
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	4a19      	ldr	r2, [pc, #100]	@ (800a3c4 <main+0xd8>)
 800a360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a366:	f3bf 8f4f 	dsb	sy
}
 800a36a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a36c:	f3bf 8f6f 	isb	sy
}
 800a370:	e000      	b.n	800a374 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a372:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800a374:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <main+0xdc>)
 800a376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a37a:	4a13      	ldr	r2, [pc, #76]	@ (800a3c8 <main+0xdc>)
 800a37c:	f043 0301 	orr.w	r3, r3, #1
 800a380:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a384:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <main+0xdc>)
 800a386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800a392:	f000 f9a9 	bl	800a6e8 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800a396:	f000 f947 	bl	800a628 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 800a39a:	f000 f919 	bl	800a5d0 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800a39e:	f01b fcb5 	bl	8025d0c <MX_FATFS_Init>

	Remora *remora = new Remora();
 800a3a2:	2044      	movs	r0, #68	@ 0x44
 800a3a4:	f01e f8e0 	bl	8028568 <_Znwj>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	461c      	mov	r4, r3
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fe61 	bl	800b074 <_ZN6RemoraC1Ev>
 800a3b2:	607c      	str	r4, [r7, #4]
	remora->run();
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 f915 	bl	800b5e4 <_ZN6Remora3runEv>
}
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd90      	pop	{r4, r7, pc}
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	58024400 	.word	0x58024400

0800a3cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b09e      	sub	sp, #120	@ 0x78
 800a3d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a3d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3d6:	224c      	movs	r2, #76	@ 0x4c
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f01f f8e8 	bl	80295b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a3e0:	f107 030c 	add.w	r3, r7, #12
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f01f f8e1 	bl	80295b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a3ee:	2002      	movs	r0, #2
 800a3f0:	f014 fa8c 	bl	801e90c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	60bb      	str	r3, [r7, #8]
 800a3f8:	4b56      	ldr	r3, [pc, #344]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fc:	4a55      	ldr	r2, [pc, #340]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a3fe:	f023 0301 	bic.w	r3, r3, #1
 800a402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a404:	4b53      	ldr	r3, [pc, #332]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	60bb      	str	r3, [r7, #8]
 800a40e:	4b52      	ldr	r3, [pc, #328]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	4a51      	ldr	r2, [pc, #324]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a418:	6193      	str	r3, [r2, #24]
 800a41a:	4b4f      	ldr	r3, [pc, #316]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a422:	60bb      	str	r3, [r7, #8]
 800a424:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a426:	bf00      	nop
 800a428:	4b4b      	ldr	r3, [pc, #300]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a434:	bf14      	ite	ne
 800a436:	2301      	movne	r3, #1
 800a438:	2300      	moveq	r3, #0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1f3      	bne.n	800a428 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a440:	4b46      	ldr	r3, [pc, #280]	@ (800a55c <_Z18SystemClock_Configv+0x190>)
 800a442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a446:	4a45      	ldr	r2, [pc, #276]	@ (800a55c <_Z18SystemClock_Configv+0x190>)
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a450:	4b42      	ldr	r3, [pc, #264]	@ (800a55c <_Z18SystemClock_Configv+0x190>)
 800a452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	607b      	str	r3, [r7, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a45e:	2300      	movs	r3, #0
 800a460:	603b      	str	r3, [r7, #0]
 800a462:	4b3d      	ldr	r3, [pc, #244]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	4a3c      	ldr	r2, [pc, #240]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a46c:	6193      	str	r3, [r2, #24]
 800a46e:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	4b36      	ldr	r3, [pc, #216]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47c:	4a35      	ldr	r2, [pc, #212]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a484:	4b33      	ldr	r3, [pc, #204]	@ (800a554 <_Z18SystemClock_Configv+0x188>)
 800a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	603b      	str	r3, [r7, #0]
 800a48e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a490:	bf00      	nop
 800a492:	4b31      	ldr	r3, [pc, #196]	@ (800a558 <_Z18SystemClock_Configv+0x18c>)
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a49a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
 800a4a2:	2300      	moveq	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f3      	bne.n	800a492 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a4aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a55c <_Z18SystemClock_Configv+0x190>)
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	4a2a      	ldr	r2, [pc, #168]	@ (800a55c <_Z18SystemClock_Configv+0x190>)
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a4be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a4c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a4cc:	2305      	movs	r3, #5
 800a4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a4d0:	23c0      	movs	r3, #192	@ 0xc0
 800a4d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a4d8:	2304      	movs	r3, #4
 800a4da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a4ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f014 fa45 	bl	801e980 <HAL_RCC_OscConfig>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf14      	ite	ne
 800a4fc:	2301      	movne	r3, #1
 800a4fe:	2300      	moveq	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800a506:	f000 f993 	bl	800a830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a50a:	233f      	movs	r3, #63	@ 0x3f
 800a50c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a50e:	2303      	movs	r3, #3
 800a510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a512:	2300      	movs	r3, #0
 800a514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a516:	2308      	movs	r3, #8
 800a518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a51a:	2340      	movs	r3, #64	@ 0x40
 800a51c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a51e:	2340      	movs	r3, #64	@ 0x40
 800a520:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a526:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a528:	2340      	movs	r3, #64	@ 0x40
 800a52a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a52c:	f107 030c 	add.w	r3, r7, #12
 800a530:	2104      	movs	r1, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f014 fe7e 	bl	801f234 <HAL_RCC_ClockConfig>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bf14      	ite	ne
 800a53e:	2301      	movne	r3, #1
 800a540:	2300      	moveq	r3, #0
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 800a548:	f000 f972 	bl	800a830 <Error_Handler>
  }
}
 800a54c:	bf00      	nop
 800a54e:	3778      	adds	r7, #120	@ 0x78
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	58000400 	.word	0x58000400
 800a558:	58024800 	.word	0x58024800
 800a55c:	58024400 	.word	0x58024400

0800a560 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b0b0      	sub	sp, #192	@ 0xc0
 800a564:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a566:	463b      	mov	r3, r7
 800a568:	22c0      	movs	r2, #192	@ 0xc0
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f01f f81f 	bl	80295b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800a572:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800a57e:	2302      	movs	r3, #2
 800a580:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800a582:	230c      	movs	r3, #12
 800a584:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a586:	2301      	movs	r3, #1
 800a588:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800a58a:	230a      	movs	r3, #10
 800a58c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a58e:	2302      	movs	r3, #2
 800a590:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a592:	23c0      	movs	r3, #192	@ 0xc0
 800a594:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a596:	2320      	movs	r3, #32
 800a598:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a59e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a5a2:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a5a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f015 f9cd 	bl	801f94c <HAL_RCCEx_PeriphCLKConfig>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bf14      	ite	ne
 800a5b8:	2301      	movne	r3, #1
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800a5c2:	f000 f935 	bl	800a830 <Error_Handler>
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	37c0      	adds	r7, #192	@ 0xc0
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a5d4:	4b11      	ldr	r3, [pc, #68]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5d6:	4a12      	ldr	r2, [pc, #72]	@ (800a620 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800a5d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a5da:	4b10      	ldr	r3, [pc, #64]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a5e6:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a5ee:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800a5f6:	4b09      	ldr	r3, [pc, #36]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800a5fc:	4807      	ldr	r0, [pc, #28]	@ (800a61c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a5fe:	f017 fea3 	bl	8022348 <HAL_SD_Init>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf14      	ite	ne
 800a608:	2301      	movne	r3, #1
 800a60a:	2300      	moveq	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800a612:	4804      	ldr	r0, [pc, #16]	@ (800a624 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800a614:	f01e fec2 	bl	802939c <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800a618:	bf00      	nop
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	240002fc 	.word	0x240002fc
 800a620:	52007000 	.word	0x52007000
 800a624:	0802a498 	.word	0x0802a498

0800a628 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a62c:	4b2c      	ldr	r3, [pc, #176]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a62e:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800a630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 800a632:	4b2b      	ldr	r3, [pc, #172]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a63a:	4b29      	ldr	r3, [pc, #164]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a640:	4b27      	ldr	r3, [pc, #156]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a642:	2200      	movs	r2, #0
 800a644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a646:	4b26      	ldr	r3, [pc, #152]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a648:	2200      	movs	r2, #0
 800a64a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a64c:	4b24      	ldr	r3, [pc, #144]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a64e:	220c      	movs	r2, #12
 800a650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a652:	4b23      	ldr	r3, [pc, #140]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a654:	2200      	movs	r2, #0
 800a656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a658:	4b21      	ldr	r3, [pc, #132]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a65e:	4b20      	ldr	r3, [pc, #128]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a660:	2200      	movs	r2, #0
 800a662:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a664:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a666:	2200      	movs	r2, #0
 800a668:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a66a:	4b1d      	ldr	r3, [pc, #116]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a670:	481b      	ldr	r0, [pc, #108]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a672:	f019 fc16 	bl	8023ea2 <HAL_UART_Init>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bf14      	ite	ne
 800a67c:	2301      	movne	r3, #1
 800a67e:	2300      	moveq	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800a686:	f000 f8d3 	bl	800a830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a68a:	2100      	movs	r1, #0
 800a68c:	4814      	ldr	r0, [pc, #80]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a68e:	f01a fca8 	bl	8024fe2 <HAL_UARTEx_SetTxFifoThreshold>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800a6a2:	f000 f8c5 	bl	800a830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	480d      	ldr	r0, [pc, #52]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6aa:	f01a fcd8 	bl	802505e <HAL_UARTEx_SetRxFifoThreshold>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	bf14      	ite	ne
 800a6b4:	2301      	movne	r3, #1
 800a6b6:	2300      	moveq	r3, #0
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800a6be:	f000 f8b7 	bl	800a830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a6c2:	4807      	ldr	r0, [pc, #28]	@ (800a6e0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6c4:	f01a fc54 	bl	8024f70 <HAL_UARTEx_DisableFifoMode>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2301      	movne	r3, #1
 800a6d0:	2300      	moveq	r3, #0
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800a6d8:	f000 f8aa 	bl	800a830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a6dc:	bf00      	nop
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	24000378 	.word	0x24000378
 800a6e4:	40011000 	.word	0x40011000

0800a6e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08a      	sub	sp, #40	@ 0x28
 800a6ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6ee:	f107 0314 	add.w	r3, r7, #20
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	609a      	str	r2, [r3, #8]
 800a6fa:	60da      	str	r2, [r3, #12]
 800a6fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a6fe:	4b26      	ldr	r3, [pc, #152]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a704:	4a24      	ldr	r2, [pc, #144]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a70e:	4b22      	ldr	r3, [pc, #136]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a71c:	4b1e      	ldr	r3, [pc, #120]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a71e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a722:	4a1d      	ldr	r2, [pc, #116]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a724:	f043 0304 	orr.w	r3, r3, #4
 800a728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a72c:	4b1a      	ldr	r3, [pc, #104]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a72e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a73a:	4b17      	ldr	r3, [pc, #92]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a73c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a740:	4a15      	ldr	r2, [pc, #84]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a742:	f043 0301 	orr.w	r3, r3, #1
 800a746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a74a:	4b13      	ldr	r3, [pc, #76]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	60bb      	str	r3, [r7, #8]
 800a756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a758:	4b0f      	ldr	r3, [pc, #60]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a75a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a75e:	4a0e      	ldr	r2, [pc, #56]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a760:	f043 0308 	orr.w	r3, r3, #8
 800a764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a768:	4b0b      	ldr	r3, [pc, #44]	@ (800a798 <_ZL12MX_GPIO_Initv+0xb0>)
 800a76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a76e:	f003 0308 	and.w	r3, r3, #8
 800a772:	607b      	str	r3, [r7, #4]
 800a774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a776:	2310      	movs	r3, #16
 800a778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a782:	f107 0314 	add.w	r3, r7, #20
 800a786:	4619      	mov	r1, r3
 800a788:	4804      	ldr	r0, [pc, #16]	@ (800a79c <_ZL12MX_GPIO_Initv+0xb4>)
 800a78a:	f013 fedd 	bl	801e548 <HAL_GPIO_Init>

}
 800a78e:	bf00      	nop
 800a790:	3728      	adds	r7, #40	@ 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	58024400 	.word	0x58024400
 800a79c:	58020800 	.word	0x58020800

0800a7a0 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	605a      	str	r2, [r3, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800a7b2:	f011 fb11 	bl	801bdd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a7c2:	231f      	movs	r3, #31
 800a7c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800a7c6:	2387      	movs	r3, #135	@ 0x87
 800a7c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f011 fb2f 	bl	801be48 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a7ee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a7f2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a800:	2300      	movs	r3, #0
 800a802:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a804:	2300      	movs	r3, #0
 800a806:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a808:	2301      	movs	r3, #1
 800a80a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800a810:	2300      	movs	r3, #0
 800a812:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a814:	2300      	movs	r3, #0
 800a816:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a818:	463b      	mov	r3, r7
 800a81a:	4618      	mov	r0, r3
 800a81c:	f011 fb14 	bl	801be48 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a820:	2004      	movs	r0, #4
 800a822:	f011 faf1 	bl	801be08 <HAL_MPU_Enable>

}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 800a834:	4803      	ldr	r0, [pc, #12]	@ (800a844 <Error_Handler+0x14>)
 800a836:	f01e fd41 	bl	80292bc <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a83a:	b672      	cpsid	i
}
 800a83c:	bf00      	nop

  __disable_irq();
  while (1)
 800a83e:	bf00      	nop
 800a840:	e7fd      	b.n	800a83e <Error_Handler+0xe>
 800a842:	bf00      	nop
 800a844:	0802a4a8 	.word	0x0802a4a8

0800a848 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	bf00      	nop
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	1e5a      	subs	r2, r3, #1
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	605a      	str	r2, [r3, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bf0c      	ite	eq
 800a898:	2301      	moveq	r3, #1
 800a89a:	2300      	movne	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d019      	beq.n	800a8d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	1e5a      	subs	r2, r3, #1
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	609a      	str	r2, [r3, #8]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bf0c      	ite	eq
 800a8c0:	2301      	moveq	r3, #1
 800a8c2:	2300      	movne	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	330c      	adds	r3, #12
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
        }
    }
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800a8e4:	4b02      	ldr	r3, [pc, #8]	@ (800a8f0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	0802b2d4 	.word	0x0802b2d4

0800a8f4 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
      header = 0;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
      inputs = 0;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
 800a90c:	e008      	b.n	800a920 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	2200      	movs	r2, #0
 800a918:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	3301      	adds	r3, #1
 800a91e:	73fb      	strb	r3, [r7, #15]
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	2b07      	cmp	r3, #7
 800a924:	d9f3      	bls.n	800a90e <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 800a926:	2300      	movs	r3, #0
 800a928:	73bb      	strb	r3, [r7, #14]
 800a92a:	e00b      	b.n	800a944 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	3308      	adds	r3, #8
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	3304      	adds	r3, #4
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	3301      	adds	r3, #1
 800a942:	73bb      	strb	r3, [r7, #14]
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	2b05      	cmp	r3, #5
 800a948:	d9f0      	bls.n	800a92c <_ZN8txData_tC1Ev+0x38>
     }
  }
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d201      	bcs.n	800a972 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	e000      	b.n	800a974 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800a972:	687b      	ldr	r3, [r7, #4]
    }
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
    return static_;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	7a1b      	ldrb	r3, [r3, #8]
  }
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  }
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e006      	b.n	800a9d2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f000 f9ab 	bl	800ad24 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	bf00      	nop
  }
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7fa fd0f 	bl	8005406 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800a9e8:	4603      	mov	r3, r0
  }
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7ff ffeb 	bl	800a9da <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800aa04:	4603      	mov	r3, r0
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	68b9      	ldr	r1, [r7, #8]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7ff ffcf 	bl	800a9ae <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800aa10:	4603      	mov	r3, r0
  }
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f7ff ffde 	bl	800a9f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800aa36:	4603      	mov	r3, r0
 800aa38:	e000      	b.n	800aa3c <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800aa3a:	2300      	movs	r3, #0
  }
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 f81d 	bl	800aa90 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7fa fdd7 	bl	8005610 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 800aa62:	4603      	mov	r3, r0
 800aa64:	e003      	b.n	800aa6e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7fa fccd 	bl	8005406 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	617b      	str	r3, [r7, #20]
    if (!array)
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e006      	b.n	800aa88 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f000 f8ff 	bl	800ac82 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800aa84:	4603      	mov	r3, r0
 800aa86:	bf00      	nop
  }
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bf0c      	ite	eq
 800aaa0:	2301      	moveq	r3, #1
 800aaa2:	2300      	movne	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
  }
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 800aab2:	b480      	push	{r7}
 800aab4:	b083      	sub	sp, #12
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	791b      	ldrb	r3, [r3, #4]
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d003      	beq.n	800aaca <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800aac6:	2b05      	cmp	r3, #5
 800aac8:	d101      	bne.n	800aace <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e000      	b.n	800aad0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 800aace:	2300      	movs	r3, #0
  }
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2204      	movs	r2, #4
 800aaea:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	601a      	str	r2, [r3, #0]
  }
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f103 0208 	add.w	r2, r3, #8
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fa fb06 	bl	8005124 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f103 020c 	add.w	r2, r3, #12
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4619      	mov	r1, r3
 800ab24:	4610      	mov	r0, r2
 800ab26:	f7fc fb87 	bl	8007238 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	330c      	adds	r3, #12
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f001 f88f 	bl	800bc52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3308      	adds	r3, #8
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff ff2d 	bl	800a998 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	1d3b      	adds	r3, r7, #4
 800ab52:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	1d3b      	adds	r3, r7, #4
 800ab5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ab60:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf0c      	ite	eq
 800ab80:	2301      	moveq	r3, #1
 800ab82:	2300      	movne	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
  }
 800ab86:	4618      	mov	r0, r3
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f000 f8cf 	bl	800ad52 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 800abb4:	4603      	mov	r3, r0
 800abb6:	e000      	b.n	800abba <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 800abb8:	2300      	movs	r3, #0
  }
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
    return resources_;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
  }
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fa fba3 	bl	8005332 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800abec:	4603      	mov	r3, r0
  }
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fa fb95 	bl	8005332 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800ac08:	4603      	mov	r3, r0
  }
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff ff6e 	bl	800aafe <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fb f80f 	bl	8005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800ac46:	e006      	b.n	800ac56 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7fa ffe7 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7fa fb22 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f083 0301 	eor.w	r3, r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e7      	bne.n	800ac48 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800ac78:	bf00      	nop
}
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b088      	sub	sp, #32
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fa ffe4 	bl	8005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 800ac9c:	e008      	b.n	800acb0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 800ac9e:	f107 0314 	add.w	r3, r7, #20
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fa ffba 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	3b01      	subs	r3, #1
 800acae:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 800acb0:	f107 0314 	add.w	r3, r7, #20
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fa faf3 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800acba:	4603      	mov	r3, r0
 800acbc:	f083 0301 	eor.w	r3, r3, #1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800accc:	2301      	movs	r3, #1
 800acce:	e000      	b.n	800acd2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 800acd0:	2300      	movs	r3, #0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e3      	bne.n	800ac9e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 800acd6:	f107 0314 	add.w	r3, r7, #20
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fa fae0 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	3301      	adds	r3, #1
 800acea:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 800acec:	f107 0314 	add.w	r3, r7, #20
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fa fb06 	bl	8005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800acf6:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800acf8:	e00c      	b.n	800ad14 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7fa ff42 	bl	8005b86 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 800ad02:	61f8      	str	r0, [r7, #28]
    if (!element)
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e006      	b.n	800ad1c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1ef      	bne.n	800acfa <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 800ad30:	f107 0010 	add.w	r0, r7, #16
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	68f9      	ldr	r1, [r7, #12]
 800ad3a:	f7ff ff77 	bl	800ac2c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 800ad3e:	f107 0310 	add.w	r3, r7, #16
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fa fadd 	bl	8005302 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800ad48:	4603      	mov	r3, r0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b086      	sub	sp, #24
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800ad60:	f107 030c 	add.w	r3, r7, #12
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fa ff7b 	bl	8005c64 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800ad6e:	e008      	b.n	800ad82 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	3301      	adds	r3, #1
 800ad74:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800ad76:	f107 030c 	add.w	r3, r7, #12
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa ff4e 	bl	8005c1e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fa fa8a 	bl	80052a0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f083 0301 	eor.w	r3, r3, #1
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1eb      	bne.n	800ad70 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 800ad98:	697b      	ldr	r3, [r7, #20]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	463b      	mov	r3, r7
 800adaa:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800adae:	463b      	mov	r3, r7
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fc fabd 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800adb6:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff fe77 	bl	800aab2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 800adce:	2300      	movs	r3, #0
  }
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 ff48 	bl	800bc7e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4611      	mov	r1, r2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff ffe5 	bl	800add8 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f000 ff20 	bl	800bc68 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3318      	adds	r3, #24
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ffe1 	bl	800adf8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7f9b      	ldrb	r3, [r3, #30]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800ae5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae62:	f003 0310 	and.w	r3, r3, #16
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bf14      	ite	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	2300      	moveq	r3, #0
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d006      	beq.n	800ae82 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800ae74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae78:	2210      	movs	r2, #16
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800ae7e:	f7f9 fff5 	bl	8004e6c <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 800ae82:	bf00      	nop
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800ae8a:	f7f9 fffd 	bl	8004e88 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 800ae96:	f7fa f805 	bl	8004ea4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 800aea2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bf14      	ite	ne
 800aeb0:	2301      	movne	r3, #1
 800aeb2:	2300      	moveq	r3, #0
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800aeba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800aec4:	f023 0301 	bic.w	r3, r3, #1
 800aec8:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800aeca:	f7f9 fff9 	bl	8004ec0 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 800aece:	bf00      	nop
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 800aed8:	4b0a      	ldr	r3, [pc, #40]	@ (800af04 <TIM3_IRQHandler+0x30>)
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bf14      	ite	ne
 800aee4:	2301      	movne	r3, #1
 800aee6:	2300      	moveq	r3, #0
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 800aeee:	4b05      	ldr	r3, [pc, #20]	@ (800af04 <TIM3_IRQHandler+0x30>)
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	4a04      	ldr	r2, [pc, #16]	@ (800af04 <TIM3_IRQHandler+0x30>)
 800aef4:	f023 0301 	bic.w	r3, r3, #1
 800aef8:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800aefa:	f7f9 ffef 	bl	8004edc <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 800aefe:	bf00      	nop
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	40000400 	.word	0x40000400

0800af08 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 800af0c:	4b0a      	ldr	r3, [pc, #40]	@ (800af38 <TIM4_IRQHandler+0x30>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	2b00      	cmp	r3, #0
 800af16:	bf14      	ite	ne
 800af18:	2301      	movne	r3, #1
 800af1a:	2300      	moveq	r3, #0
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d007      	beq.n	800af32 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 800af22:	4b05      	ldr	r3, [pc, #20]	@ (800af38 <TIM4_IRQHandler+0x30>)
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	4a04      	ldr	r2, [pc, #16]	@ (800af38 <TIM4_IRQHandler+0x30>)
 800af28:	f023 0301 	bic.w	r3, r3, #1
 800af2c:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 800af2e:	f7f9 ffe3 	bl	8004ef8 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 800af32:	bf00      	nop
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	40000800 	.word	0x40000800

0800af3c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3304      	adds	r3, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 feb4 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff ffea 	bl	800af3c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 ff6f 	bl	800be5e <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 ff52 	bl	800be3e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff ffeb 	bl	800af8a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 ffa0 	bl	800bf14 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff ffe5 	bl	800afbe <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f001 f8bf 	bl	800c192 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	6039      	str	r1, [r7, #0]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff ffe5 	bl	800affe <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3304      	adds	r3, #4
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fe33 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>:
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ffea 	bl	800b03e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b097      	sub	sp, #92	@ 0x5c
 800b078:	af02      	add	r7, sp, #8
 800b07a:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3310      	adds	r3, #16
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fe51 	bl	800bd28 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3314      	adds	r3, #20
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fe7e 	bl	800bd8c <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	331c      	adds	r3, #28
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fea0 	bl	800bdda <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3320      	adds	r3, #32
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fe9b 	bl	800bdda <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3324      	adds	r3, #36	@ 0x24
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 fe96 	bl	800bdda <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3328      	adds	r3, #40	@ 0x28
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff ff76 	bl	800afa4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
	baseFreq(Config::pruBaseFreq),
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800b0be:	635a      	str	r2, [r3, #52]	@ 0x34
	servoFreq(Config::pruServoFreq),
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b0c6:	639a      	str	r2, [r3, #56]	@ 0x38
	serialFreq(Config::pruSerialFreq)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800b0ce:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	threadsRunning = false;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	currentState = ST_SETUP;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2205      	movs	r2, #5
 800b0e2:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	613b      	str	r3, [r7, #16]
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	f107 0210 	add.w	r2, r7, #16
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fef3 	bl	800bede <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3310      	adds	r3, #16
 800b0fc:	f107 020c 	add.w	r2, r7, #12
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff ff6b 	bl	800afde <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b108:	f107 030c 	add.w	r3, r7, #12
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fe1b 	bl	800bd48 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a6c      	ldr	r2, [pc, #432]	@ (800b2c8 <_ZN6RemoraC1Ev+0x254>)
 800b116:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a6c      	ldr	r2, [pc, #432]	@ (800b2cc <_ZN6RemoraC1Ev+0x258>)
 800b11c:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f103 0108 	add.w	r1, r3, #8
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	1d1a      	adds	r2, r3, #4
 800b128:	4b69      	ldr	r3, [pc, #420]	@ (800b2d0 <_ZN6RemoraC1Ev+0x25c>)
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	f107 0008 	add.w	r0, r7, #8
 800b130:	f107 0314 	add.w	r3, r7, #20
 800b134:	f000 ff0a 	bl	800bf4c <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 800b138:	f107 0318 	add.w	r3, r7, #24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 ff50 	bl	800bfe2 <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3314      	adds	r3, #20
 800b146:	f107 0218 	add.w	r2, r7, #24
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 ff56 	bl	800bffe <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 800b152:	f107 0318 	add.w	r3, r7, #24
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fefe 	bl	800af58 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3314      	adds	r3, #20
 800b160:	4618      	mov	r0, r3
 800b162:	f000 ff5f 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b166:	4604      	mov	r4, r0
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 ff65 	bl	800c03c <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b172:	4602      	mov	r2, r0
 800b174:	f107 0320 	add.w	r3, r7, #32
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 ff7a 	bl	800c074 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 800b180:	f107 0320 	add.w	r3, r7, #32
 800b184:	4619      	mov	r1, r3
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff fe46 	bl	800ae18 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 800b18c:	f107 0320 	add.w	r3, r7, #32
 800b190:	4618      	mov	r0, r3
 800b192:	f000 ff8b 	bl	800c0ac <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3314      	adds	r3, #20
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 ff42 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f005 fa73 	bl	801068e <_ZN12CommsHandler4initEv>
	comms->start();
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3314      	adds	r3, #20
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 ff39 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f005 fa98 	bl	80106ea <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800b1ba:	4b46      	ldr	r3, [pc, #280]	@ (800b2d4 <_ZN6RemoraC1Ev+0x260>)
 800b1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 800b1be:	231d      	movs	r3, #29
 800b1c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3334      	adds	r3, #52	@ 0x34
    baseThread = make_unique<pruThread>(
 800b1c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b1ca:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800b1ce:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b1d2:	4c41      	ldr	r4, [pc, #260]	@ (800b2d8 <_ZN6RemoraC1Ev+0x264>)
 800b1d4:	9401      	str	r4, [sp, #4]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4940      	ldr	r1, [pc, #256]	@ (800b2dc <_ZN6RemoraC1Ev+0x268>)
 800b1dc:	f000 ff88 	bl	800c0f0 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	331c      	adds	r3, #28
 800b1e4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff ff17 	bl	800b01e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800b1f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fe00 	bl	800bdfa <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800b1fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b1fe:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800b200:	231c      	movs	r3, #28
 800b202:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3338      	adds	r3, #56	@ 0x38
    servoThread = make_unique<pruThread>(
 800b208:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800b20c:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800b210:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b214:	4c32      	ldr	r4, [pc, #200]	@ (800b2e0 <_ZN6RemoraC1Ev+0x26c>)
 800b216:	9401      	str	r4, [sp, #4]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	460b      	mov	r3, r1
 800b21c:	4931      	ldr	r1, [pc, #196]	@ (800b2e4 <_ZN6RemoraC1Ev+0x270>)
 800b21e:	f000 ffd4 	bl	800c1ca <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3320      	adds	r3, #32
 800b226:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b22a:	4611      	mov	r1, r2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff fef6 	bl	800b01e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800b232:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b236:	4618      	mov	r0, r3
 800b238:	f000 fddf 	bl	800bdfa <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800b23c:	4b2a      	ldr	r3, [pc, #168]	@ (800b2e8 <_ZN6RemoraC1Ev+0x274>)
 800b23e:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800b240:	231e      	movs	r3, #30
 800b242:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	333c      	adds	r3, #60	@ 0x3c
    serialThread = make_unique<pruThread>(
 800b24a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800b24e:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800b252:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b256:	4c25      	ldr	r4, [pc, #148]	@ (800b2ec <_ZN6RemoraC1Ev+0x278>)
 800b258:	9401      	str	r4, [sp, #4]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	460b      	mov	r3, r1
 800b25e:	4924      	ldr	r1, [pc, #144]	@ (800b2f0 <_ZN6RemoraC1Ev+0x27c>)
 800b260:	f001 f804 	bl	800c26c <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3324      	adds	r3, #36	@ 0x24
 800b268:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fed5 	bl	800b01e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800b274:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fdbe 	bl	800bdfa <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3320      	adds	r3, #32
 800b282:	4618      	mov	r0, r3
 800b284:	f001 f843 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b288:	4604      	mov	r4, r0
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 0214 	add.w	r2, r3, #20
 800b290:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f001 f845 	bl	800c326 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800b29c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f00f fcb4 	bl	801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800b2a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fed4 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fe71 	bl	800bf9e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3754      	adds	r7, #84	@ 0x54
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd90      	pop	{r4, r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	30000080 	.word	0x30000080
 800b2cc:	300000c0 	.word	0x300000c0
 800b2d0:	40013000 	.word	0x40013000
 800b2d4:	40000400 	.word	0x40000400
 800b2d8:	0802b2dc 	.word	0x0802b2dc
 800b2dc:	0802a4b0 	.word	0x0802a4b0
 800b2e0:	0802b2e0 	.word	0x0802b2e0
 800b2e4:	0802a4b8 	.word	0x0802a4b8
 800b2e8:	40000800 	.word	0x40000800
 800b2ec:	0802b2e4 	.word	0x0802b2e4
 800b2f0:	0802a4c0 	.word	0x0802a4c0

0800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800b2f4:	b5b0      	push	{r4, r5, r7, lr}
 800b2f6:	b08a      	sub	sp, #40	@ 0x28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]

    if (currentState != newState) {
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	78fa      	ldrb	r2, [r7, #3]
 800b306:	429a      	cmp	r2, r3
 800b308:	d021      	beq.n	800b34e <_ZN6Remora17transitionToStateENS_5StateE+0x5a>
        const char* stateNames[] = {
 800b30a:	4b13      	ldr	r3, [pc, #76]	@ (800b358 <_ZN6Remora17transitionToStateENS_5StateE+0x64>)
 800b30c:	f107 040c 	add.w	r4, r7, #12
 800b310:	461d      	mov	r5, r3
 800b312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b31a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            "Setup", "Start", "Idle", "Running", "Stop", "Reset", "System Reset"
        };
        printf("\n## Transitioning from %s state to %s state\n",
               stateNames[currentState], stateNames[newState]);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	781b      	ldrb	r3, [r3, #0]
        printf("\n## Transitioning from %s state to %s state\n",
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	3328      	adds	r3, #40	@ 0x28
 800b326:	443b      	add	r3, r7
 800b328:	f853 1c1c 	ldr.w	r1, [r3, #-28]
               stateNames[currentState], stateNames[newState]);
 800b32c:	78fb      	ldrb	r3, [r7, #3]
        printf("\n## Transitioning from %s state to %s state\n",
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	3328      	adds	r3, #40	@ 0x28
 800b332:	443b      	add	r3, r7
 800b334:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800b338:	461a      	mov	r2, r3
 800b33a:	4808      	ldr	r0, [pc, #32]	@ (800b35c <_ZN6Remora17transitionToStateENS_5StateE+0x68>)
 800b33c:	f01d ffbe 	bl	80292bc <iprintf>

        prevState = currentState;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	781a      	ldrb	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	701a      	strb	r2, [r3, #0]
    }
}
 800b34e:	bf00      	nop
 800b350:	3728      	adds	r7, #40	@ 0x28
 800b352:	46bd      	mov	sp, r7
 800b354:	bdb0      	pop	{r4, r5, r7, pc}
 800b356:	bf00      	nop
 800b358:	0802a538 	.word	0x0802a538
 800b35c:	0802a4c8 	.word	0x0802a4c8

0800b360 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	429a      	cmp	r2, r3
 800b372:	d002      	beq.n	800b37a <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800b374:	4808      	ldr	r0, [pc, #32]	@ (800b398 <_ZN6Remora16handleSetupStateEv+0x38>)
 800b376:	f01e f811 	bl	802939c <puts>
    }
    prevState = currentState;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	705a      	strb	r2, [r3, #1]

    loadModules();
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f996 	bl	800b6b4 <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800b388:	2101      	movs	r1, #1
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff ffb2 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	0802a554 	.word	0x0802a554

0800b39c <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	781a      	ldrb	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d002      	beq.n	800b3b6 <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800b3b0:	482e      	ldr	r0, [pc, #184]	@ (800b46c <_ZN6Remora16handleStartStateEv+0xd0>)
 800b3b2:	f01d fff3 	bl	802939c <puts>
    }
    prevState = currentState;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	781a      	ldrb	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	705a      	strb	r2, [r3, #1]

    for (const auto& module : onLoad) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3328      	adds	r3, #40	@ 0x28
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f000 ffbe 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f000 ffc9 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	60bb      	str	r3, [r7, #8]
 800b3d8:	e01a      	b.n	800b410 <_ZN6Remora16handleStartStateEv+0x74>
 800b3da:	f107 030c 	add.w	r3, r7, #12
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fffb 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800b3e4:	6138      	str	r0, [r7, #16]
        if (module) {
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f001 f802 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d008      	beq.n	800b406 <_ZN6Remora16handleStartStateEv+0x6a>
            module->configure();
 800b3f4:	6938      	ldr	r0, [r7, #16]
 800b3f6:	f001 f80d 	bl	800c414 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	3214      	adds	r2, #20
 800b400:	6812      	ldr	r2, [r2, #0]
 800b402:	4618      	mov	r0, r3
 800b404:	4790      	blx	r2
    for (const auto& module : onLoad) {
 800b406:	f107 030c 	add.w	r3, r7, #12
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 ffd4 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800b410:	f107 0208 	add.w	r2, r7, #8
 800b414:	f107 030c 	add.w	r3, r7, #12
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 ffb4 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1d9      	bne.n	800b3da <_ZN6Remora16handleStartStateEv+0x3e>
        }
    }

    if (!threadsRunning) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b42c:	f083 0301 	eor.w	r3, r3, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d011      	beq.n	800b45a <_ZN6Remora16handleStartStateEv+0xbe>
        startThread(servoThread, "SERVO");
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3320      	adds	r3, #32
 800b43a:	4a0d      	ldr	r2, [pc, #52]	@ (800b470 <_ZN6Remora16handleStartStateEv+0xd4>)
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f8a8 	bl	800b594 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	331c      	adds	r3, #28
 800b448:	4a0a      	ldr	r2, [pc, #40]	@ (800b474 <_ZN6Remora16handleStartStateEv+0xd8>)
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f8a1 	bl	800b594 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    transitionToState(ST_IDLE);
 800b45a:	2102      	movs	r1, #2
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff ff49 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b462:	bf00      	nop
 800b464:	3718      	adds	r7, #24
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	0802a570 	.word	0x0802a570
 800b470:	0802a58c 	.word	0x0802a58c
 800b474:	0802a594 	.word	0x0802a594

0800b478 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d002      	beq.n	800b492 <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800b48c:	480d      	ldr	r0, [pc, #52]	@ (800b4c4 <_ZN6Remora15handleIdleStateEv+0x4c>)
 800b48e:	f01d ff85 	bl	802939c <puts>
    }
    prevState = currentState;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	781a      	ldrb	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3314      	adds	r3, #20
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fdc0 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fcc9 	bl	800ae3e <_ZNK12CommsHandler9getStatusEv>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d003      	beq.n	800b4ba <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800b4b2:	2103      	movs	r1, #3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7ff ff1d 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b4ba:	bf00      	nop
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0802a59c 	.word	0x0802a59c

0800b4c8 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d002      	beq.n	800b4e2 <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800b4dc:	4813      	ldr	r0, [pc, #76]	@ (800b52c <_ZN6Remora18handleRunningStateEv+0x64>)
 800b4de:	f01d ff5d 	bl	802939c <puts>
    }
    prevState = currentState;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	781a      	ldrb	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 fd98 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff fca1 	bl	800ae3e <_ZNK12CommsHandler9getStatusEv>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f083 0301 	eor.w	r3, r3, #1
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800b508:	2105      	movs	r1, #5
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff fef2 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	7b1b      	ldrb	r3, [r3, #12]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800b51a:	2106      	movs	r1, #6
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff fee9 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0802a5b4 	.word	0x0802a5b4

0800b530 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	781a      	ldrb	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	429a      	cmp	r2, r3
 800b542:	d002      	beq.n	800b54a <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800b544:	480c      	ldr	r0, [pc, #48]	@ (800b578 <_ZN6Remora16handleResetStateEv+0x48>)
 800b546:	f01d ff29 	bl	802939c <puts>
    }
    prevState = currentState;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800b552:	480a      	ldr	r0, [pc, #40]	@ (800b57c <_ZN6Remora16handleResetStateEv+0x4c>)
 800b554:	f01d ff22 	bl	802939c <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2240      	movs	r2, #64	@ 0x40
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f82f 	bl	800b5c4 <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800b566:	2102      	movs	r1, #2
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff fec3 	bl	800b2f4 <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	0802a5d0 	.word	0x0802a5d0
 800b57c:	0802a5ec 	.word	0x0802a5ec

0800b580 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800b588:	f010 fc15 	bl	801bdb6 <HAL_NVIC_SystemReset>
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	4807      	ldr	r0, [pc, #28]	@ (800b5c0 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800b5a4:	f01d fe8a 	bl	80292bc <iprintf>
    thread->startThread();
 800b5a8:	68b8      	ldr	r0, [r7, #8]
 800b5aa:	f000 feb0 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f00f fbc1 	bl	801ad38 <_ZN9pruThread11startThreadEv>
}
 800b5b6:	bf00      	nop
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0802a604 	.word	0x0802a604

0800b5c4 <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	f01d ffeb 	bl	80295b0 <memset>
}
 800b5da:	bf00      	nop
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <_ZN6Remora3runEv>:

void Remora::run() {
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b06      	cmp	r3, #6
 800b5f2:	d829      	bhi.n	800b648 <_ZN6Remora3runEv+0x64>
 800b5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5fc <_ZN6Remora3runEv+0x18>)
 800b5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fa:	bf00      	nop
 800b5fc:	0800b619 	.word	0x0800b619
 800b600:	0800b621 	.word	0x0800b621
 800b604:	0800b629 	.word	0x0800b629
 800b608:	0800b631 	.word	0x0800b631
 800b60c:	0800b649 	.word	0x0800b649
 800b610:	0800b639 	.word	0x0800b639
 800b614:	0800b641 	.word	0x0800b641
            case ST_SETUP:
                handleSetupState();
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff fea1 	bl	800b360 <_ZN6Remora16handleSetupStateEv>
                break;
 800b61e:	e017      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff febb 	bl	800b39c <_ZN6Remora16handleStartStateEv>
                break;
 800b626:	e013      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff ff25 	bl	800b478 <_ZN6Remora15handleIdleStateEv>
                break;
 800b62e:	e00f      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff ff49 	bl	800b4c8 <_ZN6Remora18handleRunningStateEv>
                break;
 800b636:	e00b      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff ff79 	bl	800b530 <_ZN6Remora16handleResetStateEv>
                break;
 800b63e:	e007      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff ff9d 	bl	800b580 <_ZN6Remora19handleSysResetStateEv>
                break;
 800b646:	e003      	b.n	800b650 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800b648:	4806      	ldr	r0, [pc, #24]	@ (800b664 <_ZN6Remora3runEv+0x80>)
 800b64a:	f01d fea7 	bl	802939c <puts>
                break;
 800b64e:	bf00      	nop
        }
        comms->tasks();
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3314      	adds	r3, #20
 800b654:	4618      	mov	r0, r3
 800b656:	f000 fce5 	bl	800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b65a:	4603      	mov	r3, r0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f005 f857 	bl	8010710 <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800b662:	e7c3      	b.n	800b5ec <_ZN6Remora3runEv+0x8>
 800b664:	0802a61c 	.word	0x0802a61c

0800b668 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	3304      	adds	r3, #4
 800b682:	4619      	mov	r1, r3
 800b684:	4610      	mov	r0, r2
 800b686:	f000 ff16 	bl	800c4b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7ff ffdf 	bl	800b668 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800b6b4:	b5b0      	push	{r4, r5, r7, lr}
 800b6b6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800b6ba:	af04      	add	r7, sp, #16
 800b6bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b6c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b6c4:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800b6c6:	f006 fc9b 	bl	8012000 <_ZN13ModuleFactory11getInstanceEv>
 800b6ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800b6ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b6d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3310      	adds	r3, #16
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 fea6 	bl	800c42c <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b6e6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fb fbf1 	bl	8006ed4 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800b6f2:	f107 0318 	add.w	r3, r7, #24
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff fa3a 	bl	800ab70 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800b702:	e266      	b.n	800bbd2 <_ZN6Remora11loadModulesEv+0x51e>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800b704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b708:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800b70c:	f107 0118 	add.w	r1, r7, #24
 800b710:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b714:	4618      	mov	r0, r3
 800b716:	f000 fe95 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b71a:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800b71e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b722:	4618      	mov	r0, r3
 800b724:	f001 fb79 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b728:	4602      	mov	r2, r0
 800b72a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800b72e:	4611      	mov	r1, r2
 800b730:	4618      	mov	r0, r3
 800b732:	f001 fb7d 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b736:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b73a:	49c3      	ldr	r1, [pc, #780]	@ (800ba48 <_ZN6Remora11loadModulesEv+0x394>)
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fc fc5c 	bl	8007ffa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b742:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800b746:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b750:	cb0c      	ldmia	r3, {r2, r3}
 800b752:	4620      	mov	r0, r4
 800b754:	f001 fb84 	bl	800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b758:	f107 0320 	add.w	r3, r7, #32
 800b75c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b760:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b764:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b768:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b76c:	f002 f8df 	bl	800d92e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b770:	4604      	mov	r4, r0
 800b772:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b776:	f002 f8ea 	bl	800d94e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b77a:	4602      	mov	r2, r0
 800b77c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b780:	4621      	mov	r1, r4
 800b782:	4618      	mov	r0, r3
 800b784:	f7fa f855 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b788:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b78a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b78e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b792:	f7ff fb06 	bl	800ada2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b796:	4603      	mov	r3, r0
 800b798:	bf00      	nop
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d04e      	beq.n	800b83c <_ZN6Remora11loadModulesEv+0x188>
 800b79e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b7a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800b7a6:	f107 0118 	add.w	r1, r7, #24
 800b7aa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fe48 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b7b4:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800b7b8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fb2c 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f001 fb30 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b7d0:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b7d4:	499d      	ldr	r1, [pc, #628]	@ (800ba4c <_ZN6Remora11loadModulesEv+0x398>)
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 fb61 	bl	800ce9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b7dc:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800b7e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b7ea:	cb0c      	ldmia	r3, {r2, r3}
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f001 fb37 	bl	800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b7f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b7f6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800b7fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800b7fe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b802:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b806:	f002 f892 	bl	800d92e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b80a:	4604      	mov	r4, r0
 800b80c:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b810:	f002 f89d 	bl	800d94e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b814:	4602      	mov	r2, r0
 800b816:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b81a:	4621      	mov	r1, r4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fa f808 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b822:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b824:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b82c:	f7ff fab9 	bl	800ada2 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b830:	4603      	mov	r3, r0
 800b832:	bf00      	nop
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <_ZN6Remora11loadModulesEv+0x188>
 800b838:	2301      	movs	r3, #1
 800b83a:	e000      	b.n	800b83e <_ZN6Remora11loadModulesEv+0x18a>
 800b83c:	2300      	movs	r3, #0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f000 81c2 	beq.w	800bbc8 <_ZN6Remora11loadModulesEv+0x514>
            const char* threadName = modules[i]["Thread"];
 800b844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b848:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800b84c:	f107 0118 	add.w	r1, r7, #24
 800b850:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fdf5 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b85a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800b85e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b862:	4618      	mov	r0, r3
 800b864:	f001 fad9 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b868:	4602      	mov	r2, r0
 800b86a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800b86e:	4611      	mov	r1, r2
 800b870:	4618      	mov	r0, r3
 800b872:	f001 fadd 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b876:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800b87a:	4973      	ldr	r1, [pc, #460]	@ (800ba48 <_ZN6Remora11loadModulesEv+0x394>)
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fc fbbc 	bl	8007ffa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b882:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800b886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800b890:	cb0c      	ldmia	r3, {r2, r3}
 800b892:	4620      	mov	r0, r4
 800b894:	f001 fae4 	bl	800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b898:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fde1 	bl	800c464 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800b8a2:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800b8a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b8ae:	f107 0118 	add.w	r1, r7, #24
 800b8b2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 fdc4 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b8bc:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800b8c0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 faa8 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 faac 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b8d8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b8dc:	495b      	ldr	r1, [pc, #364]	@ (800ba4c <_ZN6Remora11loadModulesEv+0x398>)
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f001 fadd 	bl	800ce9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b8e4:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800b8e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b8f2:	cb0c      	ldmia	r3, {r2, r3}
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f001 fab3 	bl	800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b8fa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 fdb0 	bl	800c464 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800b904:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800b908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b90c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800b914:	494e      	ldr	r1, [pc, #312]	@ (800ba50 <_ZN6Remora11loadModulesEv+0x39c>)
 800b916:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800b91a:	f7f4 fce1 	bl	80002e0 <strcmp>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10b      	bne.n	800b93c <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800b924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b928:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b934:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e012      	b.n	800b962 <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800b93c:	4945      	ldr	r1, [pc, #276]	@ (800ba54 <_ZN6Remora11loadModulesEv+0x3a0>)
 800b93e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800b942:	f7f4 fccd 	bl	80002e0 <strcmp>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10a      	bne.n	800b962 <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800b94c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b950:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b95c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b960:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800b962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96a:	f107 0118 	add.w	r1, r7, #24
 800b96e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fd66 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b978:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800b97c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800b980:	4618      	mov	r0, r3
 800b982:	f001 fa4a 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b986:	4602      	mov	r2, r0
 800b988:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f001 fa4e 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b994:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800b998:	492f      	ldr	r1, [pc, #188]	@ (800ba58 <_ZN6Remora11loadModulesEv+0x3a4>)
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 fab4 	bl	800cf08 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b9a0:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800b9a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800b9ae:	cb0c      	ldmia	r3, {r2, r3}
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f001 fa55 	bl	800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b9b6:	f107 0214 	add.w	r2, r7, #20
 800b9ba:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 fd5b 	bl	800c47c <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800b9c6:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800b9ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b9ce:	f107 0118 	add.w	r1, r7, #24
 800b9d2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 fd34 	bl	800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b9dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800b9e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fd56 	bl	800c498 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800b9ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b9f0:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800b9f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b9f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9302      	str	r3, [sp, #8]
 800ba00:	466a      	mov	r2, sp
 800ba02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ba06:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba0a:	e882 0003 	stmia.w	r2, {r0, r1}
 800ba0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800ba12:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800ba16:	4629      	mov	r1, r5
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f006 f9ff 	bl	8011e1c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 fce5 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f083 0301 	eor.w	r3, r3, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d015      	beq.n	800ba60 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800ba34:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800ba38:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800ba3c:	4807      	ldr	r0, [pc, #28]	@ (800ba5c <_ZN6Remora11loadModulesEv+0x3a8>)
 800ba3e:	f01d fc3d 	bl	80292bc <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800ba42:	2400      	movs	r4, #0
 800ba44:	e0ba      	b.n	800bbbc <_ZN6Remora11loadModulesEv+0x508>
 800ba46:	bf00      	nop
 800ba48:	0802a634 	.word	0x0802a634
 800ba4c:	0802a63c 	.word	0x0802a63c
 800ba50:	0802a4b8 	.word	0x0802a4b8
 800ba54:	0802a4b0 	.word	0x0802a4b0
 800ba58:	0802a644 	.word	0x0802a644
 800ba5c:	0802a650 	.word	0x0802a650
			}

            bool _modPost = _mod->getUsesModulePost();
 800ba60:	f107 030c 	add.w	r3, r7, #12
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fcd5 	bl	800c414 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	3218      	adds	r2, #24
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	4790      	blx	r2
 800ba76:	4603      	mov	r3, r0
 800ba78:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800ba7c:	4960      	ldr	r1, [pc, #384]	@ (800bc00 <_ZN6Remora11loadModulesEv+0x54c>)
 800ba7e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800ba82:	f7f4 fc2d 	bl	80002e0 <strcmp>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d13e      	bne.n	800bb0a <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800ba8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3320      	adds	r3, #32
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fc38 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800ba9e:	4604      	mov	r4, r0
 800baa0:	f107 020c 	add.w	r2, r7, #12
 800baa4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fdf2 	bl	800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bab0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bab4:	4619      	mov	r1, r3
 800bab6:	4620      	mov	r0, r4
 800bab8:	f00f f8aa 	bl	801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800babc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff faca 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bac6:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d075      	beq.n	800bbba <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bad2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3320      	adds	r3, #32
 800bada:	4618      	mov	r0, r3
 800badc:	f000 fc17 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bae0:	4604      	mov	r4, r0
 800bae2:	f107 020c 	add.w	r2, r7, #12
 800bae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f7ff fdd1 	bl	800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800baf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800baf6:	4619      	mov	r1, r3
 800baf8:	4620      	mov	r0, r4
 800bafa:	f00f f8a5 	bl	801ac48 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bafe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff faa9 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bb08:	e057      	b.n	800bbba <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800bb0a:	493e      	ldr	r1, [pc, #248]	@ (800bc04 <_ZN6Remora11loadModulesEv+0x550>)
 800bb0c:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bb10:	f7f4 fbe6 	bl	80002e0 <strcmp>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d13e      	bne.n	800bb98 <_ZN6Remora11loadModulesEv+0x4e4>
                baseThread->registerModule(_mod);
 800bb1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	331c      	adds	r3, #28
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 fbf1 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	f107 020c 	add.w	r2, r7, #12
 800bb32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fdab 	bl	800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bb3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb42:	4619      	mov	r1, r3
 800bb44:	4620      	mov	r0, r4
 800bb46:	f00f f863 	bl	801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bb4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fa83 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bb54:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d02e      	beq.n	800bbba <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bb5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3320      	adds	r3, #32
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 fbd0 	bl	800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	f107 020c 	add.w	r2, r7, #12
 800bb74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff fd8a 	bl	800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bb80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb84:	4619      	mov	r1, r3
 800bb86:	4620      	mov	r0, r4
 800bb88:	f00f f85e 	bl	801ac48 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bb8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fa62 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bb96:	e010      	b.n	800bbba <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else {
                onLoad.push_back(move(_mod));
 800bb98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800bba6:	f107 030c 	add.w	r3, r7, #12
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fc9a 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 fca0 	bl	800c4fa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>
            }
        }
 800bbba:	2401      	movs	r4, #1
 800bbbc:	f107 030c 	add.w	r3, r7, #12
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff fa4a 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bbc6:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800bbc8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bbcc:	3301      	adds	r3, #1
 800bbce:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800bbd2:	f107 0318 	add.w	r3, r7, #24
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe ffdb 	bl	800ab92 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	bf34      	ite	cc
 800bbe6:	2301      	movcc	r3, #1
 800bbe8:	2300      	movcs	r3, #0
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f47f ad89 	bne.w	800b704 <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	0802a4b8 	.word	0x0802a4b8
 800bc04:	0802a4b0 	.word	0x0802a4b0

0800bc08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
      { delete this; }
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d005      	beq.n	800bc22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	4798      	blx	r3
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d201      	bcs.n	800bc44 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	e000      	b.n	800bc46 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800bc44:	687b      	ldr	r3, [r7, #4]
    }
 800bc46:	4618      	mov	r0, r3
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  }
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b082      	sub	sp, #8
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800bc88:	6838      	ldr	r0, [r7, #0]
 800bc8a:	f000 fcbd 	bl	800c608 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fc98 	bl	800c5c8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800bc98:	6838      	ldr	r0, [r7, #0]
 800bc9a:	f000 fcca 	bl	800c632 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fcd3 	bl	800c64c <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fcc3 	bl	800c632 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800bcac:	687b      	ldr	r3, [r7, #4]
      }
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fdd7 	bl	800a87e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fcbc 	bl	800c662 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bcea:	4603      	mov	r3, r0
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fcbd 	bl	800c67e <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff ffeb 	bl	800bcf4 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff ffe8 	bl	800bd0e <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bd48:	b590      	push	{r4, r7, lr}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 fca0 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bd58:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00c      	beq.n	800bd7c <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fca5 	bl	800c6b2 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fcae 	bl	800c6cc <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800bd70:	4603      	mov	r3, r0
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4619      	mov	r1, r3
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 fcc6 	bl	800c708 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
      }
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd90      	pop	{r4, r7, pc}

0800bd8c <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fcc9 	bl	800c72e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b082      	sub	sp, #8
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fccd 	bl	800c750 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff ffeb 	bl	800bda6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff ffe8 	bl	800bdc0 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bdfa:	b590      	push	{r4, r7, lr}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fcb0 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800be0a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00c      	beq.n	800be2e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fcb5 	bl	800c784 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800be1a:	4604      	mov	r4, r0
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f000 fcbe 	bl	800c79e <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800be22:	4603      	mov	r3, r0
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4619      	mov	r1, r3
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 fcda 	bl	800c7e2 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
      }
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd90      	pop	{r4, r7, pc}

0800be3e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fcde 	bl	800c808 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fce6 	bl	800c820 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800be5e:	b580      	push	{r7, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fcee 	bl	800c848 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800be8e:	461a      	mov	r2, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fce4 	bl	800c85e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7ff f86a 	bl	800af72 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800bea8:	b5b0      	push	{r4, r5, r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681c      	ldr	r4, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 fce2 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800bec0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bec2:	461a      	mov	r2, r3
 800bec4:	4629      	mov	r1, r5
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 fce7 	bl	800c89a <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ffd1 	bl	800be76 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bdb0      	pop	{r4, r5, r7, pc}

0800bede <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800bede:	b590      	push	{r4, r7, lr}
 800bee0:	b083      	sub	sp, #12
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bee8:	206c      	movs	r0, #108	@ 0x6c
 800beea:	f01c fb3d 	bl	8028568 <_Znwj>
 800beee:	4603      	mov	r3, r0
 800bef0:	461c      	mov	r4, r3
 800bef2:	6838      	ldr	r0, [r7, #0]
 800bef4:	f000 fcdf 	bl	800c8b6 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800bef8:	4603      	mov	r3, r0
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4619      	mov	r1, r3
 800befe:	4620      	mov	r0, r4
 800bf00:	f7fa feda 	bl	8006cb8 <_ZN17JsonConfigHandlerC1EP6Remora>
 800bf04:	4621      	mov	r1, r4
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fcf0 	bl	800c8ec <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd90      	pop	{r4, r7, pc}

0800bf14 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800bf1e:	6838      	ldr	r0, [r7, #0]
 800bf20:	f000 fd13 	bl	800c94a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800bf24:	4603      	mov	r3, r0
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fcee 	bl	800c90a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800bf2e:	6838      	ldr	r0, [r7, #0]
 800bf30:	f000 fd20 	bl	800c974 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800bf34:	4603      	mov	r3, r0
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fd29 	bl	800c98e <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fd19 	bl	800c974 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800bf42:	687b      	ldr	r3, [r7, #4]
      }
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bf5a:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800bf5e:	f01c fb03 	bl	8028568 <_Znwj>
 800bf62:	4603      	mov	r3, r0
 800bf64:	461e      	mov	r6, r3
 800bf66:	68b8      	ldr	r0, [r7, #8]
 800bf68:	f000 fd1c 	bl	800c9a4 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	681c      	ldr	r4, [r3, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fd22 	bl	800c9ba <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800bf76:	4603      	mov	r3, r0
 800bf78:	681d      	ldr	r5, [r3, #0]
 800bf7a:	6838      	ldr	r0, [r7, #0]
 800bf7c:	f000 fd28 	bl	800c9d0 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf80:	4603      	mov	r3, r0
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	462a      	mov	r2, r5
 800bf86:	4621      	mov	r1, r4
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7f4 ff17 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800bf8e:	4631      	mov	r1, r6
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 fd38 	bl	800ca06 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf9e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bf9e:	b590      	push	{r4, r7, lr}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fd3b 	bl	800ca24 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800bfae:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00c      	beq.n	800bfd2 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fd40 	bl	800ca3e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 fd49 	bl	800ca58 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 fd4e 	bl	800ca6e <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
      }
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd90      	pop	{r4, r7, pc}

0800bfe2 <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800bfea:	f107 030c 	add.w	r3, r7, #12
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fd4d 	bl	800ca90 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800bffe:	b590      	push	{r4, r7, lr}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800c008:	687c      	ldr	r4, [r7, #4]
 800c00a:	6838      	ldr	r0, [r7, #0]
 800c00c:	f000 fd4f 	bl	800caae <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800c010:	4603      	mov	r3, r0
 800c012:	4619      	mov	r1, r3
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fd55 	bl	800cac4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800c01a:	687b      	ldr	r3, [r7, #4]
      }
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	bd90      	pop	{r4, r7, pc}

0800c024 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fd68 	bl	800cb02 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c032:	4603      	mov	r3, r0
      }
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c052:	b580      	push	{r7, lr}
 800c054:	b084      	sub	sp, #16
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	60b9      	str	r1, [r7, #8]
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68b9      	ldr	r1, [r7, #8]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fd70 	bl	800cb4a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800c074:	b5b0      	push	{r4, r5, r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800c07e:	687c      	ldr	r4, [r7, #4]
 800c080:	6838      	ldr	r0, [r7, #0]
 800c082:	f000 fd4a 	bl	800cb1a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800c086:	4605      	mov	r5, r0
 800c088:	6838      	ldr	r0, [r7, #0]
 800c08a:	f000 fcd8 	bl	800ca3e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c08e:	4603      	mov	r3, r0
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fd4f 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	4629      	mov	r1, r5
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7ff ffd8 	bl	800c052 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bdb0      	pop	{r4, r5, r7, pc}

0800c0ac <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fd5d 	bl	800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c0bc:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00c      	beq.n	800c0e0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fd62 	bl	800cb90 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f000 fd6b 	bl	800cbaa <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 fd70 	bl	800cbc0 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
      }
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd90      	pop	{r4, r7, pc}

0800c0f0 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	b08e      	sub	sp, #56	@ 0x38
 800c0f6:	af02      	add	r7, sp, #8
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
 800c0fe:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c100:	2044      	movs	r0, #68	@ 0x44
 800c102:	f01c fa31 	bl	8028568 <_Znwj>
 800c106:	4603      	mov	r3, r0
 800c108:	4698      	mov	r8, r3
 800c10a:	68b8      	ldr	r0, [r7, #8]
 800c10c:	f000 fd69 	bl	800cbe2 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c110:	4604      	mov	r4, r0
 800c112:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c116:	4618      	mov	r0, r3
 800c118:	f01c fa37 	bl	802858a <_ZNSaIcEC1Ev>
 800c11c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c120:	f107 0314 	add.w	r3, r7, #20
 800c124:	4621      	mov	r1, r4
 800c126:	4618      	mov	r0, r3
 800c128:	f7fb fb4c 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fd63 	bl	800cbf8 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c132:	4603      	mov	r3, r0
 800c134:	681d      	ldr	r5, [r3, #0]
 800c136:	6838      	ldr	r0, [r7, #0]
 800c138:	f000 fd69 	bl	800cc0e <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c142:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c144:	f000 fd6e 	bl	800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c148:	4603      	mov	r3, r0
 800c14a:	681c      	ldr	r4, [r3, #0]
 800c14c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c14e:	f000 fd74 	bl	800cc3a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c152:	4603      	mov	r3, r0
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f107 0114 	add.w	r1, r7, #20
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	9400      	str	r4, [sp, #0]
 800c160:	4633      	mov	r3, r6
 800c162:	462a      	mov	r2, r5
 800c164:	4640      	mov	r0, r8
 800c166:	f00e fc97 	bl	801aa98 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c16a:	4641      	mov	r1, r8
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 fd7f 	bl	800cc70 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c172:	f107 0314 	add.w	r3, r7, #20
 800c176:	4618      	mov	r0, r3
 800c178:	f01c faf1 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c17c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c180:	4618      	mov	r0, r3
 800c182:	f01c fa03 	bl	802858c <_ZNSaIcED1Ev>
 800c186:	bf00      	nop
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	3730      	adds	r7, #48	@ 0x30
 800c18c:	46bd      	mov	sp, r7
 800c18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c192 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c19c:	6838      	ldr	r0, [r7, #0]
 800c19e:	f000 fd96 	bl	800ccce <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fd71 	bl	800cc8e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c1ac:	6838      	ldr	r0, [r7, #0]
 800c1ae:	f000 fda3 	bl	800ccf8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fdac 	bl	800cd12 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fd9c 	bl	800ccf8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c1c0:	687b      	ldr	r3, [r7, #4]
      }
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ce:	b08e      	sub	sp, #56	@ 0x38
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c1da:	2044      	movs	r0, #68	@ 0x44
 800c1dc:	f01c f9c4 	bl	8028568 <_Znwj>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	4698      	mov	r8, r3
 800c1e4:	68b8      	ldr	r0, [r7, #8]
 800c1e6:	f000 fd9f 	bl	800cd28 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f01c f9ca 	bl	802858a <_ZNSaIcEC1Ev>
 800c1f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c1fa:	f107 0314 	add.w	r3, r7, #20
 800c1fe:	4621      	mov	r1, r4
 800c200:	4618      	mov	r0, r3
 800c202:	f7fb fadf 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fcf6 	bl	800cbf8 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c20c:	4603      	mov	r3, r0
 800c20e:	681d      	ldr	r5, [r3, #0]
 800c210:	6838      	ldr	r0, [r7, #0]
 800c212:	f000 fcfc 	bl	800cc0e <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c216:	4603      	mov	r3, r0
 800c218:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c21c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c21e:	f000 fd01 	bl	800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c222:	4603      	mov	r3, r0
 800c224:	681c      	ldr	r4, [r3, #0]
 800c226:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c228:	f000 fd07 	bl	800cc3a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c22c:	4603      	mov	r3, r0
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	b2db      	uxtb	r3, r3
 800c232:	f107 0114 	add.w	r1, r7, #20
 800c236:	9301      	str	r3, [sp, #4]
 800c238:	9400      	str	r4, [sp, #0]
 800c23a:	4633      	mov	r3, r6
 800c23c:	462a      	mov	r2, r5
 800c23e:	4640      	mov	r0, r8
 800c240:	f00e fc2a 	bl	801aa98 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c244:	4641      	mov	r1, r8
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 fd12 	bl	800cc70 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c24c:	f107 0314 	add.w	r3, r7, #20
 800c250:	4618      	mov	r0, r3
 800c252:	f01c fa84 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c256:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c25a:	4618      	mov	r0, r3
 800c25c:	f01c f996 	bl	802858c <_ZNSaIcED1Ev>
 800c260:	bf00      	nop
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	3730      	adds	r7, #48	@ 0x30
 800c266:	46bd      	mov	sp, r7
 800c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c26c <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	b08e      	sub	sp, #56	@ 0x38
 800c272:	af02      	add	r7, sp, #8
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c27c:	2044      	movs	r0, #68	@ 0x44
 800c27e:	f01c f973 	bl	8028568 <_Znwj>
 800c282:	4603      	mov	r3, r0
 800c284:	4698      	mov	r8, r3
 800c286:	68b8      	ldr	r0, [r7, #8]
 800c288:	f000 fd59 	bl	800cd3e <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c28c:	4604      	mov	r4, r0
 800c28e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c292:	4618      	mov	r0, r3
 800c294:	f01c f979 	bl	802858a <_ZNSaIcEC1Ev>
 800c298:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c29c:	f107 0314 	add.w	r3, r7, #20
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fb fa8e 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fca5 	bl	800cbf8 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	681d      	ldr	r5, [r3, #0]
 800c2b2:	6838      	ldr	r0, [r7, #0]
 800c2b4:	f000 fcab 	bl	800cc0e <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2be:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c2c0:	f000 fcb0 	bl	800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	681c      	ldr	r4, [r3, #0]
 800c2c8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c2ca:	f000 fcb6 	bl	800cc3a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	f107 0114 	add.w	r1, r7, #20
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	9400      	str	r4, [sp, #0]
 800c2dc:	4633      	mov	r3, r6
 800c2de:	462a      	mov	r2, r5
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	f00e fbd9 	bl	801aa98 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fcc1 	bl	800cc70 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c2ee:	f107 0314 	add.w	r3, r7, #20
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f01c fa33 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c2f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f01c f945 	bl	802858c <_ZNSaIcED1Ev>
 800c302:	bf00      	nop
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	3730      	adds	r7, #48	@ 0x30
 800c308:	46bd      	mov	sp, r7
 800c30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c30e <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
	return get();
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff fcdf 	bl	800bcda <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800c31c:	4603      	mov	r3, r0
      }
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fd0c 	bl	800cd54 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fd12 	bl	800cd80 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	1d1a      	adds	r2, r3, #4
 800c372:	f107 030c 	add.w	r3, r7, #12
 800c376:	4611      	mov	r1, r2
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 fd01 	bl	800cd80 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fd04 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c398:	4603      	mov	r3, r0
 800c39a:	681c      	ldr	r4, [r3, #0]
 800c39c:	6838      	ldr	r0, [r7, #0]
 800c39e:	f000 fcff 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	429c      	cmp	r4, r3
 800c3a8:	bf14      	ite	ne
 800c3aa:	2301      	movne	r3, #1
 800c3ac:	2300      	moveq	r3, #0
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd90      	pop	{r4, r7, pc}

0800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f103 0208 	add.w	r2, r3, #8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	601a      	str	r2, [r3, #0]
	return *this;
 800c3cc:	687b      	ldr	r3, [r7, #4]
      }
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800c3f2:	b480      	push	{r7}
 800c3f4:	b083      	sub	sp, #12
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bf14      	ite	ne
 800c402:	2301      	movne	r3, #1
 800c404:	2300      	moveq	r3, #0
 800c406:	b2db      	uxtb	r3, r3
 800c408:	4618      	mov	r0, r3
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fcca 	bl	800cdb6 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c422:	4603      	mov	r3, r0
      }
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	return get();
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fcca 	bl	800cdce <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800c43a:	4603      	mov	r3, r0
      }
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	ca06      	ldmia	r2, {r1, r2}
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 fcc6 	bl	800cde8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fd29 	bl	800cec4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800c472:	4603      	mov	r3, r0
  }
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
    this->set(src);
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fd50 	bl	800cf2e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800c48e:	687b      	ldr	r3, [r7, #4]
  }
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
    return as<T>();
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fd4f 	bl	800cf4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800c4ac:	bf00      	nop
  }
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d004      	beq.n	800c4da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe f9c3 	bl	800a860 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c504:	6838      	ldr	r0, [r7, #0]
 800c506:	f7ff ffed 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800c50a:	4603      	mov	r3, r0
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fd3f 	bl	800cf92 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
      { }
 800c524:	4a04      	ldr	r2, [pc, #16]	@ (800c538 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	0802b30c 	.word	0x0802b30c

0800c53c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
      { }
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ffe9 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c54a:	210c      	movs	r1, #12
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f01b fffa 	bl	8028546 <_ZdlPvj>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b086      	sub	sp, #24
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	4638      	mov	r0, r7
 800c566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800c56a:	463b      	mov	r3, r7
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f8 fdb0 	bl	80050d2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800c578:	2300      	movs	r3, #0
 800c57a:	e021      	b.n	800c5c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800c57c:	463b      	mov	r3, r7
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fe f9fe 	bl	800a980 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00a      	beq.n	800c5a0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800c58a:	463b      	mov	r3, r7
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f8 fdbd 	bl	800510c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800c592:	4603      	mov	r3, r0
 800c594:	4619      	mov	r1, r3
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f7fe faa0 	bl	800aadc <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e00f      	b.n	800c5c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800c5a0:	6a38      	ldr	r0, [r7, #32]
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5a6:	f000 fd27 	bl	800cff8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800c5aa:	6178      	str	r0, [r7, #20]
  if (dup) {
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d005      	beq.n	800c5be <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800c5b2:	6979      	ldr	r1, [r7, #20]
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7f8 fffa 	bl	80055ae <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e000      	b.n	800c5c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 facf 	bl	800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c5de:	683c      	ldr	r4, [r7, #0]
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fac8 	bl	800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d007      	beq.n	800c600 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f81e 	bl	800c632 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	68f9      	ldr	r1, [r7, #12]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fae0 	bl	800cbc0 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800c600:	bf00      	nop
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	bd90      	pop	{r4, r7, pc}

0800c608 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fab0 	bl	800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c616:	4603      	mov	r3, r0
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 faaa 	bl	800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c622:	4603      	mov	r3, r0
 800c624:	2200      	movs	r2, #0
 800c626:	601a      	str	r2, [r3, #0]
	return __p;
 800c628:	68fb      	ldr	r3, [r7, #12]
      }
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fd01 	bl	800d044 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c642:	4603      	mov	r3, r0
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fcf5 	bl	800d05c <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c672:	4603      	mov	r3, r0
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fcf4 	bl	800d076 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fcf7 	bl	800d096 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3708      	adds	r7, #8
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 f959 	bl	800c974 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b082      	sub	sp, #8
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3320      	adds	r3, #32
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fa8f 	bl	800ac12 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f01c f830 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c708:	b590      	push	{r4, r7, lr}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c712:	683c      	ldr	r4, [r7, #0]
 800c714:	2c00      	cmp	r4, #0
 800c716:	d006      	beq.n	800c726 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800c718:	4620      	mov	r0, r4
 800c71a:	f7ff ffe2 	bl	800c6e2 <_ZN17JsonConfigHandlerD1Ev>
 800c71e:	216c      	movs	r1, #108	@ 0x6c
 800c720:	4620      	mov	r0, r4
 800c722:	f01b ff10 	bl	8028546 <_ZdlPvj>
      }
 800c726:	bf00      	nop
 800c728:	370c      	adds	r7, #12
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}

0800c72e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3304      	adds	r3, #4
 800c740:	4618      	mov	r0, r3
 800c742:	f000 fcb5 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fcb6 	bl	800d0cc <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fcb9 	bl	800d0ec <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c77a:	4603      	mov	r3, r0
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fab2 	bl	800ccf8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c794:	4603      	mov	r3, r0
 800c796:	4618      	mov	r0, r3
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3338      	adds	r3, #56	@ 0x38
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff fb71 	bl	800bea8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	332c      	adds	r3, #44	@ 0x2c
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff fb6c 	bl	800bea8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f01b ffc3 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c7e2:	b590      	push	{r4, r7, lr}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c7ec:	683c      	ldr	r4, [r7, #0]
 800c7ee:	2c00      	cmp	r4, #0
 800c7f0:	d006      	beq.n	800c800 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f7ff ffde 	bl	800c7b4 <_ZN9pruThreadD1Ev>
 800c7f8:	2144      	movs	r1, #68	@ 0x44
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f01b fea3 	bl	8028546 <_ZdlPvj>
      }
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	bd90      	pop	{r4, r7, pc}

0800c808 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fc78 	bl	800d106 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	605a      	str	r2, [r3, #4]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	609a      	str	r2, [r3, #8]
	{ }
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr

0800c85e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
	if (__p)
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fc50 	bl	800d11c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800c87c:	bf00      	nop
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	370c      	adds	r7, #12
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b084      	sub	sp, #16
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	60b9      	str	r1, [r7, #8]
 800c8a4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800c8a6:	68b9      	ldr	r1, [r7, #8]
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f000 fc46 	bl	800d13a <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800c8ae:	bf00      	nop
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8b6:	b480      	push	{r7}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	683a      	ldr	r2, [r7, #0]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 fc39 	bl	800d154 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff ffe6 	bl	800c8cc <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c90a:	b590      	push	{r4, r7, lr}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff febf 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c91a:	4603      	mov	r3, r0
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c920:	683c      	ldr	r4, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7ff feb8 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c928:	4603      	mov	r3, r0
 800c92a:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d007      	beq.n	800c942 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f81e 	bl	800c974 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c938:	4603      	mov	r3, r0
 800c93a:	68f9      	ldr	r1, [r7, #12]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff fee3 	bl	800c708 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800c942:	bf00      	nop
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	bd90      	pop	{r4, r7, pc}

0800c94a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fea0 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c958:	4603      	mov	r3, r0
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7ff fe9a 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c964:	4603      	mov	r3, r0
 800c966:	2200      	movs	r2, #0
 800c968:	601a      	str	r2, [r3, #0]
	return __p;
 800c96a:	68fb      	ldr	r3, [r7, #12]
      }
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fbfc 	bl	800d17c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c984:	4603      	mov	r3, r0
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fbcc 	bl	800d194 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7ff ffe6 	bl	800c9e6 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fbc4 	bl	800d1bc <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f000 fbc4 	bl	800d1d6 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4618      	mov	r0, r3
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d004      	beq.n	800ca88 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	3204      	adds	r2, #4
 800ca82:	6812      	ldr	r2, [r2, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	4790      	blx	r2
      }
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fba6 	bl	800d1f0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800caae:	b480      	push	{r7}
 800cab0:	b083      	sub	sp, #12
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800cace:	6838      	ldr	r0, [r7, #0]
 800cad0:	f000 fba8 	bl	800d224 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800cad4:	4602      	mov	r2, r0
 800cad6:	f107 0308 	add.w	r3, r7, #8
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 fbac 	bl	800d23a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fbc4 	bl	800d276 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800caee:	f107 0308 	add.w	r3, r7, #8
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe fa22 	bl	800af3c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800caf8:	687b      	ldr	r3, [r7, #4]
      }
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fbca 	bl	800d2a4 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cb10:	4603      	mov	r3, r0
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 fbc9 	bl	800d2bc <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800cb4a:	b590      	push	{r4, r7, lr}
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cb56:	68fc      	ldr	r4, [r7, #12]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff ffeb 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	f107 0308 	add.w	r3, r7, #8
 800cb64:	4619      	mov	r1, r3
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 fbbd 	bl	800d2e6 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd90      	pop	{r4, r7, pc}

0800cb76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fbc9 	bl	800d318 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cb86:	4603      	mov	r3, r0
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fd49 	bl	800c632 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800cba0:	4603      	mov	r3, r0
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cbaa:	b480      	push	{r7}
 800cbac:	b083      	sub	sp, #12
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	3204      	adds	r2, #4
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	4790      	blx	r2
      }
 800cbda:	bf00      	nop
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc0e:	b480      	push	{r7}
 800cc10:	b083      	sub	sp, #12
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fb66 	bl	800d332 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff ffe6 	bl	800cc50 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800cc8e:	b590      	push	{r4, r7, lr}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff fd66 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800cca4:	683c      	ldr	r4, [r7, #0]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7ff fd5f 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ccac:	4603      	mov	r3, r0
 800ccae:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d007      	beq.n	800ccc6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f81e 	bl	800ccf8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	68f9      	ldr	r1, [r7, #12]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff fd8e 	bl	800c7e2 <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800ccc6:	bf00      	nop
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd90      	pop	{r4, r7, pc}

0800ccce <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7ff fd47 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f7ff fd41 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
	return __p;
 800ccee:	68fb      	ldr	r3, [r7, #12]
      }
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fb29 	bl	800d35a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd12:	b480      	push	{r7}
 800cd14:	b083      	sub	sp, #12
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4618      	mov	r0, r3
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	1d1a      	adds	r2, r3, #4
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4610      	mov	r0, r2
 800cd72:	f7ff fba0 	bl	800c4b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	370c      	adds	r7, #12
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fad7 	bl	800d372 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fad6 	bl	800d38a <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cdde:	4603      	mov	r3, r0
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	1d38      	adds	r0, r7, #4
 800cdf2:	e880 0006 	stmia.w	r0, {r1, r2}
 800cdf6:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	1d3a      	adds	r2, r7, #4
 800cdfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce02:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	60da      	str	r2, [r3, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800ce1a:	b480      	push	{r7}
 800ce1c:	b083      	sub	sp, #12
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800ce22:	687b      	ldr	r3, [r7, #4]
  }
 800ce24:	4618      	mov	r0, r3
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	3304      	adds	r3, #4
 800ce40:	3204      	adds	r2, #4
 800ce42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce46:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	60da      	str	r2, [r3, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800ce60:	b082      	sub	sp, #8
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
 800ce6c:	f107 0110 	add.w	r1, r7, #16
 800ce70:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3304      	adds	r3, #4
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff ffd8 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3314      	adds	r3, #20
 800ce84:	f107 0210 	add.w	r2, r7, #16
 800ce88:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce9a:	b002      	add	sp, #8
 800ce9c:	4770      	bx	lr

0800ce9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800cea8:	6838      	ldr	r0, [r7, #0]
 800ceaa:	f000 fa7c 	bl	800d3a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f000 fa81 	bl	800d3bc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800ceba:	bf00      	nop
}
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b087      	sub	sp, #28
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800ced4:	6938      	ldr	r0, [r7, #16]
 800ced6:	f000 fd2a 	bl	800d92e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800ceda:	4604      	mov	r4, r0
 800cedc:	6938      	ldr	r0, [r7, #16]
 800cede:	f000 fd36 	bl	800d94e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800cee2:	4602      	mov	r2, r0
 800cee4:	f107 0308 	add.w	r3, r7, #8
 800cee8:	4621      	mov	r1, r4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7f8 fca1 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800cef0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800cef2:	f107 0308 	add.w	r3, r7, #8
 800cef6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cefa:	f7f9 f993 	bl	8006224 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800cefe:	4603      	mov	r3, r0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	371c      	adds	r7, #28
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd90      	pop	{r4, r7, pc}

0800cf08 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800cf12:	6838      	ldr	r0, [r7, #0]
 800cf14:	f000 fa61 	bl	800d3da <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fa66 	bl	800d3f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800cf24:	bf00      	nop
}
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa67 	bl	800d40e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800cf40:	4603      	mov	r3, r0
  }
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800cf4a:	b590      	push	{r4, r7, lr}
 800cf4c:	b087      	sub	sp, #28
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800cf5c:	6938      	ldr	r0, [r7, #16]
 800cf5e:	f000 ffd3 	bl	800df08 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800cf62:	4604      	mov	r4, r0
 800cf64:	6938      	ldr	r0, [r7, #16]
 800cf66:	f000 ffdf 	bl	800df28 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	f107 0308 	add.w	r3, r7, #8
 800cf70:	4621      	mov	r1, r4
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f8 fc88 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800cf78:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f107 0308 	add.w	r3, r7, #8
 800cf80:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cf84:	f7fd fde0 	bl	800ab48 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800cf88:	bf00      	nop
}
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	371c      	adds	r7, #28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd90      	pop	{r4, r7, pc}

0800cf92 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800cf92:	b5b0      	push	{r4, r5, r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d012      	beq.n	800cfce <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800cfa8:	687c      	ldr	r4, [r7, #4]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685d      	ldr	r5, [r3, #4]
 800cfae:	6838      	ldr	r0, [r7, #0]
 800cfb0:	f000 fa3c 	bl	800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 fa41 	bl	800d442 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	f103 0208 	add.w	r2, r3, #8
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	605a      	str	r2, [r3, #4]
 800cfcc:	e00c      	b.n	800cfe8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff f9c9 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	6838      	ldr	r0, [r7, #0]
 800cfd8:	f000 fa28 	bl	800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	461a      	mov	r2, r3
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fa40 	bl	800d468 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fab9 	bl	800d560 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>
 800cfee:	4603      	mov	r3, r0
#endif
      }
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bdb0      	pop	{r4, r5, r7, pc}

0800cff8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	4638      	mov	r0, r7
 800d002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800d006:	463b      	mov	r3, r7
 800d008:	4618      	mov	r0, r3
 800d00a:	f7f8 f862 	bl	80050d2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800d014:	2300      	movs	r3, #0
 800d016:	e011      	b.n	800d03c <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f103 0008 	add.w	r0, r3, #8
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	463b      	mov	r3, r7
 800d026:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d028:	f000 fab5 	bl	800d596 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800d02c:	6178      	str	r0, [r7, #20]
    if (!node)
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d102      	bne.n	800d03a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2201      	movs	r2, #1
 800d038:	711a      	strb	r2, [r3, #4]
    return node;
 800d03a:	697b      	ldr	r3, [r7, #20]
  }
 800d03c:	4618      	mov	r0, r3
 800d03e:	3718      	adds	r7, #24
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fae2 	bl	800d616 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d052:	4603      	mov	r3, r0
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fae1 	bl	800d62e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d06c:	4603      	mov	r3, r0
 800d06e:	4618      	mov	r0, r3
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d076:	b580      	push	{r7, lr}
 800d078:	b082      	sub	sp, #8
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fae1 	bl	800d646 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4618      	mov	r0, r3
 800d088:	f000 fae9 	bl	800d65e <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 faea 	bl	800d67a <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
      { }
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fadc 	bl	800d692 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 fae4 	bl	800d6aa <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fae5 	bl	800d6c6 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d106:	b480      	push	{r7}
 800d108:	b083      	sub	sp, #12
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 fad6 	bl	800d6de <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fad8 	bl	800d6fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800d14c:	bf00      	nop
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d154:	b590      	push	{r4, r7, lr}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff fa8c 	bl	800c67e <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d166:	683c      	ldr	r4, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff fa95 	bl	800c698 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800d16e:	4603      	mov	r3, r0
 800d170:	601c      	str	r4, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd90      	pop	{r4, r7, pc}

0800d17c <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fad2 	bl	800d72e <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d18a:	4603      	mov	r3, r0
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800d194:	b590      	push	{r4, r7, lr}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fad0 	bl	800d746 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d1a6:	683c      	ldr	r4, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff fc3b 	bl	800ca24 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	601c      	str	r4, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd90      	pop	{r4, r7, pc}

0800d1bc <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 faca 	bl	800d760 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b082      	sub	sp, #8
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 fac9 	bl	800d778 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3304      	adds	r3, #4
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fac1 	bl	800d790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 faff 	bl	800d818 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	601a      	str	r2, [r3, #0]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3304      	adds	r3, #4
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff ff2d 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	1d1a      	adds	r2, r3, #4
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	3304      	adds	r3, #4
 800d25e:	4619      	mov	r1, r3
 800d260:	4610      	mov	r0, r2
 800d262:	f000 fae4 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
      }
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f000 fae6 	bl	800d858 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	1d1a      	adds	r2, r3, #4
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	3304      	adds	r3, #4
 800d294:	4619      	mov	r1, r3
 800d296:	4610      	mov	r0, r2
 800d298:	f000 fac9 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800d29c:	bf00      	nop
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff fbad 	bl	800ca24 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff fba7 	bl	800ca24 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
	return __p;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
      }
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800d2e6:	b5b0      	push	{r4, r5, r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	60f8      	str	r0, [r7, #12]
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800d2f2:	68fc      	ldr	r4, [r7, #12]
 800d2f4:	68b8      	ldr	r0, [r7, #8]
 800d2f6:	f000 face 	bl	800d896 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff fc19 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d302:	4603      	mov	r3, r0
 800d304:	461a      	mov	r2, r3
 800d306:	4629      	mov	r1, r5
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 facf 	bl	800d8ac <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bdb0      	pop	{r4, r5, r7, pc}

0800d318 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fade 	bl	800d8e4 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d328:	4603      	mov	r3, r0
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d332:	b590      	push	{r4, r7, lr}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	6039      	str	r1, [r7, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff fa06 	bl	800c750 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d344:	683c      	ldr	r4, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff fa0f 	bl	800c76a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800d34c:	4603      	mov	r3, r0
 800d34e:	601c      	str	r4, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	bd90      	pop	{r4, r7, pc}

0800d35a <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b082      	sub	sp, #8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 faca 	bl	800d8fc <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d368:	4603      	mov	r3, r0
 800d36a:	4618      	mov	r0, r3
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d372:	b480      	push	{r7}
 800d374:	b083      	sub	sp, #12
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b082      	sub	sp, #8
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4618      	mov	r0, r3
 800d396:	f000 fabd 	bl	800d914 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d39a:	4603      	mov	r3, r0
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d3ae:	687b      	ldr	r3, [r7, #4]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7f7 fe69 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d3da:	b480      	push	{r7}
 800d3dc:	b083      	sub	sp, #12
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d3e2:	687b      	ldr	r3, [r7, #4]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7f7 fe4f 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800d418:	461a      	mov	r2, r3
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 faa6 	bl	800d96e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800d422:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7ff ffec 	bl	800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f000 faa1 	bl	800d9a2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800d460:	bf00      	nop
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800d468:	b5b0      	push	{r4, r5, r7, lr}
 800d46a:	b08c      	sub	sp, #48	@ 0x30
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d474:	4a39      	ldr	r2, [pc, #228]	@ (800d55c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800d476:	2101      	movs	r1, #1
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 faaa 	bl	800d9d2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800d47e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7fe ff5a 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800d492:	4603      	mov	r3, r0
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	f107 0214 	add.w	r2, r7, #20
 800d49a:	f107 0308 	add.w	r3, r7, #8
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fadd 	bl	800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 faeb 	bl	800da8a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800d4b4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800d4ba:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800d4c0:	69fa      	ldr	r2, [r7, #28]
 800d4c2:	18d5      	adds	r5, r2, r3
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff ffb1 	bl	800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f7ff ffb6 	bl	800d442 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d4da:	f107 0308 	add.w	r3, r7, #8
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff fc5e 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff f9ca 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d4f0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d4f2:	69fa      	ldr	r2, [r7, #28]
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4f8:	f000 fadb 	bl	800dab2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d4fc:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	3308      	adds	r3, #8
 800d502:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d504:	f107 0308 	add.w	r3, r7, #8
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff fc49 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d50e:	4603      	mov	r3, r0
 800d510:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff f9b5 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d51a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fac6 	bl	800dab2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d526:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800d528:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	689a      	ldr	r2, [r3, #8]
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800d534:	461a      	mov	r2, r3
 800d536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d538:	f7ff f991 	bl	800c85e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	69fa      	ldr	r2, [r7, #28]
 800d54e:	441a      	add	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	609a      	str	r2, [r3, #8]
    }
 800d554:	bf00      	nop
 800d556:	3730      	adds	r7, #48	@ 0x30
 800d558:	46bd      	mov	sp, r7
 800d55a:	bdb0      	pop	{r4, r5, r7, pc}
 800d55c:	0802a6dc 	.word	0x0802a6dc

0800d560 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7fe fefc 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d56e:	4603      	mov	r3, r0
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	f107 030c 	add.w	r3, r7, #12
 800d576:	2101      	movs	r1, #1
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 fab9 	bl	800daf0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>
 800d57e:	4603      	mov	r3, r0
 800d580:	60bb      	str	r3, [r7, #8]
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe ff27 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800d58c:	4603      	mov	r3, r0
      }
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800d596:	b580      	push	{r7, lr}
 800d598:	b088      	sub	sp, #32
 800d59a:	af02      	add	r7, sp, #8
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	4638      	mov	r0, r7
 800d5a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7fa fc29 	bl	8007e00 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800d5ae:	6178      	str	r0, [r7, #20]
    if (node) {
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d007      	beq.n	800d5c6 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	889b      	ldrh	r3, [r3, #4]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	809a      	strh	r2, [r3, #4]
      return node;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	e023      	b.n	800d60e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7f7 fd93 	bl	80050f4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800d5ce:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800d5d0:	6a39      	ldr	r1, [r7, #32]
 800d5d2:	6938      	ldr	r0, [r7, #16]
 800d5d4:	f7f7 fcfc 	bl	8004fd0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800d5d8:	6178      	str	r0, [r7, #20]
    if (!node)
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d101      	bne.n	800d5e4 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	e014      	b.n	800d60e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f103 0208 	add.w	r2, r3, #8
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	463a      	mov	r2, r7
 800d5f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5f4:	f000 fa95 	bl	800db22 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	3308      	adds	r3, #8
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
    add(node);
 800d604:	6979      	ldr	r1, [r7, #20]
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f7f7 fda6 	bl	8005158 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800d60c:	697b      	ldr	r3, [r7, #20]
  }
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa9f 	bl	800db62 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800d624:	4603      	mov	r3, r0
 800d626:	4618      	mov	r0, r3
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fa9f 	bl	800db7a <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d63c:	4603      	mov	r3, r0
 800d63e:	4618      	mov	r0, r3
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800d646:	b580      	push	{r7, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 faa0 	bl	800db94 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4618      	mov	r0, r3
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800d65e:	b480      	push	{r7}
 800d660:	b083      	sub	sp, #12
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fa91 	bl	800dbaa <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800d688:	4603      	mov	r3, r0
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fa92 	bl	800dbc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800d6aa:	b480      	push	{r7}
 800d6ac:	b083      	sub	sp, #12
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr

0800d6c6 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fa83 	bl	800dbda <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	68b8      	ldr	r0, [r7, #8]
 800d6f2:	f01a ff28 	bl	8028546 <_ZdlPvj>
      }
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d706:	e009      	b.n	800d71c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fa73 	bl	800dbf4 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d70e:	4603      	mov	r3, r0
 800d710:	4618      	mov	r0, r3
 800d712:	f000 fa7a 	bl	800dc0a <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	3308      	adds	r3, #8
 800d71a:	607b      	str	r3, [r7, #4]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d1f1      	bne.n	800d708 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800d724:	bf00      	nop
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d72e:	b580      	push	{r7, lr}
 800d730:	b082      	sub	sp, #8
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa72 	bl	800dc20 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800d73c:	4603      	mov	r3, r0
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d746:	b580      	push	{r7, lr}
 800d748:	b082      	sub	sp, #8
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fa71 	bl	800dc38 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fa75 	bl	800dc58 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800d76e:	4603      	mov	r3, r0
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fa76 	bl	800dc72 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d786:	4603      	mov	r3, r0
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800d790:	b5b0      	push	{r4, r5, r7, lr}
 800d792:	b08a      	sub	sp, #40	@ 0x28
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	f107 031c 	add.w	r3, r7, #28
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 fa70 	bl	800dc8a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800d7aa:	f107 0314 	add.w	r3, r7, #20
 800d7ae:	f107 021c 	add.w	r2, r7, #28
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fa81 	bl	800dcbc <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800d7ba:	f107 0314 	add.w	r3, r7, #20
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 faa4 	bl	800dd0c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800d7c4:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	202c      	movs	r0, #44	@ 0x2c
 800d7cc:	f7fd f83c 	bl	800a848 <_ZnwjPv>
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 faa7 	bl	800dd28 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800d7da:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800d7dc:	f107 0314 	add.w	r3, r7, #20
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 fac2 	bl	800dd6c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6a3a      	ldr	r2, [r7, #32]
 800d7ec:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800d7ee:	6a38      	ldr	r0, [r7, #32]
 800d7f0:	f000 facb 	bl	800dd8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	601a      	str	r2, [r3, #0]
	}
 800d7fa:	f107 0314 	add.w	r3, r7, #20
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fa6f 	bl	800dce2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d804:	f107 031c 	add.w	r3, r7, #28
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 fa4b 	bl	800dca4 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	4618      	mov	r0, r3
 800d812:	3728      	adds	r7, #40	@ 0x28
 800d814:	46bd      	mov	sp, r7
 800d816:	bdb0      	pop	{r4, r5, r7, pc}

0800d818 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
	{ }
 800d822:	bf00      	nop
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800d82e:	b480      	push	{r7}
 800d830:	b085      	sub	sp, #20
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	601a      	str	r2, [r3, #0]
      }
 800d84c:	bf00      	nop
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 fa9f 	bl	800dda6 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d868:	4603      	mov	r3, r0
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d86e:	6838      	ldr	r0, [r7, #0]
 800d870:	f000 fa99 	bl	800dda6 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d874:	4603      	mov	r3, r0
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d87c:	f107 030c 	add.w	r3, r7, #12
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fa90 	bl	800dda6 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d886:	4603      	mov	r3, r0
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	601a      	str	r2, [r3, #0]
    }
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d896:	b480      	push	{r7}
 800d898:	b083      	sub	sp, #12
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d8ac:	b590      	push	{r4, r7, lr}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff f93b 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f000 fa7a 	bl	800ddbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800d8c8:	68fc      	ldr	r4, [r7, #12]
 800d8ca:	68b8      	ldr	r0, [r7, #8]
 800d8cc:	f7ff ffe3 	bl	800d896 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f000 fa83 	bl	800dde0 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}

0800d8e4 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fa88 	bl	800de02 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fa89 	bl	800de1c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800d90a:	4603      	mov	r3, r0
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fa88 	bl	800de34 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d924:	4603      	mov	r3, r0
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fa88 	bl	800de4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800d93c:	4603      	mov	r3, r0
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 fa8f 	bl	800de62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800d944:	4603      	mov	r3, r0
  }
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fa78 	bl	800de4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800d95c:	4603      	mov	r3, r0
 800d95e:	4618      	mov	r0, r3
 800d960:	f000 fa8b 	bl	800de7a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800d964:	4603      	mov	r3, r0
  }
 800d966:	4618      	mov	r0, r3
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800d96e:	b590      	push	{r4, r7, lr}
 800d970:	b087      	sub	sp, #28
 800d972:	af00      	add	r7, sp, #0
 800d974:	60f8      	str	r0, [r7, #12]
 800d976:	60b9      	str	r1, [r7, #8]
 800d978:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	681c      	ldr	r4, [r3, #0]
 800d97e:	f107 0310 	add.w	r3, r7, #16
 800d982:	68f9      	ldr	r1, [r7, #12]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fa84 	bl	800de92 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800d98a:	f107 0310 	add.w	r3, r7, #16
 800d98e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d992:	4620      	mov	r0, r4
 800d994:	f000 fa93 	bl	800debe <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800d998:	4603      	mov	r3, r0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd90      	pop	{r4, r7, pc}

0800d9a2 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800d9a2:	b590      	push	{r4, r7, lr}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	60b9      	str	r1, [r7, #8]
 800d9ac:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	2008      	movs	r0, #8
 800d9b4:	f7fc ff48 	bl	800a848 <_ZnwjPv>
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7ff fd36 	bl	800d42c <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 fabf 	bl	800df48 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800d9ca:	bf00      	nop
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd90      	pop	{r4, r7, pc}

0800d9d2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800d9d2:	b590      	push	{r4, r7, lr}
 800d9d4:	b087      	sub	sp, #28
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 fac5 	bl	800df6e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fad2 	bl	800df90 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	1ae2      	subs	r2, r4, r3
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	bf34      	ite	cc
 800d9f6:	2301      	movcc	r3, #1
 800d9f8:	2300      	movcs	r3, #0
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f01a fdd0 	bl	80285a6 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f000 fac2 	bl	800df90 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da0c:	4604      	mov	r4, r0
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f000 fabe 	bl	800df90 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da14:	4603      	mov	r3, r0
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	f107 0208 	add.w	r2, r7, #8
 800da1c:	f107 0310 	add.w	r3, r7, #16
 800da20:	4611      	mov	r1, r2
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe f901 	bl	800bc2a <_ZSt3maxIjERKT_S2_S2_>
 800da28:	4603      	mov	r3, r0
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4423      	add	r3, r4
 800da2e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f000 faad 	bl	800df90 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da36:	4602      	mov	r2, r0
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d306      	bcc.n	800da4c <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 fa95 	bl	800df6e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800da44:	4602      	mov	r2, r0
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	4293      	cmp	r3, r2
 800da4a:	d904      	bls.n	800da56 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fa8e 	bl	800df6e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800da52:	4603      	mov	r3, r0
 800da54:	e000      	b.n	800da58 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800da56:	697b      	ldr	r3, [r7, #20]
      }
 800da58:	4618      	mov	r0, r3
 800da5a:	371c      	adds	r7, #28
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd90      	pop	{r4, r7, pc}

0800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800da60:	b590      	push	{r4, r7, lr}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7ff f998 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800da70:	4603      	mov	r3, r0
 800da72:	681c      	ldr	r4, [r3, #0]
 800da74:	6838      	ldr	r0, [r7, #0]
 800da76:	f7ff f993 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800da7a:	4603      	mov	r3, r0
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	1ae3      	subs	r3, r4, r3
 800da80:	10db      	asrs	r3, r3, #3
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	bd90      	pop	{r4, r7, pc}

0800da8a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d006      	beq.n	800daa8 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6839      	ldr	r1, [r7, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fa86 	bl	800dfb0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800daa4:	4603      	mov	r3, r0
 800daa6:	e000      	b.n	800daaa <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800daa8:	2300      	movs	r3, #0
      }
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
 800dabe:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	68b9      	ldr	r1, [r7, #8]
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 fa81 	bl	800dfce <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800dacc:	4603      	mov	r3, r0
      }
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 fa90 	bl	800e008 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	00db      	lsls	r3, r3, #3
 800db02:	425b      	negs	r3, r3
 800db04:	4413      	add	r3, r2
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	f107 020c 	add.w	r2, r7, #12
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff f934 	bl	800cd80 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800db22:	b590      	push	{r4, r7, lr}
 800db24:	b087      	sub	sp, #28
 800db26:	af00      	add	r7, sp, #0
 800db28:	1d3c      	adds	r4, r7, #4
 800db2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db2e:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800db30:	2300      	movs	r3, #0
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	e00c      	b.n	800db50 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800db36:	683a      	ldr	r2, [r7, #0]
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	18d4      	adds	r4, r2, r3
 800db3c:	1d3b      	adds	r3, r7, #4
 800db3e:	6979      	ldr	r1, [r7, #20]
 800db40:	4618      	mov	r0, r3
 800db42:	f7f3 f8e1 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800db46:	4603      	mov	r3, r0
 800db48:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	3301      	adds	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db54:	429a      	cmp	r2, r3
 800db56:	d3ee      	bcc.n	800db36 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800db58:	bf00      	nop
 800db5a:	bf00      	nop
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd90      	pop	{r4, r7, pc}

0800db62 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800db62:	b580      	push	{r7, lr}
 800db64:	b082      	sub	sp, #8
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fa58 	bl	800e020 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800db70:	4603      	mov	r3, r0
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b082      	sub	sp, #8
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	f000 fa56 	bl	800e036 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800db8a:	4603      	mov	r3, r0
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 fa49 	bl	800e04c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b082      	sub	sp, #8
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 fa3c 	bl	800e062 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800dbea:	4603      	mov	r3, r0
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b082      	sub	sp, #8
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7fd fa21 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fa25 	bl	800e078 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fa24 	bl	800e08e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fa2c 	bl	800e0a6 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 fa2d 	bl	800e0c2 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 fa2c 	bl	800e0d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800dc80:	4603      	mov	r3, r0
 800dc82:	4618      	mov	r0, r3
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b082      	sub	sp, #8
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fa2b 	bl	800e0f0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fa2a 	bl	800e106 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	f000 fa27 	bl	800e11c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fa30 	bl	800e13a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6818      	ldr	r0, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f000 fa30 	bl	800e162 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 fa31 	bl	800e180 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800dd28:	b590      	push	{r4, r7, lr}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fa2f 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800dd3a:	4a0b      	ldr	r2, [pc, #44]	@ (800dd68 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	330c      	adds	r3, #12
 800dd44:	4621      	mov	r1, r4
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fa3c 	bl	800e1c4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f81c 	bl	800dd8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800dd52:	4602      	mov	r2, r0
 800dd54:	463b      	mov	r3, r7
 800dd56:	4611      	mov	r1, r2
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fa42 	bl	800e1e2 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd90      	pop	{r4, r7, pc}
 800dd68:	0802b2f0 	.word	0x0802b2f0

0800dd6c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	605a      	str	r2, [r3, #4]
	return *this;
 800dd7c:	687b      	ldr	r3, [r7, #4]
      }
 800dd7e:	4618      	mov	r0, r3
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	330c      	adds	r3, #12
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fa2f 	bl	800e1fa <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800dda6:	b480      	push	{r7}
 800dda8:	b083      	sub	sp, #12
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800ddc6:	6838      	ldr	r0, [r7, #0]
 800ddc8:	f7fe feb4 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 fa1e 	bl	800e212 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800ddea:	6838      	ldr	r0, [r7, #0]
 800ddec:	f7ff fd53 	bl	800d896 <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	601a      	str	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de02:	b580      	push	{r7, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 fa13 	bl	800e238 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800de12:	4603      	mov	r3, r0
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fa12 	bl	800e24e <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800de2a:	4603      	mov	r3, r0
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fa11 	bl	800e264 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800de42:	4603      	mov	r3, r0
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800de54:	687b      	ldr	r3, [r7, #4]
  }
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800de62:	b580      	push	{r7, lr}
 800de64:	b082      	sub	sp, #8
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
    return client.getData();
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 fa07 	bl	800e27e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800de70:	4603      	mov	r3, r0
  }
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b082      	sub	sp, #8
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fa17 	bl	800e2b6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800de88:	4603      	mov	r3, r0
  }
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800de92:	b590      	push	{r4, r7, lr}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800de9c:	6838      	ldr	r0, [r7, #0]
 800de9e:	f000 fa18 	bl	800e2d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800dea2:	4604      	mov	r4, r0
 800dea4:	6838      	ldr	r0, [r7, #0]
 800dea6:	f7ff fd52 	bl	800d94e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	4621      	mov	r1, r4
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7f7 fce9 	bl	8005888 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bd90      	pop	{r4, r7, pc}

0800debe <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800debe:	b580      	push	{r7, lr}
 800dec0:	b086      	sub	sp, #24
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	60f8      	str	r0, [r7, #12]
 800dec6:	1d3b      	adds	r3, r7, #4
 800dec8:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800decc:	1d3b      	adds	r3, r7, #4
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f9 fa22 	bl	8007318 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800ded4:	6178      	str	r0, [r7, #20]
    if (!data)
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800dedc:	2300      	movs	r3, #0
 800dede:	e00f      	b.n	800df00 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800dee0:	1d3b      	adds	r3, r7, #4
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f9 fbbd 	bl	8007662 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800dee8:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800deea:	6939      	ldr	r1, [r7, #16]
 800deec:	6978      	ldr	r0, [r7, #20]
 800deee:	f7f8 f9ff 	bl	80062f0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	6978      	ldr	r0, [r7, #20]
 800def8:	f000 f9fb 	bl	800e2f2 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800defc:	4603      	mov	r3, r0
 800defe:	bf00      	nop
  }
 800df00:	4618      	mov	r0, r3
 800df02:	3718      	adds	r7, #24
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7fe ff82 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800df16:	4603      	mov	r3, r0
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 fa2d 	bl	800e378 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800df1e:	4603      	mov	r3, r0
  }
 800df20:	4618      	mov	r0, r3
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7fe ff72 	bl	800ce1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800df36:	4603      	mov	r3, r0
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fa3c 	bl	800e3b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800df3e:	4603      	mov	r3, r0
  }
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800df48:	b590      	push	{r4, r7, lr}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800df52:	687c      	ldr	r4, [r7, #4]
 800df54:	6838      	ldr	r0, [r7, #0]
 800df56:	f7fe fac5 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800df5a:	4603      	mov	r3, r0
 800df5c:	4619      	mov	r1, r3
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 fa35 	bl	800e3ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd90      	pop	{r4, r7, pc}

0800df6e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800df6e:	b580      	push	{r7, lr}
 800df70:	b082      	sub	sp, #8
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fa60 	bl	800e43e <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800df7e:	4603      	mov	r3, r0
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fa42 	bl	800e40a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800df86:	4603      	mov	r3, r0
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	10db      	asrs	r3, r3, #3
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800dfba:	2200      	movs	r2, #0
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fa48 	bl	800e454 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800dfce:	b5b0      	push	{r4, r5, r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	60f8      	str	r0, [r7, #12]
 800dfd6:	60b9      	str	r1, [r7, #8]
 800dfd8:	607a      	str	r2, [r7, #4]
 800dfda:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 fa63 	bl	800e4a8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	68b8      	ldr	r0, [r7, #8]
 800dfe6:	f000 fa5f 	bl	800e4a8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800dfea:	4605      	mov	r5, r0
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fa5b 	bl	800e4a8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800dff2:	4602      	mov	r2, r0
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	4629      	mov	r1, r5
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 fa60 	bl	800e4be <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800dffe:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bdb0      	pop	{r4, r5, r7, pc}

0800e008 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800e012:	6838      	ldr	r0, [r7, #0]
 800e014:	f7fd f821 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
 800e018:	bf00      	nop
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e036:	b480      	push	{r7}
 800e038:	b083      	sub	sp, #12
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4618      	mov	r0, r3
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800e08e:	b580      	push	{r7, lr}
 800e090:	b082      	sub	sp, #8
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fa37 	bl	800e50a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e0c2:	b480      	push	{r7}
 800e0c4:	b083      	sub	sp, #12
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fa1d 	bl	800e520 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e106:	b480      	push	{r7}
 800e108:	b083      	sub	sp, #12
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4618      	mov	r0, r3
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e126:	2200      	movs	r2, #0
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 fa04 	bl	800e538 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e130:	4603      	mov	r3, r0
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	60f8      	str	r0, [r7, #12]
 800e142:	60b9      	str	r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e146:	68b8      	ldr	r0, [r7, #8]
 800e148:	f000 fa24 	bl	800e594 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800e14c:	4602      	mov	r2, r0
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	605a      	str	r2, [r3, #4]
      { }
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	60b9      	str	r1, [r7, #8]
 800e16c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 fa19 	bl	800e5aa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800e178:	bf00      	nop
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800e188:	687b      	ldr	r3, [r7, #4]
    }
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
	...

0800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800e1a0:	4a07      	ldr	r2, [pc, #28]	@ (800e1c0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	601a      	str	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	605a      	str	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	609a      	str	r2, [r3, #8]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	0802b30c 	.word	0x0802b30c

0800e1c4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	7039      	strb	r1, [r7, #0]
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f9fa 	bl	800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b082      	sub	sp, #8
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800e1ec:	6838      	ldr	r0, [r7, #0]
 800e1ee:	f000 f9f9 	bl	800e5e4 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b082      	sub	sp, #8
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f9ff 	bl	800e606 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800e208:	4603      	mov	r3, r0
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800e212:	b590      	push	{r4, r7, lr}
 800e214:	b083      	sub	sp, #12
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e21c:	687c      	ldr	r4, [r7, #4]
 800e21e:	6838      	ldr	r0, [r7, #0]
 800e220:	f7fe fc88 	bl	800cb34 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e224:	4603      	mov	r3, r0
 800e226:	4619      	mov	r1, r3
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 f9f7 	bl	800e61c <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4618      	mov	r0, r3
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	bd90      	pop	{r4, r7, pc}

0800e238 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	370c      	adds	r7, #12
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr

0800e24e <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e24e:	b480      	push	{r7}
 800e250:	b083      	sub	sp, #12
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	4618      	mov	r0, r3
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4618      	mov	r0, r3
 800e270:	f000 f9e0 	bl	800e634 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800e274:	4603      	mov	r3, r0
 800e276:	4618      	mov	r0, r3
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800e27e:	b590      	push	{r4, r7, lr}
 800e280:	b085      	sub	sp, #20
 800e282:	af02      	add	r7, sp, #8
 800e284:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3304      	adds	r3, #4
 800e28a:	4618      	mov	r0, r3
 800e28c:	f000 f874 	bl	800e378 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e290:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3304      	adds	r3, #4
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f88d 	bl	800e3b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e29c:	4602      	mov	r2, r0
    return VariantData::getMember(
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	9200      	str	r2, [sp, #0]
 800e2a2:	3314      	adds	r3, #20
 800e2a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f7fb faba 	bl	8009820 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800e2ac:	4603      	mov	r3, r0
  }
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd90      	pop	{r4, r7, pc}

0800e2b6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 f877 	bl	800e3b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e2c8:	4603      	mov	r3, r0
  }
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff fdb6 	bl	800de4c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 f9b1 	bl	800e64a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800e2e8:	4603      	mov	r3, r0
  }
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800e2f2:	b5b0      	push	{r4, r5, r7, lr}
 800e2f4:	b086      	sub	sp, #24
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	60f8      	str	r0, [r7, #12]
 800e2fa:	60b9      	str	r1, [r7, #8]
 800e2fc:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800e2fe:	68b8      	ldr	r0, [r7, #8]
 800e300:	f7fa fd57 	bl	8008db2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d006      	beq.n	800e318 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	220a      	movs	r2, #10
 800e30e:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	e02a      	b.n	800e36e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800e318:	f107 0310 	add.w	r3, r7, #16
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	4618      	mov	r0, r3
 800e320:	f7f7 fdff 	bl	8005f22 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800e324:	f107 0310 	add.w	r3, r7, #16
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fb ff1c 	bl	800a166 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800e32e:	4603      	mov	r3, r0
 800e330:	f083 0301 	eor.w	r3, r3, #1
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800e33a:	2300      	movs	r3, #0
 800e33c:	e018      	b.n	800e370 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	221a      	movs	r2, #26
 800e342:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800e344:	f107 0310 	add.w	r3, r7, #16
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fb ff1d 	bl	800a188 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2200      	movs	r2, #0
 800e35a:	461c      	mov	r4, r3
 800e35c:	4615      	mov	r5, r2
 800e35e:	f107 0310 	add.w	r3, r7, #16
 800e362:	4618      	mov	r0, r3
 800e364:	f7fb ff1c 	bl	800a1a0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800e368:	4603      	mov	r3, r0
 800e36a:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800e36e:	2301      	movs	r3, #1
}
 800e370:	4618      	mov	r0, r3
 800e372:	3718      	adds	r7, #24
 800e374:	46bd      	mov	sp, r7
 800e376:	bdb0      	pop	{r4, r5, r7, pc}

0800e378 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e378:	b5b0      	push	{r4, r5, r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	3304      	adds	r3, #4
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 fa0e 	bl	800e7aa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800e38e:	4605      	mov	r5, r0
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	3304      	adds	r3, #4
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fa12 	bl	800e7c2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e39e:	4603      	mov	r3, r0
    return VariantData::getElement(
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	f7fc fb38 	bl	800aa1a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800e3aa:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800e3ac:	bf00      	nop
  }
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bdb0      	pop	{r4, r5, r7, pc}

0800e3b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f94f 	bl	800e662 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800e3c4:	4603      	mov	r3, r0
  }
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe fe63 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	1d1a      	adds	r2, r3, #4
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	f7ff fa1a 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	601a      	str	r2, [r3, #0]
      }
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e412:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800e416:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f930 	bl	800e67e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800e41e:	4603      	mov	r3, r0
 800e420:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e422:	f107 0208 	add.w	r2, r7, #8
 800e426:	f107 030c 	add.w	r3, r7, #12
 800e42a:	4611      	mov	r1, r2
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fc fa93 	bl	800a958 <_ZSt3minIjERKT_S2_S2_>
 800e432:	4603      	mov	r3, r0
 800e434:	681b      	ldr	r3, [r3, #0]
      }
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e43e:	b480      	push	{r7}
 800e440:	b083      	sub	sp, #12
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f000 f918 	bl	800e696 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e466:	4602      	mov	r2, r0
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	4293      	cmp	r3, r2
 800e46c:	bf8c      	ite	hi
 800e46e:	2301      	movhi	r3, #1
 800e470:	2300      	movls	r3, #0
 800e472:	b2db      	uxtb	r3, r3
 800e474:	2b00      	cmp	r3, #0
 800e476:	bf14      	ite	ne
 800e478:	2301      	movne	r3, #1
 800e47a:	2300      	moveq	r3, #0
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d007      	beq.n	800e492 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e488:	d301      	bcc.n	800e48e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e48a:	f01a f883 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e48e:	f01a f87e 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	00db      	lsls	r3, r3, #3
 800e496:	4618      	mov	r0, r3
 800e498:	f01a f866 	bl	8028568 <_Znwj>
 800e49c:	4603      	mov	r3, r0
 800e49e:	bf00      	nop
      }
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	370c      	adds	r7, #12
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr

0800e4be <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800e4be:	b590      	push	{r4, r7, lr}
 800e4c0:	b087      	sub	sp, #28
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	60f8      	str	r0, [r7, #12]
 800e4c6:	60b9      	str	r1, [r7, #8]
 800e4c8:	607a      	str	r2, [r7, #4]
 800e4ca:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800e4d0:	e012      	b.n	800e4f8 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800e4d2:	6978      	ldr	r0, [r7, #20]
 800e4d4:	f7ff fb8e 	bl	800dbf4 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e4d8:	4604      	mov	r4, r0
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f7ff fb8a 	bl	800dbf4 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	683a      	ldr	r2, [r7, #0]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f000 f8e1 	bl	800e6ae <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	60fb      	str	r3, [r7, #12]
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	3308      	adds	r3, #8
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d1e8      	bne.n	800e4d2 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800e500:	697b      	ldr	r3, [r7, #20]
    }
 800e502:	4618      	mov	r0, r3
 800e504:	371c      	adds	r7, #28
 800e506:	46bd      	mov	sp, r7
 800e508:	bd90      	pop	{r4, r7, pc}

0800e50a <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800e50a:	b480      	push	{r7}
 800e50c:	b083      	sub	sp, #12
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	370c      	adds	r7, #12
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4618      	mov	r0, r3
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
	...

0800e538 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 f8ff 	bl	800e748 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e54a:	4602      	mov	r2, r0
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	4293      	cmp	r3, r2
 800e550:	bf8c      	ite	hi
 800e552:	2301      	movhi	r3, #1
 800e554:	2300      	movls	r3, #0
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	bf14      	ite	ne
 800e55c:	2301      	movne	r3, #1
 800e55e:	2300      	moveq	r3, #0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d007      	beq.n	800e576 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	4a09      	ldr	r2, [pc, #36]	@ (800e590 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d901      	bls.n	800e572 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e56e:	f01a f811 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e572:	f01a f80c 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	222c      	movs	r2, #44	@ 0x2c
 800e57a:	fb02 f303 	mul.w	r3, r2, r3
 800e57e:	4618      	mov	r0, r3
 800e580:	f019 fff2 	bl	8028568 <_Znwj>
 800e584:	4603      	mov	r3, r0
 800e586:	bf00      	nop
      }
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	05d1745d 	.word	0x05d1745d

0800e594 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	370c      	adds	r7, #12
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b084      	sub	sp, #16
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	222c      	movs	r2, #44	@ 0x2c
 800e5ba:	fb02 f303 	mul.w	r3, r2, r3
 800e5be:	4619      	mov	r1, r3
 800e5c0:	68b8      	ldr	r0, [r7, #8]
 800e5c2:	f019 ffc0 	bl	8028546 <_ZdlPvj>
      }
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	370c      	adds	r7, #12
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	2020      	movs	r0, #32
 800e5f2:	f7fc f929 	bl	800a848 <_ZnwjPv>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 ffef 	bl	80105dc <_ZN12CommsHandlerC1Ev>
    }
 800e5fe:	bf00      	nop
 800e600:	3708      	adds	r7, #8
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800e60e:	687b      	ldr	r3, [r7, #4]
      }
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4618      	mov	r0, r3
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4618      	mov	r0, r3
 800e640:	370c      	adds	r7, #12
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b082      	sub	sp, #8
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 f886 	bl	800e764 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800e658:	4603      	mov	r3, r0
  }
 800e65a:	4618      	mov	r0, r3
 800e65c:	3708      	adds	r7, #8
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3304      	adds	r3, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 f8a7 	bl	800e7c2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e674:	4603      	mov	r3, r0
  }
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f8a7 	bl	800e7da <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800e68c:	4603      	mov	r3, r0
      }
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e696:	b480      	push	{r7}
 800e698:	b083      	sub	sp, #12
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e69e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	60f8      	str	r0, [r7, #12]
 800e6b6:	60b9      	str	r1, [r7, #8]
 800e6b8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800e6ba:	68b8      	ldr	r0, [r7, #8]
 800e6bc:	f7fd ff12 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	68f9      	ldr	r1, [r7, #12]
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7fe febb 	bl	800d442 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800e6cc:	68b8      	ldr	r0, [r7, #8]
 800e6ce:	f7ff fa91 	bl	800dbf4 <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7ff f9fd 	bl	800dad6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800e6dc:	bf00      	nop
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af02      	add	r7, sp, #8
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800e6f2:	463b      	mov	r3, r7
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f6 fcec 	bl	80050d2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800e700:	2300      	movs	r3, #0
 800e702:	e01d      	b.n	800e740 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7fc f9c3 	bl	800aa90 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d004      	beq.n	800e71a <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f7f6 ffa5 	bl	8005660 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800e716:	4603      	mov	r3, r0
 800e718:	e003      	b.n	800e722 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7f6 fe95 	bl	800544a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800e720:	4603      	mov	r3, r0
 800e722:	617b      	str	r3, [r7, #20]
    if (!obj)
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800e72a:	2300      	movs	r3, #0
 800e72c:	e008      	b.n	800e740 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800e72e:	6978      	ldr	r0, [r7, #20]
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	463b      	mov	r3, r7
 800e736:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e738:	f000 f85b 	bl	800e7f2 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e73c:	4603      	mov	r3, r0
 800e73e:	bf00      	nop
  }
 800e740:	4618      	mov	r0, r3
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e750:	4b03      	ldr	r3, [pc, #12]	@ (800e760 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	02e8ba2e 	.word	0x02e8ba2e

0800e764 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800e764:	b590      	push	{r4, r7, lr}
 800e766:	b087      	sub	sp, #28
 800e768:	af02      	add	r7, sp, #8
 800e76a:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	3304      	adds	r3, #4
 800e770:	4618      	mov	r0, r3
 800e772:	f000 f85f 	bl	800e834 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800e776:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e77e:	2300      	movs	r3, #0
 800e780:	e00f      	b.n	800e7a2 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800e782:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff fe14 	bl	800e3b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e78e:	4602      	mov	r2, r0
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	9200      	str	r2, [sp, #0]
 800e794:	3314      	adds	r3, #20
 800e796:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e798:	4620      	mov	r0, r4
 800e79a:	f7ff ffa3 	bl	800e6e4 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800e79e:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800e7a0:	bf00      	nop
  }
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3714      	adds	r7, #20
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd90      	pop	{r4, r7, pc}

0800e7aa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7fc fa11 	bl	800abda <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800e7b8:	4603      	mov	r3, r0
  }
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b082      	sub	sp, #8
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7fc f9f9 	bl	800abc2 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800e7d0:	4603      	mov	r3, r0
  }
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b082      	sub	sp, #8
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7ff ff57 	bl	800e696 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b088      	sub	sp, #32
 800e7f6:	af02      	add	r7, sp, #8
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	463b      	mov	r3, r7
 800e806:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f7f9 fca0 	bl	800814e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800e80e:	6178      	str	r0, [r7, #20]
  if (data)
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	e008      	b.n	800e82c <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	463b      	mov	r3, r7
 800e820:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f000 f812 	bl	800e84c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e828:	4603      	mov	r3, r0
 800e82a:	bf00      	nop
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 f85b 	bl	800e8f8 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800e842:	4603      	mov	r3, r0
  }
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08a      	sub	sp, #40	@ 0x28
 800e850:	af02      	add	r7, sp, #8
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	4638      	mov	r0, r7
 800e856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800e85a:	f107 0318 	add.w	r3, r7, #24
 800e85e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e860:	4618      	mov	r0, r3
 800e862:	f7f7 fad9 	bl	8005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800e866:	f107 0318 	add.w	r3, r7, #24
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f8 fd78 	bl	8007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800e870:	4603      	mov	r3, r0
 800e872:	f083 0301 	eor.w	r3, r3, #1
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d001      	beq.n	800e880 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800e87c:	2300      	movs	r3, #0
 800e87e:	e037      	b.n	800e8f0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800e880:	f107 0310 	add.w	r3, r7, #16
 800e884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e886:	4618      	mov	r0, r3
 800e888:	f7f7 fac6 	bl	8005e18 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800e88c:	f107 0310 	add.w	r3, r7, #16
 800e890:	4618      	mov	r0, r3
 800e892:	f7f8 fd65 	bl	8007360 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800e896:	4603      	mov	r3, r0
 800e898:	f083 0301 	eor.w	r3, r3, #1
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	e024      	b.n	800e8f0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800e8a6:	f107 0318 	add.w	r3, r7, #24
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7f8 fd81 	bl	80073b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800e8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	463b      	mov	r3, r7
 800e8b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8b8:	f7fd fe50 	bl	800c55c <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f083 0301 	eor.w	r3, r3, #1
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e011      	b.n	800e8f0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f107 0218 	add.w	r2, r7, #24
 800e8dc:	ca06      	ldmia	r2, {r1, r2}
 800e8de:	f7f7 fa14 	bl	8005d0a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800e8e2:	f107 0310 	add.w	r3, r7, #16
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f8 fd4b 	bl	8007382 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	bf00      	nop
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800e8f8:	b5b0      	push	{r4, r5, r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	3304      	adds	r3, #4
 800e904:	4618      	mov	r0, r3
 800e906:	f000 f81a 	bl	800e93e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800e90a:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e912:	2300      	movs	r3, #0
 800e914:	e00f      	b.n	800e936 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800e916:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	68dd      	ldr	r5, [r3, #12]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff ff4e 	bl	800e7c2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e926:	4603      	mov	r3, r0
 800e928:	461a      	mov	r2, r3
 800e92a:	4629      	mov	r1, r5
 800e92c:	4620      	mov	r0, r4
 800e92e:	f7fc f889 	bl	800aa44 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800e932:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800e934:	bf00      	nop
  }
 800e936:	4618      	mov	r0, r3
 800e938:	3710      	adds	r7, #16
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bdb0      	pop	{r4, r5, r7, pc}

0800e93e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e93e:	b580      	push	{r7, lr}
 800e940:	b082      	sub	sp, #8
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7fc f955 	bl	800abf6 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800e94c:	4603      	mov	r3, r0
  }
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <_Z41__static_initialization_and_destruction_0ii>:
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d10a      	bne.n	800e97e <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e96e:	4293      	cmp	r3, r2
 800e970:	d105      	bne.n	800e97e <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800e972:	4805      	ldr	r0, [pc, #20]	@ (800e988 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800e974:	f7fb ffbe 	bl	800a8f4 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800e978:	4804      	ldr	r0, [pc, #16]	@ (800e98c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e97a:	f7f2 f95b 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800e97e:	bf00      	nop
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	30000080 	.word	0x30000080
 800e98c:	300000c0 	.word	0x300000c0

0800e990 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	4a05      	ldr	r2, [pc, #20]	@ (800e9b0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fd fdbb 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	0802b2f0 	.word	0x0802b2f0

0800e9b4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff ffe7 	bl	800e990 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9c2:	212c      	movs	r1, #44	@ 0x2c
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f019 fdbe 	bl	8028546 <_ZdlPvj>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	330c      	adds	r3, #12
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f000 f856 	bl	800ea92 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7ff f9ce 	bl	800dd8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f000 f859 	bl	800eaaa <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd90      	pop	{r4, r7, pc}

0800ea00 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	330c      	adds	r3, #12
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 f840 	bl	800ea92 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ea12:	4602      	mov	r2, r0
 800ea14:	f107 0314 	add.w	r3, r7, #20
 800ea18:	4611      	mov	r1, r2
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff f935 	bl	800dc8a <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ea20:	f107 0114 	add.w	r1, r7, #20
 800ea24:	f107 030c 	add.w	r3, r7, #12
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff fb85 	bl	800e13a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ffad 	bl	800e990 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ea36:	f107 030c 	add.w	r3, r7, #12
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff f951 	bl	800dce2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ea40:	f107 0314 	add.w	r3, r7, #20
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7ff f92d 	bl	800dca4 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b084      	sub	sp, #16
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7ff f995 	bl	800dd8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ea60:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ea62:	f7fb ff3d 	bl	800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800ea66:	4602      	mov	r2, r0
	    ||
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d005      	beq.n	800ea7a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800ea6e:	6838      	ldr	r0, [r7, #0]
 800ea70:	f019 fda6 	bl	80285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800ea74:	4603      	mov	r3, r0
	    ||
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d001      	beq.n	800ea7e <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800ea7e:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	e000      	b.n	800ea8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800ea88:	2300      	movs	r3, #0
      }
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b082      	sub	sp, #8
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f811 	bl	800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b082      	sub	sp, #8
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800eab4:	6838      	ldr	r0, [r7, #0]
 800eab6:	f000 f80f 	bl	800ead8 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800eaba:	bf00      	nop
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800eac2:	b480      	push	{r7}
 800eac4:	b083      	sub	sp, #12
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	4798      	blx	r3
    }
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eafa:	2001      	movs	r0, #1
 800eafc:	f7ff ff2c 	bl	800e958 <_Z41__static_initialization_and_destruction_0ii>
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb34 <HAL_MspInit+0x30>)
 800eb0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eb10:	4a08      	ldr	r2, [pc, #32]	@ (800eb34 <HAL_MspInit+0x30>)
 800eb12:	f043 0302 	orr.w	r3, r3, #2
 800eb16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800eb1a:	4b06      	ldr	r3, [pc, #24]	@ (800eb34 <HAL_MspInit+0x30>)
 800eb1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eb20:	f003 0302 	and.w	r3, r3, #2
 800eb24:	607b      	str	r3, [r7, #4]
 800eb26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	58024400 	.word	0x58024400

0800eb38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b0bc      	sub	sp, #240	@ 0xf0
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	609a      	str	r2, [r3, #8]
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eb50:	f107 0318 	add.w	r3, r7, #24
 800eb54:	22c0      	movs	r2, #192	@ 0xc0
 800eb56:	2100      	movs	r1, #0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f01a fd29 	bl	80295b0 <memset>
  if(hsd->Instance==SDMMC1)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a3c      	ldr	r2, [pc, #240]	@ (800ec54 <HAL_SD_MspInit+0x11c>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d171      	bne.n	800ec4c <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800eb68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800eb6c:	f04f 0300 	mov.w	r3, #0
 800eb70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800eb74:	2300      	movs	r3, #0
 800eb76:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eb78:	f107 0318 	add.w	r3, r7, #24
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f010 fee5 	bl	801f94c <HAL_RCCEx_PeriphCLKConfig>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800eb88:	f7fb fe52 	bl	800a830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800eb8c:	4b32      	ldr	r3, [pc, #200]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800eb8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800eb92:	4a31      	ldr	r2, [pc, #196]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800eb94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800eb9c:	4b2e      	ldr	r3, [pc, #184]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800eb9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800eba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eba6:	617b      	str	r3, [r7, #20]
 800eba8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ebaa:	4b2b      	ldr	r3, [pc, #172]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebb0:	4a29      	ldr	r2, [pc, #164]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebb2:	f043 0304 	orr.w	r3, r3, #4
 800ebb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ebba:	4b27      	ldr	r3, [pc, #156]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebc0:	f003 0304 	and.w	r3, r3, #4
 800ebc4:	613b      	str	r3, [r7, #16]
 800ebc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ebc8:	4b23      	ldr	r3, [pc, #140]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebce:	4a22      	ldr	r2, [pc, #136]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebd0:	f043 0308 	orr.w	r3, r3, #8
 800ebd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ebd8:	4b1f      	ldr	r3, [pc, #124]	@ (800ec58 <HAL_SD_MspInit+0x120>)
 800ebda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebde:	f003 0308 	and.w	r3, r3, #8
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ebe6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800ebea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebee:	2302      	movs	r3, #2
 800ebf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ec00:	230c      	movs	r3, #12
 800ec02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4813      	ldr	r0, [pc, #76]	@ (800ec5c <HAL_SD_MspInit+0x124>)
 800ec0e:	f00f fc9b 	bl	801e548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ec12:	2304      	movs	r3, #4
 800ec14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec18:	2302      	movs	r3, #2
 800ec1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec24:	2303      	movs	r3, #3
 800ec26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ec2a:	230c      	movs	r3, #12
 800ec2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ec30:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ec34:	4619      	mov	r1, r3
 800ec36:	480a      	ldr	r0, [pc, #40]	@ (800ec60 <HAL_SD_MspInit+0x128>)
 800ec38:	f00f fc86 	bl	801e548 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2100      	movs	r1, #0
 800ec40:	2031      	movs	r0, #49	@ 0x31
 800ec42:	f00d f890 	bl	801bd66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800ec46:	2031      	movs	r0, #49	@ 0x31
 800ec48:	f00d f8a7 	bl	801bd9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800ec4c:	bf00      	nop
 800ec4e:	37f0      	adds	r7, #240	@ 0xf0
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	52007000 	.word	0x52007000
 800ec58:	58024400 	.word	0x58024400
 800ec5c:	58020800 	.word	0x58020800
 800ec60:	58020c00 	.word	0x58020c00

0800ec64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b0ba      	sub	sp, #232	@ 0xe8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
 800ec74:	605a      	str	r2, [r3, #4]
 800ec76:	609a      	str	r2, [r3, #8]
 800ec78:	60da      	str	r2, [r3, #12]
 800ec7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ec7c:	f107 0310 	add.w	r3, r7, #16
 800ec80:	22c0      	movs	r2, #192	@ 0xc0
 800ec82:	2100      	movs	r1, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f01a fc93 	bl	80295b0 <memset>
  if(huart->Instance==USART1)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a27      	ldr	r2, [pc, #156]	@ (800ed2c <HAL_UART_MspInit+0xc8>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d146      	bne.n	800ed22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ec94:	f04f 0201 	mov.w	r2, #1
 800ec98:	f04f 0300 	mov.w	r3, #0
 800ec9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800eca0:	2300      	movs	r3, #0
 800eca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eca6:	f107 0310 	add.w	r3, r7, #16
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f010 fe4e 	bl	801f94c <HAL_RCCEx_PeriphCLKConfig>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800ecb6:	f7fb fdbb 	bl	800a830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ecba:	4b1d      	ldr	r3, [pc, #116]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800ecbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ecc0:	4a1b      	ldr	r2, [pc, #108]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800ecc2:	f043 0310 	orr.w	r3, r3, #16
 800ecc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ecca:	4b19      	ldr	r3, [pc, #100]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800eccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	60fb      	str	r3, [r7, #12]
 800ecd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecd8:	4b15      	ldr	r3, [pc, #84]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800ecda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ecde:	4a14      	ldr	r2, [pc, #80]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800ece0:	f043 0301 	orr.w	r3, r3, #1
 800ece4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ece8:	4b11      	ldr	r3, [pc, #68]	@ (800ed30 <HAL_UART_MspInit+0xcc>)
 800ecea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ecee:	f003 0301 	and.w	r3, r3, #1
 800ecf2:	60bb      	str	r3, [r7, #8]
 800ecf4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ecf6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ecfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecfe:	2302      	movs	r3, #2
 800ed00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed04:	2300      	movs	r3, #0
 800ed06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ed10:	2307      	movs	r3, #7
 800ed12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4805      	ldr	r0, [pc, #20]	@ (800ed34 <HAL_UART_MspInit+0xd0>)
 800ed1e:	f00f fc13 	bl	801e548 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800ed22:	bf00      	nop
 800ed24:	37e8      	adds	r7, #232	@ 0xe8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	40011000 	.word	0x40011000
 800ed30:	58024400 	.word	0x58024400
 800ed34:	58020000 	.word	0x58020000

0800ed38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ed38:	b480      	push	{r7}
 800ed3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ed3c:	bf00      	nop
 800ed3e:	e7fd      	b.n	800ed3c <NMI_Handler+0x4>

0800ed40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ed40:	b480      	push	{r7}
 800ed42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ed44:	bf00      	nop
 800ed46:	e7fd      	b.n	800ed44 <HardFault_Handler+0x4>

0800ed48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ed4c:	bf00      	nop
 800ed4e:	e7fd      	b.n	800ed4c <MemManage_Handler+0x4>

0800ed50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ed54:	bf00      	nop
 800ed56:	e7fd      	b.n	800ed54 <BusFault_Handler+0x4>

0800ed58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ed5c:	bf00      	nop
 800ed5e:	e7fd      	b.n	800ed5c <UsageFault_Handler+0x4>

0800ed60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ed60:	b480      	push	{r7}
 800ed62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ed64:	bf00      	nop
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ed72:	bf00      	nop
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ed80:	bf00      	nop
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ed8e:	f00c fea9 	bl	801bae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ed92:	bf00      	nop
 800ed94:	bd80      	pop	{r7, pc}
	...

0800ed98 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800ed9c:	4802      	ldr	r0, [pc, #8]	@ (800eda8 <SDMMC1_IRQHandler+0x10>)
 800ed9e:	f013 fd43 	bl	8022828 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800eda2:	bf00      	nop
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	240002fc 	.word	0x240002fc

0800edac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
	return 1;
 800edb0:	2301      	movs	r3, #1
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <_kill>:

int _kill(int pid, int sig)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800edc6:	f01a fc95 	bl	80296f4 <__errno>
 800edca:	4603      	mov	r3, r0
 800edcc:	2216      	movs	r2, #22
 800edce:	601a      	str	r2, [r3, #0]
	return -1;
 800edd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <_exit>:

void _exit (int status)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ede4:	f04f 31ff 	mov.w	r1, #4294967295
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff ffe7 	bl	800edbc <_kill>
	while (1) {}		/* Make sure we hang here */
 800edee:	bf00      	nop
 800edf0:	e7fd      	b.n	800edee <_exit+0x12>

0800edf2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b086      	sub	sp, #24
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edfe:	2300      	movs	r3, #0
 800ee00:	617b      	str	r3, [r7, #20]
 800ee02:	e00a      	b.n	800ee1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ee04:	f3af 8000 	nop.w
 800ee08:	4601      	mov	r1, r0
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	60ba      	str	r2, [r7, #8]
 800ee10:	b2ca      	uxtb	r2, r1
 800ee12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	3301      	adds	r3, #1
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	dbf0      	blt.n	800ee04 <_read+0x12>
	}

return len;
 800ee22:	687b      	ldr	r3, [r7, #4]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e009      	b.n	800ee52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	1c5a      	adds	r2, r3, #1
 800ee42:	60ba      	str	r2, [r7, #8]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fb fa3e 	bl	800a2c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	dbf1      	blt.n	800ee3e <_write+0x12>
	}
	return len;
 800ee5a:	687b      	ldr	r3, [r7, #4]
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3718      	adds	r7, #24
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_close>:

int _close(int file)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
	return -1;
 800ee6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ee8c:	605a      	str	r2, [r3, #4]
	return 0;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <_isatty>:

int _isatty(int file)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
	return 1;
 800eea4:	2301      	movs	r3, #1
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eeb2:	b480      	push	{r7}
 800eeb4:	b085      	sub	sp, #20
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	60f8      	str	r0, [r7, #12]
 800eeba:	60b9      	str	r1, [r7, #8]
 800eebc:	607a      	str	r2, [r7, #4]
	return 0;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eed4:	4a14      	ldr	r2, [pc, #80]	@ (800ef28 <_sbrk+0x5c>)
 800eed6:	4b15      	ldr	r3, [pc, #84]	@ (800ef2c <_sbrk+0x60>)
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eee0:	4b13      	ldr	r3, [pc, #76]	@ (800ef30 <_sbrk+0x64>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d102      	bne.n	800eeee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eee8:	4b11      	ldr	r3, [pc, #68]	@ (800ef30 <_sbrk+0x64>)
 800eeea:	4a12      	ldr	r2, [pc, #72]	@ (800ef34 <_sbrk+0x68>)
 800eeec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eeee:	4b10      	ldr	r3, [pc, #64]	@ (800ef30 <_sbrk+0x64>)
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4413      	add	r3, r2
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d207      	bcs.n	800ef0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eefc:	f01a fbfa 	bl	80296f4 <__errno>
 800ef00:	4603      	mov	r3, r0
 800ef02:	220c      	movs	r2, #12
 800ef04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ef06:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0a:	e009      	b.n	800ef20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ef0c:	4b08      	ldr	r3, [pc, #32]	@ (800ef30 <_sbrk+0x64>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ef12:	4b07      	ldr	r3, [pc, #28]	@ (800ef30 <_sbrk+0x64>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	4a05      	ldr	r2, [pc, #20]	@ (800ef30 <_sbrk+0x64>)
 800ef1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	24080000 	.word	0x24080000
 800ef2c:	00000400 	.word	0x00000400
 800ef30:	2400040c 	.word	0x2400040c
 800ef34:	24000c10 	.word	0x24000c10

0800ef38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ef3c:	4b37      	ldr	r3, [pc, #220]	@ (800f01c <SystemInit+0xe4>)
 800ef3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef42:	4a36      	ldr	r2, [pc, #216]	@ (800f01c <SystemInit+0xe4>)
 800ef44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ef4c:	4b34      	ldr	r3, [pc, #208]	@ (800f020 <SystemInit+0xe8>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 030f 	and.w	r3, r3, #15
 800ef54:	2b06      	cmp	r3, #6
 800ef56:	d807      	bhi.n	800ef68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ef58:	4b31      	ldr	r3, [pc, #196]	@ (800f020 <SystemInit+0xe8>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f023 030f 	bic.w	r3, r3, #15
 800ef60:	4a2f      	ldr	r2, [pc, #188]	@ (800f020 <SystemInit+0xe8>)
 800ef62:	f043 0307 	orr.w	r3, r3, #7
 800ef66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ef68:	4b2e      	ldr	r3, [pc, #184]	@ (800f024 <SystemInit+0xec>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4a2d      	ldr	r2, [pc, #180]	@ (800f024 <SystemInit+0xec>)
 800ef6e:	f043 0301 	orr.w	r3, r3, #1
 800ef72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ef74:	4b2b      	ldr	r3, [pc, #172]	@ (800f024 <SystemInit+0xec>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ef7a:	4b2a      	ldr	r3, [pc, #168]	@ (800f024 <SystemInit+0xec>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	4929      	ldr	r1, [pc, #164]	@ (800f024 <SystemInit+0xec>)
 800ef80:	4b29      	ldr	r3, [pc, #164]	@ (800f028 <SystemInit+0xf0>)
 800ef82:	4013      	ands	r3, r2
 800ef84:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ef86:	4b26      	ldr	r3, [pc, #152]	@ (800f020 <SystemInit+0xe8>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 0308 	and.w	r3, r3, #8
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d007      	beq.n	800efa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ef92:	4b23      	ldr	r3, [pc, #140]	@ (800f020 <SystemInit+0xe8>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f023 030f 	bic.w	r3, r3, #15
 800ef9a:	4a21      	ldr	r2, [pc, #132]	@ (800f020 <SystemInit+0xe8>)
 800ef9c:	f043 0307 	orr.w	r3, r3, #7
 800efa0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800efa2:	4b20      	ldr	r3, [pc, #128]	@ (800f024 <SystemInit+0xec>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800efa8:	4b1e      	ldr	r3, [pc, #120]	@ (800f024 <SystemInit+0xec>)
 800efaa:	2200      	movs	r2, #0
 800efac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800efae:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <SystemInit+0xec>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800efb4:	4b1b      	ldr	r3, [pc, #108]	@ (800f024 <SystemInit+0xec>)
 800efb6:	4a1d      	ldr	r2, [pc, #116]	@ (800f02c <SystemInit+0xf4>)
 800efb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800efba:	4b1a      	ldr	r3, [pc, #104]	@ (800f024 <SystemInit+0xec>)
 800efbc:	4a1c      	ldr	r2, [pc, #112]	@ (800f030 <SystemInit+0xf8>)
 800efbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800efc0:	4b18      	ldr	r3, [pc, #96]	@ (800f024 <SystemInit+0xec>)
 800efc2:	4a1c      	ldr	r2, [pc, #112]	@ (800f034 <SystemInit+0xfc>)
 800efc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800efc6:	4b17      	ldr	r3, [pc, #92]	@ (800f024 <SystemInit+0xec>)
 800efc8:	2200      	movs	r2, #0
 800efca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800efcc:	4b15      	ldr	r3, [pc, #84]	@ (800f024 <SystemInit+0xec>)
 800efce:	4a19      	ldr	r2, [pc, #100]	@ (800f034 <SystemInit+0xfc>)
 800efd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800efd2:	4b14      	ldr	r3, [pc, #80]	@ (800f024 <SystemInit+0xec>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800efd8:	4b12      	ldr	r3, [pc, #72]	@ (800f024 <SystemInit+0xec>)
 800efda:	4a16      	ldr	r2, [pc, #88]	@ (800f034 <SystemInit+0xfc>)
 800efdc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800efde:	4b11      	ldr	r3, [pc, #68]	@ (800f024 <SystemInit+0xec>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800efe4:	4b0f      	ldr	r3, [pc, #60]	@ (800f024 <SystemInit+0xec>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a0e      	ldr	r2, [pc, #56]	@ (800f024 <SystemInit+0xec>)
 800efea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800efee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800eff0:	4b0c      	ldr	r3, [pc, #48]	@ (800f024 <SystemInit+0xec>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800eff6:	4b10      	ldr	r3, [pc, #64]	@ (800f038 <SystemInit+0x100>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	4b10      	ldr	r3, [pc, #64]	@ (800f03c <SystemInit+0x104>)
 800effc:	4013      	ands	r3, r2
 800effe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f002:	d202      	bcs.n	800f00a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f004:	4b0e      	ldr	r3, [pc, #56]	@ (800f040 <SystemInit+0x108>)
 800f006:	2201      	movs	r2, #1
 800f008:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800f00a:	4b0e      	ldr	r3, [pc, #56]	@ (800f044 <SystemInit+0x10c>)
 800f00c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800f010:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f012:	bf00      	nop
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	e000ed00 	.word	0xe000ed00
 800f020:	52002000 	.word	0x52002000
 800f024:	58024400 	.word	0x58024400
 800f028:	eaf6ed7f 	.word	0xeaf6ed7f
 800f02c:	02020200 	.word	0x02020200
 800f030:	01ff0000 	.word	0x01ff0000
 800f034:	01010280 	.word	0x01010280
 800f038:	5c001000 	.word	0x5c001000
 800f03c:	ffff0000 	.word	0xffff0000
 800f040:	51008108 	.word	0x51008108
 800f044:	52004000 	.word	0x52004000

0800f048 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800f048:	b580      	push	{r7, lr}
 800f04a:	b09a      	sub	sp, #104	@ 0x68
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800f054:	f107 031c 	add.w	r3, r7, #28
 800f058:	4a23      	ldr	r2, [pc, #140]	@ (800f0e8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f8b7 	bl	800f1d0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f062:	f107 031c 	add.w	r3, r7, #28
 800f066:	4618      	mov	r0, r3
 800f068:	f7f8 fc32 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f06c:	4603      	mov	r3, r0
 800f06e:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800f070:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f074:	4a1d      	ldr	r2, [pc, #116]	@ (800f0ec <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7f8 fc35 	bl	80078e8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f07e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f082:	4618      	mov	r0, r3
 800f084:	f000 f8c9 	bl	800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f088:	4603      	mov	r3, r0
 800f08a:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800f08c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f090:	4a17      	ldr	r2, [pc, #92]	@ (800f0f0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800f092:	68b9      	ldr	r1, [r7, #8]
 800f094:	4618      	mov	r0, r3
 800f096:	f000 f8cc 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f09a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7f8 fc47 	bl	8007932 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4811      	ldr	r0, [pc, #68]	@ (800f0f4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800f0b0:	f01a f904 	bl	80292bc <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800f0b4:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f0b8:	f107 0314 	add.w	r3, r7, #20
 800f0bc:	f107 0210 	add.w	r2, r7, #16
 800f0c0:	f107 0118 	add.w	r1, r7, #24
 800f0c4:	f000 f8da 	bl	800f27c <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f0c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f000 f937 	bl	800f342 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f0d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 f910 	bl	800f2fe <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800f0de:	bf00      	nop
}
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	3768      	adds	r7, #104	@ 0x68
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	0802a6f8 	.word	0x0802a6f8
 800f0ec:	0802a6fc 	.word	0x0802a6fc
 800f0f0:	0802a708 	.word	0x0802a708
 800f0f4:	0802a714 	.word	0x0802a714

0800f0f8 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b086      	sub	sp, #24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
 800f104:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	4618      	mov	r0, r3
 800f10a:	f002 fdf5 	bl	8011cf8 <_ZN6ModuleC1Ev>
 800f10e:	4a15      	ldr	r2, [pc, #84]	@ (800f164 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	601a      	str	r2, [r3, #0]
	bState(false),
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f12c:	2301      	movs	r3, #1
 800f12e:	617b      	str	r3, [r7, #20]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	3320      	adds	r3, #32
 800f134:	f107 0214 	add.w	r2, r7, #20
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 f914 	bl	800f368 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3320      	adds	r3, #32
 800f144:	4618      	mov	r0, r3
 800f146:	f000 f952 	bl	800f3ee <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f14a:	4602      	mov	r2, r0
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	7d5b      	ldrb	r3, [r3, #21]
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f7f5 fd9e 	bl	8004c94 <_ZN3Pin3setEb>
}
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	0802b354 	.word	0x0802b354

0800f168 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	1c5a      	adds	r2, r3, #1
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	69da      	ldr	r2, [r3, #28]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	085b      	lsrs	r3, r3, #1
 800f184:	429a      	cmp	r2, r3
 800f186:	d315      	bcc.n	800f1b4 <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	7d5b      	ldrb	r3, [r3, #21]
 800f18c:	f083 0301 	eor.w	r3, r3, #1
 800f190:	b2da      	uxtb	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	3320      	adds	r3, #32
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 f927 	bl	800f3ee <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	7d5b      	ldrb	r3, [r3, #21]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	f7f5 fd73 	bl	8004c94 <_ZN3Pin3setEb>
        blinkCount = 0;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	61da      	str	r2, [r3, #28]
	}
}
 800f1b4:	bf00      	nop
 800f1b6:	3708      	adds	r7, #8
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
	return;
 800f1c4:	bf00      	nop
}
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b08c      	sub	sp, #48	@ 0x30
 800f1d4:	af02      	add	r7, sp, #8
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	f107 0314 	add.w	r3, r7, #20
 800f1e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f1ea:	f107 031c 	add.w	r3, r7, #28
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 f913 	bl	800f41c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f1f6:	466a      	mov	r2, sp
 800f1f8:	f107 0320 	add.w	r3, r7, #32
 800f1fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f200:	e882 0003 	stmia.w	r2, {r0, r1}
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	f107 0214 	add.w	r2, r7, #20
 800f20a:	ca06      	ldmia	r2, {r1, r2}
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f7f8 fcce 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	3728      	adds	r7, #40	@ 0x28
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
    return as<T>();
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f90d 	bl	800f442 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800f228:	4603      	mov	r3, r0
  }
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f232:	b580      	push	{r7, lr}
 800f234:	b08c      	sub	sp, #48	@ 0x30
 800f236:	af02      	add	r7, sp, #8
 800f238:	60f8      	str	r0, [r7, #12]
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	f107 0314 	add.w	r3, r7, #20
 800f244:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f248:	e883 0003 	stmia.w	r3, {r0, r1}
 800f24c:	f107 031c 	add.w	r3, r7, #28
 800f250:	6879      	ldr	r1, [r7, #4]
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd fe58 	bl	800cf08 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f258:	466a      	mov	r2, sp
 800f25a:	f107 0320 	add.w	r3, r7, #32
 800f25e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f262:	e882 0003 	stmia.w	r2, {r0, r1}
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	f107 0214 	add.w	r2, r7, #20
 800f26c:	ca06      	ldmia	r2, {r1, r2}
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7f8 fc9d 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	3728      	adds	r7, #40	@ 0x28
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f27c:	b5b0      	push	{r4, r5, r7, lr}
 800f27e:	b08c      	sub	sp, #48	@ 0x30
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f28a:	2024      	movs	r0, #36	@ 0x24
 800f28c:	f019 f96c 	bl	8028568 <_Znwj>
 800f290:	4603      	mov	r3, r0
 800f292:	461d      	mov	r5, r3
 800f294:	68b8      	ldr	r0, [r7, #8]
 800f296:	f000 f8f6 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f29a:	4603      	mov	r3, r0
 800f29c:	681c      	ldr	r4, [r3, #0]
 800f29e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f019 f971 	bl	802858a <_ZNSaIcEC1Ev>
 800f2a8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f2ac:	f107 0314 	add.w	r3, r7, #20
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7f8 fa86 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7fd fcb3 	bl	800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	681c      	ldr	r4, [r3, #0]
 800f2c2:	6838      	ldr	r0, [r7, #0]
 800f2c4:	f000 f8ea 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f107 0114 	add.w	r1, r7, #20
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f7ff ff10 	bl	800f0f8 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800f2d8:	4629      	mov	r1, r5
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f000 f8f9 	bl	800f4d2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f2e0:	f107 0314 	add.w	r3, r7, #20
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f019 fa3a 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f2ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f019 f94c 	bl	802858c <_ZNSaIcED1Ev>
 800f2f4:	bf00      	nop
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	3730      	adds	r7, #48	@ 0x30
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bdb0      	pop	{r4, r5, r7, pc}

0800f2fe <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f2fe:	b590      	push	{r4, r7, lr}
 800f300:	b085      	sub	sp, #20
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 f8f1 	bl	800f4f0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f30e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00c      	beq.n	800f332 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f8f6 	bl	800f50a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f31e:	4604      	mov	r4, r0
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f8ff 	bl	800f524 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800f326:	4603      	mov	r3, r0
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4619      	mov	r1, r3
 800f32c:	4620      	mov	r0, r4
 800f32e:	f000 f92d 	bl	800f58c <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	601a      	str	r2, [r3, #0]
      }
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4618      	mov	r0, r3
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd90      	pop	{r4, r7, pc}

0800f342 <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f342:	b590      	push	{r4, r7, lr}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f34c:	687c      	ldr	r4, [r7, #4]
 800f34e:	6838      	ldr	r0, [r7, #0]
 800f350:	f000 f92d 	bl	800f5ae <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f354:	4603      	mov	r3, r0
 800f356:	4619      	mov	r1, r3
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 f933 	bl	800f5c4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	bd90      	pop	{r4, r7, pc}

0800f368 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f368:	b5b0      	push	{r4, r5, r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f374:	2040      	movs	r0, #64	@ 0x40
 800f376:	f019 f8f7 	bl	8028568 <_Znwj>
 800f37a:	4603      	mov	r3, r0
 800f37c:	461c      	mov	r4, r3
 800f37e:	68b8      	ldr	r0, [r7, #8]
 800f380:	f000 f958 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f384:	4605      	mov	r5, r0
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 f83d 	bl	800f406 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f38c:	4603      	mov	r3, r0
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	461a      	mov	r2, r3
 800f392:	4629      	mov	r1, r5
 800f394:	4620      	mov	r0, r4
 800f396:	f7f5 fad3 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f39a:	4621      	mov	r1, r4
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f000 f964 	bl	800f66a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bdb0      	pop	{r4, r5, r7, pc}

0800f3aa <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f3aa:	b590      	push	{r4, r7, lr}
 800f3ac:	b085      	sub	sp, #20
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 f967 	bl	800f688 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f3ba:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00c      	beq.n	800f3de <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 f96c 	bl	800f6a2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 f975 	bl	800f6bc <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f000 f987 	bl	800f6ec <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
      }
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3714      	adds	r7, #20
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd90      	pop	{r4, r7, pc}

0800f3ee <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
	return get();
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f98b 	bl	800f712 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800f3fc:	4603      	mov	r3, r0
      }
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f406:	b480      	push	{r7}
 800f408:	b083      	sub	sp, #12
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f426:	6838      	ldr	r0, [r7, #0]
 800f428:	f000 f980 	bl	800f72c <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f42c:	4602      	mov	r2, r0
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f000 f985 	bl	800f742 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800f438:	bf00      	nop
}
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800f442:	b590      	push	{r4, r7, lr}
 800f444:	b087      	sub	sp, #28
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800f452:	6938      	ldr	r0, [r7, #16]
 800f454:	f7f9 fabd 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800f458:	4604      	mov	r4, r0
 800f45a:	6938      	ldr	r0, [r7, #16]
 800f45c:	f7f9 f947 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800f460:	4602      	mov	r2, r0
 800f462:	f107 0308 	add.w	r3, r7, #8
 800f466:	4621      	mov	r1, r4
 800f468:	4618      	mov	r0, r3
 800f46a:	f7f6 f9e2 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800f46e:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800f470:	f107 0308 	add.w	r3, r7, #8
 800f474:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f478:	f000 f972 	bl	800f760 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800f47c:	4603      	mov	r3, r0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	bd90      	pop	{r4, r7, pc}

0800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f486:	b480      	push	{r7}
 800f488:	b083      	sub	sp, #12
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4618      	mov	r0, r3
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	370c      	adds	r7, #12
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr

0800f4b2 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b082      	sub	sp, #8
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	6039      	str	r1, [r7, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 f96a 	bl	800f79c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b082      	sub	sp, #8
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff ffe6 	bl	800f4b2 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 f962 	bl	800f7c4 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f500:	4603      	mov	r3, r0
 800f502:	4618      	mov	r0, r3
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b082      	sub	sp, #8
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4618      	mov	r0, r3
 800f516:	f000 f962 	bl	800f7de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
	...

0800f53c <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	4a08      	ldr	r2, [pc, #32]	@ (800f568 <_ZN5BlinkD1Ev+0x2c>)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	3320      	adds	r3, #32
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff ff2b 	bl	800f3aa <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4618      	mov	r0, r3
 800f558:	f002 fbea 	bl	8011d30 <_ZN6ModuleD1Ev>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	0802b354 	.word	0x0802b354

0800f56c <_ZN5BlinkD0Ev>:
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7ff ffe1 	bl	800f53c <_ZN5BlinkD1Ev>
 800f57a:	2124      	movs	r1, #36	@ 0x24
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f018 ffe2 	bl	8028546 <_ZdlPvj>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4618      	mov	r0, r3
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d004      	beq.n	800f5a6 <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	3204      	adds	r2, #4
 800f5a0:	6812      	ldr	r2, [r2, #0]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	4790      	blx	r2
      }
 800f5a6:	bf00      	nop
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f5ae:	b480      	push	{r7}
 800f5b0:	b083      	sub	sp, #12
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f5ce:	6838      	ldr	r0, [r7, #0]
 800f5d0:	f000 f912 	bl	800f7f8 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3304      	adds	r3, #4
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fd fd66 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f5e4:	6838      	ldr	r0, [r7, #0]
 800f5e6:	f000 f907 	bl	800f7f8 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f910 	bl	800f812 <_ZSt12__to_addressI5BlinkEPT_S2_>
 800f5f2:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f5f4:	6838      	ldr	r0, [r7, #0]
 800f5f6:	f7ff ffda 	bl	800f5ae <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	f107 0308 	add.w	r3, r7, #8
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f910 	bl	800f828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3304      	adds	r3, #4
 800f60c:	f107 0208 	add.w	r2, r7, #8
 800f610:	4611      	mov	r1, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f000 f94a 	bl	800f8ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f618:	f107 0308 	add.w	r3, r7, #8
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fc fb4a 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f622:	68f9      	ldr	r1, [r7, #12]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f965 	bl	800f8f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b082      	sub	sp, #8
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	6039      	str	r1, [r7, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f955 	bl	800f90a <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4618      	mov	r0, r3
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b082      	sub	sp, #8
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff ffe6 	bl	800f64a <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4618      	mov	r0, r3
 800f694:	f000 f94d 	bl	800f932 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f698:	4603      	mov	r3, r0
 800f69a:	4618      	mov	r0, r3
 800f69c:	3708      	adds	r7, #8
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b082      	sub	sp, #8
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 f94d 	bl	800f94c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f019 f83e 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f6ec:	b590      	push	{r4, r7, lr}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f6f6:	683c      	ldr	r4, [r7, #0]
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	d006      	beq.n	800f70a <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f7ff ffe8 	bl	800f6d2 <_ZN3PinD1Ev>
 800f702:	2140      	movs	r1, #64	@ 0x40
 800f704:	4620      	mov	r0, r4
 800f706:	f018 ff1e 	bl	8028546 <_ZdlPvj>
      }
 800f70a:	bf00      	nop
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd90      	pop	{r4, r7, pc}

0800f712 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f712:	b580      	push	{r7, lr}
 800f714:	b082      	sub	sp, #8
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f000 f922 	bl	800f966 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f722:	4603      	mov	r3, r0
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f734:	687b      	ldr	r3, [r7, #4]
}
 800f736:	4618      	mov	r0, r3
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f74c:	2301      	movs	r3, #1
 800f74e:	2203      	movs	r2, #3
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7f5 fca6 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	463b      	mov	r3, r7
 800f768:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800f76c:	463b      	mov	r3, r7
 800f76e:	4618      	mov	r0, r3
 800f770:	f7f7 fdde 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800f774:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800f776:	463b      	mov	r3, r7
 800f778:	4618      	mov	r0, r3
 800f77a:	f7f7 fde5 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800f77e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d005      	beq.n	800f792 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800f786:	68b9      	ldr	r1, [r7, #8]
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f000 f8fb 	bl	800f984 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800f78e:	4603      	mov	r3, r0
 800f790:	e000      	b.n	800f794 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800f792:	2300      	movs	r3, #0
  }
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f79c:	b590      	push	{r4, r7, lr}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 f97d 	bl	800faa8 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f7ae:	683c      	ldr	r4, [r7, #0]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fe9d 	bl	800f4f0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	601c      	str	r4, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	370c      	adds	r7, #12
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd90      	pop	{r4, r7, pc}

0800f7c4 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f000 f977 	bl	800fac2 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 f976 	bl	800fada <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4618      	mov	r0, r3
 800f804:	f000 f975 	bl	800faf2 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f808:	4603      	mov	r3, r0
 800f80a:	4618      	mov	r0, r3
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f81a:	687b      	ldr	r3, [r7, #4]
    }
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800f838:	6838      	ldr	r0, [r7, #0]
 800f83a:	f7ff ffdd 	bl	800f7f8 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d128      	bne.n	800f8a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800f84e:	f107 030c 	add.w	r3, r7, #12
 800f852:	4618      	mov	r0, r3
 800f854:	f000 f95b 	bl	800fb0e <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800f858:	f107 030c 	add.w	r3, r7, #12
 800f85c:	2101      	movs	r1, #1
 800f85e:	4618      	mov	r0, r3
 800f860:	f000 f96d 	bl	800fb3e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800f864:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f866:	6838      	ldr	r0, [r7, #0]
 800f868:	f000 f978 	bl	800fb5c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800f86c:	4603      	mov	r3, r0
 800f86e:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800f870:	6838      	ldr	r0, [r7, #0]
 800f872:	f7ff fe4a 	bl	800f50a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f876:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f878:	4618      	mov	r0, r3
 800f87a:	f000 f97c 	bl	800fb76 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f87e:	4603      	mov	r3, r0
 800f880:	f107 0210 	add.w	r2, r7, #16
 800f884:	f107 000c 	add.w	r0, r7, #12
 800f888:	6979      	ldr	r1, [r7, #20]
 800f88a:	f000 f97f 	bl	800fb8c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	697a      	ldr	r2, [r7, #20]
 800f892:	601a      	str	r2, [r3, #0]
	}
 800f894:	f107 030c 	add.w	r3, r7, #12
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f944 	bl	800fb26 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f89e:	e000      	b.n	800f8a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800f8a0:	bf00      	nop
	}
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3718      	adds	r7, #24
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d011      	beq.n	800f8ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f7fa ffc7 	bl	800a860 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d004      	beq.n	800f8e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fa ffcd 	bl	800a87e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	601a      	str	r2, [r3, #0]
	return *this;
 800f8ea:	687b      	ldr	r3, [r7, #4]
      }
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3710      	adds	r7, #16
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	{ }
 800f8fe:	bf00      	nop
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f90a:	b590      	push	{r4, r7, lr}
 800f90c:	b083      	sub	sp, #12
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4618      	mov	r0, r3
 800f918:	f000 f950 	bl	800fbbc <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f91c:	683c      	ldr	r4, [r7, #0]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff feb2 	bl	800f688 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f924:	4603      	mov	r3, r0
 800f926:	601c      	str	r4, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4618      	mov	r0, r3
 800f92c:	370c      	adds	r7, #12
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd90      	pop	{r4, r7, pc}

0800f932 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 f94a 	bl	800fbd6 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f942:	4603      	mov	r3, r0
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	f000 f949 	bl	800fbee <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f95c:	4603      	mov	r3, r0
 800f95e:	4618      	mov	r0, r3
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4618      	mov	r0, r3
 800f972:	f000 f948 	bl	800fc06 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f976:	4603      	mov	r3, r0
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4618      	mov	r0, r3
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7f6 fce3 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800f996:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	791b      	ldrb	r3, [r3, #4]
 800f99c:	3b04      	subs	r3, #4
 800f99e:	2b1a      	cmp	r3, #26
 800f9a0:	d87c      	bhi.n	800fa9c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800f9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9a8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800f9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a8:	0800fa5b 	.word	0x0800fa5b
 800f9ac:	0800fa69 	.word	0x0800fa69
 800f9b0:	0800fa15 	.word	0x0800fa15
 800f9b4:	0800fa9d 	.word	0x0800fa9d
 800f9b8:	0800fa9d 	.word	0x0800fa9d
 800f9bc:	0800fa9d 	.word	0x0800fa9d
 800f9c0:	0800fa1b 	.word	0x0800fa1b
 800f9c4:	0800fa9d 	.word	0x0800fa9d
 800f9c8:	0800fa29 	.word	0x0800fa29
 800f9cc:	0800fa9d 	.word	0x0800fa9d
 800f9d0:	0800fa79 	.word	0x0800fa79
 800f9d4:	0800fa9d 	.word	0x0800fa9d
 800f9d8:	0800fa9d 	.word	0x0800fa9d
 800f9dc:	0800fa9d 	.word	0x0800fa9d
 800f9e0:	0800fa9d 	.word	0x0800fa9d
 800f9e4:	0800fa9d 	.word	0x0800fa9d
 800f9e8:	0800fa9d 	.word	0x0800fa9d
 800f9ec:	0800fa9d 	.word	0x0800fa9d
 800f9f0:	0800fa9d 	.word	0x0800fa9d
 800f9f4:	0800fa9d 	.word	0x0800fa9d
 800f9f8:	0800fa9d 	.word	0x0800fa9d
 800f9fc:	0800fa9d 	.word	0x0800fa9d
 800fa00:	0800fa37 	.word	0x0800fa37
 800fa04:	0800fa9d 	.word	0x0800fa9d
 800fa08:	0800fa49 	.word	0x0800fa49
 800fa0c:	0800fa9d 	.word	0x0800fa9d
 800fa10:	0800fa8b 	.word	0x0800fa8b
        return content_.asBoolean;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	e041      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f000 f8fe 	bl	800fc20 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800fa24:	4603      	mov	r3, r0
 800fa26:	e03a      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 f908 	bl	800fc42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800fa32:	4603      	mov	r3, r0
 800fa34:	e033      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4619      	mov	r1, r3
 800fa40:	f000 f910 	bl	800fc64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800fa44:	4603      	mov	r3, r0
 800fa46:	e02a      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4e:	4610      	mov	r0, r2
 800fa50:	4619      	mov	r1, r3
 800fa52:	f000 f91a 	bl	800fc8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800fa56:	4603      	mov	r3, r0
 800fa58:	e021      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 f926 	bl	800fcb0 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fa64:	4603      	mov	r3, r0
 800fa66:	e01a      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 f91e 	bl	800fcb0 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fa74:	4603      	mov	r3, r0
 800fa76:	e012      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	edd3 7a00 	vldr	s15, [r3]
 800fa7e:	eeb0 0a67 	vmov.f32	s0, s15
 800fa82:	f000 f929 	bl	800fcd8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800fa86:	4603      	mov	r3, r0
 800fa88:	e009      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	ed93 7b00 	vldr	d7, [r3]
 800fa90:	eeb0 0b47 	vmov.f64	d0, d7
 800fa94:	f000 f938 	bl	800fd08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	e000      	b.n	800fa9e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800fa9c:	2300      	movs	r3, #0
  }
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop

0800faa8 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 f940 	bl	800fd38 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f944 	bl	800fd58 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800fad0:	4603      	mov	r3, r0
 800fad2:	4618      	mov	r0, r3
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fada:	b580      	push	{r7, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f945 	bl	800fd72 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fae8:	4603      	mov	r3, r0
 800faea:	4618      	mov	r0, r3
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f000 f944 	bl	800fd8a <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fb02:	4603      	mov	r3, r0
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b082      	sub	sp, #8
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f944 	bl	800fda4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b082      	sub	sp, #8
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f943 	bl	800fdba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	3708      	adds	r7, #8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}

0800fb3e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b082      	sub	sp, #8
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	6078      	str	r0, [r7, #4]
 800fb46:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800fb48:	2200      	movs	r2, #0
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 f93f 	bl	800fdd0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800fb52:	4603      	mov	r3, r0
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	f000 f95c 	bl	800fe24 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fb76:	b480      	push	{r7}
 800fb78:	b083      	sub	sp, #12
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4618      	mov	r0, r3
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fb8c:	b590      	push	{r4, r7, lr}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f957 	bl	800fe4e <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fba0:	4604      	mov	r4, r0
 800fba2:	6838      	ldr	r0, [r7, #0]
 800fba4:	f7ff ffe7 	bl	800fb76 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	4622      	mov	r2, r4
 800fbac:	68b9      	ldr	r1, [r7, #8]
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f000 f958 	bl	800fe64 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800fbb4:	bf00      	nop
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd90      	pop	{r4, r7, pc}

0800fbbc <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f000 f96a 	bl	800fea0 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3708      	adds	r7, #8
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b082      	sub	sp, #8
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 f96e 	bl	800fec0 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b082      	sub	sp, #8
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 f96f 	bl	800feda <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 f96e 	bl	800fef2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fc16:	4603      	mov	r3, r0
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f96e 	bl	800ff0a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	e000      	b.n	800fc3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b082      	sub	sp, #8
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f96f 	bl	800ff2e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d001      	beq.n	800fc5a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	e000      	b.n	800fc5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800fc5a:	2300      	movs	r3, #0
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc72:	f000 f967 	bl	800ff44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	e000      	b.n	800fc82 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc94:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc98:	f000 f96c 	bl	800ff74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	e000      	b.n	800fca8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800fcb8:	f107 0308 	add.w	r3, r7, #8
 800fcbc:	6879      	ldr	r1, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f6 fdb0 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800fcc4:	f107 0308 	add.w	r3, r7, #8
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f000 f979 	bl	800ffc0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800fcce:	4603      	mov	r3, r0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fce2:	ed97 0a01 	vldr	s0, [r7, #4]
 800fce6:	f000 f9b2 	bl	801004e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d006      	beq.n	800fcfe <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800fcf0:	edd7 7a01 	vldr	s15, [r7, #4]
 800fcf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcf8:	ee17 3a90 	vmov	r3, s15
 800fcfc:	e000      	b.n	800fd00 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fd12:	ed97 0b00 	vldr	d0, [r7]
 800fd16:	f000 f9c7 	bl	80100a8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d006      	beq.n	800fd2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800fd20:	ed97 7b00 	vldr	d7, [r7]
 800fd24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fd28:	ee17 3a90 	vmov	r3, s15
 800fd2c:	e000      	b.n	800fd30 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f9d7 	bl	80100f4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 f9df 	bl	801010c <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 f9e0 	bl	8010128 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b082      	sub	sp, #8
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 f9df 	bl	801013e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800fd80:	4603      	mov	r3, r0
 800fd82:	4618      	mov	r0, r3
 800fd84:	3708      	adds	r7, #8
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}

0800fd8a <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b082      	sub	sp, #8
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 f9de 	bl	8010156 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	370c      	adds	r7, #12
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr

0800fdba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fdba:	b480      	push	{r7}
 800fdbc:	b083      	sub	sp, #12
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 f9c6 	bl	801016e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800fde2:	4602      	mov	r2, r0
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	4293      	cmp	r3, r2
 800fde8:	bf8c      	ite	hi
 800fdea:	2301      	movhi	r3, #1
 800fdec:	2300      	movls	r3, #0
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	bf14      	ite	ne
 800fdf4:	2301      	movne	r3, #1
 800fdf6:	2300      	moveq	r3, #0
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d007      	beq.n	800fe0e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe04:	d301      	bcc.n	800fe0a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800fe06:	f018 fbc5 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800fe0a:	f018 fbc0 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	011b      	lsls	r3, r3, #4
 800fe12:	4618      	mov	r0, r3
 800fe14:	f018 fba8 	bl	8028568 <_Znwj>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	bf00      	nop
      }
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff fb5f 	bl	800f4f0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800fe32:	4603      	mov	r3, r0
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f7ff fb59 	bl	800f4f0 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2200      	movs	r2, #0
 800fe42:	601a      	str	r2, [r3, #0]
	return __p;
 800fe44:	68fb      	ldr	r3, [r7, #12]
      }
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fe4e:	b480      	push	{r7}
 800fe50:	b083      	sub	sp, #12
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	4619      	mov	r1, r3
 800fe76:	2010      	movs	r0, #16
 800fe78:	f7fa fce6 	bl	800a848 <_ZnwjPv>
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7ff ffe5 	bl	800fe4e <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fe84:	4603      	mov	r3, r0
 800fe86:	681c      	ldr	r4, [r3, #0]
 800fe88:	6838      	ldr	r0, [r7, #0]
 800fe8a:	f7ff fe74 	bl	800fb76 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe8e:	4632      	mov	r2, r6
 800fe90:	4621      	mov	r1, r4
 800fe92:	4628      	mov	r0, r5
 800fe94:	f000 f978 	bl	8010188 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800fe98:	bf00      	nop
 800fe9a:	3714      	adds	r7, #20
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fea0 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f98f 	bl	80101cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f000 f997 	bl	80101e4 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 f998 	bl	8010200 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800fed0:	4603      	mov	r3, r0
 800fed2:	4618      	mov	r0, r3
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f997 	bl	8010216 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800fee8:	4603      	mov	r3, r0
 800feea:	4618      	mov	r0, r3
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f997 	bl	801022e <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ff00:	4603      	mov	r3, r0
 800ff02:	4618      	mov	r0, r3
 800ff04:	3708      	adds	r7, #8
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}

0800ff0a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ff12:	f000 f8c1 	bl	8010098 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ff16:	4603      	mov	r3, r0
 800ff18:	461a      	mov	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	bf94      	ite	ls
 800ff20:	2301      	movls	r3, #1
 800ff22:	2300      	movhi	r3, #0
 800ff24:	b2db      	uxtb	r3, r3
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  return true;
 800ff36:	2301      	movs	r3, #1
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ff44:	b5b0      	push	{r4, r5, r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ff4e:	f000 f8a3 	bl	8010098 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ff52:	4603      	mov	r3, r0
 800ff54:	17da      	asrs	r2, r3, #31
 800ff56:	461c      	mov	r4, r3
 800ff58:	4615      	mov	r5, r2
 800ff5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff5e:	4294      	cmp	r4, r2
 800ff60:	eb75 0303 	sbcs.w	r3, r5, r3
 800ff64:	bf2c      	ite	cs
 800ff66:	2301      	movcs	r3, #1
 800ff68:	2300      	movcc	r3, #0
 800ff6a:	b2db      	uxtb	r3, r3
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bdb0      	pop	{r4, r5, r7, pc}

0800ff74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ff74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ff80:	f000 f85c 	bl	801003c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ff84:	4603      	mov	r3, r0
 800ff86:	17da      	asrs	r2, r3, #31
 800ff88:	4698      	mov	r8, r3
 800ff8a:	4691      	mov	r9, r2
 800ff8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff90:	4542      	cmp	r2, r8
 800ff92:	eb73 0309 	sbcs.w	r3, r3, r9
 800ff96:	db0d      	blt.n	800ffb4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800ff98:	f000 f87e 	bl	8010098 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	17da      	asrs	r2, r3, #31
 800ffa0:	461c      	mov	r4, r3
 800ffa2:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ffa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffa8:	4294      	cmp	r4, r2
 800ffaa:	eb75 0303 	sbcs.w	r3, r5, r3
 800ffae:	db01      	blt.n	800ffb4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e000      	b.n	800ffb6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800ffc0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d82e      	bhi.n	8010030 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800ffd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffd8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800ffd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffd8:	0800ffe9 	.word	0x0800ffe9
 800ffdc:	0800fffb 	.word	0x0800fffb
 800ffe0:	0801000d 	.word	0x0801000d
 800ffe4:	0801001f 	.word	0x0801001f
        return convertNumber<T>(value_.asFloat);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	edd3 7a02 	vldr	s15, [r3, #8]
 800ffee:	eeb0 0a67 	vmov.f32	s0, s15
 800fff2:	f7ff fe71 	bl	800fcd8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800fff6:	4603      	mov	r3, r0
 800fff8:	e01b      	b.n	8010032 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010000:	4610      	mov	r0, r2
 8010002:	4619      	mov	r1, r3
 8010004:	f7ff fe41 	bl	800fc8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 8010008:	4603      	mov	r3, r0
 801000a:	e012      	b.n	8010032 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010012:	4610      	mov	r0, r2
 8010014:	4619      	mov	r1, r3
 8010016:	f7ff fe25 	bl	800fc64 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 801001a:	4603      	mov	r3, r0
 801001c:	e009      	b.n	8010032 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	ed93 7b02 	vldr	d7, [r3, #8]
 8010024:	eeb0 0b47 	vmov.f64	d0, d7
 8010028:	f7ff fe6e 	bl	800fd08 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 801002c:	4603      	mov	r3, r0
 801002e:	e000      	b.n	8010032 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 8010030:	2300      	movs	r3, #0
  }
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop

0801003c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 801003c:	b480      	push	{r7}
 801003e:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8010040:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8010044:	4618      	mov	r0, r3
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr

0801004e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801004e:	b580      	push	{r7, lr}
 8010050:	b082      	sub	sp, #8
 8010052:	af00      	add	r7, sp, #0
 8010054:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8010058:	f7ff fff0 	bl	801003c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 801005c:	ee07 0a90 	vmov	s15, r0
 8010060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010064:	ed97 7a01 	vldr	s14, [r7, #4]
 8010068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801006c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010070:	db0d      	blt.n	801008e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8010072:	2000      	movs	r0, #0
 8010074:	f000 f8e8 	bl	8010248 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 8010078:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 801007c:	edd7 7a01 	vldr	s15, [r7, #4]
 8010080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	d801      	bhi.n	801008e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 801008a:	2301      	movs	r3, #1
 801008c:	e000      	b.n	8010090 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 8010098:	b580      	push	{r7, lr}
 801009a:	af00      	add	r7, sp, #0
    return T(~lowest());
 801009c:	f7ff ffce 	bl	801003c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 80100a0:	4603      	mov	r3, r0
 80100a2:	43db      	mvns	r3, r3
  }
 80100a4:	4618      	mov	r0, r3
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 80100b2:	f7ff ffc3 	bl	801003c <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 80100b6:	ee07 0a90 	vmov	s15, r0
 80100ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80100be:	ed97 6b00 	vldr	d6, [r7]
 80100c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ca:	db0e      	blt.n	80100ea <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80100cc:	f7ff ffe4 	bl	8010098 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 80100d0:	ee07 0a90 	vmov	s15, r0
 80100d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80100d8:	ed97 6b00 	vldr	d6, [r7]
 80100dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	d801      	bhi.n	80100ea <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80100e6:	2301      	movs	r3, #1
 80100e8:	e000      	b.n	80100ec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 f8b2 	bl	8010266 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4618      	mov	r0, r3
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	601a      	str	r2, [r3, #0]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4618      	mov	r0, r3
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f898 	bl	801027c <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 801014c:	4603      	mov	r3, r0
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f897 	bl	8010292 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010164:	4603      	mov	r3, r0
 8010166:	4618      	mov	r0, r3
 8010168:	3708      	adds	r7, #8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801016e:	b480      	push	{r7}
 8010170:	b083      	sub	sp, #12
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010176:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801017a:	4618      	mov	r0, r3
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr
	...

08010188 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8010188:	b5b0      	push	{r4, r5, r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	4618      	mov	r0, r3
 8010198:	f7fd fffe 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801019c:	4a0a      	ldr	r2, [pc, #40]	@ (80101c8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f103 040c 	add.w	r4, r3, #12
 80101a8:	1d3b      	adds	r3, r7, #4
 80101aa:	4618      	mov	r0, r3
 80101ac:	f000 f87e 	bl	80102ac <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	462a      	mov	r2, r5
 80101b6:	68b9      	ldr	r1, [r7, #8]
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 f882 	bl	80102c2 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	4618      	mov	r0, r3
 80101c2:	3718      	adds	r7, #24
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bdb0      	pop	{r4, r5, r7, pc}
 80101c8:	0802b338 	.word	0x0802b338

080101cc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 f890 	bl	80102fa <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4618      	mov	r0, r3
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f876 	bl	8010310 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 8010224:	4603      	mov	r3, r0
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801022e:	b580      	push	{r7, lr}
 8010230:	b082      	sub	sp, #8
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	f000 f874 	bl	8010326 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 801023e:	4603      	mov	r3, r0
 8010240:	4618      	mov	r0, r3
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 8010250:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 8010254:	f7f9 fa9e 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8010258:	eef0 7a40 	vmov.f32	s15, s0
  }
 801025c:	eeb0 0a67 	vmov.f32	s0, s15
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 8010266:	b480      	push	{r7}
 8010268:	b083      	sub	sp, #12
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010292:	b580      	push	{r7, lr}
 8010294:	b082      	sub	sp, #8
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	f000 f84d 	bl	801033c <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 80102a2:	4603      	mov	r3, r0
 80102a4:	4618      	mov	r0, r3
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4618      	mov	r0, r3
 80102b8:	370c      	adds	r7, #12
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr

080102c2 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b084      	sub	sp, #16
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	60f8      	str	r0, [r7, #12]
 80102ca:	60b9      	str	r1, [r7, #8]
 80102cc:	713a      	strb	r2, [r7, #4]
 80102ce:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80102d0:	1d3b      	adds	r3, r7, #4
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff ffea 	bl	80102ac <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 80102d8:	4603      	mov	r3, r0
 80102da:	4619      	mov	r1, r3
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f000 f838 	bl	8010352 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f000 f841 	bl	801036c <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	68ba      	ldr	r2, [r7, #8]
 80102ee:	601a      	str	r2, [r3, #0]
	{ }
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4618      	mov	r0, r3
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4618      	mov	r0, r3
 8010348:	370c      	adds	r7, #12
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	6039      	str	r1, [r7, #0]
 801035c:	6838      	ldr	r0, [r7, #0]
 801035e:	f7ff ffa5 	bl	80102ac <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	4a05      	ldr	r2, [pc, #20]	@ (80103a4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	601a      	str	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	4618      	mov	r0, r3
 8010396:	f7fc f8c1 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4618      	mov	r0, r3
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	0802b338 	.word	0x0802b338

080103a8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7ff ffe7 	bl	8010384 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80103b6:	2110      	movs	r1, #16
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f018 f8c4 	bl	8028546 <_ZdlPvj>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	330c      	adds	r3, #12
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f83f 	bl	8010458 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 80103da:	4602      	mov	r2, r0
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	4619      	mov	r1, r3
 80103e2:	4610      	mov	r0, r2
 80103e4:	f7ff f8d2 	bl	800f58c <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	330c      	adds	r3, #12
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 f837 	bl	8010470 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8010402:	4602      	mov	r2, r0
 8010404:	f107 0314 	add.w	r3, r7, #20
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f000 f83c 	bl	8010488 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010410:	f107 0114 	add.w	r1, r7, #20
 8010414:	f107 030c 	add.w	r3, r7, #12
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	4618      	mov	r0, r3
 801041c:	f000 f841 	bl	80104a2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff ffaf 	bl	8010384 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8010426:	f107 030c 	add.w	r3, r7, #12
 801042a:	4618      	mov	r0, r3
 801042c:	f000 f84d 	bl	80104ca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8010430:	f107 0314 	add.w	r3, r7, #20
 8010434:	4618      	mov	r0, r3
 8010436:	f7ff fb76 	bl	800fb26 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801043a:	3718      	adds	r7, #24
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
        return nullptr;
 801044a:	2300      	movs	r3, #0
      }
 801044c:	4618      	mov	r0, r3
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 f847 	bl	80104f4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 8010466:	4603      	mov	r3, r0
 8010468:	4618      	mov	r0, r3
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f846 	bl	801050a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801047e:	4603      	mov	r3, r0
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7ff fc86 	bl	800fda4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80104ae:	68b8      	ldr	r0, [r7, #8]
 80104b0:	f000 f836 	bl	8010520 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 80104b4:	4602      	mov	r2, r0
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	605a      	str	r2, [r3, #4]
      { }
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b082      	sub	sp, #8
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d007      	beq.n	80104ea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	2201      	movs	r2, #1
 80104e4:	4619      	mov	r1, r3
 80104e6:	f000 f826 	bl	8010536 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 801050a:	b480      	push	{r7}
 801050c:	b083      	sub	sp, #12
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	4618      	mov	r0, r3
 801052c:	370c      	adds	r7, #12
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr

08010536 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010536:	b580      	push	{r7, lr}
 8010538:	b084      	sub	sp, #16
 801053a:	af00      	add	r7, sp, #0
 801053c:	60f8      	str	r0, [r7, #12]
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	68b9      	ldr	r1, [r7, #8]
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f000 f804 	bl	8010554 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 801054c:	bf00      	nop
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	011b      	lsls	r3, r3, #4
 8010564:	4619      	mov	r1, r3
 8010566:	68b8      	ldr	r0, [r7, #8]
 8010568:	f017 ffed 	bl	8028546 <_ZdlPvj>
      }
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8010572:	b480      	push	{r7}
 8010574:	b083      	sub	sp, #12
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	370c      	adds	r7, #12
 8010596:	46bd      	mov	sp, r7
 8010598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059c:	4770      	bx	lr

0801059e <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 801059e:	b580      	push	{r7, lr}
 80105a0:	b082      	sub	sp, #8
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	3318      	adds	r3, #24
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 f8e9 	bl	8010786 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	78fa      	ldrb	r2, [r7, #3]
 80105cc:	771a      	strb	r2, [r3, #28]
 80105ce:	bf00      	nop
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
	...

080105dc <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f001 fb86 	bl	8011cf8 <_ZN6ModuleC1Ev>
 80105ec:	4a0a      	ldr	r2, [pc, #40]	@ (8010618 <_ZN12CommsHandlerC1Ev+0x3c>)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3318      	adds	r3, #24
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f8fa 	bl	80107f0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	771a      	strb	r2, [r3, #28]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	775a      	strb	r2, [r3, #29]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	779a      	strb	r2, [r3, #30]

}
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	0802b378 	.word	0x0802b378

0801061c <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	4a08      	ldr	r2, [pc, #32]	@ (8010648 <_ZN12CommsHandlerD1Ev+0x2c>)
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3318      	adds	r3, #24
 801062e:	4618      	mov	r0, r3
 8010630:	f7fb fd3c 	bl	800c0ac <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	f001 fb7a 	bl	8011d30 <_ZN6ModuleD1Ev>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	0802b378 	.word	0x0802b378

0801064c <_ZN12CommsHandlerD0Ev>:
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ffe1 	bl	801061c <_ZN12CommsHandlerD1Ev>
 801065a:	2120      	movs	r1, #32
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f017 ff72 	bl	8028546 <_ZdlPvj>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4618      	mov	r0, r3
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	460b      	mov	r3, r1
 8010676:	70fb      	strb	r3, [r7, #3]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 801067c:	78fa      	ldrb	r2, [r7, #3]
 801067e:	4611      	mov	r1, r2
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff ff9b 	bl	80105bc <_ZN12CommsHandler7setDataEb>
    });
 8010686:	bf00      	nop
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 801068e:	b590      	push	{r4, r7, lr}
 8010690:	b089      	sub	sp, #36	@ 0x24
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3318      	adds	r3, #24
 801069a:	4618      	mov	r0, r3
 801069c:	f000 f8b8 	bl	8010810 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80106a0:	4604      	mov	r4, r0
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	61fb      	str	r3, [r7, #28]
 80106a6:	f107 021c 	add.w	r2, r7, #28
 80106aa:	f107 030c 	add.w	r3, r7, #12
 80106ae:	4611      	mov	r1, r2
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 f8b9 	bl	8010828 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 80106b6:	f107 030c 	add.w	r3, r7, #12
 80106ba:	4619      	mov	r1, r3
 80106bc:	4620      	mov	r0, r4
 80106be:	f7ff ff6e 	bl	801059e <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 80106c2:	f107 030c 	add.w	r3, r7, #12
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7f0 fb42 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	3318      	adds	r3, #24
 80106d0:	4618      	mov	r0, r3
 80106d2:	f000 f89d 	bl	8010810 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80106d6:	4603      	mov	r3, r0
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	321c      	adds	r2, #28
 80106dc:	6812      	ldr	r2, [r2, #0]
 80106de:	4618      	mov	r0, r3
 80106e0:	4790      	blx	r2
}
 80106e2:	bf00      	nop
 80106e4:	3724      	adds	r7, #36	@ 0x24
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd90      	pop	{r4, r7, pc}

080106ea <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
	interface->start();
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	3318      	adds	r3, #24
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 f88a 	bl	8010810 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80106fc:	4603      	mov	r3, r0
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	3220      	adds	r2, #32
 8010702:	6812      	ldr	r2, [r2, #0]
 8010704:	4618      	mov	r0, r3
 8010706:	4790      	blx	r2
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
	interface->tasks();
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3318      	adds	r3, #24
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f877 	bl	8010810 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 8010722:	4603      	mov	r3, r0
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	3224      	adds	r2, #36	@ 0x24
 8010728:	6812      	ldr	r2, [r2, #0]
 801072a:	4618      	mov	r0, r3
 801072c:	4790      	blx	r2
}
 801072e:	bf00      	nop
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
	if (data)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	7f1b      	ldrb	r3, [r3, #28]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d006      	beq.n	8010754 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	775a      	strb	r2, [r3, #29]
		status = true;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	779a      	strb	r2, [r3, #30]
 8010752:	e005      	b.n	8010760 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	7f5b      	ldrb	r3, [r3, #29]
 8010758:	3301      	adds	r3, #1
 801075a:	b2da      	uxtb	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	7f5b      	ldrb	r3, [r3, #29]
 8010764:	2b64      	cmp	r3, #100	@ 0x64
 8010766:	d905      	bls.n	8010774 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	775a      	strb	r2, [r3, #29]
		status = false;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2200      	movs	r2, #0
 8010772:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	771a      	strb	r2, [r3, #28]
}
 801077a:	bf00      	nop
 801077c:	370c      	adds	r7, #12
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr

08010786 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8010786:	b580      	push	{r7, lr}
 8010788:	b086      	sub	sp, #24
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8010790:	f107 0308 	add.w	r3, r7, #8
 8010794:	6839      	ldr	r1, [r7, #0]
 8010796:	4618      	mov	r0, r3
 8010798:	f000 f876 	bl	8010888 <_ZNSt8functionIFvbEEC1ERKS1_>
 801079c:	f107 0308 	add.w	r3, r7, #8
 80107a0:	6879      	ldr	r1, [r7, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f000 f89b 	bl	80108de <_ZNSt8functionIFvbEE4swapERS1_>
 80107a8:	f107 0308 	add.w	r3, r7, #8
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7f0 facf 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 80107b2:	687b      	ldr	r3, [r7, #4]
      }
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f000 f8aa 	bl	8010920 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	4618      	mov	r0, r3
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b082      	sub	sp, #8
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ff ffeb 	bl	80107bc <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
	: _M_t()
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4618      	mov	r0, r3
 8010802:	f7ff ffe8 	bl	80107d6 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
	return get();
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 f88e 	bl	801093a <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 801081e:	4603      	mov	r3, r0
      }
 8010820:	4618      	mov	r0, r3
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 8010828:	b590      	push	{r4, r7, lr}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	461a      	mov	r2, r3
 8010836:	2300      	movs	r3, #0
 8010838:	6013      	str	r3, [r2, #0]
 801083a:	6053      	str	r3, [r2, #4]
 801083c:	6093      	str	r3, [r2, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	f7f1 fca7 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 801084c:	6838      	ldr	r0, [r7, #0]
 801084e:	f000 f881 	bl	8010954 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00e      	beq.n	8010876 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8010858:	687c      	ldr	r4, [r7, #4]
 801085a:	6838      	ldr	r0, [r7, #0]
 801085c:	f000 f885 	bl	801096a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010860:	4603      	mov	r3, r0
 8010862:	4619      	mov	r1, r3
 8010864:	4620      	mov	r0, r4
 8010866:	f000 f88b 	bl	8010980 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4a04      	ldr	r2, [pc, #16]	@ (8010880 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 801086e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4a04      	ldr	r2, [pc, #16]	@ (8010884 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 8010874:	609a      	str	r2, [r3, #8]
	}
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	bd90      	pop	{r4, r7, pc}
 8010880:	080109a5 	.word	0x080109a5
 8010884:	080109cf 	.word	0x080109cf

08010888 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	461a      	mov	r2, r3
 8010896:	2300      	movs	r3, #0
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	6053      	str	r3, [r2, #4]
 801089c:	6093      	str	r3, [r2, #8]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f1 fc77 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80108ac:	6838      	ldr	r0, [r7, #0]
 80108ae:	f000 f8ad 	bl	8010a0c <_ZNKSt8functionIFvbEEcvbEv>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00d      	beq.n	80108d4 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	689b      	ldr	r3, [r3, #8]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	2202      	movs	r2, #2
 80108c2:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	68da      	ldr	r2, [r3, #12]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	689a      	ldr	r2, [r3, #8]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	609a      	str	r2, [r3, #8]
      }
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 80108de:	b580      	push	{r7, lr}
 80108e0:	b082      	sub	sp, #8
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 f89c 	bl	8010a2c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f103 0208 	add.w	r2, r3, #8
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	3308      	adds	r3, #8
 80108fe:	4619      	mov	r1, r3
 8010900:	4610      	mov	r0, r2
 8010902:	f000 f8ba 	bl	8010a7a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f103 020c 	add.w	r2, r3, #12
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	330c      	adds	r3, #12
 8010910:	4619      	mov	r1, r3
 8010912:	4610      	mov	r0, r2
 8010914:	f000 f8d0 	bl	8010ab8 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4618      	mov	r0, r3
 801092c:	f000 f8e3 	bl	8010af6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801093a:	b580      	push	{r7, lr}
 801093c:	b082      	sub	sp, #8
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	f000 f8e6 	bl	8010b16 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 801094a:	4603      	mov	r3, r0
 801094c:	4618      	mov	r0, r3
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
	  { return true; }
 801095c:	2301      	movs	r3, #1
 801095e:	4618      	mov	r0, r3
 8010960:	370c      	adds	r7, #12
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801096a:	b480      	push	{r7}
 801096c:	b083      	sub	sp, #12
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	4618      	mov	r0, r3
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010980:	b590      	push	{r4, r7, lr}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 801098a:	6838      	ldr	r0, [r7, #0]
 801098c:	f7ff ffed 	bl	801096a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010990:	4603      	mov	r3, r0
 8010992:	4622      	mov	r2, r4
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 f8cb 	bl	8010b32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 801099c:	bf00      	nop
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}

080109a4 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80109a4:	b590      	push	{r4, r7, lr}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f8d8 	bl	8010b64 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80109b4:	4604      	mov	r4, r0
 80109b6:	6838      	ldr	r0, [r7, #0]
 80109b8:	f7f1 fb2a 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80109bc:	4603      	mov	r3, r0
 80109be:	4619      	mov	r1, r3
 80109c0:	4620      	mov	r0, r4
 80109c2:	f000 f8df 	bl	8010b84 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80109c6:	bf00      	nop
      }
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd90      	pop	{r4, r7, pc}

080109ce <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80109ce:	b590      	push	{r4, r7, lr}
 80109d0:	b085      	sub	sp, #20
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	60f8      	str	r0, [r7, #12]
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	4613      	mov	r3, r2
 80109da:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80109dc:	79fb      	ldrb	r3, [r7, #7]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d109      	bne.n	80109f6 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80109e2:	68b8      	ldr	r0, [r7, #8]
 80109e4:	f000 f8be 	bl	8010b64 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80109e8:	4604      	mov	r4, r0
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f000 f8e0 	bl	8010bb0 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 80109f0:	4603      	mov	r3, r0
 80109f2:	601c      	str	r4, [r3, #0]
	    break;
 80109f4:	e005      	b.n	8010a02 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80109f6:	79fb      	ldrb	r3, [r7, #7]
 80109f8:	461a      	mov	r2, r3
 80109fa:	68b9      	ldr	r1, [r7, #8]
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f000 f8e3 	bl	8010bc8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010a02:	2300      	movs	r3, #0
      }
 8010a04:	4618      	mov	r0, r3
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd90      	pop	{r4, r7, pc}

08010a0c <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7f0 f959 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	f083 0301 	eor.w	r3, r3, #1
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	4618      	mov	r0, r3
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 f900 	bl	8010c3c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	f107 0308 	add.w	r3, r7, #8
 8010a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a46:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8010a4a:	6838      	ldr	r0, [r7, #0]
 8010a4c:	f000 f8f6 	bl	8010c3c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010a50:	4602      	mov	r2, r0
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a58:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4618      	mov	r0, r3
 8010a62:	f000 f8eb 	bl	8010c3c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010a66:	4602      	mov	r2, r0
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a6e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010a72:	bf00      	nop
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8010a7a:	b580      	push	{r7, lr}
 8010a7c:	b084      	sub	sp, #16
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	6078      	str	r0, [r7, #4]
 8010a82:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f8e4 	bl	8010c52 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010a90:	6838      	ldr	r0, [r7, #0]
 8010a92:	f000 f8de 	bl	8010c52 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010a96:	4603      	mov	r3, r0
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010a9e:	f107 030c 	add.w	r3, r7, #12
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f000 f8d5 	bl	8010c52 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	601a      	str	r2, [r3, #0]
    }
 8010ab0:	bf00      	nop
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f8d0 	bl	8010c68 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010ace:	6838      	ldr	r0, [r7, #0]
 8010ad0:	f000 f8ca 	bl	8010c68 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010adc:	f107 030c 	add.w	r3, r7, #12
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f000 f8c1 	bl	8010c68 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	601a      	str	r2, [r3, #0]
    }
 8010aee:	bf00      	nop
 8010af0:	3710      	adds	r7, #16
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b082      	sub	sp, #8
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f8bd 	bl	8010c7e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f000 f8c5 	bl	8010c96 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 f8c6 	bl	8010cb2 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010b26:	4603      	mov	r3, r0
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010b32:	b590      	push	{r4, r7, lr}
 8010b34:	b085      	sub	sp, #20
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	60f8      	str	r0, [r7, #12]
 8010b3a:	60b9      	str	r1, [r7, #8]
 8010b3c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7ff fd17 	bl	8010572 <_ZNSt9_Any_data9_M_accessEv>
 8010b44:	4603      	mov	r3, r0
 8010b46:	4619      	mov	r1, r3
 8010b48:	2004      	movs	r0, #4
 8010b4a:	f7f9 fe7d 	bl	800a848 <_ZnwjPv>
 8010b4e:	4604      	mov	r4, r0
 8010b50:	68b8      	ldr	r0, [r7, #8]
 8010b52:	f7ff ff0a 	bl	801096a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010b56:	4603      	mov	r3, r0
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	6023      	str	r3, [r4, #0]
	  }
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}

08010b64 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f8ad 	bl	8010ccc <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 8010b72:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8010b74:	68f8      	ldr	r0, [r7, #12]
 8010b76:	f000 f8b5 	bl	8010ce4 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 8010b7a:	4603      	mov	r3, r0
	}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010b84:	b5b0      	push	{r4, r5, r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f8b3 	bl	8010cfa <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010b94:	4604      	mov	r4, r0
 8010b96:	6838      	ldr	r0, [r7, #0]
 8010b98:	f7f1 fa3a 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f000 f8b4 	bl	8010d10 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010ba8:	bf00      	nop
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bdb0      	pop	{r4, r5, r7, pc}

08010bb0 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7ff fcda 	bl	8010572 <_ZNSt9_Any_data9_M_accessEv>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010bd6:	79fb      	ldrb	r3, [r7, #7]
 8010bd8:	2b03      	cmp	r3, #3
 8010bda:	d82a      	bhi.n	8010c32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8010bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8010be4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8010bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be2:	bf00      	nop
 8010be4:	08010bf5 	.word	0x08010bf5
 8010be8:	08010c03 	.word	0x08010c03
 8010bec:	08010c17 	.word	0x08010c17
 8010bf0:	08010c29 	.word	0x08010c29
	      __dest._M_access<const type_info*>() = nullptr;
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f000 f8a2 	bl	8010d3e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	601a      	str	r2, [r3, #0]
	      break;
 8010c00:	e017      	b.n	8010c32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010c02:	68b8      	ldr	r0, [r7, #8]
 8010c04:	f7ff ffae 	bl	8010b64 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7ff ffd0 	bl	8010bb0 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010c10:	4603      	mov	r3, r0
 8010c12:	601c      	str	r4, [r3, #0]
	      break;
 8010c14:	e00d      	b.n	8010c32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8010c16:	68b8      	ldr	r0, [r7, #8]
 8010c18:	f7ff ffa4 	bl	8010b64 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010c1c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8010c1e:	4619      	mov	r1, r3
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 f898 	bl	8010d56 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8010c26:	e004      	b.n	8010c32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8010c28:	4621      	mov	r1, r4
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f000 f8a5 	bl	8010d7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010c30:	bf00      	nop
	  return false;
 8010c32:	2300      	movs	r3, #0
	}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd90      	pop	{r4, r7, pc}

08010c3c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8010c52:	b480      	push	{r7}
 8010c54:	b083      	sub	sp, #12
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4618      	mov	r0, r3
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b082      	sub	sp, #8
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f883 	bl	8010d92 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 8010c96:	b480      	push	{r7}
 8010c98:	b083      	sub	sp, #12
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	601a      	str	r2, [r3, #0]
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	370c      	adds	r7, #12
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b082      	sub	sp, #8
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 f873 	bl	8010da8 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff fc57 	bl	8010588 <_ZNKSt9_Any_data9_M_accessEv>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010cfa:	b480      	push	{r7}
 8010cfc:	b083      	sub	sp, #12
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b085      	sub	sp, #20
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	7338      	strb	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010d1c:	68b8      	ldr	r0, [r7, #8]
 8010d1e:	f7ff ffec 	bl	8010cfa <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010d22:	4604      	mov	r4, r0
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7f1 f973 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4620      	mov	r0, r4
 8010d32:	f7ff fc9b 	bl	801066c <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 8010d36:	bf00      	nop
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}

08010d3e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b082      	sub	sp, #8
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff fc13 	bl	8010572 <_ZNSt9_Any_data9_M_accessEv>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010d56:	b590      	push	{r4, r7, lr}
 8010d58:	b083      	sub	sp, #12
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010d60:	6838      	ldr	r0, [r7, #0]
 8010d62:	f000 f82d 	bl	8010dc0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010d66:	4603      	mov	r3, r0
 8010d68:	4622      	mov	r2, r4
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 f832 	bl	8010dd6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010d72:	bf00      	nop
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd90      	pop	{r4, r7, pc}

08010d7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 f83f 	bl	8010e08 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 8010d8a:	bf00      	nop
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 8010d92:	b480      	push	{r7}
 8010d94:	b083      	sub	sp, #12
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 f835 	bl	8010e20 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010db6:	4603      	mov	r3, r0
 8010db8:	4618      	mov	r0, r3
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010dc0:	b480      	push	{r7}
 8010dc2:	b083      	sub	sp, #12
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4618      	mov	r0, r3
 8010dcc:	370c      	adds	r7, #12
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd4:	4770      	bx	lr

08010dd6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010dd6:	b590      	push	{r4, r7, lr}
 8010dd8:	b085      	sub	sp, #20
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	60f8      	str	r0, [r7, #12]
 8010dde:	60b9      	str	r1, [r7, #8]
 8010de0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f7ff fbc5 	bl	8010572 <_ZNSt9_Any_data9_M_accessEv>
 8010de8:	4603      	mov	r3, r0
 8010dea:	4619      	mov	r1, r3
 8010dec:	2004      	movs	r0, #4
 8010dee:	f7f9 fd2b 	bl	800a848 <_ZnwjPv>
 8010df2:	4604      	mov	r4, r0
 8010df4:	68b8      	ldr	r0, [r7, #8]
 8010df6:	f7ff ffe3 	bl	8010dc0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	6023      	str	r3, [r4, #0]
	  }
 8010e00:	bf00      	nop
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd90      	pop	{r4, r7, pc}

08010e08 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff fbae 	bl	8010572 <_ZNSt9_Any_data9_M_accessEv>
 8010e16:	4603      	mov	r3, r0
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f000 f805 	bl	8010e3a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 8010e30:	4603      	mov	r3, r0
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010e3a:	b480      	push	{r7}
 8010e3c:	b083      	sub	sp, #12
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	4618      	mov	r0, r3
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	4b03      	ldr	r3, [pc, #12]	@ (8010e68 <_ZN6Remora9getTxDataEv+0x18>)
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	370c      	adds	r7, #12
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	30000080 	.word	0x30000080

08010e6c <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	4b03      	ldr	r3, [pc, #12]	@ (8010e84 <_ZN6Remora9getRxDataEv+0x18>)
 8010e76:	4618      	mov	r0, r3
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	300000c0 	.word	0x300000c0

08010e88 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b0b0      	sub	sp, #192	@ 0xc0
 8010e8c:	af04      	add	r7, sp, #16
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 8010e94:	f107 0320 	add.w	r3, r7, #32
 8010e98:	4a65      	ldr	r2, [pc, #404]	@ (8011030 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fe f997 	bl	800f1d0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010ea2:	f107 0320 	add.w	r3, r7, #32
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7f6 fd12 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010eac:	4603      	mov	r3, r0
 8010eae:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 8010eb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8011034 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 8010eb6:	68b9      	ldr	r1, [r7, #8]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f000 f985 	bl	80111c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010ebe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7f6 fd04 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010ec8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 8010ecc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010ed0:	4a59      	ldr	r2, [pc, #356]	@ (8011038 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 8010ed2:	68b9      	ldr	r1, [r7, #8]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f6 fcd6 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010eda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f6 fcf6 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010ee4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 8010ee8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010eec:	4a53      	ldr	r2, [pc, #332]	@ (801103c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 8010eee:	68b9      	ldr	r1, [r7, #8]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 f98e 	bl	8011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010ef6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7f6 fce8 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f00:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 8010f04:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010f08:	4a4d      	ldr	r2, [pc, #308]	@ (8011040 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 8010f0a:	68b9      	ldr	r1, [r7, #8]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f000 f980 	bl	8011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f12:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fe f97f 	bl	800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 8010f20:	4948      	ldr	r1, [pc, #288]	@ (8011044 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 8010f22:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f26:	f7ef f9db 	bl	80002e0 <strcmp>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d102      	bne.n	8010f36 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 8010f30:	2301      	movs	r3, #1
 8010f32:	617b      	str	r3, [r7, #20]
 8010f34:	e022      	b.n	8010f7c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 8010f36:	4944      	ldr	r1, [pc, #272]	@ (8011048 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8010f38:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f3c:	f7ef f9d0 	bl	80002e0 <strcmp>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d102      	bne.n	8010f4c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 8010f46:	2302      	movs	r3, #2
 8010f48:	617b      	str	r3, [r7, #20]
 8010f4a:	e017      	b.n	8010f7c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 8010f4c:	493f      	ldr	r1, [pc, #252]	@ (801104c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8010f4e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f52:	f7ef f9c5 	bl	80002e0 <strcmp>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d102      	bne.n	8010f62 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 8010f5c:	2303      	movs	r3, #3
 8010f5e:	617b      	str	r3, [r7, #20]
 8010f60:	e00c      	b.n	8010f7c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 8010f62:	493b      	ldr	r1, [pc, #236]	@ (8011050 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8010f64:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f68:	f7ef f9ba 	bl	80002e0 <strcmp>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d102      	bne.n	8010f78 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 8010f72:	2304      	movs	r3, #4
 8010f74:	617b      	str	r3, [r7, #20]
 8010f76:	e001      	b.n	8010f7c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 8010f7c:	4935      	ldr	r1, [pc, #212]	@ (8011054 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8010f7e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8010f82:	f7ef f9ad 	bl	80002e0 <strcmp>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bf0c      	ite	eq
 8010f8c:	2301      	moveq	r3, #1
 8010f8e:	2300      	movne	r3, #0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 8010f94:	4930      	ldr	r1, [pc, #192]	@ (8011058 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8010f96:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010f9a:	f7ef f9a1 	bl	80002e0 <strcmp>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d105      	bne.n	8010fb0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7ff ff61 	bl	8010e6c <_ZN6Remora9getRxDataEv>
 8010faa:	4603      	mov	r3, r0
 8010fac:	333d      	adds	r3, #61	@ 0x3d
 8010fae:	e004      	b.n	8010fba <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7ff ff4d 	bl	8010e50 <_ZN6Remora9getTxDataEv>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	333c      	adds	r3, #60	@ 0x3c
 8010fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8010fc6:	4825      	ldr	r0, [pc, #148]	@ (801105c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8010fc8:	f018 f978 	bl	80292bc <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 8010fcc:	4922      	ldr	r1, [pc, #136]	@ (8011058 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8010fce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010fd2:	f7ef f985 	bl	80002e0 <strcmp>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d101      	bne.n	8010fe0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e000      	b.n	8010fe2 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010fe6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8010fea:	f107 011c 	add.w	r1, r7, #28
 8010fee:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8010ff2:	f107 0314 	add.w	r3, r7, #20
 8010ff6:	9302      	str	r3, [sp, #8]
 8010ff8:	f107 0313 	add.w	r3, r7, #19
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	f107 0318 	add.w	r3, r7, #24
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	460b      	mov	r3, r1
 8011006:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801100a:	f000 f927 	bl	801125c <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801100e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011012:	4619      	mov	r1, r3
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f000 f999 	bl	801134c <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 801101a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801101e:	4618      	mov	r0, r3
 8011020:	f000 f972 	bl	8011308 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 8011024:	bf00      	nop
}
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	37b0      	adds	r7, #176	@ 0xb0
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	0802a780 	.word	0x0802a780
 8011034:	0802a784 	.word	0x0802a784
 8011038:	0802a78c 	.word	0x0802a78c
 801103c:	0802a794 	.word	0x0802a794
 8011040:	0802a7a0 	.word	0x0802a7a0
 8011044:	0802a7ac 	.word	0x0802a7ac
 8011048:	0802a7b8 	.word	0x0802a7b8
 801104c:	0802a7c0 	.word	0x0802a7c0
 8011050:	0802a7cc 	.word	0x0802a7cc
 8011054:	0802a7d8 	.word	0x0802a7d8
 8011058:	0802a7e0 	.word	0x0802a7e0
 801105c:	0802a7e8 	.word	0x0802a7e8

08011060 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 8011060:	b590      	push	{r4, r7, lr}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	4618      	mov	r0, r3
 8011072:	f000 fe41 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8011076:	4a1c      	ldr	r2, [pc, #112]	@ (80110e8 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	619a      	str	r2, [r3, #24]
    mode(_mode),
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f103 0420 	add.w	r4, r3, #32
 801108e:	6838      	ldr	r0, [r7, #0]
 8011090:	f000 f96f 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8011094:	4603      	mov	r3, r0
 8011096:	4619      	mov	r1, r3
 8011098:	4620      	mov	r0, r4
 801109a:	f017 fb41 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6a3a      	ldr	r2, [r7, #32]
 80110a2:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80110aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110b2:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f103 0120 	add.w	r1, r3, #32
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f103 021c 	add.w	r2, r3, #28
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80110cc:	4623      	mov	r3, r4
 80110ce:	f000 f95b 	bl	8011388 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110d6:	2201      	movs	r2, #1
 80110d8:	409a      	lsls	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	4618      	mov	r0, r3
 80110e2:	3714      	adds	r7, #20
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd90      	pop	{r4, r7, pc}
 80110e8:	0802b3b8 	.word	0x0802b3b8

080110ec <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	69db      	ldr	r3, [r3, #28]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d136      	bne.n	801116a <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3344      	adds	r3, #68	@ 0x44
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe f974 	bl	800f3ee <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 8011106:	4603      	mov	r3, r0
 8011108:	4618      	mov	r0, r3
 801110a:	f7f3 fdad 	bl	8004c68 <_ZNK3Pin3getEv>
 801110e:	4603      	mov	r3, r0
 8011110:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d003      	beq.n	8011124 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 801111c:	7bfb      	ldrb	r3, [r7, #15]
 801111e:	f083 0301 	eor.w	r3, r3, #1
 8011122:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 8011124:	7bfb      	ldrb	r3, [r7, #15]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00e      	beq.n	8011148 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	b29b      	uxth	r3, r3
 8011132:	b21a      	sxth	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011138:	b21b      	sxth	r3, r3
 801113a:	4313      	orrs	r3, r2
 801113c:	b21a      	sxth	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	b292      	uxth	r2, r2
 8011144:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 8011146:	e031      	b.n	80111ac <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	b29b      	uxth	r3, r3
 8011150:	b21a      	sxth	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011156:	b21b      	sxth	r3, r3
 8011158:	43db      	mvns	r3, r3
 801115a:	b21b      	sxth	r3, r3
 801115c:	4013      	ands	r3, r2
 801115e:	b21a      	sxth	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	699b      	ldr	r3, [r3, #24]
 8011164:	b292      	uxth	r2, r2
 8011166:	801a      	strh	r2, [r3, #0]
}
 8011168:	e020      	b.n	80111ac <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	699b      	ldr	r3, [r3, #24]
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	b29b      	uxth	r3, r3
 8011172:	461a      	mov	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011178:	4013      	ands	r3, r2
 801117a:	2b00      	cmp	r3, #0
 801117c:	bf14      	ite	ne
 801117e:	2301      	movne	r3, #1
 8011180:	2300      	moveq	r3, #0
 8011182:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801118a:	2b00      	cmp	r3, #0
 801118c:	d003      	beq.n	8011196 <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 801118e:	7bfb      	ldrb	r3, [r7, #15]
 8011190:	f083 0301 	eor.w	r3, r3, #1
 8011194:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	3344      	adds	r3, #68	@ 0x44
 801119a:	4618      	mov	r0, r3
 801119c:	f7fe f927 	bl	800f3ee <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 80111a0:	4602      	mov	r2, r0
 80111a2:	7bfb      	ldrb	r3, [r7, #15]
 80111a4:	4619      	mov	r1, r3
 80111a6:	4610      	mov	r0, r2
 80111a8:	f7f3 fd74 	bl	8004c94 <_ZN3Pin3setEb>
}
 80111ac:	bf00      	nop
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 80111b4:	b480      	push	{r7}
 80111b6:	b083      	sub	sp, #12
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
    return;
 80111bc:	bf00      	nop
}
 80111be:	370c      	adds	r7, #12
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr

080111c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b08c      	sub	sp, #48	@ 0x30
 80111cc:	af02      	add	r7, sp, #8
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80111d4:	68ba      	ldr	r2, [r7, #8]
 80111d6:	f107 0314 	add.w	r3, r7, #20
 80111da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111de:	e883 0003 	stmia.w	r3, {r0, r1}
 80111e2:	f107 031c 	add.w	r3, r7, #28
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fb fe58 	bl	800ce9e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80111ee:	466a      	mov	r2, sp
 80111f0:	f107 0320 	add.w	r3, r7, #32
 80111f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	f107 0214 	add.w	r2, r7, #20
 8011202:	ca06      	ldmia	r2, {r1, r2}
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f7f6 fcd2 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	3728      	adds	r7, #40	@ 0x28
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011212:	b580      	push	{r7, lr}
 8011214:	b08c      	sub	sp, #48	@ 0x30
 8011216:	af02      	add	r7, sp, #8
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	f107 0314 	add.w	r3, r7, #20
 8011224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011228:	e883 0003 	stmia.w	r3, {r0, r1}
 801122c:	f107 031c 	add.w	r3, r7, #28
 8011230:	6879      	ldr	r1, [r7, #4]
 8011232:	4618      	mov	r0, r3
 8011234:	f000 f8cf 	bl	80113d6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011238:	466a      	mov	r2, sp
 801123a:	f107 0320 	add.w	r3, r7, #32
 801123e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011242:	e882 0003 	stmia.w	r2, {r0, r1}
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	f107 0214 	add.w	r2, r7, #20
 801124c:	ca06      	ldmia	r2, {r1, r2}
 801124e:	68f8      	ldr	r0, [r7, #12]
 8011250:	f7f6 fcad 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	3728      	adds	r7, #40	@ 0x28
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011260:	b091      	sub	sp, #68	@ 0x44
 8011262:	af04      	add	r7, sp, #16
 8011264:	60f8      	str	r0, [r7, #12]
 8011266:	60b9      	str	r1, [r7, #8]
 8011268:	607a      	str	r2, [r7, #4]
 801126a:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 801126c:	204c      	movs	r0, #76	@ 0x4c
 801126e:	f017 f97b 	bl	8028568 <_Znwj>
 8011272:	4603      	mov	r3, r0
 8011274:	4698      	mov	r8, r3
 8011276:	68b8      	ldr	r0, [r7, #8]
 8011278:	f000 f8c0 	bl	80113fc <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 801127c:	4681      	mov	r9, r0
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7fe f8c1 	bl	800f406 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8011284:	4603      	mov	r3, r0
 8011286:	681e      	ldr	r6, [r3, #0]
 8011288:	6838      	ldr	r0, [r7, #0]
 801128a:	f7fe f8fc 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801128e:	4603      	mov	r3, r0
 8011290:	681c      	ldr	r4, [r3, #0]
 8011292:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011296:	4618      	mov	r0, r3
 8011298:	f017 f977 	bl	802858a <_ZNSaIcEC1Ev>
 801129c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80112a0:	f107 0314 	add.w	r3, r7, #20
 80112a4:	4621      	mov	r1, r4
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7f6 fa8c 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80112ac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80112ae:	f7fe f8f5 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80112b2:	4603      	mov	r3, r0
 80112b4:	681c      	ldr	r4, [r3, #0]
 80112b6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80112b8:	f000 f8ab 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80112bc:	4603      	mov	r3, r0
 80112be:	781d      	ldrb	r5, [r3, #0]
 80112c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80112c2:	f7fe f8eb 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80112c6:	4603      	mov	r3, r0
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f107 0214 	add.w	r2, r7, #20
 80112ce:	9302      	str	r3, [sp, #8]
 80112d0:	9501      	str	r5, [sp, #4]
 80112d2:	9400      	str	r4, [sp, #0]
 80112d4:	4613      	mov	r3, r2
 80112d6:	4632      	mov	r2, r6
 80112d8:	4649      	mov	r1, r9
 80112da:	4640      	mov	r0, r8
 80112dc:	f7ff fec0 	bl	8011060 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 80112e0:	4641      	mov	r1, r8
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f000 f8b0 	bl	8011448 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4618      	mov	r0, r3
 80112ee:	f017 fa36 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80112f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80112f6:	4618      	mov	r0, r3
 80112f8:	f017 f948 	bl	802858c <_ZNSaIcED1Ev>
 80112fc:	bf00      	nop
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	3734      	adds	r7, #52	@ 0x34
 8011302:	46bd      	mov	sp, r7
 8011304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011308 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	f000 f8a7 	bl	8011466 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011318:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00c      	beq.n	801133c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f000 f8ac 	bl	8011480 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 8011328:	4604      	mov	r4, r0
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f000 f8b5 	bl	801149a <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 8011330:	4603      	mov	r3, r0
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4619      	mov	r1, r3
 8011336:	4620      	mov	r0, r4
 8011338:	f000 f8e6 	bl	8011508 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2200      	movs	r2, #0
 8011340:	601a      	str	r2, [r3, #0]
      }
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	4618      	mov	r0, r3
 8011346:	3714      	adds	r7, #20
 8011348:	46bd      	mov	sp, r7
 801134a:	bd90      	pop	{r4, r7, pc}

0801134c <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8011356:	687c      	ldr	r4, [r7, #4]
 8011358:	6838      	ldr	r0, [r7, #0]
 801135a:	f000 f8e6 	bl	801152a <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801135e:	4603      	mov	r3, r0
 8011360:	4619      	mov	r1, r3
 8011362:	4620      	mov	r0, r4
 8011364:	f000 f8ec 	bl	8011540 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	370c      	adds	r7, #12
 801136e:	46bd      	mov	sp, r7
 8011370:	bd90      	pop	{r4, r7, pc}

08011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8011372:	b480      	push	{r7}
 8011374:	b083      	sub	sp, #12
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8011388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8011396:	2040      	movs	r0, #64	@ 0x40
 8011398:	f017 f8e6 	bl	8028568 <_Znwj>
 801139c:	4603      	mov	r3, r0
 801139e:	461d      	mov	r5, r3
 80113a0:	68b8      	ldr	r0, [r7, #8]
 80113a2:	f7fe f947 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80113a6:	4606      	mov	r6, r0
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7fe f877 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80113ae:	4603      	mov	r3, r0
 80113b0:	681c      	ldr	r4, [r3, #0]
 80113b2:	6838      	ldr	r0, [r7, #0]
 80113b4:	f7fe f872 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80113b8:	4603      	mov	r3, r0
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4622      	mov	r2, r4
 80113be:	4631      	mov	r1, r6
 80113c0:	4628      	mov	r0, r5
 80113c2:	f7f3 fae5 	bl	8004990 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 80113c6:	4629      	mov	r1, r5
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f7fe f94e 	bl	800f66a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	3714      	adds	r7, #20
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113d6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b082      	sub	sp, #8
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
 80113de:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80113e0:	6838      	ldr	r0, [r7, #0]
 80113e2:	f000 f8e5 	bl	80115b0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80113e6:	4602      	mov	r2, r0
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4611      	mov	r1, r2
 80113ec:	4618      	mov	r0, r3
 80113ee:	f000 f8ea 	bl	80115c6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 80113f2:	bf00      	nop
}
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011412:	b480      	push	{r7}
 8011414:	b083      	sub	sp, #12
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	4618      	mov	r0, r3
 801141e:	370c      	adds	r7, #12
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr

08011428 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	4611      	mov	r1, r2
 8011438:	4618      	mov	r0, r3
 801143a:	f000 f8d3 	bl	80115e4 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6839      	ldr	r1, [r7, #0]
 8011456:	4618      	mov	r0, r3
 8011458:	f7ff ffe6 	bl	8011428 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	4618      	mov	r0, r3
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8011466:	b580      	push	{r7, lr}
 8011468:	b082      	sub	sp, #8
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	f000 f8cb 	bl	801160c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011476:	4603      	mov	r3, r0
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4618      	mov	r0, r3
 801148c:	f000 f8cb 	bl	8011626 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 8011490:	4603      	mov	r3, r0
 8011492:	4618      	mov	r0, r3
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}

0801149a <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801149a:	b480      	push	{r7}
 801149c:	b083      	sub	sp, #12
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	4a0a      	ldr	r2, [pc, #40]	@ (80114e4 <_ZN10DigitalPinD1Ev+0x34>)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	601a      	str	r2, [r3, #0]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3344      	adds	r3, #68	@ 0x44
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fd ff71 	bl	800f3aa <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	3320      	adds	r3, #32
 80114cc:	4618      	mov	r0, r3
 80114ce:	f017 f946 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fc2b 	bl	8011d30 <_ZN6ModuleD1Ev>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	0802b3b8 	.word	0x0802b3b8

080114e8 <_ZN10DigitalPinD0Ev>:
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7ff ffdd 	bl	80114b0 <_ZN10DigitalPinD1Ev>
 80114f6:	214c      	movs	r1, #76	@ 0x4c
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f017 f824 	bl	8028546 <_ZdlPvj>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4618      	mov	r0, r3
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d004      	beq.n	8011522 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	3204      	adds	r2, #4
 801151c:	6812      	ldr	r2, [r2, #0]
 801151e:	4618      	mov	r0, r3
 8011520:	4790      	blx	r2
      }
 8011522:	bf00      	nop
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 801154a:	6838      	ldr	r0, [r7, #0]
 801154c:	f000 f878 	bl	8011640 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011550:	4602      	mov	r2, r0
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	601a      	str	r2, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	3304      	adds	r3, #4
 801155a:	4618      	mov	r0, r3
 801155c:	f7fb fda8 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	f000 f86d 	bl	8011640 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011566:	4603      	mov	r3, r0
 8011568:	4618      	mov	r0, r3
 801156a:	f000 f876 	bl	801165a <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 801156e:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8011570:	6838      	ldr	r0, [r7, #0]
 8011572:	f7ff ffda 	bl	801152a <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8011576:	4602      	mov	r2, r0
 8011578:	f107 0308 	add.w	r3, r7, #8
 801157c:	4611      	mov	r1, r2
 801157e:	4618      	mov	r0, r3
 8011580:	f000 f876 	bl	8011670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	3304      	adds	r3, #4
 8011588:	f107 0208 	add.w	r2, r7, #8
 801158c:	4611      	mov	r1, r2
 801158e:	4618      	mov	r0, r3
 8011590:	f7fe f98c 	bl	800f8ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8011594:	f107 0308 	add.w	r3, r7, #8
 8011598:	4618      	mov	r0, r3
 801159a:	f7fa fb8c 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801159e:	68f9      	ldr	r1, [r7, #12]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 f8a7 	bl	80116f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4618      	mov	r0, r3
 80115aa:	3710      	adds	r7, #16
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80115b8:	687b      	ldr	r3, [r7, #4]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80115d0:	2301      	movs	r3, #1
 80115d2:	2208      	movs	r2, #8
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7f3 fd64 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80115e4:	b590      	push	{r4, r7, lr}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 f88a 	bl	801170a <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80115f6:	683c      	ldr	r4, [r7, #0]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff ff34 	bl	8011466 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80115fe:	4603      	mov	r3, r0
 8011600:	601c      	str	r4, [r3, #0]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	bd90      	pop	{r4, r7, pc}

0801160c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4618      	mov	r0, r3
 8011618:	f000 f884 	bl	8011724 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801161c:	4603      	mov	r3, r0
 801161e:	4618      	mov	r0, r3
 8011620:	3708      	adds	r7, #8
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8011626:	b580      	push	{r7, lr}
 8011628:	b082      	sub	sp, #8
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	4618      	mov	r0, r3
 8011632:	f000 f883 	bl	801173c <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011636:	4603      	mov	r3, r0
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4618      	mov	r0, r3
 801164c:	f000 f882 	bl	8011754 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011650:	4603      	mov	r3, r0
 8011652:	4618      	mov	r0, r3
 8011654:	3708      	adds	r7, #8
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}

0801165a <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801165a:	b480      	push	{r7}
 801165c:	b083      	sub	sp, #12
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
      return __ptr;
 8011662:	687b      	ldr	r3, [r7, #4]
    }
 8011664:	4618      	mov	r0, r3
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8011680:	6838      	ldr	r0, [r7, #0]
 8011682:	f7ff ffdd 	bl	8011640 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	bf0c      	ite	eq
 801168c:	2301      	moveq	r3, #1
 801168e:	2300      	movne	r3, #0
 8011690:	b2db      	uxtb	r3, r3
 8011692:	2b00      	cmp	r3, #0
 8011694:	d128      	bne.n	80116e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	4618      	mov	r0, r3
 801169c:	f000 f868 	bl	8011770 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80116a0:	f107 030c 	add.w	r3, r7, #12
 80116a4:	2101      	movs	r1, #1
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 f87a 	bl	80117a0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80116ac:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80116ae:	6838      	ldr	r0, [r7, #0]
 80116b0:	f000 f885 	bl	80117be <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 80116b4:	4603      	mov	r3, r0
 80116b6:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80116b8:	6838      	ldr	r0, [r7, #0]
 80116ba:	f7ff fee1 	bl	8011480 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 80116be:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80116c0:	4618      	mov	r0, r3
 80116c2:	f000 f889 	bl	80117d8 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80116c6:	4603      	mov	r3, r0
 80116c8:	f107 0210 	add.w	r2, r7, #16
 80116cc:	f107 000c 	add.w	r0, r7, #12
 80116d0:	6979      	ldr	r1, [r7, #20]
 80116d2:	f000 f88c 	bl	80117ee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	697a      	ldr	r2, [r7, #20]
 80116da:	601a      	str	r2, [r3, #0]
	}
 80116dc:	f107 030c 	add.w	r3, r7, #12
 80116e0:	4618      	mov	r0, r3
 80116e2:	f000 f851 	bl	8011788 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80116e6:	e000      	b.n	80116ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80116e8:	bf00      	nop
	}
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4618      	mov	r0, r3
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
	{ }
 80116fe:	bf00      	nop
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801170a:	b580      	push	{r7, lr}
 801170c:	b082      	sub	sp, #8
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4618      	mov	r0, r3
 8011716:	f000 f882 	bl	801181e <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f886 	bl	801183e <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8011732:	4603      	mov	r3, r0
 8011734:	4618      	mov	r0, r3
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f000 f887 	bl	8011858 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801174a:	4603      	mov	r3, r0
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	f000 f886 	bl	8011870 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8011764:	4603      	mov	r3, r0
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f000 f886 	bl	801188a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f000 f885 	bl	80118a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80117aa:	2200      	movs	r2, #0
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 f881 	bl	80118b6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80117b4:	4603      	mov	r3, r0
 80117b6:	4618      	mov	r0, r3
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80117be:	b580      	push	{r7, lr}
 80117c0:	b082      	sub	sp, #8
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f000 f89e 	bl	801190a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 80117ce:	4603      	mov	r3, r0
 80117d0:	4618      	mov	r0, r3
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4618      	mov	r0, r3
 80117e4:	370c      	adds	r7, #12
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr

080117ee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80117ee:	b590      	push	{r4, r7, lr}
 80117f0:	b085      	sub	sp, #20
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	60f8      	str	r0, [r7, #12]
 80117f6:	60b9      	str	r1, [r7, #8]
 80117f8:	607a      	str	r2, [r7, #4]
 80117fa:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 f899 	bl	8011934 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8011802:	4604      	mov	r4, r0
 8011804:	6838      	ldr	r0, [r7, #0]
 8011806:	f7ff ffe7 	bl	80117d8 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 801180a:	4603      	mov	r3, r0
 801180c:	4622      	mov	r2, r4
 801180e:	68b9      	ldr	r1, [r7, #8]
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f000 f89a 	bl	801194a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8011816:	bf00      	nop
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	bd90      	pop	{r4, r7, pc}

0801181e <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801181e:	b580      	push	{r7, lr}
 8011820:	b082      	sub	sp, #8
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f000 f8ad 	bl	8011986 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	4618      	mov	r0, r3
 8011830:	f000 f8b5 	bl	801199e <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	4618      	mov	r0, r3
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801183e:	b580      	push	{r7, lr}
 8011840:	b082      	sub	sp, #8
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	f000 f8b6 	bl	80119ba <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 801184e:	4603      	mov	r3, r0
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 f8b5 	bl	80119d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 8011866:	4603      	mov	r3, r0
 8011868:	4618      	mov	r0, r3
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4618      	mov	r0, r3
 801187c:	f000 f8b4 	bl	80119e8 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011880:	4603      	mov	r3, r0
 8011882:	4618      	mov	r0, r3
 8011884:	3708      	adds	r7, #8
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801188a:	b480      	push	{r7}
 801188c:	b083      	sub	sp, #12
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4618      	mov	r0, r3
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr

080118a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b084      	sub	sp, #16
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	60f8      	str	r0, [r7, #12]
 80118be:	60b9      	str	r1, [r7, #8]
 80118c0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f000 f89c 	bl	8011a00 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80118c8:	4602      	mov	r2, r0
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	4293      	cmp	r3, r2
 80118ce:	bf8c      	ite	hi
 80118d0:	2301      	movhi	r3, #1
 80118d2:	2300      	movls	r3, #0
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	bf14      	ite	ne
 80118da:	2301      	movne	r3, #1
 80118dc:	2300      	moveq	r3, #0
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d007      	beq.n	80118f4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80118ea:	d301      	bcc.n	80118f0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80118ec:	f016 fe52 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80118f0:	f016 fe4d 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	011b      	lsls	r3, r3, #4
 80118f8:	4618      	mov	r0, r3
 80118fa:	f016 fe35 	bl	8028568 <_Znwj>
 80118fe:	4603      	mov	r3, r0
 8011900:	bf00      	nop
      }
 8011902:	4618      	mov	r0, r3
 8011904:	3710      	adds	r7, #16
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801190a:	b580      	push	{r7, lr}
 801190c:	b084      	sub	sp, #16
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff fda7 	bl	8011466 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011918:	4603      	mov	r3, r0
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7ff fda1 	bl	8011466 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011924:	4603      	mov	r3, r0
 8011926:	2200      	movs	r2, #0
 8011928:	601a      	str	r2, [r3, #0]
	return __p;
 801192a:	68fb      	ldr	r3, [r7, #12]
      }
 801192c:	4618      	mov	r0, r3
 801192e:	3710      	adds	r7, #16
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801194a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801194c:	b085      	sub	sp, #20
 801194e:	af00      	add	r7, sp, #0
 8011950:	60f8      	str	r0, [r7, #12]
 8011952:	60b9      	str	r1, [r7, #8]
 8011954:	607a      	str	r2, [r7, #4]
 8011956:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	4619      	mov	r1, r3
 801195c:	2010      	movs	r0, #16
 801195e:	f7f8 ff73 	bl	800a848 <_ZnwjPv>
 8011962:	4605      	mov	r5, r0
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f7ff ffe5 	bl	8011934 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801196a:	4603      	mov	r3, r0
 801196c:	681c      	ldr	r4, [r3, #0]
 801196e:	6838      	ldr	r0, [r7, #0]
 8011970:	f7ff ff32 	bl	80117d8 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011974:	4632      	mov	r2, r6
 8011976:	4621      	mov	r1, r4
 8011978:	4628      	mov	r0, r5
 801197a:	f000 f84d 	bl	8011a18 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 801197e:	bf00      	nop
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011986 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 8011986:	b580      	push	{r7, lr}
 8011988:	b082      	sub	sp, #8
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 f864 	bl	8011a5c <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	4618      	mov	r0, r3
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	4618      	mov	r0, r3
 80119b0:	370c      	adds	r7, #12
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr

080119ba <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80119ba:	b480      	push	{r7}
 80119bc:	b083      	sub	sp, #12
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 f84a 	bl	8011a72 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 80119de:	4603      	mov	r3, r0
 80119e0:	4618      	mov	r0, r3
 80119e2:	3708      	adds	r7, #8
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f000 f849 	bl	8011a88 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 80119f6:	4603      	mov	r3, r0
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011a00:	b480      	push	{r7}
 8011a02:	b083      	sub	sp, #12
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011a08:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011a18:	b5b0      	push	{r4, r5, r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fc fbb6 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8011a58 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f103 040c 	add.w	r4, r3, #12
 8011a38:	1d3b      	adds	r3, r7, #4
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 f831 	bl	8011aa2 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011a40:	f107 0314 	add.w	r3, r7, #20
 8011a44:	462a      	mov	r2, r5
 8011a46:	68b9      	ldr	r1, [r7, #8]
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f000 f835 	bl	8011ab8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	4618      	mov	r0, r3
 8011a52:	3718      	adds	r7, #24
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bdb0      	pop	{r4, r5, r7, pc}
 8011a58:	0802b39c 	.word	0x0802b39c

08011a5c <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	4618      	mov	r0, r3
 8011a68:	370c      	adds	r7, #12
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr

08011a72 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011a72:	b480      	push	{r7}
 8011a74:	b083      	sub	sp, #12
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	4618      	mov	r0, r3
 8011a94:	f000 f82c 	bl	8011af0 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3708      	adds	r7, #8
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}

08011aa2 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011aa2:	b480      	push	{r7}
 8011aa4:	b083      	sub	sp, #12
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4618      	mov	r0, r3
 8011aae:	370c      	adds	r7, #12
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr

08011ab8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	713a      	strb	r2, [r7, #4]
 8011ac4:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8011ac6:	1d3b      	adds	r3, r7, #4
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7ff ffea 	bl	8011aa2 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f000 f817 	bl	8011b06 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 8011ad8:	6839      	ldr	r1, [r7, #0]
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f7fe fc46 	bl	801036c <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	68ba      	ldr	r2, [r7, #8]
 8011ae4:	601a      	str	r2, [r3, #0]
	{ }
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3710      	adds	r7, #16
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b082      	sub	sp, #8
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
 8011b10:	6838      	ldr	r0, [r7, #0]
 8011b12:	f7ff ffc6 	bl	8011aa2 <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	4a05      	ldr	r2, [pc, #20]	@ (8011b40 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	601a      	str	r2, [r3, #0]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fa fcf3 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}
 8011b40:	0802b39c 	.word	0x0802b39c

08011b44 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7ff ffe7 	bl	8011b20 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b52:	2110      	movs	r1, #16
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f016 fcf6 	bl	8028546 <_ZdlPvj>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	330c      	adds	r3, #12
 8011b70:	4618      	mov	r0, r3
 8011b72:	f000 f83f 	bl	8011bf4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011b76:	4602      	mov	r2, r0
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	4610      	mov	r0, r2
 8011b80:	f7ff fcc2 	bl	8011508 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8011b84:	bf00      	nop
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	330c      	adds	r3, #12
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 f837 	bl	8011c0c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	f107 0314 	add.w	r3, r7, #20
 8011ba4:	4611      	mov	r1, r2
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 f83c 	bl	8011c24 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8011bac:	f107 0114 	add.w	r1, r7, #20
 8011bb0:	f107 030c 	add.w	r3, r7, #12
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 f841 	bl	8011c3e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7ff ffaf 	bl	8011b20 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8011bc2:	f107 030c 	add.w	r3, r7, #12
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 f84d 	bl	8011c66 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8011bcc:	f107 0314 	add.w	r3, r7, #20
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ff fdd9 	bl	8011788 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011bd6:	3718      	adds	r7, #24
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011be6:	2300      	movs	r3, #0
      }
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f000 f847 	bl	8011c90 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 8011c02:	4603      	mov	r3, r0
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7fe fc78 	bl	801050a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f7ff fe2b 	bl	801188a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4618      	mov	r0, r3
 8011c38:	3708      	adds	r7, #8
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}

08011c3e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	60f8      	str	r0, [r7, #12]
 8011c46:	60b9      	str	r1, [r7, #8]
 8011c48:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011c4a:	68b8      	ldr	r0, [r7, #8]
 8011c4c:	f000 f82b 	bl	8011ca6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8011c50:	4602      	mov	r2, r0
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	601a      	str	r2, [r3, #0]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	605a      	str	r2, [r3, #4]
      { }
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b082      	sub	sp, #8
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d007      	beq.n	8011c86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6818      	ldr	r0, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	4619      	mov	r1, r3
 8011c82:	f000 f81b 	bl	8011cbc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8011c90:	b480      	push	{r7}
 8011c92:	b083      	sub	sp, #12
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	370c      	adds	r7, #12
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca4:	4770      	bx	lr

08011ca6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011ca6:	b480      	push	{r7}
 8011ca8:	b083      	sub	sp, #12
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	68b9      	ldr	r1, [r7, #8]
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f000 f804 	bl	8011cda <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011cd2:	bf00      	nop
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b084      	sub	sp, #16
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	60f8      	str	r0, [r7, #12]
 8011ce2:	60b9      	str	r1, [r7, #8]
 8011ce4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	011b      	lsls	r3, r3, #4
 8011cea:	4619      	mov	r1, r3
 8011cec:	68b8      	ldr	r0, [r7, #8]
 8011cee:	f016 fc2a 	bl	8028546 <_ZdlPvj>
      }
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4a09      	ldr	r2, [pc, #36]	@ (8011d28 <_ZN6ModuleC1Ev+0x30>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2201      	movs	r2, #1
 8011d16:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8011d18:	4804      	ldr	r0, [pc, #16]	@ (8011d2c <_ZN6ModuleC1Ev+0x34>)
 8011d1a:	f017 fb3f 	bl	802939c <puts>
}
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	0802b3dc 	.word	0x0802b3dc
 8011d2c:	0802a84c 	.word	0x0802a84c

08011d30 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	4a04      	ldr	r2, [pc, #16]	@ (8011d4c <_ZN6ModuleD1Ev+0x1c>)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	601a      	str	r2, [r3, #0]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	4618      	mov	r0, r3
 8011d42:	370c      	adds	r7, #12
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	0802b3dc 	.word	0x0802b3dc

08011d50 <_ZN6ModuleD0Ev>:
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7ff ffe9 	bl	8011d30 <_ZN6ModuleD1Ev>
 8011d5e:	2118      	movs	r1, #24
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f016 fbf0 	bl	8028546 <_ZdlPvj>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
	++this->counter;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	1c5a      	adds	r2, r3, #1
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	691a      	ldr	r2, [r3, #16]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	db08      	blt.n	8011da0 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3310      	adds	r3, #16
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	4798      	blx	r3
		this->counter = 0;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	3308      	adds	r3, #8
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	4798      	blx	r3
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	bf00      	nop
 8011dbe:	370c      	adds	r7, #12
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	bf00      	nop
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr

08011ddc <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	bf00      	nop
 8011de6:	370c      	adds	r7, #12
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <_ZN6Module9configureEv>:
void Module::configure(){}
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr
	...

08011e1c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b094      	sub	sp, #80	@ 0x50
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8011e2a:	4969      	ldr	r1, [pc, #420]	@ (8011fd0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b4>)
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ee fa57 	bl	80002e0 <strcmp>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d116      	bne.n	8011e66 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8011e38:	4966      	ldr	r1, [pc, #408]	@ (8011fd4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b8>)
 8011e3a:	6838      	ldr	r0, [r7, #0]
 8011e3c:	f7ee fa50 	bl	80002e0 <strcmp>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f040 80bc 	bne.w	8011fc0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return Stepgen::create(config, instance);
 8011e48:	f107 0310 	add.w	r3, r7, #16
 8011e4c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7f5 fd09 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f107 0110 	add.w	r1, r7, #16
 8011e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f001 fe54 	bl	8013b0c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8011e64:	e0b0      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "Servo") == 0) {
 8011e66:	495c      	ldr	r1, [pc, #368]	@ (8011fd8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1bc>)
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f7ee fa39 	bl	80002e0 <strcmp>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d157      	bne.n	8011f24 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8011e74:	4959      	ldr	r1, [pc, #356]	@ (8011fdc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c0>)
 8011e76:	6838      	ldr	r0, [r7, #0]
 8011e78:	f7ee fa32 	bl	80002e0 <strcmp>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d10e      	bne.n	8011ea0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 8011e82:	f107 0318 	add.w	r3, r7, #24
 8011e86:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f5 fcec 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f107 0118 	add.w	r1, r7, #24
 8011e96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fd f8d5 	bl	800f048 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011e9e:	e093      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 8011ea0:	494f      	ldr	r1, [pc, #316]	@ (8011fe0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c4>)
 8011ea2:	6838      	ldr	r0, [r7, #0]
 8011ea4:	f7ee fa1c 	bl	80002e0 <strcmp>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10e      	bne.n	8011ecc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 8011eae:	f107 0320 	add.w	r3, r7, #32
 8011eb2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7f5 fcd6 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f107 0120 	add.w	r1, r7, #32
 8011ec2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 f903 	bl	80120d0 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011eca:	e07d      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 8011ecc:	4945      	ldr	r1, [pc, #276]	@ (8011fe4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c8>)
 8011ece:	6838      	ldr	r0, [r7, #0]
 8011ed0:	f7ee fa06 	bl	80002e0 <strcmp>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10e      	bne.n	8011ef8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 8011eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ede:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7f5 fcc0 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011eee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fe ffc9 	bl	8010e88 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011ef6:	e067      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 8011ef8:	493b      	ldr	r1, [pc, #236]	@ (8011fe8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1cc>)
 8011efa:	6838      	ldr	r0, [r7, #0]
 8011efc:	f7ee f9f0 	bl	80002e0 <strcmp>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d15c      	bne.n	8011fc0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return SigmaDelta::create(config, instance);
 8011f06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011f0a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7f5 fcaa 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011f1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f000 fe71 	bl	8012c04 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f22:	e051      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "On load") == 0) {
 8011f24:	4931      	ldr	r1, [pc, #196]	@ (8011fec <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d0>)
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ee f9da 	bl	80002e0 <strcmp>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d141      	bne.n	8011fb6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19a>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 8011f32:	492f      	ldr	r1, [pc, #188]	@ (8011ff0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d4>)
 8011f34:	6838      	ldr	r0, [r7, #0]
 8011f36:	f7ee f9d3 	bl	80002e0 <strcmp>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10e      	bne.n	8011f5e <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 8011f40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011f44:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7f5 fc8d 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011f54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f56:	4618      	mov	r0, r3
 8011f58:	f003 f822 	bl	8014fa0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f5c:	e034      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
   	    } else if (strcmp(_mtype, "TMC2209") == 0) {
 8011f5e:	4925      	ldr	r1, [pc, #148]	@ (8011ff4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d8>)
 8011f60:	6838      	ldr	r0, [r7, #0]
 8011f62:	f7ee f9bd 	bl	80002e0 <strcmp>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d10e      	bne.n	8011f8a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    		return TMC2209::create(config, instance);
 8011f6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011f70:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7f5 fc77 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011f80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f82:	4618      	mov	r0, r3
 8011f84:	f005 fe0a 	bl	8017b9c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f88:	e01e      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    	} else if (strcmp(_mtype, "TMC5160") == 0) {
 8011f8a:	491b      	ldr	r1, [pc, #108]	@ (8011ff8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1dc>)
 8011f8c:	6838      	ldr	r0, [r7, #0]
 8011f8e:	f7ee f9a7 	bl	80002e0 <strcmp>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d113      	bne.n	8011fc0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
    		return TMC5160::create(config, instance);
 8011f98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011f9c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f5 fc61 	bl	8007868 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8011fac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f007 fa1a 	bl	80193e8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011fb4:	e008      	b.n	8011fc8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	6879      	ldr	r1, [r7, #4]
 8011fba:	4810      	ldr	r0, [pc, #64]	@ (8011ffc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1e0>)
 8011fbc:	f017 f97e 	bl	80292bc <iprintf>
    return nullptr;
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	68f8      	ldr	r0, [r7, #12]
 8011fc4:	f000 f84c 	bl	8012060 <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	3750      	adds	r7, #80	@ 0x50
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	0802a8a4 	.word	0x0802a8a4
 8011fd4:	0802a8ac 	.word	0x0802a8ac
 8011fd8:	0802a8b4 	.word	0x0802a8b4
 8011fdc:	0802a8bc 	.word	0x0802a8bc
 8011fe0:	0802a8c4 	.word	0x0802a8c4
 8011fe4:	0802a8d0 	.word	0x0802a8d0
 8011fe8:	0802a8dc 	.word	0x0802a8dc
 8011fec:	0802a8e8 	.word	0x0802a8e8
 8011ff0:	0802a8f0 	.word	0x0802a8f0
 8011ff4:	0802a8f8 	.word	0x0802a8f8
 8011ff8:	0802a900 	.word	0x0802a900
 8011ffc:	0802a908 	.word	0x0802a908

08012000 <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 8012000:	b598      	push	{r3, r4, r7, lr}
 8012002:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 8012004:	4b14      	ldr	r3, [pc, #80]	@ (8012058 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f3bf 8f5b 	dmb	ish
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	bf0c      	ite	eq
 8012014:	2301      	moveq	r3, #1
 8012016:	2300      	movne	r3, #0
 8012018:	b2db      	uxtb	r3, r3
 801201a:	2b00      	cmp	r3, #0
 801201c:	d017      	beq.n	801204e <_ZN13ModuleFactory11getInstanceEv+0x4e>
 801201e:	480e      	ldr	r0, [pc, #56]	@ (8012058 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8012020:	f016 fa93 	bl	802854a <__cxa_guard_acquire>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	bf14      	ite	ne
 801202a:	2301      	movne	r3, #1
 801202c:	2300      	moveq	r3, #0
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00c      	beq.n	801204e <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8012034:	2001      	movs	r0, #1
 8012036:	f016 fa97 	bl	8028568 <_Znwj>
 801203a:	4603      	mov	r3, r0
 801203c:	461c      	mov	r4, r3
 801203e:	4620      	mov	r0, r4
 8012040:	f7ff fee0 	bl	8011e04 <_ZN13ModuleFactoryC1Ev>
 8012044:	4b05      	ldr	r3, [pc, #20]	@ (801205c <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8012046:	601c      	str	r4, [r3, #0]
 8012048:	4803      	ldr	r0, [pc, #12]	@ (8012058 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 801204a:	f016 fa8a 	bl	8028562 <__cxa_guard_release>
    return instance;
 801204e:	4b03      	ldr	r3, [pc, #12]	@ (801205c <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8012050:	681b      	ldr	r3, [r3, #0]
}
 8012052:	4618      	mov	r0, r3
 8012054:	bd98      	pop	{r3, r4, r7, pc}
 8012056:	bf00      	nop
 8012058:	24000414 	.word	0x24000414
 801205c:	24000410 	.word	0x24000410

08012060 <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f000 f805 	bl	801207a <_ZNSt10shared_ptrI6ModuleEC1Ev>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4618      	mov	r0, r3
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 801207a:	b580      	push	{r7, lr}
 801207c:	b082      	sub	sp, #8
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	f000 f805 	bl	8012094 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	601a      	str	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	3304      	adds	r3, #4
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fb f802 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 80120b6:	b480      	push	{r7}
 80120b8:	b083      	sub	sp, #12
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	330c      	adds	r3, #12
 80120c2:	4618      	mov	r0, r3
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr
	...

080120d0 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b094      	sub	sp, #80	@ 0x50
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 80120dc:	f107 0314 	add.w	r3, r7, #20
 80120e0:	4a1f      	ldr	r2, [pc, #124]	@ (8012160 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 80120e2:	68b9      	ldr	r1, [r7, #8]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f000 f886 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80120ea:	f107 0314 	add.w	r3, r7, #20
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7f5 fbee 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80120f4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 80120f6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80120f8:	f017 f950 	bl	802939c <puts>

	const char* pin = config["Pin"];
 80120fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012100:	4a18      	ldr	r2, [pc, #96]	@ (8012164 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 8012102:	68b9      	ldr	r1, [r7, #8]
 8012104:	4618      	mov	r0, r3
 8012106:	f7fd f863 	bl	800f1d0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801210a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801210e:	4618      	mov	r0, r3
 8012110:	f7f5 fbde 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012114:	4603      	mov	r3, r0
 8012116:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	4619      	mov	r1, r3
 801211c:	4812      	ldr	r0, [pc, #72]	@ (8012168 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 801211e:	f017 f8cd 	bl	80292bc <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f7ff ffc7 	bl	80120b6 <_ZN6Remora8getResetEv>
 8012128:	4603      	mov	r3, r0
 801212a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801212c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012130:	f107 0210 	add.w	r2, r7, #16
 8012134:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012138:	4618      	mov	r0, r3
 801213a:	f000 f881 	bl	8012240 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801213e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012142:	4619      	mov	r1, r3
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f000 f8d9 	bl	80122fc <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 801214a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801214e:	4618      	mov	r0, r3
 8012150:	f000 f8b2 	bl	80122b8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 8012154:	bf00      	nop
}
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	3750      	adds	r7, #80	@ 0x50
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	0802a940 	.word	0x0802a940
 8012164:	0802a948 	.word	0x0802a948
 8012168:	0802a94c 	.word	0x0802a94c

0801216c <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b085      	sub	sp, #20
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff fdbc 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8012180:	4a0e      	ldr	r2, [pc, #56]	@ (80121bc <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	331c      	adds	r3, #28
 8012190:	6879      	ldr	r1, [r7, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	f016 fcf3 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012198:	2040      	movs	r0, #64	@ 0x40
 801219a:	f016 f9e5 	bl	8028568 <_Znwj>
 801219e:	4603      	mov	r3, r0
 80121a0:	461c      	mov	r4, r3
 80121a2:	2200      	movs	r2, #0
 80121a4:	6879      	ldr	r1, [r7, #4]
 80121a6:	4620      	mov	r0, r4
 80121a8:	f7f2 fbca 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	635c      	str	r4, [r3, #52]	@ 0x34
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	4618      	mov	r0, r3
 80121b4:	3714      	adds	r7, #20
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd90      	pop	{r4, r7, pc}
 80121ba:	bf00      	nop
 80121bc:	0802b41c 	.word	0x0802b41c

080121c0 <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 80121c0:	b590      	push	{r4, r7, lr}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	699c      	ldr	r4, [r3, #24]
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7f2 fd49 	bl	8004c68 <_ZNK3Pin3getEv>
 80121d6:	4603      	mov	r3, r0
 80121d8:	7023      	strb	r3, [r4, #0]
}
 80121da:	bf00      	nop
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd90      	pop	{r4, r7, pc}

080121e2 <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 80121e2:	b480      	push	{r7}
 80121e4:	b083      	sub	sp, #12
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
    return;
 80121ea:	bf00      	nop
}
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b08c      	sub	sp, #48	@ 0x30
 80121fa:	af02      	add	r7, sp, #8
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	60b9      	str	r1, [r7, #8]
 8012200:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8012202:	68ba      	ldr	r2, [r7, #8]
 8012204:	f107 0314 	add.w	r3, r7, #20
 8012208:	e892 0003 	ldmia.w	r2, {r0, r1}
 801220c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012210:	f107 031c 	add.w	r3, r7, #28
 8012214:	6879      	ldr	r1, [r7, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	f7f5 fe9c 	bl	8007f54 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801221c:	466a      	mov	r2, sp
 801221e:	f107 0320 	add.w	r3, r7, #32
 8012222:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012226:	e882 0003 	stmia.w	r2, {r0, r1}
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	f107 0214 	add.w	r2, r7, #20
 8012230:	ca06      	ldmia	r2, {r1, r2}
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f7f5 fcbb 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012238:	68f8      	ldr	r0, [r7, #12]
 801223a:	3728      	adds	r7, #40	@ 0x28
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8012240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012242:	b08d      	sub	sp, #52	@ 0x34
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 801224c:	2038      	movs	r0, #56	@ 0x38
 801224e:	f016 f98b 	bl	8028568 <_Znwj>
 8012252:	4603      	mov	r3, r0
 8012254:	461e      	mov	r6, r3
 8012256:	68b8      	ldr	r0, [r7, #8]
 8012258:	f000 f863 	bl	8012322 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 801225c:	4603      	mov	r3, r0
 801225e:	681c      	ldr	r4, [r3, #0]
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f7fd f910 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012266:	4603      	mov	r3, r0
 8012268:	681d      	ldr	r5, [r3, #0]
 801226a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801226e:	4618      	mov	r0, r3
 8012270:	f016 f98b 	bl	802858a <_ZNSaIcEC1Ev>
 8012274:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012278:	f107 0314 	add.w	r3, r7, #20
 801227c:	4629      	mov	r1, r5
 801227e:	4618      	mov	r0, r3
 8012280:	f7f5 faa0 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012284:	f107 0314 	add.w	r3, r7, #20
 8012288:	461a      	mov	r2, r3
 801228a:	4621      	mov	r1, r4
 801228c:	4630      	mov	r0, r6
 801228e:	f7ff ff6d 	bl	801216c <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8012292:	4631      	mov	r1, r6
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f000 f85f 	bl	8012358 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 801229a:	f107 0314 	add.w	r3, r7, #20
 801229e:	4618      	mov	r0, r3
 80122a0:	f016 fa5d 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80122a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122a8:	4618      	mov	r0, r3
 80122aa:	f016 f96f 	bl	802858c <_ZNSaIcED1Ev>
 80122ae:	bf00      	nop
 80122b0:	68f8      	ldr	r0, [r7, #12]
 80122b2:	3734      	adds	r7, #52	@ 0x34
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122b8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 f857 	bl	8012376 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80122c8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00c      	beq.n	80122ec <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 f85c 	bl	8012390 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 80122d8:	4604      	mov	r4, r0
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	f000 f865 	bl	80123aa <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 80122e0:	4603      	mov	r3, r0
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4619      	mov	r1, r3
 80122e6:	4620      	mov	r0, r4
 80122e8:	f000 f892 	bl	8012410 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2200      	movs	r2, #0
 80122f0:	601a      	str	r2, [r3, #0]
      }
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd90      	pop	{r4, r7, pc}

080122fc <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80122fc:	b590      	push	{r4, r7, lr}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8012306:	687c      	ldr	r4, [r7, #4]
 8012308:	6838      	ldr	r0, [r7, #0]
 801230a:	f000 f892 	bl	8012432 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801230e:	4603      	mov	r3, r0
 8012310:	4619      	mov	r1, r3
 8012312:	4620      	mov	r0, r4
 8012314:	f000 f898 	bl	8012448 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4618      	mov	r0, r3
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	bd90      	pop	{r4, r7, pc}

08012322 <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012322:	b480      	push	{r7}
 8012324:	b083      	sub	sp, #12
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr

08012338 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	683a      	ldr	r2, [r7, #0]
 8012346:	4611      	mov	r1, r2
 8012348:	4618      	mov	r0, r3
 801234a:	f000 f8b5 	bl	80124b8 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6839      	ldr	r1, [r7, #0]
 8012366:	4618      	mov	r0, r3
 8012368:	f7ff ffe6 	bl	8012338 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4618      	mov	r0, r3
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8012376:	b580      	push	{r7, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4618      	mov	r0, r3
 8012382:	f000 f8ad 	bl	80124e0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8012386:	4603      	mov	r3, r0
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	4618      	mov	r0, r3
 801239c:	f000 f8ad 	bl	80124fa <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 80123a0:	4603      	mov	r3, r0
 80123a2:	4618      	mov	r0, r3
 80123a4:	3708      	adds	r7, #8
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80123aa:	b480      	push	{r7}
 80123ac:	b083      	sub	sp, #12
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	4618      	mov	r0, r3
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr

080123c0 <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	4a08      	ldr	r2, [pc, #32]	@ (80123ec <_ZN8ResetPinD1Ev+0x2c>)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	601a      	str	r2, [r3, #0]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	331c      	adds	r3, #28
 80123d2:	4618      	mov	r0, r3
 80123d4:	f016 f9c3 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff fca8 	bl	8011d30 <_ZN6ModuleD1Ev>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	0802b41c 	.word	0x0802b41c

080123f0 <_ZN8ResetPinD0Ev>:
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff ffe1 	bl	80123c0 <_ZN8ResetPinD1Ev>
 80123fe:	2138      	movs	r1, #56	@ 0x38
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f016 f8a0 	bl	8028546 <_ZdlPvj>
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	4618      	mov	r0, r3
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	3204      	adds	r2, #4
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	4618      	mov	r0, r3
 8012428:	4790      	blx	r2
      }
 801242a:	bf00      	nop
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8012452:	6838      	ldr	r0, [r7, #0]
 8012454:	f000 f85e 	bl	8012514 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8012458:	4602      	mov	r2, r0
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	3304      	adds	r3, #4
 8012462:	4618      	mov	r0, r3
 8012464:	f7fa fe24 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8012468:	6838      	ldr	r0, [r7, #0]
 801246a:	f000 f853 	bl	8012514 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 801246e:	4603      	mov	r3, r0
 8012470:	4618      	mov	r0, r3
 8012472:	f000 f85c 	bl	801252e <_ZSt12__to_addressI8ResetPinEPT_S2_>
 8012476:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8012478:	6838      	ldr	r0, [r7, #0]
 801247a:	f7ff ffda 	bl	8012432 <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801247e:	4602      	mov	r2, r0
 8012480:	f107 0308 	add.w	r3, r7, #8
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f000 f85c 	bl	8012544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	3304      	adds	r3, #4
 8012490:	f107 0208 	add.w	r2, r7, #8
 8012494:	4611      	mov	r1, r2
 8012496:	4618      	mov	r0, r3
 8012498:	f7fd fa08 	bl	800f8ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 801249c:	f107 0308 	add.w	r3, r7, #8
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7f9 fc08 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 80124a6:	68f9      	ldr	r1, [r7, #12]
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 f88d 	bl	80125c8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4618      	mov	r0, r3
 80124b2:	3710      	adds	r7, #16
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80124b8:	b590      	push	{r4, r7, lr}
 80124ba:	b083      	sub	sp, #12
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f000 f88a 	bl	80125de <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80124ca:	683c      	ldr	r4, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff ff52 	bl	8012376 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80124d2:	4603      	mov	r3, r0
 80124d4:	601c      	str	r4, [r3, #0]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd90      	pop	{r4, r7, pc}

080124e0 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f000 f884 	bl	80125f8 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80124f0:	4603      	mov	r3, r0
 80124f2:	4618      	mov	r0, r3
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	f000 f883 	bl	8012610 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801250a:	4603      	mov	r3, r0
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f000 f882 	bl	8012628 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012524:	4603      	mov	r3, r0
 8012526:	4618      	mov	r0, r3
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801252e:	b480      	push	{r7}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
      return __ptr;
 8012536:	687b      	ldr	r3, [r7, #4]
    }
 8012538:	4618      	mov	r0, r3
 801253a:	370c      	adds	r7, #12
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8012554:	6838      	ldr	r0, [r7, #0]
 8012556:	f7ff ffdd 	bl	8012514 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	bf0c      	ite	eq
 8012560:	2301      	moveq	r3, #1
 8012562:	2300      	movne	r3, #0
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d128      	bne.n	80125bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 801256a:	f107 030c 	add.w	r3, r7, #12
 801256e:	4618      	mov	r0, r3
 8012570:	f000 f868 	bl	8012644 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8012574:	f107 030c 	add.w	r3, r7, #12
 8012578:	2101      	movs	r1, #1
 801257a:	4618      	mov	r0, r3
 801257c:	f000 f87a 	bl	8012674 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8012580:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012582:	6838      	ldr	r0, [r7, #0]
 8012584:	f000 f885 	bl	8012692 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 8012588:	4603      	mov	r3, r0
 801258a:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 801258c:	6838      	ldr	r0, [r7, #0]
 801258e:	f7ff feff 	bl	8012390 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 8012592:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012594:	4618      	mov	r0, r3
 8012596:	f000 f889 	bl	80126ac <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 801259a:	4603      	mov	r3, r0
 801259c:	f107 0210 	add.w	r2, r7, #16
 80125a0:	f107 000c 	add.w	r0, r7, #12
 80125a4:	6979      	ldr	r1, [r7, #20]
 80125a6:	f000 f88c 	bl	80126c2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	697a      	ldr	r2, [r7, #20]
 80125ae:	601a      	str	r2, [r3, #0]
	}
 80125b0:	f107 030c 	add.w	r3, r7, #12
 80125b4:	4618      	mov	r0, r3
 80125b6:	f000 f851 	bl	801265c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80125ba:	e000      	b.n	80125be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80125bc:	bf00      	nop
	}
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4618      	mov	r0, r3
 80125c2:	3718      	adds	r7, #24
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
	{ }
 80125d2:	bf00      	nop
 80125d4:	370c      	adds	r7, #12
 80125d6:	46bd      	mov	sp, r7
 80125d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125dc:	4770      	bx	lr

080125de <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80125de:	b580      	push	{r7, lr}
 80125e0:	b082      	sub	sp, #8
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f000 f882 	bl	80126f2 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4618      	mov	r0, r3
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 f886 	bl	8012712 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8012606:	4603      	mov	r3, r0
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f000 f887 	bl	801272c <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801261e:	4603      	mov	r3, r0
 8012620:	4618      	mov	r0, r3
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	4618      	mov	r0, r3
 8012634:	f000 f886 	bl	8012744 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8012638:	4603      	mov	r3, r0
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	4618      	mov	r0, r3
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 f886 	bl	801275e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 f885 	bl	8012774 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4618      	mov	r0, r3
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801267e:	2200      	movs	r2, #0
 8012680:	6839      	ldr	r1, [r7, #0]
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f000 f881 	bl	801278a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8012688:	4603      	mov	r3, r0
 801268a:	4618      	mov	r0, r3
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8012692:	b580      	push	{r7, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	f000 f89e 	bl	80127de <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 80126a2:	4603      	mov	r3, r0
 80126a4:	4618      	mov	r0, r3
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	4618      	mov	r0, r3
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80126c2:	b590      	push	{r4, r7, lr}
 80126c4:	b085      	sub	sp, #20
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	60f8      	str	r0, [r7, #12]
 80126ca:	60b9      	str	r1, [r7, #8]
 80126cc:	607a      	str	r2, [r7, #4]
 80126ce:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f899 	bl	8012808 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80126d6:	4604      	mov	r4, r0
 80126d8:	6838      	ldr	r0, [r7, #0]
 80126da:	f7ff ffe7 	bl	80126ac <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80126de:	4603      	mov	r3, r0
 80126e0:	4622      	mov	r2, r4
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 f89a 	bl	801281e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80126ea:	bf00      	nop
 80126ec:	3714      	adds	r7, #20
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd90      	pop	{r4, r7, pc}

080126f2 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b082      	sub	sp, #8
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f000 f8ad 	bl	801285a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4618      	mov	r0, r3
 8012704:	f000 f8b5 	bl	8012872 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	4618      	mov	r0, r3
 801270c:	3708      	adds	r7, #8
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012712:	b580      	push	{r7, lr}
 8012714:	b082      	sub	sp, #8
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4618      	mov	r0, r3
 801271e:	f000 f8b6 	bl	801288e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 8012722:	4603      	mov	r3, r0
 8012724:	4618      	mov	r0, r3
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 f8b5 	bl	80128a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 801273a:	4603      	mov	r3, r0
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	f000 f8b4 	bl	80128bc <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012754:	4603      	mov	r3, r0
 8012756:	4618      	mov	r0, r3
 8012758:	3708      	adds	r7, #8
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801275e:	b480      	push	{r7}
 8012760:	b083      	sub	sp, #12
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr

08012774 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012774:	b480      	push	{r7}
 8012776:	b083      	sub	sp, #12
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	60f8      	str	r0, [r7, #12]
 8012792:	60b9      	str	r1, [r7, #8]
 8012794:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f000 f89c 	bl	80128d4 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801279c:	4602      	mov	r2, r0
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	4293      	cmp	r3, r2
 80127a2:	bf8c      	ite	hi
 80127a4:	2301      	movhi	r3, #1
 80127a6:	2300      	movls	r3, #0
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	bf14      	ite	ne
 80127ae:	2301      	movne	r3, #1
 80127b0:	2300      	moveq	r3, #0
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d007      	beq.n	80127c8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127be:	d301      	bcc.n	80127c4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80127c0:	f015 fee8 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80127c4:	f015 fee3 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	011b      	lsls	r3, r3, #4
 80127cc:	4618      	mov	r0, r3
 80127ce:	f015 fecb 	bl	8028568 <_Znwj>
 80127d2:	4603      	mov	r3, r0
 80127d4:	bf00      	nop
      }
 80127d6:	4618      	mov	r0, r3
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80127de:	b580      	push	{r7, lr}
 80127e0:	b084      	sub	sp, #16
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7ff fdc5 	bl	8012376 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80127ec:	4603      	mov	r3, r0
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f7ff fdbf 	bl	8012376 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2200      	movs	r2, #0
 80127fc:	601a      	str	r2, [r3, #0]
	return __p;
 80127fe:	68fb      	ldr	r3, [r7, #12]
      }
 8012800:	4618      	mov	r0, r3
 8012802:	3710      	adds	r7, #16
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4618      	mov	r0, r3
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801281e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012820:	b085      	sub	sp, #20
 8012822:	af00      	add	r7, sp, #0
 8012824:	60f8      	str	r0, [r7, #12]
 8012826:	60b9      	str	r1, [r7, #8]
 8012828:	607a      	str	r2, [r7, #4]
 801282a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	4619      	mov	r1, r3
 8012830:	2010      	movs	r0, #16
 8012832:	f7f8 f809 	bl	800a848 <_ZnwjPv>
 8012836:	4605      	mov	r5, r0
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7ff ffe5 	bl	8012808 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801283e:	4603      	mov	r3, r0
 8012840:	681c      	ldr	r4, [r3, #0]
 8012842:	6838      	ldr	r0, [r7, #0]
 8012844:	f7ff ff32 	bl	80126ac <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012848:	4632      	mov	r2, r6
 801284a:	4621      	mov	r1, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f84d 	bl	80128ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8012852:	bf00      	nop
 8012854:	3714      	adds	r7, #20
 8012856:	46bd      	mov	sp, r7
 8012858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801285a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 801285a:	b580      	push	{r7, lr}
 801285c:	b082      	sub	sp, #8
 801285e:	af00      	add	r7, sp, #0
 8012860:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f864 	bl	8012930 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4618      	mov	r0, r3
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 8012872:	b480      	push	{r7}
 8012874:	b083      	sub	sp, #12
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	4618      	mov	r0, r3
 8012884:	370c      	adds	r7, #12
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr

0801288e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801288e:	b480      	push	{r7}
 8012890:	b083      	sub	sp, #12
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	4618      	mov	r0, r3
 801289a:	370c      	adds	r7, #12
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f84a 	bl	8012946 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 80128b2:	4603      	mov	r3, r0
 80128b4:	4618      	mov	r0, r3
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f849 	bl	801295c <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 80128ca:	4603      	mov	r3, r0
 80128cc:	4618      	mov	r0, r3
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80128dc:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 80128e0:	4618      	mov	r0, r3
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 80128ec:	b5b0      	push	{r4, r5, r7, lr}
 80128ee:	b086      	sub	sp, #24
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fb fc4c 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012900:	4a0a      	ldr	r2, [pc, #40]	@ (801292c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	f103 040c 	add.w	r4, r3, #12
 801290c:	1d3b      	adds	r3, r7, #4
 801290e:	4618      	mov	r0, r3
 8012910:	f000 f831 	bl	8012976 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012914:	f107 0314 	add.w	r3, r7, #20
 8012918:	462a      	mov	r2, r5
 801291a:	68b9      	ldr	r1, [r7, #8]
 801291c:	4620      	mov	r0, r4
 801291e:	f000 f835 	bl	801298c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	4618      	mov	r0, r3
 8012926:	3718      	adds	r7, #24
 8012928:	46bd      	mov	sp, r7
 801292a:	bdb0      	pop	{r4, r5, r7, pc}
 801292c:	0802b400 	.word	0x0802b400

08012930 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	370c      	adds	r7, #12
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr

08012946 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4618      	mov	r0, r3
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	4618      	mov	r0, r3
 8012968:	f000 f82c 	bl	80129c4 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 801296c:	4603      	mov	r3, r0
 801296e:	4618      	mov	r0, r3
 8012970:	3708      	adds	r7, #8
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012976:	b480      	push	{r7}
 8012978:	b083      	sub	sp, #12
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr

0801298c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801298c:	b580      	push	{r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	713a      	strb	r2, [r7, #4]
 8012998:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 801299a:	1d3b      	adds	r3, r7, #4
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff ffea 	bl	8012976 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80129a2:	4603      	mov	r3, r0
 80129a4:	4619      	mov	r1, r3
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 f817 	bl	80129da <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 80129ac:	6839      	ldr	r1, [r7, #0]
 80129ae:	68f8      	ldr	r0, [r7, #12]
 80129b0:	f7fd fcdc 	bl	801036c <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	68ba      	ldr	r2, [r7, #8]
 80129b8:	601a      	str	r2, [r3, #0]
	{ }
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	4618      	mov	r0, r3
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	6039      	str	r1, [r7, #0]
 80129e4:	6838      	ldr	r0, [r7, #0]
 80129e6:	f7ff ffc6 	bl	8012976 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	4a05      	ldr	r2, [pc, #20]	@ (8012a14 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f9 fd89 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	0802b400 	.word	0x0802b400

08012a18 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7ff ffe7 	bl	80129f4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012a26:	2110      	movs	r1, #16
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f015 fd8c 	bl	8028546 <_ZdlPvj>
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	4618      	mov	r0, r3
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	330c      	adds	r3, #12
 8012a44:	4618      	mov	r0, r3
 8012a46:	f000 f83f 	bl	8012ac8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	4619      	mov	r1, r3
 8012a52:	4610      	mov	r0, r2
 8012a54:	f7ff fcdc 	bl	8012410 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 8012a58:	bf00      	nop
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	330c      	adds	r3, #12
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 f837 	bl	8012ae0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012a72:	4602      	mov	r2, r0
 8012a74:	f107 0314 	add.w	r3, r7, #20
 8012a78:	4611      	mov	r1, r2
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f000 f83c 	bl	8012af8 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8012a80:	f107 0114 	add.w	r1, r7, #20
 8012a84:	f107 030c 	add.w	r3, r7, #12
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f000 f841 	bl	8012b12 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff ffaf 	bl	80129f4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012a96:	f107 030c 	add.w	r3, r7, #12
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f000 f84d 	bl	8012b3a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012aa0:	f107 0314 	add.w	r3, r7, #20
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff fdd9 	bl	801265c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
        return nullptr;
 8012aba:	2300      	movs	r3, #0
      }
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 f847 	bl	8012b64 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7fd fd0e 	bl	801050a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8012aee:	4603      	mov	r3, r0
 8012af0:	4618      	mov	r0, r3
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7ff fe2b 	bl	801275e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b084      	sub	sp, #16
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	60f8      	str	r0, [r7, #12]
 8012b1a:	60b9      	str	r1, [r7, #8]
 8012b1c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8012b1e:	68b8      	ldr	r0, [r7, #8]
 8012b20:	f000 f82b 	bl	8012b7a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8012b24:	4602      	mov	r2, r0
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	605a      	str	r2, [r3, #4]
      { }
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	4618      	mov	r0, r3
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b082      	sub	sp, #8
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d007      	beq.n	8012b5a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6818      	ldr	r0, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	2201      	movs	r2, #1
 8012b54:	4619      	mov	r1, r3
 8012b56:	f000 f81b 	bl	8012b90 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3708      	adds	r7, #8
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	370c      	adds	r7, #12
 8012b72:	46bd      	mov	sp, r7
 8012b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b78:	4770      	bx	lr

08012b7a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012b7a:	b480      	push	{r7}
 8012b7c:	b083      	sub	sp, #12
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	68b9      	ldr	r1, [r7, #8]
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f000 f804 	bl	8012bae <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8012ba6:	bf00      	nop
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}

08012bae <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b084      	sub	sp, #16
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	60f8      	str	r0, [r7, #12]
 8012bb6:	60b9      	str	r1, [r7, #8]
 8012bb8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	011b      	lsls	r3, r3, #4
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	68b8      	ldr	r0, [r7, #8]
 8012bc2:	f015 fcc0 	bl	8028546 <_ZdlPvj>
      }
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7f9 f86c 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	3708      	adds	r7, #8
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7ff ffea 	bl	8012bcc <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
	...

08012c04 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b0b1      	sub	sp, #196	@ 0xc4
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 8012c10:	f107 0320 	add.w	r3, r7, #32
 8012c14:	4a55      	ldr	r2, [pc, #340]	@ (8012d6c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8012c16:	68b9      	ldr	r1, [r7, #8]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff faec 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c1e:	f107 0320 	add.w	r3, r7, #32
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f4 fe54 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012c28:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 8012c2c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8012c30:	f016 fbb4 	bl	802939c <puts>

    int spIndex = config["SP[i]"];
 8012c34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012c38:	4a4d      	ldr	r2, [pc, #308]	@ (8012d70 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8012c3a:	68b9      	ldr	r1, [r7, #8]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f000 f9bb 	bl	8012fb8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7fc fae7 	bl	800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012c4c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 8012c50:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012c54:	4a47      	ldr	r2, [pc, #284]	@ (8012d74 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f4 fe14 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c5e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7f4 fe34 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7fe f8fd 	bl	8010e6c <_ZN6Remora9getRxDataEv>
 8012c72:	4602      	mov	r2, r0
 8012c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012c78:	3308      	adds	r3, #8
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	3304      	adds	r3, #4
 8012c80:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012c88:	4619      	mov	r1, r3
 8012c8a:	483b      	ldr	r0, [pc, #236]	@ (8012d78 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8012c8c:	f016 fb16 	bl	80292bc <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 8012c90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012c94:	4a39      	ldr	r2, [pc, #228]	@ (8012d7c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012c96:	68b9      	ldr	r1, [r7, #8]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f4 fdf4 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c9e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8012cae:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012cb2:	f7f5 fe8e 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012cbc:	f7f5 fd17 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7f2 fdb2 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8012cce:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8012cd0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012cd8:	f000 f9f4 	bl	80130c4 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	bf00      	nop
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d028      	beq.n	8012d36 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 8012ce4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012ce8:	4a24      	ldr	r2, [pc, #144]	@ (8012d7c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012cea:	68b9      	ldr	r1, [r7, #8]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f4 fdca 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012cf2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7fc fa8f 	bl	800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	4619      	mov	r1, r3
 8012d04:	481e      	ldr	r0, [pc, #120]	@ (8012d80 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 8012d06:	f016 fad9 	bl	80292bc <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 8012d0a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8012d0e:	f107 0314 	add.w	r3, r7, #20
 8012d12:	f107 0218 	add.w	r2, r7, #24
 8012d16:	f107 011c 	add.w	r1, r7, #28
 8012d1a:	f000 f972 	bl	8013002 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 8012d1e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d22:	4619      	mov	r1, r3
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f000 f98d 	bl	8013044 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012d2a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7ff ff5a 	bl	8012be8 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8012d34:	e016      	b.n	8012d64 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8012d36:	4813      	ldr	r0, [pc, #76]	@ (8012d84 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8012d38:	f016 fb30 	bl	802939c <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8012d3c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012d40:	f107 0218 	add.w	r2, r7, #24
 8012d44:	f107 011c 	add.w	r1, r7, #28
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f000 f98e 	bl	801306a <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 8012d4e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012d52:	4619      	mov	r1, r3
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f000 f975 	bl	8013044 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012d5a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7ff ff42 	bl	8012be8 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8012d64:	68f8      	ldr	r0, [r7, #12]
 8012d66:	37c4      	adds	r7, #196	@ 0xc4
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd90      	pop	{r4, r7, pc}
 8012d6c:	0802a99c 	.word	0x0802a99c
 8012d70:	0802a9a4 	.word	0x0802a9a4
 8012d74:	0802a9ac 	.word	0x0802a9ac
 8012d78:	0802a9b4 	.word	0x0802a9b4
 8012d7c:	0802a9e8 	.word	0x0802a9e8
 8012d80:	0802a9f0 	.word	0x0802a9f0
 8012d84:	0802aa04 	.word	0x0802aa04

08012d88 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8012d88:	b590      	push	{r4, r7, lr}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe ffae 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8012d9c:	4a14      	ldr	r2, [pc, #80]	@ (8012df0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	3318      	adds	r3, #24
 8012da6:	68b9      	ldr	r1, [r7, #8]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f015 fee8 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	22ff      	movs	r2, #255	@ 0xff
 8012db2:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2200      	movs	r2, #0
 8012db8:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012dc8:	2040      	movs	r0, #64	@ 0x40
 8012dca:	f015 fbcd 	bl	8028568 <_Znwj>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	461c      	mov	r4, r3
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f7f1 fdb2 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	645a      	str	r2, [r3, #68]	@ 0x44
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	4618      	mov	r0, r3
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd90      	pop	{r4, r7, pc}
 8012df0:	0802b45c 	.word	0x0802b45c

08012df4 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 8012df4:	b590      	push	{r4, r7, lr}
 8012df6:	b085      	sub	sp, #20
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	60b9      	str	r1, [r7, #8]
 8012dfe:	607a      	str	r2, [r7, #4]
 8012e00:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7fe ff77 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8012e0a:	4a19      	ldr	r2, [pc, #100]	@ (8012e70 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	3318      	adds	r3, #24
 8012e14:	68b9      	ldr	r1, [r7, #8]
 8012e16:	4618      	mov	r0, r3
 8012e18:	f015 feb1 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	db04      	blt.n	8012e2c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	2bff      	cmp	r3, #255	@ 0xff
 8012e26:	bfa8      	it	ge
 8012e28:	23ff      	movge	r3, #255	@ 0xff
 8012e2a:	e000      	b.n	8012e2e <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	68fa      	ldr	r2, [r7, #12]
 8012e30:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2200      	movs	r2, #0
 8012e36:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2200      	movs	r2, #0
 8012e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012e46:	2040      	movs	r0, #64	@ 0x40
 8012e48:	f015 fb8e 	bl	8028568 <_Znwj>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	461c      	mov	r4, r3
 8012e50:	2201      	movs	r2, #1
 8012e52:	68b9      	ldr	r1, [r7, #8]
 8012e54:	4620      	mov	r0, r4
 8012e56:	f7f1 fd73 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	687a      	ldr	r2, [r7, #4]
 8012e62:	645a      	str	r2, [r3, #68]	@ 0x44
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4618      	mov	r0, r3
 8012e68:	3714      	adds	r7, #20
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd90      	pop	{r4, r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	0802b45c 	.word	0x0802b45c

08012e74 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8012e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8012e88:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8012fa0 <_ZN10SigmaDelta6updateEv+0x12c>
 8012e8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e94:	ee07 3a90 	vmov	s15, r3
 8012e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ea4:	ee17 3a90 	vmov	r3, s15
 8012ea8:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012eae:	68ba      	ldr	r2, [r7, #8]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d00f      	beq.n	8012ed4 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	db09      	blt.n	8012ece <_ZN10SigmaDelta6updateEv+0x5a>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	dd02      	ble.n	8012eca <_ZN10SigmaDelta6updateEv+0x56>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ec8:	e002      	b.n	8012ed0 <_ZN10SigmaDelta6updateEv+0x5c>
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	e000      	b.n	8012ed0 <_ZN10SigmaDelta6updateEv+0x5c>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	dc06      	bgt.n	8012eea <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7f1 fed6 	bl	8004c94 <_ZN3Pin3setEb>
        return;
 8012ee8:	e057      	b.n	8012f9a <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	db06      	blt.n	8012f04 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012efa:	2101      	movs	r1, #1
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f1 fec9 	bl	8004c94 <_ZN3Pin3setEb>
        return;
 8012f02:	e04a      	b.n	8012f9a <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f0c:	425b      	negs	r3, r3
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	da03      	bge.n	8012f1a <_ZN10SigmaDelta6updateEv+0xa6>
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f16:	425b      	negs	r3, r3
 8012f18:	e007      	b.n	8012f2a <_ZN10SigmaDelta6updateEv+0xb6>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	4293      	cmp	r3, r2
 8012f26:	bfa8      	it	ge
 8012f28:	4613      	movge	r3, r2
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012f34:	f083 0301 	eor.w	r3, r3, #1
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d012      	beq.n	8012f64 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f46:	441a      	add	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f54:	105b      	asrs	r3, r3, #1
 8012f56:	429a      	cmp	r2, r3
 8012f58:	db16      	blt.n	8012f88 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012f62:	e011      	b.n	8012f88 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f70:	1acb      	subs	r3, r1, r3
 8012f72:	1ad2      	subs	r2, r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	dc03      	bgt.n	8012f88 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012f92:	4619      	mov	r1, r3
 8012f94:	4610      	mov	r0, r2
 8012f96:	f7f1 fe7d 	bl	8004c94 <_ZN3Pin3setEb>
}
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	42c80000 	.word	0x42c80000

08012fa4 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	bf00      	nop
 8012fae:	370c      	adds	r7, #12
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb6:	4770      	bx	lr

08012fb8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08c      	sub	sp, #48	@ 0x30
 8012fbc:	af02      	add	r7, sp, #8
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8012fc4:	68ba      	ldr	r2, [r7, #8]
 8012fc6:	f107 0314 	add.w	r3, r7, #20
 8012fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fce:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fd2:	f107 031c 	add.w	r3, r7, #28
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f000 f860 	bl	801309e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8012fde:	466a      	mov	r2, sp
 8012fe0:	f107 0320 	add.w	r3, r7, #32
 8012fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012fe8:	e882 0003 	stmia.w	r2, {r0, r1}
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	f107 0214 	add.w	r2, r7, #20
 8012ff2:	ca06      	ldmia	r2, {r1, r2}
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f7f4 fdda 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	3728      	adds	r7, #40	@ 0x28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}

08013002 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8013002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013004:	b089      	sub	sp, #36	@ 0x24
 8013006:	af02      	add	r7, sp, #8
 8013008:	60f8      	str	r0, [r7, #12]
 801300a:	60b9      	str	r1, [r7, #8]
 801300c:	607a      	str	r2, [r7, #4]
 801300e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8013010:	f107 0314 	add.w	r3, r7, #20
 8013014:	461e      	mov	r6, r3
 8013016:	68b8      	ldr	r0, [r7, #8]
 8013018:	f7fc fa35 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801301c:	4604      	mov	r4, r0
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 f871 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013024:	4605      	mov	r5, r0
 8013026:	6838      	ldr	r0, [r7, #0]
 8013028:	f7fc fa38 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801302c:	4603      	mov	r3, r0
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	462b      	mov	r3, r5
 8013032:	4622      	mov	r2, r4
 8013034:	4631      	mov	r1, r6
 8013036:	68f8      	ldr	r0, [r7, #12]
 8013038:	f000 f870 	bl	801311c <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	371c      	adds	r7, #28
 8013040:	46bd      	mov	sp, r7
 8013042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013044 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8013044:	b590      	push	{r4, r7, lr}
 8013046:	b083      	sub	sp, #12
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801304e:	687c      	ldr	r4, [r7, #4]
 8013050:	6838      	ldr	r0, [r7, #0]
 8013052:	f000 f883 	bl	801315c <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 8013056:	4603      	mov	r3, r0
 8013058:	4619      	mov	r1, r3
 801305a:	4620      	mov	r0, r4
 801305c:	f000 f889 	bl	8013172 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	bd90      	pop	{r4, r7, pc}

0801306a <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 801306a:	b5b0      	push	{r4, r5, r7, lr}
 801306c:	b086      	sub	sp, #24
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8013076:	f107 0314 	add.w	r3, r7, #20
 801307a:	461d      	mov	r5, r3
 801307c:	68b8      	ldr	r0, [r7, #8]
 801307e:	f7fc fa02 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013082:	4604      	mov	r4, r0
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f000 f83e 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801308a:	4603      	mov	r3, r0
 801308c:	4622      	mov	r2, r4
 801308e:	4629      	mov	r1, r5
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 f88c 	bl	80131ae <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	3718      	adds	r7, #24
 801309a:	46bd      	mov	sp, r7
 801309c:	bdb0      	pop	{r4, r5, r7, pc}

0801309e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801309e:	b580      	push	{r7, lr}
 80130a0:	b082      	sub	sp, #8
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80130a8:	6838      	ldr	r0, [r7, #0]
 80130aa:	f000 f89a 	bl	80131e2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80130ae:	4602      	mov	r2, r0
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f000 f89f 	bl	80131f8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 80130ba:	bf00      	nop
}
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	3708      	adds	r7, #8
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b084      	sub	sp, #16
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	463b      	mov	r3, r7
 80130cc:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80130d0:	463b      	mov	r3, r7
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7f4 f92c 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80130d8:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80130da:	463b      	mov	r3, r7
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f4 f933 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80130e2:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d008      	beq.n	80130fc <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80130ea:	68b9      	ldr	r1, [r7, #8]
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f000 f893 	bl	8013218 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 80130f2:	4603      	mov	r3, r0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d001      	beq.n	80130fc <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80130f8:	2301      	movs	r3, #1
 80130fa:	e000      	b.n	80130fe <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 80130fc:	2300      	movs	r3, #0
  }
 80130fe:	4618      	mov	r0, r3
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013106:	b480      	push	{r7}
 8013108:	b083      	sub	sp, #12
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr

0801311c <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801311e:	b087      	sub	sp, #28
 8013120:	af02      	add	r7, sp, #8
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
 8013128:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 801312a:	68fc      	ldr	r4, [r7, #12]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f7fc f9aa 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013132:	4605      	mov	r5, r0
 8013134:	6838      	ldr	r0, [r7, #0]
 8013136:	f7ff ffe6 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801313a:	4606      	mov	r6, r0
 801313c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801313e:	f7fc f9ad 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013142:	4603      	mov	r3, r0
 8013144:	9300      	str	r3, [sp, #0]
 8013146:	4633      	mov	r3, r6
 8013148:	462a      	mov	r2, r5
 801314a:	68b9      	ldr	r1, [r7, #8]
 801314c:	4620      	mov	r0, r4
 801314e:	f000 f8c1 	bl	80132d4 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	4618      	mov	r0, r3
 8013156:	3714      	adds	r7, #20
 8013158:	46bd      	mov	sp, r7
 801315a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801315c <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	4618      	mov	r0, r3
 8013168:	370c      	adds	r7, #12
 801316a:	46bd      	mov	sp, r7
 801316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013170:	4770      	bx	lr

08013172 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8013172:	b580      	push	{r7, lr}
 8013174:	b082      	sub	sp, #8
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	601a      	str	r2, [r3, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	3304      	adds	r3, #4
 8013188:	4618      	mov	r0, r3
 801318a:	f7f9 ff91 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	1d1a      	adds	r2, r3, #4
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	3304      	adds	r3, #4
 8013196:	4619      	mov	r1, r3
 8013198:	4610      	mov	r0, r2
 801319a:	f7fa fb48 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	2200      	movs	r2, #0
 80131a2:	601a      	str	r2, [r3, #0]
	}
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}

080131ae <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80131ae:	b5b0      	push	{r4, r5, r7, lr}
 80131b0:	b084      	sub	sp, #16
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	60f8      	str	r0, [r7, #12]
 80131b6:	60b9      	str	r1, [r7, #8]
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80131bc:	68fc      	ldr	r4, [r7, #12]
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	f7fc f961 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80131c4:	4605      	mov	r5, r0
 80131c6:	6838      	ldr	r0, [r7, #0]
 80131c8:	f7ff ff9d 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80131cc:	4603      	mov	r3, r0
 80131ce:	462a      	mov	r2, r5
 80131d0:	68b9      	ldr	r1, [r7, #8]
 80131d2:	4620      	mov	r0, r4
 80131d4:	f000 f8ac 	bl	8013330 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	4618      	mov	r0, r3
 80131dc:	3710      	adds	r7, #16
 80131de:	46bd      	mov	sp, r7
 80131e0:	bdb0      	pop	{r4, r5, r7, pc}

080131e2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80131e2:	b480      	push	{r7}
 80131e4:	b083      	sub	sp, #12
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80131ea:	687b      	ldr	r3, [r7, #4]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8013202:	2301      	movs	r3, #1
 8013204:	2205      	movs	r2, #5
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7f1 ff4b 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	3708      	adds	r7, #8
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
	...

08013218 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8013222:	6839      	ldr	r1, [r7, #0]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7f3 f899 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 801322a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	791b      	ldrb	r3, [r3, #4]
 8013230:	3b0a      	subs	r3, #10
 8013232:	2b12      	cmp	r3, #18
 8013234:	d848      	bhi.n	80132c8 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 8013236:	a201      	add	r2, pc, #4	@ (adr r2, 801323c <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 8013238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801323c:	08013289 	.word	0x08013289
 8013240:	080132c9 	.word	0x080132c9
 8013244:	08013297 	.word	0x08013297
 8013248:	080132c9 	.word	0x080132c9
 801324c:	080132c9 	.word	0x080132c9
 8013250:	080132c9 	.word	0x080132c9
 8013254:	080132c9 	.word	0x080132c9
 8013258:	080132c9 	.word	0x080132c9
 801325c:	080132c9 	.word	0x080132c9
 8013260:	080132c9 	.word	0x080132c9
 8013264:	080132c9 	.word	0x080132c9
 8013268:	080132c9 	.word	0x080132c9
 801326c:	080132c9 	.word	0x080132c9
 8013270:	080132c9 	.word	0x080132c9
 8013274:	080132c9 	.word	0x080132c9
 8013278:	080132c9 	.word	0x080132c9
 801327c:	080132a5 	.word	0x080132a5
 8013280:	080132c9 	.word	0x080132c9
 8013284:	080132b7 	.word	0x080132b7
        return canConvertNumber<T>(content_.asUint32);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4618      	mov	r0, r3
 801328e:	f7fc fe3c 	bl	800ff0a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8013292:	4603      	mov	r3, r0
 8013294:	e019      	b.n	80132ca <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4618      	mov	r0, r3
 801329c:	f7fc fe47 	bl	800ff2e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 80132a0:	4603      	mov	r3, r0
 80132a2:	e012      	b.n	80132ca <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132aa:	4610      	mov	r0, r2
 80132ac:	4619      	mov	r1, r3
 80132ae:	f7fc fe49 	bl	800ff44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80132b2:	4603      	mov	r3, r0
 80132b4:	e009      	b.n	80132ca <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	4610      	mov	r0, r2
 80132be:	4619      	mov	r1, r3
 80132c0:	f7fc fe58 	bl	800ff74 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80132c4:	4603      	mov	r3, r0
 80132c6:	e000      	b.n	80132ca <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 80132c8:	2300      	movs	r3, #0
  }
 80132ca:	4618      	mov	r0, r3
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop

080132d4 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d8:	b086      	sub	sp, #24
 80132da:	af02      	add	r7, sp, #8
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	60b9      	str	r1, [r7, #8]
 80132e0:	607a      	str	r2, [r7, #4]
 80132e2:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2200      	movs	r2, #0
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	1d1c      	adds	r4, r3, #4
 80132ee:	68fd      	ldr	r5, [r7, #12]
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7fc f8c8 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80132f6:	4680      	mov	r8, r0
 80132f8:	6838      	ldr	r0, [r7, #0]
 80132fa:	f7ff ff04 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80132fe:	4606      	mov	r6, r0
 8013300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013302:	f7fc f8cb 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013306:	4603      	mov	r3, r0
 8013308:	9301      	str	r3, [sp, #4]
 801330a:	9600      	str	r6, [sp, #0]
 801330c:	4643      	mov	r3, r8
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	4629      	mov	r1, r5
 8013312:	4620      	mov	r0, r4
 8013314:	f000 f833 	bl	801337e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4619      	mov	r1, r3
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f000 f883 	bl	801342a <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	4618      	mov	r0, r3
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013330 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8013330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013332:	b087      	sub	sp, #28
 8013334:	af02      	add	r7, sp, #8
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
 801333c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2200      	movs	r2, #0
 8013342:	601a      	str	r2, [r3, #0]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	1d1c      	adds	r4, r3, #4
 8013348:	68fd      	ldr	r5, [r7, #12]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7fc f89b 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013350:	4606      	mov	r6, r0
 8013352:	6838      	ldr	r0, [r7, #0]
 8013354:	f7ff fed7 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013358:	4603      	mov	r3, r0
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	4633      	mov	r3, r6
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	4629      	mov	r1, r5
 8013362:	4620      	mov	r0, r4
 8013364:	f000 f86c 	bl	8013440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4619      	mov	r1, r3
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f000 f85b 	bl	801342a <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4618      	mov	r0, r3
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801337e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801337e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013382:	b08c      	sub	sp, #48	@ 0x30
 8013384:	af02      	add	r7, sp, #8
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	607a      	str	r2, [r7, #4]
 801338c:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	f107 031c 	add.w	r3, r7, #28
 8013394:	4611      	mov	r1, r2
 8013396:	4618      	mov	r0, r3
 8013398:	f000 f8a0 	bl	80134dc <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 801339c:	f107 0314 	add.w	r3, r7, #20
 80133a0:	f107 021c 	add.w	r2, r7, #28
 80133a4:	4611      	mov	r1, r2
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 f8b1 	bl	801350e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80133ac:	f107 0314 	add.w	r3, r7, #20
 80133b0:	4618      	mov	r0, r3
 80133b2:	f000 f8d4 	bl	801355e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80133b6:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 80133b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ba:	4619      	mov	r1, r3
 80133bc:	2054      	movs	r0, #84	@ 0x54
 80133be:	f7f7 fa43 	bl	800a848 <_ZnwjPv>
 80133c2:	4604      	mov	r4, r0
 80133c4:	6838      	ldr	r0, [r7, #0]
 80133c6:	f7fc f85e 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80133ca:	4605      	mov	r5, r0
 80133cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80133ce:	f7ff fe9a 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80133d2:	4606      	mov	r6, r0
 80133d4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80133d6:	f7fc f861 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80133da:	4603      	mov	r3, r0
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	4633      	mov	r3, r6
 80133e0:	462a      	mov	r2, r5
 80133e2:	4641      	mov	r1, r8
 80133e4:	4620      	mov	r0, r4
 80133e6:	f000 f8c9 	bl	801357c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 80133ea:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80133ec:	f107 0314 	add.w	r3, r7, #20
 80133f0:	2100      	movs	r1, #0
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 f8f6 	bl	80135e4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6a3a      	ldr	r2, [r7, #32]
 80133fc:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80133fe:	6a38      	ldr	r0, [r7, #32]
 8013400:	f000 f8ff 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013404:	4602      	mov	r2, r0
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	601a      	str	r2, [r3, #0]
	}
 801340a:	f107 0314 	add.w	r3, r7, #20
 801340e:	4618      	mov	r0, r3
 8013410:	f000 f890 	bl	8013534 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013414:	f107 031c 	add.w	r3, r7, #28
 8013418:	4618      	mov	r0, r3
 801341a:	f000 f86c 	bl	80134f6 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	4618      	mov	r0, r3
 8013422:	3728      	adds	r7, #40	@ 0x28
 8013424:	46bd      	mov	sp, r7
 8013426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801342a <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 801342a:	b480      	push	{r7}
 801342c:	b083      	sub	sp, #12
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
 8013432:	6039      	str	r1, [r7, #0]
	{ }
 8013434:	bf00      	nop
 8013436:	370c      	adds	r7, #12
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr

08013440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	b08b      	sub	sp, #44	@ 0x2c
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	607a      	str	r2, [r7, #4]
 801344c:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	f107 031c 	add.w	r3, r7, #28
 8013454:	4611      	mov	r1, r2
 8013456:	4618      	mov	r0, r3
 8013458:	f000 f840 	bl	80134dc <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 801345c:	f107 0314 	add.w	r3, r7, #20
 8013460:	f107 021c 	add.w	r2, r7, #28
 8013464:	4611      	mov	r1, r2
 8013466:	4618      	mov	r0, r3
 8013468:	f000 f851 	bl	801350e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 801346c:	f107 0314 	add.w	r3, r7, #20
 8013470:	4618      	mov	r0, r3
 8013472:	f000 f874 	bl	801355e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013476:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347a:	4619      	mov	r1, r3
 801347c:	2054      	movs	r0, #84	@ 0x54
 801347e:	f7f7 f9e3 	bl	800a848 <_ZnwjPv>
 8013482:	4604      	mov	r4, r0
 8013484:	6838      	ldr	r0, [r7, #0]
 8013486:	f7fb fffe 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801348a:	4605      	mov	r5, r0
 801348c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801348e:	f7ff fe3a 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013492:	4603      	mov	r3, r0
 8013494:	462a      	mov	r2, r5
 8013496:	4631      	mov	r1, r6
 8013498:	4620      	mov	r0, r4
 801349a:	f000 f8c1 	bl	8013620 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 801349e:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80134a0:	f107 0314 	add.w	r3, r7, #20
 80134a4:	2100      	movs	r1, #0
 80134a6:	4618      	mov	r0, r3
 80134a8:	f000 f89c 	bl	80135e4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	6a3a      	ldr	r2, [r7, #32]
 80134b0:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80134b2:	6a38      	ldr	r0, [r7, #32]
 80134b4:	f000 f8a5 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80134b8:	4602      	mov	r2, r0
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	601a      	str	r2, [r3, #0]
	}
 80134be:	f107 0314 	add.w	r3, r7, #20
 80134c2:	4618      	mov	r0, r3
 80134c4:	f000 f836 	bl	8013534 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80134c8:	f107 031c 	add.w	r3, r7, #28
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 f812 	bl	80134f6 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	4618      	mov	r0, r3
 80134d6:	372c      	adds	r7, #44	@ 0x2c
 80134d8:	46bd      	mov	sp, r7
 80134da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134dc <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 f8c8 	bl	801367c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4618      	mov	r0, r3
 80134f0:	3708      	adds	r7, #8
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}

080134f6 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b082      	sub	sp, #8
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 f8c7 	bl	8013692 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4618      	mov	r0, r3
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}

0801350e <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801350e:	b580      	push	{r7, lr}
 8013510:	b082      	sub	sp, #8
 8013512:	af00      	add	r7, sp, #0
 8013514:	6078      	str	r0, [r7, #4]
 8013516:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013518:	2101      	movs	r1, #1
 801351a:	6838      	ldr	r0, [r7, #0]
 801351c:	f000 f8c4 	bl	80136a8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8013520:	4603      	mov	r3, r0
 8013522:	461a      	mov	r2, r3
 8013524:	6839      	ldr	r1, [r7, #0]
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f000 f8cd 	bl	80136c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d007      	beq.n	8013554 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6818      	ldr	r0, [r3, #0]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	2201      	movs	r2, #1
 801354e:	4619      	mov	r1, r3
 8013550:	f000 f8cd 	bl	80136ee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	3708      	adds	r7, #8
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}

0801355e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801355e:	b580      	push	{r7, lr}
 8013560:	b082      	sub	sp, #8
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	4618      	mov	r0, r3
 801356c:	f000 f8ce 	bl	801370c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8013570:	4603      	mov	r3, r0
 8013572:	4618      	mov	r0, r3
 8013574:	3708      	adds	r7, #8
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
	...

0801357c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357e:	b087      	sub	sp, #28
 8013580:	af02      	add	r7, sp, #8
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	7239      	strb	r1, [r7, #8]
 8013586:	607a      	str	r2, [r7, #4]
 8013588:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	4618      	mov	r0, r3
 801358e:	f7fa fe03 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8013592:	4a13      	ldr	r2, [pc, #76]	@ (80135e0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	601a      	str	r2, [r3, #0]
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	330c      	adds	r3, #12
 801359c:	4621      	mov	r1, r4
 801359e:	4618      	mov	r0, r3
 80135a0:	f000 f8bf 	bl	8013722 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 f82c 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80135aa:	4604      	mov	r4, r0
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7fb ff6a 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80135b2:	4605      	mov	r5, r0
 80135b4:	6838      	ldr	r0, [r7, #0]
 80135b6:	f7ff fda6 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80135ba:	4606      	mov	r6, r0
 80135bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80135be:	f7fb ff6d 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80135c2:	4603      	mov	r3, r0
 80135c4:	f107 0008 	add.w	r0, r7, #8
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4633      	mov	r3, r6
 80135cc:	462a      	mov	r2, r5
 80135ce:	4621      	mov	r1, r4
 80135d0:	f000 f8b6 	bl	8013740 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4618      	mov	r0, r3
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135de:	bf00      	nop
 80135e0:	0802b440 	.word	0x0802b440

080135e4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2200      	movs	r2, #0
 80135f2:	605a      	str	r2, [r3, #4]
	return *this;
 80135f4:	687b      	ldr	r3, [r7, #4]
      }
 80135f6:	4618      	mov	r0, r3
 80135f8:	370c      	adds	r7, #12
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr

08013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8013602:	b580      	push	{r7, lr}
 8013604:	b082      	sub	sp, #8
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	330c      	adds	r3, #12
 801360e:	4618      	mov	r0, r3
 8013610:	f000 f8b2 	bl	8013778 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 8013614:	4603      	mov	r3, r0
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8013620:	b5b0      	push	{r4, r5, r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	7239      	strb	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
 801362c:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	4618      	mov	r0, r3
 8013632:	f7fa fdb1 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8013636:	4a10      	ldr	r2, [pc, #64]	@ (8013678 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	601a      	str	r2, [r3, #0]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	330c      	adds	r3, #12
 8013640:	4621      	mov	r1, r4
 8013642:	4618      	mov	r0, r3
 8013644:	f000 f86d 	bl	8013722 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff ffda 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801364e:	4604      	mov	r4, r0
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f7fb ff18 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013656:	4605      	mov	r5, r0
 8013658:	6838      	ldr	r0, [r7, #0]
 801365a:	f7ff fd54 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801365e:	4603      	mov	r3, r0
 8013660:	f107 0008 	add.w	r0, r7, #8
 8013664:	462a      	mov	r2, r5
 8013666:	4621      	mov	r1, r4
 8013668:	f000 f892 	bl	8013790 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	4618      	mov	r0, r3
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bdb0      	pop	{r4, r5, r7, pc}
 8013676:	bf00      	nop
 8013678:	0802b440 	.word	0x0802b440

0801367c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801367c:	b480      	push	{r7}
 801367e:	b083      	sub	sp, #12
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	4618      	mov	r0, r3
 8013688:	370c      	adds	r7, #12
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr

08013692 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013692:	b480      	push	{r7}
 8013694:	b083      	sub	sp, #12
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80136b2:	2200      	movs	r2, #0
 80136b4:	6839      	ldr	r1, [r7, #0]
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f000 f882 	bl	80137c0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80136bc:	4603      	mov	r3, r0
 80136be:	4618      	mov	r0, r3
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}

080136c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80136c6:	b580      	push	{r7, lr}
 80136c8:	b084      	sub	sp, #16
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	60f8      	str	r0, [r7, #12]
 80136ce:	60b9      	str	r1, [r7, #8]
 80136d0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80136d2:	68b8      	ldr	r0, [r7, #8]
 80136d4:	f000 f8a2 	bl	801381c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80136d8:	4602      	mov	r2, r0
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	605a      	str	r2, [r3, #4]
      { }
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	4618      	mov	r0, r3
 80136e8:	3710      	adds	r7, #16
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}

080136ee <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80136ee:	b580      	push	{r7, lr}
 80136f0:	b084      	sub	sp, #16
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	60f8      	str	r0, [r7, #12]
 80136f6:	60b9      	str	r1, [r7, #8]
 80136f8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	68b9      	ldr	r1, [r7, #8]
 80136fe:	68f8      	ldr	r0, [r7, #12]
 8013700:	f000 f897 	bl	8013832 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8013704:	bf00      	nop
 8013706:	3710      	adds	r7, #16
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 801370c:	b480      	push	{r7}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
      return __ptr;
 8013714:	687b      	ldr	r3, [r7, #4]
    }
 8013716:	4618      	mov	r0, r3
 8013718:	370c      	adds	r7, #12
 801371a:	46bd      	mov	sp, r7
 801371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013720:	4770      	bx	lr

08013722 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8013722:	b580      	push	{r7, lr}
 8013724:	b082      	sub	sp, #8
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
 801372a:	7039      	strb	r1, [r7, #0]
 801372c:	463b      	mov	r3, r7
 801372e:	4619      	mov	r1, r3
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7fa ff4b 	bl	800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	4618      	mov	r0, r3
 801373a:	3708      	adds	r7, #8
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}

08013740 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8013740:	b5b0      	push	{r4, r5, r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	60f8      	str	r0, [r7, #12]
 8013748:	60b9      	str	r1, [r7, #8]
 801374a:	607a      	str	r2, [r7, #4]
 801374c:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7fb fe99 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013754:	4604      	mov	r4, r0
 8013756:	6838      	ldr	r0, [r7, #0]
 8013758:	f7ff fcd5 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801375c:	4605      	mov	r5, r0
 801375e:	6a38      	ldr	r0, [r7, #32]
 8013760:	f7fb fe9c 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013764:	4603      	mov	r3, r0
 8013766:	462a      	mov	r2, r5
 8013768:	4621      	mov	r1, r4
 801376a:	68b8      	ldr	r0, [r7, #8]
 801376c:	f000 f872 	bl	8013854 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 8013770:	bf00      	nop
 8013772:	3710      	adds	r7, #16
 8013774:	46bd      	mov	sp, r7
 8013776:	bdb0      	pop	{r4, r5, r7, pc}

08013778 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 f8a4 	bl	80138ce <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 8013786:	4603      	mov	r3, r0
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]
 801379c:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7fb fe71 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80137a4:	4604      	mov	r4, r0
 80137a6:	6838      	ldr	r0, [r7, #0]
 80137a8:	f7ff fcad 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80137ac:	4603      	mov	r3, r0
 80137ae:	461a      	mov	r2, r3
 80137b0:	4621      	mov	r1, r4
 80137b2:	68b8      	ldr	r0, [r7, #8]
 80137b4:	f000 f896 	bl	80138e4 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 80137b8:	bf00      	nop
 80137ba:	3714      	adds	r7, #20
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd90      	pop	{r4, r7, pc}

080137c0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f8c1 	bl	8013954 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80137d2:	4602      	mov	r2, r0
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	4293      	cmp	r3, r2
 80137d8:	bf8c      	ite	hi
 80137da:	2301      	movhi	r3, #1
 80137dc:	2300      	movls	r3, #0
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	bf14      	ite	ne
 80137e4:	2301      	movne	r3, #1
 80137e6:	2300      	moveq	r3, #0
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d007      	beq.n	80137fe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	4a09      	ldr	r2, [pc, #36]	@ (8013818 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d901      	bls.n	80137fa <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80137f6:	f014 fecd 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80137fa:	f014 fec8 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	2254      	movs	r2, #84	@ 0x54
 8013802:	fb02 f303 	mul.w	r3, r2, r3
 8013806:	4618      	mov	r0, r3
 8013808:	f014 feae 	bl	8028568 <_Znwj>
 801380c:	4603      	mov	r3, r0
 801380e:	bf00      	nop
      }
 8013810:	4618      	mov	r0, r3
 8013812:	3710      	adds	r7, #16
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	030c30c3 	.word	0x030c30c3

0801381c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	4618      	mov	r0, r3
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8013832:	b580      	push	{r7, lr}
 8013834:	b084      	sub	sp, #16
 8013836:	af00      	add	r7, sp, #0
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2254      	movs	r2, #84	@ 0x54
 8013842:	fb02 f303 	mul.w	r3, r2, r3
 8013846:	4619      	mov	r1, r3
 8013848:	68b8      	ldr	r0, [r7, #8]
 801384a:	f014 fe7c 	bl	8028546 <_ZdlPvj>
      }
 801384e:	3710      	adds	r7, #16
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8013854:	b5b0      	push	{r4, r5, r7, lr}
 8013856:	b08c      	sub	sp, #48	@ 0x30
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
 8013860:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	4619      	mov	r1, r3
 8013866:	2048      	movs	r0, #72	@ 0x48
 8013868:	f7f6 ffee 	bl	800a848 <_ZnwjPv>
 801386c:	4605      	mov	r5, r0
 801386e:	68b8      	ldr	r0, [r7, #8]
 8013870:	f7fb fe09 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013874:	4603      	mov	r3, r0
 8013876:	681c      	ldr	r4, [r3, #0]
 8013878:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801387c:	4618      	mov	r0, r3
 801387e:	f014 fe84 	bl	802858a <_ZNSaIcEC1Ev>
 8013882:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013886:	f107 0314 	add.w	r3, r7, #20
 801388a:	4621      	mov	r1, r4
 801388c:	4618      	mov	r0, r3
 801388e:	f7f3 ff99 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fc37 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013898:	4603      	mov	r3, r0
 801389a:	681c      	ldr	r4, [r3, #0]
 801389c:	6838      	ldr	r0, [r7, #0]
 801389e:	f7fb fdfd 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80138a2:	4603      	mov	r3, r0
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f107 0114 	add.w	r1, r7, #20
 80138aa:	4622      	mov	r2, r4
 80138ac:	4628      	mov	r0, r5
 80138ae:	f7ff faa1 	bl	8012df4 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 80138b2:	f107 0314 	add.w	r3, r7, #20
 80138b6:	4618      	mov	r0, r3
 80138b8:	f014 ff51 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80138bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80138c0:	4618      	mov	r0, r3
 80138c2:	f014 fe63 	bl	802858c <_ZNSaIcED1Ev>
    }
 80138c6:	bf00      	nop
 80138c8:	3730      	adds	r7, #48	@ 0x30
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bdb0      	pop	{r4, r5, r7, pc}

080138ce <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 80138ce:	b480      	push	{r7}
 80138d0:	b083      	sub	sp, #12
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80138d6:	687b      	ldr	r3, [r7, #4]
      }
 80138d8:	4618      	mov	r0, r3
 80138da:	370c      	adds	r7, #12
 80138dc:	46bd      	mov	sp, r7
 80138de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e2:	4770      	bx	lr

080138e4 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80138e4:	b5b0      	push	{r4, r5, r7, lr}
 80138e6:	b08c      	sub	sp, #48	@ 0x30
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	4619      	mov	r1, r3
 80138f4:	2048      	movs	r0, #72	@ 0x48
 80138f6:	f7f6 ffa7 	bl	800a848 <_ZnwjPv>
 80138fa:	4605      	mov	r5, r0
 80138fc:	68b8      	ldr	r0, [r7, #8]
 80138fe:	f7fb fdc2 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013902:	4603      	mov	r3, r0
 8013904:	681c      	ldr	r4, [r3, #0]
 8013906:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801390a:	4618      	mov	r0, r3
 801390c:	f014 fe3d 	bl	802858a <_ZNSaIcEC1Ev>
 8013910:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013914:	f107 0314 	add.w	r3, r7, #20
 8013918:	4621      	mov	r1, r4
 801391a:	4618      	mov	r0, r3
 801391c:	f7f3 ff52 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff fbf0 	bl	8013106 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013926:	4603      	mov	r3, r0
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	f107 0314 	add.w	r3, r7, #20
 801392e:	4619      	mov	r1, r3
 8013930:	4628      	mov	r0, r5
 8013932:	f7ff fa29 	bl	8012d88 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 8013936:	f107 0314 	add.w	r3, r7, #20
 801393a:	4618      	mov	r0, r3
 801393c:	f014 ff0f 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013944:	4618      	mov	r0, r3
 8013946:	f014 fe21 	bl	802858c <_ZNSaIcED1Ev>
    }
 801394a:	bf00      	nop
 801394c:	3730      	adds	r7, #48	@ 0x30
 801394e:	46bd      	mov	sp, r7
 8013950:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013954 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801395c:	4b03      	ldr	r3, [pc, #12]	@ (801396c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801395e:	4618      	mov	r0, r3
 8013960:	370c      	adds	r7, #12
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	01861861 	.word	0x01861861

08013970 <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	4a08      	ldr	r2, [pc, #32]	@ (801399c <_ZN10SigmaDeltaD1Ev+0x2c>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	601a      	str	r2, [r3, #0]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	3318      	adds	r3, #24
 8013982:	4618      	mov	r0, r3
 8013984:	f014 feeb 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe f9d0 	bl	8011d30 <_ZN6ModuleD1Ev>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4618      	mov	r0, r3
 8013994:	3708      	adds	r7, #8
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	0802b45c 	.word	0x0802b45c

080139a0 <_ZN10SigmaDeltaD0Ev>:
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f7ff ffe1 	bl	8013970 <_ZN10SigmaDeltaD1Ev>
 80139ae:	2148      	movs	r1, #72	@ 0x48
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f014 fdc8 	bl	8028546 <_ZdlPvj>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	4a05      	ldr	r2, [pc, #20]	@ (80139e0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f8 fda3 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	0802b440 	.word	0x0802b440

080139e4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff ffe7 	bl	80139c0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80139f2:	2154      	movs	r1, #84	@ 0x54
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f014 fda6 	bl	8028546 <_ZdlPvj>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8013a04:	b590      	push	{r4, r7, lr}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	330c      	adds	r3, #12
 8013a10:	4618      	mov	r0, r3
 8013a12:	f000 f856 	bl	8013ac2 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013a16:	4604      	mov	r4, r0
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff fdf2 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	4619      	mov	r1, r3
 8013a22:	4620      	mov	r0, r4
 8013a24:	f000 f859 	bl	8013ada <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8013a28:	bf00      	nop
 8013a2a:	370c      	adds	r7, #12
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd90      	pop	{r4, r7, pc}

08013a30 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b086      	sub	sp, #24
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	330c      	adds	r3, #12
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f000 f840 	bl	8013ac2 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013a42:	4602      	mov	r2, r0
 8013a44:	f107 0314 	add.w	r3, r7, #20
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7ff fd46 	bl	80134dc <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8013a50:	f107 0114 	add.w	r1, r7, #20
 8013a54:	f107 030c 	add.w	r3, r7, #12
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff fe33 	bl	80136c6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff ffad 	bl	80139c0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8013a66:	f107 030c 	add.w	r3, r7, #12
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7ff fd62 	bl	8013534 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013a70:	f107 0314 	add.w	r3, r7, #20
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7ff fd3e 	bl	80134f6 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b084      	sub	sp, #16
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff fdb9 	bl	8013602 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013a90:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013a92:	f7f6 ff25 	bl	800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8013a96:	4602      	mov	r2, r0
	    ||
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d005      	beq.n	8013aaa <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8013a9e:	6838      	ldr	r0, [r7, #0]
 8013aa0:	f014 fd8e 	bl	80285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8013aa4:	4603      	mov	r3, r0
	    ||
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d001      	beq.n	8013aae <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8013aaa:	2301      	movs	r3, #1
 8013aac:	e000      	b.n	8013ab0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8013aae:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	e000      	b.n	8013aba <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8013ab8:	2300      	movs	r3, #0
      }
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}

08013ac2 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b082      	sub	sp, #8
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7fa fff9 	bl	800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
 8013ae2:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8013ae4:	6838      	ldr	r0, [r7, #0]
 8013ae6:	f000 f804 	bl	8013af2 <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 8013aea:	bf00      	nop
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b082      	sub	sp, #8
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	4798      	blx	r3
    }
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8013b0c:	b590      	push	{r4, r7, lr}
 8013b0e:	b0bd      	sub	sp, #244	@ 0xf4
 8013b10:	af08      	add	r7, sp, #32
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 8013b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b1c:	4a50      	ldr	r2, [pc, #320]	@ (8013c60 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8013b1e:	68b9      	ldr	r1, [r7, #8]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fe fb68 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7f3 fed0 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013b30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8013b34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b38:	4a4a      	ldr	r2, [pc, #296]	@ (8013c64 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8013b3a:	68b9      	ldr	r1, [r7, #8]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fb fb78 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7f3 fef3 	bl	8007932 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 8013b50:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8013b54:	f015 fc22 	bl	802939c <puts>

	    int joint = config["Joint Number"];
 8013b58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013b5c:	4a42      	ldr	r2, [pc, #264]	@ (8013c68 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 8013b5e:	68b9      	ldr	r1, [r7, #8]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f000 fa1d 	bl	8013fa0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fb fb55 	bl	800f21a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8013b70:	4603      	mov	r3, r0
 8013b72:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8013b74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013b78:	4a3c      	ldr	r2, [pc, #240]	@ (8013c6c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fb fb58 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b82:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f3 fea2 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 8013b90:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013b94:	4a36      	ldr	r2, [pc, #216]	@ (8013c70 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 8013b96:	68b9      	ldr	r1, [r7, #8]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fd fb3a 	bl	8011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b9e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7f3 fe94 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8013bac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013bb0:	4a30      	ldr	r2, [pc, #192]	@ (8013c74 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8013bb2:	68b9      	ldr	r1, [r7, #8]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f000 fa18 	bl	8013fea <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013bba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f3 fe86 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f7fd f94f 	bl	8010e6c <_ZN6Remora9getRxDataEv>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	4413      	add	r3, r2
 8013bd6:	3304      	adds	r3, #4
 8013bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7fd f937 	bl	8010e50 <_ZN6Remora9getTxDataEv>
 8013be2:	4602      	mov	r2, r0
 8013be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4413      	add	r3, r2
 8013bea:	3304      	adds	r3, #4
 8013bec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7fd f93b 	bl	8010e6c <_ZN6Remora9getRxDataEv>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	333c      	adds	r3, #60	@ 0x3c
 8013bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8013bfe:	2301      	movs	r3, #1
 8013c00:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8013c02:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8013c06:	f107 0420 	add.w	r4, r7, #32
 8013c0a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013c0e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013c12:	f107 0317 	add.w	r3, r7, #23
 8013c16:	9306      	str	r3, [sp, #24]
 8013c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013c1c:	9305      	str	r3, [sp, #20]
 8013c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013c22:	9304      	str	r3, [sp, #16]
 8013c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013c28:	9303      	str	r3, [sp, #12]
 8013c2a:	4b13      	ldr	r3, [pc, #76]	@ (8013c78 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8013c2c:	9302      	str	r3, [sp, #8]
 8013c2e:	f107 0318 	add.w	r3, r7, #24
 8013c32:	9301      	str	r3, [sp, #4]
 8013c34:	f107 031c 	add.w	r3, r7, #28
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	4623      	mov	r3, r4
 8013c3c:	f000 f9fa 	bl	8014034 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8013c40:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013c44:	4619      	mov	r1, r3
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f000 fa70 	bl	801412c <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8013c4c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013c50:	4618      	mov	r0, r3
 8013c52:	f000 fa49 	bl	80140e8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8013c56:	bf00      	nop
	}
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	37d4      	adds	r7, #212	@ 0xd4
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd90      	pop	{r4, r7, pc}
 8013c60:	0802aa50 	.word	0x0802aa50
 8013c64:	0802aa58 	.word	0x0802aa58
 8013c68:	0802aa64 	.word	0x0802aa64
 8013c6c:	0802aa74 	.word	0x0802aa74
 8013c70:	0802aa80 	.word	0x0802aa80
 8013c74:	0802aa8c 	.word	0x0802aa8c
 8013c78:	0802b478 	.word	0x0802b478

08013c7c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8013c7c:	b590      	push	{r4, r7, lr}
 8013c7e:	b09b      	sub	sp, #108	@ 0x6c
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
 8013c88:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7fe f833 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8013c92:	4a5c      	ldr	r2, [pc, #368]	@ (8013e04 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	683a      	ldr	r2, [r7, #0]
 8013ca2:	61da      	str	r2, [r3, #28]
      step(_step),
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013ca8:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013cae:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013cb6:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013cce:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8013cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f014 fc55 	bl	802858a <_ZNSaIcEC1Ev>
 8013ce0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013ce4:	f107 0314 	add.w	r3, r7, #20
 8013ce8:	6839      	ldr	r1, [r7, #0]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7f3 fd6a 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013cf0:	f107 0314 	add.w	r3, r7, #20
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f7f0 fe21 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013cfe:	f107 0314 	add.w	r3, r7, #20
 8013d02:	4618      	mov	r0, r3
 8013d04:	f014 fd2b 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f014 fc3d 	bl	802858c <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8013d18:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f014 fc34 	bl	802858a <_ZNSaIcEC1Ev>
 8013d22:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013d26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d2a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7f3 fd49 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013d32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d36:	2201      	movs	r2, #1
 8013d38:	4619      	mov	r1, r3
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7f0 fe00 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013d40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d44:	4618      	mov	r0, r3
 8013d46:	f014 fd0a 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f014 fc1c 	bl	802858c <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8013d5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f014 fc13 	bl	802858a <_ZNSaIcEC1Ev>
 8013d64:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8013d68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7f3 fd28 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013d74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013d78:	2201      	movs	r2, #1
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	f7f0 fddf 	bl	8004940 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013d82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013d86:	4618      	mov	r0, r3
 8013d88:	f014 fce9 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013d90:	4618      	mov	r0, r3
 8013d92:	f014 fbfb 	bl	802858c <_ZNSaIcED1Ev>
      rawCount(0),
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2200      	movs	r2, #0
 8013da2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8013da6:	2201      	movs	r2, #1
 8013da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013dac:	fa02 f303 	lsl.w	r3, r2, r3
 8013db0:	ee07 3a90 	vmov	s15, r3
 8013db4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	ee07 3a90 	vmov	s15, r3
 8013dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8013dcc:	2201      	movs	r2, #1
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	409a      	lsls	r2, r3
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2200      	movs	r2, #0
 8013de4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2200      	movs	r2, #0
 8013dec:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8013df6:	751a      	strb	r2, [r3, #20]
}
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	376c      	adds	r7, #108	@ 0x6c
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd90      	pop	{r4, r7, pc}
 8013e02:	bf00      	nop
 8013e04:	0802b4a0 	.word	0x0802b4a0

08013e08 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 f819 	bl	8013e48 <_ZN7Stepgen10makePulsesEv>
}
 8013e16:	bf00      	nop
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b082      	sub	sp, #8
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 f8a8 	bl	8013f7c <_ZN7Stepgen10stopPulsesEv>
}
 8013e2c:	bf00      	nop
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8013e34:	b480      	push	{r7}
 8013e36:	b083      	sub	sp, #12
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8013e3c:	bf00      	nop
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	461a      	mov	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8013e60:	4013      	ands	r3, r2
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	bf14      	ite	ne
 8013e66:	2301      	movne	r3, #1
 8013e68:	2300      	moveq	r3, #0
 8013e6a:	b2da      	uxtb	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8013e78:	f083 0301 	eor.w	r3, r3, #1
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d006      	beq.n	8013e90 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	3338      	adds	r3, #56	@ 0x38
 8013e86:	2101      	movs	r1, #1
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7f0 ff03 	bl	8004c94 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 8013e8e:	e072      	b.n	8013f76 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	3338      	adds	r3, #56	@ 0x38
 8013e94:	2100      	movs	r1, #0
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7f0 fefc 	bl	8004c94 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ea0:	681a      	ldr	r2, [r3, #0]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8013eae:	ee07 3a90 	vmov	s15, r3
 8013eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8013ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ec4:	ee17 2a90 	vmov	r2, s15
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8013ed4:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013ee2:	441a      	add	r2, r3
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8013ef0:	68fa      	ldr	r2, [r7, #12]
 8013ef2:	4053      	eors	r3, r2
 8013ef4:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013efa:	2201      	movs	r2, #1
 8013efc:	fa02 f303 	lsl.w	r3, r2, r3
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	4013      	ands	r3, r2
 8013f04:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	bfcc      	ite	gt
 8013f10:	2301      	movgt	r3, #1
 8013f12:	2300      	movle	r3, #0
 8013f14:	b2da      	uxtb	r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d029      	beq.n	8013f76 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8013f2e:	4619      	mov	r1, r3
 8013f30:	4610      	mov	r0, r2
 8013f32:	f7f0 feaf 	bl	8004c94 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	3378      	adds	r3, #120	@ 0x78
 8013f3a:	2101      	movs	r1, #1
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f0 fea9 	bl	8004c94 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 8013f4e:	2a00      	cmp	r2, #0
 8013f50:	d001      	beq.n	8013f56 <_ZN7Stepgen10makePulsesEv+0x10e>
 8013f52:	2201      	movs	r2, #1
 8013f54:	e001      	b.n	8013f5a <_ZN7Stepgen10makePulsesEv+0x112>
 8013f56:	f04f 32ff 	mov.w	r2, #4294967295
 8013f5a:	441a      	add	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8013f6c:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2201      	movs	r2, #1
 8013f72:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8013f76:	3710      	adds	r7, #16
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	3378      	adds	r3, #120	@ 0x78
 8013f88:	2100      	movs	r1, #0
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7f0 fe82 	bl	8004c94 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8013f98:	bf00      	nop
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08c      	sub	sp, #48	@ 0x30
 8013fa4:	af02      	add	r7, sp, #8
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8013fac:	68ba      	ldr	r2, [r7, #8]
 8013fae:	f107 0314 	add.w	r3, r7, #20
 8013fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8013fba:	f107 031c 	add.w	r3, r7, #28
 8013fbe:	6879      	ldr	r1, [r7, #4]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f000 f8c6 	bl	8014152 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8013fc6:	466a      	mov	r2, sp
 8013fc8:	f107 0320 	add.w	r3, r7, #32
 8013fcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013fd0:	e882 0003 	stmia.w	r2, {r0, r1}
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	f107 0214 	add.w	r2, r7, #20
 8013fda:	ca06      	ldmia	r2, {r1, r2}
 8013fdc:	68f8      	ldr	r0, [r7, #12]
 8013fde:	f7f3 fde6 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8013fe2:	68f8      	ldr	r0, [r7, #12]
 8013fe4:	3728      	adds	r7, #40	@ 0x28
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b08c      	sub	sp, #48	@ 0x30
 8013fee:	af02      	add	r7, sp, #8
 8013ff0:	60f8      	str	r0, [r7, #12]
 8013ff2:	60b9      	str	r1, [r7, #8]
 8013ff4:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8013ff6:	68ba      	ldr	r2, [r7, #8]
 8013ff8:	f107 0314 	add.w	r3, r7, #20
 8013ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014000:	e883 0003 	stmia.w	r3, {r0, r1}
 8014004:	f107 031c 	add.w	r3, r7, #28
 8014008:	6879      	ldr	r1, [r7, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f000 f8b4 	bl	8014178 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8014010:	466a      	mov	r2, sp
 8014012:	f107 0320 	add.w	r3, r7, #32
 8014016:	e893 0003 	ldmia.w	r3, {r0, r1}
 801401a:	e882 0003 	stmia.w	r2, {r0, r1}
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	f107 0214 	add.w	r2, r7, #20
 8014024:	ca06      	ldmia	r2, {r1, r2}
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	f7f3 fdc1 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801402c:	68f8      	ldr	r0, [r7, #12]
 801402e:	3728      	adds	r7, #40	@ 0x28
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8014034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014038:	b093      	sub	sp, #76	@ 0x4c
 801403a:	af08      	add	r7, sp, #32
 801403c:	6278      	str	r0, [r7, #36]	@ 0x24
 801403e:	6239      	str	r1, [r7, #32]
 8014040:	61fa      	str	r2, [r7, #28]
 8014042:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8014044:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8014048:	f014 fa8e 	bl	8028568 <_Znwj>
 801404c:	4603      	mov	r3, r0
 801404e:	4698      	mov	r8, r3
 8014050:	6a38      	ldr	r0, [r7, #32]
 8014052:	f7f8 fde7 	bl	800cc24 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8014056:	4603      	mov	r3, r0
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4699      	mov	r9, r3
 801405c:	69f8      	ldr	r0, [r7, #28]
 801405e:	f7fb fa1d 	bl	800f49c <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8014062:	4603      	mov	r3, r0
 8014064:	681e      	ldr	r6, [r3, #0]
 8014066:	69b8      	ldr	r0, [r7, #24]
 8014068:	f7fb fa0d 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801406c:	4603      	mov	r3, r0
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	617b      	str	r3, [r7, #20]
 8014072:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8014074:	f7fb fa07 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014078:	4603      	mov	r3, r0
 801407a:	681c      	ldr	r4, [r3, #0]
 801407c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801407e:	f7fb fa02 	bl	800f486 <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014082:	4603      	mov	r3, r0
 8014084:	681d      	ldr	r5, [r3, #0]
 8014086:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014088:	f7f8 fdd7 	bl	800cc3a <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801408c:	4603      	mov	r3, r0
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	613b      	str	r3, [r7, #16]
 8014092:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014094:	f000 f883 	bl	801419e <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8014098:	60f8      	str	r0, [r7, #12]
 801409a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801409c:	f000 f87f 	bl	801419e <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 80140a0:	60b8      	str	r0, [r7, #8]
 80140a2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80140a4:	f000 f886 	bl	80141b4 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 80140a8:	6078      	str	r0, [r7, #4]
 80140aa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80140ac:	f7fd f9b1 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80140b0:	4603      	mov	r3, r0
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	9306      	str	r3, [sp, #24]
 80140b6:	687a      	ldr	r2, [r7, #4]
 80140b8:	9205      	str	r2, [sp, #20]
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	9204      	str	r2, [sp, #16]
 80140be:	68fa      	ldr	r2, [r7, #12]
 80140c0:	9203      	str	r2, [sp, #12]
 80140c2:	693a      	ldr	r2, [r7, #16]
 80140c4:	9202      	str	r2, [sp, #8]
 80140c6:	9501      	str	r5, [sp, #4]
 80140c8:	9400      	str	r4, [sp, #0]
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	4632      	mov	r2, r6
 80140ce:	4649      	mov	r1, r9
 80140d0:	4640      	mov	r0, r8
 80140d2:	f7ff fdd3 	bl	8013c7c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 80140d6:	4641      	mov	r1, r8
 80140d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140da:	f000 f886 	bl	80141ea <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80140de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140e0:	372c      	adds	r7, #44	@ 0x2c
 80140e2:	46bd      	mov	sp, r7
 80140e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080140e8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80140e8:	b590      	push	{r4, r7, lr}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f000 f888 	bl	8014208 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80140f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00c      	beq.n	801411c <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 f88d 	bl	8014222 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8014108:	4604      	mov	r4, r0
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f000 f896 	bl	801423c <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 8014110:	4603      	mov	r3, r0
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	4619      	mov	r1, r3
 8014116:	4620      	mov	r0, r4
 8014118:	f000 f8cf 	bl	80142ba <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	2200      	movs	r2, #0
 8014120:	601a      	str	r2, [r3, #0]
      }
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	3714      	adds	r7, #20
 8014128:	46bd      	mov	sp, r7
 801412a:	bd90      	pop	{r4, r7, pc}

0801412c <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801412c:	b590      	push	{r4, r7, lr}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8014136:	687c      	ldr	r4, [r7, #4]
 8014138:	6838      	ldr	r0, [r7, #0]
 801413a:	f000 f8cf 	bl	80142dc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801413e:	4603      	mov	r3, r0
 8014140:	4619      	mov	r1, r3
 8014142:	4620      	mov	r0, r4
 8014144:	f000 f8d5 	bl	80142f2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	4618      	mov	r0, r3
 801414c:	370c      	adds	r7, #12
 801414e:	46bd      	mov	sp, r7
 8014150:	bd90      	pop	{r4, r7, pc}

08014152 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8014152:	b580      	push	{r7, lr}
 8014154:	b082      	sub	sp, #8
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801415c:	6838      	ldr	r0, [r7, #0]
 801415e:	f000 f900 	bl	8014362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8014162:	4602      	mov	r2, r0
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	4611      	mov	r1, r2
 8014168:	4618      	mov	r0, r3
 801416a:	f000 f905 	bl	8014378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 801416e:	bf00      	nop
}
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	3708      	adds	r7, #8
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}

08014178 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8014182:	6838      	ldr	r0, [r7, #0]
 8014184:	f000 f907 	bl	8014396 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8014188:	4602      	mov	r2, r0
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	4611      	mov	r1, r2
 801418e:	4618      	mov	r0, r3
 8014190:	f000 f90c 	bl	80143ac <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8014194:	bf00      	nop
}
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	3708      	adds	r7, #8
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}

0801419e <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801419e:	b480      	push	{r7}
 80141a0:	b083      	sub	sp, #12
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	4618      	mov	r0, r3
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80141b4:	b480      	push	{r7}
 80141b6:	b083      	sub	sp, #12
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	4618      	mov	r0, r3
 80141c0:	370c      	adds	r7, #12
 80141c2:	46bd      	mov	sp, r7
 80141c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c8:	4770      	bx	lr

080141ca <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b082      	sub	sp, #8
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
 80141d2:	6039      	str	r1, [r7, #0]
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f000 f8f5 	bl	80143ca <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	4618      	mov	r0, r3
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b082      	sub	sp, #8
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
 80141f2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6839      	ldr	r1, [r7, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ff ffe6 	bl	80141ca <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4618      	mov	r0, r3
 8014202:	3708      	adds	r7, #8
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4618      	mov	r0, r3
 8014214:	f000 f8ed 	bl	80143f2 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8014218:	4603      	mov	r3, r0
 801421a:	4618      	mov	r0, r3
 801421c:	3708      	adds	r7, #8
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}

08014222 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8014222:	b580      	push	{r7, lr}
 8014224:	b082      	sub	sp, #8
 8014226:	af00      	add	r7, sp, #0
 8014228:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	f000 f8ed 	bl	801440c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 8014232:	4603      	mov	r3, r0
 8014234:	4618      	mov	r0, r3
 8014236:	3708      	adds	r7, #8
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801423c:	b480      	push	{r7}
 801423e:	b083      	sub	sp, #12
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	4618      	mov	r0, r3
 8014248:	370c      	adds	r7, #12
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr
	...

08014254 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	4a0d      	ldr	r2, [pc, #52]	@ (8014294 <_ZN7StepgenD1Ev+0x40>)
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	601a      	str	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	33b8      	adds	r3, #184	@ 0xb8
 8014266:	4618      	mov	r0, r3
 8014268:	f7fb fa33 	bl	800f6d2 <_ZN3PinD1Ev>
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	3378      	adds	r3, #120	@ 0x78
 8014270:	4618      	mov	r0, r3
 8014272:	f7fb fa2e 	bl	800f6d2 <_ZN3PinD1Ev>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	3338      	adds	r3, #56	@ 0x38
 801427a:	4618      	mov	r0, r3
 801427c:	f7fb fa29 	bl	800f6d2 <_ZN3PinD1Ev>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	4618      	mov	r0, r3
 8014284:	f7fd fd54 	bl	8011d30 <_ZN6ModuleD1Ev>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	4618      	mov	r0, r3
 801428c:	3708      	adds	r7, #8
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	0802b4a0 	.word	0x0802b4a0

08014298 <_ZN7StepgenD0Ev>:
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7ff ffd7 	bl	8014254 <_ZN7StepgenD1Ev>
 80142a6:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f014 f94b 	bl	8028546 <_ZdlPvj>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	4618      	mov	r0, r3
 80142b4:	3708      	adds	r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b082      	sub	sp, #8
 80142be:	af00      	add	r7, sp, #0
 80142c0:	6078      	str	r0, [r7, #4]
 80142c2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d004      	beq.n	80142d4 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	3204      	adds	r2, #4
 80142ce:	6812      	ldr	r2, [r2, #0]
 80142d0:	4618      	mov	r0, r3
 80142d2:	4790      	blx	r2
      }
 80142d4:	bf00      	nop
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80142dc:	b480      	push	{r7}
 80142de:	b083      	sub	sp, #12
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	4618      	mov	r0, r3
 80142e8:	370c      	adds	r7, #12
 80142ea:	46bd      	mov	sp, r7
 80142ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f0:	4770      	bx	lr

080142f2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b084      	sub	sp, #16
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
 80142fa:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80142fc:	6838      	ldr	r0, [r7, #0]
 80142fe:	f000 f892 	bl	8014426 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8014302:	4602      	mov	r2, r0
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	601a      	str	r2, [r3, #0]
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	3304      	adds	r3, #4
 801430c:	4618      	mov	r0, r3
 801430e:	f7f8 fecf 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8014312:	6838      	ldr	r0, [r7, #0]
 8014314:	f000 f887 	bl	8014426 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8014318:	4603      	mov	r3, r0
 801431a:	4618      	mov	r0, r3
 801431c:	f000 f890 	bl	8014440 <_ZSt12__to_addressI7StepgenEPT_S2_>
 8014320:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8014322:	6838      	ldr	r0, [r7, #0]
 8014324:	f7ff ffda 	bl	80142dc <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8014328:	4602      	mov	r2, r0
 801432a:	f107 0308 	add.w	r3, r7, #8
 801432e:	4611      	mov	r1, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f000 f890 	bl	8014456 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	3304      	adds	r3, #4
 801433a:	f107 0208 	add.w	r2, r7, #8
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f7fb fab3 	bl	800f8ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8014346:	f107 0308 	add.w	r3, r7, #8
 801434a:	4618      	mov	r0, r3
 801434c:	f7f7 fcb3 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8014350:	68f9      	ldr	r1, [r7, #12]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 f8c1 	bl	80144da <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	4618      	mov	r0, r3
 801435c:	3710      	adds	r7, #16
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8014362:	b480      	push	{r7}
 8014364:	b083      	sub	sp, #12
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801436a:	687b      	ldr	r3, [r7, #4]
}
 801436c:	4618      	mov	r0, r3
 801436e:	370c      	adds	r7, #12
 8014370:	46bd      	mov	sp, r7
 8014372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014376:	4770      	bx	lr

08014378 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8014382:	2301      	movs	r3, #1
 8014384:	220c      	movs	r2, #12
 8014386:	6839      	ldr	r1, [r7, #0]
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7f0 fe8b 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8014396:	b480      	push	{r7}
 8014398:	b083      	sub	sp, #12
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801439e:	687b      	ldr	r3, [r7, #4]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80143b6:	2301      	movs	r3, #1
 80143b8:	220d      	movs	r2, #13
 80143ba:	6839      	ldr	r1, [r7, #0]
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f7f0 fe71 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	3708      	adds	r7, #8
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}

080143ca <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80143ca:	b590      	push	{r4, r7, lr}
 80143cc:	b083      	sub	sp, #12
 80143ce:	af00      	add	r7, sp, #0
 80143d0:	6078      	str	r0, [r7, #4]
 80143d2:	6039      	str	r1, [r7, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f000 f88a 	bl	80144f0 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80143dc:	683c      	ldr	r4, [r7, #0]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7ff ff12 	bl	8014208 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80143e4:	4603      	mov	r3, r0
 80143e6:	601c      	str	r4, [r3, #0]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4618      	mov	r0, r3
 80143ec:	370c      	adds	r7, #12
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd90      	pop	{r4, r7, pc}

080143f2 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b082      	sub	sp, #8
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4618      	mov	r0, r3
 80143fe:	f000 f884 	bl	801450a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8014402:	4603      	mov	r3, r0
 8014404:	4618      	mov	r0, r3
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	4618      	mov	r0, r3
 8014418:	f000 f883 	bl	8014522 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801441c:	4603      	mov	r3, r0
 801441e:	4618      	mov	r0, r3
 8014420:	3708      	adds	r7, #8
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}

08014426 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8014426:	b580      	push	{r7, lr}
 8014428:	b082      	sub	sp, #8
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	4618      	mov	r0, r3
 8014432:	f000 f882 	bl	801453a <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014436:	4603      	mov	r3, r0
 8014438:	4618      	mov	r0, r3
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
      return __ptr;
 8014448:	687b      	ldr	r3, [r7, #4]
    }
 801444a:	4618      	mov	r0, r3
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8014456:	b580      	push	{r7, lr}
 8014458:	b086      	sub	sp, #24
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
 801445e:	6039      	str	r1, [r7, #0]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8014466:	6838      	ldr	r0, [r7, #0]
 8014468:	f7ff ffdd 	bl	8014426 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 801446c:	4603      	mov	r3, r0
 801446e:	2b00      	cmp	r3, #0
 8014470:	bf0c      	ite	eq
 8014472:	2301      	moveq	r3, #1
 8014474:	2300      	movne	r3, #0
 8014476:	b2db      	uxtb	r3, r3
 8014478:	2b00      	cmp	r3, #0
 801447a:	d128      	bne.n	80144ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 801447c:	f107 030c 	add.w	r3, r7, #12
 8014480:	4618      	mov	r0, r3
 8014482:	f000 f868 	bl	8014556 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8014486:	f107 030c 	add.w	r3, r7, #12
 801448a:	2101      	movs	r1, #1
 801448c:	4618      	mov	r0, r3
 801448e:	f000 f87a 	bl	8014586 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8014492:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8014494:	6838      	ldr	r0, [r7, #0]
 8014496:	f000 f885 	bl	80145a4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 801449a:	4603      	mov	r3, r0
 801449c:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 801449e:	6838      	ldr	r0, [r7, #0]
 80144a0:	f7ff febf 	bl	8014222 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80144a4:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80144a6:	4618      	mov	r0, r3
 80144a8:	f000 f889 	bl	80145be <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80144ac:	4603      	mov	r3, r0
 80144ae:	f107 0210 	add.w	r2, r7, #16
 80144b2:	f107 000c 	add.w	r0, r7, #12
 80144b6:	6979      	ldr	r1, [r7, #20]
 80144b8:	f000 f88c 	bl	80145d4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	697a      	ldr	r2, [r7, #20]
 80144c0:	601a      	str	r2, [r3, #0]
	}
 80144c2:	f107 030c 	add.w	r3, r7, #12
 80144c6:	4618      	mov	r0, r3
 80144c8:	f000 f851 	bl	801456e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80144cc:	e000      	b.n	80144d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80144ce:	bf00      	nop
	}
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	4618      	mov	r0, r3
 80144d4:	3718      	adds	r7, #24
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}

080144da <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80144da:	b480      	push	{r7}
 80144dc:	b083      	sub	sp, #12
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
 80144e2:	6039      	str	r1, [r7, #0]
	{ }
 80144e4:	bf00      	nop
 80144e6:	370c      	adds	r7, #12
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f000 f882 	bl	8014604 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	4618      	mov	r0, r3
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801450a:	b580      	push	{r7, lr}
 801450c:	b082      	sub	sp, #8
 801450e:	af00      	add	r7, sp, #0
 8014510:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f886 	bl	8014624 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 8014518:	4603      	mov	r3, r0
 801451a:	4618      	mov	r0, r3
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}

08014522 <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8014522:	b580      	push	{r7, lr}
 8014524:	b082      	sub	sp, #8
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f000 f887 	bl	801463e <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8014530:	4603      	mov	r3, r0
 8014532:	4618      	mov	r0, r3
 8014534:	3708      	adds	r7, #8
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 801453a:	b580      	push	{r7, lr}
 801453c:	b082      	sub	sp, #8
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	4618      	mov	r0, r3
 8014546:	f000 f886 	bl	8014656 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 801454a:	4603      	mov	r3, r0
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 f886 	bl	8014670 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	4618      	mov	r0, r3
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801456e:	b580      	push	{r7, lr}
 8014570:	b082      	sub	sp, #8
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 f885 	bl	8014686 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	4618      	mov	r0, r3
 8014580:	3708      	adds	r7, #8
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}

08014586 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8014586:	b580      	push	{r7, lr}
 8014588:	b082      	sub	sp, #8
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
 801458e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8014590:	2200      	movs	r2, #0
 8014592:	6839      	ldr	r1, [r7, #0]
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f000 f881 	bl	801469c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 801459a:	4603      	mov	r3, r0
 801459c:	4618      	mov	r0, r3
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 f89e 	bl	80146f0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80145b4:	4603      	mov	r3, r0
 80145b6:	4618      	mov	r0, r3
 80145b8:	3708      	adds	r7, #8
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}

080145be <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80145be:	b480      	push	{r7}
 80145c0:	b083      	sub	sp, #12
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	4618      	mov	r0, r3
 80145ca:	370c      	adds	r7, #12
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80145d4:	b590      	push	{r4, r7, lr}
 80145d6:	b085      	sub	sp, #20
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f899 	bl	801471a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 80145e8:	4604      	mov	r4, r0
 80145ea:	6838      	ldr	r0, [r7, #0]
 80145ec:	f7ff ffe7 	bl	80145be <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80145f0:	4603      	mov	r3, r0
 80145f2:	4622      	mov	r2, r4
 80145f4:	68b9      	ldr	r1, [r7, #8]
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f000 f89a 	bl	8014730 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80145fc:	bf00      	nop
 80145fe:	3714      	adds	r7, #20
 8014600:	46bd      	mov	sp, r7
 8014602:	bd90      	pop	{r4, r7, pc}

08014604 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f000 f8ad 	bl	801476c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4618      	mov	r0, r3
 8014616:	f000 f8b5 	bl	8014784 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	4618      	mov	r0, r3
 8014630:	f000 f8b6 	bl	80147a0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8014634:	4603      	mov	r3, r0
 8014636:	4618      	mov	r0, r3
 8014638:	3708      	adds	r7, #8
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801463e:	b580      	push	{r7, lr}
 8014640:	b082      	sub	sp, #8
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 f8b5 	bl	80147b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 801464c:	4603      	mov	r3, r0
 801464e:	4618      	mov	r0, r3
 8014650:	3708      	adds	r7, #8
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8014656:	b580      	push	{r7, lr}
 8014658:	b082      	sub	sp, #8
 801465a:	af00      	add	r7, sp, #0
 801465c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4618      	mov	r0, r3
 8014662:	f000 f8b4 	bl	80147ce <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8014666:	4603      	mov	r3, r0
 8014668:	4618      	mov	r0, r3
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	4618      	mov	r0, r3
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014686:	b480      	push	{r7}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	4618      	mov	r0, r3
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f000 f89c 	bl	80147e6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80146ae:	4602      	mov	r2, r0
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	4293      	cmp	r3, r2
 80146b4:	bf8c      	ite	hi
 80146b6:	2301      	movhi	r3, #1
 80146b8:	2300      	movls	r3, #0
 80146ba:	b2db      	uxtb	r3, r3
 80146bc:	2b00      	cmp	r3, #0
 80146be:	bf14      	ite	ne
 80146c0:	2301      	movne	r3, #1
 80146c2:	2300      	moveq	r3, #0
 80146c4:	b2db      	uxtb	r3, r3
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d007      	beq.n	80146da <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80146d0:	d301      	bcc.n	80146d6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80146d2:	f013 ff5f 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80146d6:	f013 ff5a 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	011b      	lsls	r3, r3, #4
 80146de:	4618      	mov	r0, r3
 80146e0:	f013 ff42 	bl	8028568 <_Znwj>
 80146e4:	4603      	mov	r3, r0
 80146e6:	bf00      	nop
      }
 80146e8:	4618      	mov	r0, r3
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff fd85 	bl	8014208 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80146fe:	4603      	mov	r3, r0
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7ff fd7f 	bl	8014208 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801470a:	4603      	mov	r3, r0
 801470c:	2200      	movs	r2, #0
 801470e:	601a      	str	r2, [r3, #0]
	return __p;
 8014710:	68fb      	ldr	r3, [r7, #12]
      }
 8014712:	4618      	mov	r0, r3
 8014714:	3710      	adds	r7, #16
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801471a:	b480      	push	{r7}
 801471c:	b083      	sub	sp, #12
 801471e:	af00      	add	r7, sp, #0
 8014720:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr

08014730 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	607a      	str	r2, [r7, #4]
 801473c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	4619      	mov	r1, r3
 8014742:	2010      	movs	r0, #16
 8014744:	f7f6 f880 	bl	800a848 <_ZnwjPv>
 8014748:	4605      	mov	r5, r0
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f7ff ffe5 	bl	801471a <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8014750:	4603      	mov	r3, r0
 8014752:	681c      	ldr	r4, [r3, #0]
 8014754:	6838      	ldr	r0, [r7, #0]
 8014756:	f7ff ff32 	bl	80145be <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 801475a:	4632      	mov	r2, r6
 801475c:	4621      	mov	r1, r4
 801475e:	4628      	mov	r0, r5
 8014760:	f000 f84e 	bl	8014800 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8014764:	bf00      	nop
 8014766:	3714      	adds	r7, #20
 8014768:	46bd      	mov	sp, r7
 801476a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801476c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 f865 	bl	8014844 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	4618      	mov	r0, r3
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	4618      	mov	r0, r3
 8014796:	370c      	adds	r7, #12
 8014798:	46bd      	mov	sp, r7
 801479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479e:	4770      	bx	lr

080147a0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	4618      	mov	r0, r3
 80147ac:	370c      	adds	r7, #12
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr

080147b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b082      	sub	sp, #8
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 f84b 	bl	801485a <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 80147c4:	4603      	mov	r3, r0
 80147c6:	4618      	mov	r0, r3
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}

080147ce <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80147ce:	b580      	push	{r7, lr}
 80147d0:	b082      	sub	sp, #8
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f000 f84a 	bl	8014870 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 80147dc:	4603      	mov	r3, r0
 80147de:	4618      	mov	r0, r3
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}

080147e6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80147e6:	b480      	push	{r7}
 80147e8:	b083      	sub	sp, #12
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80147ee:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 80147f2:	4618      	mov	r0, r3
 80147f4:	370c      	adds	r7, #12
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr
	...

08014800 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8014800:	b5b0      	push	{r4, r5, r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	4618      	mov	r0, r3
 8014810:	f7f9 fcc2 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8014814:	4a0a      	ldr	r2, [pc, #40]	@ (8014840 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	601a      	str	r2, [r3, #0]
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f103 040c 	add.w	r4, r3, #12
 8014820:	1d3b      	adds	r3, r7, #4
 8014822:	4618      	mov	r0, r3
 8014824:	f000 f831 	bl	801488a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014828:	f107 0314 	add.w	r3, r7, #20
 801482c:	462a      	mov	r2, r5
 801482e:	68b9      	ldr	r1, [r7, #8]
 8014830:	4620      	mov	r0, r4
 8014832:	f000 f835 	bl	80148a0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	4618      	mov	r0, r3
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bdb0      	pop	{r4, r5, r7, pc}
 8014840:	0802b484 	.word	0x0802b484

08014844 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 8014844:	b480      	push	{r7}
 8014846:	b083      	sub	sp, #12
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	370c      	adds	r7, #12
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr

0801485a <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801485a:	b480      	push	{r7}
 801485c:	b083      	sub	sp, #12
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	4618      	mov	r0, r3
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	4618      	mov	r0, r3
 801487c:	f000 f82c 	bl	80148d8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 8014880:	4603      	mov	r3, r0
 8014882:	4618      	mov	r0, r3
 8014884:	3708      	adds	r7, #8
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}

0801488a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801488a:	b480      	push	{r7}
 801488c:	b083      	sub	sp, #12
 801488e:	af00      	add	r7, sp, #0
 8014890:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	4618      	mov	r0, r3
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	713a      	strb	r2, [r7, #4]
 80148ac:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80148ae:	1d3b      	adds	r3, r7, #4
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7ff ffea 	bl	801488a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80148b6:	4603      	mov	r3, r0
 80148b8:	4619      	mov	r1, r3
 80148ba:	68f8      	ldr	r0, [r7, #12]
 80148bc:	f000 f817 	bl	80148ee <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 80148c0:	6839      	ldr	r1, [r7, #0]
 80148c2:	68f8      	ldr	r0, [r7, #12]
 80148c4:	f7fb fd52 	bl	801036c <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	68ba      	ldr	r2, [r7, #8]
 80148cc:	601a      	str	r2, [r3, #0]
	{ }
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	4618      	mov	r0, r3
 80148d2:	3710      	adds	r7, #16
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80148d8:	b480      	push	{r7}
 80148da:	b083      	sub	sp, #12
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	4618      	mov	r0, r3
 80148e4:	370c      	adds	r7, #12
 80148e6:	46bd      	mov	sp, r7
 80148e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ec:	4770      	bx	lr

080148ee <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 80148ee:	b580      	push	{r7, lr}
 80148f0:	b082      	sub	sp, #8
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	6078      	str	r0, [r7, #4]
 80148f6:	6039      	str	r1, [r7, #0]
 80148f8:	6838      	ldr	r0, [r7, #0]
 80148fa:	f7ff ffc6 	bl	801488a <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	4a05      	ldr	r2, [pc, #20]	@ (8014928 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	601a      	str	r2, [r3, #0]
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	4618      	mov	r0, r3
 801491a:	f7f7 fdff 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	0802b484 	.word	0x0802b484

0801492c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f7ff ffe7 	bl	8014908 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801493a:	2110      	movs	r1, #16
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f013 fe02 	bl	8028546 <_ZdlPvj>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4618      	mov	r0, r3
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	330c      	adds	r3, #12
 8014958:	4618      	mov	r0, r3
 801495a:	f000 f83f 	bl	80149dc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 801495e:	4602      	mov	r2, r0
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	4619      	mov	r1, r3
 8014966:	4610      	mov	r0, r2
 8014968:	f7ff fca7 	bl	80142ba <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 801496c:	bf00      	nop
 801496e:	3708      	adds	r7, #8
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8014974:	b580      	push	{r7, lr}
 8014976:	b086      	sub	sp, #24
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	330c      	adds	r3, #12
 8014980:	4618      	mov	r0, r3
 8014982:	f000 f837 	bl	80149f4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8014986:	4602      	mov	r2, r0
 8014988:	f107 0314 	add.w	r3, r7, #20
 801498c:	4611      	mov	r1, r2
 801498e:	4618      	mov	r0, r3
 8014990:	f000 f83c 	bl	8014a0c <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8014994:	f107 0114 	add.w	r1, r7, #20
 8014998:	f107 030c 	add.w	r3, r7, #12
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	4618      	mov	r0, r3
 80149a0:	f000 f841 	bl	8014a26 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7ff ffaf 	bl	8014908 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80149aa:	f107 030c 	add.w	r3, r7, #12
 80149ae:	4618      	mov	r0, r3
 80149b0:	f000 f84d 	bl	8014a4e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80149b4:	f107 0314 	add.w	r3, r7, #20
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7ff fdd8 	bl	801456e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80149be:	3718      	adds	r7, #24
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
        return nullptr;
 80149ce:	2300      	movs	r3, #0
      }
 80149d0:	4618      	mov	r0, r3
 80149d2:	370c      	adds	r7, #12
 80149d4:	46bd      	mov	sp, r7
 80149d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149da:	4770      	bx	lr

080149dc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f847 	bl	8014a78 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 80149ea:	4603      	mov	r3, r0
 80149ec:	4618      	mov	r0, r3
 80149ee:	3708      	adds	r7, #8
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7fb fd84 	bl	801050a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8014a02:	4603      	mov	r3, r0
 8014a04:	4618      	mov	r0, r3
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f7ff fe2a 	bl	8014670 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014a26:	b580      	push	{r7, lr}
 8014a28:	b084      	sub	sp, #16
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	60f8      	str	r0, [r7, #12]
 8014a2e:	60b9      	str	r1, [r7, #8]
 8014a30:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014a32:	68b8      	ldr	r0, [r7, #8]
 8014a34:	f000 f82b 	bl	8014a8e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	605a      	str	r2, [r3, #4]
      { }
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	4618      	mov	r0, r3
 8014a48:	3710      	adds	r7, #16
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8014a4e:	b580      	push	{r7, lr}
 8014a50:	b082      	sub	sp, #8
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d007      	beq.n	8014a6e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6818      	ldr	r0, [r3, #0]
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	2201      	movs	r2, #1
 8014a68:	4619      	mov	r1, r3
 8014a6a:	f000 f81b 	bl	8014aa4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4618      	mov	r0, r3
 8014a72:	3708      	adds	r7, #8
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	370c      	adds	r7, #12
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr

08014a8e <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014a8e:	b480      	push	{r7}
 8014a90:	b083      	sub	sp, #12
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	60b9      	str	r1, [r7, #8]
 8014aae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014ab0:	687a      	ldr	r2, [r7, #4]
 8014ab2:	68b9      	ldr	r1, [r7, #8]
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f000 f804 	bl	8014ac2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8014aba:	bf00      	nop
 8014abc:	3710      	adds	r7, #16
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}

08014ac2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8014ac2:	b580      	push	{r7, lr}
 8014ac4:	b084      	sub	sp, #16
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	60f8      	str	r0, [r7, #12]
 8014aca:	60b9      	str	r1, [r7, #8]
 8014acc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	011b      	lsls	r3, r3, #4
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	68b8      	ldr	r0, [r7, #8]
 8014ad6:	f013 fd36 	bl	8028546 <_ZdlPvj>
      }
 8014ada:	3710      	adds	r7, #16
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <_ZSt20__throw_bad_weak_ptrv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	af00      	add	r7, sp, #0
 8014ae4:	f014 f9a8 	bl	8028e38 <abort>

08014ae8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>:
    {
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
      if (_M_use_count == 0)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d101      	bne.n	8014afc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x14>
	return false;
 8014af8:	2300      	movs	r3, #0
 8014afa:	e005      	b.n	8014b08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x20>
      ++_M_use_count;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	1c5a      	adds	r2, r3, #1
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	605a      	str	r2, [r3, #4]
      return true;
 8014b06:	2301      	movs	r3, #1
    }
 8014b08:	4618      	mov	r0, r3
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>:
    { ++_M_weak_count; }
 8014b14:	b480      	push	{r7}
 8014b16:	b083      	sub	sp, #12
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	689b      	ldr	r3, [r3, #8]
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	609a      	str	r2, [r3, #8]
 8014b26:	bf00      	nop
 8014b28:	370c      	adds	r7, #12
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b30:	4770      	bx	lr

08014b32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>:
    {
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b082      	sub	sp, #8
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
      if (--_M_weak_count == 0)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	1e5a      	subs	r2, r3, #1
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	609a      	str	r2, [r3, #8]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	689b      	ldr	r3, [r3, #8]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	bf0c      	ite	eq
 8014b4c:	2301      	moveq	r3, #1
 8014b4e:	2300      	movne	r3, #0
 8014b50:	b2db      	uxtb	r3, r3
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d005      	beq.n	8014b62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv+0x30>
        _M_destroy();
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	330c      	adds	r3, #12
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	4798      	blx	r3
    }
 8014b62:	bf00      	nop
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
    { return _M_use_count; }
 8014b6a:	b480      	push	{r7}
 8014b6c:	b083      	sub	sp, #12
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	4618      	mov	r0, r3
 8014b78:	370c      	adds	r7, #12
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr

08014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 8014b82:	b480      	push	{r7}
 8014b84:	af00      	add	r7, sp, #0
    return T(-1);
 8014b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr

08014b94 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>:
  size_t size() const {
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
    return str_.size();
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7f0 faa8 	bl	80050f4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8014ba4:	4603      	mov	r3, r0
  }
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>:
  explicit operator bool() const {
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
    return str_.data() != 0;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7f0 faa7 	bl	800510c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	bf14      	ite	ne
 8014bc4:	2301      	movne	r3, #1
 8014bc6:	2300      	moveq	r3, #0
 8014bc8:	b2db      	uxtb	r3, r3
  }
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>:
  SlotId head() const {
 8014bd2:	b480      	push	{r7}
 8014bd4:	b083      	sub	sp, #12
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
    return head_;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	881b      	ldrh	r3, [r3, #0]
  }
 8014bde:	4618      	mov	r0, r3
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr

08014bea <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>:
  static char escapeChar(char c) {
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8014bf4:	2001      	movs	r0, #1
 8014bf6:	f7f1 fa1f 	bl	8006038 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8014bfa:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8014bfc:	e002      	b.n	8014c04 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	3302      	adds	r3, #2
 8014c02:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	781b      	ldrb	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d005      	beq.n	8014c18 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	3301      	adds	r3, #1
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	79fa      	ldrb	r2, [r7, #7]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d1f2      	bne.n	8014bfe <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x14>
    return p[0];
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	781b      	ldrb	r3, [r3, #0]
  }
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3710      	adds	r7, #16
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d00a      	beq.n	8014c48 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x24>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	3b01      	subs	r3, #1
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7ff fff4 	bl	8014c24 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014c3c:	4602      	mov	r2, r0
 8014c3e:	4613      	mov	r3, r2
 8014c40:	009b      	lsls	r3, r3, #2
 8014c42:	4413      	add	r3, r2
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	e000      	b.n	8014c4a <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x26>
 8014c48:	2301      	movs	r3, #1
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
	...

08014c54 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b08c      	sub	sp, #48	@ 0x30
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	ed87 0b00 	vstr	d0, [r7]
 8014c60:	460b      	mov	r3, r1
 8014c62:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8014c64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7ff ffdb 	bl	8014c24 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014c6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8014c70:	463b      	mov	r3, r7
 8014c72:	4618      	mov	r0, r3
 8014c74:	f000 fbe0 	bl	8015438 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8014c7c:	ed97 7b00 	vldr	d7, [r7]
 8014c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014c84:	ee17 3a90 	vmov	r3, s15
 8014c88:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c8c:	623b      	str	r3, [r7, #32]
 8014c8e:	e011      	b.n	8014cb4 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x60>
    maxDecimalPart /= 10;
 8014c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c92:	4a44      	ldr	r2, [pc, #272]	@ (8014da4 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014c94:	fba2 2303 	umull	r2, r3, r2, r3
 8014c98:	08db      	lsrs	r3, r3, #3
 8014c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8014c9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014ca8:	6a3b      	ldr	r3, [r7, #32]
 8014caa:	4a3e      	ldr	r2, [pc, #248]	@ (8014da4 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014cac:	fba2 2303 	umull	r2, r3, r2, r3
 8014cb0:	08db      	lsrs	r3, r3, #3
 8014cb2:	623b      	str	r3, [r7, #32]
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	2b09      	cmp	r3, #9
 8014cb8:	d8ea      	bhi.n	8014c90 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x3c>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8014cba:	ed97 6b00 	vldr	d6, [r7]
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc0:	ee07 3a90 	vmov	s15, r3
 8014cc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014cc8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cce:	ee07 3a90 	vmov	s15, r3
 8014cd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  JsonFloat remainder =
 8014cd6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014cda:	ed87 7b04 	vstr	d7, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8014cde:	ed97 7b04 	vldr	d7, [r7, #16]
 8014ce2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014ce6:	ee17 3a90 	vmov	r3, s15
 8014cea:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	ee07 3a90 	vmov	s15, r3
 8014cf2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014cf6:	ed97 6b04 	vldr	d6, [r7, #16]
 8014cfa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014cfe:	ed87 7b04 	vstr	d7, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8014d02:	ed97 7b04 	vldr	d7, [r7, #16]
 8014d06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014d0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014d0e:	ee17 2a90 	vmov	r2, s15
 8014d12:	69fb      	ldr	r3, [r7, #28]
 8014d14:	4413      	add	r3, r2
 8014d16:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8014d18:	69fa      	ldr	r2, [r7, #28]
 8014d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d320      	bcc.n	8014d62 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal = 0;
 8014d20:	2300      	movs	r3, #0
 8014d22:	61fb      	str	r3, [r7, #28]
    integral++;
 8014d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d26:	3301      	adds	r3, #1
 8014d28:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8014d2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d017      	beq.n	8014d62 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
 8014d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d34:	2b09      	cmp	r3, #9
 8014d36:	d914      	bls.n	8014d62 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
      exponent++;
 8014d38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	3301      	adds	r3, #1
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8014d44:	2301      	movs	r3, #1
 8014d46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014d48:	e00b      	b.n	8014d62 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal /= 10;
 8014d4a:	69fb      	ldr	r3, [r7, #28]
 8014d4c:	4a15      	ldr	r2, [pc, #84]	@ (8014da4 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8014d52:	08db      	lsrs	r3, r3, #3
 8014d54:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8014d56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	3b01      	subs	r3, #1
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014d62:	69f9      	ldr	r1, [r7, #28]
 8014d64:	4b0f      	ldr	r3, [pc, #60]	@ (8014da4 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014d66:	fba3 2301 	umull	r2, r3, r3, r1
 8014d6a:	08da      	lsrs	r2, r3, #3
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	4413      	add	r3, r2
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	1aca      	subs	r2, r1, r3
 8014d76:	2a00      	cmp	r2, #0
 8014d78:	d103      	bne.n	8014d82 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x12e>
 8014d7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	dce3      	bgt.n	8014d4a <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0xf6>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d86:	601a      	str	r2, [r3, #0]
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	69fa      	ldr	r2, [r7, #28]
 8014d8c:	605a      	str	r2, [r3, #4]
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8014d92:	811a      	strh	r2, [r3, #8]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	7afa      	ldrb	r2, [r7, #11]
 8014d98:	729a      	strb	r2, [r3, #10]
}
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	3730      	adds	r7, #48	@ 0x30
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	cccccccd 	.word	0xcccccccd

08014da8 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(JsonString src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b086      	sub	sp, #24
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	1d3b      	adds	r3, r7, #4
 8014db2:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8014db6:	1d3b      	adds	r3, r7, #4
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7f2 fab9 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014dbe:	6178      	str	r0, [r7, #20]
    return data ? data->asString() : JsonString();
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d005      	beq.n	8014dd2 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	6979      	ldr	r1, [r7, #20]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7f0 fb5a 	bl	8005484 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8014dd0:	e002      	b.n	8014dd8 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x30>
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7f0 fa10 	bl	80051f8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
  }
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	3718      	adds	r7, #24
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8014de0:	b590      	push	{r4, r7, lr}
 8014de2:	b089      	sub	sp, #36	@ 0x24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	f107 0308 	add.w	r3, r7, #8
 8014dea:	e883 0003 	stmia.w	r3, {r0, r1}
 8014dee:	607a      	str	r2, [r7, #4]
  JsonString str = src.as<JsonString>();
 8014df0:	f107 0314 	add.w	r3, r7, #20
 8014df4:	f107 0208 	add.w	r2, r7, #8
 8014df8:	4611      	mov	r1, r2
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f000 fbe8 	bl	80155d0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>
  if (str)
 8014e00:	f107 0314 	add.w	r3, r7, #20
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7ff fed2 	bl	8014bae <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d011      	beq.n	8014e34 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    dst.assign(str.c_str(), str.size());
 8014e10:	f107 0314 	add.w	r3, r7, #20
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7f0 fa19 	bl	800524c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	f107 0314 	add.w	r3, r7, #20
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ff feb7 	bl	8014b94 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8014e26:	4603      	mov	r3, r0
 8014e28:	461a      	mov	r2, r3
 8014e2a:	4621      	mov	r1, r4
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f013 fe3b 	bl	8028aa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 8014e32:	e006      	b.n	8014e42 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
    serializeJson(src, dst);
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	f107 0308 	add.w	r3, r7, #8
 8014e3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014e3e:	f000 fbd7 	bl	80155f0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>
}
 8014e42:	bf00      	nop
 8014e44:	3724      	adds	r7, #36	@ 0x24
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd90      	pop	{r4, r7, pc}

08014e4a <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b082      	sub	sp, #8
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	6078      	str	r0, [r7, #4]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	3324      	adds	r3, #36	@ 0x24
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7f6 ff3f 	bl	800bcda <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
	...

08014e68 <_ZN14TMC2208StepperD1Ev>:
		INIT_REGISTER(ENC_DEVIATION){.sr=0};

		static constexpr float default_RS = 0.075;
};

class TMC2208Stepper : public TMCStepper {
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	4a08      	ldr	r2, [pc, #32]	@ (8014e94 <_ZN14TMC2208StepperD1Ev+0x2c>)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	334c      	adds	r3, #76	@ 0x4c
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f013 fc6f 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	3334      	adds	r3, #52	@ 0x34
 8014e84:	4618      	mov	r0, r3
 8014e86:	f013 fc6a 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3708      	adds	r7, #8
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	0802b090 	.word	0x0802b090

08014e98 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b090      	sub	sp, #64	@ 0x40
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	607a      	str	r2, [r7, #4]
 8014ea4:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 8014ea8:	f107 0310 	add.w	r3, r7, #16
 8014eac:	68b9      	ldr	r1, [r7, #8]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f013 fe65 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014eb8:	6879      	ldr	r1, [r7, #4]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f013 fe5f 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014ec0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8014ec4:	f107 0110 	add.w	r1, r7, #16
 8014ec8:	2300      	movs	r3, #0
 8014eca:	ed97 0a00 	vldr	s0, [r7]
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7ee fdb8 	bl	8003a44 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8014ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f013 fc40 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014ede:	f107 0310 	add.w	r3, r7, #16
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f013 fc3b 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	4618      	mov	r0, r3
 8014eec:	3740      	adds	r7, #64	@ 0x40
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
	...

08014ef4 <_ZN3TMCC1EP6Remoraf>:
	Remora* 	instance;
	float       Rsense;

public:

	TMC(Remora* _instance, float _Rsense) : instance(_instance), Rsense(_Rsense) {}
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	ed87 0a01 	vstr	s0, [r7, #4]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7fc fef7 	bl	8011cf8 <_ZN6ModuleC1Ev>
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	3318      	adds	r3, #24
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f000 fbaa 	bl	8015668 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>
 8014f14:	4a06      	ldr	r2, [pc, #24]	@ (8014f30 <_ZN3TMCC1EP6Remoraf+0x3c>)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	68ba      	ldr	r2, [r7, #8]
 8014f1e:	621a      	str	r2, [r3, #32]
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3710      	adds	r7, #16
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	0802b504 	.word	0x0802b504

08014f34 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3304      	adds	r3, #4
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7f6 feb8 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <_ZNSt10shared_ptrI3TMCED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff ffea 	bl	8014f34 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	4618      	mov	r0, r3
 8014f64:	3708      	adds	r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b082      	sub	sp, #8
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	3304      	adds	r3, #4
 8014f76:	4618      	mov	r0, r3
 8014f78:	f7f6 fe9d 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3708      	adds	r7, #8
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}

08014f86 <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
 8014f86:	b580      	push	{r7, lr}
 8014f88:	b082      	sub	sp, #8
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff ffea 	bl	8014f6a <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 8014fa0:	b590      	push	{r4, r7, lr}
 8014fa2:	b0b9      	sub	sp, #228	@ 0xe4
 8014fa4:	af04      	add	r7, sp, #16
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
    printf("Creating TMC2208 module\n");
 8014fac:	484a      	ldr	r0, [pc, #296]	@ (80150d8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x138>)
 8014fae:	f014 f9f5 	bl	802939c <puts>

    const char* comment = config["Comment"];
 8014fb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014fb6:	4a49      	ldr	r2, [pc, #292]	@ (80150dc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x13c>)
 8014fb8:	68b9      	ldr	r1, [r7, #8]
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fd f91b 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014fc0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f7f2 fc83 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8014fca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    printf("Comment: %s\n", comment);
 8014fce:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8014fd2:	4843      	ldr	r0, [pc, #268]	@ (80150e0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x140>)
 8014fd4:	f014 f972 	bl	80292bc <iprintf>

    std::string RxPin = config["RX pin"];
 8014fd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014fdc:	4a41      	ldr	r2, [pc, #260]	@ (80150e4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x144>)
 8014fde:	68b9      	ldr	r1, [r7, #8]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7f2 fc50 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8014fe6:	f107 031c 	add.w	r3, r7, #28
 8014fea:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014fee:	4611      	mov	r1, r2
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f000 fb61 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8014ff6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8014ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80150e8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x148>)
 8014ffc:	68b9      	ldr	r1, [r7, #8]
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7f2 fc41 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015004:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015008:	4618      	mov	r0, r3
 801500a:	f000 fb63 	bl	80156d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 801500e:	eef0 7a40 	vmov.f32	s15, s0
 8015012:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t current = config["Current"];
 8015016:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801501a:	4a34      	ldr	r2, [pc, #208]	@ (80150ec <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x14c>)
 801501c:	68b9      	ldr	r1, [r7, #8]
 801501e:	4618      	mov	r0, r3
 8015020:	f7fd f8e9 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015024:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015028:	4618      	mov	r0, r3
 801502a:	f000 fb61 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801502e:	4603      	mov	r3, r0
 8015030:	82fb      	strh	r3, [r7, #22]
    uint16_t microsteps = config["Microsteps"];
 8015032:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015036:	4a2e      	ldr	r2, [pc, #184]	@ (80150f0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x150>)
 8015038:	68b9      	ldr	r1, [r7, #8]
 801503a:	4618      	mov	r0, r3
 801503c:	f7fa f8f9 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015040:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015044:	4618      	mov	r0, r3
 8015046:	f000 fb53 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801504a:	4603      	mov	r3, r0
 801504c:	82bb      	strh	r3, [r7, #20]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 801504e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8015052:	4a28      	ldr	r2, [pc, #160]	@ (80150f4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8015054:	68b9      	ldr	r1, [r7, #8]
 8015056:	4618      	mov	r0, r3
 8015058:	f7fe ffa2 	bl	8013fa0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801505c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8015060:	4618      	mov	r0, r3
 8015062:	f7f2 fc35 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8015066:	4603      	mov	r3, r0
 8015068:	4923      	ldr	r1, [pc, #140]	@ (80150f8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 801506a:	4618      	mov	r0, r3
 801506c:	f7eb f938 	bl	80002e0 <strcmp>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	bf0c      	ite	eq
 8015076:	2301      	moveq	r3, #1
 8015078:	2300      	movne	r3, #0
 801507a:	b2db      	uxtb	r3, r3
 801507c:	74fb      	strb	r3, [r7, #19]

    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 801507e:	f107 031c 	add.w	r3, r7, #28
 8015082:	4618      	mov	r0, r3
 8015084:	f7fc f975 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015088:	4604      	mov	r4, r0
 801508a:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 801508e:	f107 0116 	add.w	r1, r7, #22
 8015092:	f107 0218 	add.w	r2, r7, #24
 8015096:	1d3b      	adds	r3, r7, #4
 8015098:	9302      	str	r3, [sp, #8]
 801509a:	f107 0313 	add.w	r3, r7, #19
 801509e:	9301      	str	r3, [sp, #4]
 80150a0:	f107 0314 	add.w	r3, r7, #20
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	460b      	mov	r3, r1
 80150a8:	4621      	mov	r1, r4
 80150aa:	f000 fb2d 	bl	8015708 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>
 80150ae:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80150b2:	4619      	mov	r1, r3
 80150b4:	68f8      	ldr	r0, [r7, #12]
 80150b6:	f000 fb59 	bl	801576c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>
 80150ba:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80150be:	4618      	mov	r0, r3
 80150c0:	f7ff ff61 	bl	8014f86 <_ZNSt10shared_ptrI7TMC2208ED1Ev>
}
 80150c4:	f107 031c 	add.w	r3, r7, #28
 80150c8:	4618      	mov	r0, r3
 80150ca:	f013 fb48 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 80150ce:	bf00      	nop
}
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	37d4      	adds	r7, #212	@ 0xd4
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd90      	pop	{r4, r7, pc}
 80150d8:	0802aae4 	.word	0x0802aae4
 80150dc:	0802aafc 	.word	0x0802aafc
 80150e0:	0802ab04 	.word	0x0802ab04
 80150e4:	0802ab14 	.word	0x0802ab14
 80150e8:	0802ab1c 	.word	0x0802ab1c
 80150ec:	0802ab24 	.word	0x0802ab24
 80150f0:	0802ab2c 	.word	0x0802ab2c
 80150f4:	0802ab38 	.word	0x0802ab38
 80150f8:	0802ab48 	.word	0x0802ab48

080150fc <_ZN3TMCD1Ev>:
class TMC : public Module, public std::enable_shared_from_this<TMC>
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	4a08      	ldr	r2, [pc, #32]	@ (8015128 <_ZN3TMCD1Ev+0x2c>)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	601a      	str	r2, [r3, #0]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	3318      	adds	r3, #24
 801510e:	4618      	mov	r0, r3
 8015110:	f000 fab7 	bl	8015682 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	4618      	mov	r0, r3
 8015118:	f7fc fe0a 	bl	8011d30 <_ZN6ModuleD1Ev>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	4618      	mov	r0, r3
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	0802b504 	.word	0x0802b504

0801512c <_ZN3TMCD0Ev>:
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f7ff ffe1 	bl	80150fc <_ZN3TMCD1Ev>
 801513a:	2128      	movs	r1, #40	@ 0x28
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f013 fa02 	bl	8028546 <_ZdlPvj>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>:

TMC2208::TMC2208(std::string _rxtxPin, float _Rsense, uint16_t _mA, uint16_t _microsteps, bool _stealth, Remora* _instance)
 801514c:	b590      	push	{r4, r7, lr}
 801514e:	b085      	sub	sp, #20
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	ed87 0a01 	vstr	s0, [r7, #4]
 801515a:	4611      	mov	r1, r2
 801515c:	461a      	mov	r2, r3
 801515e:	460b      	mov	r3, r1
 8015160:	807b      	strh	r3, [r7, #2]
 8015162:	4613      	mov	r3, r2
 8015164:	803b      	strh	r3, [r7, #0]
    : TMC{_instance, _Rsense},  // Call base class constructor
      rxtxPin(std::move(_rxtxPin)),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	ed97 0a01 	vldr	s0, [r7, #4]
 801516c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801516e:	4618      	mov	r0, r3
 8015170:	f7ff fec0 	bl	8014ef4 <_ZN3TMCC1EP6Remoraf>
 8015174:	4a17      	ldr	r2, [pc, #92]	@ (80151d4 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora+0x88>)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8015180:	68b8      	ldr	r0, [r7, #8]
 8015182:	f7fc f8f6 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015186:	4603      	mov	r3, r0
 8015188:	4619      	mov	r1, r3
 801518a:	4620      	mov	r0, r4
 801518c:	f013 fac8 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      mA(_mA),
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	887a      	ldrh	r2, [r7, #2]
 8015194:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      microsteps(_microsteps),
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	883a      	ldrh	r2, [r7, #0]
 801519c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      stealth(_stealth),
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80151a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80151c2:	4623      	mov	r3, r4
 80151c4:	f000 fae5 	bl	8015792 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	4618      	mov	r0, r3
 80151cc:	3714      	adds	r7, #20
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd90      	pop	{r4, r7, pc}
 80151d2:	bf00      	nop
 80151d4:	0802b4e0 	.word	0x0802b4e0

080151d8 <_ZN7TMC22089configureEv>:


void TMC2208::configure()
{
 80151d8:	b590      	push	{r4, r7, lr}
 80151da:	b08b      	sub	sp, #44	@ 0x2c
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 80151e0:	4877      	ldr	r0, [pc, #476]	@ (80153c0 <_ZN7TMC22089configureEv+0x1e8>)
 80151e2:	f014 f8db 	bl	802939c <puts>
    instance->getSerialThread()->startThread();
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6a1b      	ldr	r3, [r3, #32]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7ff fe2d 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 80151f0:	4603      	mov	r3, r0
 80151f2:	4618      	mov	r0, r3
 80151f4:	f005 fda0 	bl	801ad38 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f103 0218 	add.w	r2, r3, #24
 80151fe:	f107 030c 	add.w	r3, r7, #12
 8015202:	4611      	mov	r1, r2
 8015204:	4618      	mov	r0, r3
 8015206:	f000 fa49 	bl	801569c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6a1b      	ldr	r3, [r3, #32]
 801520e:	4618      	mov	r0, r3
 8015210:	f7ff fe1b 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 8015214:	4604      	mov	r4, r0
 8015216:	f107 020c 	add.w	r2, r7, #12
 801521a:	f107 0314 	add.w	r3, r7, #20
 801521e:	4611      	mov	r1, r2
 8015220:	4618      	mov	r0, r3
 8015222:	f000 fb1b 	bl	801585c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8015226:	f107 0314 	add.w	r3, r7, #20
 801522a:	4619      	mov	r1, r3
 801522c:	4620      	mov	r0, r4
 801522e:	f005 fcef 	bl	801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8015232:	f107 0314 	add.w	r3, r7, #20
 8015236:	4618      	mov	r0, r3
 8015238:	f7f5 ff0f 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	3348      	adds	r3, #72	@ 0x48
 8015240:	4618      	mov	r0, r3
 8015242:	f000 fb1b 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015246:	4603      	mov	r3, r0
 8015248:	4618      	mov	r0, r3
 801524a:	f7ee fcad 	bl	8003ba8 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 801524e:	485d      	ldr	r0, [pc, #372]	@ (80153c4 <_ZN7TMC22089configureEv+0x1ec>)
 8015250:	f014 f834 	bl	80292bc <iprintf>
    uint16_t result = driver->test_connection();
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	3348      	adds	r3, #72	@ 0x48
 8015258:	4618      	mov	r0, r3
 801525a:	f000 fb0f 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801525e:	4603      	mov	r3, r0
 8015260:	4618      	mov	r0, r3
 8015262:	f7ef fa39 	bl	80046d8 <_ZN10TMCStepper15test_connectionEv>
 8015266:	4603      	mov	r3, r0
 8015268:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 801526a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801526c:	2b00      	cmp	r3, #0
 801526e:	d018      	beq.n	80152a2 <_ZN7TMC22089configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 8015270:	4855      	ldr	r0, [pc, #340]	@ (80153c8 <_ZN7TMC22089configureEv+0x1f0>)
 8015272:	f014 f823 	bl	80292bc <iprintf>
        switch(result) {
 8015276:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015278:	2b01      	cmp	r3, #1
 801527a:	d002      	beq.n	8015282 <_ZN7TMC22089configureEv+0xaa>
 801527c:	2b02      	cmp	r3, #2
 801527e:	d004      	beq.n	801528a <_ZN7TMC22089configureEv+0xb2>
 8015280:	e007      	b.n	8015292 <_ZN7TMC22089configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 8015282:	4852      	ldr	r0, [pc, #328]	@ (80153cc <_ZN7TMC22089configureEv+0x1f4>)
 8015284:	f014 f88a 	bl	802939c <puts>
 8015288:	e007      	b.n	801529a <_ZN7TMC22089configureEv+0xc2>
            case 2: printf("No power\n"); break;
 801528a:	4851      	ldr	r0, [pc, #324]	@ (80153d0 <_ZN7TMC22089configureEv+0x1f8>)
 801528c:	f014 f886 	bl	802939c <puts>
 8015290:	e003      	b.n	801529a <_ZN7TMC22089configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 8015292:	4850      	ldr	r0, [pc, #320]	@ (80153d4 <_ZN7TMC22089configureEv+0x1fc>)
 8015294:	f014 f882 	bl	802939c <puts>
 8015298:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 801529a:	484f      	ldr	r0, [pc, #316]	@ (80153d8 <_ZN7TMC22089configureEv+0x200>)
 801529c:	f014 f87e 	bl	802939c <puts>
 80152a0:	e002      	b.n	80152a8 <_ZN7TMC22089configureEv+0xd0>
    } else {
        printf("OK\n");
 80152a2:	484e      	ldr	r0, [pc, #312]	@ (80153dc <_ZN7TMC22089configureEv+0x204>)
 80152a4:	f014 f87a 	bl	802939c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3348      	adds	r3, #72	@ 0x48
 80152ac:	4618      	mov	r0, r3
 80152ae:	f000 fae5 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2104      	movs	r1, #4
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ed fc40 	bl	8002b3c <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3348      	adds	r3, #72	@ 0x48
 80152c0:	4618      	mov	r0, r3
 80152c2:	f000 fadb 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2118      	movs	r1, #24
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7ef fad0 	bl	8004870 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	3348      	adds	r3, #72	@ 0x48
 80152d4:	4618      	mov	r0, r3
 80152d6:	f000 fad1 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152da:	4603      	mov	r3, r0
 80152dc:	461a      	mov	r2, r3
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80152e4:	4619      	mov	r1, r3
 80152e6:	4610      	mov	r0, r2
 80152e8:	f7ef f95a 	bl	80045a0 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	3348      	adds	r3, #72	@ 0x48
 80152f0:	4618      	mov	r0, r3
 80152f2:	f000 fac3 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152f6:	4603      	mov	r3, r0
 80152f8:	461a      	mov	r2, r3
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8015300:	4619      	mov	r1, r3
 8015302:	4610      	mov	r0, r2
 8015304:	f7ef fa04 	bl	8004710 <_ZN10TMCStepper10microstepsEt>
    driver->en_spreadCycle(!stealth);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	3348      	adds	r3, #72	@ 0x48
 801530c:	4618      	mov	r0, r3
 801530e:	f000 fab5 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015312:	4602      	mov	r2, r0
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801531a:	f083 0301 	eor.w	r3, r3, #1
 801531e:	b2db      	uxtb	r3, r3
 8015320:	4619      	mov	r1, r3
 8015322:	4610      	mov	r0, r2
 8015324:	f7ed fe98 	bl	8003058 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	3348      	adds	r3, #72	@ 0x48
 801532c:	4618      	mov	r0, r3
 801532e:	f000 faa5 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015332:	4603      	mov	r3, r0
 8015334:	2101      	movs	r1, #1
 8015336:	4618      	mov	r0, r3
 8015338:	f7ed ff94 	bl	8003264 <_ZN14TMC2208Stepper13pwm_autoscaleEb>
    driver->iholddelay(10);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	3348      	adds	r3, #72	@ 0x48
 8015340:	4618      	mov	r0, r3
 8015342:	f000 fa9b 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015346:	4603      	mov	r3, r0
 8015348:	210a      	movs	r1, #10
 801534a:	4618      	mov	r0, r3
 801534c:	f7ed ff3c 	bl	80031c8 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	3348      	adds	r3, #72	@ 0x48
 8015354:	4618      	mov	r0, r3
 8015356:	f000 fa91 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801535a:	4603      	mov	r3, r0
 801535c:	2180      	movs	r1, #128	@ 0x80
 801535e:	4618      	mov	r0, r3
 8015360:	f7ef fabe 	bl	80048e0 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 8015364:	481e      	ldr	r0, [pc, #120]	@ (80153e0 <_ZN7TMC22089configureEv+0x208>)
 8015366:	f014 f819 	bl	802939c <puts>
    instance->getSerialThread()->stopThread();
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6a1b      	ldr	r3, [r3, #32]
 801536e:	4618      	mov	r0, r3
 8015370:	f7ff fd6b 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 8015374:	4603      	mov	r3, r0
 8015376:	4618      	mov	r0, r3
 8015378:	f005 fd0b 	bl	801ad92 <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6a1b      	ldr	r3, [r3, #32]
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fd62 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 8015386:	4604      	mov	r4, r0
 8015388:	f107 020c 	add.w	r2, r7, #12
 801538c:	f107 031c 	add.w	r3, r7, #28
 8015390:	4611      	mov	r1, r2
 8015392:	4618      	mov	r0, r3
 8015394:	f000 fa62 	bl	801585c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8015398:	f107 031c 	add.w	r3, r7, #28
 801539c:	4619      	mov	r1, r3
 801539e:	4620      	mov	r0, r4
 80153a0:	f005 fc82 	bl	801aca8 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 80153a4:	f107 031c 	add.w	r3, r7, #28
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f5 fe56 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 80153ae:	f107 030c 	add.w	r3, r7, #12
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7ff fdcc 	bl	8014f50 <_ZNSt10shared_ptrI3TMCED1Ev>
 80153b8:	372c      	adds	r7, #44	@ 0x2c
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd90      	pop	{r4, r7, pc}
 80153be:	bf00      	nop
 80153c0:	0802ab4c 	.word	0x0802ab4c
 80153c4:	0802ab68 	.word	0x0802ab68
 80153c8:	0802ab90 	.word	0x0802ab90
 80153cc:	0802aba8 	.word	0x0802aba8
 80153d0:	0802abbc 	.word	0x0802abbc
 80153d4:	0802abc8 	.word	0x0802abc8
 80153d8:	0802abd8 	.word	0x0802abd8
 80153dc:	0802ac00 	.word	0x0802ac00
 80153e0:	0802ac04 	.word	0x0802ac04

080153e4 <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	3348      	adds	r3, #72	@ 0x48
 80153f0:	4618      	mov	r0, r3
 80153f2:	f000 fa43 	bl	801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80153f6:	4603      	mov	r3, r0
 80153f8:	695b      	ldr	r3, [r3, #20]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ed f8ac 	bl	8002558 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 8015408:	b480      	push	{r7}
 801540a:	b083      	sub	sp, #12
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
    return size_;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	685b      	ldr	r3, [r3, #4]
  }
 8015414:	4618      	mov	r0, r3
 8015416:	370c      	adds	r7, #12
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr

08015420 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 8015420:	b480      	push	{r7}
 8015422:	b083      	sub	sp, #12
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
    return data_;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
  }
 801542c:	4618      	mov	r0, r3
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr

08015438 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8015438:	b580      	push	{r7, lr}
 801543a:	ed2d 8b02 	vpush	{d8}
 801543e:	b088      	sub	sp, #32
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 8015444:	2300      	movs	r3, #0
 8015446:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8015448:	2308      	movs	r3, #8
 801544a:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 801544c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015450:	2201      	movs	r2, #1
 8015452:	fa02 f303 	lsl.w	r3, r2, r3
 8015456:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	ed93 7b00 	vldr	d7, [r3]
 801545e:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80155c0 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x188>
 8015462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546a:	db44      	blt.n	80154f6 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xbe>
    for (; index >= 0; index--) {
 801546c:	e03f      	b.n	80154ee <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xb6>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	ed93 8b00 	vldr	d8, [r3]
 8015474:	f7f2 fc80 	bl	8007d78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8015478:	4603      	mov	r3, r0
 801547a:	60bb      	str	r3, [r7, #8]
 801547c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015480:	f107 0308 	add.w	r3, r7, #8
 8015484:	4611      	mov	r1, r2
 8015486:	4618      	mov	r0, r3
 8015488:	f7f2 fc86 	bl	8007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801548c:	eeb0 7b40 	vmov.f64	d7, d0
 8015490:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015498:	bfac      	ite	ge
 801549a:	2301      	movge	r3, #1
 801549c:	2300      	movlt	r3, #0
 801549e:	b2db      	uxtb	r3, r3
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d01b      	beq.n	80154dc <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xa4>
        value *= traits::negativeBinaryPowersOfTen()[index];
 80154a4:	f7f2 fc8c 	bl	8007dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80154a8:	4603      	mov	r3, r0
 80154aa:	60fb      	str	r3, [r7, #12]
 80154ac:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80154b0:	f107 030c 	add.w	r3, r7, #12
 80154b4:	4611      	mov	r1, r2
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f2 fc6e 	bl	8007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80154bc:	eeb0 6b40 	vmov.f64	d6, d0
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	ed93 7b00 	vldr	d7, [r3]
 80154c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 + bit);
 80154d0:	69bb      	ldr	r3, [r7, #24]
 80154d2:	b29a      	uxth	r2, r3
 80154d4:	8bfb      	ldrh	r3, [r7, #30]
 80154d6:	4413      	add	r3, r2
 80154d8:	b29b      	uxth	r3, r3
 80154da:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	105b      	asrs	r3, r3, #1
 80154e0:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 80154e2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	3b01      	subs	r3, #1
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	777b      	strb	r3, [r7, #29]
 80154ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	dabb      	bge.n	801546e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x36>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	ed93 7b00 	vldr	d7, [r3]
 80154fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015504:	dd52      	ble.n	80155ac <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	ed93 7b00 	vldr	d7, [r3]
 801550c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80155c8 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x190>
 8015510:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015518:	d848      	bhi.n	80155ac <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
    for (; index >= 0; index--) {
 801551a:	e043      	b.n	80155a4 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x16c>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	ed93 8b00 	vldr	d8, [r3]
 8015522:	f7f2 fc4d 	bl	8007dc0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8015526:	4603      	mov	r3, r0
 8015528:	613b      	str	r3, [r7, #16]
 801552a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801552e:	f107 0310 	add.w	r3, r7, #16
 8015532:	4611      	mov	r1, r2
 8015534:	4618      	mov	r0, r3
 8015536:	f7f2 fc2f 	bl	8007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801553a:	eeb0 7b40 	vmov.f64	d7, d0
 801553e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015546:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554e:	bf4c      	ite	mi
 8015550:	2301      	movmi	r3, #1
 8015552:	2300      	movpl	r3, #0
 8015554:	b2db      	uxtb	r3, r3
 8015556:	2b00      	cmp	r3, #0
 8015558:	d01b      	beq.n	8015592 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x15a>
        value *= traits::positiveBinaryPowersOfTen()[index];
 801555a:	f7f2 fc0d 	bl	8007d78 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 801555e:	4603      	mov	r3, r0
 8015560:	617b      	str	r3, [r7, #20]
 8015562:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015566:	f107 0314 	add.w	r3, r7, #20
 801556a:	4611      	mov	r1, r2
 801556c:	4618      	mov	r0, r3
 801556e:	f7f2 fc13 	bl	8007d98 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8015572:	eeb0 6b40 	vmov.f64	d6, d0
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	ed93 7b00 	vldr	d7, [r3]
 801557c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 - bit);
 8015586:	8bfa      	ldrh	r2, [r7, #30]
 8015588:	69bb      	ldr	r3, [r7, #24]
 801558a:	b29b      	uxth	r3, r3
 801558c:	1ad3      	subs	r3, r2, r3
 801558e:	b29b      	uxth	r3, r3
 8015590:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	105b      	asrs	r3, r3, #1
 8015596:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8015598:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801559c:	b2db      	uxtb	r3, r3
 801559e:	3b01      	subs	r3, #1
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	777b      	strb	r3, [r7, #29]
 80155a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	dab7      	bge.n	801551c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xe4>
  return powersOf10;
 80155ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3720      	adds	r7, #32
 80155b4:	46bd      	mov	sp, r7
 80155b6:	ecbd 8b02 	vpop	{d8}
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	f3af 8000 	nop.w
 80155c0:	00000000 	.word	0x00000000
 80155c4:	416312d0 	.word	0x416312d0
 80155c8:	88e368f1 	.word	0x88e368f1
 80155cc:	3ee4f8b5 	.word	0x3ee4f8b5

080155d0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>:
  T as() const {
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80155e2:	f7ff fbe1 	bl	8014da8 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 80155e6:	bf00      	nop
  }
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	3708      	adds	r7, #8
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>:
// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <
    typename TDestination,
    detail::enable_if_t<!detail::is_pointer<TDestination>::value, int> = 0>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	f107 0308 	add.w	r3, r7, #8
 80155fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80155fe:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	f107 0308 	add.w	r3, r7, #8
 8015606:	e893 0003 	ldmia.w	r3, {r0, r1}
 801560a:	f000 f943 	bl	8015894 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 801560e:	4603      	mov	r3, r0
}
 8015610:	4618      	mov	r0, r3
 8015612:	3710      	adds	r7, #16
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}

08015618 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	3304      	adds	r3, #4
 8015624:	4618      	mov	r0, r3
 8015626:	f000 f960 	bl	80158ea <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	4618      	mov	r0, r3
 801562e:	3708      	adds	r7, #8
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <_ZNSt8weak_ptrI3TMCEC1Ev>:
      constexpr weak_ptr() noexcept = default;
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	4618      	mov	r0, r3
 8015640:	f000 f942 	bl	80158c8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	4618      	mov	r0, r3
 8015648:	3708      	adds	r7, #8
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <_ZNSt8weak_ptrI3TMCED1Ev>:
    class weak_ptr : public __weak_ptr<_Tp>
 801564e:	b580      	push	{r7, lr}
 8015650:	b082      	sub	sp, #8
 8015652:	af00      	add	r7, sp, #0
 8015654:	6078      	str	r0, [r7, #4]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4618      	mov	r0, r3
 801565a:	f7ff ffdd 	bl	8015618 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4618      	mov	r0, r3
 8015662:	3708      	adds	r7, #8
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>:
      constexpr enable_shared_from_this() noexcept { }
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7ff ffde 	bl	8015634 <_ZNSt8weak_ptrI3TMCEC1Ev>
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	3708      	adds	r7, #8
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>:
      ~enable_shared_from_this() { }
 8015682:	b580      	push	{r7, lr}
 8015684:	b082      	sub	sp, #8
 8015686:	af00      	add	r7, sp, #0
 8015688:	6078      	str	r0, [r7, #4]
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	4618      	mov	r0, r3
 801568e:	f7ff ffde 	bl	801564e <_ZNSt8weak_ptrI3TMCED1Ev>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	4618      	mov	r0, r3
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>:
      shared_from_this()
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
 80156a4:	6039      	str	r1, [r7, #0]
      { return shared_ptr<_Tp>(this->_M_weak_this); }
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	4619      	mov	r1, r3
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 f92f 	bl	801590e <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>:
  operator T() const {
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	6039      	str	r1, [r7, #0]
    return as<T>();
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f000 f931 	bl	801592e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>
  }
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
    return as<T>();
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f000 f949 	bl	8015974 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 80156e2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80156e6:	eeb0 0a67 	vmov.f32	s0, s15
 80156ea:	3708      	adds	r7, #8
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f000 f95f 	bl	80159bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 80156fe:	4603      	mov	r3, r0
  }
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8015708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801570c:	b08a      	sub	sp, #40	@ 0x28
 801570e:	af04      	add	r7, sp, #16
 8015710:	60f8      	str	r0, [r7, #12]
 8015712:	60b9      	str	r1, [r7, #8]
 8015714:	607a      	str	r2, [r7, #4]
 8015716:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8015718:	f107 0314 	add.w	r3, r7, #20
 801571c:	469a      	mov	sl, r3
 801571e:	68b8      	ldr	r0, [r7, #8]
 8015720:	f000 f96e 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015724:	4680      	mov	r8, r0
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f000 f975 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801572c:	4681      	mov	r9, r0
 801572e:	6838      	ldr	r0, [r7, #0]
 8015730:	f000 f97c 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015734:	4604      	mov	r4, r0
 8015736:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015738:	f000 f978 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801573c:	4605      	mov	r5, r0
 801573e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015740:	f7fb fe67 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015744:	4606      	mov	r6, r0
 8015746:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015748:	f000 f97b 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801574c:	4603      	mov	r3, r0
 801574e:	9303      	str	r3, [sp, #12]
 8015750:	9602      	str	r6, [sp, #8]
 8015752:	9501      	str	r5, [sp, #4]
 8015754:	9400      	str	r4, [sp, #0]
 8015756:	464b      	mov	r3, r9
 8015758:	4642      	mov	r2, r8
 801575a:	4651      	mov	r1, sl
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f000 f97b 	bl	8015a58 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8015762:	68f8      	ldr	r0, [r7, #12]
 8015764:	3718      	adds	r7, #24
 8015766:	46bd      	mov	sp, r7
 8015768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801576c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801576c:	b590      	push	{r4, r7, lr}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8015776:	687c      	ldr	r4, [r7, #4]
 8015778:	6838      	ldr	r0, [r7, #0]
 801577a:	f000 f99f 	bl	8015abc <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>
 801577e:	4603      	mov	r3, r0
 8015780:	4619      	mov	r1, r3
 8015782:	4620      	mov	r0, r4
 8015784:	f000 f9a5 	bl	8015ad2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	4618      	mov	r0, r3
 801578c:	370c      	adds	r7, #12
 801578e:	46bd      	mov	sp, r7
 8015790:	bd90      	pop	{r4, r7, pc}

08015792 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8015792:	b590      	push	{r4, r7, lr}
 8015794:	b091      	sub	sp, #68	@ 0x44
 8015796:	af00      	add	r7, sp, #0
 8015798:	60f8      	str	r0, [r7, #12]
 801579a:	60b9      	str	r1, [r7, #8]
 801579c:	607a      	str	r2, [r7, #4]
 801579e:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80157a0:	2068      	movs	r0, #104	@ 0x68
 80157a2:	f012 fee1 	bl	8028568 <_Znwj>
 80157a6:	4603      	mov	r3, r0
 80157a8:	461c      	mov	r4, r3
 80157aa:	68b8      	ldr	r0, [r7, #8]
 80157ac:	f7f9 ff42 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80157b0:	4602      	mov	r2, r0
 80157b2:	f107 0310 	add.w	r3, r7, #16
 80157b6:	4611      	mov	r1, r2
 80157b8:	4618      	mov	r0, r3
 80157ba:	f013 f9e0 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f7f9 ff38 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80157c4:	4602      	mov	r2, r0
 80157c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80157ca:	4611      	mov	r1, r2
 80157cc:	4618      	mov	r0, r3
 80157ce:	f013 f9d6 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80157d2:	6838      	ldr	r0, [r7, #0]
 80157d4:	f000 f91f 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80157d8:	4603      	mov	r3, r0
 80157da:	edd3 7a00 	vldr	s15, [r3]
 80157de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80157e2:	f107 0310 	add.w	r3, r7, #16
 80157e6:	eeb0 0a67 	vmov.f32	s0, s15
 80157ea:	4619      	mov	r1, r3
 80157ec:	4620      	mov	r0, r4
 80157ee:	f7ff fb53 	bl	8014e98 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 80157f2:	4621      	mov	r1, r4
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f000 f99a 	bl	8015b2e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80157fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80157fe:	4618      	mov	r0, r3
 8015800:	f012 ffad 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015804:	f107 0310 	add.w	r3, r7, #16
 8015808:	4618      	mov	r0, r3
 801580a:	f012 ffa8 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801580e:	bf00      	nop
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	3744      	adds	r7, #68	@ 0x44
 8015814:	46bd      	mov	sp, r7
 8015816:	bd90      	pop	{r4, r7, pc}

08015818 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8015818:	b590      	push	{r4, r7, lr}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4618      	mov	r0, r3
 8015824:	f000 f992 	bl	8015b4c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015828:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00c      	beq.n	801584c <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f000 f997 	bl	8015b66 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>
 8015838:	4604      	mov	r4, r0
 801583a:	68f8      	ldr	r0, [r7, #12]
 801583c:	f000 f9a0 	bl	8015b80 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8015840:	4603      	mov	r3, r0
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	4619      	mov	r1, r3
 8015846:	4620      	mov	r0, r4
 8015848:	f000 f9a5 	bl	8015b96 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>
	__ptr = pointer();
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2200      	movs	r2, #0
 8015850:	601a      	str	r2, [r3, #0]
      }
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	4618      	mov	r0, r3
 8015856:	3714      	adds	r7, #20
 8015858:	46bd      	mov	sp, r7
 801585a:	bd90      	pop	{r4, r7, pc}

0801585c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	683a      	ldr	r2, [r7, #0]
 801586a:	4611      	mov	r1, r2
 801586c:	4618      	mov	r0, r3
 801586e:	f000 f9a5 	bl	8015bbc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	4618      	mov	r0, r3
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 801587c:	b580      	push	{r7, lr}
 801587e:	b082      	sub	sp, #8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
	return get();
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f000 f9af 	bl	8015be8 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>
 801588a:	4603      	mov	r3, r0
      }
 801588c:	4618      	mov	r0, r3
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8015894:	b580      	push	{r7, lr}
 8015896:	b086      	sub	sp, #24
 8015898:	af00      	add	r7, sp, #0
 801589a:	f107 0308 	add.w	r3, r7, #8
 801589e:	e883 0003 	stmia.w	r3, {r0, r1}
 80158a2:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 80158a4:	f107 0314 	add.w	r3, r7, #20
 80158a8:	6879      	ldr	r1, [r7, #4]
 80158aa:	4618      	mov	r0, r3
 80158ac:	f000 f9a9 	bl	8015c02 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 80158b0:	697a      	ldr	r2, [r7, #20]
 80158b2:	f107 0308 	add.w	r3, r7, #8
 80158b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158ba:	f000 f9b2 	bl	8015c22 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 80158be:	4603      	mov	r3, r0
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3718      	adds	r7, #24
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_ptr() noexcept
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b082      	sub	sp, #8
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
      : _M_ptr(nullptr), _M_refcount()
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2200      	movs	r2, #0
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	3304      	adds	r3, #4
 80158da:	4618      	mov	r0, r3
 80158dc:	f000 f9db 	bl	8015c96 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	4618      	mov	r0, r3
 80158e4:	3708      	adds	r7, #8
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}

080158ea <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__weak_count() noexcept
 80158ea:	b580      	push	{r7, lr}
 80158ec:	b082      	sub	sp, #8
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d004      	beq.n	8015904 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_weak_release();
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	4618      	mov	r0, r3
 8015900:	f7ff f917 	bl	8014b32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
      }
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	4618      	mov	r0, r3
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>:
	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 801590e:	b580      	push	{r7, lr}
 8015910:	b082      	sub	sp, #8
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
 8015916:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__r) { }
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	4611      	mov	r1, r2
 801591e:	4618      	mov	r0, r3
 8015920:	f000 f9c7 	bl	8015cb2 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	4618      	mov	r0, r3
 8015928:	3708      	adds	r7, #8
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}

0801592e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 801592e:	b590      	push	{r4, r7, lr}
 8015930:	b087      	sub	sp, #28
 8015932:	af00      	add	r7, sp, #0
 8015934:	6078      	str	r0, [r7, #4]
 8015936:	6039      	str	r1, [r7, #0]
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	617b      	str	r3, [r7, #20]
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015940:	6938      	ldr	r0, [r7, #16]
 8015942:	f7f3 f846 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015946:	4604      	mov	r4, r0
 8015948:	6938      	ldr	r0, [r7, #16]
 801594a:	f7f2 fed0 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 801594e:	4602      	mov	r2, r0
 8015950:	f107 0308 	add.w	r3, r7, #8
 8015954:	4621      	mov	r1, r4
 8015956:	4618      	mov	r0, r3
 8015958:	f7ef ff6b 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 801595c:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f107 0308 	add.w	r3, r7, #8
 8015964:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015968:	f000 f9b9 	bl	8015cde <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
}
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	371c      	adds	r7, #28
 8015970:	46bd      	mov	sp, r7
 8015972:	bd90      	pop	{r4, r7, pc}

08015974 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015974:	b590      	push	{r4, r7, lr}
 8015976:	b087      	sub	sp, #28
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	617b      	str	r3, [r7, #20]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015984:	6938      	ldr	r0, [r7, #16]
 8015986:	f7f3 f824 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 801598a:	4604      	mov	r4, r0
 801598c:	6938      	ldr	r0, [r7, #16]
 801598e:	f7f2 feae 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015992:	4602      	mov	r2, r0
 8015994:	f107 0308 	add.w	r3, r7, #8
 8015998:	4621      	mov	r1, r4
 801599a:	4618      	mov	r0, r3
 801599c:	f7ef ff49 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80159a0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80159a2:	f107 0308 	add.w	r3, r7, #8
 80159a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159aa:	f000 f9ad 	bl	8015d08 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 80159ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80159b2:	eeb0 0a67 	vmov.f32	s0, s15
 80159b6:	371c      	adds	r7, #28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd90      	pop	{r4, r7, pc}

080159bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80159bc:	b590      	push	{r4, r7, lr}
 80159be:	b087      	sub	sp, #28
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	617b      	str	r3, [r7, #20]
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80159cc:	6938      	ldr	r0, [r7, #16]
 80159ce:	f7f3 f800 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80159d2:	4604      	mov	r4, r0
 80159d4:	6938      	ldr	r0, [r7, #16]
 80159d6:	f7f2 fe8a 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80159da:	4602      	mov	r2, r0
 80159dc:	f107 0308 	add.w	r3, r7, #8
 80159e0:	4621      	mov	r1, r4
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7ef ff25 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80159e8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80159ea:	f107 0308 	add.w	r3, r7, #8
 80159ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159f2:	f000 f9ad 	bl	8015d50 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 80159f6:	4603      	mov	r3, r0
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	371c      	adds	r7, #28
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd90      	pop	{r4, r7, pc}

08015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a00:	b480      	push	{r7}
 8015a02:	b083      	sub	sp, #12
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr

08015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a16:	b480      	push	{r7}
 8015a18:	b083      	sub	sp, #12
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	4618      	mov	r0, r3
 8015a38:	370c      	adds	r7, #12
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a40:	4770      	bx	lr

08015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a42:	b480      	push	{r7}
 8015a44:	b083      	sub	sp, #12
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a5c:	b08b      	sub	sp, #44	@ 0x2c
 8015a5e:	af04      	add	r7, sp, #16
 8015a60:	6178      	str	r0, [r7, #20]
 8015a62:	6139      	str	r1, [r7, #16]
 8015a64:	60fa      	str	r2, [r7, #12]
 8015a66:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8015a68:	697c      	ldr	r4, [r7, #20]
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f7ff ffc8 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015a70:	4680      	mov	r8, r0
 8015a72:	68b8      	ldr	r0, [r7, #8]
 8015a74:	f7ff ffcf 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015a78:	4681      	mov	r9, r0
 8015a7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015a7c:	f7ff ffd6 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015a80:	4605      	mov	r5, r0
 8015a82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015a84:	f7ff ffd2 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015a88:	4606      	mov	r6, r0
 8015a8a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015a8c:	f7fb fcc1 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015a90:	6078      	str	r0, [r7, #4]
 8015a92:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015a94:	f7ff ffd5 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	9303      	str	r3, [sp, #12]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	9302      	str	r3, [sp, #8]
 8015aa0:	9601      	str	r6, [sp, #4]
 8015aa2:	9500      	str	r5, [sp, #0]
 8015aa4:	464b      	mov	r3, r9
 8015aa6:	4642      	mov	r2, r8
 8015aa8:	6939      	ldr	r1, [r7, #16]
 8015aaa:	4620      	mov	r0, r4
 8015aac:	f000 f96e 	bl	8015d8c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	371c      	adds	r7, #28
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015abc <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr

08015ad2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b082      	sub	sp, #8
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	601a      	str	r2, [r3, #0]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	3304      	adds	r3, #4
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7f7 fae1 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	1d1a      	adds	r2, r3, #4
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	3304      	adds	r3, #4
 8015af6:	4619      	mov	r1, r3
 8015af8:	4610      	mov	r0, r2
 8015afa:	f7f7 fe98 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	2200      	movs	r2, #0
 8015b02:	601a      	str	r2, [r3, #0]
	}
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	4618      	mov	r0, r3
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b082      	sub	sp, #8
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
 8015b16:	6039      	str	r1, [r7, #0]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	683a      	ldr	r2, [r7, #0]
 8015b1c:	4611      	mov	r1, r2
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f000 f974 	bl	8015e0c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	4618      	mov	r0, r3
 8015b28:	3708      	adds	r7, #8
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}

08015b2e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8015b2e:	b580      	push	{r7, lr}
 8015b30:	b082      	sub	sp, #8
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	6078      	str	r0, [r7, #4]
 8015b36:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6839      	ldr	r1, [r7, #0]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7ff ffe6 	bl	8015b0e <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	4618      	mov	r0, r3
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 f96c 	bl	8015e34 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3708      	adds	r7, #8
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}

08015b66 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8015b66:	b580      	push	{r7, lr}
 8015b68:	b082      	sub	sp, #8
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	f000 f96c 	bl	8015e4e <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8015b76:	4603      	mov	r3, r0
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	370c      	adds	r7, #12
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b94:	4770      	bx	lr

08015b96 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8015b96:	b590      	push	{r4, r7, lr}
 8015b98:	b083      	sub	sp, #12
 8015b9a:	af00      	add	r7, sp, #0
 8015b9c:	6078      	str	r0, [r7, #4]
 8015b9e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8015ba0:	683c      	ldr	r4, [r7, #0]
 8015ba2:	2c00      	cmp	r4, #0
 8015ba4:	d006      	beq.n	8015bb4 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_+0x1e>
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f7ff f95e 	bl	8014e68 <_ZN14TMC2208StepperD1Ev>
 8015bac:	2168      	movs	r1, #104	@ 0x68
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f012 fcc9 	bl	8028546 <_ZdlPvj>
      }
 8015bb4:	bf00      	nop
 8015bb6:	370c      	adds	r7, #12
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd90      	pop	{r4, r7, pc}

08015bbc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	601a      	str	r2, [r3, #0]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	1d1a      	adds	r2, r3, #4
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	3304      	adds	r3, #4
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4610      	mov	r0, r2
 8015bda:	f7f6 fc6c 	bl	800c4b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	4618      	mov	r0, r3
 8015be2:	3708      	adds	r7, #8
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f000 f938 	bl	8015e68 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3708      	adds	r7, #8
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b082      	sub	sp, #8
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	6039      	str	r1, [r7, #0]
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	601a      	str	r2, [r3, #0]
    str.clear();
 8015c12:	6838      	ldr	r0, [r7, #0]
 8015c14:	f012 fe5e 	bl	80288d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b08a      	sub	sp, #40	@ 0x28
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	f107 0308 	add.w	r3, r7, #8
 8015c2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015c30:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 8015c32:	f107 0308 	add.w	r3, r7, #8
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f1 fb7a 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015c3c:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 8015c3e:	f107 0308 	add.w	r3, r7, #8
 8015c42:	4618      	mov	r0, r3
 8015c44:	f7f1 fb80 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015c48:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8015c4a:	f107 0314 	add.w	r3, r7, #20
 8015c4e:	6a3a      	ldr	r2, [r7, #32]
 8015c50:	6879      	ldr	r1, [r7, #4]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f000 f916 	bl	8015e84 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8015c58:	f107 0314 	add.w	r3, r7, #20
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	6a39      	ldr	r1, [r7, #32]
 8015c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015c62:	f000 f922 	bl	8015eaa <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8015c66:	4603      	mov	r3, r0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3728      	adds	r7, #40	@ 0x28
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 8015c70:	b480      	push	{r7}
 8015c72:	b085      	sub	sp, #20
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	607a      	str	r2, [r7, #4]
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	68ba      	ldr	r2, [r7, #8]
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	605a      	str	r2, [r3, #4]
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3714      	adds	r7, #20
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c94:	4770      	bx	lr

08015c96 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
 8015c96:	b480      	push	{r7}
 8015c98:	b083      	sub	sp, #12
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	6078      	str	r0, [r7, #4]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	601a      	str	r2, [r3, #0]
      { }
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr

08015cb2 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>:
	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b082      	sub	sp, #8
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	6039      	str	r1, [r7, #0]
	: _M_refcount(__r._M_refcount) // may throw
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	1d1a      	adds	r2, r3, #4
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	3304      	adds	r3, #4
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	4610      	mov	r0, r2
 8015cc8:	f000 f909 	bl	8015ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>
	  _M_ptr = __r._M_ptr;
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	681a      	ldr	r2, [r3, #0]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	601a      	str	r2, [r3, #0]
	}
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3708      	adds	r7, #8
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}

08015cde <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static detail::decay_t<T> fromJson(JsonVariantConst src) {
 8015cde:	b580      	push	{r7, lr}
 8015ce0:	b084      	sub	sp, #16
 8015ce2:	af00      	add	r7, sp, #0
 8015ce4:	60f8      	str	r0, [r7, #12]
 8015ce6:	1d3b      	adds	r3, r7, #4
 8015ce8:	e883 0006 	stmia.w	r3, {r1, r2}
    T result; // Error here? See https://arduinojson.org/v7/non-default-constructible/
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f012 fd10 	bl	8028712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v7/unsupported-as/
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	1d3b      	adds	r3, r7, #4
 8015cf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015cfa:	f7ff f871 	bl	8014de0 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 8015cfe:	bf00      	nop
  }
 8015d00:	68f8      	ldr	r0, [r7, #12]
 8015d02:	3710      	adds	r7, #16
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	463b      	mov	r3, r7
 8015d10:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015d14:	463b      	mov	r3, r7
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7f1 fb0a 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015d1c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015d1e:	463b      	mov	r3, r7
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7f1 fb11 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015d26:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d006      	beq.n	8015d3c <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015d2e:	68b9      	ldr	r1, [r7, #8]
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f000 f8f9 	bl	8015f28 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 8015d36:	eef0 7a40 	vmov.f32	s15, s0
 8015d3a:	e001      	b.n	8015d40 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8015d3c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015d4c <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 8015d40:	eeb0 0a67 	vmov.f32	s0, s15
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	00000000 	.word	0x00000000

08015d50 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	463b      	mov	r3, r7
 8015d58:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015d5c:	463b      	mov	r3, r7
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7f1 fae6 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015d64:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015d66:	463b      	mov	r3, r7
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f1 faed 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015d6e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d005      	beq.n	8015d82 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8015d76:	68b9      	ldr	r1, [r7, #8]
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f000 f963 	bl	8016044 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	e000      	b.n	8015d84 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015d82:	2300      	movs	r3, #0
  }
 8015d84:	4618      	mov	r0, r3
 8015d86:	3710      	adds	r7, #16
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d90:	b08e      	sub	sp, #56	@ 0x38
 8015d92:	af06      	add	r7, sp, #24
 8015d94:	61f8      	str	r0, [r7, #28]
 8015d96:	61b9      	str	r1, [r7, #24]
 8015d98:	617a      	str	r2, [r7, #20]
 8015d9a:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8015d9c:	69fb      	ldr	r3, [r7, #28]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	601a      	str	r2, [r3, #0]
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	1d1c      	adds	r4, r3, #4
 8015da6:	69fd      	ldr	r5, [r7, #28]
 8015da8:	6978      	ldr	r0, [r7, #20]
 8015daa:	f7ff fe29 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015dae:	4680      	mov	r8, r0
 8015db0:	6938      	ldr	r0, [r7, #16]
 8015db2:	f7ff fe30 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015db6:	4606      	mov	r6, r0
 8015db8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015dba:	f7ff fe37 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015dc2:	f7ff fe33 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015dc6:	60b8      	str	r0, [r7, #8]
 8015dc8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015dca:	f7fb fb22 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015dd2:	f7ff fe36 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	9304      	str	r3, [sp, #16]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	9303      	str	r3, [sp, #12]
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	9302      	str	r3, [sp, #8]
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	9301      	str	r3, [sp, #4]
 8015de6:	9600      	str	r6, [sp, #0]
 8015de8:	4643      	mov	r3, r8
 8015dea:	69ba      	ldr	r2, [r7, #24]
 8015dec:	4629      	mov	r1, r5
 8015dee:	4620      	mov	r0, r4
 8015df0:	f000 f9ba 	bl	8016168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	4619      	mov	r1, r3
 8015dfa:	69f8      	ldr	r0, [r7, #28]
 8015dfc:	f000 fa1a 	bl	8016234 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	4618      	mov	r0, r3
 8015e04:	3720      	adds	r7, #32
 8015e06:	46bd      	mov	sp, r7
 8015e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e0c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8015e0c:	b590      	push	{r4, r7, lr}
 8015e0e:	b083      	sub	sp, #12
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f000 fa2c 	bl	8016276 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8015e1e:	683c      	ldr	r4, [r7, #0]
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f7ff fe93 	bl	8015b4c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015e26:	4603      	mov	r3, r0
 8015e28:	601c      	str	r4, [r3, #0]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	370c      	adds	r7, #12
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd90      	pop	{r4, r7, pc}

08015e34 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f000 fa26 	bl	8016290 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8015e44:	4603      	mov	r3, r0
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b082      	sub	sp, #8
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f000 fa25 	bl	80162a8 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	4618      	mov	r0, r3
 8015e62:	3708      	adds	r7, #8
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 fa24 	bl	80162c0 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	68b9      	ldr	r1, [r7, #8]
 8015e94:	4618      	mov	r0, r3
 8015e96:	f000 fa20 	bl	80162da <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	609a      	str	r2, [r3, #8]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3710      	adds	r7, #16
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}

08015eaa <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
  static typename TVisitor::result_type accept(const VariantData* var,
 8015eaa:	b580      	push	{r7, lr}
 8015eac:	b084      	sub	sp, #16
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	60f8      	str	r0, [r7, #12]
 8015eb2:	60b9      	str	r1, [r7, #8]
 8015eb4:	607a      	str	r2, [r7, #4]
    if (var != 0)
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d006      	beq.n	8015eca <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 8015ebc:	68ba      	ldr	r2, [r7, #8]
 8015ebe:	6879      	ldr	r1, [r7, #4]
 8015ec0:	68f8      	ldr	r0, [r7, #12]
 8015ec2:	f000 fa1b 	bl	80162fc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	e005      	b.n	8015ed6 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
      return visit.visit(nullptr);
 8015eca:	2100      	movs	r1, #0
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f000 fb43 	bl	8016558 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	bf00      	nop
  }
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}

08015ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>:
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 8015ede:	b580      	push	{r7, lr}
 8015ee0:	b082      	sub	sp, #8
 8015ee2:	af00      	add	r7, sp, #0
 8015ee4:	6078      	str	r0, [r7, #4]
 8015ee6:	6039      	str	r1, [r7, #0]
    : _M_pi(__r._M_pi)
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	601a      	str	r2, [r3, #0]
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00a      	beq.n	8015f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x30>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fe fdf3 	bl	8014ae8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>
 8015f02:	4603      	mov	r3, r0
 8015f04:	f083 0301 	eor.w	r3, r3, #1
 8015f08:	b2db      	uxtb	r3, r3
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d001      	beq.n	8015f12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x34>
 8015f0e:	2301      	movs	r3, #1
 8015f10:	e000      	b.n	8015f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x36>
 8015f12:	2300      	movs	r3, #0
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d001      	beq.n	8015f1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x3e>
	__throw_bad_weak_ptr();
 8015f18:	f7fe fde2 	bl	8014ae0 <_ZSt20__throw_bad_weak_ptrv>
    }
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
	...

08015f28 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f7f0 fa11 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8015f3a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	791b      	ldrb	r3, [r3, #4]
 8015f40:	3b04      	subs	r3, #4
 8015f42:	2b1a      	cmp	r3, #26
 8015f44:	d874      	bhi.n	8016030 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 8015f46:	a201      	add	r2, pc, #4	@ (adr r2, 8015f4c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 8015f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f4c:	0801600b 	.word	0x0801600b
 8015f50:	0801600b 	.word	0x0801600b
 8015f54:	08015fb9 	.word	0x08015fb9
 8015f58:	08016031 	.word	0x08016031
 8015f5c:	08016031 	.word	0x08016031
 8015f60:	08016031 	.word	0x08016031
 8015f64:	08015fc7 	.word	0x08015fc7
 8015f68:	08016031 	.word	0x08016031
 8015f6c:	08015fd5 	.word	0x08015fd5
 8015f70:	08016031 	.word	0x08016031
 8015f74:	0801601d 	.word	0x0801601d
 8015f78:	08016031 	.word	0x08016031
 8015f7c:	08016031 	.word	0x08016031
 8015f80:	08016031 	.word	0x08016031
 8015f84:	08016031 	.word	0x08016031
 8015f88:	08016031 	.word	0x08016031
 8015f8c:	08016031 	.word	0x08016031
 8015f90:	08016031 	.word	0x08016031
 8015f94:	08016031 	.word	0x08016031
 8015f98:	08016031 	.word	0x08016031
 8015f9c:	08016031 	.word	0x08016031
 8015fa0:	08016031 	.word	0x08016031
 8015fa4:	08015fe3 	.word	0x08015fe3
 8015fa8:	08016031 	.word	0x08016031
 8015fac:	08015ff7 	.word	0x08015ff7
 8015fb0:	08016031 	.word	0x08016031
 8015fb4:	08016025 	.word	0x08016025
        return static_cast<T>(content_.asBoolean);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	ee07 3a90 	vmov	s15, r3
 8015fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fc4:	e036      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	ee07 3a90 	vmov	s15, r3
 8015fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015fd2:	e02f      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	ee07 3a90 	vmov	s15, r3
 8015fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015fe0:	e028      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe8:	4610      	mov	r0, r2
 8015fea:	4619      	mov	r1, r3
 8015fec:	f7ea fc64 	bl	80008b8 <__aeabi_ul2f>
 8015ff0:	ee07 0a90 	vmov	s15, r0
 8015ff4:	e01e      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffc:	4610      	mov	r0, r2
 8015ffe:	4619      	mov	r1, r3
 8016000:	f7ea fc62 	bl	80008c8 <__aeabi_l2f>
 8016004:	ee07 0a90 	vmov	s15, r0
 8016008:	e014      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	3308      	adds	r3, #8
 8016010:	4618      	mov	r0, r3
 8016012:	f000 fab5 	bl	8016580 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 8016016:	eef0 7a40 	vmov.f32	s15, s0
 801601a:	e00b      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	edd3 7a00 	vldr	s15, [r3]
 8016022:	e007      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	ed93 7b00 	vldr	d7, [r3]
 801602a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801602e:	e001      	b.n	8016034 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 8016030:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016040 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 8016034:	eeb0 0a67 	vmov.f32	s0, s15
 8016038:	3710      	adds	r7, #16
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	00000000 	.word	0x00000000

08016044 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8016044:	b580      	push	{r7, lr}
 8016046:	b084      	sub	sp, #16
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801604e:	6839      	ldr	r1, [r7, #0]
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f7f0 f983 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8016056:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	791b      	ldrb	r3, [r3, #4]
 801605c:	3b04      	subs	r3, #4
 801605e:	2b1a      	cmp	r3, #26
 8016060:	d87c      	bhi.n	801615c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 8016062:	a201      	add	r2, pc, #4	@ (adr r2, 8016068 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 8016064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016068:	0801611b 	.word	0x0801611b
 801606c:	08016129 	.word	0x08016129
 8016070:	080160d5 	.word	0x080160d5
 8016074:	0801615d 	.word	0x0801615d
 8016078:	0801615d 	.word	0x0801615d
 801607c:	0801615d 	.word	0x0801615d
 8016080:	080160db 	.word	0x080160db
 8016084:	0801615d 	.word	0x0801615d
 8016088:	080160e9 	.word	0x080160e9
 801608c:	0801615d 	.word	0x0801615d
 8016090:	08016139 	.word	0x08016139
 8016094:	0801615d 	.word	0x0801615d
 8016098:	0801615d 	.word	0x0801615d
 801609c:	0801615d 	.word	0x0801615d
 80160a0:	0801615d 	.word	0x0801615d
 80160a4:	0801615d 	.word	0x0801615d
 80160a8:	0801615d 	.word	0x0801615d
 80160ac:	0801615d 	.word	0x0801615d
 80160b0:	0801615d 	.word	0x0801615d
 80160b4:	0801615d 	.word	0x0801615d
 80160b8:	0801615d 	.word	0x0801615d
 80160bc:	0801615d 	.word	0x0801615d
 80160c0:	080160f7 	.word	0x080160f7
 80160c4:	0801615d 	.word	0x0801615d
 80160c8:	08016109 	.word	0x08016109
 80160cc:	0801615d 	.word	0x0801615d
 80160d0:	0801614b 	.word	0x0801614b
        return content_.asBoolean;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	e041      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	4618      	mov	r0, r3
 80160e0:	f000 fa64 	bl	80165ac <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 80160e4:	4603      	mov	r3, r0
 80160e6:	e03a      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4618      	mov	r0, r3
 80160ee:	f000 fa6f 	bl	80165d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 80160f2:	4603      	mov	r3, r0
 80160f4:	e033      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fc:	4610      	mov	r0, r2
 80160fe:	4619      	mov	r1, r3
 8016100:	f000 fa78 	bl	80165f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8016104:	4603      	mov	r3, r0
 8016106:	e02a      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801610e:	4610      	mov	r0, r2
 8016110:	4619      	mov	r1, r3
 8016112:	f000 fa82 	bl	801661a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8016116:	4603      	mov	r3, r0
 8016118:	e021      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	4618      	mov	r0, r3
 8016120:	f000 fa8e 	bl	8016640 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8016124:	4603      	mov	r3, r0
 8016126:	e01a      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	3308      	adds	r3, #8
 801612e:	4618      	mov	r0, r3
 8016130:	f000 fa86 	bl	8016640 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8016134:	4603      	mov	r3, r0
 8016136:	e012      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	edd3 7a00 	vldr	s15, [r3]
 801613e:	eeb0 0a67 	vmov.f32	s0, s15
 8016142:	f000 fa91 	bl	8016668 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016146:	4603      	mov	r3, r0
 8016148:	e009      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	ed93 7b00 	vldr	d7, [r3]
 8016150:	eeb0 0b47 	vmov.f64	d0, d7
 8016154:	f000 faa1 	bl	801669a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016158:	4603      	mov	r3, r0
 801615a:	e000      	b.n	801615e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 801615c:	2300      	movs	r3, #0
  }
 801615e:	4618      	mov	r0, r3
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop

08016168 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8016168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801616c:	b090      	sub	sp, #64	@ 0x40
 801616e:	af04      	add	r7, sp, #16
 8016170:	6178      	str	r0, [r7, #20]
 8016172:	6139      	str	r1, [r7, #16]
 8016174:	60fa      	str	r2, [r7, #12]
 8016176:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8016178:	68fa      	ldr	r2, [r7, #12]
 801617a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801617e:	4611      	mov	r1, r2
 8016180:	4618      	mov	r0, r3
 8016182:	f000 faa3 	bl	80166cc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8016186:	f107 031c 	add.w	r3, r7, #28
 801618a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801618e:	4611      	mov	r1, r2
 8016190:	4618      	mov	r0, r3
 8016192:	f000 fab4 	bl	80166fe <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8016196:	f107 031c 	add.w	r3, r7, #28
 801619a:	4618      	mov	r0, r3
 801619c:	f000 fad7 	bl	801674e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80161a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 80161a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161a4:	4619      	mov	r1, r3
 80161a6:	2058      	movs	r0, #88	@ 0x58
 80161a8:	f7f4 fb4e 	bl	800a848 <_ZnwjPv>
 80161ac:	4604      	mov	r4, r0
 80161ae:	68b8      	ldr	r0, [r7, #8]
 80161b0:	f7ff fc26 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80161b4:	4680      	mov	r8, r0
 80161b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80161b8:	f7ff fc2d 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80161bc:	4681      	mov	r9, r0
 80161be:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80161c0:	f7ff fc34 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80161c4:	4605      	mov	r5, r0
 80161c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80161c8:	f7ff fc30 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80161cc:	4606      	mov	r6, r0
 80161ce:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80161d0:	f7fb f91f 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80161d4:	6078      	str	r0, [r7, #4]
 80161d6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80161d8:	f7ff fc33 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80161dc:	4603      	mov	r3, r0
 80161de:	9303      	str	r3, [sp, #12]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	9302      	str	r3, [sp, #8]
 80161e4:	9601      	str	r6, [sp, #4]
 80161e6:	9500      	str	r5, [sp, #0]
 80161e8:	464b      	mov	r3, r9
 80161ea:	4642      	mov	r2, r8
 80161ec:	4651      	mov	r1, sl
 80161ee:	4620      	mov	r0, r4
 80161f0:	f000 fabc 	bl	801676c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>
 80161f4:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 80161f6:	f107 031c 	add.w	r3, r7, #28
 80161fa:	2100      	movs	r1, #0
 80161fc:	4618      	mov	r0, r3
 80161fe:	f000 faf9 	bl	80167f4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016206:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8016208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801620a:	f000 fb02 	bl	8016812 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801620e:	4602      	mov	r2, r0
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	601a      	str	r2, [r3, #0]
	}
 8016214:	f107 031c 	add.w	r3, r7, #28
 8016218:	4618      	mov	r0, r3
 801621a:	f000 fa83 	bl	8016724 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801621e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016222:	4618      	mov	r0, r3
 8016224:	f000 fa5f 	bl	80166e6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	4618      	mov	r0, r3
 801622c:	3730      	adds	r7, #48	@ 0x30
 801622e:	46bd      	mov	sp, r7
 8016230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016234 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8016234:	b580      	push	{r7, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	1d1a      	adds	r2, r3, #4
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d002      	beq.n	801624e <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	3318      	adds	r3, #24
 801624c:	e000      	b.n	8016250 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 801624e:	2300      	movs	r3, #0
 8016250:	4619      	mov	r1, r3
 8016252:	4610      	mov	r0, r2
 8016254:	f000 faeb 	bl	801682e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8016258:	60f8      	str	r0, [r7, #12]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d006      	beq.n	801626e <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	3304      	adds	r3, #4
 8016264:	461a      	mov	r2, r3
 8016266:	6839      	ldr	r1, [r7, #0]
 8016268:	68f8      	ldr	r0, [r7, #12]
 801626a:	f000 faec 	bl	8016846 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801626e:	bf00      	nop
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}

08016276 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8016276:	b580      	push	{r7, lr}
 8016278:	b082      	sub	sp, #8
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	4618      	mov	r0, r3
 8016282:	f000 faf0 	bl	8016866 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f000 faf4 	bl	8016886 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801629e:	4603      	mov	r3, r0
 80162a0:	4618      	mov	r0, r3
 80162a2:	3708      	adds	r7, #8
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b082      	sub	sp, #8
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f000 faf5 	bl	80168a0 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80162b6:	4603      	mov	r3, r0
 80162b8:	4618      	mov	r0, r3
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}

080162c0 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b082      	sub	sp, #8
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f000 faf4 	bl	80168b8 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80162d0:	4603      	mov	r3, r0
 80162d2:	4618      	mov	r0, r3
 80162d4:	3708      	adds	r7, #8
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 80162da:	b580      	push	{r7, lr}
 80162dc:	b082      	sub	sp, #8
 80162de:	af00      	add	r7, sp, #0
 80162e0:	6078      	str	r0, [r7, #4]
 80162e2:	6039      	str	r1, [r7, #0]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	463a      	mov	r2, r7
 80162e8:	4611      	mov	r1, r2
 80162ea:	4618      	mov	r0, r3
 80162ec:	f000 faf0 	bl	80168d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	4618      	mov	r0, r3
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
	...

080162fc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 80162fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016300:	b08e      	sub	sp, #56	@ 0x38
 8016302:	af00      	add	r7, sp, #0
 8016304:	60f8      	str	r0, [r7, #12]
 8016306:	60b9      	str	r1, [r7, #8]
 8016308:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 801630a:	6879      	ldr	r1, [r7, #4]
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f7f0 f825 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8016312:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	791b      	ldrb	r3, [r3, #4]
 8016318:	3b03      	subs	r3, #3
 801631a:	2b3d      	cmp	r3, #61	@ 0x3d
 801631c:	f200 8111 	bhi.w	8016542 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x246>
 8016320:	a201      	add	r2, pc, #4	@ (adr r2, 8016328 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 8016322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016326:	bf00      	nop
 8016328:	080164ad 	.word	0x080164ad
 801632c:	08016465 	.word	0x08016465
 8016330:	08016485 	.word	0x08016485
 8016334:	08016529 	.word	0x08016529
 8016338:	08016543 	.word	0x08016543
 801633c:	08016543 	.word	0x08016543
 8016340:	08016543 	.word	0x08016543
 8016344:	080164f1 	.word	0x080164f1
 8016348:	08016543 	.word	0x08016543
 801634c:	080164d9 	.word	0x080164d9
 8016350:	08016543 	.word	0x08016543
 8016354:	08016421 	.word	0x08016421
 8016358:	08016543 	.word	0x08016543
 801635c:	08016543 	.word	0x08016543
 8016360:	08016543 	.word	0x08016543
 8016364:	08016543 	.word	0x08016543
 8016368:	08016543 	.word	0x08016543
 801636c:	08016543 	.word	0x08016543
 8016370:	08016543 	.word	0x08016543
 8016374:	08016543 	.word	0x08016543
 8016378:	08016543 	.word	0x08016543
 801637c:	08016543 	.word	0x08016543
 8016380:	08016543 	.word	0x08016543
 8016384:	08016519 	.word	0x08016519
 8016388:	08016543 	.word	0x08016543
 801638c:	08016509 	.word	0x08016509
 8016390:	08016543 	.word	0x08016543
 8016394:	08016435 	.word	0x08016435
 8016398:	08016543 	.word	0x08016543
 801639c:	08016457 	.word	0x08016457
 80163a0:	08016543 	.word	0x08016543
 80163a4:	08016543 	.word	0x08016543
 80163a8:	08016543 	.word	0x08016543
 80163ac:	08016543 	.word	0x08016543
 80163b0:	08016543 	.word	0x08016543
 80163b4:	08016543 	.word	0x08016543
 80163b8:	08016543 	.word	0x08016543
 80163bc:	08016543 	.word	0x08016543
 80163c0:	08016543 	.word	0x08016543
 80163c4:	08016543 	.word	0x08016543
 80163c8:	08016543 	.word	0x08016543
 80163cc:	08016543 	.word	0x08016543
 80163d0:	08016543 	.word	0x08016543
 80163d4:	08016543 	.word	0x08016543
 80163d8:	08016543 	.word	0x08016543
 80163dc:	08016543 	.word	0x08016543
 80163e0:	08016543 	.word	0x08016543
 80163e4:	08016543 	.word	0x08016543
 80163e8:	08016543 	.word	0x08016543
 80163ec:	08016543 	.word	0x08016543
 80163f0:	08016543 	.word	0x08016543
 80163f4:	08016543 	.word	0x08016543
 80163f8:	08016543 	.word	0x08016543
 80163fc:	08016543 	.word	0x08016543
 8016400:	08016543 	.word	0x08016543
 8016404:	08016543 	.word	0x08016543
 8016408:	08016543 	.word	0x08016543
 801640c:	08016543 	.word	0x08016543
 8016410:	08016543 	.word	0x08016543
 8016414:	08016543 	.word	0x08016543
 8016418:	08016543 	.word	0x08016543
 801641c:	08016449 	.word	0x08016449
        return visit.visit(content_.asFloat);
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	edd3 7a00 	vldr	s15, [r3]
 8016426:	eeb0 0a67 	vmov.f32	s0, s15
 801642a:	68b8      	ldr	r0, [r7, #8]
 801642c:	f000 fa63 	bl	80168f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8016430:	4603      	mov	r3, r0
 8016432:	e08c      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asDouble);
 8016434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016436:	ed93 7b00 	vldr	d7, [r3]
 801643a:	eeb0 0b47 	vmov.f64	d0, d7
 801643e:	68b8      	ldr	r0, [r7, #8]
 8016440:	f000 fa6d 	bl	801691e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8016444:	4603      	mov	r3, r0
 8016446:	e082      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asArray);
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	4619      	mov	r1, r3
 801644c:	68b8      	ldr	r0, [r7, #8]
 801644e:	f000 fa7a 	bl	8016946 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 8016452:	4603      	mov	r3, r0
 8016454:	e07b      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asObject);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	4619      	mov	r1, r3
 801645a:	68b8      	ldr	r0, [r7, #8]
 801645c:	f000 fab1 	bl	80169c2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 8016460:	4603      	mov	r3, r0
 8016462:	e074      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asLinkedString, true));
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	6819      	ldr	r1, [r3, #0]
 8016468:	f107 0314 	add.w	r3, r7, #20
 801646c:	2201      	movs	r2, #1
 801646e:	4618      	mov	r0, r3
 8016470:	f7ee fed1 	bl	8005216 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8016474:	f107 0314 	add.w	r3, r7, #20
 8016478:	cb0e      	ldmia	r3, {r1, r2, r3}
 801647a:	68b8      	ldr	r0, [r7, #8]
 801647c:	f000 faeb 	bl	8016a56 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8016480:	4603      	mov	r3, r0
 8016482:	e064      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length));
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016490:	88da      	ldrh	r2, [r3, #6]
 8016492:	f107 0020 	add.w	r0, r7, #32
 8016496:	2300      	movs	r3, #0
 8016498:	f7f0 feb8 	bl	800720c <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 801649c:	f107 0320 	add.w	r3, r7, #32
 80164a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164a2:	68b8      	ldr	r0, [r7, #8]
 80164a4:	f000 fad7 	bl	8016a56 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80164a8:	4603      	mov	r3, r0
                                      content_.asOwnedString->length));
 80164aa:	e050      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(RawString(content_.asOwnedString->data,
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 80164ba:	461a      	mov	r2, r3
 80164bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7ff fbd5 	bl	8015c70 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>
 80164c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80164ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80164ce:	68b8      	ldr	r0, [r7, #8]
 80164d0:	f000 fae0 	bl	8016a94 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 80164d4:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 80164d6:	e03a      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	17da      	asrs	r2, r3, #31
 80164de:	4698      	mov	r8, r3
 80164e0:	4691      	mov	r9, r2
 80164e2:	4642      	mov	r2, r8
 80164e4:	464b      	mov	r3, r9
 80164e6:	68b8      	ldr	r0, [r7, #8]
 80164e8:	f000 faf3 	bl	8016ad2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 80164ec:	4603      	mov	r3, r0
 80164ee:	e02e      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	2200      	movs	r2, #0
 80164f6:	461c      	mov	r4, r3
 80164f8:	4615      	mov	r5, r2
 80164fa:	4622      	mov	r2, r4
 80164fc:	462b      	mov	r3, r5
 80164fe:	68b8      	ldr	r0, [r7, #8]
 8016500:	f000 fafb 	bl	8016afa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 8016504:	4603      	mov	r3, r0
 8016506:	e022      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asInt64);
 8016508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650e:	68b8      	ldr	r0, [r7, #8]
 8016510:	f000 fadf 	bl	8016ad2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 8016514:	4603      	mov	r3, r0
 8016516:	e01a      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asUint64);
 8016518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801651e:	68b8      	ldr	r0, [r7, #8]
 8016520:	f000 faeb 	bl	8016afa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 8016524:	4603      	mov	r3, r0
 8016526:	e012      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asBoolean != 0);
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	781b      	ldrb	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	bf14      	ite	ne
 8016530:	2301      	movne	r3, #1
 8016532:	2300      	moveq	r3, #0
 8016534:	b2db      	uxtb	r3, r3
 8016536:	4619      	mov	r1, r3
 8016538:	68b8      	ldr	r0, [r7, #8]
 801653a:	f000 faf2 	bl	8016b22 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 801653e:	4603      	mov	r3, r0
 8016540:	e005      	b.n	801654e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(nullptr);
 8016542:	2100      	movs	r1, #0
 8016544:	68b8      	ldr	r0, [r7, #8]
 8016546:	f000 f807 	bl	8016558 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 801654a:	4603      	mov	r3, r0
 801654c:	bf00      	nop
  }
 801654e:	4618      	mov	r0, r3
 8016550:	3738      	adds	r7, #56	@ 0x38
 8016552:	46bd      	mov	sp, r7
 8016554:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08016558 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	4905      	ldr	r1, [pc, #20]	@ (801657c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 8016566:	4618      	mov	r0, r3
 8016568:	f000 faef 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f000 faff 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016572:	4603      	mov	r3, r0
  }
 8016574:	4618      	mov	r0, r3
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	0802ac20 	.word	0x0802ac20

08016580 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016588:	f107 0308 	add.w	r3, r7, #8
 801658c:	6879      	ldr	r1, [r7, #4]
 801658e:	4618      	mov	r0, r3
 8016590:	f7f0 f948 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016594:	f107 0308 	add.w	r3, r7, #8
 8016598:	4618      	mov	r0, r3
 801659a:	f000 faf7 	bl	8016b8c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 801659e:	eef0 7a40 	vmov.f32	s15, s0
}
 80165a2:	eeb0 0a67 	vmov.f32	s0, s15
 80165a6:	3718      	adds	r7, #24
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}

080165ac <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b082      	sub	sp, #8
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 fb2f 	bl	8016c18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d002      	beq.n	80165c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	e000      	b.n	80165c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 80165c6:	2300      	movs	r3, #0
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 fb2f 	bl	8016c3c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80165de:	4603      	mov	r3, r0
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d002      	beq.n	80165ea <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	e000      	b.n	80165ec <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 80165ea:	2300      	movs	r3, #0
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3708      	adds	r7, #8
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80165fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016602:	f000 fb32 	bl	8016c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8016606:	4603      	mov	r3, r0
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 801660c:	883b      	ldrh	r3, [r7, #0]
 801660e:	e000      	b.n	8016612 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 8016610:	2300      	movs	r3, #0
}
 8016612:	4618      	mov	r0, r3
 8016614:	3708      	adds	r7, #8
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}

0801661a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 801661a:	b580      	push	{r7, lr}
 801661c:	b082      	sub	sp, #8
 801661e:	af00      	add	r7, sp, #0
 8016620:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016624:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016628:	f000 fb38 	bl	8016c9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801662c:	4603      	mov	r3, r0
 801662e:	2b00      	cmp	r3, #0
 8016630:	d001      	beq.n	8016636 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 8016632:	883b      	ldrh	r3, [r7, #0]
 8016634:	e000      	b.n	8016638 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 8016636:	2300      	movs	r3, #0
}
 8016638:	4618      	mov	r0, r3
 801663a:	3708      	adds	r7, #8
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}

08016640 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 8016640:	b580      	push	{r7, lr}
 8016642:	b086      	sub	sp, #24
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016648:	f107 0308 	add.w	r3, r7, #8
 801664c:	6879      	ldr	r1, [r7, #4]
 801664e:	4618      	mov	r0, r3
 8016650:	f7f0 f8e8 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016654:	f107 0308 	add.w	r3, r7, #8
 8016658:	4618      	mov	r0, r3
 801665a:	f000 fb3f 	bl	8016cdc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 801665e:	4603      	mov	r3, r0
}
 8016660:	4618      	mov	r0, r3
 8016662:	3718      	adds	r7, #24
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016672:	ed97 0a01 	vldr	s0, [r7, #4]
 8016676:	f000 fb77 	bl	8016d68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d007      	beq.n	8016690 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 8016680:	edd7 7a01 	vldr	s15, [r7, #4]
 8016684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016688:	ee17 3a90 	vmov	r3, s15
 801668c:	b29b      	uxth	r3, r3
 801668e:	e000      	b.n	8016692 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 8016690:	2300      	movs	r3, #0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 801669a:	b580      	push	{r7, lr}
 801669c:	b082      	sub	sp, #8
 801669e:	af00      	add	r7, sp, #0
 80166a0:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80166a4:	ed97 0b00 	vldr	d0, [r7]
 80166a8:	f000 fb86 	bl	8016db8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80166ac:	4603      	mov	r3, r0
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d007      	beq.n	80166c2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 80166b2:	ed97 7b00 	vldr	d7, [r7]
 80166b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80166ba:	ee17 3a90 	vmov	r3, s15
 80166be:	b29b      	uxth	r3, r3
 80166c0:	e000      	b.n	80166c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 80166c2:	2300      	movs	r3, #0
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3708      	adds	r7, #8
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}

080166cc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f000 fb96 	bl	8016e08 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	4618      	mov	r0, r3
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b082      	sub	sp, #8
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 fb95 	bl	8016e1e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	4618      	mov	r0, r3
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80166fe:	b580      	push	{r7, lr}
 8016700:	b082      	sub	sp, #8
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8016708:	2101      	movs	r1, #1
 801670a:	6838      	ldr	r0, [r7, #0]
 801670c:	f000 fb92 	bl	8016e34 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8016710:	4603      	mov	r3, r0
 8016712:	461a      	mov	r2, r3
 8016714:	6839      	ldr	r1, [r7, #0]
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f000 fb9b 	bl	8016e52 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}

08016724 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8016724:	b580      	push	{r7, lr}
 8016726:	b082      	sub	sp, #8
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d007      	beq.n	8016744 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6818      	ldr	r0, [r3, #0]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	2201      	movs	r2, #1
 801673e:	4619      	mov	r1, r3
 8016740:	f000 fb9b 	bl	8016e7a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	4618      	mov	r0, r3
 8016748:	3708      	adds	r7, #8
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}

0801674e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801674e:	b580      	push	{r7, lr}
 8016750:	b082      	sub	sp, #8
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	4618      	mov	r0, r3
 801675c:	f000 fb9c 	bl	8016e98 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8016760:	4603      	mov	r3, r0
 8016762:	4618      	mov	r0, r3
 8016764:	3708      	adds	r7, #8
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
	...

0801676c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016770:	b088      	sub	sp, #32
 8016772:	af04      	add	r7, sp, #16
 8016774:	60f8      	str	r0, [r7, #12]
 8016776:	7239      	strb	r1, [r7, #8]
 8016778:	607a      	str	r2, [r7, #4]
 801677a:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	4618      	mov	r0, r3
 8016780:	f7f7 fd0a 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8016784:	4a1a      	ldr	r2, [pc, #104]	@ (80167f0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_+0x84>)
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	601a      	str	r2, [r3, #0]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	330c      	adds	r3, #12
 801678e:	4621      	mov	r1, r4
 8016790:	4618      	mov	r0, r3
 8016792:	f000 fb8c 	bl	8016eae <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8016796:	68f8      	ldr	r0, [r7, #12]
 8016798:	f000 f83b 	bl	8016812 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801679c:	4680      	mov	r8, r0
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7ff f92e 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80167a4:	4681      	mov	r9, r0
 80167a6:	6838      	ldr	r0, [r7, #0]
 80167a8:	f7ff f935 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80167ac:	4682      	mov	sl, r0
 80167ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167b0:	f7ff f93c 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80167b4:	4604      	mov	r4, r0
 80167b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80167b8:	f7ff f938 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80167bc:	4605      	mov	r5, r0
 80167be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80167c0:	f7fa fe27 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80167c4:	4606      	mov	r6, r0
 80167c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80167c8:	f7ff f93b 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80167cc:	4603      	mov	r3, r0
 80167ce:	f107 0008 	add.w	r0, r7, #8
 80167d2:	9303      	str	r3, [sp, #12]
 80167d4:	9602      	str	r6, [sp, #8]
 80167d6:	9501      	str	r5, [sp, #4]
 80167d8:	9400      	str	r4, [sp, #0]
 80167da:	4653      	mov	r3, sl
 80167dc:	464a      	mov	r2, r9
 80167de:	4641      	mov	r1, r8
 80167e0:	f000 fb74 	bl	8016ecc <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>
	}
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	4618      	mov	r0, r3
 80167e8:	3710      	adds	r7, #16
 80167ea:	46bd      	mov	sp, r7
 80167ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167f0:	0802b4c4 	.word	0x0802b4c4

080167f4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	2200      	movs	r2, #0
 8016802:	605a      	str	r2, [r3, #4]
	return *this;
 8016804:	687b      	ldr	r3, [r7, #4]
      }
 8016806:	4618      	mov	r0, r3
 8016808:	370c      	adds	r7, #12
 801680a:	46bd      	mov	sp, r7
 801680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016810:	4770      	bx	lr

08016812 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8016812:	b580      	push	{r7, lr}
 8016814:	b082      	sub	sp, #8
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	330c      	adds	r3, #12
 801681e:	4618      	mov	r0, r3
 8016820:	f000 fb82 	bl	8016f28 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 8016824:	4603      	mov	r3, r0
 8016826:	4618      	mov	r0, r3
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}

0801682e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>:
      __enable_shared_from_this_base(const __shared_count<>&,
 801682e:	b480      	push	{r7}
 8016830:	b083      	sub	sp, #12
 8016832:	af00      	add	r7, sp, #0
 8016834:	6078      	str	r0, [r7, #4]
 8016836:	6039      	str	r1, [r7, #0]
      { return __p; }
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	4618      	mov	r0, r3
 801683c:	370c      	adds	r7, #12
 801683e:	46bd      	mov	sp, r7
 8016840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016844:	4770      	bx	lr

08016846 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8016846:	b580      	push	{r7, lr}
 8016848:	b084      	sub	sp, #16
 801684a:	af00      	add	r7, sp, #0
 801684c:	60f8      	str	r0, [r7, #12]
 801684e:	60b9      	str	r1, [r7, #8]
 8016850:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	68b9      	ldr	r1, [r7, #8]
 8016858:	4618      	mov	r0, r3
 801685a:	f000 fb71 	bl	8016f40 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 801685e:	bf00      	nop
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8016866:	b580      	push	{r7, lr}
 8016868:	b082      	sub	sp, #8
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 fb84 	bl	8016f7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	4618      	mov	r0, r3
 8016878:	f000 fb8c 	bl	8016f94 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}

08016886 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8016886:	b580      	push	{r7, lr}
 8016888:	b082      	sub	sp, #8
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4618      	mov	r0, r3
 8016892:	f000 fb8d 	bl	8016fb0 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>
 8016896:	4603      	mov	r3, r0
 8016898:	4618      	mov	r0, r3
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f000 fb8c 	bl	8016fc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>
 80168ae:	4603      	mov	r3, r0
 80168b0:	4618      	mov	r0, r3
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 fb8c 	bl	8016fde <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 80168c6:	4603      	mov	r3, r0
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 80168d0:	b480      	push	{r7}
 80168d2:	b083      	sub	sp, #12
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	6039      	str	r1, [r7, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	683a      	ldr	r2, [r7, #0]
 80168de:	6812      	ldr	r2, [r2, #0]
 80168e0:	601a      	str	r2, [r3, #0]
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	605a      	str	r2, [r3, #4]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	4618      	mov	r0, r3
 80168ec:	370c      	adds	r7, #12
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr

080168f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 80168f6:	b580      	push	{r7, lr}
 80168f8:	b082      	sub	sp, #8
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	6078      	str	r0, [r7, #4]
 80168fe:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	ed97 0a00 	vldr	s0, [r7]
 8016908:	4618      	mov	r0, r3
 801690a:	f000 fbac 	bl	8017066 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f000 f92e 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016914:	4603      	mov	r3, r0
  }
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 801691e:	b580      	push	{r7, lr}
 8016920:	b084      	sub	sp, #16
 8016922:	af00      	add	r7, sp, #0
 8016924:	60f8      	str	r0, [r7, #12]
 8016926:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	ed97 0b00 	vldr	d0, [r7]
 8016930:	4618      	mov	r0, r3
 8016932:	f000 fbac 	bl	801708e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f000 f91a 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 801693c:	4603      	mov	r3, r0
  }
 801693e:	4618      	mov	r0, r3
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 8016946:	b580      	push	{r7, lr}
 8016948:	b084      	sub	sp, #16
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
 801694e:	6039      	str	r1, [r7, #0]
    write('[');
 8016950:	215b      	movs	r1, #91	@ 0x5b
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f000 fbab 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	4618      	mov	r0, r3
 801695c:	f7fe f939 	bl	8014bd2 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016960:	4603      	mov	r3, r0
 8016962:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 8016964:	e01c      	b.n	80169a0 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	89fa      	ldrh	r2, [r7, #14]
 801696c:	4611      	mov	r1, r2
 801696e:	4618      	mov	r0, r3
 8016970:	f7ef fac5 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016974:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	689b      	ldr	r3, [r3, #8]
 801697a:	461a      	mov	r2, r3
 801697c:	6879      	ldr	r1, [r7, #4]
 801697e:	68b8      	ldr	r0, [r7, #8]
 8016980:	f7ff fcbc 	bl	80162fc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016984:	68b8      	ldr	r0, [r7, #8]
 8016986:	f7ee fd23 	bl	80053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 801698a:	4603      	mov	r3, r0
 801698c:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 801698e:	89fb      	ldrh	r3, [r7, #14]
 8016990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016994:	4293      	cmp	r3, r2
 8016996:	d003      	beq.n	80169a0 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 8016998:	212c      	movs	r1, #44	@ 0x2c
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 fb87 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 80169a0:	89fb      	ldrh	r3, [r7, #14]
 80169a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169a6:	4293      	cmp	r3, r2
 80169a8:	d1dd      	bne.n	8016966 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 80169aa:	215d      	movs	r1, #93	@ 0x5d
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 fb7e 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f000 f8dc 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80169b8:	4603      	mov	r3, r0
  }
 80169ba:	4618      	mov	r0, r3
 80169bc:	3710      	adds	r7, #16
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b084      	sub	sp, #16
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	6039      	str	r1, [r7, #0]
    write('{');
 80169cc:	217b      	movs	r1, #123	@ 0x7b
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 fb6d 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7fe f8fb 	bl	8014bd2 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 80169dc:	4603      	mov	r3, r0
 80169de:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 80169e0:	2301      	movs	r3, #1
 80169e2:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 80169e4:	e026      	b.n	8016a34 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	689b      	ldr	r3, [r3, #8]
 80169ea:	89fa      	ldrh	r2, [r7, #14]
 80169ec:	4611      	mov	r1, r2
 80169ee:	4618      	mov	r0, r3
 80169f0:	f7ef fa85 	bl	8005efe <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80169f4:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	689b      	ldr	r3, [r3, #8]
 80169fa:	461a      	mov	r2, r3
 80169fc:	6879      	ldr	r1, [r7, #4]
 80169fe:	68b8      	ldr	r0, [r7, #8]
 8016a00:	f7ff fc7c 	bl	80162fc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016a04:	68b8      	ldr	r0, [r7, #8]
 8016a06:	f7ee fce3 	bl	80053d0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016a0e:	89fb      	ldrh	r3, [r7, #14]
 8016a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d009      	beq.n	8016a2c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8016a18:	7b7b      	ldrb	r3, [r7, #13]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8016a1e:	233a      	movs	r3, #58	@ 0x3a
 8016a20:	e000      	b.n	8016a24 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 8016a22:	232c      	movs	r3, #44	@ 0x2c
 8016a24:	4619      	mov	r1, r3
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 fb41 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8016a2c:	7b7b      	ldrb	r3, [r7, #13]
 8016a2e:	f083 0301 	eor.w	r3, r3, #1
 8016a32:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016a34:	89fb      	ldrh	r3, [r7, #14]
 8016a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d1d3      	bne.n	80169e6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8016a3e:	217d      	movs	r1, #125	@ 0x7d
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 fb34 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 f892 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016a4c:	4603      	mov	r3, r0
  }
 8016a4e:	4618      	mov	r0, r3
 8016a50:	3710      	adds	r7, #16
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}

08016a56 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 8016a56:	b5b0      	push	{r4, r5, r7, lr}
 8016a58:	b084      	sub	sp, #16
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	60f8      	str	r0, [r7, #12]
 8016a5e:	4638      	mov	r0, r7
 8016a60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 8016a64:	68fc      	ldr	r4, [r7, #12]
 8016a66:	463b      	mov	r3, r7
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7ee fbef 	bl	800524c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8016a6e:	4605      	mov	r5, r0
 8016a70:	463b      	mov	r3, r7
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7fe f88e 	bl	8014b94 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f000 fb25 	bl	80170ce <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 8016a84:	68f8      	ldr	r0, [r7, #12]
 8016a86:	f000 f873 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016a8a:	4603      	mov	r3, r0
  }
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bdb0      	pop	{r4, r5, r7, pc}

08016a94 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 8016a94:	b5b0      	push	{r4, r5, r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	1d3b      	adds	r3, r7, #4
 8016a9e:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 8016aa2:	68fc      	ldr	r4, [r7, #12]
 8016aa4:	1d3b      	adds	r3, r7, #4
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7fe fcba 	bl	8015420 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>
 8016aac:	4605      	mov	r5, r0
 8016aae:	1d3b      	adds	r3, r7, #4
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7fe fca9 	bl	8015408 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	461a      	mov	r2, r3
 8016aba:	4629      	mov	r1, r5
 8016abc:	4620      	mov	r0, r4
 8016abe:	f000 fb2b 	bl	8017118 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8016ac2:	68f8      	ldr	r0, [r7, #12]
 8016ac4:	f000 f854 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016ac8:	4603      	mov	r3, r0
  }
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bdb0      	pop	{r4, r5, r7, pc}

08016ad2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 8016ad2:	b580      	push	{r7, lr}
 8016ad4:	b084      	sub	sp, #16
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	60f8      	str	r0, [r7, #12]
 8016ada:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016ade:	68f9      	ldr	r1, [r7, #12]
 8016ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ae4:	4608      	mov	r0, r1
 8016ae6:	f000 fb27 	bl	8017138 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016aea:	68f8      	ldr	r0, [r7, #12]
 8016aec:	f000 f840 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016af0:	4603      	mov	r3, r0
  }
 8016af2:	4618      	mov	r0, r3
 8016af4:	3710      	adds	r7, #16
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b084      	sub	sp, #16
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	60f8      	str	r0, [r7, #12]
 8016b02:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016b06:	68f9      	ldr	r1, [r7, #12]
 8016b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b0c:	4608      	mov	r0, r1
 8016b0e:	f000 fb37 	bl	8017180 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016b12:	68f8      	ldr	r0, [r7, #12]
 8016b14:	f000 f82c 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b18:	4603      	mov	r3, r0
  }
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3710      	adds	r7, #16
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b082      	sub	sp, #8
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	78fa      	ldrb	r2, [r7, #3]
 8016b32:	4611      	mov	r1, r2
 8016b34:	4618      	mov	r0, r3
 8016b36:	f000 fb59 	bl	80171ec <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f000 f818 	bl	8016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b40:	4603      	mov	r3, r0
  }
 8016b42:	4618      	mov	r0, r3
 8016b44:	3708      	adds	r7, #8
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8016b4a:	b590      	push	{r4, r7, lr}
 8016b4c:	b083      	sub	sp, #12
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
 8016b52:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8016b54:	687c      	ldr	r4, [r7, #4]
 8016b56:	6838      	ldr	r0, [r7, #0]
 8016b58:	f7e9 fc22 	bl	80003a0 <strlen>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	461a      	mov	r2, r3
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	4620      	mov	r0, r4
 8016b64:	f000 fb5c 	bl	8017220 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8016b68:	bf00      	nop
 8016b6a:	370c      	adds	r7, #12
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd90      	pop	{r4, r7, pc}

08016b70 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b082      	sub	sp, #8
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f000 fb66 	bl	801724c <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b80:	4603      	mov	r3, r0
  }
 8016b82:	4618      	mov	r0, r3
 8016b84:	3708      	adds	r7, #8
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
	...

08016b8c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	3b01      	subs	r3, #1
 8016b9a:	2b03      	cmp	r3, #3
 8016b9c:	d832      	bhi.n	8016c04 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 8016b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8016ba4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8016ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ba4:	08016bb5 	.word	0x08016bb5
 8016ba8:	08016bc9 	.word	0x08016bc9
 8016bac:	08016bdd 	.word	0x08016bdd
 8016bb0:	08016bf1 	.word	0x08016bf1
        return convertNumber<T>(value_.asFloat);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8016bba:	eeb0 0a67 	vmov.f32	s0, s15
 8016bbe:	f000 fb52 	bl	8017266 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8016bc2:	eef0 7a40 	vmov.f32	s15, s0
 8016bc6:	e01f      	b.n	8016c08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016bce:	4610      	mov	r0, r2
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	f000 fb5f 	bl	8017294 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8016bd6:	eef0 7a40 	vmov.f32	s15, s0
 8016bda:	e015      	b.n	8016c08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016be2:	4610      	mov	r0, r2
 8016be4:	4619      	mov	r1, r3
 8016be6:	f000 fb70 	bl	80172ca <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 8016bea:	eef0 7a40 	vmov.f32	s15, s0
 8016bee:	e00b      	b.n	8016c08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	ed93 7b02 	vldr	d7, [r3, #8]
 8016bf6:	eeb0 0b47 	vmov.f64	d0, d7
 8016bfa:	f000 fb81 	bl	8017300 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 8016bfe:	eef0 7a40 	vmov.f32	s15, s0
 8016c02:	e001      	b.n	8016c08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 8016c04:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016c14 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 8016c08:	eeb0 0a67 	vmov.f32	s0, s15
 8016c0c:	3708      	adds	r7, #8
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	00000000 	.word	0x00000000

08016c18 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016c20:	f7fd ffaf 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016c24:	4603      	mov	r3, r0
 8016c26:	461a      	mov	r2, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4293      	cmp	r3, r2
 8016c2c:	bf94      	ite	ls
 8016c2e:	2301      	movls	r3, #1
 8016c30:	2300      	movhi	r3, #0
 8016c32:	b2db      	uxtb	r3, r3
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	da01      	bge.n	8016c4e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	e009      	b.n	8016c62 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016c4e:	f7fd ff98 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016c52:	4603      	mov	r3, r0
 8016c54:	461a      	mov	r2, r3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4293      	cmp	r3, r2
 8016c5a:	bfd4      	ite	le
 8016c5c:	2301      	movle	r3, #1
 8016c5e:	2300      	movgt	r3, #0
 8016c60:	b2db      	uxtb	r3, r3
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3708      	adds	r7, #8
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c6a:	b5b0      	push	{r4, r5, r7, lr}
 8016c6c:	b082      	sub	sp, #8
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016c74:	f7fd ff85 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	461c      	mov	r4, r3
 8016c80:	4615      	mov	r5, r2
 8016c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c86:	4294      	cmp	r4, r2
 8016c88:	eb75 0303 	sbcs.w	r3, r5, r3
 8016c8c:	bf2c      	ite	cs
 8016c8e:	2301      	movcs	r3, #1
 8016c90:	2300      	movcc	r3, #0
 8016c92:	b2db      	uxtb	r3, r3
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3708      	adds	r7, #8
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bdb0      	pop	{r4, r5, r7, pc}

08016c9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c9c:	b5b0      	push	{r4, r5, r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8016ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	da01      	bge.n	8016cb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	e00f      	b.n	8016cd2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016cb2:	f7fd ff66 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	b29b      	uxth	r3, r3
 8016cba:	2200      	movs	r2, #0
 8016cbc:	461c      	mov	r4, r3
 8016cbe:	4615      	mov	r5, r2
 8016cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cc4:	4294      	cmp	r4, r2
 8016cc6:	eb75 0303 	sbcs.w	r3, r5, r3
 8016cca:	bfac      	ite	ge
 8016ccc:	2301      	movge	r3, #1
 8016cce:	2300      	movlt	r3, #0
 8016cd0:	b2db      	uxtb	r3, r3
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016cdc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	3b01      	subs	r3, #1
 8016cea:	2b03      	cmp	r3, #3
 8016cec:	d82e      	bhi.n	8016d4c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 8016cee:	a201      	add	r2, pc, #4	@ (adr r2, 8016cf4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8016cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cf4:	08016d05 	.word	0x08016d05
 8016cf8:	08016d17 	.word	0x08016d17
 8016cfc:	08016d29 	.word	0x08016d29
 8016d00:	08016d3b 	.word	0x08016d3b
        return convertNumber<T>(value_.asFloat);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8016d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8016d0e:	f7ff fcab 	bl	8016668 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016d12:	4603      	mov	r3, r0
 8016d14:	e01b      	b.n	8016d4e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d1c:	4610      	mov	r0, r2
 8016d1e:	4619      	mov	r1, r3
 8016d20:	f7ff fc7b 	bl	801661a <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8016d24:	4603      	mov	r3, r0
 8016d26:	e012      	b.n	8016d4e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d2e:	4610      	mov	r0, r2
 8016d30:	4619      	mov	r1, r3
 8016d32:	f7ff fc5f 	bl	80165f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8016d36:	4603      	mov	r3, r0
 8016d38:	e009      	b.n	8016d4e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8016d40:	eeb0 0b47 	vmov.f64	d0, d7
 8016d44:	f7ff fca9 	bl	801669a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	e000      	b.n	8016d4e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 8016d4c:	2300      	movs	r3, #0
  }
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3708      	adds	r7, #8
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop

08016d58 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 8016d58:	b480      	push	{r7}
 8016d5a:	af00      	add	r7, sp, #0
    return 0;
 8016d5c:	2300      	movs	r3, #0
  }
 8016d5e:	4618      	mov	r0, r3
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8016d72:	f7ff fff1 	bl	8016d58 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016d76:	4603      	mov	r3, r0
 8016d78:	ee07 3a90 	vmov	s15, r3
 8016d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d80:	ed97 7a01 	vldr	s14, [r7, #4]
 8016d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d8c:	db0f      	blt.n	8016dae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016d8e:	f7fd fef8 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016d92:	4603      	mov	r3, r0
 8016d94:	ee07 3a90 	vmov	s15, r3
 8016d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016d9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8016da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da8:	d801      	bhi.n	8016dae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016daa:	2301      	movs	r3, #1
 8016dac:	e000      	b.n	8016db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016dae:	2300      	movs	r3, #0
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3708      	adds	r7, #8
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b082      	sub	sp, #8
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8016dc2:	f7ff ffc9 	bl	8016d58 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	ee07 3a90 	vmov	s15, r3
 8016dcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016dd0:	ed97 6b00 	vldr	d6, [r7]
 8016dd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ddc:	db0f      	blt.n	8016dfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016dde:	f7fd fed0 	bl	8014b82 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016de2:	4603      	mov	r3, r0
 8016de4:	ee07 3a90 	vmov	s15, r3
 8016de8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016dec:	ed97 6b00 	vldr	d6, [r7]
 8016df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df8:	d801      	bhi.n	8016dfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	e000      	b.n	8016e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016dfe:	2300      	movs	r3, #0
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3708      	adds	r7, #8
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	4618      	mov	r0, r3
 8016e14:	370c      	adds	r7, #12
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr

08016e1e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016e1e:	b480      	push	{r7}
 8016e20:	b083      	sub	sp, #12
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr

08016e34 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8016e3e:	2200      	movs	r2, #0
 8016e40:	6839      	ldr	r1, [r7, #0]
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f000 fa76 	bl	8017334 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}

08016e52 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8016e52:	b580      	push	{r7, lr}
 8016e54:	b084      	sub	sp, #16
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	60f8      	str	r0, [r7, #12]
 8016e5a:	60b9      	str	r1, [r7, #8]
 8016e5c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8016e5e:	68b8      	ldr	r0, [r7, #8]
 8016e60:	f000 fa96 	bl	8017390 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8016e64:	4602      	mov	r2, r0
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	687a      	ldr	r2, [r7, #4]
 8016e6e:	605a      	str	r2, [r3, #4]
      { }
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016e7a:	b580      	push	{r7, lr}
 8016e7c:	b084      	sub	sp, #16
 8016e7e:	af00      	add	r7, sp, #0
 8016e80:	60f8      	str	r0, [r7, #12]
 8016e82:	60b9      	str	r1, [r7, #8]
 8016e84:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	68b9      	ldr	r1, [r7, #8]
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f000 fa8b 	bl	80173a6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8016e90:	bf00      	nop
 8016e92:	3710      	adds	r7, #16
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8016e98:	b480      	push	{r7}
 8016e9a:	b083      	sub	sp, #12
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8016ea0:	687b      	ldr	r3, [r7, #4]
    }
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	370c      	adds	r7, #12
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b082      	sub	sp, #8
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]
 8016eb6:	7039      	strb	r1, [r7, #0]
 8016eb8:	463b      	mov	r3, r7
 8016eba:	4619      	mov	r1, r3
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f7f7 fb85 	bl	800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	3708      	adds	r7, #8
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}

08016ecc <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8016ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ed0:	b089      	sub	sp, #36	@ 0x24
 8016ed2:	af04      	add	r7, sp, #16
 8016ed4:	60f8      	str	r0, [r7, #12]
 8016ed6:	60b9      	str	r1, [r7, #8]
 8016ed8:	607a      	str	r2, [r7, #4]
 8016eda:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f7fe fd8f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	6838      	ldr	r0, [r7, #0]
 8016ee6:	f7fe fd96 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8016eea:	4680      	mov	r8, r0
 8016eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016eee:	f7fe fd9d 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016ef2:	4681      	mov	r9, r0
 8016ef4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016ef6:	f7fe fd99 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016efa:	4604      	mov	r4, r0
 8016efc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016efe:	f7fa fa88 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016f02:	4605      	mov	r5, r0
 8016f04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016f06:	f7fe fd9c 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	9302      	str	r3, [sp, #8]
 8016f0e:	9501      	str	r5, [sp, #4]
 8016f10:	9400      	str	r4, [sp, #0]
 8016f12:	464b      	mov	r3, r9
 8016f14:	4642      	mov	r2, r8
 8016f16:	4631      	mov	r1, r6
 8016f18:	68b8      	ldr	r0, [r7, #8]
 8016f1a:	f000 fa55 	bl	80173c8 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>
 8016f1e:	bf00      	nop
 8016f20:	3714      	adds	r7, #20
 8016f22:	46bd      	mov	sp, r7
 8016f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016f28 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f000 fa94 	bl	801745e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 8016f36:	4603      	mov	r3, r0
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3708      	adds	r7, #8
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>:
      }

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
      {
	if (use_count() == 0)
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	f000 fa91 	bl	8017474 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>
 8016f52:	4603      	mov	r3, r0
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bf0c      	ite	eq
 8016f58:	2301      	moveq	r3, #1
 8016f5a:	2300      	movne	r3, #0
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d008      	beq.n	8016f74 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE+0x34>
	  {
	    _M_ptr = __ptr;
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	601a      	str	r2, [r3, #0]
	    _M_refcount = __refcount;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	6879      	ldr	r1, [r7, #4]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 fa8e 	bl	8017490 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>
	  }
      }
 8016f74:	bf00      	nop
 8016f76:	3710      	adds	r7, #16
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>:
      _Tuple_impl()
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b082      	sub	sp, #8
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f000 faa2 	bl	80174ce <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3708      	adds	r7, #8
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}

08016f94 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8016f94:	b480      	push	{r7}
 8016f96:	b083      	sub	sp, #12
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	601a      	str	r2, [r3, #0]
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	370c      	adds	r7, #12
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fae:	4770      	bx	lr

08016fb0 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8016fb0:	b480      	push	{r7}
 8016fb2:	b083      	sub	sp, #12
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	370c      	adds	r7, #12
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc4:	4770      	bx	lr

08016fc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8016fc6:	b580      	push	{r7, lr}
 8016fc8:	b082      	sub	sp, #8
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f000 fa88 	bl	80174e4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3708      	adds	r7, #8
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b082      	sub	sp, #8
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f000 fa86 	bl	80174fa <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}

08016ff8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8016ff8:	b480      	push	{r7}
 8016ffa:	b083      	sub	sp, #12
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 8017002:	ed97 6b00 	vldr	d6, [r7]
 8017006:	ed97 7b00 	vldr	d7, [r7]
 801700a:	eeb4 6b47 	vcmp.f64	d6, d7
 801700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017012:	bf14      	ite	ne
 8017014:	2301      	movne	r3, #1
 8017016:	2300      	moveq	r3, #0
 8017018:	b2db      	uxtb	r3, r3
}
 801701a:	4618      	mov	r0, r3
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 8017026:	b480      	push	{r7}
 8017028:	b083      	sub	sp, #12
 801702a:	af00      	add	r7, sp, #0
 801702c:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8017030:	ed97 7b00 	vldr	d7, [r7]
 8017034:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703c:	d00c      	beq.n	8017058 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 801703e:	ed97 7b00 	vldr	d7, [r7]
 8017042:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017046:	ed97 6b00 	vldr	d6, [r7]
 801704a:	eeb4 6b47 	vcmp.f64	d6, d7
 801704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017052:	d101      	bne.n	8017058 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8017054:	2301      	movs	r3, #1
 8017056:	e000      	b.n	801705a <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x34>
 8017058:	2300      	movs	r3, #0
}
 801705a:	4618      	mov	r0, r3
 801705c:	370c      	adds	r7, #12
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr

08017066 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 8017066:	b580      	push	{r7, lr}
 8017068:	b082      	sub	sp, #8
 801706a:	af00      	add	r7, sp, #0
 801706c:	6078      	str	r0, [r7, #4]
 801706e:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8017072:	edd7 7a00 	vldr	s15, [r7]
 8017076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801707a:	2106      	movs	r1, #6
 801707c:	eeb0 0b47 	vmov.f64	d0, d7
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f000 fa45 	bl	8017510 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8017086:	bf00      	nop
 8017088:	3708      	adds	r7, #8
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}

0801708e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 801708e:	b580      	push	{r7, lr}
 8017090:	b084      	sub	sp, #16
 8017092:	af00      	add	r7, sp, #0
 8017094:	60f8      	str	r0, [r7, #12]
 8017096:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 801709a:	2109      	movs	r1, #9
 801709c:	ed97 0b00 	vldr	d0, [r7]
 80170a0:	68f8      	ldr	r0, [r7, #12]
 80170a2:	f000 fa35 	bl	8017510 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 80170a6:	bf00      	nop
 80170a8:	3710      	adds	r7, #16
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}

080170ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b082      	sub	sp, #8
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
 80170b6:	460b      	mov	r3, r1
 80170b8:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	78fa      	ldrb	r2, [r7, #3]
 80170be:	4611      	mov	r1, r2
 80170c0:	4618      	mov	r0, r3
 80170c2:	f000 fa83 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80170c6:	bf00      	nop
 80170c8:	3708      	adds	r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}

080170ce <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 80170ce:	b580      	push	{r7, lr}
 80170d0:	b084      	sub	sp, #16
 80170d2:	af00      	add	r7, sp, #0
 80170d4:	60f8      	str	r0, [r7, #12]
 80170d6:	60b9      	str	r1, [r7, #8]
 80170d8:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 80170da:	2122      	movs	r1, #34	@ 0x22
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f000 fa75 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 80170e2:	e007      	b.n	80170f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	1c5a      	adds	r2, r3, #1
 80170e8:	60ba      	str	r2, [r7, #8]
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	4619      	mov	r1, r3
 80170ee:	68f8      	ldr	r0, [r7, #12]
 80170f0:	f000 fa7c 	bl	80175ec <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	1e5a      	subs	r2, r3, #1
 80170f8:	607a      	str	r2, [r7, #4]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	bf14      	ite	ne
 80170fe:	2301      	movne	r3, #1
 8017100:	2300      	moveq	r3, #0
 8017102:	b2db      	uxtb	r3, r3
 8017104:	2b00      	cmp	r3, #0
 8017106:	d1ed      	bne.n	80170e4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 8017108:	2122      	movs	r1, #34	@ 0x22
 801710a:	68f8      	ldr	r0, [r7, #12]
 801710c:	f000 fa5e 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8017110:	bf00      	nop
 8017112:	3710      	adds	r7, #16
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}

08017118 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 8017118:	b580      	push	{r7, lr}
 801711a:	b084      	sub	sp, #16
 801711c:	af00      	add	r7, sp, #0
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	687a      	ldr	r2, [r7, #4]
 8017128:	68b9      	ldr	r1, [r7, #8]
 801712a:	4618      	mov	r0, r3
 801712c:	f000 f878 	bl	8017220 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017130:	bf00      	nop
 8017132:	3710      	adds	r7, #16
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}

08017138 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8017138:	b5b0      	push	{r4, r5, r7, lr}
 801713a:	b086      	sub	sp, #24
 801713c:	af00      	add	r7, sp, #0
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 8017144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017148:	2b00      	cmp	r3, #0
 801714a:	da0c      	bge.n	8017166 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 801714c:	212d      	movs	r1, #45	@ 0x2d
 801714e:	68f8      	ldr	r0, [r7, #12]
 8017150:	f000 fa3c 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017158:	2100      	movs	r1, #0
 801715a:	4254      	negs	r4, r2
 801715c:	eb61 0503 	sbc.w	r5, r1, r3
 8017160:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8017164:	e003      	b.n	801716e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 8017166:	e9d7 2300 	ldrd	r2, r3, [r7]
 801716a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 801716e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017172:	68f8      	ldr	r0, [r7, #12]
 8017174:	f000 f804 	bl	8017180 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017178:	bf00      	nop
 801717a:	3718      	adds	r7, #24
 801717c:	46bd      	mov	sp, r7
 801717e:	bdb0      	pop	{r4, r5, r7, pc}

08017180 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017180:	b580      	push	{r7, lr}
 8017182:	b08c      	sub	sp, #48	@ 0x30
 8017184:	af00      	add	r7, sp, #0
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 801718c:	f107 0310 	add.w	r3, r7, #16
 8017190:	3316      	adds	r3, #22
 8017192:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 8017194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017196:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8017198:	e9d7 0100 	ldrd	r0, r1, [r7]
 801719c:	f04f 020a 	mov.w	r2, #10
 80171a0:	f04f 0300 	mov.w	r3, #0
 80171a4:	f7e9 fbce 	bl	8000944 <__aeabi_uldivmod>
 80171a8:	b2d3      	uxtb	r3, r2
 80171aa:	3330      	adds	r3, #48	@ 0x30
 80171ac:	b2da      	uxtb	r2, r3
 80171ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171b0:	3b01      	subs	r3, #1
 80171b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80171b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171b6:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80171b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80171bc:	f04f 020a 	mov.w	r2, #10
 80171c0:	f04f 0300 	mov.w	r3, #0
 80171c4:	f7e9 fbbe 	bl	8000944 <__aeabi_uldivmod>
 80171c8:	4602      	mov	r2, r0
 80171ca:	460b      	mov	r3, r1
 80171cc:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 80171d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171d4:	4313      	orrs	r3, r2
 80171d6:	d1df      	bne.n	8017198 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 80171d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80171da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80171dc:	68f8      	ldr	r0, [r7, #12]
 80171de:	f000 fa31 	bl	8017644 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80171e2:	bf00      	nop
 80171e4:	3730      	adds	r7, #48	@ 0x30
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
	...

080171ec <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	460b      	mov	r3, r1
 80171f6:	70fb      	strb	r3, [r7, #3]
    if (value)
 80171f8:	78fb      	ldrb	r3, [r7, #3]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d004      	beq.n	8017208 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 80171fe:	4906      	ldr	r1, [pc, #24]	@ (8017218 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f7ff fca2 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017206:	e003      	b.n	8017210 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 8017208:	4904      	ldr	r1, [pc, #16]	@ (801721c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7ff fc9d 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017210:	bf00      	nop
 8017212:	3708      	adds	r7, #8
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	0802ac28 	.word	0x0802ac28
 801721c:	0802ac30 	.word	0x0802ac30

08017220 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	68b9      	ldr	r1, [r7, #8]
 8017232:	4618      	mov	r0, r3
 8017234:	f000 fa18 	bl	8017668 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 8017238:	4602      	mov	r2, r0
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	441a      	add	r2, r3
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	605a      	str	r2, [r3, #4]
  }
 8017244:	bf00      	nop
 8017246:	3710      	adds	r7, #16
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}

0801724c <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
    return writer_.count();
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	4618      	mov	r0, r3
 8017258:	f000 fa18 	bl	801768c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 801725c:	4603      	mov	r3, r0
  }
 801725e:	4618      	mov	r0, r3
 8017260:	3708      	adds	r7, #8
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}

08017266 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 8017266:	b580      	push	{r7, lr}
 8017268:	b082      	sub	sp, #8
 801726a:	af00      	add	r7, sp, #0
 801726c:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017270:	ed97 0a01 	vldr	s0, [r7, #4]
 8017274:	f000 fa16 	bl	80176a4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8017278:	4603      	mov	r3, r0
 801727a:	2b00      	cmp	r3, #0
 801727c:	d001      	beq.n	8017282 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	e001      	b.n	8017286 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 8017282:	f04f 0300 	mov.w	r3, #0
 8017286:	ee07 3a90 	vmov	s15, r3
}
 801728a:	eeb0 0a67 	vmov.f32	s0, s15
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801729e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172a2:	f000 fa0b 	bl	80176bc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 80172a6:	4603      	mov	r3, r0
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d005      	beq.n	80172b8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 80172ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172b0:	f7e9 fb0a 	bl	80008c8 <__aeabi_l2f>
 80172b4:	4603      	mov	r3, r0
 80172b6:	e001      	b.n	80172bc <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 80172b8:	f04f 0300 	mov.w	r3, #0
 80172bc:	ee07 3a90 	vmov	s15, r3
}
 80172c0:	eeb0 0a67 	vmov.f32	s0, s15
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}

080172ca <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 80172ca:	b580      	push	{r7, lr}
 80172cc:	b082      	sub	sp, #8
 80172ce:	af00      	add	r7, sp, #0
 80172d0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80172d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172d8:	f000 f9fc 	bl	80176d4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d005      	beq.n	80172ee <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 80172e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172e6:	f7e9 fae7 	bl	80008b8 <__aeabi_ul2f>
 80172ea:	4603      	mov	r3, r0
 80172ec:	e001      	b.n	80172f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 80172ee:	f04f 0300 	mov.w	r3, #0
 80172f2:	ee07 3a90 	vmov	s15, r3
}
 80172f6:	eeb0 0a67 	vmov.f32	s0, s15
 80172fa:	3708      	adds	r7, #8
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd80      	pop	{r7, pc}

08017300 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 8017300:	b580      	push	{r7, lr}
 8017302:	b082      	sub	sp, #8
 8017304:	af00      	add	r7, sp, #0
 8017306:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801730a:	ed97 0b00 	vldr	d0, [r7]
 801730e:	f000 f9ed 	bl	80176ec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d004      	beq.n	8017322 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 8017318:	ed97 7b00 	vldr	d7, [r7]
 801731c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017320:	e001      	b.n	8017326 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 8017322:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8017330 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 8017326:	eeb0 0a67 	vmov.f32	s0, s15
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	00000000 	.word	0x00000000

08017334 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017334:	b580      	push	{r7, lr}
 8017336:	b084      	sub	sp, #16
 8017338:	af00      	add	r7, sp, #0
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	60b9      	str	r1, [r7, #8]
 801733e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017340:	68f8      	ldr	r0, [r7, #12]
 8017342:	f000 f9df 	bl	8017704 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8017346:	4602      	mov	r2, r0
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	4293      	cmp	r3, r2
 801734c:	bf8c      	ite	hi
 801734e:	2301      	movhi	r3, #1
 8017350:	2300      	movls	r3, #0
 8017352:	b2db      	uxtb	r3, r3
 8017354:	2b00      	cmp	r3, #0
 8017356:	bf14      	ite	ne
 8017358:	2301      	movne	r3, #1
 801735a:	2300      	moveq	r3, #0
 801735c:	b2db      	uxtb	r3, r3
 801735e:	2b00      	cmp	r3, #0
 8017360:	d007      	beq.n	8017372 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	4a09      	ldr	r2, [pc, #36]	@ (801738c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8017366:	4293      	cmp	r3, r2
 8017368:	d901      	bls.n	801736e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801736a:	f011 f913 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801736e:	f011 f90e 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017372:	68bb      	ldr	r3, [r7, #8]
 8017374:	2258      	movs	r2, #88	@ 0x58
 8017376:	fb02 f303 	mul.w	r3, r2, r3
 801737a:	4618      	mov	r0, r3
 801737c:	f011 f8f4 	bl	8028568 <_Znwj>
 8017380:	4603      	mov	r3, r0
 8017382:	bf00      	nop
      }
 8017384:	4618      	mov	r0, r3
 8017386:	3710      	adds	r7, #16
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	02e8ba2e 	.word	0x02e8ba2e

08017390 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8017390:	b480      	push	{r7}
 8017392:	b083      	sub	sp, #12
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	4618      	mov	r0, r3
 801739c:	370c      	adds	r7, #12
 801739e:	46bd      	mov	sp, r7
 80173a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a4:	4770      	bx	lr

080173a6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80173a6:	b580      	push	{r7, lr}
 80173a8:	b084      	sub	sp, #16
 80173aa:	af00      	add	r7, sp, #0
 80173ac:	60f8      	str	r0, [r7, #12]
 80173ae:	60b9      	str	r1, [r7, #8]
 80173b0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2258      	movs	r2, #88	@ 0x58
 80173b6:	fb02 f303 	mul.w	r3, r2, r3
 80173ba:	4619      	mov	r1, r3
 80173bc:	68b8      	ldr	r0, [r7, #8]
 80173be:	f011 f8c2 	bl	8028546 <_ZdlPvj>
      }
 80173c2:	3710      	adds	r7, #16
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80173c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173cc:	ed2d 8b02 	vpush	{d8}
 80173d0:	b08c      	sub	sp, #48	@ 0x30
 80173d2:	af02      	add	r7, sp, #8
 80173d4:	60f8      	str	r0, [r7, #12]
 80173d6:	60b9      	str	r1, [r7, #8]
 80173d8:	607a      	str	r2, [r7, #4]
 80173da:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	4619      	mov	r1, r3
 80173e0:	204c      	movs	r0, #76	@ 0x4c
 80173e2:	f7f3 fa31 	bl	800a848 <_ZnwjPv>
 80173e6:	4680      	mov	r8, r0
 80173e8:	68b8      	ldr	r0, [r7, #8]
 80173ea:	f7fe fb09 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80173ee:	4602      	mov	r2, r0
 80173f0:	f107 0310 	add.w	r3, r7, #16
 80173f4:	4611      	mov	r1, r2
 80173f6:	4618      	mov	r0, r3
 80173f8:	f011 f992 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f7fe fb0a 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8017402:	4603      	mov	r3, r0
 8017404:	ed93 8a00 	vldr	s16, [r3]
 8017408:	6838      	ldr	r0, [r7, #0]
 801740a:	f7fe fb0f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801740e:	4603      	mov	r3, r0
 8017410:	881d      	ldrh	r5, [r3, #0]
 8017412:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017414:	f7fe fb0a 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017418:	4603      	mov	r3, r0
 801741a:	881e      	ldrh	r6, [r3, #0]
 801741c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801741e:	f7f9 fff8 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8017422:	4603      	mov	r3, r0
 8017424:	781c      	ldrb	r4, [r3, #0]
 8017426:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017428:	f7fe fb0b 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801742c:	4603      	mov	r3, r0
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	f107 0110 	add.w	r1, r7, #16
 8017434:	9301      	str	r3, [sp, #4]
 8017436:	9400      	str	r4, [sp, #0]
 8017438:	4633      	mov	r3, r6
 801743a:	462a      	mov	r2, r5
 801743c:	eeb0 0a48 	vmov.f32	s0, s16
 8017440:	4640      	mov	r0, r8
 8017442:	f7fd fe83 	bl	801514c <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>
 8017446:	f107 0310 	add.w	r3, r7, #16
 801744a:	4618      	mov	r0, r3
 801744c:	f011 f987 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8017450:	bf00      	nop
 8017452:	3728      	adds	r7, #40	@ 0x28
 8017454:	46bd      	mov	sp, r7
 8017456:	ecbd 8b02 	vpop	{d8}
 801745a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801745e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 801745e:	b480      	push	{r7}
 8017460:	b083      	sub	sp, #12
 8017462:	af00      	add	r7, sp, #0
 8017464:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8017466:	687b      	ldr	r3, [r7, #4]
      }
 8017468:	4618      	mov	r0, r3
 801746a:	370c      	adds	r7, #12
 801746c:	46bd      	mov	sp, r7
 801746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017472:	4770      	bx	lr

08017474 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>:
      use_count() const noexcept
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]
      { return _M_refcount._M_get_use_count(); }
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	3304      	adds	r3, #4
 8017480:	4618      	mov	r0, r3
 8017482:	f000 f94d 	bl	8017720 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 8017486:	4603      	mov	r3, r0
 8017488:	4618      	mov	r0, r3
 801748a:	3708      	adds	r7, #8
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>:
      operator=(const __shared_count<_Lp>& __r) noexcept
 8017490:	b580      	push	{r7, lr}
 8017492:	b084      	sub	sp, #16
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
 8017498:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	60fb      	str	r3, [r7, #12]
	if (__tmp != nullptr)
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d002      	beq.n	80174ac <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x1c>
	  __tmp->_M_weak_add_ref();
 80174a6:	68f8      	ldr	r0, [r7, #12]
 80174a8:	f7fd fb34 	bl	8014b14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>
	if (_M_pi != nullptr)
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d004      	beq.n	80174be <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x2e>
	  _M_pi->_M_weak_release();
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7fd fb3a 	bl	8014b32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
	_M_pi = __tmp;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	68fa      	ldr	r2, [r7, #12]
 80174c2:	601a      	str	r2, [r3, #0]
	return *this;
 80174c4:	687b      	ldr	r3, [r7, #4]
      }
 80174c6:	4618      	mov	r0, r3
 80174c8:	3710      	adds	r7, #16
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}

080174ce <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>:
      constexpr _Head_base()
 80174ce:	b480      	push	{r7}
 80174d0:	b083      	sub	sp, #12
 80174d2:	af00      	add	r7, sp, #0
 80174d4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	4618      	mov	r0, r3
 80174da:	370c      	adds	r7, #12
 80174dc:	46bd      	mov	sp, r7
 80174de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e2:	4770      	bx	lr

080174e4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	4618      	mov	r0, r3
 80174f0:	370c      	adds	r7, #12
 80174f2:	46bd      	mov	sp, r7
 80174f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f8:	4770      	bx	lr

080174fa <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80174fa:	b480      	push	{r7}
 80174fc:	b083      	sub	sp, #12
 80174fe:	af00      	add	r7, sp, #0
 8017500:	6078      	str	r0, [r7, #4]
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	4618      	mov	r0, r3
 8017506:	370c      	adds	r7, #12
 8017508:	46bd      	mov	sp, r7
 801750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750e:	4770      	bx	lr

08017510 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 8017510:	b580      	push	{r7, lr}
 8017512:	b088      	sub	sp, #32
 8017514:	af00      	add	r7, sp, #0
 8017516:	60f8      	str	r0, [r7, #12]
 8017518:	ed87 0b00 	vstr	d0, [r7]
 801751c:	460b      	mov	r3, r1
 801751e:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8017520:	ed97 0b00 	vldr	d0, [r7]
 8017524:	f7ff fd68 	bl	8016ff8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d004      	beq.n	8017538 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 801752e:	4926      	ldr	r1, [pc, #152]	@ (80175c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f7ff fb0a 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8017536:	e044      	b.n	80175c2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (isinf(value))
 8017538:	ed97 0b00 	vldr	d0, [r7]
 801753c:	f7ff fd73 	bl	8017026 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>
 8017540:	4603      	mov	r3, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	d004      	beq.n	8017550 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 8017546:	4920      	ldr	r1, [pc, #128]	@ (80175c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017548:	68f8      	ldr	r0, [r7, #12]
 801754a:	f7ff fafe 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 801754e:	e038      	b.n	80175c2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (value < 0.0) {
 8017550:	ed97 7b00 	vldr	d7, [r7]
 8017554:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755c:	d509      	bpl.n	8017572 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x62>
      writeRaw('-');
 801755e:	212d      	movs	r1, #45	@ 0x2d
 8017560:	68f8      	ldr	r0, [r7, #12]
 8017562:	f000 f833 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 8017566:	ed97 7b00 	vldr	d7, [r7]
 801756a:	eeb1 7b47 	vneg.f64	d7, d7
 801756e:	ed87 7b00 	vstr	d7, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 8017572:	f107 0314 	add.w	r3, r7, #20
 8017576:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801757a:	4611      	mov	r1, r2
 801757c:	ed97 0b00 	vldr	d0, [r7]
 8017580:	4618      	mov	r0, r3
 8017582:	f7fd fb67 	bl	8014c54 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	4619      	mov	r1, r3
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	f000 f8dc 	bl	8017748 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 8017590:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d006      	beq.n	80175a6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x96>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801759e:	4619      	mov	r1, r3
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f000 f903 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 80175a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d009      	beq.n	80175c2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
      writeRaw('e');
 80175ae:	2165      	movs	r1, #101	@ 0x65
 80175b0:	68f8      	ldr	r0, [r7, #12]
 80175b2:	f000 f80b 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 80175b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80175ba:	4619      	mov	r1, r3
 80175bc:	68f8      	ldr	r0, [r7, #12]
 80175be:	f000 f939 	bl	8017834 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 80175c2:	3720      	adds	r7, #32
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	0802ac20 	.word	0x0802ac20

080175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
 80175d4:	460b      	mov	r3, r1
 80175d6:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	78fa      	ldrb	r2, [r7, #3]
 80175dc:	4611      	mov	r1, r2
 80175de:	4618      	mov	r0, r3
 80175e0:	f000 f945 	bl	801786e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}

080175ec <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b084      	sub	sp, #16
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	6078      	str	r0, [r7, #4]
 80175f4:	460b      	mov	r3, r1
 80175f6:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 80175f8:	78fb      	ldrb	r3, [r7, #3]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7fd faf5 	bl	8014bea <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>
 8017600:	4603      	mov	r3, r0
 8017602:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8017604:	7bfb      	ldrb	r3, [r7, #15]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d009      	beq.n	801761e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 801760a:	215c      	movs	r1, #92	@ 0x5c
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	f7ff ffdd 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 8017612:	7bfb      	ldrb	r3, [r7, #15]
 8017614:	4619      	mov	r1, r3
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f7ff ffd8 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801761c:	e00c      	b.n	8017638 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 801761e:	78fb      	ldrb	r3, [r7, #3]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d005      	beq.n	8017630 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8017624:	78fb      	ldrb	r3, [r7, #3]
 8017626:	4619      	mov	r1, r3
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7ff ffcf 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801762e:	e003      	b.n	8017638 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8017630:	4903      	ldr	r1, [pc, #12]	@ (8017640 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f7ff fa89 	bl	8016b4a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017638:	bf00      	nop
 801763a:	3710      	adds	r7, #16
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}
 8017640:	0802ac38 	.word	0x0802ac38

08017644 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 8017644:	b580      	push	{r7, lr}
 8017646:	b084      	sub	sp, #16
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017650:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8017652:	687a      	ldr	r2, [r7, #4]
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017658:	461a      	mov	r2, r3
 801765a:	68b9      	ldr	r1, [r7, #8]
 801765c:	f7ff fde0 	bl	8017220 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017660:	bf00      	nop
 8017662:	3710      	adds	r7, #16
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}

08017668 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8017668:	b580      	push	{r7, lr}
 801766a:	b084      	sub	sp, #16
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	68b9      	ldr	r1, [r7, #8]
 801767c:	4618      	mov	r0, r3
 801767e:	f011 fa41 	bl	8028b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8017682:	687b      	ldr	r3, [r7, #4]
  }
 8017684:	4618      	mov	r0, r3
 8017686:	3710      	adds	r7, #16
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 801768c:	b480      	push	{r7}
 801768e:	b083      	sub	sp, #12
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
    return count_;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	685b      	ldr	r3, [r3, #4]
  }
 8017698:	4618      	mov	r0, r3
 801769a:	370c      	adds	r7, #12
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr

080176a4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80176a4:	b480      	push	{r7}
 80176a6:	b083      	sub	sp, #12
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 80176ae:	2301      	movs	r3, #1
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	370c      	adds	r7, #12
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80176bc:	b480      	push	{r7}
 80176be:	b083      	sub	sp, #12
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 80176c6:	2301      	movs	r3, #1
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	370c      	adds	r7, #12
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80176d4:	b480      	push	{r7}
 80176d6:	b083      	sub	sp, #12
 80176d8:	af00      	add	r7, sp, #0
 80176da:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 80176de:	2301      	movs	r3, #1
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	ed87 0b00 	vstr	d0, [r7]
  return true;
 80176f6:	2301      	movs	r3, #1
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	370c      	adds	r7, #12
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr

08017704 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017704:	b480      	push	{r7}
 8017706:	b083      	sub	sp, #12
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801770c:	4b03      	ldr	r3, [pc, #12]	@ (801771c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801770e:	4618      	mov	r0, r3
 8017710:	370c      	adds	r7, #12
 8017712:	46bd      	mov	sp, r7
 8017714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017718:	4770      	bx	lr
 801771a:	bf00      	nop
 801771c:	01745d17 	.word	0x01745d17

08017720 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
      _M_get_use_count() const noexcept
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d006      	beq.n	801773e <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x1e>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4618      	mov	r0, r3
 8017736:	f7fd fa18 	bl	8014b6a <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 801773a:	4603      	mov	r3, r0
 801773c:	e000      	b.n	8017740 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x20>
 801773e:	2300      	movs	r3, #0
 8017740:	4618      	mov	r0, r3
 8017742:	3708      	adds	r7, #8
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}

08017748 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017748:	b580      	push	{r7, lr}
 801774a:	b08a      	sub	sp, #40	@ 0x28
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
 8017750:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8017752:	f107 0308 	add.w	r3, r7, #8
 8017756:	3316      	adds	r3, #22
 8017758:	623b      	str	r3, [r7, #32]
    char* begin = end;
 801775a:	6a3b      	ldr	r3, [r7, #32]
 801775c:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 801775e:	6839      	ldr	r1, [r7, #0]
 8017760:	4b11      	ldr	r3, [pc, #68]	@ (80177a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017762:	fba3 2301 	umull	r2, r3, r3, r1
 8017766:	08da      	lsrs	r2, r3, #3
 8017768:	4613      	mov	r3, r2
 801776a:	009b      	lsls	r3, r3, #2
 801776c:	4413      	add	r3, r2
 801776e:	005b      	lsls	r3, r3, #1
 8017770:	1aca      	subs	r2, r1, r3
 8017772:	b2d3      	uxtb	r3, r2
 8017774:	3330      	adds	r3, #48	@ 0x30
 8017776:	b2da      	uxtb	r2, r3
 8017778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777a:	3b01      	subs	r3, #1
 801777c:	627b      	str	r3, [r7, #36]	@ 0x24
 801777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017780:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	4a08      	ldr	r2, [pc, #32]	@ (80177a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017786:	fba2 2303 	umull	r2, r3, r2, r3
 801778a:	08db      	lsrs	r3, r3, #3
 801778c:	603b      	str	r3, [r7, #0]
    } while (value);
 801778e:	683b      	ldr	r3, [r7, #0]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d1e4      	bne.n	801775e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8017794:	6a3a      	ldr	r2, [r7, #32]
 8017796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f7ff ff53 	bl	8017644 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801779e:	bf00      	nop
 80177a0:	3728      	adds	r7, #40	@ 0x28
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	cccccccd 	.word	0xcccccccd

080177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b08a      	sub	sp, #40	@ 0x28
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	60f8      	str	r0, [r7, #12]
 80177b4:	60b9      	str	r1, [r7, #8]
 80177b6:	4613      	mov	r3, r2
 80177b8:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 80177ba:	f107 0310 	add.w	r3, r7, #16
 80177be:	3310      	adds	r3, #16
 80177c0:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80177c2:	6a3b      	ldr	r3, [r7, #32]
 80177c4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 80177c6:	e017      	b.n	80177f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 80177c8:	68b9      	ldr	r1, [r7, #8]
 80177ca:	4b19      	ldr	r3, [pc, #100]	@ (8017830 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80177cc:	fba3 2301 	umull	r2, r3, r3, r1
 80177d0:	08da      	lsrs	r2, r3, #3
 80177d2:	4613      	mov	r3, r2
 80177d4:	009b      	lsls	r3, r3, #2
 80177d6:	4413      	add	r3, r2
 80177d8:	005b      	lsls	r3, r3, #1
 80177da:	1aca      	subs	r2, r1, r3
 80177dc:	b2d3      	uxtb	r3, r2
 80177de:	3330      	adds	r3, #48	@ 0x30
 80177e0:	b2da      	uxtb	r2, r3
 80177e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e4:	3b01      	subs	r3, #1
 80177e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80177e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177ea:	701a      	strb	r2, [r3, #0]
      value /= 10;
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	4a10      	ldr	r2, [pc, #64]	@ (8017830 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80177f0:	fba2 2303 	umull	r2, r3, r2, r3
 80177f4:	08db      	lsrs	r3, r3, #3
 80177f6:	60bb      	str	r3, [r7, #8]
    while (width--) {
 80177f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177fc:	b2da      	uxtb	r2, r3
 80177fe:	3a01      	subs	r2, #1
 8017800:	b2d2      	uxtb	r2, r2
 8017802:	71fa      	strb	r2, [r7, #7]
 8017804:	2b00      	cmp	r3, #0
 8017806:	bf14      	ite	ne
 8017808:	2301      	movne	r3, #1
 801780a:	2300      	moveq	r3, #0
 801780c:	b2db      	uxtb	r3, r3
 801780e:	2b00      	cmp	r3, #0
 8017810:	d1da      	bne.n	80177c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 8017812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017814:	3b01      	subs	r3, #1
 8017816:	627b      	str	r3, [r7, #36]	@ 0x24
 8017818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781a:	222e      	movs	r2, #46	@ 0x2e
 801781c:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 801781e:	6a3a      	ldr	r2, [r7, #32]
 8017820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017822:	68f8      	ldr	r0, [r7, #12]
 8017824:	f7ff ff0e 	bl	8017644 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017828:	bf00      	nop
 801782a:	3728      	adds	r7, #40	@ 0x28
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	cccccccd 	.word	0xcccccccd

08017834 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8017834:	b580      	push	{r7, lr}
 8017836:	b084      	sub	sp, #16
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	460b      	mov	r3, r1
 801783e:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8017840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017844:	2b00      	cmp	r3, #0
 8017846:	da07      	bge.n	8017858 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8017848:	212d      	movs	r1, #45	@ 0x2d
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f7ff febe 	bl	80175cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017850:	887b      	ldrh	r3, [r7, #2]
 8017852:	425b      	negs	r3, r3
 8017854:	81fb      	strh	r3, [r7, #14]
 8017856:	e001      	b.n	801785c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8017858:	887b      	ldrh	r3, [r7, #2]
 801785a:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 801785c:	89fb      	ldrh	r3, [r7, #14]
 801785e:	4619      	mov	r1, r3
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f000 f81b 	bl	801789c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017866:	bf00      	nop
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 801786e:	b580      	push	{r7, lr}
 8017870:	b082      	sub	sp, #8
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
 8017876:	460b      	mov	r3, r1
 8017878:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	78fa      	ldrb	r2, [r7, #3]
 801787e:	4611      	mov	r1, r2
 8017880:	4618      	mov	r0, r3
 8017882:	f000 f83f 	bl	8017904 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8017886:	4602      	mov	r2, r0
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	685b      	ldr	r3, [r3, #4]
 801788c:	441a      	add	r2, r3
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	605a      	str	r2, [r3, #4]
  }
 8017892:	bf00      	nop
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
	...

0801789c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 801789c:	b580      	push	{r7, lr}
 801789e:	b08a      	sub	sp, #40	@ 0x28
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	460b      	mov	r3, r1
 80178a6:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 80178a8:	f107 0308 	add.w	r3, r7, #8
 80178ac:	3316      	adds	r3, #22
 80178ae:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80178b0:	6a3b      	ldr	r3, [r7, #32]
 80178b2:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 80178b4:	887a      	ldrh	r2, [r7, #2]
 80178b6:	4b12      	ldr	r3, [pc, #72]	@ (8017900 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 80178b8:	fba3 1302 	umull	r1, r3, r3, r2
 80178bc:	08d9      	lsrs	r1, r3, #3
 80178be:	460b      	mov	r3, r1
 80178c0:	009b      	lsls	r3, r3, #2
 80178c2:	440b      	add	r3, r1
 80178c4:	005b      	lsls	r3, r3, #1
 80178c6:	1ad3      	subs	r3, r2, r3
 80178c8:	b29b      	uxth	r3, r3
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	3330      	adds	r3, #48	@ 0x30
 80178ce:	b2da      	uxtb	r2, r3
 80178d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178d2:	3b01      	subs	r3, #1
 80178d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80178d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178d8:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80178da:	887b      	ldrh	r3, [r7, #2]
 80178dc:	4a08      	ldr	r2, [pc, #32]	@ (8017900 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 80178de:	fba2 2303 	umull	r2, r3, r2, r3
 80178e2:	08db      	lsrs	r3, r3, #3
 80178e4:	807b      	strh	r3, [r7, #2]
    } while (value);
 80178e6:	887b      	ldrh	r3, [r7, #2]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d1e3      	bne.n	80178b4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 80178ec:	6a3a      	ldr	r2, [r7, #32]
 80178ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f7ff fea7 	bl	8017644 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80178f6:	bf00      	nop
 80178f8:	3728      	adds	r7, #40	@ 0x28
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}
 80178fe:	bf00      	nop
 8017900:	cccccccd 	.word	0xcccccccd

08017904 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8017904:	b580      	push	{r7, lr}
 8017906:	b082      	sub	sp, #8
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
 801790c:	460b      	mov	r3, r1
 801790e:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	78fa      	ldrb	r2, [r7, #3]
 8017916:	4611      	mov	r1, r2
 8017918:	4618      	mov	r0, r3
 801791a:	f010 ffe8 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 801791e:	2301      	movs	r3, #1
  }
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <_ZN7TMC2208D1Ev>:

public:

	TMC2208(std::string, float, uint16_t, uint16_t, bool, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2208() = default;
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	4a0a      	ldr	r2, [pc, #40]	@ (801795c <_ZN7TMC2208D1Ev+0x34>)
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	601a      	str	r2, [r3, #0]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	3348      	adds	r3, #72	@ 0x48
 801793a:	4618      	mov	r0, r3
 801793c:	f7fd ff6c 	bl	8015818 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	3328      	adds	r3, #40	@ 0x28
 8017944:	4618      	mov	r0, r3
 8017946:	f010 ff0a 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4618      	mov	r0, r3
 801794e:	f7fd fbd5 	bl	80150fc <_ZN3TMCD1Ev>
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	4618      	mov	r0, r3
 8017956:	3708      	adds	r7, #8
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	0802b4e0 	.word	0x0802b4e0

08017960 <_ZN7TMC2208D0Ev>:
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f7ff ffdd 	bl	8017928 <_ZN7TMC2208D1Ev>
 801796e:	214c      	movs	r1, #76	@ 0x4c
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f010 fde8 	bl	8028546 <_ZdlPvj>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	4618      	mov	r0, r3
 801797a:	3708      	adds	r7, #8
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}

08017980 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	4a05      	ldr	r2, [pc, #20]	@ (80179a0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	601a      	str	r2, [r3, #0]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4618      	mov	r0, r3
 8017992:	f7f4 fdc3 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4618      	mov	r0, r3
 801799a:	3708      	adds	r7, #8
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	0802b4c4 	.word	0x0802b4c4

080179a4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff ffe7 	bl	8017980 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80179b2:	2158      	movs	r1, #88	@ 0x58
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f010 fdc6 	bl	8028546 <_ZdlPvj>
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}

080179c4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80179c4:	b590      	push	{r4, r7, lr}
 80179c6:	b083      	sub	sp, #12
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	330c      	adds	r3, #12
 80179d0:	4618      	mov	r0, r3
 80179d2:	f000 f856 	bl	8017a82 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80179d6:	4604      	mov	r4, r0
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7fe ff1a 	bl	8016812 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80179de:	4603      	mov	r3, r0
 80179e0:	4619      	mov	r1, r3
 80179e2:	4620      	mov	r0, r4
 80179e4:	f000 f859 	bl	8017a9a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 80179e8:	bf00      	nop
 80179ea:	370c      	adds	r7, #12
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd90      	pop	{r4, r7, pc}

080179f0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b086      	sub	sp, #24
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	330c      	adds	r3, #12
 80179fc:	4618      	mov	r0, r3
 80179fe:	f000 f840 	bl	8017a82 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017a02:	4602      	mov	r2, r0
 8017a04:	f107 0314 	add.w	r3, r7, #20
 8017a08:	4611      	mov	r1, r2
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7fe fe5e 	bl	80166cc <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8017a10:	f107 0114 	add.w	r1, r7, #20
 8017a14:	f107 030c 	add.w	r3, r7, #12
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7ff fa19 	bl	8016e52 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7ff ffad 	bl	8017980 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8017a26:	f107 030c 	add.w	r3, r7, #12
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7fe fe7a 	bl	8016724 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8017a30:	f107 0314 	add.w	r3, r7, #20
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7fe fe56 	bl	80166e6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b084      	sub	sp, #16
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7fe fee1 	bl	8016812 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017a50:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017a52:	f7f2 ff45 	bl	800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8017a56:	4602      	mov	r2, r0
	    ||
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d005      	beq.n	8017a6a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8017a5e:	6838      	ldr	r0, [r7, #0]
 8017a60:	f010 fdae 	bl	80285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8017a64:	4603      	mov	r3, r0
	    ||
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d001      	beq.n	8017a6e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	e000      	b.n	8017a70 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8017a6e:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d001      	beq.n	8017a78 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	e000      	b.n	8017a7a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8017a78:	2300      	movs	r3, #0
      }
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3710      	adds	r7, #16
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}

08017a82 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8017a82:	b580      	push	{r7, lr}
 8017a84:	b082      	sub	sp, #8
 8017a86:	af00      	add	r7, sp, #0
 8017a88:	6078      	str	r0, [r7, #4]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7f7 f819 	bl	800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8017a90:	4603      	mov	r3, r0
 8017a92:	4618      	mov	r0, r3
 8017a94:	3708      	adds	r7, #8
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}

08017a9a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8017a9a:	b580      	push	{r7, lr}
 8017a9c:	b082      	sub	sp, #8
 8017a9e:	af00      	add	r7, sp, #0
 8017aa0:	6078      	str	r0, [r7, #4]
 8017aa2:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8017aa4:	6838      	ldr	r0, [r7, #0]
 8017aa6:	f000 f804 	bl	8017ab2 <_ZSt8_DestroyI7TMC2208EvPT_>
 8017aaa:	bf00      	nop
 8017aac:	3708      	adds	r7, #8
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}

08017ab2 <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8017ab2:	b580      	push	{r7, lr}
 8017ab4:	b082      	sub	sp, #8
 8017ab6:	af00      	add	r7, sp, #0
 8017ab8:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	4798      	blx	r3
    }
 8017ac4:	bf00      	nop
 8017ac6:	3708      	adds	r7, #8
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	bd80      	pop	{r7, pc}

08017acc <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8017acc:	b590      	push	{r4, r7, lr}
 8017ace:	b093      	sub	sp, #76	@ 0x4c
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6178      	str	r0, [r7, #20]
 8017ad4:	6139      	str	r1, [r7, #16]
 8017ad6:	60fa      	str	r2, [r7, #12]
 8017ad8:	ed87 0a02 	vstr	s0, [r7, #8]
 8017adc:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 8017ade:	697c      	ldr	r4, [r7, #20]
 8017ae0:	f107 0318 	add.w	r3, r7, #24
 8017ae4:	6939      	ldr	r1, [r7, #16]
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f011 f849 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017af0:	68f9      	ldr	r1, [r7, #12]
 8017af2:	4618      	mov	r0, r3
 8017af4:	f011 f843 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017af8:	79fb      	ldrb	r3, [r7, #7]
 8017afa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017afe:	f107 0118 	add.w	r1, r7, #24
 8017b02:	ed97 0a02 	vldr	s0, [r7, #8]
 8017b06:	4620      	mov	r0, r4
 8017b08:	f7eb ff9c 	bl	8003a44 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8017b0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017b10:	4618      	mov	r0, r3
 8017b12:	f010 fe24 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017b16:	f107 0318 	add.w	r3, r7, #24
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f010 fe1f 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017b20:	4a0f      	ldr	r2, [pc, #60]	@ (8017b60 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8017b22:	697b      	ldr	r3, [r7, #20]
 8017b24:	601a      	str	r2, [r3, #0]
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8017b2e:	2200      	movs	r2, #0
 8017b30:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8017b34:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8017b38:	f022 020f 	bic.w	r2, r2, #15
 8017b3c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2200      	movs	r2, #0
 8017b44:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8017b50:	2200      	movs	r2, #0
 8017b52:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	4618      	mov	r0, r3
 8017b5a:	374c      	adds	r7, #76	@ 0x4c
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd90      	pop	{r4, r7, pc}
 8017b60:	0802b568 	.word	0x0802b568

08017b64 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b082      	sub	sp, #8
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	3304      	adds	r3, #4
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f4 f8a0 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}

08017b80 <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b082      	sub	sp, #8
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	f7ff ffea 	bl	8017b64 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	4618      	mov	r0, r3
 8017b94:	3708      	adds	r7, #8
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd80      	pop	{r7, pc}
	...

08017b9c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 8017b9c:	b590      	push	{r4, r7, lr}
 8017b9e:	b0c9      	sub	sp, #292	@ 0x124
 8017ba0:	af06      	add	r7, sp, #24
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ba8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bac:	6019      	str	r1, [r3, #0]
 8017bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017bb6:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8017bb8:	4868      	ldr	r0, [pc, #416]	@ (8017d5c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8017bba:	f011 fbef 	bl	802939c <puts>

    const char* comment = config["Comment"];
 8017bbe:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8017bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bca:	4a65      	ldr	r2, [pc, #404]	@ (8017d60 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8017bcc:	6819      	ldr	r1, [r3, #0]
 8017bce:	f7fa fb12 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017bd2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7ef fe7a 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017bdc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("Comment: %s\n", comment);
 8017be0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8017be4:	485f      	ldr	r0, [pc, #380]	@ (8017d64 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8017be6:	f011 fb69 	bl	80292bc <iprintf>

    std::string RxPin = config["RX pin"];
 8017bea:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8017bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bf2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bf6:	4a5c      	ldr	r2, [pc, #368]	@ (8017d68 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8017bf8:	6819      	ldr	r1, [r3, #0]
 8017bfa:	f7ef fe44 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017c02:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7fd fd55 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8017c0e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8017c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c1a:	4a54      	ldr	r2, [pc, #336]	@ (8017d6c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8017c1c:	6819      	ldr	r1, [r3, #0]
 8017c1e:	f7ef fe32 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c22:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8017c26:	4618      	mov	r0, r3
 8017c28:	f7fd fd54 	bl	80156d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8017c2c:	eef0 7a40 	vmov.f32	s15, s0
 8017c30:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8017c34:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c40:	4a4b      	ldr	r2, [pc, #300]	@ (8017d70 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8017c42:	6819      	ldr	r1, [r3, #0]
 8017c44:	f7fa fad7 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c48:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f000 fa47 	bl	80180e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8017c52:	4603      	mov	r3, r0
 8017c54:	77fb      	strb	r3, [r7, #31]
    uint16_t current = config["Current"];
 8017c56:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8017c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c5e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c62:	4a44      	ldr	r2, [pc, #272]	@ (8017d74 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d8>)
 8017c64:	6819      	ldr	r1, [r3, #0]
 8017c66:	f7fa fac6 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fd fd3e 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017c74:	4603      	mov	r3, r0
 8017c76:	83bb      	strh	r3, [r7, #28]
    uint16_t microsteps = config["Microsteps"];
 8017c78:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8017c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c84:	4a3c      	ldr	r2, [pc, #240]	@ (8017d78 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1dc>)
 8017c86:	6819      	ldr	r1, [r3, #0]
 8017c88:	f7f7 fad3 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c8c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8017c90:	4618      	mov	r0, r3
 8017c92:	f7fd fd2d 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017c96:	4603      	mov	r3, r0
 8017c98:	837b      	strh	r3, [r7, #26]
    uint16_t stall = config["Stall sensitivity"];
 8017c9a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8017c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ca2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ca6:	4a35      	ldr	r2, [pc, #212]	@ (8017d7c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e0>)
 8017ca8:	6819      	ldr	r1, [r3, #0]
 8017caa:	f000 fa25 	bl	80180f8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017cae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fd fd1c 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	833b      	strh	r3, [r7, #24]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8017cbc:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8017cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017cc4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8017d80 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e4>)
 8017cca:	6819      	ldr	r1, [r3, #0]
 8017ccc:	f7fc f968 	bl	8013fa0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017cd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7ef fdfb 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	4929      	ldr	r1, [pc, #164]	@ (8017d84 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e8>)
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f7e8 fafe 	bl	80002e0 <strcmp>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	bf0c      	ite	eq
 8017cea:	2301      	moveq	r3, #1
 8017cec:	2300      	movne	r3, #0
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	75fb      	strb	r3, [r7, #23]

    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7f9 fb3b 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017cfc:	4604      	mov	r4, r0
 8017cfe:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8017d02:	f107 011f 	add.w	r1, r7, #31
 8017d06:	f107 0220 	add.w	r2, r7, #32
 8017d0a:	1d3b      	adds	r3, r7, #4
 8017d0c:	9304      	str	r3, [sp, #16]
 8017d0e:	f107 0318 	add.w	r3, r7, #24
 8017d12:	9303      	str	r3, [sp, #12]
 8017d14:	f107 0317 	add.w	r3, r7, #23
 8017d18:	9302      	str	r3, [sp, #8]
 8017d1a:	f107 031a 	add.w	r3, r7, #26
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	f107 031c 	add.w	r3, r7, #28
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	460b      	mov	r3, r1
 8017d28:	4621      	mov	r1, r4
 8017d2a:	f000 fa0a 	bl	8018142 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8017d2e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017d32:	4619      	mov	r1, r3
 8017d34:	68f8      	ldr	r0, [r7, #12]
 8017d36:	f000 fa42 	bl	80181be <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>
 8017d3a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7ff ff1e 	bl	8017b80 <_ZNSt10shared_ptrI7TMC2209ED1Ev>
}
 8017d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f010 fd08 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017d4e:	bf00      	nop
}
 8017d50:	68f8      	ldr	r0, [r7, #12]
 8017d52:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd90      	pop	{r4, r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	0802ac54 	.word	0x0802ac54
 8017d60:	0802ac6c 	.word	0x0802ac6c
 8017d64:	0802ac74 	.word	0x0802ac74
 8017d68:	0802ac84 	.word	0x0802ac84
 8017d6c:	0802ac8c 	.word	0x0802ac8c
 8017d70:	0802ac94 	.word	0x0802ac94
 8017d74:	0802ac9c 	.word	0x0802ac9c
 8017d78:	0802aca4 	.word	0x0802aca4
 8017d7c:	0802acb0 	.word	0x0802acb0
 8017d80:	0802acc4 	.word	0x0802acc4
 8017d84:	0802acd4 	.word	0x0802acd4

08017d88 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>:

TMC2209::TMC2209(std::string _rxtxPin, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8017d88:	b5b0      	push	{r4, r5, r7, lr}
 8017d8a:	b086      	sub	sp, #24
 8017d8c:	af02      	add	r7, sp, #8
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	ed87 0a01 	vstr	s0, [r7, #4]
 8017d96:	4611      	mov	r1, r2
 8017d98:	461a      	mov	r2, r3
 8017d9a:	460b      	mov	r3, r1
 8017d9c:	70fb      	strb	r3, [r7, #3]
 8017d9e:	4613      	mov	r3, r2
 8017da0:	803b      	strh	r3, [r7, #0]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	ed97 0a01 	vldr	s0, [r7, #4]
 8017da8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fd f8a2 	bl	8014ef4 <_ZN3TMCC1EP6Remoraf>
 8017db0:	4a1d      	ldr	r2, [pc, #116]	@ (8017e28 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora+0xa0>)
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017dbc:	68b8      	ldr	r0, [r7, #8]
 8017dbe:	f7f9 fad8 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f010 fcaa 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	78fa      	ldrb	r2, [r7, #3]
 8017dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      mA(_mA),
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	883a      	ldrh	r2, [r7, #0]
 8017dd8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      microsteps(_microsteps),
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	8c3a      	ldrh	r2, [r7, #32]
 8017de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      stealth(_stealth),
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017dea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      stall(_stall),
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8017df2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	3340      	adds	r3, #64	@ 0x40
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8017e12:	9300      	str	r3, [sp, #0]
 8017e14:	462b      	mov	r3, r5
 8017e16:	4622      	mov	r2, r4
 8017e18:	f000 f9e4 	bl	80181e4 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3710      	adds	r7, #16
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bdb0      	pop	{r4, r5, r7, pc}
 8017e26:	bf00      	nop
 8017e28:	0802b544 	.word	0x0802b544

08017e2c <_ZN7TMC22099configureEv>:


void TMC2209::configure()
{
 8017e2c:	b590      	push	{r4, r7, lr}
 8017e2e:	b08b      	sub	sp, #44	@ 0x2c
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8017e34:	4897      	ldr	r0, [pc, #604]	@ (8018094 <_ZN7TMC22099configureEv+0x268>)
 8017e36:	f011 fab1 	bl	802939c <puts>
    instance->getSerialThread()->startThread();
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6a1b      	ldr	r3, [r3, #32]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fd f803 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 8017e44:	4603      	mov	r3, r0
 8017e46:	4618      	mov	r0, r3
 8017e48:	f002 ff76 	bl	801ad38 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	f103 0218 	add.w	r2, r3, #24
 8017e52:	f107 030c 	add.w	r3, r7, #12
 8017e56:	4611      	mov	r1, r2
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fd fc1f 	bl	801569c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6a1b      	ldr	r3, [r3, #32]
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7fc fff1 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 8017e68:	4604      	mov	r4, r0
 8017e6a:	f107 020c 	add.w	r2, r7, #12
 8017e6e:	f107 0314 	add.w	r3, r7, #20
 8017e72:	4611      	mov	r1, r2
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7fd fcf1 	bl	801585c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8017e7a:	f107 0314 	add.w	r3, r7, #20
 8017e7e:	4619      	mov	r1, r3
 8017e80:	4620      	mov	r0, r4
 8017e82:	f002 fec5 	bl	801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8017e86:	f107 0314 	add.w	r3, r7, #20
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7f3 f8e5 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	334c      	adds	r3, #76	@ 0x4c
 8017e94:	4618      	mov	r0, r3
 8017e96:	f000 fa12 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7eb fe83 	bl	8003ba8 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8017ea2:	487d      	ldr	r0, [pc, #500]	@ (8018098 <_ZN7TMC22099configureEv+0x26c>)
 8017ea4:	f011 fa0a 	bl	80292bc <iprintf>
    uint16_t result = driver->test_connection();
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	334c      	adds	r3, #76	@ 0x4c
 8017eac:	4618      	mov	r0, r3
 8017eae:	f000 fa06 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7ec fc0f 	bl	80046d8 <_ZN10TMCStepper15test_connectionEv>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 8017ebe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d018      	beq.n	8017ef6 <_ZN7TMC22099configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 8017ec4:	4875      	ldr	r0, [pc, #468]	@ (801809c <_ZN7TMC22099configureEv+0x270>)
 8017ec6:	f011 f9f9 	bl	80292bc <iprintf>
        switch(result) {
 8017eca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d002      	beq.n	8017ed6 <_ZN7TMC22099configureEv+0xaa>
 8017ed0:	2b02      	cmp	r3, #2
 8017ed2:	d004      	beq.n	8017ede <_ZN7TMC22099configureEv+0xb2>
 8017ed4:	e007      	b.n	8017ee6 <_ZN7TMC22099configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 8017ed6:	4872      	ldr	r0, [pc, #456]	@ (80180a0 <_ZN7TMC22099configureEv+0x274>)
 8017ed8:	f011 fa60 	bl	802939c <puts>
 8017edc:	e007      	b.n	8017eee <_ZN7TMC22099configureEv+0xc2>
            case 2: printf("No power\n"); break;
 8017ede:	4871      	ldr	r0, [pc, #452]	@ (80180a4 <_ZN7TMC22099configureEv+0x278>)
 8017ee0:	f011 fa5c 	bl	802939c <puts>
 8017ee4:	e003      	b.n	8017eee <_ZN7TMC22099configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 8017ee6:	4870      	ldr	r0, [pc, #448]	@ (80180a8 <_ZN7TMC22099configureEv+0x27c>)
 8017ee8:	f011 fa58 	bl	802939c <puts>
 8017eec:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8017eee:	486f      	ldr	r0, [pc, #444]	@ (80180ac <_ZN7TMC22099configureEv+0x280>)
 8017ef0:	f011 fa54 	bl	802939c <puts>
 8017ef4:	e002      	b.n	8017efc <_ZN7TMC22099configureEv+0xd0>
    } else {
        printf("OK\n");
 8017ef6:	486e      	ldr	r0, [pc, #440]	@ (80180b0 <_ZN7TMC22099configureEv+0x284>)
 8017ef8:	f011 fa50 	bl	802939c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	334c      	adds	r3, #76	@ 0x4c
 8017f00:	4618      	mov	r0, r3
 8017f02:	f000 f9dc 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2104      	movs	r1, #4
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7ea fe16 	bl	8002b3c <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	334c      	adds	r3, #76	@ 0x4c
 8017f14:	4618      	mov	r0, r3
 8017f16:	f000 f9d2 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2118      	movs	r1, #24
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7ec fca6 	bl	8004870 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	334c      	adds	r3, #76	@ 0x4c
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f000 f9c8 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	461a      	mov	r2, r3
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8017f38:	4619      	mov	r1, r3
 8017f3a:	4610      	mov	r0, r2
 8017f3c:	f7ec fb30 	bl	80045a0 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	334c      	adds	r3, #76	@ 0x4c
 8017f44:	4618      	mov	r0, r3
 8017f46:	f000 f9ba 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8017f54:	4619      	mov	r1, r3
 8017f56:	4610      	mov	r0, r2
 8017f58:	f7ec fbda 	bl	8004710 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	334c      	adds	r3, #76	@ 0x4c
 8017f60:	4618      	mov	r0, r3
 8017f62:	f000 f9ac 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f66:	4603      	mov	r3, r0
 8017f68:	4952      	ldr	r1, [pc, #328]	@ (80180b4 <_ZN7TMC22099configureEv+0x288>)
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7ec f936 	bl	80041dc <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	334c      	adds	r3, #76	@ 0x4c
 8017f74:	4618      	mov	r0, r3
 8017f76:	f000 f9a2 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2105      	movs	r1, #5
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7ea ffc1 	bl	8002f06 <_ZN14TMC2209Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	334c      	adds	r3, #76	@ 0x4c
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f000 f998 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	2102      	movs	r1, #2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7ea ffd6 	bl	8002f44 <_ZN14TMC2209Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	334c      	adds	r3, #76	@ 0x4c
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f000 f98e 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	2101      	movs	r1, #1
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7ea ffeb 	bl	8002f82 <_ZN14TMC2209Stepper4sednEh>
    driver->en_spreadCycle(!stealth);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	334c      	adds	r3, #76	@ 0x4c
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f000 f984 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	461a      	mov	r2, r3
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017fc0:	f083 0301 	eor.w	r3, r3, #1
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	4610      	mov	r0, r2
 8017fca:	f7eb f845 	bl	8003058 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	334c      	adds	r3, #76	@ 0x4c
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f000 f973 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	2101      	movs	r1, #1
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7eb f941 	bl	8003264 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d012      	beq.n	8018012 <_ZN7TMC22099configureEv+0x1e6>
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d00d      	beq.n	8018012 <_ZN7TMC22099configureEv+0x1e6>
        // StallGuard sensitivity threshold (higher = more sensitive)
        driver->SGTHRS(stall);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	334c      	adds	r3, #76	@ 0x4c
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f000 f95f 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018000:	4602      	mov	r2, r0
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018008:	b2db      	uxtb	r3, r3
 801800a:	4619      	mov	r1, r3
 801800c:	4610      	mov	r0, r2
 801800e:	f7ec f8ce 	bl	80041ae <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	334c      	adds	r3, #76	@ 0x4c
 8018016:	4618      	mov	r0, r3
 8018018:	f000 f951 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801801c:	4603      	mov	r3, r0
 801801e:	210a      	movs	r1, #10
 8018020:	4618      	mov	r0, r3
 8018022:	f7eb f8d1 	bl	80031c8 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	334c      	adds	r3, #76	@ 0x4c
 801802a:	4618      	mov	r0, r3
 801802c:	f000 f947 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018030:	4603      	mov	r3, r0
 8018032:	2180      	movs	r1, #128	@ 0x80
 8018034:	4618      	mov	r0, r3
 8018036:	f7ec fc53 	bl	80048e0 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 801803a:	481f      	ldr	r0, [pc, #124]	@ (80180b8 <_ZN7TMC22099configureEv+0x28c>)
 801803c:	f011 f9ae 	bl	802939c <puts>
    instance->getSerialThread()->stopThread();
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6a1b      	ldr	r3, [r3, #32]
 8018044:	4618      	mov	r0, r3
 8018046:	f7fc ff00 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 801804a:	4603      	mov	r3, r0
 801804c:	4618      	mov	r0, r3
 801804e:	f002 fea0 	bl	801ad92 <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	6a1b      	ldr	r3, [r3, #32]
 8018056:	4618      	mov	r0, r3
 8018058:	f7fc fef7 	bl	8014e4a <_ZN6Remora15getSerialThreadEv>
 801805c:	4604      	mov	r4, r0
 801805e:	f107 020c 	add.w	r2, r7, #12
 8018062:	f107 031c 	add.w	r3, r7, #28
 8018066:	4611      	mov	r1, r2
 8018068:	4618      	mov	r0, r3
 801806a:	f7fd fbf7 	bl	801585c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801806e:	f107 031c 	add.w	r3, r7, #28
 8018072:	4619      	mov	r1, r3
 8018074:	4620      	mov	r0, r4
 8018076:	f002 fe17 	bl	801aca8 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 801807a:	f107 031c 	add.w	r3, r7, #28
 801807e:	4618      	mov	r0, r3
 8018080:	f7f2 ffeb 	bl	800b05a <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8018084:	f107 030c 	add.w	r3, r7, #12
 8018088:	4618      	mov	r0, r3
 801808a:	f7fc ff61 	bl	8014f50 <_ZNSt10shared_ptrI3TMCED1Ev>
 801808e:	372c      	adds	r7, #44	@ 0x2c
 8018090:	46bd      	mov	sp, r7
 8018092:	bd90      	pop	{r4, r7, pc}
 8018094:	0802acd8 	.word	0x0802acd8
 8018098:	0802acf4 	.word	0x0802acf4
 801809c:	0802ad1c 	.word	0x0802ad1c
 80180a0:	0802ad34 	.word	0x0802ad34
 80180a4:	0802ad48 	.word	0x0802ad48
 80180a8:	0802ad54 	.word	0x0802ad54
 80180ac:	0802ad64 	.word	0x0802ad64
 80180b0:	0802ad8c 	.word	0x0802ad8c
 80180b4:	000fffff 	.word	0x000fffff
 80180b8:	0802ad90 	.word	0x0802ad90

080180bc <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b082      	sub	sp, #8
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	334c      	adds	r3, #76	@ 0x4c
 80180c8:	4618      	mov	r0, r3
 80180ca:	f000 f8f8 	bl	80182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180ce:	4603      	mov	r3, r0
 80180d0:	695b      	ldr	r3, [r3, #20]
 80180d2:	4618      	mov	r0, r3
 80180d4:	f7ea fa40 	bl	8002558 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80180d8:	bf00      	nop
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}

080180e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f000 f8f4 	bl	80182d6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 80180ee:	4603      	mov	r3, r0
  }
 80180f0:	4618      	mov	r0, r3
 80180f2:	3708      	adds	r7, #8
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd80      	pop	{r7, pc}

080180f8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b08c      	sub	sp, #48	@ 0x30
 80180fc:	af02      	add	r7, sp, #8
 80180fe:	60f8      	str	r0, [r7, #12]
 8018100:	60b9      	str	r1, [r7, #8]
 8018102:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8018104:	68ba      	ldr	r2, [r7, #8]
 8018106:	f107 0314 	add.w	r3, r7, #20
 801810a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801810e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018112:	f107 031c 	add.w	r3, r7, #28
 8018116:	6879      	ldr	r1, [r7, #4]
 8018118:	4618      	mov	r0, r3
 801811a:	f000 f8fe 	bl	801831a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801811e:	466a      	mov	r2, sp
 8018120:	f107 0320 	add.w	r3, r7, #32
 8018124:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018128:	e882 0003 	stmia.w	r2, {r0, r1}
 801812c:	69fb      	ldr	r3, [r7, #28]
 801812e:	f107 0214 	add.w	r2, r7, #20
 8018132:	ca06      	ldmia	r2, {r1, r2}
 8018134:	68f8      	ldr	r0, [r7, #12]
 8018136:	f7ef fd3a 	bl	8007bae <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801813a:	68f8      	ldr	r0, [r7, #12]
 801813c:	3728      	adds	r7, #40	@ 0x28
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}

08018142 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8018142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018146:	b08e      	sub	sp, #56	@ 0x38
 8018148:	af06      	add	r7, sp, #24
 801814a:	6178      	str	r0, [r7, #20]
 801814c:	6139      	str	r1, [r7, #16]
 801814e:	60fa      	str	r2, [r7, #12]
 8018150:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 8018152:	f107 031c 	add.w	r3, r7, #28
 8018156:	469a      	mov	sl, r3
 8018158:	6938      	ldr	r0, [r7, #16]
 801815a:	f7fd fc51 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801815e:	4680      	mov	r8, r0
 8018160:	68f8      	ldr	r0, [r7, #12]
 8018162:	f7fd fc58 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018166:	4681      	mov	r9, r0
 8018168:	68b8      	ldr	r0, [r7, #8]
 801816a:	f000 f8e9 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801816e:	4604      	mov	r4, r0
 8018170:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018172:	f7fd fc5b 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018176:	4605      	mov	r5, r0
 8018178:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801817a:	f7fd fc57 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801817e:	4606      	mov	r6, r0
 8018180:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018182:	f7f9 f946 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018186:	6078      	str	r0, [r7, #4]
 8018188:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801818a:	f7fd fc4f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801818e:	6038      	str	r0, [r7, #0]
 8018190:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018192:	f7fd fc56 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018196:	4603      	mov	r3, r0
 8018198:	9305      	str	r3, [sp, #20]
 801819a:	683b      	ldr	r3, [r7, #0]
 801819c:	9304      	str	r3, [sp, #16]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	9303      	str	r3, [sp, #12]
 80181a2:	9602      	str	r6, [sp, #8]
 80181a4:	9501      	str	r5, [sp, #4]
 80181a6:	9400      	str	r4, [sp, #0]
 80181a8:	464b      	mov	r3, r9
 80181aa:	4642      	mov	r2, r8
 80181ac:	4651      	mov	r1, sl
 80181ae:	6978      	ldr	r0, [r7, #20]
 80181b0:	f000 f8d1 	bl	8018356 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80181b4:	6978      	ldr	r0, [r7, #20]
 80181b6:	3720      	adds	r7, #32
 80181b8:	46bd      	mov	sp, r7
 80181ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080181be <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80181be:	b590      	push	{r4, r7, lr}
 80181c0:	b083      	sub	sp, #12
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	6078      	str	r0, [r7, #4]
 80181c6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80181c8:	687c      	ldr	r4, [r7, #4]
 80181ca:	6838      	ldr	r0, [r7, #0]
 80181cc:	f000 f901 	bl	80183d2 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>
 80181d0:	4603      	mov	r3, r0
 80181d2:	4619      	mov	r1, r3
 80181d4:	4620      	mov	r0, r4
 80181d6:	f000 f907 	bl	80183e8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	4618      	mov	r0, r3
 80181de:	370c      	adds	r7, #12
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd90      	pop	{r4, r7, pc}

080181e4 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80181e4:	b590      	push	{r4, r7, lr}
 80181e6:	ed2d 8b02 	vpush	{d8}
 80181ea:	b091      	sub	sp, #68	@ 0x44
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	607a      	str	r2, [r7, #4]
 80181f4:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80181f6:	206c      	movs	r0, #108	@ 0x6c
 80181f8:	f010 f9b6 	bl	8028568 <_Znwj>
 80181fc:	4603      	mov	r3, r0
 80181fe:	461c      	mov	r4, r3
 8018200:	68b8      	ldr	r0, [r7, #8]
 8018202:	f7f7 fa17 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8018206:	4602      	mov	r2, r0
 8018208:	f107 0310 	add.w	r3, r7, #16
 801820c:	4611      	mov	r1, r2
 801820e:	4618      	mov	r0, r3
 8018210:	f010 fcb5 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f7f7 fa0d 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801821a:	4602      	mov	r2, r0
 801821c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018220:	4611      	mov	r1, r2
 8018222:	4618      	mov	r0, r3
 8018224:	f010 fcab 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8018228:	6838      	ldr	r0, [r7, #0]
 801822a:	f7fd fbf4 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801822e:	4603      	mov	r3, r0
 8018230:	ed93 8a00 	vldr	s16, [r3]
 8018234:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018236:	f000 f883 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801823a:	4603      	mov	r3, r0
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8018242:	f107 0110 	add.w	r1, r7, #16
 8018246:	eeb0 0a48 	vmov.f32	s0, s16
 801824a:	4620      	mov	r0, r4
 801824c:	f7ff fc3e 	bl	8017acc <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8018250:	4621      	mov	r1, r4
 8018252:	68f8      	ldr	r0, [r7, #12]
 8018254:	f000 f8f6 	bl	8018444 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8018258:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801825c:	4618      	mov	r0, r3
 801825e:	f010 fa7e 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8018262:	f107 0310 	add.w	r3, r7, #16
 8018266:	4618      	mov	r0, r3
 8018268:	f010 fa79 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801826c:	bf00      	nop
 801826e:	68f8      	ldr	r0, [r7, #12]
 8018270:	3744      	adds	r7, #68	@ 0x44
 8018272:	46bd      	mov	sp, r7
 8018274:	ecbd 8b02 	vpop	{d8}
 8018278:	bd90      	pop	{r4, r7, pc}

0801827a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 801827a:	b590      	push	{r4, r7, lr}
 801827c:	b085      	sub	sp, #20
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	4618      	mov	r0, r3
 8018286:	f000 f8ec 	bl	8018462 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 801828a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d00c      	beq.n	80182ae <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8018294:	6878      	ldr	r0, [r7, #4]
 8018296:	f000 f8f1 	bl	801847c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>
 801829a:	4604      	mov	r4, r0
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f000 f8fa 	bl	8018496 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>
 80182a2:	4603      	mov	r3, r0
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4619      	mov	r1, r3
 80182a8:	4620      	mov	r0, r4
 80182aa:	f000 f911 	bl	80184d0 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>
	__ptr = pointer();
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	2200      	movs	r2, #0
 80182b2:	601a      	str	r2, [r3, #0]
      }
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	4618      	mov	r0, r3
 80182b8:	3714      	adds	r7, #20
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd90      	pop	{r4, r7, pc}

080182be <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80182be:	b580      	push	{r7, lr}
 80182c0:	b082      	sub	sp, #8
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	6078      	str	r0, [r7, #4]
	return get();
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	f000 f915 	bl	80184f6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>
 80182cc:	4603      	mov	r3, r0
      }
 80182ce:	4618      	mov	r0, r3
 80182d0:	3708      	adds	r7, #8
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd80      	pop	{r7, pc}

080182d6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80182d6:	b590      	push	{r4, r7, lr}
 80182d8:	b087      	sub	sp, #28
 80182da:	af00      	add	r7, sp, #0
 80182dc:	6078      	str	r0, [r7, #4]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	617b      	str	r3, [r7, #20]
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80182e6:	6938      	ldr	r0, [r7, #16]
 80182e8:	f7f0 fb73 	bl	80089d2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80182ec:	4604      	mov	r4, r0
 80182ee:	6938      	ldr	r0, [r7, #16]
 80182f0:	f7f0 f9fd 	bl	80086ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80182f4:	4602      	mov	r2, r0
 80182f6:	f107 0308 	add.w	r3, r7, #8
 80182fa:	4621      	mov	r1, r4
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ed fa98 	bl	8005832 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8018302:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8018304:	f107 0308 	add.w	r3, r7, #8
 8018308:	e893 0003 	ldmia.w	r3, {r0, r1}
 801830c:	f000 f900 	bl	8018510 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 8018310:	4603      	mov	r3, r0
}
 8018312:	4618      	mov	r0, r3
 8018314:	371c      	adds	r7, #28
 8018316:	46bd      	mov	sp, r7
 8018318:	bd90      	pop	{r4, r7, pc}

0801831a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801831a:	b580      	push	{r7, lr}
 801831c:	b082      	sub	sp, #8
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
 8018322:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8018324:	6838      	ldr	r0, [r7, #0]
 8018326:	f000 f911 	bl	801854c <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801832a:	4602      	mov	r2, r0
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	4611      	mov	r1, r2
 8018330:	4618      	mov	r0, r3
 8018332:	f000 f916 	bl	8018562 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 8018336:	bf00      	nop
}
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	3708      	adds	r7, #8
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018340:	b480      	push	{r7}
 8018342:	b083      	sub	sp, #12
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	4618      	mov	r0, r3
 801834c:	370c      	adds	r7, #12
 801834e:	46bd      	mov	sp, r7
 8018350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018354:	4770      	bx	lr

08018356 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801835a:	b08f      	sub	sp, #60	@ 0x3c
 801835c:	af06      	add	r7, sp, #24
 801835e:	61f8      	str	r0, [r7, #28]
 8018360:	61b9      	str	r1, [r7, #24]
 8018362:	617a      	str	r2, [r7, #20]
 8018364:	613b      	str	r3, [r7, #16]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8018366:	69fc      	ldr	r4, [r7, #28]
 8018368:	6978      	ldr	r0, [r7, #20]
 801836a:	f7fd fb49 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801836e:	4680      	mov	r8, r0
 8018370:	6938      	ldr	r0, [r7, #16]
 8018372:	f7fd fb50 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018376:	4681      	mov	r9, r0
 8018378:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801837a:	f7ff ffe1 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801837e:	4605      	mov	r5, r0
 8018380:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018382:	f7fd fb53 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018386:	4606      	mov	r6, r0
 8018388:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801838a:	f7fd fb4f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801838e:	60f8      	str	r0, [r7, #12]
 8018390:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018392:	f7f9 f83e 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018396:	60b8      	str	r0, [r7, #8]
 8018398:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801839a:	f7fd fb47 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80183a2:	f7fd fb4e 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80183a6:	4603      	mov	r3, r0
 80183a8:	9305      	str	r3, [sp, #20]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	9304      	str	r3, [sp, #16]
 80183ae:	68bb      	ldr	r3, [r7, #8]
 80183b0:	9303      	str	r3, [sp, #12]
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	9302      	str	r3, [sp, #8]
 80183b6:	9601      	str	r6, [sp, #4]
 80183b8:	9500      	str	r5, [sp, #0]
 80183ba:	464b      	mov	r3, r9
 80183bc:	4642      	mov	r2, r8
 80183be:	69b9      	ldr	r1, [r7, #24]
 80183c0:	4620      	mov	r0, r4
 80183c2:	f000 f8dd 	bl	8018580 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	4618      	mov	r0, r3
 80183ca:	3724      	adds	r7, #36	@ 0x24
 80183cc:	46bd      	mov	sp, r7
 80183ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080183d2 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80183d2:	b480      	push	{r7}
 80183d4:	b083      	sub	sp, #12
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	4618      	mov	r0, r3
 80183de:	370c      	adds	r7, #12
 80183e0:	46bd      	mov	sp, r7
 80183e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e6:	4770      	bx	lr

080183e8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b082      	sub	sp, #8
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	681a      	ldr	r2, [r3, #0]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	601a      	str	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	3304      	adds	r3, #4
 80183fe:	4618      	mov	r0, r3
 8018400:	f7f4 fe56 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	1d1a      	adds	r2, r3, #4
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	3304      	adds	r3, #4
 801840c:	4619      	mov	r1, r3
 801840e:	4610      	mov	r0, r2
 8018410:	f7f5 fa0d 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8018414:	683b      	ldr	r3, [r7, #0]
 8018416:	2200      	movs	r2, #0
 8018418:	601a      	str	r2, [r3, #0]
	}
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	4618      	mov	r0, r3
 801841e:	3708      	adds	r7, #8
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}

08018424 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8018424:	b580      	push	{r7, lr}
 8018426:	b082      	sub	sp, #8
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
 801842c:	6039      	str	r1, [r7, #0]
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	683a      	ldr	r2, [r7, #0]
 8018432:	4611      	mov	r1, r2
 8018434:	4618      	mov	r0, r3
 8018436:	f000 f8ef 	bl	8018618 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	4618      	mov	r0, r3
 801843e:	3708      	adds	r7, #8
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8018444:	b580      	push	{r7, lr}
 8018446:	b082      	sub	sp, #8
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
 801844c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6839      	ldr	r1, [r7, #0]
 8018452:	4618      	mov	r0, r3
 8018454:	f7ff ffe6 	bl	8018424 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	4618      	mov	r0, r3
 801845c:	3708      	adds	r7, #8
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}

08018462 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8018462:	b580      	push	{r7, lr}
 8018464:	b082      	sub	sp, #8
 8018466:	af00      	add	r7, sp, #0
 8018468:	6078      	str	r0, [r7, #4]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	4618      	mov	r0, r3
 801846e:	f000 f8e7 	bl	8018640 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8018472:	4603      	mov	r3, r0
 8018474:	4618      	mov	r0, r3
 8018476:	3708      	adds	r7, #8
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}

0801847c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801847c:	b580      	push	{r7, lr}
 801847e:	b082      	sub	sp, #8
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	4618      	mov	r0, r3
 8018488:	f000 f8e7 	bl	801865a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>
 801848c:	4603      	mov	r3, r0
 801848e:	4618      	mov	r0, r3
 8018490:	3708      	adds	r7, #8
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}

08018496 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8018496:	b480      	push	{r7}
 8018498:	b083      	sub	sp, #12
 801849a:	af00      	add	r7, sp, #0
 801849c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	4618      	mov	r0, r3
 80184a2:	370c      	adds	r7, #12
 80184a4:	46bd      	mov	sp, r7
 80184a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184aa:	4770      	bx	lr

080184ac <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	4a05      	ldr	r2, [pc, #20]	@ (80184cc <_ZN14TMC2209StepperD1Ev+0x20>)
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	601a      	str	r2, [r3, #0]
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	4618      	mov	r0, r3
 80184be:	f7fc fcd3 	bl	8014e68 <_ZN14TMC2208StepperD1Ev>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	4618      	mov	r0, r3
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	0802b568 	.word	0x0802b568

080184d0 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 80184d0:	b590      	push	{r4, r7, lr}
 80184d2:	b083      	sub	sp, #12
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
 80184d8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80184da:	683c      	ldr	r4, [r7, #0]
 80184dc:	2c00      	cmp	r4, #0
 80184de:	d006      	beq.n	80184ee <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_+0x1e>
 80184e0:	4620      	mov	r0, r4
 80184e2:	f7ff ffe3 	bl	80184ac <_ZN14TMC2209StepperD1Ev>
 80184e6:	216c      	movs	r1, #108	@ 0x6c
 80184e8:	4620      	mov	r0, r4
 80184ea:	f010 f82c 	bl	8028546 <_ZdlPvj>
      }
 80184ee:	bf00      	nop
 80184f0:	370c      	adds	r7, #12
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd90      	pop	{r4, r7, pc}

080184f6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80184f6:	b580      	push	{r7, lr}
 80184f8:	b082      	sub	sp, #8
 80184fa:	af00      	add	r7, sp, #0
 80184fc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	4618      	mov	r0, r3
 8018502:	f000 f8b7 	bl	8018674 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8018506:	4603      	mov	r3, r0
 8018508:	4618      	mov	r0, r3
 801850a:	3708      	adds	r7, #8
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8018510:	b580      	push	{r7, lr}
 8018512:	b084      	sub	sp, #16
 8018514:	af00      	add	r7, sp, #0
 8018516:	463b      	mov	r3, r7
 8018518:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 801851c:	463b      	mov	r3, r7
 801851e:	4618      	mov	r0, r3
 8018520:	f7ee ff06 	bl	8007330 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8018524:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8018526:	463b      	mov	r3, r7
 8018528:	4618      	mov	r0, r3
 801852a:	f7ee ff0d 	bl	8007348 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 801852e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d005      	beq.n	8018542 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8018536:	68b9      	ldr	r1, [r7, #8]
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	f000 f8a9 	bl	8018690 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 801853e:	4603      	mov	r3, r0
 8018540:	e000      	b.n	8018544 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8018542:	2300      	movs	r3, #0
  }
 8018544:	4618      	mov	r0, r3
 8018546:	3710      	adds	r7, #16
 8018548:	46bd      	mov	sp, r7
 801854a:	bd80      	pop	{r7, pc}

0801854c <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8018554:	687b      	ldr	r3, [r7, #4]
}
 8018556:	4618      	mov	r0, r3
 8018558:	370c      	adds	r7, #12
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr

08018562 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8018562:	b580      	push	{r7, lr}
 8018564:	b082      	sub	sp, #8
 8018566:	af00      	add	r7, sp, #0
 8018568:	6078      	str	r0, [r7, #4]
 801856a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801856c:	2301      	movs	r3, #1
 801856e:	2211      	movs	r2, #17
 8018570:	6839      	ldr	r1, [r7, #0]
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f7ec fd96 	bl	80050a4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018584:	b092      	sub	sp, #72	@ 0x48
 8018586:	af08      	add	r7, sp, #32
 8018588:	6278      	str	r0, [r7, #36]	@ 0x24
 801858a:	6239      	str	r1, [r7, #32]
 801858c:	61fa      	str	r2, [r7, #28]
 801858e:	61bb      	str	r3, [r7, #24]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8018590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018592:	2200      	movs	r2, #0
 8018594:	601a      	str	r2, [r3, #0]
 8018596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018598:	1d1c      	adds	r4, r3, #4
 801859a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801859c:	69f8      	ldr	r0, [r7, #28]
 801859e:	f7fd fa2f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80185a2:	4680      	mov	r8, r0
 80185a4:	69b8      	ldr	r0, [r7, #24]
 80185a6:	f7fd fa36 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80185aa:	4606      	mov	r6, r0
 80185ac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80185ae:	f7ff fec7 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80185b2:	6178      	str	r0, [r7, #20]
 80185b4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80185b6:	f7fd fa39 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80185ba:	6138      	str	r0, [r7, #16]
 80185bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80185be:	f7fd fa35 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80185c6:	f7f8 ff24 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80185ca:	60b8      	str	r0, [r7, #8]
 80185cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80185ce:	f7fd fa2d 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80185d6:	f7fd fa34 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80185da:	4603      	mov	r3, r0
 80185dc:	9306      	str	r3, [sp, #24]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	9305      	str	r3, [sp, #20]
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	9304      	str	r3, [sp, #16]
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	9303      	str	r3, [sp, #12]
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	9302      	str	r3, [sp, #8]
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	9301      	str	r3, [sp, #4]
 80185f2:	9600      	str	r6, [sp, #0]
 80185f4:	4643      	mov	r3, r8
 80185f6:	6a3a      	ldr	r2, [r7, #32]
 80185f8:	4629      	mov	r1, r5
 80185fa:	4620      	mov	r0, r4
 80185fc:	f000 f8da 	bl	80187b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8018600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	4619      	mov	r1, r3
 8018606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018608:	f000 f946 	bl	8018898 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 801860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801860e:	4618      	mov	r0, r3
 8018610:	3728      	adds	r7, #40	@ 0x28
 8018612:	46bd      	mov	sp, r7
 8018614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018618 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8018618:	b590      	push	{r4, r7, lr}
 801861a:	b083      	sub	sp, #12
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	4618      	mov	r0, r3
 8018626:	f000 f958 	bl	80188da <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 801862a:	683c      	ldr	r4, [r7, #0]
 801862c:	6878      	ldr	r0, [r7, #4]
 801862e:	f7ff ff18 	bl	8018462 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8018632:	4603      	mov	r3, r0
 8018634:	601c      	str	r4, [r3, #0]
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	4618      	mov	r0, r3
 801863a:	370c      	adds	r7, #12
 801863c:	46bd      	mov	sp, r7
 801863e:	bd90      	pop	{r4, r7, pc}

08018640 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	4618      	mov	r0, r3
 801864c:	f000 f952 	bl	80188f4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018650:	4603      	mov	r3, r0
 8018652:	4618      	mov	r0, r3
 8018654:	3708      	adds	r7, #8
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}

0801865a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801865a:	b580      	push	{r7, lr}
 801865c:	b082      	sub	sp, #8
 801865e:	af00      	add	r7, sp, #0
 8018660:	6078      	str	r0, [r7, #4]
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	4618      	mov	r0, r3
 8018666:	f000 f951 	bl	801890c <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801866a:	4603      	mov	r3, r0
 801866c:	4618      	mov	r0, r3
 801866e:	3708      	adds	r7, #8
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8018674:	b580      	push	{r7, lr}
 8018676:	b082      	sub	sp, #8
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	4618      	mov	r0, r3
 8018680:	f000 f950 	bl	8018924 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8018684:	4603      	mov	r3, r0
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	4618      	mov	r0, r3
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801869a:	6839      	ldr	r1, [r7, #0]
 801869c:	6878      	ldr	r0, [r7, #4]
 801869e:	f7ed fe5d 	bl	800635c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80186a2:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	791b      	ldrb	r3, [r3, #4]
 80186a8:	3b04      	subs	r3, #4
 80186aa:	2b1a      	cmp	r3, #26
 80186ac:	d87c      	bhi.n	80187a8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 80186ae:	a201      	add	r2, pc, #4	@ (adr r2, 80186b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 80186b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b4:	08018767 	.word	0x08018767
 80186b8:	08018775 	.word	0x08018775
 80186bc:	08018721 	.word	0x08018721
 80186c0:	080187a9 	.word	0x080187a9
 80186c4:	080187a9 	.word	0x080187a9
 80186c8:	080187a9 	.word	0x080187a9
 80186cc:	08018727 	.word	0x08018727
 80186d0:	080187a9 	.word	0x080187a9
 80186d4:	08018735 	.word	0x08018735
 80186d8:	080187a9 	.word	0x080187a9
 80186dc:	08018785 	.word	0x08018785
 80186e0:	080187a9 	.word	0x080187a9
 80186e4:	080187a9 	.word	0x080187a9
 80186e8:	080187a9 	.word	0x080187a9
 80186ec:	080187a9 	.word	0x080187a9
 80186f0:	080187a9 	.word	0x080187a9
 80186f4:	080187a9 	.word	0x080187a9
 80186f8:	080187a9 	.word	0x080187a9
 80186fc:	080187a9 	.word	0x080187a9
 8018700:	080187a9 	.word	0x080187a9
 8018704:	080187a9 	.word	0x080187a9
 8018708:	080187a9 	.word	0x080187a9
 801870c:	08018743 	.word	0x08018743
 8018710:	080187a9 	.word	0x080187a9
 8018714:	08018755 	.word	0x08018755
 8018718:	080187a9 	.word	0x080187a9
 801871c:	08018797 	.word	0x08018797
        return content_.asBoolean;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	781b      	ldrb	r3, [r3, #0]
 8018724:	e041      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	4618      	mov	r0, r3
 801872c:	f000 f907 	bl	801893e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 8018730:	4603      	mov	r3, r0
 8018732:	e03a      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4618      	mov	r0, r3
 801873a:	f000 f912 	bl	8018962 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 801873e:	4603      	mov	r3, r0
 8018740:	e033      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018748:	4610      	mov	r0, r2
 801874a:	4619      	mov	r1, r3
 801874c:	f000 f91b 	bl	8018986 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018750:	4603      	mov	r3, r0
 8018752:	e02a      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801875a:	4610      	mov	r0, r2
 801875c:	4619      	mov	r1, r3
 801875e:	f000 f925 	bl	80189ac <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018762:	4603      	mov	r3, r0
 8018764:	e021      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	4618      	mov	r0, r3
 801876c:	f000 f931 	bl	80189d2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018770:	4603      	mov	r3, r0
 8018772:	e01a      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	3308      	adds	r3, #8
 801877a:	4618      	mov	r0, r3
 801877c:	f000 f929 	bl	80189d2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018780:	4603      	mov	r3, r0
 8018782:	e012      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	edd3 7a00 	vldr	s15, [r3]
 801878a:	eeb0 0a67 	vmov.f32	s0, s15
 801878e:	f000 f934 	bl	80189fa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018792:	4603      	mov	r3, r0
 8018794:	e009      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	ed93 7b00 	vldr	d7, [r3]
 801879c:	eeb0 0b47 	vmov.f64	d0, d7
 80187a0:	f000 f945 	bl	8018a2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 80187a4:	4603      	mov	r3, r0
 80187a6:	e000      	b.n	80187aa <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80187a8:	2300      	movs	r3, #0
  }
 80187aa:	4618      	mov	r0, r3
 80187ac:	3710      	adds	r7, #16
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop

080187b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80187b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b8:	b094      	sub	sp, #80	@ 0x50
 80187ba:	af06      	add	r7, sp, #24
 80187bc:	61f8      	str	r0, [r7, #28]
 80187be:	61b9      	str	r1, [r7, #24]
 80187c0:	617a      	str	r2, [r7, #20]
 80187c2:	613b      	str	r3, [r7, #16]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80187c4:	697a      	ldr	r2, [r7, #20]
 80187c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187ca:	4611      	mov	r1, r2
 80187cc:	4618      	mov	r0, r3
 80187ce:	f000 f948 	bl	8018a62 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80187d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80187d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80187da:	4611      	mov	r1, r2
 80187dc:	4618      	mov	r0, r3
 80187de:	f000 f959 	bl	8018a94 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80187e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80187e6:	4618      	mov	r0, r3
 80187e8:	f000 f97c 	bl	8018ae4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80187ec:	6378      	str	r0, [r7, #52]	@ 0x34
	  auto __pi = ::new (__mem)
 80187ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f0:	4619      	mov	r1, r3
 80187f2:	205c      	movs	r0, #92	@ 0x5c
 80187f4:	f7f2 f828 	bl	800a848 <_ZnwjPv>
 80187f8:	4604      	mov	r4, r0
 80187fa:	6938      	ldr	r0, [r7, #16]
 80187fc:	f7fd f900 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018800:	4680      	mov	r8, r0
 8018802:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018804:	f7fd f907 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018808:	4681      	mov	r9, r0
 801880a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801880c:	f7ff fd98 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018810:	4605      	mov	r5, r0
 8018812:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8018814:	f7fd f90a 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018818:	4606      	mov	r6, r0
 801881a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801881c:	f7fd f906 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018820:	60f8      	str	r0, [r7, #12]
 8018822:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8018824:	f7f8 fdf5 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018828:	60b8      	str	r0, [r7, #8]
 801882a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801882c:	f7fd f8fe 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018830:	6078      	str	r0, [r7, #4]
 8018832:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8018834:	f7fd f905 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018838:	4603      	mov	r3, r0
 801883a:	9305      	str	r3, [sp, #20]
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	9304      	str	r3, [sp, #16]
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	9303      	str	r3, [sp, #12]
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	9302      	str	r3, [sp, #8]
 8018848:	9601      	str	r6, [sp, #4]
 801884a:	9500      	str	r5, [sp, #0]
 801884c:	464b      	mov	r3, r9
 801884e:	4642      	mov	r2, r8
 8018850:	4651      	mov	r1, sl
 8018852:	4620      	mov	r0, r4
 8018854:	f000 f954 	bl	8018b00 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 8018858:	633c      	str	r4, [r7, #48]	@ 0x30
	  __guard = nullptr;
 801885a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801885e:	2100      	movs	r1, #0
 8018860:	4618      	mov	r0, r3
 8018862:	f000 f99d 	bl	8018ba0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801886a:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801886c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801886e:	f000 f9a6 	bl	8018bbe <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018872:	4602      	mov	r2, r0
 8018874:	69bb      	ldr	r3, [r7, #24]
 8018876:	601a      	str	r2, [r3, #0]
	}
 8018878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801887c:	4618      	mov	r0, r3
 801887e:	f000 f91c 	bl	8018aba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8018882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018886:	4618      	mov	r0, r3
 8018888:	f000 f8f8 	bl	8018a7c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	4618      	mov	r0, r3
 8018890:	3738      	adds	r7, #56	@ 0x38
 8018892:	46bd      	mov	sp, r7
 8018894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018898 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8018898:	b580      	push	{r7, lr}
 801889a:	b084      	sub	sp, #16
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	1d1a      	adds	r2, r3, #4
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d002      	beq.n	80188b2 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	3318      	adds	r3, #24
 80188b0:	e000      	b.n	80188b4 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 80188b2:	2300      	movs	r3, #0
 80188b4:	4619      	mov	r1, r3
 80188b6:	4610      	mov	r0, r2
 80188b8:	f7fd ffb9 	bl	801682e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 80188bc:	60f8      	str	r0, [r7, #12]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d006      	beq.n	80188d2 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	3304      	adds	r3, #4
 80188c8:	461a      	mov	r2, r3
 80188ca:	6839      	ldr	r1, [r7, #0]
 80188cc:	68f8      	ldr	r0, [r7, #12]
 80188ce:	f000 f984 	bl	8018bda <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 80188d2:	bf00      	nop
 80188d4:	3710      	adds	r7, #16
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bd80      	pop	{r7, pc}

080188da <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80188da:	b580      	push	{r7, lr}
 80188dc:	b082      	sub	sp, #8
 80188de:	af00      	add	r7, sp, #0
 80188e0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	4618      	mov	r0, r3
 80188e6:	f000 f988 	bl	8018bfa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	4618      	mov	r0, r3
 80188ee:	3708      	adds	r7, #8
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b082      	sub	sp, #8
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f000 f98c 	bl	8018c1a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 8018902:	4603      	mov	r3, r0
 8018904:	4618      	mov	r0, r3
 8018906:	3708      	adds	r7, #8
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f000 f98d 	bl	8018c34 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801891a:	4603      	mov	r3, r0
 801891c:	4618      	mov	r0, r3
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8018924:	b580      	push	{r7, lr}
 8018926:	b082      	sub	sp, #8
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	4618      	mov	r0, r3
 8018930:	f000 f98c 	bl	8018c4c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018934:	4603      	mov	r3, r0
 8018936:	4618      	mov	r0, r3
 8018938:	3708      	adds	r7, #8
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}

0801893e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 801893e:	b580      	push	{r7, lr}
 8018940:	b082      	sub	sp, #8
 8018942:	af00      	add	r7, sp, #0
 8018944:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018946:	6878      	ldr	r0, [r7, #4]
 8018948:	f000 f98c 	bl	8018c64 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801894c:	4603      	mov	r3, r0
 801894e:	2b00      	cmp	r3, #0
 8018950:	d002      	beq.n	8018958 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	b2db      	uxtb	r3, r3
 8018956:	e000      	b.n	801895a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 8018958:	2300      	movs	r3, #0
}
 801895a:	4618      	mov	r0, r3
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}

08018962 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 8018962:	b580      	push	{r7, lr}
 8018964:	b082      	sub	sp, #8
 8018966:	af00      	add	r7, sp, #0
 8018968:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	f000 f98c 	bl	8018c88 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018970:	4603      	mov	r3, r0
 8018972:	2b00      	cmp	r3, #0
 8018974:	d002      	beq.n	801897c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	b2db      	uxtb	r3, r3
 801897a:	e000      	b.n	801897e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 801897c:	2300      	movs	r3, #0
}
 801897e:	4618      	mov	r0, r3
 8018980:	3708      	adds	r7, #8
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}

08018986 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 8018986:	b580      	push	{r7, lr}
 8018988:	b082      	sub	sp, #8
 801898a:	af00      	add	r7, sp, #0
 801898c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018994:	f000 f98f 	bl	8018cb6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018998:	4603      	mov	r3, r0
 801899a:	2b00      	cmp	r3, #0
 801899c:	d001      	beq.n	80189a2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 801899e:	783b      	ldrb	r3, [r7, #0]
 80189a0:	e000      	b.n	80189a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 80189a2:	2300      	movs	r3, #0
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	3708      	adds	r7, #8
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}

080189ac <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b082      	sub	sp, #8
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80189b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80189ba:	f000 f995 	bl	8018ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80189be:	4603      	mov	r3, r0
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d001      	beq.n	80189c8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 80189c4:	783b      	ldrb	r3, [r7, #0]
 80189c6:	e000      	b.n	80189ca <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 80189c8:	2300      	movs	r3, #0
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3708      	adds	r7, #8
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}

080189d2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 80189d2:	b580      	push	{r7, lr}
 80189d4:	b086      	sub	sp, #24
 80189d6:	af00      	add	r7, sp, #0
 80189d8:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80189da:	f107 0308 	add.w	r3, r7, #8
 80189de:	6879      	ldr	r1, [r7, #4]
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7ed ff1f 	bl	8006824 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80189e6:	f107 0308 	add.w	r3, r7, #8
 80189ea:	4618      	mov	r0, r3
 80189ec:	f000 f99c 	bl	8018d28 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 80189f0:	4603      	mov	r3, r0
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3718      	adds	r7, #24
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}

080189fa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 80189fa:	b580      	push	{r7, lr}
 80189fc:	b082      	sub	sp, #8
 80189fe:	af00      	add	r7, sp, #0
 8018a00:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018a04:	ed97 0a01 	vldr	s0, [r7, #4]
 8018a08:	f000 f9dc 	bl	8018dc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d008      	beq.n	8018a24 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8018a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8018a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018a1a:	edc7 7a00 	vstr	s15, [r7]
 8018a1e:	783b      	ldrb	r3, [r7, #0]
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	e000      	b.n	8018a26 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8018a24:	2300      	movs	r3, #0
}
 8018a26:	4618      	mov	r0, r3
 8018a28:	3708      	adds	r7, #8
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}

08018a2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8018a2e:	b580      	push	{r7, lr}
 8018a30:	b084      	sub	sp, #16
 8018a32:	af00      	add	r7, sp, #0
 8018a34:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018a38:	ed97 0b02 	vldr	d0, [r7, #8]
 8018a3c:	f000 f9ea 	bl	8018e14 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018a40:	4603      	mov	r3, r0
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d008      	beq.n	8018a58 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 8018a46:	ed97 7b02 	vldr	d7, [r7, #8]
 8018a4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018a4e:	edc7 7a01 	vstr	s15, [r7, #4]
 8018a52:	793b      	ldrb	r3, [r7, #4]
 8018a54:	b2db      	uxtb	r3, r3
 8018a56:	e000      	b.n	8018a5a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 8018a58:	2300      	movs	r3, #0
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3710      	adds	r7, #16
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b082      	sub	sp, #8
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	6078      	str	r0, [r7, #4]
 8018a6a:	6039      	str	r1, [r7, #0]
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f000 f9f9 	bl	8018e64 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	4618      	mov	r0, r3
 8018a76:	3708      	adds	r7, #8
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}

08018a7c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b082      	sub	sp, #8
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f000 f9f8 	bl	8018e7a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3708      	adds	r7, #8
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8018a9e:	2101      	movs	r1, #1
 8018aa0:	6838      	ldr	r0, [r7, #0]
 8018aa2:	f000 f9f5 	bl	8018e90 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	6839      	ldr	r1, [r7, #0]
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f000 f9fe 	bl	8018eae <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8018ab2:	6878      	ldr	r0, [r7, #4]
 8018ab4:	3708      	adds	r7, #8
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}

08018aba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8018aba:	b580      	push	{r7, lr}
 8018abc:	b082      	sub	sp, #8
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	685b      	ldr	r3, [r3, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d007      	beq.n	8018ada <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6818      	ldr	r0, [r3, #0]
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	f000 f9fe 	bl	8018ed6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	4618      	mov	r0, r3
 8018ade:	3708      	adds	r7, #8
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	685b      	ldr	r3, [r3, #4]
 8018af0:	4618      	mov	r0, r3
 8018af2:	f000 f9ff 	bl	8018ef4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8018af6:	4603      	mov	r3, r0
 8018af8:	4618      	mov	r0, r3
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}

08018b00 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8018b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b04:	b08c      	sub	sp, #48	@ 0x30
 8018b06:	af06      	add	r7, sp, #24
 8018b08:	6178      	str	r0, [r7, #20]
 8018b0a:	7439      	strb	r1, [r7, #16]
 8018b0c:	60fa      	str	r2, [r7, #12]
 8018b0e:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8018b10:	697b      	ldr	r3, [r7, #20]
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7f5 fb40 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8018b18:	4a20      	ldr	r2, [pc, #128]	@ (8018b9c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0x9c>)
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	601a      	str	r2, [r3, #0]
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	330c      	adds	r3, #12
 8018b22:	4621      	mov	r1, r4
 8018b24:	4618      	mov	r0, r3
 8018b26:	f000 f9f0 	bl	8018f0a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8018b2a:	6978      	ldr	r0, [r7, #20]
 8018b2c:	f000 f847 	bl	8018bbe <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018b30:	4680      	mov	r8, r0
 8018b32:	68f8      	ldr	r0, [r7, #12]
 8018b34:	f7fc ff64 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018b38:	4681      	mov	r9, r0
 8018b3a:	68b8      	ldr	r0, [r7, #8]
 8018b3c:	f7fc ff6b 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b40:	4682      	mov	sl, r0
 8018b42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018b44:	f7ff fbfc 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b48:	4604      	mov	r4, r0
 8018b4a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018b4c:	f7fc ff6e 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b50:	4605      	mov	r5, r0
 8018b52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018b54:	f7fc ff6a 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b58:	4606      	mov	r6, r0
 8018b5a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018b5c:	f7f8 fc59 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b60:	6078      	str	r0, [r7, #4]
 8018b62:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018b64:	f7fc ff62 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b68:	6038      	str	r0, [r7, #0]
 8018b6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018b6c:	f7fc ff69 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018b70:	4603      	mov	r3, r0
 8018b72:	f107 0010 	add.w	r0, r7, #16
 8018b76:	9305      	str	r3, [sp, #20]
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	9304      	str	r3, [sp, #16]
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	9303      	str	r3, [sp, #12]
 8018b80:	9602      	str	r6, [sp, #8]
 8018b82:	9501      	str	r5, [sp, #4]
 8018b84:	9400      	str	r4, [sp, #0]
 8018b86:	4653      	mov	r3, sl
 8018b88:	464a      	mov	r2, r9
 8018b8a:	4641      	mov	r1, r8
 8018b8c:	f000 f9cc 	bl	8018f28 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8018b90:	697b      	ldr	r3, [r7, #20]
 8018b92:	4618      	mov	r0, r3
 8018b94:	3718      	adds	r7, #24
 8018b96:	46bd      	mov	sp, r7
 8018b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b9c:	0802b528 	.word	0x0802b528

08018ba0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8018ba0:	b480      	push	{r7}
 8018ba2:	b083      	sub	sp, #12
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
 8018ba8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2200      	movs	r2, #0
 8018bae:	605a      	str	r2, [r3, #4]
	return *this;
 8018bb0:	687b      	ldr	r3, [r7, #4]
      }
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	370c      	adds	r7, #12
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbc:	4770      	bx	lr

08018bbe <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b082      	sub	sp, #8
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	330c      	adds	r3, #12
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f000 f9e5 	bl	8018f9a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3708      	adds	r7, #8
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}

08018bda <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8018bda:	b580      	push	{r7, lr}
 8018bdc:	b084      	sub	sp, #16
 8018bde:	af00      	add	r7, sp, #0
 8018be0:	60f8      	str	r0, [r7, #12]
 8018be2:	60b9      	str	r1, [r7, #8]
 8018be4:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	687a      	ldr	r2, [r7, #4]
 8018bea:	68b9      	ldr	r1, [r7, #8]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fe f9a7 	bl	8016f40 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8018bf2:	bf00      	nop
 8018bf4:	3710      	adds	r7, #16
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}

08018bfa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8018bfa:	b580      	push	{r7, lr}
 8018bfc:	b082      	sub	sp, #8
 8018bfe:	af00      	add	r7, sp, #0
 8018c00:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	f000 f9d5 	bl	8018fb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f000 f9dd 	bl	8018fca <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	4618      	mov	r0, r3
 8018c14:	3708      	adds	r7, #8
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}

08018c1a <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018c1a:	b580      	push	{r7, lr}
 8018c1c:	b082      	sub	sp, #8
 8018c1e:	af00      	add	r7, sp, #0
 8018c20:	6078      	str	r0, [r7, #4]
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	f000 f9de 	bl	8018fe6 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	3708      	adds	r7, #8
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}

08018c34 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b082      	sub	sp, #8
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f000 f9dd 	bl	8018ffc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>
 8018c42:	4603      	mov	r3, r0
 8018c44:	4618      	mov	r0, r3
 8018c46:	3708      	adds	r7, #8
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}

08018c4c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018c54:	6878      	ldr	r0, [r7, #4]
 8018c56:	f000 f9dd 	bl	8019014 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3708      	adds	r7, #8
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018c6c:	f000 f8a2 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018c70:	4603      	mov	r3, r0
 8018c72:	461a      	mov	r2, r3
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	4293      	cmp	r3, r2
 8018c78:	bf94      	ite	ls
 8018c7a:	2301      	movls	r3, #1
 8018c7c:	2300      	movhi	r3, #0
 8018c7e:	b2db      	uxtb	r3, r3
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	3708      	adds	r7, #8
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}

08018c88 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	da01      	bge.n	8018c9a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8018c96:	2300      	movs	r3, #0
 8018c98:	e009      	b.n	8018cae <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018c9a:	f000 f88b 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	461a      	mov	r2, r3
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	4293      	cmp	r3, r2
 8018ca6:	bfd4      	ite	le
 8018ca8:	2301      	movle	r3, #1
 8018caa:	2300      	movgt	r3, #0
 8018cac:	b2db      	uxtb	r3, r3
}
 8018cae:	4618      	mov	r0, r3
 8018cb0:	3708      	adds	r7, #8
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	bd80      	pop	{r7, pc}

08018cb6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018cb6:	b5b0      	push	{r4, r5, r7, lr}
 8018cb8:	b082      	sub	sp, #8
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018cc0:	f000 f878 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	2200      	movs	r2, #0
 8018cca:	461c      	mov	r4, r3
 8018ccc:	4615      	mov	r5, r2
 8018cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018cd2:	4294      	cmp	r4, r2
 8018cd4:	eb75 0303 	sbcs.w	r3, r5, r3
 8018cd8:	bf2c      	ite	cs
 8018cda:	2301      	movcs	r3, #1
 8018cdc:	2300      	movcc	r3, #0
 8018cde:	b2db      	uxtb	r3, r3
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bdb0      	pop	{r4, r5, r7, pc}

08018ce8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018ce8:	b5b0      	push	{r4, r5, r7, lr}
 8018cea:	b082      	sub	sp, #8
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8018cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	da01      	bge.n	8018cfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	e00f      	b.n	8018d1e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018cfe:	f000 f859 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018d02:	4603      	mov	r3, r0
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	2200      	movs	r2, #0
 8018d08:	461c      	mov	r4, r3
 8018d0a:	4615      	mov	r5, r2
 8018d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d10:	4294      	cmp	r4, r2
 8018d12:	eb75 0303 	sbcs.w	r3, r5, r3
 8018d16:	bfac      	ite	ge
 8018d18:	2301      	movge	r3, #1
 8018d1a:	2300      	movlt	r3, #0
 8018d1c:	b2db      	uxtb	r3, r3
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3708      	adds	r7, #8
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018d28 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	3b01      	subs	r3, #1
 8018d36:	2b03      	cmp	r3, #3
 8018d38:	d82e      	bhi.n	8018d98 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 8018d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8018d40 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8018d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d40:	08018d51 	.word	0x08018d51
 8018d44:	08018d63 	.word	0x08018d63
 8018d48:	08018d75 	.word	0x08018d75
 8018d4c:	08018d87 	.word	0x08018d87
        return convertNumber<T>(value_.asFloat);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	edd3 7a02 	vldr	s15, [r3, #8]
 8018d56:	eeb0 0a67 	vmov.f32	s0, s15
 8018d5a:	f7ff fe4e 	bl	80189fa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	e01b      	b.n	8018d9a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018d68:	4610      	mov	r0, r2
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	f7ff fe1e 	bl	80189ac <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018d70:	4603      	mov	r3, r0
 8018d72:	e012      	b.n	8018d9a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018d7a:	4610      	mov	r0, r2
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	f7ff fe02 	bl	8018986 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018d82:	4603      	mov	r3, r0
 8018d84:	e009      	b.n	8018d9a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	ed93 7b02 	vldr	d7, [r3, #8]
 8018d8c:	eeb0 0b47 	vmov.f64	d0, d7
 8018d90:	f7ff fe4d 	bl	8018a2e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018d94:	4603      	mov	r3, r0
 8018d96:	e000      	b.n	8018d9a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 8018d98:	2300      	movs	r3, #0
  }
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3708      	adds	r7, #8
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
 8018da2:	bf00      	nop

08018da4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8018da4:	b480      	push	{r7}
 8018da6:	af00      	add	r7, sp, #0
    return 0;
 8018da8:	2300      	movs	r3, #0
  }
 8018daa:	4618      	mov	r0, r3
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr

08018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8018db4:	b480      	push	{r7}
 8018db6:	af00      	add	r7, sp, #0
    return T(-1);
 8018db8:	23ff      	movs	r3, #255	@ 0xff
  }
 8018dba:	4618      	mov	r0, r3
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc2:	4770      	bx	lr

08018dc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b082      	sub	sp, #8
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8018dce:	f7ff ffe9 	bl	8018da4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	ee07 3a90 	vmov	s15, r3
 8018dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ddc:	ed97 7a01 	vldr	s14, [r7, #4]
 8018de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de8:	db0f      	blt.n	8018e0a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018dea:	f7ff ffe3 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018dee:	4603      	mov	r3, r0
 8018df0:	ee07 3a90 	vmov	s15, r3
 8018df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8018dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e04:	d801      	bhi.n	8018e0a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018e06:	2301      	movs	r3, #1
 8018e08:	e000      	b.n	8018e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018e0a:	2300      	movs	r3, #0
}
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	3708      	adds	r7, #8
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}

08018e14 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8018e1e:	f7ff ffc1 	bl	8018da4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018e22:	4603      	mov	r3, r0
 8018e24:	ee07 3a90 	vmov	s15, r3
 8018e28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018e2c:	ed97 6b00 	vldr	d6, [r7]
 8018e30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e38:	db0f      	blt.n	8018e5a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018e3a:	f7ff ffbb 	bl	8018db4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	ee07 3a90 	vmov	s15, r3
 8018e44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018e48:	ed97 6b00 	vldr	d6, [r7]
 8018e4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e54:	d801      	bhi.n	8018e5a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018e56:	2301      	movs	r3, #1
 8018e58:	e000      	b.n	8018e5c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018e5a:	2300      	movs	r3, #0
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3708      	adds	r7, #8
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018e64:	b480      	push	{r7}
 8018e66:	b083      	sub	sp, #12
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	370c      	adds	r7, #12
 8018e72:	46bd      	mov	sp, r7
 8018e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e78:	4770      	bx	lr

08018e7a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018e7a:	b480      	push	{r7}
 8018e7c:	b083      	sub	sp, #12
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	4618      	mov	r0, r3
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	6839      	ldr	r1, [r7, #0]
 8018e9e:	6878      	ldr	r0, [r7, #4]
 8018ea0:	f000 f8c6 	bl	8019030 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	3708      	adds	r7, #8
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}

08018eae <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8018eae:	b580      	push	{r7, lr}
 8018eb0:	b084      	sub	sp, #16
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	60f8      	str	r0, [r7, #12]
 8018eb6:	60b9      	str	r1, [r7, #8]
 8018eb8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8018eba:	68b8      	ldr	r0, [r7, #8]
 8018ebc:	f000 f8e6 	bl	801908c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8018ec0:	4602      	mov	r2, r0
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	601a      	str	r2, [r3, #0]
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	605a      	str	r2, [r3, #4]
      { }
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3710      	adds	r7, #16
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}

08018ed6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8018ed6:	b580      	push	{r7, lr}
 8018ed8:	b084      	sub	sp, #16
 8018eda:	af00      	add	r7, sp, #0
 8018edc:	60f8      	str	r0, [r7, #12]
 8018ede:	60b9      	str	r1, [r7, #8]
 8018ee0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8018ee2:	687a      	ldr	r2, [r7, #4]
 8018ee4:	68b9      	ldr	r1, [r7, #8]
 8018ee6:	68f8      	ldr	r0, [r7, #12]
 8018ee8:	f000 f8db 	bl	80190a2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8018eec:	bf00      	nop
 8018eee:	3710      	adds	r7, #16
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8018ef4:	b480      	push	{r7}
 8018ef6:	b083      	sub	sp, #12
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
      return __ptr;
 8018efc:	687b      	ldr	r3, [r7, #4]
    }
 8018efe:	4618      	mov	r0, r3
 8018f00:	370c      	adds	r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8018f0a:	b580      	push	{r7, lr}
 8018f0c:	b082      	sub	sp, #8
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
 8018f12:	7039      	strb	r1, [r7, #0]
 8018f14:	463b      	mov	r3, r7
 8018f16:	4619      	mov	r1, r3
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f7f5 fb57 	bl	800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	4618      	mov	r0, r3
 8018f22:	3708      	adds	r7, #8
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}

08018f28 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8018f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f2c:	b08c      	sub	sp, #48	@ 0x30
 8018f2e:	af06      	add	r7, sp, #24
 8018f30:	6178      	str	r0, [r7, #20]
 8018f32:	6139      	str	r1, [r7, #16]
 8018f34:	60fa      	str	r2, [r7, #12]
 8018f36:	60bb      	str	r3, [r7, #8]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8018f38:	68f8      	ldr	r0, [r7, #12]
 8018f3a:	f7fc fd61 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018f3e:	4680      	mov	r8, r0
 8018f40:	68b8      	ldr	r0, [r7, #8]
 8018f42:	f7fc fd68 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f46:	4681      	mov	r9, r0
 8018f48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018f4a:	f7ff f9f9 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f4e:	4682      	mov	sl, r0
 8018f50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018f52:	f7fc fd6b 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f56:	4604      	mov	r4, r0
 8018f58:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018f5a:	f7fc fd67 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f5e:	4605      	mov	r5, r0
 8018f60:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018f62:	f7f8 fa56 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f66:	4606      	mov	r6, r0
 8018f68:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018f6a:	f7fc fd5f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f6e:	6078      	str	r0, [r7, #4]
 8018f70:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018f72:	f7fc fd66 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018f76:	4603      	mov	r3, r0
 8018f78:	9304      	str	r3, [sp, #16]
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	9303      	str	r3, [sp, #12]
 8018f7e:	9602      	str	r6, [sp, #8]
 8018f80:	9501      	str	r5, [sp, #4]
 8018f82:	9400      	str	r4, [sp, #0]
 8018f84:	4653      	mov	r3, sl
 8018f86:	464a      	mov	r2, r9
 8018f88:	4641      	mov	r1, r8
 8018f8a:	6938      	ldr	r0, [r7, #16]
 8018f8c:	f000 f89a 	bl	80190c4 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 8018f90:	bf00      	nop
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018f9a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 8018f9a:	b580      	push	{r7, lr}
 8018f9c:	b082      	sub	sp, #8
 8018f9e:	af00      	add	r7, sp, #0
 8018fa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f000 f8e7 	bl	8019176 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	4618      	mov	r0, r3
 8018fac:	3708      	adds	r7, #8
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}

08018fb2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>:
      _Tuple_impl()
 8018fb2:	b580      	push	{r7, lr}
 8018fb4:	b082      	sub	sp, #8
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8018fba:	6878      	ldr	r0, [r7, #4]
 8018fbc:	f000 f8e6 	bl	801918c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3708      	adds	r7, #8
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}

08018fca <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8018fca:	b480      	push	{r7}
 8018fcc:	b083      	sub	sp, #12
 8018fce:	af00      	add	r7, sp, #0
 8018fd0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	601a      	str	r2, [r3, #0]
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	4618      	mov	r0, r3
 8018fdc:	370c      	adds	r7, #12
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe4:	4770      	bx	lr

08018fe6 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8018fe6:	b480      	push	{r7}
 8018fe8:	b083      	sub	sp, #12
 8018fea:	af00      	add	r7, sp, #0
 8018fec:	6078      	str	r0, [r7, #4]
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	370c      	adds	r7, #12
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffa:	4770      	bx	lr

08018ffc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f000 f8cc 	bl	80191a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>
 801900a:	4603      	mov	r3, r0
 801900c:	4618      	mov	r0, r3
 801900e:	3708      	adds	r7, #8
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8019014:	b580      	push	{r7, lr}
 8019016:	b082      	sub	sp, #8
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	4618      	mov	r0, r3
 8019020:	f000 f8ca 	bl	80191b8 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>
 8019024:	4603      	mov	r3, r0
 8019026:	4618      	mov	r0, r3
 8019028:	3708      	adds	r7, #8
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}
	...

08019030 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	60f8      	str	r0, [r7, #12]
 8019038:	60b9      	str	r1, [r7, #8]
 801903a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801903c:	68f8      	ldr	r0, [r7, #12]
 801903e:	f000 f8c7 	bl	80191d0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8019042:	4602      	mov	r2, r0
 8019044:	68bb      	ldr	r3, [r7, #8]
 8019046:	4293      	cmp	r3, r2
 8019048:	bf8c      	ite	hi
 801904a:	2301      	movhi	r3, #1
 801904c:	2300      	movls	r3, #0
 801904e:	b2db      	uxtb	r3, r3
 8019050:	2b00      	cmp	r3, #0
 8019052:	bf14      	ite	ne
 8019054:	2301      	movne	r3, #1
 8019056:	2300      	moveq	r3, #0
 8019058:	b2db      	uxtb	r3, r3
 801905a:	2b00      	cmp	r3, #0
 801905c:	d007      	beq.n	801906e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	4a09      	ldr	r2, [pc, #36]	@ (8019088 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d901      	bls.n	801906a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8019066:	f00f fa95 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801906a:	f00f fa90 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801906e:	68bb      	ldr	r3, [r7, #8]
 8019070:	225c      	movs	r2, #92	@ 0x5c
 8019072:	fb02 f303 	mul.w	r3, r2, r3
 8019076:	4618      	mov	r0, r3
 8019078:	f00f fa76 	bl	8028568 <_Znwj>
 801907c:	4603      	mov	r3, r0
 801907e:	bf00      	nop
      }
 8019080:	4618      	mov	r0, r3
 8019082:	3710      	adds	r7, #16
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}
 8019088:	02c8590b 	.word	0x02c8590b

0801908c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801908c:	b480      	push	{r7}
 801908e:	b083      	sub	sp, #12
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	4618      	mov	r0, r3
 8019098:	370c      	adds	r7, #12
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr

080190a2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80190a2:	b580      	push	{r7, lr}
 80190a4:	b084      	sub	sp, #16
 80190a6:	af00      	add	r7, sp, #0
 80190a8:	60f8      	str	r0, [r7, #12]
 80190aa:	60b9      	str	r1, [r7, #8]
 80190ac:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	225c      	movs	r2, #92	@ 0x5c
 80190b2:	fb02 f303 	mul.w	r3, r2, r3
 80190b6:	4619      	mov	r1, r3
 80190b8:	68b8      	ldr	r0, [r7, #8]
 80190ba:	f00f fa44 	bl	8028546 <_ZdlPvj>
      }
 80190be:	3710      	adds	r7, #16
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}

080190c4 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80190c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190c8:	ed2d 8b02 	vpush	{d8}
 80190cc:	b08e      	sub	sp, #56	@ 0x38
 80190ce:	af04      	add	r7, sp, #16
 80190d0:	60f8      	str	r0, [r7, #12]
 80190d2:	60b9      	str	r1, [r7, #8]
 80190d4:	607a      	str	r2, [r7, #4]
 80190d6:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	4619      	mov	r1, r3
 80190dc:	2050      	movs	r0, #80	@ 0x50
 80190de:	f7f1 fbb3 	bl	800a848 <_ZnwjPv>
 80190e2:	4682      	mov	sl, r0
 80190e4:	68b8      	ldr	r0, [r7, #8]
 80190e6:	f7fc fc8b 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80190ea:	4602      	mov	r2, r0
 80190ec:	f107 0310 	add.w	r3, r7, #16
 80190f0:	4611      	mov	r1, r2
 80190f2:	4618      	mov	r0, r3
 80190f4:	f00f fb14 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f7fc fc8c 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80190fe:	4603      	mov	r3, r0
 8019100:	ed93 8a00 	vldr	s16, [r3]
 8019104:	6838      	ldr	r0, [r7, #0]
 8019106:	f7ff f91b 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801910a:	4603      	mov	r3, r0
 801910c:	f893 8000 	ldrb.w	r8, [r3]
 8019110:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019112:	f7fc fc8b 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019116:	4603      	mov	r3, r0
 8019118:	f8b3 9000 	ldrh.w	r9, [r3]
 801911c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801911e:	f7fc fc85 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019122:	4603      	mov	r3, r0
 8019124:	881c      	ldrh	r4, [r3, #0]
 8019126:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019128:	f7f8 f973 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801912c:	4603      	mov	r3, r0
 801912e:	781d      	ldrb	r5, [r3, #0]
 8019130:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019132:	f7fc fc7b 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019136:	4603      	mov	r3, r0
 8019138:	881e      	ldrh	r6, [r3, #0]
 801913a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801913c:	f7fc fc81 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019140:	4603      	mov	r3, r0
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	f107 0110 	add.w	r1, r7, #16
 8019148:	9303      	str	r3, [sp, #12]
 801914a:	9602      	str	r6, [sp, #8]
 801914c:	9501      	str	r5, [sp, #4]
 801914e:	9400      	str	r4, [sp, #0]
 8019150:	464b      	mov	r3, r9
 8019152:	4642      	mov	r2, r8
 8019154:	eeb0 0a48 	vmov.f32	s0, s16
 8019158:	4650      	mov	r0, sl
 801915a:	f7fe fe15 	bl	8017d88 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>
 801915e:	f107 0310 	add.w	r3, r7, #16
 8019162:	4618      	mov	r0, r3
 8019164:	f00f fafb 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8019168:	bf00      	nop
 801916a:	3728      	adds	r7, #40	@ 0x28
 801916c:	46bd      	mov	sp, r7
 801916e:	ecbd 8b02 	vpop	{d8}
 8019172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019176 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 8019176:	b480      	push	{r7}
 8019178:	b083      	sub	sp, #12
 801917a:	af00      	add	r7, sp, #0
 801917c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801917e:	687b      	ldr	r3, [r7, #4]
      }
 8019180:	4618      	mov	r0, r3
 8019182:	370c      	adds	r7, #12
 8019184:	46bd      	mov	sp, r7
 8019186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801918a:	4770      	bx	lr

0801918c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801918c:	b480      	push	{r7}
 801918e:	b083      	sub	sp, #12
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	4618      	mov	r0, r3
 8019198:	370c      	adds	r7, #12
 801919a:	46bd      	mov	sp, r7
 801919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a0:	4770      	bx	lr

080191a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80191a2:	b480      	push	{r7}
 80191a4:	b083      	sub	sp, #12
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	6078      	str	r0, [r7, #4]
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	4618      	mov	r0, r3
 80191ae:	370c      	adds	r7, #12
 80191b0:	46bd      	mov	sp, r7
 80191b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b6:	4770      	bx	lr

080191b8 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	4618      	mov	r0, r3
 80191c4:	370c      	adds	r7, #12
 80191c6:	46bd      	mov	sp, r7
 80191c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191cc:	4770      	bx	lr
	...

080191d0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80191d0:	b480      	push	{r7}
 80191d2:	b083      	sub	sp, #12
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80191d8:	4b03      	ldr	r3, [pc, #12]	@ (80191e8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80191da:	4618      	mov	r0, r3
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr
 80191e6:	bf00      	nop
 80191e8:	01642c85 	.word	0x01642c85

080191ec <_ZN7TMC2209D1Ev>:

public:

	TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2209() = default;
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b082      	sub	sp, #8
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	4a0a      	ldr	r2, [pc, #40]	@ (8019220 <_ZN7TMC2209D1Ev+0x34>)
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	601a      	str	r2, [r3, #0]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	334c      	adds	r3, #76	@ 0x4c
 80191fe:	4618      	mov	r0, r3
 8019200:	f7ff f83b 	bl	801827a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	3328      	adds	r3, #40	@ 0x28
 8019208:	4618      	mov	r0, r3
 801920a:	f00f faa8 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	4618      	mov	r0, r3
 8019212:	f7fb ff73 	bl	80150fc <_ZN3TMCD1Ev>
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	4618      	mov	r0, r3
 801921a:	3708      	adds	r7, #8
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	0802b544 	.word	0x0802b544

08019224 <_ZN7TMC2209D0Ev>:
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6878      	ldr	r0, [r7, #4]
 801922e:	f7ff ffdd 	bl	80191ec <_ZN7TMC2209D1Ev>
 8019232:	2150      	movs	r1, #80	@ 0x50
 8019234:	6878      	ldr	r0, [r7, #4]
 8019236:	f00f f986 	bl	8028546 <_ZdlPvj>
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	4618      	mov	r0, r3
 801923e:	3708      	adds	r7, #8
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}

08019244 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8019244:	b580      	push	{r7, lr}
 8019246:	b082      	sub	sp, #8
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
 801924c:	4a05      	ldr	r2, [pc, #20]	@ (8019264 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	601a      	str	r2, [r3, #0]
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	4618      	mov	r0, r3
 8019256:	f7f3 f961 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4618      	mov	r0, r3
 801925e:	3708      	adds	r7, #8
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	0802b528 	.word	0x0802b528

08019268 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8019268:	b580      	push	{r7, lr}
 801926a:	b082      	sub	sp, #8
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f7ff ffe7 	bl	8019244 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8019276:	215c      	movs	r1, #92	@ 0x5c
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f00f f964 	bl	8028546 <_ZdlPvj>
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	4618      	mov	r0, r3
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8019288:	b590      	push	{r4, r7, lr}
 801928a:	b083      	sub	sp, #12
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	330c      	adds	r3, #12
 8019294:	4618      	mov	r0, r3
 8019296:	f000 f856 	bl	8019346 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801929a:	4604      	mov	r4, r0
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7ff fc8e 	bl	8018bbe <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80192a2:	4603      	mov	r3, r0
 80192a4:	4619      	mov	r1, r3
 80192a6:	4620      	mov	r0, r4
 80192a8:	f000 f859 	bl	801935e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 80192ac:	bf00      	nop
 80192ae:	370c      	adds	r7, #12
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd90      	pop	{r4, r7, pc}

080192b4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b086      	sub	sp, #24
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	330c      	adds	r3, #12
 80192c0:	4618      	mov	r0, r3
 80192c2:	f000 f840 	bl	8019346 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80192c6:	4602      	mov	r2, r0
 80192c8:	f107 0314 	add.w	r3, r7, #20
 80192cc:	4611      	mov	r1, r2
 80192ce:	4618      	mov	r0, r3
 80192d0:	f7ff fbc7 	bl	8018a62 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80192d4:	f107 0114 	add.w	r1, r7, #20
 80192d8:	f107 030c 	add.w	r3, r7, #12
 80192dc:	687a      	ldr	r2, [r7, #4]
 80192de:	4618      	mov	r0, r3
 80192e0:	f7ff fde5 	bl	8018eae <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff ffad 	bl	8019244 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80192ea:	f107 030c 	add.w	r3, r7, #12
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7ff fbe3 	bl	8018aba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80192f4:	f107 0314 	add.w	r3, r7, #20
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7ff fbbf 	bl	8018a7c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80192fe:	3718      	adds	r7, #24
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}

08019304 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f7ff fc55 	bl	8018bbe <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8019314:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8019316:	f7f1 fae3 	bl	800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801931a:	4602      	mov	r2, r0
	    ||
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	4293      	cmp	r3, r2
 8019320:	d005      	beq.n	801932e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8019322:	6838      	ldr	r0, [r7, #0]
 8019324:	f00f f94c 	bl	80285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8019328:	4603      	mov	r3, r0
	    ||
 801932a:	2b00      	cmp	r3, #0
 801932c:	d001      	beq.n	8019332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801932e:	2301      	movs	r3, #1
 8019330:	e000      	b.n	8019334 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8019332:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8019334:	2b00      	cmp	r3, #0
 8019336:	d001      	beq.n	801933c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	e000      	b.n	801933e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801933c:	2300      	movs	r3, #0
      }
 801933e:	4618      	mov	r0, r3
 8019340:	3710      	adds	r7, #16
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}

08019346 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8019346:	b580      	push	{r7, lr}
 8019348:	b082      	sub	sp, #8
 801934a:	af00      	add	r7, sp, #0
 801934c:	6078      	str	r0, [r7, #4]
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	f7f5 fbb7 	bl	800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8019354:	4603      	mov	r3, r0
 8019356:	4618      	mov	r0, r3
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801935e:	b580      	push	{r7, lr}
 8019360:	b082      	sub	sp, #8
 8019362:	af00      	add	r7, sp, #0
 8019364:	6078      	str	r0, [r7, #4]
 8019366:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8019368:	6838      	ldr	r0, [r7, #0]
 801936a:	f000 f804 	bl	8019376 <_ZSt8_DestroyI7TMC2209EvPT_>
 801936e:	bf00      	nop
 8019370:	3708      	adds	r7, #8
 8019372:	46bd      	mov	sp, r7
 8019374:	bd80      	pop	{r7, pc}

08019376 <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 8019376:	b580      	push	{r7, lr}
 8019378:	b082      	sub	sp, #8
 801937a:	af00      	add	r7, sp, #0
 801937c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	6878      	ldr	r0, [r7, #4]
 8019386:	4798      	blx	r3
    }
 8019388:	bf00      	nop
 801938a:	3708      	adds	r7, #8
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}

08019390 <_ZN14TMC5160Stepper11rms_currentEt>:
		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	460b      	mov	r3, r1
 801939a:	807b      	strh	r3, [r7, #2]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	887a      	ldrh	r2, [r7, #2]
 80193a0:	4611      	mov	r1, r2
 80193a2:	4618      	mov	r0, r3
 80193a4:	f7ea fab6 	bl	8003914 <_ZN14TMC2160Stepper11rms_currentEt>
 80193a8:	bf00      	nop
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}

080193b0 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	3304      	adds	r3, #4
 80193bc:	4618      	mov	r0, r3
 80193be:	f7f2 fc7a 	bl	800bcb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	4618      	mov	r0, r3
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}

080193cc <_ZNSt10shared_ptrI7TMC5160ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b082      	sub	sp, #8
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7ff ffea 	bl	80193b0 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	4618      	mov	r0, r3
 80193e0:	3708      	adds	r7, #8
 80193e2:	46bd      	mov	sp, r7
 80193e4:	bd80      	pop	{r7, pc}
	...

080193e8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC5160::create(const JsonObject& config, Remora* instance) {
 80193e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193ea:	b0ef      	sub	sp, #444	@ 0x1bc
 80193ec:	af08      	add	r7, sp, #32
 80193ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80193f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80193f6:	6018      	str	r0, [r3, #0]
 80193f8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80193fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019400:	6019      	str	r1, [r3, #0]
 8019402:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019406:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801940a:	601a      	str	r2, [r3, #0]
    printf("Creating TMC5160 module\n");
 801940c:	48b1      	ldr	r0, [pc, #708]	@ (80196d4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2ec>)
 801940e:	f00f ffc5 	bl	802939c <puts>

    const char* comment = config["Comment"];
 8019412:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019416:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801941a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801941e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019422:	4aad      	ldr	r2, [pc, #692]	@ (80196d8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f0>)
 8019424:	6819      	ldr	r1, [r3, #0]
 8019426:	f7f8 fee6 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801942a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801942e:	4618      	mov	r0, r3
 8019430:	f7ee fa4e 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8019434:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    printf("Comment: %s\n", comment);
 8019438:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 801943c:	48a7      	ldr	r0, [pc, #668]	@ (80196dc <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f4>)
 801943e:	f00f ff3d 	bl	80292bc <iprintf>

    std::string pinCS = config["CS pin"];
 8019442:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8019446:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801944a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801944e:	4aa4      	ldr	r2, [pc, #656]	@ (80196e0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f8>)
 8019450:	6819      	ldr	r1, [r3, #0]
 8019452:	f7ee fa18 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019456:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801945a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801945e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8019462:	4611      	mov	r1, r2
 8019464:	4618      	mov	r0, r3
 8019466:	f7fc f927 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMOSI = config["MOSI pin"];
 801946a:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 801946e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019472:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019476:	4a9b      	ldr	r2, [pc, #620]	@ (80196e4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2fc>)
 8019478:	6819      	ldr	r1, [r3, #0]
 801947a:	f7f7 feca 	bl	8011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801947e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019482:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8019486:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801948a:	4611      	mov	r1, r2
 801948c:	4618      	mov	r0, r3
 801948e:	f7fc f913 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMISO = config["MISO pin"];
 8019492:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8019496:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801949a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801949e:	4a92      	ldr	r2, [pc, #584]	@ (80196e8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x300>)
 80194a0:	6819      	ldr	r1, [r3, #0]
 80194a2:	f7f7 feb6 	bl	8011212 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80194a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194aa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80194ae:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80194b2:	4611      	mov	r1, r2
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7fc f8ff 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinSCK = config["SCK pin"];
 80194ba:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 80194be:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80194c6:	4a89      	ldr	r2, [pc, #548]	@ (80196ec <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x304>)
 80194c8:	6819      	ldr	r1, [r3, #0]
 80194ca:	f7f8 fe94 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80194ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194d2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80194d6:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80194da:	4611      	mov	r1, r2
 80194dc:	4618      	mov	r0, r3
 80194de:	f7fc f8eb 	bl	80156b8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 80194e2:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 80194e6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80194ee:	4a80      	ldr	r2, [pc, #512]	@ (80196f0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x308>)
 80194f0:	6819      	ldr	r1, [r3, #0]
 80194f2:	f7ee f9c8 	bl	8007886 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80194f6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7fc f8ea 	bl	80156d4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8019500:	eef0 7a40 	vmov.f32	s15, s0
 8019504:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019508:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 801950c:	edc3 7a00 	vstr	s15, [r3]
    uint8_t address = config["Address"];
 8019510:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8019514:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019518:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801951c:	4a75      	ldr	r2, [pc, #468]	@ (80196f4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x30c>)
 801951e:	6819      	ldr	r1, [r3, #0]
 8019520:	f7f8 fe69 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019524:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8019528:	4618      	mov	r0, r3
 801952a:	f7fe fdd9 	bl	80180e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 801952e:	4603      	mov	r3, r0
 8019530:	461a      	mov	r2, r3
 8019532:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019536:	f2a3 1379 	subw	r3, r3, #377	@ 0x179
 801953a:	701a      	strb	r2, [r3, #0]
    uint16_t current = config["Current"];
 801953c:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8019540:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019544:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019548:	4a6b      	ldr	r2, [pc, #428]	@ (80196f8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x310>)
 801954a:	6819      	ldr	r1, [r3, #0]
 801954c:	f7f8 fe53 	bl	80121f6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019550:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8019554:	4618      	mov	r0, r3
 8019556:	f7fc f8cb 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801955a:	4603      	mov	r3, r0
 801955c:	461a      	mov	r2, r3
 801955e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019562:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8019566:	801a      	strh	r2, [r3, #0]
    uint16_t microsteps = config["Microsteps"];
 8019568:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 801956c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019570:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019574:	4a61      	ldr	r2, [pc, #388]	@ (80196fc <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x314>)
 8019576:	6819      	ldr	r1, [r3, #0]
 8019578:	f7f5 fe5b 	bl	800f232 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801957c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019580:	4618      	mov	r0, r3
 8019582:	f7fc f8b5 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8019586:	4603      	mov	r3, r0
 8019588:	461a      	mov	r2, r3
 801958a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801958e:	f5a3 73bf 	sub.w	r3, r3, #382	@ 0x17e
 8019592:	801a      	strh	r2, [r3, #0]
    uint16_t stall = config["Stall sensitivity"];
 8019594:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 8019598:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801959c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195a0:	4a57      	ldr	r2, [pc, #348]	@ (8019700 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x318>)
 80195a2:	6819      	ldr	r1, [r3, #0]
 80195a4:	f7fe fda8 	bl	80180f8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80195a8:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80195ac:	4618      	mov	r0, r3
 80195ae:	f7fc f89f 	bl	80156f0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80195b2:	4603      	mov	r3, r0
 80195b4:	461a      	mov	r2, r3
 80195b6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195ba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80195be:	801a      	strh	r2, [r3, #0]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 80195c0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80195c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195cc:	4a4d      	ldr	r2, [pc, #308]	@ (8019704 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x31c>)
 80195ce:	6819      	ldr	r1, [r3, #0]
 80195d0:	f7fa fce6 	bl	8013fa0 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80195d4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80195d8:	4618      	mov	r0, r3
 80195da:	f7ee f979 	bl	80078d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80195de:	4603      	mov	r3, r0
 80195e0:	4949      	ldr	r1, [pc, #292]	@ (8019708 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x320>)
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7e6 fe7c 	bl	80002e0 <strcmp>
 80195e8:	4603      	mov	r3, r0
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	bf0c      	ite	eq
 80195ee:	2301      	moveq	r3, #1
 80195f0:	2300      	movne	r3, #0
 80195f2:	b2da      	uxtb	r2, r3
 80195f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195f8:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80195fc:	701a      	strb	r2, [r3, #0]

    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 80195fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8019602:	4618      	mov	r0, r3
 8019604:	f7f7 feb5 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019608:	4604      	mov	r4, r0
 801960a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801960e:	4618      	mov	r0, r3
 8019610:	f7f7 feaf 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019614:	4605      	mov	r5, r0
 8019616:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801961a:	4618      	mov	r0, r3
 801961c:	f7f7 fea9 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019620:	4606      	mov	r6, r0
 8019622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019626:	4618      	mov	r0, r3
 8019628:	f7f7 fea3 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801962c:	4602      	mov	r2, r0
 801962e:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8019632:	1d3b      	adds	r3, r7, #4
 8019634:	9307      	str	r3, [sp, #28]
 8019636:	f107 0318 	add.w	r3, r7, #24
 801963a:	9306      	str	r3, [sp, #24]
 801963c:	f107 0317 	add.w	r3, r7, #23
 8019640:	9305      	str	r3, [sp, #20]
 8019642:	f107 031a 	add.w	r3, r7, #26
 8019646:	9304      	str	r3, [sp, #16]
 8019648:	f107 031c 	add.w	r3, r7, #28
 801964c:	9303      	str	r3, [sp, #12]
 801964e:	f107 031f 	add.w	r3, r7, #31
 8019652:	9302      	str	r3, [sp, #8]
 8019654:	f107 0320 	add.w	r3, r7, #32
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	9200      	str	r2, [sp, #0]
 801965c:	4633      	mov	r3, r6
 801965e:	462a      	mov	r2, r5
 8019660:	4621      	mov	r1, r4
 8019662:	f000 f999 	bl	8019998 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8019666:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 801966a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801966e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019672:	4611      	mov	r1, r2
 8019674:	6818      	ldr	r0, [r3, #0]
 8019676:	f000 f9df 	bl	8019a38 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>
 801967a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 801967e:	4618      	mov	r0, r3
 8019680:	f7ff fea4 	bl	80193cc <_ZNSt10shared_ptrI7TMC5160ED1Ev>
}
 8019684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019688:	4618      	mov	r0, r3
 801968a:	f00f f868 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801968e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019692:	4618      	mov	r0, r3
 8019694:	f00f f863 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801969c:	4618      	mov	r0, r3
 801969e:	f00f f85e 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80196a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80196a6:	4618      	mov	r0, r3
 80196a8:	f00f f859 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 80196ac:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80196b4:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80196b8:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 80196bc:	6812      	ldr	r2, [r2, #0]
 80196be:	601a      	str	r2, [r3, #0]
}
 80196c0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80196c8:	6818      	ldr	r0, [r3, #0]
 80196ca:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196d2:	bf00      	nop
 80196d4:	0802ade0 	.word	0x0802ade0
 80196d8:	0802adf8 	.word	0x0802adf8
 80196dc:	0802ae00 	.word	0x0802ae00
 80196e0:	0802ae10 	.word	0x0802ae10
 80196e4:	0802ae18 	.word	0x0802ae18
 80196e8:	0802ae24 	.word	0x0802ae24
 80196ec:	0802ae30 	.word	0x0802ae30
 80196f0:	0802ae38 	.word	0x0802ae38
 80196f4:	0802ae40 	.word	0x0802ae40
 80196f8:	0802ae48 	.word	0x0802ae48
 80196fc:	0802ae50 	.word	0x0802ae50
 8019700:	0802ae5c 	.word	0x0802ae5c
 8019704:	0802ae70 	.word	0x0802ae70
 8019708:	0802ae80 	.word	0x0802ae80

0801970c <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>:

TMC5160::TMC5160(std::string _pinCS, std::string _pinMOSI, std::string _pinMISO, std::string _pinSCK, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 801970c:	b5b0      	push	{r4, r5, r7, lr}
 801970e:	b088      	sub	sp, #32
 8019710:	af02      	add	r7, sp, #8
 8019712:	6178      	str	r0, [r7, #20]
 8019714:	6139      	str	r1, [r7, #16]
 8019716:	60fa      	str	r2, [r7, #12]
 8019718:	60bb      	str	r3, [r7, #8]
 801971a:	ed87 0a01 	vstr	s0, [r7, #4]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 801971e:	697b      	ldr	r3, [r7, #20]
 8019720:	edd7 7a01 	vldr	s15, [r7, #4]
 8019724:	eeb0 0a67 	vmov.f32	s0, s15
 8019728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801972a:	4618      	mov	r0, r3
 801972c:	f7fb fbe2 	bl	8014ef4 <_ZN3TMCC1EP6Remoraf>
 8019730:	4a2f      	ldr	r2, [pc, #188]	@ (80197f0 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora+0xe4>)
 8019732:	697b      	ldr	r3, [r7, #20]
 8019734:	601a      	str	r2, [r3, #0]
      pinCS(std::move(_pinCS)),
 8019736:	697b      	ldr	r3, [r7, #20]
 8019738:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 801973c:	6938      	ldr	r0, [r7, #16]
 801973e:	f7f7 fe18 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019742:	4603      	mov	r3, r0
 8019744:	4619      	mov	r1, r3
 8019746:	4620      	mov	r0, r4
 8019748:	f00e ffea 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMOSI(std::move(_pinMOSI)),
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8019752:	68f8      	ldr	r0, [r7, #12]
 8019754:	f7f7 fe0d 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019758:	4603      	mov	r3, r0
 801975a:	4619      	mov	r1, r3
 801975c:	4620      	mov	r0, r4
 801975e:	f00e ffdf 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMISO(std::move(_pinMISO)),
 8019762:	697b      	ldr	r3, [r7, #20]
 8019764:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8019768:	68b8      	ldr	r0, [r7, #8]
 801976a:	f7f7 fe02 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801976e:	4603      	mov	r3, r0
 8019770:	4619      	mov	r1, r3
 8019772:	4620      	mov	r0, r4
 8019774:	f00e ffd4 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinSCK(std::move(_pinSCK)),
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 801977e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019780:	f7f7 fdf7 	bl	8011372 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019784:	4603      	mov	r3, r0
 8019786:	4619      	mov	r1, r3
 8019788:	4620      	mov	r0, r4
 801978a:	f00e ffc9 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 801978e:	697b      	ldr	r3, [r7, #20]
 8019790:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019794:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      mA(_mA),
 8019798:	697b      	ldr	r3, [r7, #20]
 801979a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801979c:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      microsteps(_microsteps),
 80197a0:	697b      	ldr	r3, [r7, #20]
 80197a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80197a4:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      stealth(_stealth),
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80197ae:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
      stall(_stall),
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80197b6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 80197ba:	697b      	ldr	r3, [r7, #20]
 80197bc:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	3358      	adds	r3, #88	@ 0x58
 80197ca:	697a      	ldr	r2, [r7, #20]
 80197cc:	3270      	adds	r2, #112	@ 0x70
 80197ce:	6979      	ldr	r1, [r7, #20]
 80197d0:	f101 0094 	add.w	r0, r1, #148	@ 0x94
 80197d4:	1d39      	adds	r1, r7, #4
 80197d6:	9201      	str	r2, [sp, #4]
 80197d8:	9300      	str	r3, [sp, #0]
 80197da:	462b      	mov	r3, r5
 80197dc:	460a      	mov	r2, r1
 80197de:	4621      	mov	r1, r4
 80197e0:	f000 f93d 	bl	8019a5e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80197e4:	697b      	ldr	r3, [r7, #20]
 80197e6:	4618      	mov	r0, r3
 80197e8:	3718      	adds	r7, #24
 80197ea:	46bd      	mov	sp, r7
 80197ec:	bdb0      	pop	{r4, r5, r7, pc}
 80197ee:	bf00      	nop
 80197f0:	0802b5c0 	.word	0x0802b5c0

080197f4 <_ZN7TMC51609configureEv>:


void TMC5160::configure()
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b084      	sub	sp, #16
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
    driver->begin();
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	3394      	adds	r3, #148	@ 0x94
 8019800:	4618      	mov	r0, r3
 8019802:	f000 f98a 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019806:	4603      	mov	r3, r0
 8019808:	4618      	mov	r0, r3
 801980a:	f7ea fdc1 	bl	8004390 <_ZN14TMC5130Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 801980e:	4855      	ldr	r0, [pc, #340]	@ (8019964 <_ZN7TMC51609configureEv+0x170>)
 8019810:	f00f fd54 	bl	80292bc <iprintf>
    uint16_t result = driver->test_connection();
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	3394      	adds	r3, #148	@ 0x94
 8019818:	4618      	mov	r0, r3
 801981a:	f000 f97e 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801981e:	4603      	mov	r3, r0
 8019820:	4618      	mov	r0, r3
 8019822:	f7ea ff59 	bl	80046d8 <_ZN10TMCStepper15test_connectionEv>
 8019826:	4603      	mov	r3, r0
 8019828:	81fb      	strh	r3, [r7, #14]
    
    if (result) {
 801982a:	89fb      	ldrh	r3, [r7, #14]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d018      	beq.n	8019862 <_ZN7TMC51609configureEv+0x6e>
        printf("Failed!\nLikely cause: ");
 8019830:	484d      	ldr	r0, [pc, #308]	@ (8019968 <_ZN7TMC51609configureEv+0x174>)
 8019832:	f00f fd43 	bl	80292bc <iprintf>
        switch(result) {
 8019836:	89fb      	ldrh	r3, [r7, #14]
 8019838:	2b01      	cmp	r3, #1
 801983a:	d002      	beq.n	8019842 <_ZN7TMC51609configureEv+0x4e>
 801983c:	2b02      	cmp	r3, #2
 801983e:	d004      	beq.n	801984a <_ZN7TMC51609configureEv+0x56>
 8019840:	e007      	b.n	8019852 <_ZN7TMC51609configureEv+0x5e>
            case 1: printf("Loose connection\n"); break;
 8019842:	484a      	ldr	r0, [pc, #296]	@ (801996c <_ZN7TMC51609configureEv+0x178>)
 8019844:	f00f fdaa 	bl	802939c <puts>
 8019848:	e007      	b.n	801985a <_ZN7TMC51609configureEv+0x66>
            case 2: printf("No power\n"); break;
 801984a:	4849      	ldr	r0, [pc, #292]	@ (8019970 <_ZN7TMC51609configureEv+0x17c>)
 801984c:	f00f fda6 	bl	802939c <puts>
 8019850:	e003      	b.n	801985a <_ZN7TMC51609configureEv+0x66>
            default: printf("Unknown issue\n"); break;
 8019852:	4848      	ldr	r0, [pc, #288]	@ (8019974 <_ZN7TMC51609configureEv+0x180>)
 8019854:	f00f fda2 	bl	802939c <puts>
 8019858:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 801985a:	4847      	ldr	r0, [pc, #284]	@ (8019978 <_ZN7TMC51609configureEv+0x184>)
 801985c:	f00f fd9e 	bl	802939c <puts>
 8019860:	e002      	b.n	8019868 <_ZN7TMC51609configureEv+0x74>
    } else {
        printf("OK\n");
 8019862:	4846      	ldr	r0, [pc, #280]	@ (801997c <_ZN7TMC51609configureEv+0x188>)
 8019864:	f00f fd9a 	bl	802939c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	3394      	adds	r3, #148	@ 0x94
 801986c:	4618      	mov	r0, r3
 801986e:	f000 f954 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019872:	4603      	mov	r3, r0
 8019874:	2104      	movs	r1, #4
 8019876:	4618      	mov	r0, r3
 8019878:	f7e9 f816 	bl	80028a8 <_ZN14TMC2130Stepper4toffEh>
    driver->blank_time(24);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	3394      	adds	r3, #148	@ 0x94
 8019880:	4618      	mov	r0, r3
 8019882:	f000 f94a 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019886:	4603      	mov	r3, r0
 8019888:	2118      	movs	r1, #24
 801988a:	4618      	mov	r0, r3
 801988c:	f7ea fff0 	bl	8004870 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	3394      	adds	r3, #148	@ 0x94
 8019894:	4618      	mov	r0, r3
 8019896:	f000 f940 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801989a:	4602      	mov	r2, r0
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80198a2:	4619      	mov	r1, r3
 80198a4:	4610      	mov	r0, r2
 80198a6:	f7ff fd73 	bl	8019390 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->microsteps(microsteps);
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	3394      	adds	r3, #148	@ 0x94
 80198ae:	4618      	mov	r0, r3
 80198b0:	f000 f933 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198b4:	4603      	mov	r3, r0
 80198b6:	461a      	mov	r2, r3
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80198be:	4619      	mov	r1, r3
 80198c0:	4610      	mov	r0, r2
 80198c2:	f7ea ff25 	bl	8004710 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	3394      	adds	r3, #148	@ 0x94
 80198ca:	4618      	mov	r0, r3
 80198cc:	f000 f925 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198d0:	4603      	mov	r3, r0
 80198d2:	492b      	ldr	r1, [pc, #172]	@ (8019980 <_ZN7TMC51609configureEv+0x18c>)
 80198d4:	4618      	mov	r0, r3
 80198d6:	f7e9 ff00 	bl	80036da <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	3394      	adds	r3, #148	@ 0x94
 80198de:	4618      	mov	r0, r3
 80198e0:	f000 f91b 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198e4:	4603      	mov	r3, r0
 80198e6:	2105      	movs	r1, #5
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7e9 fa9d 	bl	8002e28 <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	3394      	adds	r3, #148	@ 0x94
 80198f2:	4618      	mov	r0, r3
 80198f4:	f000 f911 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198f8:	4603      	mov	r3, r0
 80198fa:	2102      	movs	r1, #2
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7e9 fab8 	bl	8002e72 <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	3394      	adds	r3, #148	@ 0x94
 8019906:	4618      	mov	r0, r3
 8019908:	f000 f907 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801990c:	4603      	mov	r3, r0
 801990e:	2101      	movs	r1, #1
 8019910:	4618      	mov	r0, r3
 8019912:	f7e9 fad3 	bl	8002ebc <_ZN14TMC2130Stepper4sednEh>
    //driver->en_spreadCycle(!stealth);
    driver->pwm_autoscale(true);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	3394      	adds	r3, #148	@ 0x94
 801991a:	4618      	mov	r0, r3
 801991c:	f000 f8fd 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019920:	4603      	mov	r3, r0
 8019922:	2101      	movs	r1, #1
 8019924:	4618      	mov	r0, r3
 8019926:	f7e9 fc82 	bl	800322e <_ZN14TMC2160Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8019930:	2b00      	cmp	r3, #0
        // StallGuard sensitivity threshold (higher = more sensitive)
        //driver->SGTHRS(stall);
    }

    driver->iholddelay(10);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	3394      	adds	r3, #148	@ 0x94
 8019936:	4618      	mov	r0, r3
 8019938:	f000 f8ef 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801993c:	4603      	mov	r3, r0
 801993e:	210a      	movs	r1, #10
 8019940:	4618      	mov	r0, r3
 8019942:	f7e9 fc41 	bl	80031c8 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	3394      	adds	r3, #148	@ 0x94
 801994a:	4618      	mov	r0, r3
 801994c:	f000 f8e5 	bl	8019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019950:	4603      	mov	r3, r0
 8019952:	2180      	movs	r1, #128	@ 0x80
 8019954:	4618      	mov	r0, r3
 8019956:	f7ea ffc3 	bl	80048e0 <_ZN10TMCStepper10TPOWERDOWNEh>
}
 801995a:	bf00      	nop
 801995c:	3710      	adds	r7, #16
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	0802ae84 	.word	0x0802ae84
 8019968:	0802aeac 	.word	0x0802aeac
 801996c:	0802aec4 	.word	0x0802aec4
 8019970:	0802aed8 	.word	0x0802aed8
 8019974:	0802aee4 	.word	0x0802aee4
 8019978:	0802aef4 	.word	0x0802aef4
 801997c:	0802af1c 	.word	0x0802af1c
 8019980:	000fffff 	.word	0x000fffff

08019984 <_ZN7TMC51606updateEv>:

void TMC5160::update(){}
 8019984:	b480      	push	{r7}
 8019986:	b083      	sub	sp, #12
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	bf00      	nop
 801998e:	370c      	adds	r7, #12
 8019990:	46bd      	mov	sp, r7
 8019992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019996:	4770      	bx	lr

08019998 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8019998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801999c:	b096      	sub	sp, #88	@ 0x58
 801999e:	af0a      	add	r7, sp, #40	@ 0x28
 80199a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80199a2:	6239      	str	r1, [r7, #32]
 80199a4:	61fa      	str	r2, [r7, #28]
 80199a6:	61bb      	str	r3, [r7, #24]
			     std::forward<_Args>(__args)...);
 80199a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80199ac:	469a      	mov	sl, r3
 80199ae:	6a38      	ldr	r0, [r7, #32]
 80199b0:	f7fc f826 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80199b4:	4680      	mov	r8, r0
 80199b6:	69f8      	ldr	r0, [r7, #28]
 80199b8:	f7fc f822 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80199bc:	4681      	mov	r9, r0
 80199be:	69b8      	ldr	r0, [r7, #24]
 80199c0:	f7fc f81e 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80199c4:	4604      	mov	r4, r0
 80199c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80199c8:	f7fc f81a 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80199cc:	4605      	mov	r5, r0
 80199ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80199d0:	f7fc f821 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80199d4:	4606      	mov	r6, r0
 80199d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80199d8:	f7fe fcb2 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80199dc:	6178      	str	r0, [r7, #20]
 80199de:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80199e0:	f7fc f824 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80199e4:	6138      	str	r0, [r7, #16]
 80199e6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80199e8:	f7fc f820 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80199ec:	60f8      	str	r0, [r7, #12]
 80199ee:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80199f0:	f7f7 fd0f 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80199f4:	60b8      	str	r0, [r7, #8]
 80199f6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80199f8:	f7fc f818 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80199fc:	6078      	str	r0, [r7, #4]
 80199fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019a00:	f7fc f81f 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019a04:	4603      	mov	r3, r0
 8019a06:	9308      	str	r3, [sp, #32]
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	9307      	str	r3, [sp, #28]
 8019a0c:	68bb      	ldr	r3, [r7, #8]
 8019a0e:	9306      	str	r3, [sp, #24]
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	9305      	str	r3, [sp, #20]
 8019a14:	693b      	ldr	r3, [r7, #16]
 8019a16:	9304      	str	r3, [sp, #16]
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	9303      	str	r3, [sp, #12]
 8019a1c:	9602      	str	r6, [sp, #8]
 8019a1e:	9501      	str	r5, [sp, #4]
 8019a20:	9400      	str	r4, [sp, #0]
 8019a22:	464b      	mov	r3, r9
 8019a24:	4642      	mov	r2, r8
 8019a26:	4651      	mov	r1, sl
 8019a28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a2a:	f000 f882 	bl	8019b32 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8019a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a30:	3730      	adds	r7, #48	@ 0x30
 8019a32:	46bd      	mov	sp, r7
 8019a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019a38 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8019a38:	b590      	push	{r4, r7, lr}
 8019a3a:	b083      	sub	sp, #12
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8019a42:	687c      	ldr	r4, [r7, #4]
 8019a44:	6838      	ldr	r0, [r7, #0]
 8019a46:	f000 f8c4 	bl	8019bd2 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	4619      	mov	r1, r3
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f000 f8ca 	bl	8019be8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	4618      	mov	r0, r3
 8019a58:	370c      	adds	r7, #12
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd90      	pop	{r4, r7, pc}

08019a5e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8019a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a62:	ed2d 8b02 	vpush	{d8}
 8019a66:	b086      	sub	sp, #24
 8019a68:	af02      	add	r7, sp, #8
 8019a6a:	60f8      	str	r0, [r7, #12]
 8019a6c:	60b9      	str	r1, [r7, #8]
 8019a6e:	607a      	str	r2, [r7, #4]
 8019a70:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8019a72:	20b4      	movs	r0, #180	@ 0xb4
 8019a74:	f00e fd78 	bl	8028568 <_Znwj>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	461c      	mov	r4, r3
 8019a7c:	68b8      	ldr	r0, [r7, #8]
 8019a7e:	f7f5 fdd9 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019a82:	4605      	mov	r5, r0
 8019a84:	6878      	ldr	r0, [r7, #4]
 8019a86:	f7fb ffc6 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	ed93 8a00 	vldr	s16, [r3]
 8019a90:	6838      	ldr	r0, [r7, #0]
 8019a92:	f7f5 fdcf 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019a96:	4606      	mov	r6, r0
 8019a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a9a:	f7f5 fdcb 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019a9e:	4680      	mov	r8, r0
 8019aa0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019aa2:	f7f5 fdc7 	bl	800f634 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8019aac:	9201      	str	r2, [sp, #4]
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	4643      	mov	r3, r8
 8019ab2:	4632      	mov	r2, r6
 8019ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8019ab8:	4629      	mov	r1, r5
 8019aba:	4620      	mov	r0, r4
 8019abc:	f7ea fcbc 	bl	8004438 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8019ac0:	4621      	mov	r1, r4
 8019ac2:	68f8      	ldr	r0, [r7, #12]
 8019ac4:	f000 f8be 	bl	8019c44 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8019ac8:	68f8      	ldr	r0, [r7, #12]
 8019aca:	3710      	adds	r7, #16
 8019acc:	46bd      	mov	sp, r7
 8019ace:	ecbd 8b02 	vpop	{d8}
 8019ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ad6 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8019ad6:	b590      	push	{r4, r7, lr}
 8019ad8:	b085      	sub	sp, #20
 8019ada:	af00      	add	r7, sp, #0
 8019adc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f000 f8be 	bl	8019c62 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019ae6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d00c      	beq.n	8019b0a <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8019af0:	6878      	ldr	r0, [r7, #4]
 8019af2:	f000 f8c3 	bl	8019c7c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>
 8019af6:	4604      	mov	r4, r0
 8019af8:	68f8      	ldr	r0, [r7, #12]
 8019afa:	f000 f8cc 	bl	8019c96 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8019afe:	4603      	mov	r3, r0
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	4619      	mov	r1, r3
 8019b04:	4620      	mov	r0, r4
 8019b06:	f000 f91b 	bl	8019d40 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>
	__ptr = pointer();
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	601a      	str	r2, [r3, #0]
      }
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	4618      	mov	r0, r3
 8019b14:	3714      	adds	r7, #20
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd90      	pop	{r4, r7, pc}

08019b1a <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8019b1a:	b580      	push	{r7, lr}
 8019b1c:	b082      	sub	sp, #8
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
	return get();
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f000 f91f 	bl	8019d66 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>
 8019b28:	4603      	mov	r3, r0
      }
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3708      	adds	r7, #8
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}

08019b32 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b36:	b095      	sub	sp, #84	@ 0x54
 8019b38:	af0a      	add	r7, sp, #40	@ 0x28
 8019b3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8019b3c:	6239      	str	r1, [r7, #32]
 8019b3e:	61fa      	str	r2, [r7, #28]
 8019b40:	61bb      	str	r3, [r7, #24]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8019b42:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8019b44:	69f8      	ldr	r0, [r7, #28]
 8019b46:	f7fb ff5b 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b4a:	4680      	mov	r8, r0
 8019b4c:	69b8      	ldr	r0, [r7, #24]
 8019b4e:	f7fb ff57 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b52:	4681      	mov	r9, r0
 8019b54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019b56:	f7fb ff53 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019b5e:	f7fb ff4f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b62:	4606      	mov	r6, r0
 8019b64:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019b66:	f7fb ff56 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b6a:	6178      	str	r0, [r7, #20]
 8019b6c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019b6e:	f7fe fbe7 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b72:	6138      	str	r0, [r7, #16]
 8019b74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019b76:	f7fb ff59 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019b7e:	f7fb ff55 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b82:	60b8      	str	r0, [r7, #8]
 8019b84:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019b86:	f7f7 fc44 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019b8e:	f7fb ff4d 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019b92:	6038      	str	r0, [r7, #0]
 8019b94:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019b96:	f7fb ff54 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	9308      	str	r3, [sp, #32]
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	9307      	str	r3, [sp, #28]
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	9306      	str	r3, [sp, #24]
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	9305      	str	r3, [sp, #20]
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	9304      	str	r3, [sp, #16]
 8019bae:	693b      	ldr	r3, [r7, #16]
 8019bb0:	9303      	str	r3, [sp, #12]
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	9302      	str	r3, [sp, #8]
 8019bb6:	9601      	str	r6, [sp, #4]
 8019bb8:	9500      	str	r5, [sp, #0]
 8019bba:	464b      	mov	r3, r9
 8019bbc:	4642      	mov	r2, r8
 8019bbe:	6a39      	ldr	r1, [r7, #32]
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	f000 f8dd 	bl	8019d80 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8019bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc8:	4618      	mov	r0, r3
 8019bca:	372c      	adds	r7, #44	@ 0x2c
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019bd2 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8019bd2:	b480      	push	{r7}
 8019bd4:	b083      	sub	sp, #12
 8019bd6:	af00      	add	r7, sp, #0
 8019bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	4618      	mov	r0, r3
 8019bde:	370c      	adds	r7, #12
 8019be0:	46bd      	mov	sp, r7
 8019be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be6:	4770      	bx	lr

08019be8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8019bf2:	683b      	ldr	r3, [r7, #0]
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	601a      	str	r2, [r3, #0]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	3304      	adds	r3, #4
 8019bfe:	4618      	mov	r0, r3
 8019c00:	f7f3 fa56 	bl	800d0b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	1d1a      	adds	r2, r3, #4
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	3304      	adds	r3, #4
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	4610      	mov	r0, r2
 8019c10:	f7f3 fe0d 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8019c14:	683b      	ldr	r3, [r7, #0]
 8019c16:	2200      	movs	r2, #0
 8019c18:	601a      	str	r2, [r3, #0]
	}
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	3708      	adds	r7, #8
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bd80      	pop	{r7, pc}

08019c24 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b082      	sub	sp, #8
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	6039      	str	r1, [r7, #0]
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	683a      	ldr	r2, [r7, #0]
 8019c32:	4611      	mov	r1, r2
 8019c34:	4618      	mov	r0, r3
 8019c36:	f000 f901 	bl	8019e3c <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	3708      	adds	r7, #8
 8019c40:	46bd      	mov	sp, r7
 8019c42:	bd80      	pop	{r7, pc}

08019c44 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b082      	sub	sp, #8
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
 8019c4c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6839      	ldr	r1, [r7, #0]
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7ff ffe6 	bl	8019c24 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	3708      	adds	r7, #8
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd80      	pop	{r7, pc}

08019c62 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8019c62:	b580      	push	{r7, lr}
 8019c64:	b082      	sub	sp, #8
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	6078      	str	r0, [r7, #4]
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f000 f8f9 	bl	8019e64 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019c72:	4603      	mov	r3, r0
 8019c74:	4618      	mov	r0, r3
 8019c76:	3708      	adds	r7, #8
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	4618      	mov	r0, r3
 8019c88:	f000 f8f9 	bl	8019e7e <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3708      	adds	r7, #8
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}

08019c96 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8019c96:	b480      	push	{r7}
 8019c98:	b083      	sub	sp, #12
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	370c      	adds	r7, #12
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <_ZN14TMC2130StepperD1Ev>:
class TMC2130Stepper : public TMCStepper {
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b082      	sub	sp, #8
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	4a06      	ldr	r2, [pc, #24]	@ (8019cd0 <_ZN14TMC2130StepperD1Ev+0x24>)
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	601a      	str	r2, [r3, #0]
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	3334      	adds	r3, #52	@ 0x34
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	f7f5 fd07 	bl	800f6d2 <_ZN3PinD1Ev>
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3708      	adds	r7, #8
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}
 8019cce:	bf00      	nop
 8019cd0:	0802b0cc 	.word	0x0802b0cc

08019cd4 <_ZN14TMC2160StepperD1Ev>:
class TMC2160Stepper : public TMC2130Stepper {
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b082      	sub	sp, #8
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	4a05      	ldr	r2, [pc, #20]	@ (8019cf4 <_ZN14TMC2160StepperD1Ev+0x20>)
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	601a      	str	r2, [r3, #0]
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7ff ffe1 	bl	8019cac <_ZN14TMC2130StepperD1Ev>
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	4618      	mov	r0, r3
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}
 8019cf4:	0802b144 	.word	0x0802b144

08019cf8 <_ZN14TMC5130StepperD1Ev>:
class TMC5130Stepper : public TMC2160Stepper {
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	4a05      	ldr	r2, [pc, #20]	@ (8019d18 <_ZN14TMC5130StepperD1Ev+0x20>)
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	601a      	str	r2, [r3, #0]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7ff ffe3 	bl	8019cd4 <_ZN14TMC2160StepperD1Ev>
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	4618      	mov	r0, r3
 8019d12:	3708      	adds	r7, #8
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	0802b180 	.word	0x0802b180

08019d1c <_ZN14TMC5160StepperD1Ev>:
class TMC5160Stepper : public TMC5130Stepper {
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	4a05      	ldr	r2, [pc, #20]	@ (8019d3c <_ZN14TMC5160StepperD1Ev+0x20>)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	601a      	str	r2, [r3, #0]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f7ff ffe3 	bl	8019cf8 <_ZN14TMC5130StepperD1Ev>
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	4618      	mov	r0, r3
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	0802b1bc 	.word	0x0802b1bc

08019d40 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8019d40:	b590      	push	{r4, r7, lr}
 8019d42:	b083      	sub	sp, #12
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
 8019d48:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8019d4a:	683c      	ldr	r4, [r7, #0]
 8019d4c:	2c00      	cmp	r4, #0
 8019d4e:	d006      	beq.n	8019d5e <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_+0x1e>
 8019d50:	4620      	mov	r0, r4
 8019d52:	f7ff ffe3 	bl	8019d1c <_ZN14TMC5160StepperD1Ev>
 8019d56:	21b4      	movs	r1, #180	@ 0xb4
 8019d58:	4620      	mov	r0, r4
 8019d5a:	f00e fbf4 	bl	8028546 <_ZdlPvj>
      }
 8019d5e:	bf00      	nop
 8019d60:	370c      	adds	r7, #12
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd90      	pop	{r4, r7, pc}

08019d66 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8019d66:	b580      	push	{r7, lr}
 8019d68:	b082      	sub	sp, #8
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4618      	mov	r0, r3
 8019d72:	f000 f891 	bl	8019e98 <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019d76:	4603      	mov	r3, r0
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3708      	adds	r7, #8
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}

08019d80 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d84:	b096      	sub	sp, #88	@ 0x58
 8019d86:	af0a      	add	r7, sp, #40	@ 0x28
 8019d88:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8019d8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8019d8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8019d8e:	623b      	str	r3, [r7, #32]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8019d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d92:	2200      	movs	r2, #0
 8019d94:	601a      	str	r2, [r3, #0]
 8019d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d98:	1d1d      	adds	r5, r3, #4
 8019d9a:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8019d9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019d9e:	f7fb fe2f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019da2:	4680      	mov	r8, r0
 8019da4:	6a38      	ldr	r0, [r7, #32]
 8019da6:	f7fb fe2b 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019daa:	61f8      	str	r0, [r7, #28]
 8019dac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019dae:	f7fb fe27 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019db2:	61b8      	str	r0, [r7, #24]
 8019db4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019db6:	f7fb fe23 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019dba:	6178      	str	r0, [r7, #20]
 8019dbc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019dbe:	f7fb fe2a 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019dc2:	6138      	str	r0, [r7, #16]
 8019dc4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019dc6:	f7fe fabb 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019dca:	60f8      	str	r0, [r7, #12]
 8019dcc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019dce:	f7fb fe2d 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019dd2:	60b8      	str	r0, [r7, #8]
 8019dd4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019dd6:	f7fb fe29 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019dde:	f7f7 fb18 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019de2:	6038      	str	r0, [r7, #0]
 8019de4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019de6:	f7fb fe21 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019dea:	4604      	mov	r4, r0
 8019dec:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019dee:	f7fb fe28 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019df2:	4603      	mov	r3, r0
 8019df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8019df6:	9408      	str	r4, [sp, #32]
 8019df8:	683b      	ldr	r3, [r7, #0]
 8019dfa:	9307      	str	r3, [sp, #28]
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	9306      	str	r3, [sp, #24]
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	9305      	str	r3, [sp, #20]
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	9304      	str	r3, [sp, #16]
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	9303      	str	r3, [sp, #12]
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	9302      	str	r3, [sp, #8]
 8019e10:	69bb      	ldr	r3, [r7, #24]
 8019e12:	9301      	str	r3, [sp, #4]
 8019e14:	69fb      	ldr	r3, [r7, #28]
 8019e16:	9300      	str	r3, [sp, #0]
 8019e18:	4643      	mov	r3, r8
 8019e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e1c:	4631      	mov	r1, r6
 8019e1e:	4628      	mov	r0, r5
 8019e20:	f000 f848 	bl	8019eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8019e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	4619      	mov	r1, r3
 8019e2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019e2c:	f000 f8c8 	bl	8019fc0 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8019e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e32:	4618      	mov	r0, r3
 8019e34:	3730      	adds	r7, #48	@ 0x30
 8019e36:	46bd      	mov	sp, r7
 8019e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e3c <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8019e3c:	b590      	push	{r4, r7, lr}
 8019e3e:	b083      	sub	sp, #12
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
 8019e44:	6039      	str	r1, [r7, #0]
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f000 f8da 	bl	801a002 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8019e4e:	683c      	ldr	r4, [r7, #0]
 8019e50:	6878      	ldr	r0, [r7, #4]
 8019e52:	f7ff ff06 	bl	8019c62 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019e56:	4603      	mov	r3, r0
 8019e58:	601c      	str	r4, [r3, #0]
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	370c      	adds	r7, #12
 8019e60:	46bd      	mov	sp, r7
 8019e62:	bd90      	pop	{r4, r7, pc}

08019e64 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b082      	sub	sp, #8
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f000 f8d4 	bl	801a01c <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8019e74:	4603      	mov	r3, r0
 8019e76:	4618      	mov	r0, r3
 8019e78:	3708      	adds	r7, #8
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}

08019e7e <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8019e7e:	b580      	push	{r7, lr}
 8019e80:	b082      	sub	sp, #8
 8019e82:	af00      	add	r7, sp, #0
 8019e84:	6078      	str	r0, [r7, #4]
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f000 f8d3 	bl	801a034 <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	4618      	mov	r0, r3
 8019e92:	3708      	adds	r7, #8
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd80      	pop	{r7, pc}

08019e98 <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b082      	sub	sp, #8
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f000 f8d2 	bl	801a04c <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	4618      	mov	r0, r3
 8019eae:	3708      	adds	r7, #8
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}

08019eb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8019eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eb8:	b09a      	sub	sp, #104	@ 0x68
 8019eba:	af0a      	add	r7, sp, #40	@ 0x28
 8019ebc:	6278      	str	r0, [r7, #36]	@ 0x24
 8019ebe:	6239      	str	r1, [r7, #32]
 8019ec0:	61fa      	str	r2, [r7, #28]
 8019ec2:	61bb      	str	r3, [r7, #24]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8019ec4:	69fa      	ldr	r2, [r7, #28]
 8019ec6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019eca:	4611      	mov	r1, r2
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f000 f8ca 	bl	801a066 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8019ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019ed6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019eda:	4611      	mov	r1, r2
 8019edc:	4618      	mov	r0, r3
 8019ede:	f000 f8db 	bl	801a098 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8019ee2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f000 f8fe 	bl	801a0e8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8019eec:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  auto __pi = ::new (__mem)
 8019eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ef0:	4619      	mov	r1, r3
 8019ef2:	20a4      	movs	r0, #164	@ 0xa4
 8019ef4:	f7f0 fca8 	bl	800a848 <_ZnwjPv>
 8019ef8:	4605      	mov	r5, r0
 8019efa:	69b8      	ldr	r0, [r7, #24]
 8019efc:	f7fb fd80 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f00:	4680      	mov	r8, r0
 8019f02:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019f04:	f7fb fd7c 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f08:	4681      	mov	r9, r0
 8019f0a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019f0c:	f7fb fd78 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f10:	4606      	mov	r6, r0
 8019f12:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019f14:	f7fb fd74 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f18:	6178      	str	r0, [r7, #20]
 8019f1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019f1c:	f7fb fd7b 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f20:	6138      	str	r0, [r7, #16]
 8019f22:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8019f24:	f7fe fa0c 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f28:	60f8      	str	r0, [r7, #12]
 8019f2a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8019f2c:	f7fb fd7e 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f30:	60b8      	str	r0, [r7, #8]
 8019f32:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8019f34:	f7fb fd7a 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f38:	6078      	str	r0, [r7, #4]
 8019f3a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8019f3c:	f7f7 fa69 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f40:	6038      	str	r0, [r7, #0]
 8019f42:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8019f46:	f7fb fd71 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019f50:	f7fb fd77 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f54:	4603      	mov	r3, r0
 8019f56:	9308      	str	r3, [sp, #32]
 8019f58:	9407      	str	r4, [sp, #28]
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	9306      	str	r3, [sp, #24]
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	9305      	str	r3, [sp, #20]
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	9304      	str	r3, [sp, #16]
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	9303      	str	r3, [sp, #12]
 8019f6a:	693b      	ldr	r3, [r7, #16]
 8019f6c:	9302      	str	r3, [sp, #8]
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	9301      	str	r3, [sp, #4]
 8019f72:	9600      	str	r6, [sp, #0]
 8019f74:	464b      	mov	r3, r9
 8019f76:	4642      	mov	r2, r8
 8019f78:	4651      	mov	r1, sl
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	f000 f8c2 	bl	801a104 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 8019f80:	63bd      	str	r5, [r7, #56]	@ 0x38
	  __guard = nullptr;
 8019f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019f86:	2100      	movs	r1, #0
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f000 f91f 	bl	801a1cc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8019f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f92:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8019f94:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019f96:	f000 f928 	bl	801a1ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	6a3b      	ldr	r3, [r7, #32]
 8019f9e:	601a      	str	r2, [r3, #0]
	}
 8019fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f000 f88a 	bl	801a0be <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8019faa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f000 f866 	bl	801a080 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8019fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	3740      	adds	r7, #64	@ 0x40
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019fc0 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b084      	sub	sp, #16
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
 8019fc8:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	1d1a      	adds	r2, r3, #4
 8019fce:	683b      	ldr	r3, [r7, #0]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d002      	beq.n	8019fda <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	3318      	adds	r3, #24
 8019fd8:	e000      	b.n	8019fdc <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 8019fda:	2300      	movs	r3, #0
 8019fdc:	4619      	mov	r1, r3
 8019fde:	4610      	mov	r0, r2
 8019fe0:	f7fc fc25 	bl	801682e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8019fe4:	60f8      	str	r0, [r7, #12]
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d006      	beq.n	8019ffa <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	3304      	adds	r3, #4
 8019ff0:	461a      	mov	r2, r3
 8019ff2:	6839      	ldr	r1, [r7, #0]
 8019ff4:	68f8      	ldr	r0, [r7, #12]
 8019ff6:	f000 f906 	bl	801a206 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 8019ffa:	bf00      	nop
 8019ffc:	3710      	adds	r7, #16
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}

0801a002 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801a002:	b580      	push	{r7, lr}
 801a004:	b082      	sub	sp, #8
 801a006:	af00      	add	r7, sp, #0
 801a008:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f000 f90a 	bl	801a226 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	4618      	mov	r0, r3
 801a016:	3708      	adds	r7, #8
 801a018:	46bd      	mov	sp, r7
 801a01a:	bd80      	pop	{r7, pc}

0801a01c <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f000 f90e 	bl	801a246 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801a02a:	4603      	mov	r3, r0
 801a02c:	4618      	mov	r0, r3
 801a02e:	3708      	adds	r7, #8
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}

0801a034 <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f000 f90f 	bl	801a260 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801a042:	4603      	mov	r3, r0
 801a044:	4618      	mov	r0, r3
 801a046:	3708      	adds	r7, #8
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}

0801a04c <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	4618      	mov	r0, r3
 801a058:	f000 f90e 	bl	801a278 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801a05c:	4603      	mov	r3, r0
 801a05e:	4618      	mov	r0, r3
 801a060:	3708      	adds	r7, #8
 801a062:	46bd      	mov	sp, r7
 801a064:	bd80      	pop	{r7, pc}

0801a066 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801a066:	b580      	push	{r7, lr}
 801a068:	b082      	sub	sp, #8
 801a06a:	af00      	add	r7, sp, #0
 801a06c:	6078      	str	r0, [r7, #4]
 801a06e:	6039      	str	r1, [r7, #0]
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f000 f90d 	bl	801a290 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	4618      	mov	r0, r3
 801a07a:	3708      	adds	r7, #8
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}

0801a080 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801a080:	b580      	push	{r7, lr}
 801a082:	b082      	sub	sp, #8
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	f000 f90c 	bl	801a2a6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	4618      	mov	r0, r3
 801a092:	3708      	adds	r7, #8
 801a094:	46bd      	mov	sp, r7
 801a096:	bd80      	pop	{r7, pc}

0801a098 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
 801a0a0:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801a0a2:	2101      	movs	r1, #1
 801a0a4:	6838      	ldr	r0, [r7, #0]
 801a0a6:	f000 f909 	bl	801a2bc <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	461a      	mov	r2, r3
 801a0ae:	6839      	ldr	r1, [r7, #0]
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	f000 f912 	bl	801a2da <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801a0b6:	6878      	ldr	r0, [r7, #4]
 801a0b8:	3708      	adds	r7, #8
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}

0801a0be <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b082      	sub	sp, #8
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	685b      	ldr	r3, [r3, #4]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d007      	beq.n	801a0de <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6818      	ldr	r0, [r3, #0]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	685b      	ldr	r3, [r3, #4]
 801a0d6:	2201      	movs	r2, #1
 801a0d8:	4619      	mov	r1, r3
 801a0da:	f000 f912 	bl	801a302 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	3708      	adds	r7, #8
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}

0801a0e8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	685b      	ldr	r3, [r3, #4]
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f000 f913 	bl	801a320 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	3708      	adds	r7, #8
 801a100:	46bd      	mov	sp, r7
 801a102:	bd80      	pop	{r7, pc}

0801a104 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a108:	b094      	sub	sp, #80	@ 0x50
 801a10a:	af0a      	add	r7, sp, #40	@ 0x28
 801a10c:	6278      	str	r0, [r7, #36]	@ 0x24
 801a10e:	f887 1020 	strb.w	r1, [r7, #32]
 801a112:	61fa      	str	r2, [r7, #28]
 801a114:	61bb      	str	r3, [r7, #24]
	: _M_impl(__a)
 801a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a118:	4618      	mov	r0, r3
 801a11a:	f7f4 f83d 	bl	800e198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801a11e:	4a2a      	ldr	r2, [pc, #168]	@ (801a1c8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0xc4>)
 801a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a122:	601a      	str	r2, [r3, #0]
 801a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a126:	330c      	adds	r3, #12
 801a128:	4621      	mov	r1, r4
 801a12a:	4618      	mov	r0, r3
 801a12c:	f000 f903 	bl	801a336 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801a130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a132:	f000 f85a 	bl	801a1ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a136:	4680      	mov	r8, r0
 801a138:	69f8      	ldr	r0, [r7, #28]
 801a13a:	f7fb fc61 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a13e:	4681      	mov	r9, r0
 801a140:	69b8      	ldr	r0, [r7, #24]
 801a142:	f7fb fc5d 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a146:	4682      	mov	sl, r0
 801a148:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a14a:	f7fb fc59 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a14e:	4604      	mov	r4, r0
 801a150:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a152:	f7fb fc55 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a156:	4605      	mov	r5, r0
 801a158:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a15a:	f7fb fc5c 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a15e:	4606      	mov	r6, r0
 801a160:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a162:	f7fe f8ed 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a166:	6178      	str	r0, [r7, #20]
 801a168:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a16a:	f7fb fc5f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a16e:	6138      	str	r0, [r7, #16]
 801a170:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a172:	f7fb fc5b 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a176:	60f8      	str	r0, [r7, #12]
 801a178:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a17a:	f7f7 f94a 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a17e:	60b8      	str	r0, [r7, #8]
 801a180:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a182:	f7fb fc53 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a186:	6078      	str	r0, [r7, #4]
 801a188:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a18a:	f7fb fc5a 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a18e:	4603      	mov	r3, r0
 801a190:	f107 0020 	add.w	r0, r7, #32
 801a194:	9308      	str	r3, [sp, #32]
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	9307      	str	r3, [sp, #28]
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	9306      	str	r3, [sp, #24]
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	9305      	str	r3, [sp, #20]
 801a1a2:	693b      	ldr	r3, [r7, #16]
 801a1a4:	9304      	str	r3, [sp, #16]
 801a1a6:	697b      	ldr	r3, [r7, #20]
 801a1a8:	9303      	str	r3, [sp, #12]
 801a1aa:	9602      	str	r6, [sp, #8]
 801a1ac:	9501      	str	r5, [sp, #4]
 801a1ae:	9400      	str	r4, [sp, #0]
 801a1b0:	4653      	mov	r3, sl
 801a1b2:	464a      	mov	r2, r9
 801a1b4:	4641      	mov	r1, r8
 801a1b6:	f000 f8cd 	bl	801a354 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 801a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1bc:	4618      	mov	r0, r3
 801a1be:	3728      	adds	r7, #40	@ 0x28
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1c6:	bf00      	nop
 801a1c8:	0802b5a4 	.word	0x0802b5a4

0801a1cc <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801a1cc:	b480      	push	{r7}
 801a1ce:	b083      	sub	sp, #12
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	605a      	str	r2, [r3, #4]
	return *this;
 801a1dc:	687b      	ldr	r3, [r7, #4]
      }
 801a1de:	4618      	mov	r0, r3
 801a1e0:	370c      	adds	r7, #12
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e8:	4770      	bx	lr

0801a1ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801a1ea:	b580      	push	{r7, lr}
 801a1ec:	b082      	sub	sp, #8
 801a1ee:	af00      	add	r7, sp, #0
 801a1f0:	6078      	str	r0, [r7, #4]
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	330c      	adds	r3, #12
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f000 f8f7 	bl	801a3ea <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	4618      	mov	r0, r3
 801a200:	3708      	adds	r7, #8
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}

0801a206 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 801a206:	b580      	push	{r7, lr}
 801a208:	b084      	sub	sp, #16
 801a20a:	af00      	add	r7, sp, #0
 801a20c:	60f8      	str	r0, [r7, #12]
 801a20e:	60b9      	str	r1, [r7, #8]
 801a210:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	687a      	ldr	r2, [r7, #4]
 801a216:	68b9      	ldr	r1, [r7, #8]
 801a218:	4618      	mov	r0, r3
 801a21a:	f7fc fe91 	bl	8016f40 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 801a21e:	bf00      	nop
 801a220:	3710      	adds	r7, #16
 801a222:	46bd      	mov	sp, r7
 801a224:	bd80      	pop	{r7, pc}

0801a226 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801a226:	b580      	push	{r7, lr}
 801a228:	b082      	sub	sp, #8
 801a22a:	af00      	add	r7, sp, #0
 801a22c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801a22e:	6878      	ldr	r0, [r7, #4]
 801a230:	f000 f8e7 	bl	801a402 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	4618      	mov	r0, r3
 801a238:	f000 f8ef 	bl	801a41a <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	4618      	mov	r0, r3
 801a240:	3708      	adds	r7, #8
 801a242:	46bd      	mov	sp, r7
 801a244:	bd80      	pop	{r7, pc}

0801a246 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a246:	b580      	push	{r7, lr}
 801a248:	b082      	sub	sp, #8
 801a24a:	af00      	add	r7, sp, #0
 801a24c:	6078      	str	r0, [r7, #4]
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	4618      	mov	r0, r3
 801a252:	f000 f8f0 	bl	801a436 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>
 801a256:	4603      	mov	r3, r0
 801a258:	4618      	mov	r0, r3
 801a25a:	3708      	adds	r7, #8
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bd80      	pop	{r7, pc}

0801a260 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a260:	b580      	push	{r7, lr}
 801a262:	b082      	sub	sp, #8
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a268:	6878      	ldr	r0, [r7, #4]
 801a26a:	f000 f8ef 	bl	801a44c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>
 801a26e:	4603      	mov	r3, r0
 801a270:	4618      	mov	r0, r3
 801a272:	3708      	adds	r7, #8
 801a274:	46bd      	mov	sp, r7
 801a276:	bd80      	pop	{r7, pc}

0801a278 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a278:	b580      	push	{r7, lr}
 801a27a:	b082      	sub	sp, #8
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f000 f8ef 	bl	801a464 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 801a286:	4603      	mov	r3, r0
 801a288:	4618      	mov	r0, r3
 801a28a:	3708      	adds	r7, #8
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}

0801a290 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a290:	b480      	push	{r7}
 801a292:	b083      	sub	sp, #12
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	4618      	mov	r0, r3
 801a29c:	370c      	adds	r7, #12
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a4:	4770      	bx	lr

0801a2a6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a2a6:	b480      	push	{r7}
 801a2a8:	b083      	sub	sp, #12
 801a2aa:	af00      	add	r7, sp, #0
 801a2ac:	6078      	str	r0, [r7, #4]
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	370c      	adds	r7, #12
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ba:	4770      	bx	lr

0801a2bc <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b082      	sub	sp, #8
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
 801a2c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801a2c6:	2200      	movs	r2, #0
 801a2c8:	6839      	ldr	r1, [r7, #0]
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f000 f8d8 	bl	801a480 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	3708      	adds	r7, #8
 801a2d6:	46bd      	mov	sp, r7
 801a2d8:	bd80      	pop	{r7, pc}

0801a2da <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801a2da:	b580      	push	{r7, lr}
 801a2dc:	b084      	sub	sp, #16
 801a2de:	af00      	add	r7, sp, #0
 801a2e0:	60f8      	str	r0, [r7, #12]
 801a2e2:	60b9      	str	r1, [r7, #8]
 801a2e4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801a2e6:	68b8      	ldr	r0, [r7, #8]
 801a2e8:	f000 f8f8 	bl	801a4dc <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 801a2ec:	4602      	mov	r2, r0
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	601a      	str	r2, [r3, #0]
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	687a      	ldr	r2, [r7, #4]
 801a2f6:	605a      	str	r2, [r3, #4]
      { }
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}

0801a302 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a302:	b580      	push	{r7, lr}
 801a304:	b084      	sub	sp, #16
 801a306:	af00      	add	r7, sp, #0
 801a308:	60f8      	str	r0, [r7, #12]
 801a30a:	60b9      	str	r1, [r7, #8]
 801a30c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801a30e:	687a      	ldr	r2, [r7, #4]
 801a310:	68b9      	ldr	r1, [r7, #8]
 801a312:	68f8      	ldr	r0, [r7, #12]
 801a314:	f000 f8ed 	bl	801a4f2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801a318:	bf00      	nop
 801a31a:	3710      	adds	r7, #16
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}

0801a320 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 801a320:	b480      	push	{r7}
 801a322:	b083      	sub	sp, #12
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
      return __ptr;
 801a328:	687b      	ldr	r3, [r7, #4]
    }
 801a32a:	4618      	mov	r0, r3
 801a32c:	370c      	adds	r7, #12
 801a32e:	46bd      	mov	sp, r7
 801a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a334:	4770      	bx	lr

0801a336 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801a336:	b580      	push	{r7, lr}
 801a338:	b082      	sub	sp, #8
 801a33a:	af00      	add	r7, sp, #0
 801a33c:	6078      	str	r0, [r7, #4]
 801a33e:	7039      	strb	r1, [r7, #0]
 801a340:	463b      	mov	r3, r7
 801a342:	4619      	mov	r1, r3
 801a344:	6878      	ldr	r0, [r7, #4]
 801a346:	f7f4 f941 	bl	800e5cc <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	4618      	mov	r0, r3
 801a34e:	3708      	adds	r7, #8
 801a350:	46bd      	mov	sp, r7
 801a352:	bd80      	pop	{r7, pc}

0801a354 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a358:	b090      	sub	sp, #64	@ 0x40
 801a35a:	af08      	add	r7, sp, #32
 801a35c:	61f8      	str	r0, [r7, #28]
 801a35e:	61b9      	str	r1, [r7, #24]
 801a360:	617a      	str	r2, [r7, #20]
 801a362:	613b      	str	r3, [r7, #16]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801a364:	6978      	ldr	r0, [r7, #20]
 801a366:	f7fb fb4b 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a36a:	4680      	mov	r8, r0
 801a36c:	6938      	ldr	r0, [r7, #16]
 801a36e:	f7fb fb47 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a372:	4681      	mov	r9, r0
 801a374:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801a376:	f7fb fb43 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a37a:	4682      	mov	sl, r0
 801a37c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a37e:	f7fb fb3f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a382:	4604      	mov	r4, r0
 801a384:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a386:	f7fb fb46 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a38a:	4605      	mov	r5, r0
 801a38c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a38e:	f7fd ffd7 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a392:	4606      	mov	r6, r0
 801a394:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a396:	f7fb fb49 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a39a:	60f8      	str	r0, [r7, #12]
 801a39c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a39e:	f7fb fb45 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3a2:	60b8      	str	r0, [r7, #8]
 801a3a4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a3a6:	f7f7 f834 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a3ae:	f7fb fb3d 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3b2:	6038      	str	r0, [r7, #0]
 801a3b4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a3b6:	f7fb fb44 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	9307      	str	r3, [sp, #28]
 801a3be:	683b      	ldr	r3, [r7, #0]
 801a3c0:	9306      	str	r3, [sp, #24]
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	9305      	str	r3, [sp, #20]
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	9304      	str	r3, [sp, #16]
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	9303      	str	r3, [sp, #12]
 801a3ce:	9602      	str	r6, [sp, #8]
 801a3d0:	9501      	str	r5, [sp, #4]
 801a3d2:	9400      	str	r4, [sp, #0]
 801a3d4:	4653      	mov	r3, sl
 801a3d6:	464a      	mov	r2, r9
 801a3d8:	4641      	mov	r1, r8
 801a3da:	69b8      	ldr	r0, [r7, #24]
 801a3dc:	f000 f89a 	bl	801a514 <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 801a3e0:	bf00      	nop
 801a3e2:	3720      	adds	r7, #32
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a3ea <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>:
      _M_ptr() noexcept
 801a3ea:	b580      	push	{r7, lr}
 801a3ec:	b082      	sub	sp, #8
 801a3ee:	af00      	add	r7, sp, #0
 801a3f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a3f2:	6878      	ldr	r0, [r7, #4]
 801a3f4:	f000 f926 	bl	801a644 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>
 801a3f8:	4603      	mov	r3, r0
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	3708      	adds	r7, #8
 801a3fe:	46bd      	mov	sp, r7
 801a400:	bd80      	pop	{r7, pc}

0801a402 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>:
      _Tuple_impl()
 801a402:	b580      	push	{r7, lr}
 801a404:	b082      	sub	sp, #8
 801a406:	af00      	add	r7, sp, #0
 801a408:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f000 f925 	bl	801a65a <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	4618      	mov	r0, r3
 801a414:	3708      	adds	r7, #8
 801a416:	46bd      	mov	sp, r7
 801a418:	bd80      	pop	{r7, pc}

0801a41a <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>:
      constexpr _Head_base()
 801a41a:	b480      	push	{r7}
 801a41c:	b083      	sub	sp, #12
 801a41e:	af00      	add	r7, sp, #0
 801a420:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	2200      	movs	r2, #0
 801a426:	601a      	str	r2, [r3, #0]
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	4618      	mov	r0, r3
 801a42c:	370c      	adds	r7, #12
 801a42e:	46bd      	mov	sp, r7
 801a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a434:	4770      	bx	lr

0801a436 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a436:	b480      	push	{r7}
 801a438:	b083      	sub	sp, #12
 801a43a:	af00      	add	r7, sp, #0
 801a43c:	6078      	str	r0, [r7, #4]
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	4618      	mov	r0, r3
 801a442:	370c      	adds	r7, #12
 801a444:	46bd      	mov	sp, r7
 801a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44a:	4770      	bx	lr

0801a44c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b082      	sub	sp, #8
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	6878      	ldr	r0, [r7, #4]
 801a456:	f000 f90b 	bl	801a670 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>
 801a45a:	4603      	mov	r3, r0
 801a45c:	4618      	mov	r0, r3
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	4618      	mov	r0, r3
 801a470:	f000 f909 	bl	801a686 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>
 801a474:	4603      	mov	r3, r0
 801a476:	4618      	mov	r0, r3
 801a478:	3708      	adds	r7, #8
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
	...

0801a480 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a480:	b580      	push	{r7, lr}
 801a482:	b084      	sub	sp, #16
 801a484:	af00      	add	r7, sp, #0
 801a486:	60f8      	str	r0, [r7, #12]
 801a488:	60b9      	str	r1, [r7, #8]
 801a48a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801a48c:	68f8      	ldr	r0, [r7, #12]
 801a48e:	f000 f905 	bl	801a69c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801a492:	4602      	mov	r2, r0
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	4293      	cmp	r3, r2
 801a498:	bf8c      	ite	hi
 801a49a:	2301      	movhi	r3, #1
 801a49c:	2300      	movls	r3, #0
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	bf14      	ite	ne
 801a4a4:	2301      	movne	r3, #1
 801a4a6:	2300      	moveq	r3, #0
 801a4a8:	b2db      	uxtb	r3, r3
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d007      	beq.n	801a4be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801a4ae:	68bb      	ldr	r3, [r7, #8]
 801a4b0:	4a09      	ldr	r2, [pc, #36]	@ (801a4d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801a4b2:	4293      	cmp	r3, r2
 801a4b4:	d901      	bls.n	801a4ba <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801a4b6:	f00e f86d 	bl	8028594 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801a4ba:	f00e f868 	bl	802858e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a4be:	68bb      	ldr	r3, [r7, #8]
 801a4c0:	22a4      	movs	r2, #164	@ 0xa4
 801a4c2:	fb02 f303 	mul.w	r3, r2, r3
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f00e f84e 	bl	8028568 <_Znwj>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	bf00      	nop
      }
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3710      	adds	r7, #16
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}
 801a4d8:	018f9c18 	.word	0x018f9c18

0801a4dc <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801a4dc:	b480      	push	{r7}
 801a4de:	b083      	sub	sp, #12
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	370c      	adds	r7, #12
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f0:	4770      	bx	lr

0801a4f2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801a4f2:	b580      	push	{r7, lr}
 801a4f4:	b084      	sub	sp, #16
 801a4f6:	af00      	add	r7, sp, #0
 801a4f8:	60f8      	str	r0, [r7, #12]
 801a4fa:	60b9      	str	r1, [r7, #8]
 801a4fc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	22a4      	movs	r2, #164	@ 0xa4
 801a502:	fb02 f303 	mul.w	r3, r2, r3
 801a506:	4619      	mov	r1, r3
 801a508:	68b8      	ldr	r0, [r7, #8]
 801a50a:	f00e f81c 	bl	8028546 <_ZdlPvj>
      }
 801a50e:	3710      	adds	r7, #16
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}

0801a514 <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a518:	ed2d 8b02 	vpush	{d8}
 801a51c:	b0a6      	sub	sp, #152	@ 0x98
 801a51e:	af08      	add	r7, sp, #32
 801a520:	6178      	str	r0, [r7, #20]
 801a522:	6139      	str	r1, [r7, #16]
 801a524:	60fa      	str	r2, [r7, #12]
 801a526:	60bb      	str	r3, [r7, #8]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	4619      	mov	r1, r3
 801a52c:	2098      	movs	r0, #152	@ 0x98
 801a52e:	f7f0 f98b 	bl	800a848 <_ZnwjPv>
 801a532:	4680      	mov	r8, r0
 801a534:	6938      	ldr	r0, [r7, #16]
 801a536:	f7fb fa63 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a53a:	4602      	mov	r2, r0
 801a53c:	f107 0318 	add.w	r3, r7, #24
 801a540:	4611      	mov	r1, r2
 801a542:	4618      	mov	r0, r3
 801a544:	f00e f8ec 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a548:	68f8      	ldr	r0, [r7, #12]
 801a54a:	f7fb fa59 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a54e:	4602      	mov	r2, r0
 801a550:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a554:	4611      	mov	r1, r2
 801a556:	4618      	mov	r0, r3
 801a558:	f00e f8e2 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a55c:	68b8      	ldr	r0, [r7, #8]
 801a55e:	f7fb fa4f 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a562:	4602      	mov	r2, r0
 801a564:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a568:	4611      	mov	r1, r2
 801a56a:	4618      	mov	r0, r3
 801a56c:	f00e f8d8 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a570:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801a574:	f7fb fa44 	bl	8015a00 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a578:	4602      	mov	r2, r0
 801a57a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a57e:	4611      	mov	r1, r2
 801a580:	4618      	mov	r0, r3
 801a582:	f00e f8cd 	bl	8028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a586:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801a58a:	f7fb fa44 	bl	8015a16 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a58e:	4603      	mov	r3, r0
 801a590:	ed93 8a00 	vldr	s16, [r3]
 801a594:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a598:	f7fd fed2 	bl	8018340 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a59c:	4603      	mov	r3, r0
 801a59e:	781c      	ldrb	r4, [r3, #0]
 801a5a0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801a5a4:	f7fb fa42 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	881d      	ldrh	r5, [r3, #0]
 801a5ac:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801a5b0:	f7fb fa3c 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	881e      	ldrh	r6, [r3, #0]
 801a5b8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801a5bc:	f7f6 ff29 	bl	8011412 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	607b      	str	r3, [r7, #4]
 801a5c6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801a5ca:	f7fb fa2f 	bl	8015a2c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	881a      	ldrh	r2, [r3, #0]
 801a5d2:	603a      	str	r2, [r7, #0]
 801a5d4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801a5d8:	f7fb fa33 	bl	8015a42 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 801a5e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801a5e8:	f107 0118 	add.w	r1, r7, #24
 801a5ec:	9306      	str	r3, [sp, #24]
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	9305      	str	r3, [sp, #20]
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	9304      	str	r3, [sp, #16]
 801a5f6:	9603      	str	r6, [sp, #12]
 801a5f8:	9502      	str	r5, [sp, #8]
 801a5fa:	9401      	str	r4, [sp, #4]
 801a5fc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a600:	9300      	str	r3, [sp, #0]
 801a602:	eeb0 0a48 	vmov.f32	s0, s16
 801a606:	4603      	mov	r3, r0
 801a608:	4640      	mov	r0, r8
 801a60a:	f7ff f87f 	bl	801970c <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>
 801a60e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a612:	4618      	mov	r0, r3
 801a614:	f00e f8a3 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a618:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a61c:	4618      	mov	r0, r3
 801a61e:	f00e f89e 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a622:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a626:	4618      	mov	r0, r3
 801a628:	f00e f899 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a62c:	f107 0318 	add.w	r3, r7, #24
 801a630:	4618      	mov	r0, r3
 801a632:	f00e f894 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 801a636:	bf00      	nop
 801a638:	3778      	adds	r7, #120	@ 0x78
 801a63a:	46bd      	mov	sp, r7
 801a63c:	ecbd 8b02 	vpop	{d8}
 801a640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a644 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>:
      _M_addr() noexcept
 801a644:	b480      	push	{r7}
 801a646:	b083      	sub	sp, #12
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801a64c:	687b      	ldr	r3, [r7, #4]
      }
 801a64e:	4618      	mov	r0, r3
 801a650:	370c      	adds	r7, #12
 801a652:	46bd      	mov	sp, r7
 801a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a658:	4770      	bx	lr

0801a65a <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801a65a:	b480      	push	{r7}
 801a65c:	b083      	sub	sp, #12
 801a65e:	af00      	add	r7, sp, #0
 801a660:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	4618      	mov	r0, r3
 801a666:	370c      	adds	r7, #12
 801a668:	46bd      	mov	sp, r7
 801a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66e:	4770      	bx	lr

0801a670 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a670:	b480      	push	{r7}
 801a672:	b083      	sub	sp, #12
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	4618      	mov	r0, r3
 801a67c:	370c      	adds	r7, #12
 801a67e:	46bd      	mov	sp, r7
 801a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a684:	4770      	bx	lr

0801a686 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801a686:	b480      	push	{r7}
 801a688:	b083      	sub	sp, #12
 801a68a:	af00      	add	r7, sp, #0
 801a68c:	6078      	str	r0, [r7, #4]
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	4618      	mov	r0, r3
 801a692:	370c      	adds	r7, #12
 801a694:	46bd      	mov	sp, r7
 801a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69a:	4770      	bx	lr

0801a69c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a69c:	b480      	push	{r7}
 801a69e:	b083      	sub	sp, #12
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a6a4:	4b03      	ldr	r3, [pc, #12]	@ (801a6b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	370c      	adds	r7, #12
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b0:	4770      	bx	lr
 801a6b2:	bf00      	nop
 801a6b4:	00c7ce0c 	.word	0x00c7ce0c

0801a6b8 <_ZN7TMC5160D1Ev>:

public:

	TMC5160(std::string, std::string, std::string, std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC5160() = default;
 801a6b8:	b580      	push	{r7, lr}
 801a6ba:	b082      	sub	sp, #8
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
 801a6c0:	4a12      	ldr	r2, [pc, #72]	@ (801a70c <_ZN7TMC5160D1Ev+0x54>)
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	601a      	str	r2, [r3, #0]
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	3394      	adds	r3, #148	@ 0x94
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f7ff fa03 	bl	8019ad6 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	3370      	adds	r3, #112	@ 0x70
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	f00e f842 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	3358      	adds	r3, #88	@ 0x58
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f00e f83d 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	3340      	adds	r3, #64	@ 0x40
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f00e f838 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	3328      	adds	r3, #40	@ 0x28
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f00e f833 	bl	802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7fa fcfe 	bl	80150fc <_ZN3TMCD1Ev>
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	4618      	mov	r0, r3
 801a704:	3708      	adds	r7, #8
 801a706:	46bd      	mov	sp, r7
 801a708:	bd80      	pop	{r7, pc}
 801a70a:	bf00      	nop
 801a70c:	0802b5c0 	.word	0x0802b5c0

0801a710 <_ZN7TMC5160D0Ev>:
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f7ff ffcd 	bl	801a6b8 <_ZN7TMC5160D1Ev>
 801a71e:	2198      	movs	r1, #152	@ 0x98
 801a720:	6878      	ldr	r0, [r7, #4]
 801a722:	f00d ff10 	bl	8028546 <_ZdlPvj>
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	4618      	mov	r0, r3
 801a72a:	3708      	adds	r7, #8
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}

0801a730 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
 801a738:	4a05      	ldr	r2, [pc, #20]	@ (801a750 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	601a      	str	r2, [r3, #0]
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	4618      	mov	r0, r3
 801a742:	f7f1 feeb 	bl	800c51c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	0802b5a4 	.word	0x0802b5a4

0801a754 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f7ff ffe7 	bl	801a730 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a762:	21a4      	movs	r1, #164	@ 0xa4
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	f00d feee 	bl	8028546 <_ZdlPvj>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	4618      	mov	r0, r3
 801a76e:	3708      	adds	r7, #8
 801a770:	46bd      	mov	sp, r7
 801a772:	bd80      	pop	{r7, pc}

0801a774 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801a774:	b590      	push	{r4, r7, lr}
 801a776:	b083      	sub	sp, #12
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	330c      	adds	r3, #12
 801a780:	4618      	mov	r0, r3
 801a782:	f000 f856 	bl	801a832 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a786:	4604      	mov	r4, r0
 801a788:	6878      	ldr	r0, [r7, #4]
 801a78a:	f7ff fd2e 	bl	801a1ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a78e:	4603      	mov	r3, r0
 801a790:	4619      	mov	r1, r3
 801a792:	4620      	mov	r0, r4
 801a794:	f000 f859 	bl	801a84a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>
      }
 801a798:	bf00      	nop
 801a79a:	370c      	adds	r7, #12
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd90      	pop	{r4, r7, pc}

0801a7a0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b086      	sub	sp, #24
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	330c      	adds	r3, #12
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	f000 f840 	bl	801a832 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a7b2:	4602      	mov	r2, r0
 801a7b4:	f107 0314 	add.w	r3, r7, #20
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7ff fc53 	bl	801a066 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801a7c0:	f107 0114 	add.w	r1, r7, #20
 801a7c4:	f107 030c 	add.w	r3, r7, #12
 801a7c8:	687a      	ldr	r2, [r7, #4]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7ff fd85 	bl	801a2da <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801a7d0:	6878      	ldr	r0, [r7, #4]
 801a7d2:	f7ff ffad 	bl	801a730 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801a7d6:	f107 030c 	add.w	r3, r7, #12
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f7ff fc6f 	bl	801a0be <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a7e0:	f107 0314 	add.w	r3, r7, #20
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7ff fc4b 	bl	801a080 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a7ea:	3718      	adds	r7, #24
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}

0801a7f0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b084      	sub	sp, #16
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
 801a7f8:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801a7fa:	6878      	ldr	r0, [r7, #4]
 801a7fc:	f7ff fcf5 	bl	801a1ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a800:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a802:	f7f0 f86d 	bl	800a8e0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801a806:	4602      	mov	r2, r0
	    ||
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	4293      	cmp	r3, r2
 801a80c:	d005      	beq.n	801a81a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801a80e:	6838      	ldr	r0, [r7, #0]
 801a810:	f00d fed6 	bl	80285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 801a814:	4603      	mov	r3, r0
	    ||
 801a816:	2b00      	cmp	r3, #0
 801a818:	d001      	beq.n	801a81e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801a81a:	2301      	movs	r3, #1
 801a81c:	e000      	b.n	801a820 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801a81e:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a820:	2b00      	cmp	r3, #0
 801a822:	d001      	beq.n	801a828 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	e000      	b.n	801a82a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801a828:	2300      	movs	r3, #0
      }
 801a82a:	4618      	mov	r0, r3
 801a82c:	3710      	adds	r7, #16
 801a82e:	46bd      	mov	sp, r7
 801a830:	bd80      	pop	{r7, pc}

0801a832 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801a832:	b580      	push	{r7, lr}
 801a834:	b082      	sub	sp, #8
 801a836:	af00      	add	r7, sp, #0
 801a838:	6078      	str	r0, [r7, #4]
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7f4 f941 	bl	800eac2 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801a840:	4603      	mov	r3, r0
 801a842:	4618      	mov	r0, r3
 801a844:	3708      	adds	r7, #8
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}

0801a84a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801a84a:	b580      	push	{r7, lr}
 801a84c:	b082      	sub	sp, #8
 801a84e:	af00      	add	r7, sp, #0
 801a850:	6078      	str	r0, [r7, #4]
 801a852:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 801a854:	6838      	ldr	r0, [r7, #0]
 801a856:	f000 f804 	bl	801a862 <_ZSt8_DestroyI7TMC5160EvPT_>
 801a85a:	bf00      	nop
 801a85c:	3708      	adds	r7, #8
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}

0801a862 <_ZSt8_DestroyI7TMC5160EvPT_>:
    _Destroy(_Tp* __pointer)
 801a862:	b580      	push	{r7, lr}
 801a864:	b082      	sub	sp, #8
 801a866:	af00      	add	r7, sp, #0
 801a868:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	4798      	blx	r3
    }
 801a874:	bf00      	nop
 801a876:	3708      	adds	r7, #8
 801a878:	46bd      	mov	sp, r7
 801a87a:	bd80      	pop	{r7, pc}

0801a87c <__NVIC_SetPriority>:
{
 801a87c:	b480      	push	{r7}
 801a87e:	b083      	sub	sp, #12
 801a880:	af00      	add	r7, sp, #0
 801a882:	4603      	mov	r3, r0
 801a884:	6039      	str	r1, [r7, #0]
 801a886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	db0a      	blt.n	801a8a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a890:	683b      	ldr	r3, [r7, #0]
 801a892:	b2da      	uxtb	r2, r3
 801a894:	490c      	ldr	r1, [pc, #48]	@ (801a8c8 <__NVIC_SetPriority+0x4c>)
 801a896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a89a:	0112      	lsls	r2, r2, #4
 801a89c:	b2d2      	uxtb	r2, r2
 801a89e:	440b      	add	r3, r1
 801a8a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a8a4:	e00a      	b.n	801a8bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8a6:	683b      	ldr	r3, [r7, #0]
 801a8a8:	b2da      	uxtb	r2, r3
 801a8aa:	4908      	ldr	r1, [pc, #32]	@ (801a8cc <__NVIC_SetPriority+0x50>)
 801a8ac:	88fb      	ldrh	r3, [r7, #6]
 801a8ae:	f003 030f 	and.w	r3, r3, #15
 801a8b2:	3b04      	subs	r3, #4
 801a8b4:	0112      	lsls	r2, r2, #4
 801a8b6:	b2d2      	uxtb	r2, r2
 801a8b8:	440b      	add	r3, r1
 801a8ba:	761a      	strb	r2, [r3, #24]
}
 801a8bc:	bf00      	nop
 801a8be:	370c      	adds	r7, #12
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c6:	4770      	bx	lr
 801a8c8:	e000e100 	.word	0xe000e100
 801a8cc:	e000ed00 	.word	0xe000ed00

0801a8d0 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 801a8d0:	b480      	push	{r7}
 801a8d2:	b083      	sub	sp, #12
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	6039      	str	r1, [r7, #0]
 801a8da:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	b25a      	sxtb	r2, r3
 801a8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8e4:	4013      	ands	r3, r2
 801a8e6:	b25b      	sxtb	r3, r3
 801a8e8:	b2db      	uxtb	r3, r3
  }
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	370c      	adds	r7, #12
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f4:	4770      	bx	lr

0801a8f6 <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801a8f6:	b580      	push	{r7, lr}
 801a8f8:	b082      	sub	sp, #8
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	6078      	str	r0, [r7, #4]
 801a8fe:	460b      	mov	r3, r1
 801a900:	70fb      	strb	r3, [r7, #3]
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	78fa      	ldrb	r2, [r7, #3]
 801a906:	4611      	mov	r1, r2
 801a908:	4618      	mov	r0, r3
 801a90a:	f000 fa7c 	bl	801ae06 <_ZNSt13__atomic_baseIbEC1Eb>
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	4618      	mov	r0, r3
 801a912:	3708      	adds	r7, #8
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}

0801a918 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 801a918:	b580      	push	{r7, lr}
 801a91a:	b084      	sub	sp, #16
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
 801a920:	460b      	mov	r3, r1
 801a922:	70fb      	strb	r3, [r7, #3]
 801a924:	4613      	mov	r3, r2
 801a926:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	60fb      	str	r3, [r7, #12]
 801a92c:	78fb      	ldrb	r3, [r7, #3]
 801a92e:	72fb      	strb	r3, [r7, #11]
 801a930:	78bb      	ldrb	r3, [r7, #2]
 801a932:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801a934:	7abb      	ldrb	r3, [r7, #10]
 801a936:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a93a:	4618      	mov	r0, r3
 801a93c:	f7ff ffc8 	bl	801a8d0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801a940:	4603      	mov	r3, r0
 801a942:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 801a944:	f7ea fae6 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 801a948:	4603      	mov	r3, r0
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d004      	beq.n	801a958 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801a94e:	7a7b      	ldrb	r3, [r7, #9]
 801a950:	2b02      	cmp	r3, #2
 801a952:	d101      	bne.n	801a958 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801a954:	2301      	movs	r3, #1
 801a956:	e000      	b.n	801a95a <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 801a958:	2300      	movs	r3, #0
 801a95a:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801a95c:	f7ea fada 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 801a960:	4603      	mov	r3, r0
 801a962:	2b00      	cmp	r3, #0
 801a964:	d004      	beq.n	801a970 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801a966:	7a7b      	ldrb	r3, [r7, #9]
 801a968:	2b04      	cmp	r3, #4
 801a96a:	d101      	bne.n	801a970 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801a96c:	2301      	movs	r3, #1
 801a96e:	e000      	b.n	801a972 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 801a970:	2300      	movs	r3, #0
 801a972:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 801a974:	f7ea face 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d004      	beq.n	801a988 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801a97e:	7a7b      	ldrb	r3, [r7, #9]
 801a980:	2b01      	cmp	r3, #1
 801a982:	d101      	bne.n	801a988 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801a984:	2301      	movs	r3, #1
 801a986:	e000      	b.n	801a98a <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 801a988:	2300      	movs	r3, #0
 801a98a:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	7afa      	ldrb	r2, [r7, #11]
 801a990:	f3bf 8f5b 	dmb	ish
 801a994:	701a      	strb	r2, [r3, #0]
 801a996:	f3bf 8f5b 	dmb	ish
      }
 801a99a:	bf00      	nop
 801a99c:	bf00      	nop
 801a99e:	3710      	adds	r7, #16
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}

0801a9a4 <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b084      	sub	sp, #16
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	460b      	mov	r3, r1
 801a9ae:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	60fb      	str	r3, [r7, #12]
 801a9b4:	78fb      	ldrb	r3, [r7, #3]
 801a9b6:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801a9b8:	7afb      	ldrb	r3, [r7, #11]
 801a9ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7ff ff86 	bl	801a8d0 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 801a9c8:	f7ea faa4 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d004      	beq.n	801a9dc <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801a9d2:	7abb      	ldrb	r3, [r7, #10]
 801a9d4:	2b03      	cmp	r3, #3
 801a9d6:	d101      	bne.n	801a9dc <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801a9d8:	2301      	movs	r3, #1
 801a9da:	e000      	b.n	801a9de <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 801a9dc:	2300      	movs	r3, #0
 801a9de:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801a9e0:	f7ea fa98 	bl	8004f14 <_ZSt23__is_constant_evaluatedv>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d004      	beq.n	801a9f4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801a9ea:	7abb      	ldrb	r3, [r7, #10]
 801a9ec:	2b04      	cmp	r3, #4
 801a9ee:	d101      	bne.n	801a9f4 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	e000      	b.n	801a9f6 <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	f3bf 8f5b 	dmb	ish
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	f3bf 8f5b 	dmb	ish
 801aa04:	b2db      	uxtb	r3, r3
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	bf14      	ite	ne
 801aa0a:	2301      	movne	r3, #1
 801aa0c:	2300      	moveq	r3, #0
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	4618      	mov	r0, r3
 801aa12:	3710      	adds	r7, #16
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}

0801aa18 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
 801aa20:	460b      	mov	r3, r1
 801aa22:	70fb      	strb	r3, [r7, #3]
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	3329      	adds	r3, #41	@ 0x29
 801aa28:	78f9      	ldrb	r1, [r7, #3]
 801aa2a:	2203      	movs	r2, #3
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f7ff ff73 	bl	801a918 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801aa32:	bf00      	nop
 801aa34:	3708      	adds	r7, #8
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}

0801aa3a <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 801aa3a:	b580      	push	{r7, lr}
 801aa3c:	b082      	sub	sp, #8
 801aa3e:	af00      	add	r7, sp, #0
 801aa40:	6078      	str	r0, [r7, #4]
 801aa42:	460b      	mov	r3, r1
 801aa44:	70fb      	strb	r3, [r7, #3]
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	332a      	adds	r3, #42	@ 0x2a
 801aa4a:	78f9      	ldrb	r1, [r7, #3]
 801aa4c:	2203      	movs	r2, #3
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7ff ff62 	bl	801a918 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801aa54:	bf00      	nop
 801aa56:	3708      	adds	r7, #8
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}

0801aa5c <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b082      	sub	sp, #8
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	3329      	adds	r3, #41	@ 0x29
 801aa68:	2102      	movs	r1, #2
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f7ff ff9a 	bl	801a9a4 <_ZNKSt6atomicIbE4loadESt12memory_order>
 801aa70:	4603      	mov	r3, r0
 801aa72:	4618      	mov	r0, r3
 801aa74:	3708      	adds	r7, #8
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}

0801aa7a <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 801aa7a:	b580      	push	{r7, lr}
 801aa7c:	b082      	sub	sp, #8
 801aa7e:	af00      	add	r7, sp, #0
 801aa80:	6078      	str	r0, [r7, #4]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	332a      	adds	r3, #42	@ 0x2a
 801aa86:	2102      	movs	r1, #2
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7ff ff8b 	bl	801a9a4 <_ZNKSt6atomicIbE4loadESt12memory_order>
 801aa8e:	4603      	mov	r3, r0
 801aa90:	4618      	mov	r0, r3
 801aa92:	3708      	adds	r7, #8
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd80      	pop	{r7, pc}

0801aa98 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b084      	sub	sp, #16
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	60f8      	str	r0, [r7, #12]
 801aaa0:	60b9      	str	r1, [r7, #8]
 801aaa2:	607a      	str	r2, [r7, #4]
 801aaa4:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	68b9      	ldr	r1, [r7, #8]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f00e f867 	bl	8028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	687a      	ldr	r2, [r7, #4]
 801aab4:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	887a      	ldrh	r2, [r7, #2]
 801aaba:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	69ba      	ldr	r2, [r7, #24]
 801aac0:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	2200      	movs	r2, #0
 801aac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	3329      	adds	r3, #41	@ 0x29
 801aace:	2100      	movs	r1, #0
 801aad0:	4618      	mov	r0, r3
 801aad2:	f7ff ff10 	bl	801a8f6 <_ZNSt6atomicIbEC1Eb>
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	332a      	adds	r3, #42	@ 0x2a
 801aada:	2100      	movs	r1, #0
 801aadc:	4618      	mov	r0, r3
 801aade:	f7ff ff0a 	bl	801a8f6 <_ZNSt6atomicIbEC1Eb>
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	332c      	adds	r3, #44	@ 0x2c
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7f0 fa5c 	bl	800afa4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	3338      	adds	r3, #56	@ 0x38
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f7f0 fa57 	bl	800afa4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	f00e f813 	bl	8028b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801aafe:	4601      	mov	r1, r0
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	6a1b      	ldr	r3, [r3, #32]
 801ab04:	461a      	mov	r2, r3
 801ab06:	4808      	ldr	r0, [pc, #32]	@ (801ab28 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 801ab08:	f00e fbd8 	bl	80292bc <iprintf>
    NVIC_SetPriority(irq, _prio);
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ab12:	7f3a      	ldrb	r2, [r7, #28]
 801ab14:	4611      	mov	r1, r2
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7ff feb0 	bl	801a87c <__NVIC_SetPriority>
}
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	3710      	adds	r7, #16
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	0802af40 	.word	0x0802af40

0801ab2c <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b08a      	sub	sp, #40	@ 0x28
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	332c      	adds	r3, #44	@ 0x2c
 801ab38:	627b      	str	r3, [r7, #36]	@ 0x24
 801ab3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab3c:	f7f1 fc03 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ab40:	4603      	mov	r3, r0
 801ab42:	617b      	str	r3, [r7, #20]
 801ab44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab46:	f7f1 fc0e 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	613b      	str	r3, [r7, #16]
 801ab4e:	e018      	b.n	801ab82 <_ZN9pruThread14executeModulesEv+0x56>
 801ab50:	f107 0314 	add.w	r3, r7, #20
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7f1 fc40 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801ab5a:	61b8      	str	r0, [r7, #24]
        if (module) {
 801ab5c:	69bb      	ldr	r3, [r7, #24]
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f7f1 fc47 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ab64:	4603      	mov	r3, r0
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d006      	beq.n	801ab78 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 801ab6a:	69b8      	ldr	r0, [r7, #24]
 801ab6c:	f7f1 fc52 	bl	800c414 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801ab70:	4603      	mov	r3, r0
 801ab72:	4618      	mov	r0, r3
 801ab74:	f7f7 f8fc 	bl	8011d70 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 801ab78:	f107 0314 	add.w	r3, r7, #20
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	f7f1 fc1b 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801ab82:	f107 0210 	add.w	r2, r7, #16
 801ab86:	f107 0314 	add.w	r3, r7, #20
 801ab8a:	4611      	mov	r1, r2
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	f7f1 fbfb 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d1db      	bne.n	801ab50 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d031      	beq.n	801ac06 <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	3338      	adds	r3, #56	@ 0x38
 801aba6:	623b      	str	r3, [r7, #32]
 801aba8:	6a38      	ldr	r0, [r7, #32]
 801abaa:	f7f1 fbcc 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801abae:	4603      	mov	r3, r0
 801abb0:	60fb      	str	r3, [r7, #12]
 801abb2:	6a38      	ldr	r0, [r7, #32]
 801abb4:	f7f1 fbd7 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801abb8:	4603      	mov	r3, r0
 801abba:	60bb      	str	r3, [r7, #8]
 801abbc:	e018      	b.n	801abf0 <_ZN9pruThread14executeModulesEv+0xc4>
 801abbe:	f107 030c 	add.w	r3, r7, #12
 801abc2:	4618      	mov	r0, r3
 801abc4:	f7f1 fc09 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801abc8:	61f8      	str	r0, [r7, #28]
			if (module) {
 801abca:	69fb      	ldr	r3, [r7, #28]
 801abcc:	4618      	mov	r0, r3
 801abce:	f7f1 fc10 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801abd2:	4603      	mov	r3, r0
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d006      	beq.n	801abe6 <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 801abd8:	69f8      	ldr	r0, [r7, #28]
 801abda:	f7f1 fc1b 	bl	800c414 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801abde:	4603      	mov	r3, r0
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7f7 f8c5 	bl	8011d70 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 801abe6:	f107 030c 	add.w	r3, r7, #12
 801abea:	4618      	mov	r0, r3
 801abec:	f7f1 fbe4 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801abf0:	f107 0208 	add.w	r2, r7, #8
 801abf4:	f107 030c 	add.w	r3, r7, #12
 801abf8:	4611      	mov	r1, r2
 801abfa:	4618      	mov	r0, r3
 801abfc:	f7f1 fbc4 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801ac00:	4603      	mov	r3, r0
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d1db      	bne.n	801abbe <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 801ac06:	2301      	movs	r3, #1
}
 801ac08:	4618      	mov	r0, r3
 801ac0a:	3728      	adds	r7, #40	@ 0x28
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd80      	pop	{r7, pc}

0801ac10 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b082      	sub	sp, #8
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
 801ac18:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f7f1 fbe8 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ac22:	4603      	mov	r3, r0
 801ac24:	f083 0301 	eor.w	r3, r3, #1
 801ac28:	b2db      	uxtb	r3, r3
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d001      	beq.n	801ac32 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	e006      	b.n	801ac40 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	332c      	adds	r3, #44	@ 0x2c
 801ac36:	6839      	ldr	r1, [r7, #0]
 801ac38:	4618      	mov	r0, r3
 801ac3a:	f000 f8f4 	bl	801ae26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ac3e:	2301      	movs	r3, #1
}
 801ac40:	4618      	mov	r0, r3
 801ac42:	3708      	adds	r7, #8
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}

0801ac48 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b082      	sub	sp, #8
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	6078      	str	r0, [r7, #4]
 801ac50:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ac52:	683b      	ldr	r3, [r7, #0]
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7f1 fbcc 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ac5a:	4603      	mov	r3, r0
 801ac5c:	f083 0301 	eor.w	r3, r3, #1
 801ac60:	b2db      	uxtb	r3, r3
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d001      	beq.n	801ac6a <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ac66:	2300      	movs	r3, #0
 801ac68:	e00a      	b.n	801ac80 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2201      	movs	r2, #1
 801ac6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	3338      	adds	r3, #56	@ 0x38
 801ac76:	6839      	ldr	r1, [r7, #0]
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f000 f8d4 	bl	801ae26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ac7e:	2301      	movs	r3, #1
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3708      	adds	r7, #8
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}

0801ac88 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 801ac96:	4619      	mov	r1, r3
 801ac98:	6838      	ldr	r0, [r7, #0]
 801ac9a:	f000 f8ea 	bl	801ae72 <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 801ac9e:	4603      	mov	r3, r0
        });
 801aca0:	4618      	mov	r0, r3
 801aca2:	3708      	adds	r7, #8
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}

0801aca8 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 801aca8:	b590      	push	{r4, r7, lr}
 801acaa:	b087      	sub	sp, #28
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
 801acb0:	6039      	str	r1, [r7, #0]
    if (!module) {
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	4618      	mov	r0, r3
 801acb6:	f7f1 fb9c 	bl	800c3f2 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801acba:	4603      	mov	r3, r0
 801acbc:	f083 0301 	eor.w	r3, r3, #1
 801acc0:	b2db      	uxtb	r3, r3
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d001      	beq.n	801acca <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801acc6:	2300      	movs	r3, #0
 801acc8:	e032      	b.n	801ad30 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	332c      	adds	r3, #44	@ 0x2c
 801acce:	4618      	mov	r0, r3
 801acd0:	f7f1 fb39 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801acd4:	4604      	mov	r4, r0
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	332c      	adds	r3, #44	@ 0x2c
 801acda:	4618      	mov	r0, r3
 801acdc:	f7f1 fb43 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ace0:	4601      	mov	r1, r0
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	461a      	mov	r2, r3
 801ace6:	4620      	mov	r0, r4
 801ace8:	f000 f8db 	bl	801aea2 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 801acec:	4603      	mov	r3, r0
 801acee:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801acf6:	f107 0208 	add.w	r2, r7, #8
 801acfa:	f107 030c 	add.w	r3, r7, #12
 801acfe:	4611      	mov	r1, r2
 801ad00:	4618      	mov	r0, r3
 801ad02:	f000 f8e2 	bl	801aeca <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	332c      	adds	r3, #44	@ 0x2c
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7f1 fb2b 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ad10:	4603      	mov	r3, r0
 801ad12:	617b      	str	r3, [r7, #20]
 801ad14:	f107 0214 	add.w	r2, r7, #20
 801ad18:	f107 0310 	add.w	r3, r7, #16
 801ad1c:	4611      	mov	r1, r2
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f000 f8d3 	bl	801aeca <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ad24:	693a      	ldr	r2, [r7, #16]
 801ad26:	68f9      	ldr	r1, [r7, #12]
 801ad28:	4620      	mov	r0, r4
 801ad2a:	f000 f8df 	bl	801aeec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 801ad2e:	2301      	movs	r3, #1
}
 801ad30:	4618      	mov	r0, r3
 801ad32:	371c      	adds	r7, #28
 801ad34:	46bd      	mov	sp, r7
 801ad36:	bd90      	pop	{r4, r7, pc}

0801ad38 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 801ad38:	b590      	push	{r4, r7, lr}
 801ad3a:	b085      	sub	sp, #20
 801ad3c:	af02      	add	r7, sp, #8
 801ad3e:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 801ad40:	6878      	ldr	r0, [r7, #4]
 801ad42:	f7ff fe8b 	bl	801aa5c <_ZNK9pruThread9isRunningEv>
 801ad46:	4603      	mov	r3, r0
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d001      	beq.n	801ad50 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 801ad4c:	2301      	movs	r3, #1
 801ad4e:	e01c      	b.n	801ad8a <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 801ad50:	2101      	movs	r1, #1
 801ad52:	6878      	ldr	r0, [r7, #4]
 801ad54:	f7ff fe60 	bl	801aa18 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801ad58:	2100      	movs	r1, #0
 801ad5a:	6878      	ldr	r0, [r7, #4]
 801ad5c:	f7ff fe6d 	bl	801aa3a <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 801ad60:	2014      	movs	r0, #20
 801ad62:	f00d fc01 	bl	8028568 <_Znwj>
 801ad66:	4603      	mov	r3, r0
 801ad68:	461c      	mov	r4, r3
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	6999      	ldr	r1, [r3, #24]
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	6a18      	ldr	r0, [r3, #32]
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f000 fd1a 	bl	801b7b8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 801ad88:	2301      	movs	r3, #1
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	370c      	adds	r7, #12
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd90      	pop	{r4, r7, pc}

0801ad92 <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 801ad92:	b580      	push	{r7, lr}
 801ad94:	b082      	sub	sp, #8
 801ad96:	af00      	add	r7, sp, #0
 801ad98:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 801ad9a:	2100      	movs	r1, #0
 801ad9c:	6878      	ldr	r0, [r7, #4]
 801ad9e:	f7ff fe3b 	bl	801aa18 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801ada2:	2100      	movs	r1, #0
 801ada4:	6878      	ldr	r0, [r7, #4]
 801ada6:	f7ff fe48 	bl	801aa3a <_ZN9pruThread15setThreadPausedEb>
}
 801adaa:	bf00      	nop
 801adac:	3708      	adds	r7, #8
 801adae:	46bd      	mov	sp, r7
 801adb0:	bd80      	pop	{r7, pc}

0801adb2 <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 801adb2:	b580      	push	{r7, lr}
 801adb4:	b082      	sub	sp, #8
 801adb6:	af00      	add	r7, sp, #0
 801adb8:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 801adba:	6878      	ldr	r0, [r7, #4]
 801adbc:	f7ff fe4e 	bl	801aa5c <_ZNK9pruThread9isRunningEv>
 801adc0:	4603      	mov	r3, r0
 801adc2:	f083 0301 	eor.w	r3, r3, #1
 801adc6:	b2db      	uxtb	r3, r3
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d105      	bne.n	801add8 <_ZN9pruThread6updateEv+0x26>
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f7ff fe54 	bl	801aa7a <_ZNK9pruThread8isPausedEv>
 801add2:	4603      	mov	r3, r0
 801add4:	2b00      	cmp	r3, #0
 801add6:	d001      	beq.n	801addc <_ZN9pruThread6updateEv+0x2a>
 801add8:	2301      	movs	r3, #1
 801adda:	e000      	b.n	801adde <_ZN9pruThread6updateEv+0x2c>
 801addc:	2300      	movs	r3, #0
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d001      	beq.n	801ade6 <_ZN9pruThread6updateEv+0x34>
        return true;
 801ade2:	2301      	movs	r3, #1
 801ade4:	e00b      	b.n	801adfe <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f7ff fea0 	bl	801ab2c <_ZN9pruThread14executeModulesEv>
 801adec:	4603      	mov	r3, r0
 801adee:	f083 0301 	eor.w	r3, r3, #1
 801adf2:	b2db      	uxtb	r3, r3
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d001      	beq.n	801adfc <_ZN9pruThread6updateEv+0x4a>
        return false;
 801adf8:	2300      	movs	r3, #0
 801adfa:	e000      	b.n	801adfe <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 801adfc:	2301      	movs	r3, #1
}
 801adfe:	4618      	mov	r0, r3
 801ae00:	3708      	adds	r7, #8
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}

0801ae06 <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 801ae06:	b480      	push	{r7}
 801ae08:	b083      	sub	sp, #12
 801ae0a:	af00      	add	r7, sp, #0
 801ae0c:	6078      	str	r0, [r7, #4]
 801ae0e:	460b      	mov	r3, r1
 801ae10:	70fb      	strb	r3, [r7, #3]
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	78fa      	ldrb	r2, [r7, #3]
 801ae16:	701a      	strb	r2, [r3, #0]
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	370c      	adds	r7, #12
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae24:	4770      	bx	lr

0801ae26 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801ae26:	b580      	push	{r7, lr}
 801ae28:	b082      	sub	sp, #8
 801ae2a:	af00      	add	r7, sp, #0
 801ae2c:	6078      	str	r0, [r7, #4]
 801ae2e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	685a      	ldr	r2, [r3, #4]
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	689b      	ldr	r3, [r3, #8]
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	d00d      	beq.n	801ae58 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	685b      	ldr	r3, [r3, #4]
 801ae42:	683a      	ldr	r2, [r7, #0]
 801ae44:	4619      	mov	r1, r3
 801ae46:	f000 f88a 	bl	801af5e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	685b      	ldr	r3, [r3, #4]
 801ae4e:	f103 0208 	add.w	r2, r3, #8
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	605a      	str	r2, [r3, #4]
      }
 801ae56:	e008      	b.n	801ae6a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7f1 fa84 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	683a      	ldr	r2, [r7, #0]
 801ae62:	4619      	mov	r1, r3
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f000 f88d 	bl	801af84 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801ae6a:	bf00      	nop
 801ae6c:	3708      	adds	r7, #8
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}

0801ae72 <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 801ae72:	b590      	push	{r4, r7, lr}
 801ae74:	b083      	sub	sp, #12
 801ae76:	af00      	add	r7, sp, #0
 801ae78:	6078      	str	r0, [r7, #4]
 801ae7a:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7f2 fa77 	bl	800d372 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801ae84:	4604      	mov	r4, r0
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f7f2 fa72 	bl	800d372 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	429c      	cmp	r4, r3
 801ae92:	bf0c      	ite	eq
 801ae94:	2301      	moveq	r3, #1
 801ae96:	2300      	movne	r3, #0
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	370c      	adds	r7, #12
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd90      	pop	{r4, r7, pc}

0801aea2 <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801aea2:	b580      	push	{r7, lr}
 801aea4:	b084      	sub	sp, #16
 801aea6:	af00      	add	r7, sp, #0
 801aea8:	60f8      	str	r0, [r7, #12]
 801aeaa:	60b9      	str	r1, [r7, #8]
 801aeac:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f000 f8e4 	bl	801b07c <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	461a      	mov	r2, r3
 801aeb8:	68b9      	ldr	r1, [r7, #8]
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f000 f8f2 	bl	801b0a4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801aec0:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 801aec2:	4618      	mov	r0, r3
 801aec4:	3710      	adds	r7, #16
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}

0801aeca <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 801aeca:	b580      	push	{r7, lr}
 801aecc:	b082      	sub	sp, #8
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]
 801aed2:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 801aed4:	6838      	ldr	r0, [r7, #0]
 801aed6:	f7f1 ff63 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801aeda:	4603      	mov	r3, r0
 801aedc:	681a      	ldr	r2, [r3, #0]
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	601a      	str	r2, [r3, #0]
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	4618      	mov	r0, r3
 801aee6:	3708      	adds	r7, #8
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}

0801aeec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
      erase(const_iterator __first, const_iterator __last)
 801aeec:	b590      	push	{r4, r7, lr}
 801aeee:	b087      	sub	sp, #28
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	60f8      	str	r0, [r7, #12]
 801aef4:	60b9      	str	r1, [r7, #8]
 801aef6:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 801aef8:	68f8      	ldr	r0, [r7, #12]
 801aefa:	f7f1 fa24 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801aefe:	4603      	mov	r3, r0
 801af00:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 801af02:	68f8      	ldr	r0, [r7, #12]
 801af04:	f000 f929 	bl	801b15a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 801af08:	4603      	mov	r3, r0
 801af0a:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 801af0c:	f107 0210 	add.w	r2, r7, #16
 801af10:	f107 0308 	add.w	r3, r7, #8
 801af14:	4611      	mov	r1, r2
 801af16:	4618      	mov	r0, r3
 801af18:	f000 f92f 	bl	801b17a <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801af1c:	4602      	mov	r2, r0
 801af1e:	f107 0314 	add.w	r3, r7, #20
 801af22:	4611      	mov	r1, r2
 801af24:	4618      	mov	r0, r3
 801af26:	f000 f93d 	bl	801b1a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801af2a:	4604      	mov	r4, r0
 801af2c:	f107 0210 	add.w	r2, r7, #16
 801af30:	1d3b      	adds	r3, r7, #4
 801af32:	4611      	mov	r1, r2
 801af34:	4618      	mov	r0, r3
 801af36:	f000 f920 	bl	801b17a <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801af3a:	4602      	mov	r2, r0
 801af3c:	f107 0314 	add.w	r3, r7, #20
 801af40:	4611      	mov	r1, r2
 801af42:	4618      	mov	r0, r3
 801af44:	f000 f92e 	bl	801b1a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801af48:	4603      	mov	r3, r0
 801af4a:	461a      	mov	r2, r3
 801af4c:	4621      	mov	r1, r4
 801af4e:	68f8      	ldr	r0, [r7, #12]
 801af50:	f000 f940 	bl	801b1d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 801af54:	4603      	mov	r3, r0
      }
 801af56:	4618      	mov	r0, r3
 801af58:	371c      	adds	r7, #28
 801af5a:	46bd      	mov	sp, r7
 801af5c:	bd90      	pop	{r4, r7, pc}

0801af5e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801af5e:	b580      	push	{r7, lr}
 801af60:	b084      	sub	sp, #16
 801af62:	af00      	add	r7, sp, #0
 801af64:	60f8      	str	r0, [r7, #12]
 801af66:	60b9      	str	r1, [r7, #8]
 801af68:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f000 f979 	bl	801b262 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801af70:	4603      	mov	r3, r0
 801af72:	461a      	mov	r2, r3
 801af74:	68b9      	ldr	r1, [r7, #8]
 801af76:	68f8      	ldr	r0, [r7, #12]
 801af78:	f000 f97e 	bl	801b278 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 801af7c:	bf00      	nop
 801af7e:	3710      	adds	r7, #16
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}

0801af84 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801af84:	b5b0      	push	{r4, r5, r7, lr}
 801af86:	b08c      	sub	sp, #48	@ 0x30
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801af90:	4a39      	ldr	r2, [pc, #228]	@ (801b078 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801af92:	2101      	movs	r1, #1
 801af94:	68f8      	ldr	r0, [r7, #12]
 801af96:	f7f2 fd1c 	bl	800d9d2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 801af9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	685b      	ldr	r3, [r3, #4]
 801afa6:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801afa8:	68f8      	ldr	r0, [r7, #12]
 801afaa:	f7f1 f9cc 	bl	800c346 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801afae:	4603      	mov	r3, r0
 801afb0:	617b      	str	r3, [r7, #20]
 801afb2:	f107 0214 	add.w	r2, r7, #20
 801afb6:	f107 0308 	add.w	r3, r7, #8
 801afba:	4611      	mov	r1, r2
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7f2 fd4f 	bl	800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801afc2:	4603      	mov	r3, r0
 801afc4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801afca:	4618      	mov	r0, r3
 801afcc:	f7f2 fd5d 	bl	800da8a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 801afd0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801afd2:	69fb      	ldr	r3, [r7, #28]
 801afd4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801afd6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801afd8:	6a3b      	ldr	r3, [r7, #32]
 801afda:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801afdc:	69fa      	ldr	r2, [r7, #28]
 801afde:	18d5      	adds	r5, r2, r3
 801afe0:	6878      	ldr	r0, [r7, #4]
 801afe2:	f000 f93e 	bl	801b262 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801afe6:	4603      	mov	r3, r0
 801afe8:	461a      	mov	r2, r3
 801afea:	4629      	mov	r1, r5
 801afec:	4620      	mov	r0, r4
 801afee:	f7ff ffb6 	bl	801af5e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 801aff2:	2300      	movs	r3, #0
 801aff4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801aff6:	f107 0308 	add.w	r3, r7, #8
 801affa:	4618      	mov	r0, r3
 801affc:	f7f1 fed0 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b000:	4603      	mov	r3, r0
 801b002:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	4618      	mov	r0, r3
 801b008:	f7f1 fc3c 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b00c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b00e:	69fa      	ldr	r2, [r7, #28]
 801b010:	4621      	mov	r1, r4
 801b012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b014:	f7f2 fd4d 	bl	800dab2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b018:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801b01a:	69bb      	ldr	r3, [r7, #24]
 801b01c:	3308      	adds	r3, #8
 801b01e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b020:	f107 0308 	add.w	r3, r7, #8
 801b024:	4618      	mov	r0, r3
 801b026:	f7f1 febb 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b02a:	4603      	mov	r3, r0
 801b02c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	4618      	mov	r0, r3
 801b032:	f7f1 fc27 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b036:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b038:	69ba      	ldr	r2, [r7, #24]
 801b03a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b03c:	4620      	mov	r0, r4
 801b03e:	f7f2 fd38 	bl	800dab2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b042:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801b044:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801b046:	68fb      	ldr	r3, [r7, #12]
 801b048:	689a      	ldr	r2, [r3, #8]
 801b04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b04c:	1ad3      	subs	r3, r2, r3
 801b04e:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801b050:	461a      	mov	r2, r3
 801b052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b054:	f7f1 fc03 	bl	800c85e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	69fa      	ldr	r2, [r7, #28]
 801b05c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	69ba      	ldr	r2, [r7, #24]
 801b062:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b066:	00db      	lsls	r3, r3, #3
 801b068:	69fa      	ldr	r2, [r7, #28]
 801b06a:	441a      	add	r2, r3
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	609a      	str	r2, [r3, #8]
    }
 801b070:	bf00      	nop
 801b072:	3730      	adds	r7, #48	@ 0x30
 801b074:	46bd      	mov	sp, r7
 801b076:	bdb0      	pop	{r4, r5, r7, pc}
 801b078:	0802af60 	.word	0x0802af60

0801b07c <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b084      	sub	sp, #16
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 801b084:	1d3b      	adds	r3, r7, #4
 801b086:	4618      	mov	r0, r3
 801b088:	f000 f90e 	bl	801b2a8 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b08c:	4602      	mov	r2, r0
 801b08e:	f107 030c 	add.w	r3, r7, #12
 801b092:	6811      	ldr	r1, [r2, #0]
 801b094:	4618      	mov	r0, r3
 801b096:	f000 f912 	bl	801b2be <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	4618      	mov	r0, r3
 801b09e:	3710      	adds	r7, #16
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	bd80      	pop	{r7, pc}

0801b0a4 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801b0a4:	b590      	push	{r4, r7, lr}
 801b0a6:	b087      	sub	sp, #28
 801b0a8:	af00      	add	r7, sp, #0
 801b0aa:	60f8      	str	r0, [r7, #12]
 801b0ac:	60b9      	str	r1, [r7, #8]
 801b0ae:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 801b0b0:	687a      	ldr	r2, [r7, #4]
 801b0b2:	68b9      	ldr	r1, [r7, #8]
 801b0b4:	68f8      	ldr	r0, [r7, #12]
 801b0b6:	f000 f914 	bl	801b2e2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 801b0be:	f107 0208 	add.w	r2, r7, #8
 801b0c2:	f107 030c 	add.w	r3, r7, #12
 801b0c6:	4611      	mov	r1, r2
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f000 f920 	bl	801b30e <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d001      	beq.n	801b0d8 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	e03c      	b.n	801b152 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	617b      	str	r3, [r7, #20]
      ++__first;
 801b0dc:	f107 030c 	add.w	r3, r7, #12
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	f7f1 f969 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b0e6:	e028      	b.n	801b13a <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 801b0e8:	1d3b      	adds	r3, r7, #4
 801b0ea:	68f9      	ldr	r1, [r7, #12]
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f000 f926 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	f083 0301 	eor.w	r3, r3, #1
 801b0f8:	b2db      	uxtb	r3, r3
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d018      	beq.n	801b130 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801b0fe:	f107 030c 	add.w	r3, r7, #12
 801b102:	4618      	mov	r0, r3
 801b104:	f7f1 f969 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b108:	4603      	mov	r3, r0
 801b10a:	4618      	mov	r0, r3
 801b10c:	f7f1 f9ea 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b110:	4604      	mov	r4, r0
 801b112:	f107 0314 	add.w	r3, r7, #20
 801b116:	4618      	mov	r0, r3
 801b118:	f7f1 f95f 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b11c:	4603      	mov	r3, r0
 801b11e:	4621      	mov	r1, r4
 801b120:	4618      	mov	r0, r3
 801b122:	f000 f920 	bl	801b366 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 801b126:	f107 0314 	add.w	r3, r7, #20
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7f1 f944 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b130:	f107 030c 	add.w	r3, r7, #12
 801b134:	4618      	mov	r0, r3
 801b136:	f7f1 f93f 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801b13a:	f107 0208 	add.w	r2, r7, #8
 801b13e:	f107 030c 	add.w	r3, r7, #12
 801b142:	4611      	mov	r1, r2
 801b144:	4618      	mov	r0, r3
 801b146:	f7f1 f91f 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b14a:	4603      	mov	r3, r0
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d1cb      	bne.n	801b0e8 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 801b150:	697b      	ldr	r3, [r7, #20]
    }
 801b152:	4618      	mov	r0, r3
 801b154:	371c      	adds	r7, #28
 801b156:	46bd      	mov	sp, r7
 801b158:	bd90      	pop	{r4, r7, pc}

0801b15a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 801b15a:	b580      	push	{r7, lr}
 801b15c:	b084      	sub	sp, #16
 801b15e:	af00      	add	r7, sp, #0
 801b160:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 801b162:	687a      	ldr	r2, [r7, #4]
 801b164:	f107 030c 	add.w	r3, r7, #12
 801b168:	4611      	mov	r1, r2
 801b16a:	4618      	mov	r0, r3
 801b16c:	f000 f90e 	bl	801b38c <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	4618      	mov	r0, r3
 801b174:	3710      	adds	r7, #16
 801b176:	46bd      	mov	sp, r7
 801b178:	bd80      	pop	{r7, pc}

0801b17a <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b17a:	b590      	push	{r4, r7, lr}
 801b17c:	b083      	sub	sp, #12
 801b17e:	af00      	add	r7, sp, #0
 801b180:	6078      	str	r0, [r7, #4]
 801b182:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801b184:	6878      	ldr	r0, [r7, #4]
 801b186:	f000 f911 	bl	801b3ac <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b18a:	4603      	mov	r3, r0
 801b18c:	681c      	ldr	r4, [r3, #0]
 801b18e:	6838      	ldr	r0, [r7, #0]
 801b190:	f000 f90c 	bl	801b3ac <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b194:	4603      	mov	r3, r0
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	1ae3      	subs	r3, r4, r3
 801b19a:	10db      	asrs	r3, r3, #3
 801b19c:	4618      	mov	r0, r3
 801b19e:	370c      	adds	r7, #12
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd90      	pop	{r4, r7, pc}

0801b1a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b084      	sub	sp, #16
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
 801b1ac:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681a      	ldr	r2, [r3, #0]
 801b1b2:	683b      	ldr	r3, [r7, #0]
 801b1b4:	00db      	lsls	r3, r3, #3
 801b1b6:	4413      	add	r3, r2
 801b1b8:	60fb      	str	r3, [r7, #12]
 801b1ba:	f107 020c 	add.w	r2, r7, #12
 801b1be:	f107 0308 	add.w	r3, r7, #8
 801b1c2:	4611      	mov	r1, r2
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7f1 fddb 	bl	800cd80 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3710      	adds	r7, #16
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}

0801b1d4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 801b1d4:	b590      	push	{r4, r7, lr}
 801b1d6:	b087      	sub	sp, #28
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	60f8      	str	r0, [r7, #12]
 801b1dc:	60b9      	str	r1, [r7, #8]
 801b1de:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 801b1e0:	1d3a      	adds	r2, r7, #4
 801b1e2:	f107 0308 	add.w	r3, r7, #8
 801b1e6:	4611      	mov	r1, r2
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f7f1 f8cd 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d031      	beq.n	801b258 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 801b1f4:	68f8      	ldr	r0, [r7, #12]
 801b1f6:	f7f1 f8b6 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	613b      	str	r3, [r7, #16]
 801b1fe:	f107 0210 	add.w	r2, r7, #16
 801b202:	1d3b      	adds	r3, r7, #4
 801b204:	4611      	mov	r1, r2
 801b206:	4618      	mov	r0, r3
 801b208:	f7f1 f8be 	bl	800c388 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b20c:	4603      	mov	r3, r0
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d008      	beq.n	801b224 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 801b212:	68f8      	ldr	r0, [r7, #12]
 801b214:	f7f1 f8a7 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b218:	4603      	mov	r3, r0
 801b21a:	68ba      	ldr	r2, [r7, #8]
 801b21c:	4619      	mov	r1, r3
 801b21e:	6878      	ldr	r0, [r7, #4]
 801b220:	f000 f8cf 	bl	801b3c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 801b224:	f107 0308 	add.w	r3, r7, #8
 801b228:	4618      	mov	r0, r3
 801b22a:	f7f1 fdb9 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b22e:	4603      	mov	r3, r0
 801b230:	681c      	ldr	r4, [r3, #0]
 801b232:	68f8      	ldr	r0, [r7, #12]
 801b234:	f7f1 f897 	bl	800c366 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b238:	4603      	mov	r3, r0
 801b23a:	617b      	str	r3, [r7, #20]
 801b23c:	1d3a      	adds	r2, r7, #4
 801b23e:	f107 0314 	add.w	r3, r7, #20
 801b242:	4611      	mov	r1, r2
 801b244:	4618      	mov	r0, r3
 801b246:	f7f2 fc0b 	bl	800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b24a:	4603      	mov	r3, r0
 801b24c:	00db      	lsls	r3, r3, #3
 801b24e:	4423      	add	r3, r4
 801b250:	4619      	mov	r1, r3
 801b252:	68f8      	ldr	r0, [r7, #12]
 801b254:	f000 f8cd 	bl	801b3f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 801b258:	68bb      	ldr	r3, [r7, #8]
    }
 801b25a:	4618      	mov	r0, r3
 801b25c:	371c      	adds	r7, #28
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd90      	pop	{r4, r7, pc}

0801b262 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b262:	b480      	push	{r7}
 801b264:	b083      	sub	sp, #12
 801b266:	af00      	add	r7, sp, #0
 801b268:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	4618      	mov	r0, r3
 801b26e:	370c      	adds	r7, #12
 801b270:	46bd      	mov	sp, r7
 801b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b276:	4770      	bx	lr

0801b278 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801b278:	b590      	push	{r4, r7, lr}
 801b27a:	b085      	sub	sp, #20
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	60f8      	str	r0, [r7, #12]
 801b280:	60b9      	str	r1, [r7, #8]
 801b282:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	4619      	mov	r1, r3
 801b288:	2008      	movs	r0, #8
 801b28a:	f7ef fadd 	bl	800a848 <_ZnwjPv>
 801b28e:	4604      	mov	r4, r0
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	f7ff ffe6 	bl	801b262 <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b296:	4603      	mov	r3, r0
 801b298:	4619      	mov	r1, r3
 801b29a:	4620      	mov	r0, r4
 801b29c:	f7f0 f9fa 	bl	800b694 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 801b2a0:	bf00      	nop
 801b2a2:	3714      	adds	r7, #20
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd90      	pop	{r4, r7, pc}

0801b2a8 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801b2a8:	b480      	push	{r7}
 801b2aa:	b083      	sub	sp, #12
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	370c      	adds	r7, #12
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2bc:	4770      	bx	lr

0801b2be <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 801b2be:	b580      	push	{r7, lr}
 801b2c0:	b082      	sub	sp, #8
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	6078      	str	r0, [r7, #4]
 801b2c6:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801b2c8:	463b      	mov	r3, r7
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7ff ffec 	bl	801b2a8 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b2d0:	4602      	mov	r2, r0
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	6812      	ldr	r2, [r2, #0]
 801b2d6:	601a      	str	r2, [r3, #0]
      { }
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	4618      	mov	r0, r3
 801b2dc:	3708      	adds	r7, #8
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bd80      	pop	{r7, pc}

0801b2e2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 801b2e2:	b590      	push	{r4, r7, lr}
 801b2e4:	b085      	sub	sp, #20
 801b2e6:	af00      	add	r7, sp, #0
 801b2e8:	60f8      	str	r0, [r7, #12]
 801b2ea:	60b9      	str	r1, [r7, #8]
 801b2ec:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 801b2ee:	f107 030c 	add.w	r3, r7, #12
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	f000 f89e 	bl	801b434 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 801b2f8:	4623      	mov	r3, r4
 801b2fa:	687a      	ldr	r2, [r7, #4]
 801b2fc:	68b9      	ldr	r1, [r7, #8]
 801b2fe:	68f8      	ldr	r0, [r7, #12]
 801b300:	f000 f8a2 	bl	801b448 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 801b304:	4603      	mov	r3, r0
    }
 801b306:	4618      	mov	r0, r3
 801b308:	3714      	adds	r7, #20
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd90      	pop	{r4, r7, pc}

0801b30e <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b30e:	b590      	push	{r4, r7, lr}
 801b310:	b083      	sub	sp, #12
 801b312:	af00      	add	r7, sp, #0
 801b314:	6078      	str	r0, [r7, #4]
 801b316:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801b318:	6878      	ldr	r0, [r7, #4]
 801b31a:	f7f1 fd41 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b31e:	4603      	mov	r3, r0
 801b320:	681c      	ldr	r4, [r3, #0]
 801b322:	6838      	ldr	r0, [r7, #0]
 801b324:	f7f1 fd3c 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b328:	4603      	mov	r3, r0
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	429c      	cmp	r4, r3
 801b32e:	bf0c      	ite	eq
 801b330:	2301      	moveq	r3, #1
 801b332:	2300      	movne	r3, #0
 801b334:	b2db      	uxtb	r3, r3
 801b336:	4618      	mov	r0, r3
 801b338:	370c      	adds	r7, #12
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd90      	pop	{r4, r7, pc}

0801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 801b33e:	b590      	push	{r4, r7, lr}
 801b340:	b083      	sub	sp, #12
 801b342:	af00      	add	r7, sp, #0
 801b344:	6078      	str	r0, [r7, #4]
 801b346:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 801b348:	687c      	ldr	r4, [r7, #4]
 801b34a:	463b      	mov	r3, r7
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7f1 f844 	bl	800c3da <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b352:	4603      	mov	r3, r0
 801b354:	4619      	mov	r1, r3
 801b356:	4620      	mov	r0, r4
 801b358:	f7ff fc96 	bl	801ac88 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 801b35c:	4603      	mov	r3, r0
 801b35e:	4618      	mov	r0, r3
 801b360:	370c      	adds	r7, #12
 801b362:	46bd      	mov	sp, r7
 801b364:	bd90      	pop	{r4, r7, pc}

0801b366 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 801b366:	b590      	push	{r4, r7, lr}
 801b368:	b083      	sub	sp, #12
 801b36a:	af00      	add	r7, sp, #0
 801b36c:	6078      	str	r0, [r7, #4]
 801b36e:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 801b370:	687c      	ldr	r4, [r7, #4]
 801b372:	6838      	ldr	r0, [r7, #0]
 801b374:	f7f1 f8b6 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b378:	4603      	mov	r3, r0
 801b37a:	4619      	mov	r1, r3
 801b37c:	4620      	mov	r0, r4
 801b37e:	f000 f8fc 	bl	801b57a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 801b382:	687b      	ldr	r3, [r7, #4]
      }
 801b384:	4618      	mov	r0, r3
 801b386:	370c      	adds	r7, #12
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd90      	pop	{r4, r7, pc}

0801b38c <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b38c:	b480      	push	{r7}
 801b38e:	b083      	sub	sp, #12
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
 801b394:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801b396:	683b      	ldr	r3, [r7, #0]
 801b398:	681a      	ldr	r2, [r3, #0]
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	601a      	str	r2, [r3, #0]
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	370c      	adds	r7, #12
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3aa:	4770      	bx	lr

0801b3ac <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801b3ac:	b480      	push	{r7}
 801b3ae:	b083      	sub	sp, #12
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	370c      	adds	r7, #12
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c0:	4770      	bx	lr

0801b3c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 801b3c2:	b590      	push	{r4, r7, lr}
 801b3c4:	b085      	sub	sp, #20
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	60f8      	str	r0, [r7, #12]
 801b3ca:	60b9      	str	r1, [r7, #8]
 801b3cc:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 801b3ce:	68f8      	ldr	r0, [r7, #12]
 801b3d0:	f000 f8f2 	bl	801b5b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	68b8      	ldr	r0, [r7, #8]
 801b3d8:	f000 f8ee 	bl	801b5b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b3dc:	4603      	mov	r3, r0
 801b3de:	687a      	ldr	r2, [r7, #4]
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f000 f8f3 	bl	801b5ce <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 801b3e8:	4603      	mov	r3, r0
    }
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	3714      	adds	r7, #20
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	bd90      	pop	{r4, r7, pc}

0801b3f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801b3f2:	b590      	push	{r4, r7, lr}
 801b3f4:	b085      	sub	sp, #20
 801b3f6:	af00      	add	r7, sp, #0
 801b3f8:	6078      	str	r0, [r7, #4]
 801b3fa:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	685a      	ldr	r2, [r3, #4]
 801b400:	683b      	ldr	r3, [r7, #0]
 801b402:	1ad3      	subs	r3, r2, r3
 801b404:	10db      	asrs	r3, r3, #3
 801b406:	60fb      	str	r3, [r7, #12]
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d00e      	beq.n	801b42c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	4618      	mov	r0, r3
 801b416:	f7f1 fa35 	bl	800c884 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b41a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b41c:	461a      	mov	r2, r3
 801b41e:	4621      	mov	r1, r4
 801b420:	6838      	ldr	r0, [r7, #0]
 801b422:	f7f1 fa3a 	bl	800c89a <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	683a      	ldr	r2, [r7, #0]
 801b42a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801b42c:	bf00      	nop
 801b42e:	3714      	adds	r7, #20
 801b430:	46bd      	mov	sp, r7
 801b432:	bd90      	pop	{r4, r7, pc}

0801b434 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 801b434:	b480      	push	{r7}
 801b436:	b083      	sub	sp, #12
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801b43c:	4618      	mov	r0, r3
 801b43e:	370c      	adds	r7, #12
 801b440:	46bd      	mov	sp, r7
 801b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b446:	4770      	bx	lr

0801b448 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801b448:	b580      	push	{r7, lr}
 801b44a:	b086      	sub	sp, #24
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	60f8      	str	r0, [r7, #12]
 801b450:	60b9      	str	r1, [r7, #8]
 801b452:	607a      	str	r2, [r7, #4]
 801b454:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 801b456:	f107 020c 	add.w	r2, r7, #12
 801b45a:	f107 0308 	add.w	r3, r7, #8
 801b45e:	4611      	mov	r1, r2
 801b460:	4618      	mov	r0, r3
 801b462:	f7f2 fafd 	bl	800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b466:	4603      	mov	r3, r0
 801b468:	109b      	asrs	r3, r3, #2
 801b46a:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 801b46c:	e03e      	b.n	801b4ec <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 801b46e:	1d3b      	adds	r3, r7, #4
 801b470:	68f9      	ldr	r1, [r7, #12]
 801b472:	4618      	mov	r0, r3
 801b474:	f7ff ff63 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b478:	4603      	mov	r3, r0
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d001      	beq.n	801b482 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	e077      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b482:	f107 030c 	add.w	r3, r7, #12
 801b486:	4618      	mov	r0, r3
 801b488:	f7f0 ff96 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b48c:	1d3b      	adds	r3, r7, #4
 801b48e:	68f9      	ldr	r1, [r7, #12]
 801b490:	4618      	mov	r0, r3
 801b492:	f7ff ff54 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b496:	4603      	mov	r3, r0
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d001      	beq.n	801b4a0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	e068      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b4a0:	f107 030c 	add.w	r3, r7, #12
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7f0 ff87 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b4aa:	1d3b      	adds	r3, r7, #4
 801b4ac:	68f9      	ldr	r1, [r7, #12]
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	f7ff ff45 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d001      	beq.n	801b4be <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	e059      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b4be:	f107 030c 	add.w	r3, r7, #12
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7f0 ff78 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b4c8:	1d3b      	adds	r3, r7, #4
 801b4ca:	68f9      	ldr	r1, [r7, #12]
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7ff ff36 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b4d2:	4603      	mov	r3, r0
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d001      	beq.n	801b4dc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	e04a      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b4dc:	f107 030c 	add.w	r3, r7, #12
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7f0 ff69 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	3b01      	subs	r3, #1
 801b4ea:	617b      	str	r3, [r7, #20]
 801b4ec:	697b      	ldr	r3, [r7, #20]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	dcbd      	bgt.n	801b46e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 801b4f2:	f107 020c 	add.w	r2, r7, #12
 801b4f6:	f107 0308 	add.w	r3, r7, #8
 801b4fa:	4611      	mov	r1, r2
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7f2 faaf 	bl	800da60 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b502:	4603      	mov	r3, r0
 801b504:	2b03      	cmp	r3, #3
 801b506:	d006      	beq.n	801b516 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 801b508:	2b03      	cmp	r3, #3
 801b50a:	dc31      	bgt.n	801b570 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 801b50c:	2b01      	cmp	r3, #1
 801b50e:	d020      	beq.n	801b552 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 801b510:	2b02      	cmp	r3, #2
 801b512:	d00f      	beq.n	801b534 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 801b514:	e02c      	b.n	801b570 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 801b516:	1d3b      	adds	r3, r7, #4
 801b518:	68f9      	ldr	r1, [r7, #12]
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7ff ff0f 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b520:	4603      	mov	r3, r0
 801b522:	2b00      	cmp	r3, #0
 801b524:	d001      	beq.n	801b52a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	e023      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b52a:	f107 030c 	add.w	r3, r7, #12
 801b52e:	4618      	mov	r0, r3
 801b530:	f7f0 ff42 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b534:	1d3b      	adds	r3, r7, #4
 801b536:	68f9      	ldr	r1, [r7, #12]
 801b538:	4618      	mov	r0, r3
 801b53a:	f7ff ff00 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b53e:	4603      	mov	r3, r0
 801b540:	2b00      	cmp	r3, #0
 801b542:	d001      	beq.n	801b548 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	e014      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b548:	f107 030c 	add.w	r3, r7, #12
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7f0 ff33 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b552:	1d3b      	adds	r3, r7, #4
 801b554:	68f9      	ldr	r1, [r7, #12]
 801b556:	4618      	mov	r0, r3
 801b558:	f7ff fef1 	bl	801b33e <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b55c:	4603      	mov	r3, r0
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d001      	beq.n	801b566 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	e005      	b.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b566:	f107 030c 	add.w	r3, r7, #12
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7f0 ff24 	bl	800c3b8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 801b570:	68bb      	ldr	r3, [r7, #8]
    }
 801b572:	4618      	mov	r0, r3
 801b574:	3718      	adds	r7, #24
 801b576:	46bd      	mov	sp, r7
 801b578:	bd80      	pop	{r7, pc}

0801b57a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 801b57a:	b580      	push	{r7, lr}
 801b57c:	b084      	sub	sp, #16
 801b57e:	af00      	add	r7, sp, #0
 801b580:	6078      	str	r0, [r7, #4]
 801b582:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 801b584:	6838      	ldr	r0, [r7, #0]
 801b586:	f000 f843 	bl	801b610 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 801b58a:	4602      	mov	r2, r0
 801b58c:	f107 0308 	add.w	r3, r7, #8
 801b590:	4611      	mov	r1, r2
 801b592:	4618      	mov	r0, r3
 801b594:	f7f2 ff1b 	bl	800e3ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 801b598:	f107 0308 	add.w	r3, r7, #8
 801b59c:	6879      	ldr	r1, [r7, #4]
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f000 f841 	bl	801b626 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 801b5a4:	f107 0308 	add.w	r3, r7, #8
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7ef fd48 	bl	800b03e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 801b5ae:	687b      	ldr	r3, [r7, #4]
      }
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	3710      	adds	r7, #16
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}

0801b5b8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801b5b8:	b480      	push	{r7}
 801b5ba:	b083      	sub	sp, #12
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
    { return __it; }
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	370c      	adds	r7, #12
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5cc:	4770      	bx	lr

0801b5ce <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801b5ce:	b5b0      	push	{r4, r5, r7, lr}
 801b5d0:	b084      	sub	sp, #16
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	60f8      	str	r0, [r7, #12]
 801b5d6:	60b9      	str	r1, [r7, #8]
 801b5d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801b5da:	68f8      	ldr	r0, [r7, #12]
 801b5dc:	f000 f83a 	bl	801b654 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b5e0:	4604      	mov	r4, r0
 801b5e2:	68b8      	ldr	r0, [r7, #8]
 801b5e4:	f000 f836 	bl	801b654 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b5e8:	4605      	mov	r5, r0
 801b5ea:	6878      	ldr	r0, [r7, #4]
 801b5ec:	f000 f832 	bl	801b654 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	461a      	mov	r2, r3
 801b5f4:	4629      	mov	r1, r5
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	f000 f83a 	bl	801b670 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	4619      	mov	r1, r3
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f000 f845 	bl	801b690 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 801b606:	4603      	mov	r3, r0
    }
 801b608:	4618      	mov	r0, r3
 801b60a:	3710      	adds	r7, #16
 801b60c:	46bd      	mov	sp, r7
 801b60e:	bdb0      	pop	{r4, r5, r7, pc}

0801b610 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801b610:	b480      	push	{r7}
 801b612:	b083      	sub	sp, #12
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	4618      	mov	r0, r3
 801b61c:	370c      	adds	r7, #12
 801b61e:	46bd      	mov	sp, r7
 801b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 801b626:	b580      	push	{r7, lr}
 801b628:	b082      	sub	sp, #8
 801b62a:	af00      	add	r7, sp, #0
 801b62c:	6078      	str	r0, [r7, #4]
 801b62e:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	683a      	ldr	r2, [r7, #0]
 801b634:	4611      	mov	r1, r2
 801b636:	4618      	mov	r0, r3
 801b638:	f000 f841 	bl	801b6be <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	1d1a      	adds	r2, r3, #4
 801b640:	683b      	ldr	r3, [r7, #0]
 801b642:	3304      	adds	r3, #4
 801b644:	4619      	mov	r1, r3
 801b646:	4610      	mov	r0, r2
 801b648:	f7f2 f8f1 	bl	800d82e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 801b64c:	bf00      	nop
 801b64e:	3708      	adds	r7, #8
 801b650:	46bd      	mov	sp, r7
 801b652:	bd80      	pop	{r7, pc}

0801b654 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801b654:	b580      	push	{r7, lr}
 801b656:	b082      	sub	sp, #8
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801b65c:	1d3b      	adds	r3, r7, #4
 801b65e:	4618      	mov	r0, r3
 801b660:	f7f1 fb9e 	bl	800cda0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b664:	4603      	mov	r3, r0
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	4618      	mov	r0, r3
 801b66a:	3708      	adds	r7, #8
 801b66c:	46bd      	mov	sp, r7
 801b66e:	bd80      	pop	{r7, pc}

0801b670 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801b670:	b580      	push	{r7, lr}
 801b672:	b084      	sub	sp, #16
 801b674:	af00      	add	r7, sp, #0
 801b676:	60f8      	str	r0, [r7, #12]
 801b678:	60b9      	str	r1, [r7, #8]
 801b67a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801b67c:	687a      	ldr	r2, [r7, #4]
 801b67e:	68b9      	ldr	r1, [r7, #8]
 801b680:	68f8      	ldr	r0, [r7, #12]
 801b682:	f000 f83b 	bl	801b6fc <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b686:	4603      	mov	r3, r0
 801b688:	4618      	mov	r0, r3
 801b68a:	3710      	adds	r7, #16
 801b68c:	46bd      	mov	sp, r7
 801b68e:	bd80      	pop	{r7, pc}

0801b690 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 801b690:	b580      	push	{r7, lr}
 801b692:	b082      	sub	sp, #8
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f7ff ffda 	bl	801b654 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b6a0:	4602      	mov	r2, r0
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	1a9b      	subs	r3, r3, r2
 801b6a6:	10db      	asrs	r3, r3, #3
 801b6a8:	461a      	mov	r2, r3
 801b6aa:	1d3b      	adds	r3, r7, #4
 801b6ac:	4611      	mov	r1, r2
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7ff fd78 	bl	801b1a4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	3708      	adds	r7, #8
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}

0801b6be <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 801b6be:	b580      	push	{r7, lr}
 801b6c0:	b084      	sub	sp, #16
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
 801b6c6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	f000 f827 	bl	801b71c <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801b6d4:	6838      	ldr	r0, [r7, #0]
 801b6d6:	f000 f821 	bl	801b71c <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	681a      	ldr	r2, [r3, #0]
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801b6e2:	f107 030c 	add.w	r3, r7, #12
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f000 f818 	bl	801b71c <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	601a      	str	r2, [r3, #0]
    }
 801b6f4:	bf00      	nop
 801b6f6:	3710      	adds	r7, #16
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b084      	sub	sp, #16
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801b708:	687a      	ldr	r2, [r7, #4]
 801b70a:	68b9      	ldr	r1, [r7, #8]
 801b70c:	68f8      	ldr	r0, [r7, #12]
 801b70e:	f000 f810 	bl	801b732 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 801b712:	4603      	mov	r3, r0
    }
 801b714:	4618      	mov	r0, r3
 801b716:	3710      	adds	r7, #16
 801b718:	46bd      	mov	sp, r7
 801b71a:	bd80      	pop	{r7, pc}

0801b71c <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801b71c:	b480      	push	{r7}
 801b71e:	b083      	sub	sp, #12
 801b720:	af00      	add	r7, sp, #0
 801b722:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	4618      	mov	r0, r3
 801b728:	370c      	adds	r7, #12
 801b72a:	46bd      	mov	sp, r7
 801b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b730:	4770      	bx	lr

0801b732 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801b732:	b580      	push	{r7, lr}
 801b734:	b086      	sub	sp, #24
 801b736:	af00      	add	r7, sp, #0
 801b738:	60f8      	str	r0, [r7, #12]
 801b73a:	60b9      	str	r1, [r7, #8]
 801b73c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b73e:	68ba      	ldr	r2, [r7, #8]
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	1ad3      	subs	r3, r2, r3
 801b744:	10db      	asrs	r3, r3, #3
 801b746:	617b      	str	r3, [r7, #20]
 801b748:	e010      	b.n	801b76c <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 801b74a:	68f8      	ldr	r0, [r7, #12]
 801b74c:	f7f0 feca 	bl	800c4e4 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b750:	4603      	mov	r3, r0
 801b752:	4619      	mov	r1, r3
 801b754:	6878      	ldr	r0, [r7, #4]
 801b756:	f7ff fe06 	bl	801b366 <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	3308      	adds	r3, #8
 801b75e:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	3308      	adds	r3, #8
 801b764:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b766:	697b      	ldr	r3, [r7, #20]
 801b768:	3b01      	subs	r3, #1
 801b76a:	617b      	str	r3, [r7, #20]
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	dceb      	bgt.n	801b74a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 801b772:	687b      	ldr	r3, [r7, #4]
	}
 801b774:	4618      	mov	r0, r3
 801b776:	3718      	adds	r7, #24
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <__NVIC_EnableIRQ>:
{
 801b77c:	b480      	push	{r7}
 801b77e:	b083      	sub	sp, #12
 801b780:	af00      	add	r7, sp, #0
 801b782:	4603      	mov	r3, r0
 801b784:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	db0b      	blt.n	801b7a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b78e:	88fb      	ldrh	r3, [r7, #6]
 801b790:	f003 021f 	and.w	r2, r3, #31
 801b794:	4907      	ldr	r1, [pc, #28]	@ (801b7b4 <__NVIC_EnableIRQ+0x38>)
 801b796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b79a:	095b      	lsrs	r3, r3, #5
 801b79c:	2001      	movs	r0, #1
 801b79e:	fa00 f202 	lsl.w	r2, r0, r2
 801b7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b7a6:	bf00      	nop
 801b7a8:	370c      	adds	r7, #12
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	e000e100 	.word	0xe000e100

0801b7b8 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 801b7b8:	b590      	push	{r4, r7, lr}
 801b7ba:	b085      	sub	sp, #20
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	60f8      	str	r0, [r7, #12]
 801b7c0:	60b9      	str	r1, [r7, #8]
 801b7c2:	603b      	str	r3, [r7, #0]
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	68ba      	ldr	r2, [r7, #8]
 801b7cc:	605a      	str	r2, [r3, #4]
	irq(_irq),
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	88fa      	ldrh	r2, [r7, #6]
 801b7d2:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	683a      	ldr	r2, [r7, #0]
 801b7d8:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	6a3a      	ldr	r2, [r7, #32]
 801b7de:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 801b7e0:	2008      	movs	r0, #8
 801b7e2:	f00c fec1 	bl	8028568 <_Znwj>
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	461c      	mov	r4, r3
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b7f0:	68fa      	ldr	r2, [r7, #12]
 801b7f2:	4619      	mov	r1, r3
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	f000 f8af 	bl	801b958 <_ZN14TimerInterruptC1EiP8pruTimer>
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	601c      	str	r4, [r3, #0]

	startTimer();
 801b7fe:	68f8      	ldr	r0, [r7, #12]
 801b800:	f000 f812 	bl	801b828 <_ZN8pruTimer10startTimerEv>
}
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	4618      	mov	r0, r3
 801b808:	3714      	adds	r7, #20
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd90      	pop	{r4, r7, pc}

0801b80e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 801b80e:	b580      	push	{r7, lr}
 801b810:	b082      	sub	sp, #8
 801b812:	af00      	add	r7, sp, #0
 801b814:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	691b      	ldr	r3, [r3, #16]
 801b81a:	4618      	mov	r0, r3
 801b81c:	f7ff fac9 	bl	801adb2 <_ZN9pruThread6updateEv>
}
 801b820:	bf00      	nop
 801b822:	3708      	adds	r7, #8
 801b824:	46bd      	mov	sp, r7
 801b826:	bd80      	pop	{r7, pc}

0801b828 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b086      	sub	sp, #24
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	685b      	ldr	r3, [r3, #4]
 801b834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b838:	d116      	bne.n	801b868 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801b83a:	483f      	ldr	r0, [pc, #252]	@ (801b938 <_ZN8pruTimer10startTimerEv+0x110>)
 801b83c:	f00d fd3e 	bl	80292bc <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 801b840:	4b3e      	ldr	r3, [pc, #248]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b846:	4a3d      	ldr	r2, [pc, #244]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b848:	f043 0301 	orr.w	r3, r3, #1
 801b84c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b850:	4b3a      	ldr	r3, [pc, #232]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b856:	f003 0301 	and.w	r3, r3, #1
 801b85a:	613b      	str	r3, [r7, #16]
 801b85c:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 801b85e:	4b38      	ldr	r3, [pc, #224]	@ (801b940 <_ZN8pruTimer10startTimerEv+0x118>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	085b      	lsrs	r3, r3, #1
 801b864:	617b      	str	r3, [r7, #20]
 801b866:	e036      	b.n	801b8d6 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	4a35      	ldr	r2, [pc, #212]	@ (801b944 <_ZN8pruTimer10startTimerEv+0x11c>)
 801b86e:	4293      	cmp	r3, r2
 801b870:	d116      	bne.n	801b8a0 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 801b872:	4835      	ldr	r0, [pc, #212]	@ (801b948 <_ZN8pruTimer10startTimerEv+0x120>)
 801b874:	f00d fd22 	bl	80292bc <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 801b878:	4b30      	ldr	r3, [pc, #192]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b87a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b87e:	4a2f      	ldr	r2, [pc, #188]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b880:	f043 0302 	orr.w	r3, r3, #2
 801b884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b888:	4b2c      	ldr	r3, [pc, #176]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b88a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b88e:	f003 0302 	and.w	r3, r3, #2
 801b892:	60fb      	str	r3, [r7, #12]
 801b894:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801b896:	4b2a      	ldr	r3, [pc, #168]	@ (801b940 <_ZN8pruTimer10startTimerEv+0x118>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	085b      	lsrs	r3, r3, #1
 801b89c:	617b      	str	r3, [r7, #20]
 801b89e:	e01a      	b.n	801b8d6 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	685b      	ldr	r3, [r3, #4]
 801b8a4:	4a29      	ldr	r2, [pc, #164]	@ (801b94c <_ZN8pruTimer10startTimerEv+0x124>)
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d115      	bne.n	801b8d6 <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801b8aa:	4829      	ldr	r0, [pc, #164]	@ (801b950 <_ZN8pruTimer10startTimerEv+0x128>)
 801b8ac:	f00d fd06 	bl	80292bc <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 801b8b0:	4b22      	ldr	r3, [pc, #136]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b8b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b8b6:	4a21      	ldr	r2, [pc, #132]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b8b8:	f043 0304 	orr.w	r3, r3, #4
 801b8bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b8c0:	4b1e      	ldr	r3, [pc, #120]	@ (801b93c <_ZN8pruTimer10startTimerEv+0x114>)
 801b8c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b8c6:	f003 0304 	and.w	r3, r3, #4
 801b8ca:	60bb      	str	r3, [r7, #8]
 801b8cc:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 801b8ce:	4b1c      	ldr	r3, [pc, #112]	@ (801b940 <_ZN8pruTimer10startTimerEv+0x118>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	085b      	lsrs	r3, r3, #1
 801b8d4:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	685b      	ldr	r3, [r3, #4]
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	685b      	ldr	r3, [r3, #4]
 801b8e8:	2200      	movs	r2, #0
 801b8ea:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	68db      	ldr	r3, [r3, #12]
 801b8f0:	697a      	ldr	r2, [r7, #20]
 801b8f2:	fbb2 f2f3 	udiv	r2, r2, r3
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	685b      	ldr	r3, [r3, #4]
 801b8fa:	3a01      	subs	r2, #1
 801b8fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	685b      	ldr	r3, [r3, #4]
 801b902:	2201      	movs	r2, #1
 801b904:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	685b      	ldr	r3, [r3, #4]
 801b90a:	2201      	movs	r2, #1
 801b90c:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	685b      	ldr	r3, [r3, #4]
 801b912:	681a      	ldr	r2, [r3, #0]
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	685b      	ldr	r3, [r3, #4]
 801b918:	f042 0201 	orr.w	r2, r2, #1
 801b91c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b924:	4618      	mov	r0, r3
 801b926:	f7ff ff29 	bl	801b77c <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801b92a:	480a      	ldr	r0, [pc, #40]	@ (801b954 <_ZN8pruTimer10startTimerEv+0x12c>)
 801b92c:	f00d fd36 	bl	802939c <puts>
}
 801b930:	bf00      	nop
 801b932:	3718      	adds	r7, #24
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	0802af7c 	.word	0x0802af7c
 801b93c:	58024400 	.word	0x58024400
 801b940:	2400001c 	.word	0x2400001c
 801b944:	40000400 	.word	0x40000400
 801b948:	0802af90 	.word	0x0802af90
 801b94c:	40000800 	.word	0x40000800
 801b950:	0802afa4 	.word	0x0802afa4
 801b954:	0802afb8 	.word	0x0802afb8

0801b958 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 801b958:	b580      	push	{r7, lr}
 801b95a:	b084      	sub	sp, #16
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	60f8      	str	r0, [r7, #12]
 801b960:	60b9      	str	r1, [r7, #8]
 801b962:	607a      	str	r2, [r7, #4]
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	4618      	mov	r0, r3
 801b968:	f7e9 fa5a 	bl	8004e20 <_ZN9InterruptC1Ev>
 801b96c:	4a07      	ldr	r2, [pc, #28]	@ (801b98c <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	687a      	ldr	r2, [r7, #4]
 801b976:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	4619      	mov	r1, r3
 801b97c:	68b8      	ldr	r0, [r7, #8]
 801b97e:	f7e9 fa5f 	bl	8004e40 <_ZN9Interrupt8RegisterEiPS_>
}
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	4618      	mov	r0, r3
 801b986:	3710      	adds	r7, #16
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}
 801b98c:	0802b5e4 	.word	0x0802b5e4

0801b990 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 801b990:	b580      	push	{r7, lr}
 801b992:	b082      	sub	sp, #8
 801b994:	af00      	add	r7, sp, #0
 801b996:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	685b      	ldr	r3, [r3, #4]
 801b99c:	4618      	mov	r0, r3
 801b99e:	f7ff ff36 	bl	801b80e <_ZN8pruTimer9timerTickEv>
}
 801b9a2:	bf00      	nop
 801b9a4:	3708      	adds	r7, #8
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
	...

0801b9ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801b9ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801b9e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801b9b0:	f7f3 fac2 	bl	800ef38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801b9b4:	480c      	ldr	r0, [pc, #48]	@ (801b9e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801b9b6:	490d      	ldr	r1, [pc, #52]	@ (801b9ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801b9b8:	4a0d      	ldr	r2, [pc, #52]	@ (801b9f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801b9ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801b9bc:	e002      	b.n	801b9c4 <LoopCopyDataInit>

0801b9be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801b9be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801b9c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801b9c2:	3304      	adds	r3, #4

0801b9c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801b9c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801b9c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801b9c8:	d3f9      	bcc.n	801b9be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801b9ca:	4a0a      	ldr	r2, [pc, #40]	@ (801b9f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801b9cc:	4c0a      	ldr	r4, [pc, #40]	@ (801b9f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 801b9ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 801b9d0:	e001      	b.n	801b9d6 <LoopFillZerobss>

0801b9d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801b9d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801b9d4:	3204      	adds	r2, #4

0801b9d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801b9d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801b9d8:	d3fb      	bcc.n	801b9d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b9da:	f00d fe91 	bl	8029700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801b9de:	f7ee fc85 	bl	800a2ec <main>
  bx  lr
 801b9e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801b9e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801b9e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801b9ec:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 801b9f0:	0802b9b4 	.word	0x0802b9b4
  ldr r2, =_sbss
 801b9f4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801b9f8:	24000c10 	.word	0x24000c10

0801b9fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801b9fc:	e7fe      	b.n	801b9fc <ADC3_IRQHandler>
	...

0801ba00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b082      	sub	sp, #8
 801ba04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ba06:	2003      	movs	r0, #3
 801ba08:	f000 f9a2 	bl	801bd50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ba0c:	f003 fdc8 	bl	801f5a0 <HAL_RCC_GetSysClockFreq>
 801ba10:	4602      	mov	r2, r0
 801ba12:	4b15      	ldr	r3, [pc, #84]	@ (801ba68 <HAL_Init+0x68>)
 801ba14:	699b      	ldr	r3, [r3, #24]
 801ba16:	0a1b      	lsrs	r3, r3, #8
 801ba18:	f003 030f 	and.w	r3, r3, #15
 801ba1c:	4913      	ldr	r1, [pc, #76]	@ (801ba6c <HAL_Init+0x6c>)
 801ba1e:	5ccb      	ldrb	r3, [r1, r3]
 801ba20:	f003 031f 	and.w	r3, r3, #31
 801ba24:	fa22 f303 	lsr.w	r3, r2, r3
 801ba28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801ba2a:	4b0f      	ldr	r3, [pc, #60]	@ (801ba68 <HAL_Init+0x68>)
 801ba2c:	699b      	ldr	r3, [r3, #24]
 801ba2e:	f003 030f 	and.w	r3, r3, #15
 801ba32:	4a0e      	ldr	r2, [pc, #56]	@ (801ba6c <HAL_Init+0x6c>)
 801ba34:	5cd3      	ldrb	r3, [r2, r3]
 801ba36:	f003 031f 	and.w	r3, r3, #31
 801ba3a:	687a      	ldr	r2, [r7, #4]
 801ba3c:	fa22 f303 	lsr.w	r3, r2, r3
 801ba40:	4a0b      	ldr	r2, [pc, #44]	@ (801ba70 <HAL_Init+0x70>)
 801ba42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ba44:	4a0b      	ldr	r2, [pc, #44]	@ (801ba74 <HAL_Init+0x74>)
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801ba4a:	200f      	movs	r0, #15
 801ba4c:	f000 f814 	bl	801ba78 <HAL_InitTick>
 801ba50:	4603      	mov	r3, r0
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d001      	beq.n	801ba5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801ba56:	2301      	movs	r3, #1
 801ba58:	e002      	b.n	801ba60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801ba5a:	f7f3 f853 	bl	800eb04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801ba5e:	2300      	movs	r3, #0
}
 801ba60:	4618      	mov	r0, r3
 801ba62:	3708      	adds	r7, #8
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}
 801ba68:	58024400 	.word	0x58024400
 801ba6c:	0802b320 	.word	0x0802b320
 801ba70:	24000020 	.word	0x24000020
 801ba74:	2400001c 	.word	0x2400001c

0801ba78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b082      	sub	sp, #8
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801ba80:	4b15      	ldr	r3, [pc, #84]	@ (801bad8 <HAL_InitTick+0x60>)
 801ba82:	781b      	ldrb	r3, [r3, #0]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d101      	bne.n	801ba8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801ba88:	2301      	movs	r3, #1
 801ba8a:	e021      	b.n	801bad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801ba8c:	4b13      	ldr	r3, [pc, #76]	@ (801badc <HAL_InitTick+0x64>)
 801ba8e:	681a      	ldr	r2, [r3, #0]
 801ba90:	4b11      	ldr	r3, [pc, #68]	@ (801bad8 <HAL_InitTick+0x60>)
 801ba92:	781b      	ldrb	r3, [r3, #0]
 801ba94:	4619      	mov	r1, r3
 801ba96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ba9a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba9e:	fbb2 f3f3 	udiv	r3, r2, r3
 801baa2:	4618      	mov	r0, r3
 801baa4:	f000 f98b 	bl	801bdbe <HAL_SYSTICK_Config>
 801baa8:	4603      	mov	r3, r0
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d001      	beq.n	801bab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801baae:	2301      	movs	r3, #1
 801bab0:	e00e      	b.n	801bad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	2b0f      	cmp	r3, #15
 801bab6:	d80a      	bhi.n	801bace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bab8:	2200      	movs	r2, #0
 801baba:	6879      	ldr	r1, [r7, #4]
 801babc:	f04f 30ff 	mov.w	r0, #4294967295
 801bac0:	f000 f951 	bl	801bd66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bac4:	4a06      	ldr	r2, [pc, #24]	@ (801bae0 <HAL_InitTick+0x68>)
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801baca:	2300      	movs	r3, #0
 801bacc:	e000      	b.n	801bad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801bace:	2301      	movs	r3, #1
}
 801bad0:	4618      	mov	r0, r3
 801bad2:	3708      	adds	r7, #8
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}
 801bad8:	24000028 	.word	0x24000028
 801badc:	2400001c 	.word	0x2400001c
 801bae0:	24000024 	.word	0x24000024

0801bae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bae4:	b480      	push	{r7}
 801bae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801bae8:	4b06      	ldr	r3, [pc, #24]	@ (801bb04 <HAL_IncTick+0x20>)
 801baea:	781b      	ldrb	r3, [r3, #0]
 801baec:	461a      	mov	r2, r3
 801baee:	4b06      	ldr	r3, [pc, #24]	@ (801bb08 <HAL_IncTick+0x24>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4413      	add	r3, r2
 801baf4:	4a04      	ldr	r2, [pc, #16]	@ (801bb08 <HAL_IncTick+0x24>)
 801baf6:	6013      	str	r3, [r2, #0]
}
 801baf8:	bf00      	nop
 801bafa:	46bd      	mov	sp, r7
 801bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb00:	4770      	bx	lr
 801bb02:	bf00      	nop
 801bb04:	24000028 	.word	0x24000028
 801bb08:	24000418 	.word	0x24000418

0801bb0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bb0c:	b480      	push	{r7}
 801bb0e:	af00      	add	r7, sp, #0
  return uwTick;
 801bb10:	4b03      	ldr	r3, [pc, #12]	@ (801bb20 <HAL_GetTick+0x14>)
 801bb12:	681b      	ldr	r3, [r3, #0]
}
 801bb14:	4618      	mov	r0, r3
 801bb16:	46bd      	mov	sp, r7
 801bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb1c:	4770      	bx	lr
 801bb1e:	bf00      	nop
 801bb20:	24000418 	.word	0x24000418

0801bb24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b084      	sub	sp, #16
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801bb2c:	f7ff ffee 	bl	801bb0c <HAL_GetTick>
 801bb30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb3c:	d005      	beq.n	801bb4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801bb3e:	4b0a      	ldr	r3, [pc, #40]	@ (801bb68 <HAL_Delay+0x44>)
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	461a      	mov	r2, r3
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	4413      	add	r3, r2
 801bb48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801bb4a:	bf00      	nop
 801bb4c:	f7ff ffde 	bl	801bb0c <HAL_GetTick>
 801bb50:	4602      	mov	r2, r0
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	1ad3      	subs	r3, r2, r3
 801bb56:	68fa      	ldr	r2, [r7, #12]
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d8f7      	bhi.n	801bb4c <HAL_Delay+0x28>
  {
  }
}
 801bb5c:	bf00      	nop
 801bb5e:	bf00      	nop
 801bb60:	3710      	adds	r7, #16
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	24000028 	.word	0x24000028

0801bb6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801bb6c:	b480      	push	{r7}
 801bb6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801bb70:	4b03      	ldr	r3, [pc, #12]	@ (801bb80 <HAL_GetREVID+0x14>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	0c1b      	lsrs	r3, r3, #16
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7e:	4770      	bx	lr
 801bb80:	5c001000 	.word	0x5c001000

0801bb84 <__NVIC_SetPriorityGrouping>:
{
 801bb84:	b480      	push	{r7}
 801bb86:	b085      	sub	sp, #20
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	f003 0307 	and.w	r3, r3, #7
 801bb92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bb94:	4b0b      	ldr	r3, [pc, #44]	@ (801bbc4 <__NVIC_SetPriorityGrouping+0x40>)
 801bb96:	68db      	ldr	r3, [r3, #12]
 801bb98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bb9a:	68ba      	ldr	r2, [r7, #8]
 801bb9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801bba0:	4013      	ands	r3, r2
 801bba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801bbac:	4b06      	ldr	r3, [pc, #24]	@ (801bbc8 <__NVIC_SetPriorityGrouping+0x44>)
 801bbae:	4313      	orrs	r3, r2
 801bbb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bbb2:	4a04      	ldr	r2, [pc, #16]	@ (801bbc4 <__NVIC_SetPriorityGrouping+0x40>)
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	60d3      	str	r3, [r2, #12]
}
 801bbb8:	bf00      	nop
 801bbba:	3714      	adds	r7, #20
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc2:	4770      	bx	lr
 801bbc4:	e000ed00 	.word	0xe000ed00
 801bbc8:	05fa0000 	.word	0x05fa0000

0801bbcc <__NVIC_GetPriorityGrouping>:
{
 801bbcc:	b480      	push	{r7}
 801bbce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bbd0:	4b04      	ldr	r3, [pc, #16]	@ (801bbe4 <__NVIC_GetPriorityGrouping+0x18>)
 801bbd2:	68db      	ldr	r3, [r3, #12]
 801bbd4:	0a1b      	lsrs	r3, r3, #8
 801bbd6:	f003 0307 	and.w	r3, r3, #7
}
 801bbda:	4618      	mov	r0, r3
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbe2:	4770      	bx	lr
 801bbe4:	e000ed00 	.word	0xe000ed00

0801bbe8 <__NVIC_EnableIRQ>:
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b083      	sub	sp, #12
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	4603      	mov	r3, r0
 801bbf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bbf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	db0b      	blt.n	801bc12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bbfa:	88fb      	ldrh	r3, [r7, #6]
 801bbfc:	f003 021f 	and.w	r2, r3, #31
 801bc00:	4907      	ldr	r1, [pc, #28]	@ (801bc20 <__NVIC_EnableIRQ+0x38>)
 801bc02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc06:	095b      	lsrs	r3, r3, #5
 801bc08:	2001      	movs	r0, #1
 801bc0a:	fa00 f202 	lsl.w	r2, r0, r2
 801bc0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801bc12:	bf00      	nop
 801bc14:	370c      	adds	r7, #12
 801bc16:	46bd      	mov	sp, r7
 801bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1c:	4770      	bx	lr
 801bc1e:	bf00      	nop
 801bc20:	e000e100 	.word	0xe000e100

0801bc24 <__NVIC_SetPriority>:
{
 801bc24:	b480      	push	{r7}
 801bc26:	b083      	sub	sp, #12
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	4603      	mov	r3, r0
 801bc2c:	6039      	str	r1, [r7, #0]
 801bc2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bc30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	db0a      	blt.n	801bc4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bc38:	683b      	ldr	r3, [r7, #0]
 801bc3a:	b2da      	uxtb	r2, r3
 801bc3c:	490c      	ldr	r1, [pc, #48]	@ (801bc70 <__NVIC_SetPriority+0x4c>)
 801bc3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc42:	0112      	lsls	r2, r2, #4
 801bc44:	b2d2      	uxtb	r2, r2
 801bc46:	440b      	add	r3, r1
 801bc48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801bc4c:	e00a      	b.n	801bc64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	b2da      	uxtb	r2, r3
 801bc52:	4908      	ldr	r1, [pc, #32]	@ (801bc74 <__NVIC_SetPriority+0x50>)
 801bc54:	88fb      	ldrh	r3, [r7, #6]
 801bc56:	f003 030f 	and.w	r3, r3, #15
 801bc5a:	3b04      	subs	r3, #4
 801bc5c:	0112      	lsls	r2, r2, #4
 801bc5e:	b2d2      	uxtb	r2, r2
 801bc60:	440b      	add	r3, r1
 801bc62:	761a      	strb	r2, [r3, #24]
}
 801bc64:	bf00      	nop
 801bc66:	370c      	adds	r7, #12
 801bc68:	46bd      	mov	sp, r7
 801bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc6e:	4770      	bx	lr
 801bc70:	e000e100 	.word	0xe000e100
 801bc74:	e000ed00 	.word	0xe000ed00

0801bc78 <NVIC_EncodePriority>:
{
 801bc78:	b480      	push	{r7}
 801bc7a:	b089      	sub	sp, #36	@ 0x24
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	60f8      	str	r0, [r7, #12]
 801bc80:	60b9      	str	r1, [r7, #8]
 801bc82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	f003 0307 	and.w	r3, r3, #7
 801bc8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bc8c:	69fb      	ldr	r3, [r7, #28]
 801bc8e:	f1c3 0307 	rsb	r3, r3, #7
 801bc92:	2b04      	cmp	r3, #4
 801bc94:	bf28      	it	cs
 801bc96:	2304      	movcs	r3, #4
 801bc98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bc9a:	69fb      	ldr	r3, [r7, #28]
 801bc9c:	3304      	adds	r3, #4
 801bc9e:	2b06      	cmp	r3, #6
 801bca0:	d902      	bls.n	801bca8 <NVIC_EncodePriority+0x30>
 801bca2:	69fb      	ldr	r3, [r7, #28]
 801bca4:	3b03      	subs	r3, #3
 801bca6:	e000      	b.n	801bcaa <NVIC_EncodePriority+0x32>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bcac:	f04f 32ff 	mov.w	r2, #4294967295
 801bcb0:	69bb      	ldr	r3, [r7, #24]
 801bcb2:	fa02 f303 	lsl.w	r3, r2, r3
 801bcb6:	43da      	mvns	r2, r3
 801bcb8:	68bb      	ldr	r3, [r7, #8]
 801bcba:	401a      	ands	r2, r3
 801bcbc:	697b      	ldr	r3, [r7, #20]
 801bcbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bcc0:	f04f 31ff 	mov.w	r1, #4294967295
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	fa01 f303 	lsl.w	r3, r1, r3
 801bcca:	43d9      	mvns	r1, r3
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bcd0:	4313      	orrs	r3, r2
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3724      	adds	r7, #36	@ 0x24
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcdc:	4770      	bx	lr
	...

0801bce0 <__NVIC_SystemReset>:
{
 801bce0:	b480      	push	{r7}
 801bce2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801bce4:	f3bf 8f4f 	dsb	sy
}
 801bce8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801bcea:	4b06      	ldr	r3, [pc, #24]	@ (801bd04 <__NVIC_SystemReset+0x24>)
 801bcec:	68db      	ldr	r3, [r3, #12]
 801bcee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801bcf2:	4904      	ldr	r1, [pc, #16]	@ (801bd04 <__NVIC_SystemReset+0x24>)
 801bcf4:	4b04      	ldr	r3, [pc, #16]	@ (801bd08 <__NVIC_SystemReset+0x28>)
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801bcfa:	f3bf 8f4f 	dsb	sy
}
 801bcfe:	bf00      	nop
    __NOP();
 801bd00:	bf00      	nop
 801bd02:	e7fd      	b.n	801bd00 <__NVIC_SystemReset+0x20>
 801bd04:	e000ed00 	.word	0xe000ed00
 801bd08:	05fa0004 	.word	0x05fa0004

0801bd0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	3b01      	subs	r3, #1
 801bd18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bd1c:	d301      	bcc.n	801bd22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bd1e:	2301      	movs	r3, #1
 801bd20:	e00f      	b.n	801bd42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bd22:	4a0a      	ldr	r2, [pc, #40]	@ (801bd4c <SysTick_Config+0x40>)
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	3b01      	subs	r3, #1
 801bd28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bd2a:	210f      	movs	r1, #15
 801bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd30:	f7ff ff78 	bl	801bc24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bd34:	4b05      	ldr	r3, [pc, #20]	@ (801bd4c <SysTick_Config+0x40>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bd3a:	4b04      	ldr	r3, [pc, #16]	@ (801bd4c <SysTick_Config+0x40>)
 801bd3c:	2207      	movs	r2, #7
 801bd3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bd40:	2300      	movs	r3, #0
}
 801bd42:	4618      	mov	r0, r3
 801bd44:	3708      	adds	r7, #8
 801bd46:	46bd      	mov	sp, r7
 801bd48:	bd80      	pop	{r7, pc}
 801bd4a:	bf00      	nop
 801bd4c:	e000e010 	.word	0xe000e010

0801bd50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b082      	sub	sp, #8
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bd58:	6878      	ldr	r0, [r7, #4]
 801bd5a:	f7ff ff13 	bl	801bb84 <__NVIC_SetPriorityGrouping>
}
 801bd5e:	bf00      	nop
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}

0801bd66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bd66:	b580      	push	{r7, lr}
 801bd68:	b086      	sub	sp, #24
 801bd6a:	af00      	add	r7, sp, #0
 801bd6c:	4603      	mov	r3, r0
 801bd6e:	60b9      	str	r1, [r7, #8]
 801bd70:	607a      	str	r2, [r7, #4]
 801bd72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bd74:	f7ff ff2a 	bl	801bbcc <__NVIC_GetPriorityGrouping>
 801bd78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bd7a:	687a      	ldr	r2, [r7, #4]
 801bd7c:	68b9      	ldr	r1, [r7, #8]
 801bd7e:	6978      	ldr	r0, [r7, #20]
 801bd80:	f7ff ff7a 	bl	801bc78 <NVIC_EncodePriority>
 801bd84:	4602      	mov	r2, r0
 801bd86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bd8a:	4611      	mov	r1, r2
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7ff ff49 	bl	801bc24 <__NVIC_SetPriority>
}
 801bd92:	bf00      	nop
 801bd94:	3718      	adds	r7, #24
 801bd96:	46bd      	mov	sp, r7
 801bd98:	bd80      	pop	{r7, pc}

0801bd9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bd9a:	b580      	push	{r7, lr}
 801bd9c:	b082      	sub	sp, #8
 801bd9e:	af00      	add	r7, sp, #0
 801bda0:	4603      	mov	r3, r0
 801bda2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bda4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f7ff ff1d 	bl	801bbe8 <__NVIC_EnableIRQ>
}
 801bdae:	bf00      	nop
 801bdb0:	3708      	adds	r7, #8
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	bd80      	pop	{r7, pc}

0801bdb6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801bdb6:	b580      	push	{r7, lr}
 801bdb8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801bdba:	f7ff ff91 	bl	801bce0 <__NVIC_SystemReset>

0801bdbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bdbe:	b580      	push	{r7, lr}
 801bdc0:	b082      	sub	sp, #8
 801bdc2:	af00      	add	r7, sp, #0
 801bdc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bdc6:	6878      	ldr	r0, [r7, #4]
 801bdc8:	f7ff ffa0 	bl	801bd0c <SysTick_Config>
 801bdcc:	4603      	mov	r3, r0
}
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3708      	adds	r7, #8
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}
	...

0801bdd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801bdd8:	b480      	push	{r7}
 801bdda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801bddc:	f3bf 8f5f 	dmb	sy
}
 801bde0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801bde2:	4b07      	ldr	r3, [pc, #28]	@ (801be00 <HAL_MPU_Disable+0x28>)
 801bde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bde6:	4a06      	ldr	r2, [pc, #24]	@ (801be00 <HAL_MPU_Disable+0x28>)
 801bde8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bdec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801bdee:	4b05      	ldr	r3, [pc, #20]	@ (801be04 <HAL_MPU_Disable+0x2c>)
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	605a      	str	r2, [r3, #4]
}
 801bdf4:	bf00      	nop
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	bf00      	nop
 801be00:	e000ed00 	.word	0xe000ed00
 801be04:	e000ed90 	.word	0xe000ed90

0801be08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801be08:	b480      	push	{r7}
 801be0a:	b083      	sub	sp, #12
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801be10:	4a0b      	ldr	r2, [pc, #44]	@ (801be40 <HAL_MPU_Enable+0x38>)
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	f043 0301 	orr.w	r3, r3, #1
 801be18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801be1a:	4b0a      	ldr	r3, [pc, #40]	@ (801be44 <HAL_MPU_Enable+0x3c>)
 801be1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be1e:	4a09      	ldr	r2, [pc, #36]	@ (801be44 <HAL_MPU_Enable+0x3c>)
 801be20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801be24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801be26:	f3bf 8f4f 	dsb	sy
}
 801be2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801be2c:	f3bf 8f6f 	isb	sy
}
 801be30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801be32:	bf00      	nop
 801be34:	370c      	adds	r7, #12
 801be36:	46bd      	mov	sp, r7
 801be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be3c:	4770      	bx	lr
 801be3e:	bf00      	nop
 801be40:	e000ed90 	.word	0xe000ed90
 801be44:	e000ed00 	.word	0xe000ed00

0801be48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801be48:	b480      	push	{r7}
 801be4a:	b083      	sub	sp, #12
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	785a      	ldrb	r2, [r3, #1]
 801be54:	4b1b      	ldr	r3, [pc, #108]	@ (801bec4 <HAL_MPU_ConfigRegion+0x7c>)
 801be56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801be58:	4b1a      	ldr	r3, [pc, #104]	@ (801bec4 <HAL_MPU_ConfigRegion+0x7c>)
 801be5a:	691b      	ldr	r3, [r3, #16]
 801be5c:	4a19      	ldr	r2, [pc, #100]	@ (801bec4 <HAL_MPU_ConfigRegion+0x7c>)
 801be5e:	f023 0301 	bic.w	r3, r3, #1
 801be62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801be64:	4a17      	ldr	r2, [pc, #92]	@ (801bec4 <HAL_MPU_ConfigRegion+0x7c>)
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	685b      	ldr	r3, [r3, #4]
 801be6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	7b1b      	ldrb	r3, [r3, #12]
 801be70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	7adb      	ldrb	r3, [r3, #11]
 801be76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801be78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	7a9b      	ldrb	r3, [r3, #10]
 801be7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801be80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	7b5b      	ldrb	r3, [r3, #13]
 801be86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801be88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	7b9b      	ldrb	r3, [r3, #14]
 801be8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801be90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	7bdb      	ldrb	r3, [r3, #15]
 801be96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801be98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	7a5b      	ldrb	r3, [r3, #9]
 801be9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801bea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	7a1b      	ldrb	r3, [r3, #8]
 801bea6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801bea8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801beaa:	687a      	ldr	r2, [r7, #4]
 801beac:	7812      	ldrb	r2, [r2, #0]
 801beae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801beb0:	4a04      	ldr	r2, [pc, #16]	@ (801bec4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801beb2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801beb4:	6113      	str	r3, [r2, #16]
}
 801beb6:	bf00      	nop
 801beb8:	370c      	adds	r7, #12
 801beba:	46bd      	mov	sp, r7
 801bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec0:	4770      	bx	lr
 801bec2:	bf00      	nop
 801bec4:	e000ed90 	.word	0xe000ed90

0801bec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bec8:	b580      	push	{r7, lr}
 801beca:	b086      	sub	sp, #24
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801bed0:	f7ff fe1c 	bl	801bb0c <HAL_GetTick>
 801bed4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d101      	bne.n	801bee0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801bedc:	2301      	movs	r3, #1
 801bede:	e316      	b.n	801c50e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	4a66      	ldr	r2, [pc, #408]	@ (801c080 <HAL_DMA_Init+0x1b8>)
 801bee6:	4293      	cmp	r3, r2
 801bee8:	d04a      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	4a65      	ldr	r2, [pc, #404]	@ (801c084 <HAL_DMA_Init+0x1bc>)
 801bef0:	4293      	cmp	r3, r2
 801bef2:	d045      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	4a63      	ldr	r2, [pc, #396]	@ (801c088 <HAL_DMA_Init+0x1c0>)
 801befa:	4293      	cmp	r3, r2
 801befc:	d040      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	4a62      	ldr	r2, [pc, #392]	@ (801c08c <HAL_DMA_Init+0x1c4>)
 801bf04:	4293      	cmp	r3, r2
 801bf06:	d03b      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	4a60      	ldr	r2, [pc, #384]	@ (801c090 <HAL_DMA_Init+0x1c8>)
 801bf0e:	4293      	cmp	r3, r2
 801bf10:	d036      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	4a5f      	ldr	r2, [pc, #380]	@ (801c094 <HAL_DMA_Init+0x1cc>)
 801bf18:	4293      	cmp	r3, r2
 801bf1a:	d031      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	4a5d      	ldr	r2, [pc, #372]	@ (801c098 <HAL_DMA_Init+0x1d0>)
 801bf22:	4293      	cmp	r3, r2
 801bf24:	d02c      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	4a5c      	ldr	r2, [pc, #368]	@ (801c09c <HAL_DMA_Init+0x1d4>)
 801bf2c:	4293      	cmp	r3, r2
 801bf2e:	d027      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	4a5a      	ldr	r2, [pc, #360]	@ (801c0a0 <HAL_DMA_Init+0x1d8>)
 801bf36:	4293      	cmp	r3, r2
 801bf38:	d022      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	4a59      	ldr	r2, [pc, #356]	@ (801c0a4 <HAL_DMA_Init+0x1dc>)
 801bf40:	4293      	cmp	r3, r2
 801bf42:	d01d      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	4a57      	ldr	r2, [pc, #348]	@ (801c0a8 <HAL_DMA_Init+0x1e0>)
 801bf4a:	4293      	cmp	r3, r2
 801bf4c:	d018      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	4a56      	ldr	r2, [pc, #344]	@ (801c0ac <HAL_DMA_Init+0x1e4>)
 801bf54:	4293      	cmp	r3, r2
 801bf56:	d013      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	4a54      	ldr	r2, [pc, #336]	@ (801c0b0 <HAL_DMA_Init+0x1e8>)
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	d00e      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	4a53      	ldr	r2, [pc, #332]	@ (801c0b4 <HAL_DMA_Init+0x1ec>)
 801bf68:	4293      	cmp	r3, r2
 801bf6a:	d009      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	4a51      	ldr	r2, [pc, #324]	@ (801c0b8 <HAL_DMA_Init+0x1f0>)
 801bf72:	4293      	cmp	r3, r2
 801bf74:	d004      	beq.n	801bf80 <HAL_DMA_Init+0xb8>
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	4a50      	ldr	r2, [pc, #320]	@ (801c0bc <HAL_DMA_Init+0x1f4>)
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	d101      	bne.n	801bf84 <HAL_DMA_Init+0xbc>
 801bf80:	2301      	movs	r3, #1
 801bf82:	e000      	b.n	801bf86 <HAL_DMA_Init+0xbe>
 801bf84:	2300      	movs	r3, #0
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	f000 813b 	beq.w	801c202 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	2202      	movs	r2, #2
 801bf90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	2200      	movs	r2, #0
 801bf98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	4a37      	ldr	r2, [pc, #220]	@ (801c080 <HAL_DMA_Init+0x1b8>)
 801bfa2:	4293      	cmp	r3, r2
 801bfa4:	d04a      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	4a36      	ldr	r2, [pc, #216]	@ (801c084 <HAL_DMA_Init+0x1bc>)
 801bfac:	4293      	cmp	r3, r2
 801bfae:	d045      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	4a34      	ldr	r2, [pc, #208]	@ (801c088 <HAL_DMA_Init+0x1c0>)
 801bfb6:	4293      	cmp	r3, r2
 801bfb8:	d040      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	4a33      	ldr	r2, [pc, #204]	@ (801c08c <HAL_DMA_Init+0x1c4>)
 801bfc0:	4293      	cmp	r3, r2
 801bfc2:	d03b      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	4a31      	ldr	r2, [pc, #196]	@ (801c090 <HAL_DMA_Init+0x1c8>)
 801bfca:	4293      	cmp	r3, r2
 801bfcc:	d036      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	4a30      	ldr	r2, [pc, #192]	@ (801c094 <HAL_DMA_Init+0x1cc>)
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d031      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	4a2e      	ldr	r2, [pc, #184]	@ (801c098 <HAL_DMA_Init+0x1d0>)
 801bfde:	4293      	cmp	r3, r2
 801bfe0:	d02c      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	4a2d      	ldr	r2, [pc, #180]	@ (801c09c <HAL_DMA_Init+0x1d4>)
 801bfe8:	4293      	cmp	r3, r2
 801bfea:	d027      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	4a2b      	ldr	r2, [pc, #172]	@ (801c0a0 <HAL_DMA_Init+0x1d8>)
 801bff2:	4293      	cmp	r3, r2
 801bff4:	d022      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	4a2a      	ldr	r2, [pc, #168]	@ (801c0a4 <HAL_DMA_Init+0x1dc>)
 801bffc:	4293      	cmp	r3, r2
 801bffe:	d01d      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	4a28      	ldr	r2, [pc, #160]	@ (801c0a8 <HAL_DMA_Init+0x1e0>)
 801c006:	4293      	cmp	r3, r2
 801c008:	d018      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	4a27      	ldr	r2, [pc, #156]	@ (801c0ac <HAL_DMA_Init+0x1e4>)
 801c010:	4293      	cmp	r3, r2
 801c012:	d013      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	4a25      	ldr	r2, [pc, #148]	@ (801c0b0 <HAL_DMA_Init+0x1e8>)
 801c01a:	4293      	cmp	r3, r2
 801c01c:	d00e      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	4a24      	ldr	r2, [pc, #144]	@ (801c0b4 <HAL_DMA_Init+0x1ec>)
 801c024:	4293      	cmp	r3, r2
 801c026:	d009      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	4a22      	ldr	r2, [pc, #136]	@ (801c0b8 <HAL_DMA_Init+0x1f0>)
 801c02e:	4293      	cmp	r3, r2
 801c030:	d004      	beq.n	801c03c <HAL_DMA_Init+0x174>
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	4a21      	ldr	r2, [pc, #132]	@ (801c0bc <HAL_DMA_Init+0x1f4>)
 801c038:	4293      	cmp	r3, r2
 801c03a:	d108      	bne.n	801c04e <HAL_DMA_Init+0x186>
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	681a      	ldr	r2, [r3, #0]
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f022 0201 	bic.w	r2, r2, #1
 801c04a:	601a      	str	r2, [r3, #0]
 801c04c:	e007      	b.n	801c05e <HAL_DMA_Init+0x196>
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	681a      	ldr	r2, [r3, #0]
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	f022 0201 	bic.w	r2, r2, #1
 801c05c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c05e:	e02f      	b.n	801c0c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c060:	f7ff fd54 	bl	801bb0c <HAL_GetTick>
 801c064:	4602      	mov	r2, r0
 801c066:	693b      	ldr	r3, [r7, #16]
 801c068:	1ad3      	subs	r3, r2, r3
 801c06a:	2b05      	cmp	r3, #5
 801c06c:	d928      	bls.n	801c0c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	2220      	movs	r2, #32
 801c072:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	2203      	movs	r2, #3
 801c078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801c07c:	2301      	movs	r3, #1
 801c07e:	e246      	b.n	801c50e <HAL_DMA_Init+0x646>
 801c080:	40020010 	.word	0x40020010
 801c084:	40020028 	.word	0x40020028
 801c088:	40020040 	.word	0x40020040
 801c08c:	40020058 	.word	0x40020058
 801c090:	40020070 	.word	0x40020070
 801c094:	40020088 	.word	0x40020088
 801c098:	400200a0 	.word	0x400200a0
 801c09c:	400200b8 	.word	0x400200b8
 801c0a0:	40020410 	.word	0x40020410
 801c0a4:	40020428 	.word	0x40020428
 801c0a8:	40020440 	.word	0x40020440
 801c0ac:	40020458 	.word	0x40020458
 801c0b0:	40020470 	.word	0x40020470
 801c0b4:	40020488 	.word	0x40020488
 801c0b8:	400204a0 	.word	0x400204a0
 801c0bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	f003 0301 	and.w	r3, r3, #1
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d1c8      	bne.n	801c060 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c0d6:	697a      	ldr	r2, [r7, #20]
 801c0d8:	4b83      	ldr	r3, [pc, #524]	@ (801c2e8 <HAL_DMA_Init+0x420>)
 801c0da:	4013      	ands	r3, r2
 801c0dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801c0e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	691b      	ldr	r3, [r3, #16]
 801c0ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c0f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	699b      	ldr	r3, [r3, #24]
 801c0f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c0fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	6a1b      	ldr	r3, [r3, #32]
 801c104:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801c106:	697a      	ldr	r2, [r7, #20]
 801c108:	4313      	orrs	r3, r2
 801c10a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c110:	2b04      	cmp	r3, #4
 801c112:	d107      	bne.n	801c124 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c11c:	4313      	orrs	r3, r2
 801c11e:	697a      	ldr	r2, [r7, #20]
 801c120:	4313      	orrs	r3, r2
 801c122:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801c124:	4b71      	ldr	r3, [pc, #452]	@ (801c2ec <HAL_DMA_Init+0x424>)
 801c126:	681a      	ldr	r2, [r3, #0]
 801c128:	4b71      	ldr	r3, [pc, #452]	@ (801c2f0 <HAL_DMA_Init+0x428>)
 801c12a:	4013      	ands	r3, r2
 801c12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c130:	d328      	bcc.n	801c184 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	685b      	ldr	r3, [r3, #4]
 801c136:	2b28      	cmp	r3, #40	@ 0x28
 801c138:	d903      	bls.n	801c142 <HAL_DMA_Init+0x27a>
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	685b      	ldr	r3, [r3, #4]
 801c13e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c140:	d917      	bls.n	801c172 <HAL_DMA_Init+0x2aa>
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	685b      	ldr	r3, [r3, #4]
 801c146:	2b3e      	cmp	r3, #62	@ 0x3e
 801c148:	d903      	bls.n	801c152 <HAL_DMA_Init+0x28a>
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	2b42      	cmp	r3, #66	@ 0x42
 801c150:	d90f      	bls.n	801c172 <HAL_DMA_Init+0x2aa>
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	685b      	ldr	r3, [r3, #4]
 801c156:	2b46      	cmp	r3, #70	@ 0x46
 801c158:	d903      	bls.n	801c162 <HAL_DMA_Init+0x29a>
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	685b      	ldr	r3, [r3, #4]
 801c15e:	2b48      	cmp	r3, #72	@ 0x48
 801c160:	d907      	bls.n	801c172 <HAL_DMA_Init+0x2aa>
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	685b      	ldr	r3, [r3, #4]
 801c166:	2b4e      	cmp	r3, #78	@ 0x4e
 801c168:	d905      	bls.n	801c176 <HAL_DMA_Init+0x2ae>
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	685b      	ldr	r3, [r3, #4]
 801c16e:	2b52      	cmp	r3, #82	@ 0x52
 801c170:	d801      	bhi.n	801c176 <HAL_DMA_Init+0x2ae>
 801c172:	2301      	movs	r3, #1
 801c174:	e000      	b.n	801c178 <HAL_DMA_Init+0x2b0>
 801c176:	2300      	movs	r3, #0
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d003      	beq.n	801c184 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c182:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	697a      	ldr	r2, [r7, #20]
 801c18a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	695b      	ldr	r3, [r3, #20]
 801c192:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c194:	697b      	ldr	r3, [r7, #20]
 801c196:	f023 0307 	bic.w	r3, r3, #7
 801c19a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1a0:	697a      	ldr	r2, [r7, #20]
 801c1a2:	4313      	orrs	r3, r2
 801c1a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1aa:	2b04      	cmp	r3, #4
 801c1ac:	d117      	bne.n	801c1de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1b2:	697a      	ldr	r2, [r7, #20]
 801c1b4:	4313      	orrs	r3, r2
 801c1b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d00e      	beq.n	801c1de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c1c0:	6878      	ldr	r0, [r7, #4]
 801c1c2:	f001 fc23 	bl	801da0c <DMA_CheckFifoParam>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d008      	beq.n	801c1de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	2240      	movs	r2, #64	@ 0x40
 801c1d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	2201      	movs	r2, #1
 801c1d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801c1da:	2301      	movs	r3, #1
 801c1dc:	e197      	b.n	801c50e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	697a      	ldr	r2, [r7, #20]
 801c1e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	f001 fb5e 	bl	801d8a8 <DMA_CalcBaseAndBitshift>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1f4:	f003 031f 	and.w	r3, r3, #31
 801c1f8:	223f      	movs	r2, #63	@ 0x3f
 801c1fa:	409a      	lsls	r2, r3
 801c1fc:	68bb      	ldr	r3, [r7, #8]
 801c1fe:	609a      	str	r2, [r3, #8]
 801c200:	e0cd      	b.n	801c39e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	4a3b      	ldr	r2, [pc, #236]	@ (801c2f4 <HAL_DMA_Init+0x42c>)
 801c208:	4293      	cmp	r3, r2
 801c20a:	d022      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	4a39      	ldr	r2, [pc, #228]	@ (801c2f8 <HAL_DMA_Init+0x430>)
 801c212:	4293      	cmp	r3, r2
 801c214:	d01d      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	4a38      	ldr	r2, [pc, #224]	@ (801c2fc <HAL_DMA_Init+0x434>)
 801c21c:	4293      	cmp	r3, r2
 801c21e:	d018      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	4a36      	ldr	r2, [pc, #216]	@ (801c300 <HAL_DMA_Init+0x438>)
 801c226:	4293      	cmp	r3, r2
 801c228:	d013      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	4a35      	ldr	r2, [pc, #212]	@ (801c304 <HAL_DMA_Init+0x43c>)
 801c230:	4293      	cmp	r3, r2
 801c232:	d00e      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	4a33      	ldr	r2, [pc, #204]	@ (801c308 <HAL_DMA_Init+0x440>)
 801c23a:	4293      	cmp	r3, r2
 801c23c:	d009      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	4a32      	ldr	r2, [pc, #200]	@ (801c30c <HAL_DMA_Init+0x444>)
 801c244:	4293      	cmp	r3, r2
 801c246:	d004      	beq.n	801c252 <HAL_DMA_Init+0x38a>
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	4a30      	ldr	r2, [pc, #192]	@ (801c310 <HAL_DMA_Init+0x448>)
 801c24e:	4293      	cmp	r3, r2
 801c250:	d101      	bne.n	801c256 <HAL_DMA_Init+0x38e>
 801c252:	2301      	movs	r3, #1
 801c254:	e000      	b.n	801c258 <HAL_DMA_Init+0x390>
 801c256:	2300      	movs	r3, #0
 801c258:	2b00      	cmp	r3, #0
 801c25a:	f000 8097 	beq.w	801c38c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	4a24      	ldr	r2, [pc, #144]	@ (801c2f4 <HAL_DMA_Init+0x42c>)
 801c264:	4293      	cmp	r3, r2
 801c266:	d021      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	4a22      	ldr	r2, [pc, #136]	@ (801c2f8 <HAL_DMA_Init+0x430>)
 801c26e:	4293      	cmp	r3, r2
 801c270:	d01c      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	4a21      	ldr	r2, [pc, #132]	@ (801c2fc <HAL_DMA_Init+0x434>)
 801c278:	4293      	cmp	r3, r2
 801c27a:	d017      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	4a1f      	ldr	r2, [pc, #124]	@ (801c300 <HAL_DMA_Init+0x438>)
 801c282:	4293      	cmp	r3, r2
 801c284:	d012      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	4a1e      	ldr	r2, [pc, #120]	@ (801c304 <HAL_DMA_Init+0x43c>)
 801c28c:	4293      	cmp	r3, r2
 801c28e:	d00d      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	4a1c      	ldr	r2, [pc, #112]	@ (801c308 <HAL_DMA_Init+0x440>)
 801c296:	4293      	cmp	r3, r2
 801c298:	d008      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	4a1b      	ldr	r2, [pc, #108]	@ (801c30c <HAL_DMA_Init+0x444>)
 801c2a0:	4293      	cmp	r3, r2
 801c2a2:	d003      	beq.n	801c2ac <HAL_DMA_Init+0x3e4>
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4a19      	ldr	r2, [pc, #100]	@ (801c310 <HAL_DMA_Init+0x448>)
 801c2aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	2202      	movs	r2, #2
 801c2b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801c2c4:	697a      	ldr	r2, [r7, #20]
 801c2c6:	4b13      	ldr	r3, [pc, #76]	@ (801c314 <HAL_DMA_Init+0x44c>)
 801c2c8:	4013      	ands	r3, r2
 801c2ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	689b      	ldr	r3, [r3, #8]
 801c2d0:	2b40      	cmp	r3, #64	@ 0x40
 801c2d2:	d021      	beq.n	801c318 <HAL_DMA_Init+0x450>
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	689b      	ldr	r3, [r3, #8]
 801c2d8:	2b80      	cmp	r3, #128	@ 0x80
 801c2da:	d102      	bne.n	801c2e2 <HAL_DMA_Init+0x41a>
 801c2dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c2e0:	e01b      	b.n	801c31a <HAL_DMA_Init+0x452>
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	e019      	b.n	801c31a <HAL_DMA_Init+0x452>
 801c2e6:	bf00      	nop
 801c2e8:	fe10803f 	.word	0xfe10803f
 801c2ec:	5c001000 	.word	0x5c001000
 801c2f0:	ffff0000 	.word	0xffff0000
 801c2f4:	58025408 	.word	0x58025408
 801c2f8:	5802541c 	.word	0x5802541c
 801c2fc:	58025430 	.word	0x58025430
 801c300:	58025444 	.word	0x58025444
 801c304:	58025458 	.word	0x58025458
 801c308:	5802546c 	.word	0x5802546c
 801c30c:	58025480 	.word	0x58025480
 801c310:	58025494 	.word	0x58025494
 801c314:	fffe000f 	.word	0xfffe000f
 801c318:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	68d2      	ldr	r2, [r2, #12]
 801c31e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	691b      	ldr	r3, [r3, #16]
 801c326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	695b      	ldr	r3, [r3, #20]
 801c32e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c330:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	699b      	ldr	r3, [r3, #24]
 801c336:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	69db      	ldr	r3, [r3, #28]
 801c33e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	6a1b      	ldr	r3, [r3, #32]
 801c346:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c348:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c34a:	697a      	ldr	r2, [r7, #20]
 801c34c:	4313      	orrs	r3, r2
 801c34e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	697a      	ldr	r2, [r7, #20]
 801c356:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	461a      	mov	r2, r3
 801c35e:	4b6e      	ldr	r3, [pc, #440]	@ (801c518 <HAL_DMA_Init+0x650>)
 801c360:	4413      	add	r3, r2
 801c362:	4a6e      	ldr	r2, [pc, #440]	@ (801c51c <HAL_DMA_Init+0x654>)
 801c364:	fba2 2303 	umull	r2, r3, r2, r3
 801c368:	091b      	lsrs	r3, r3, #4
 801c36a:	009a      	lsls	r2, r3, #2
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c370:	6878      	ldr	r0, [r7, #4]
 801c372:	f001 fa99 	bl	801d8a8 <DMA_CalcBaseAndBitshift>
 801c376:	4603      	mov	r3, r0
 801c378:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c37e:	f003 031f 	and.w	r3, r3, #31
 801c382:	2201      	movs	r2, #1
 801c384:	409a      	lsls	r2, r3
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	605a      	str	r2, [r3, #4]
 801c38a:	e008      	b.n	801c39e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	2240      	movs	r2, #64	@ 0x40
 801c390:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	2203      	movs	r2, #3
 801c396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801c39a:	2301      	movs	r3, #1
 801c39c:	e0b7      	b.n	801c50e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	4a5f      	ldr	r2, [pc, #380]	@ (801c520 <HAL_DMA_Init+0x658>)
 801c3a4:	4293      	cmp	r3, r2
 801c3a6:	d072      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	4a5d      	ldr	r2, [pc, #372]	@ (801c524 <HAL_DMA_Init+0x65c>)
 801c3ae:	4293      	cmp	r3, r2
 801c3b0:	d06d      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	4a5c      	ldr	r2, [pc, #368]	@ (801c528 <HAL_DMA_Init+0x660>)
 801c3b8:	4293      	cmp	r3, r2
 801c3ba:	d068      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	4a5a      	ldr	r2, [pc, #360]	@ (801c52c <HAL_DMA_Init+0x664>)
 801c3c2:	4293      	cmp	r3, r2
 801c3c4:	d063      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	4a59      	ldr	r2, [pc, #356]	@ (801c530 <HAL_DMA_Init+0x668>)
 801c3cc:	4293      	cmp	r3, r2
 801c3ce:	d05e      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	4a57      	ldr	r2, [pc, #348]	@ (801c534 <HAL_DMA_Init+0x66c>)
 801c3d6:	4293      	cmp	r3, r2
 801c3d8:	d059      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	4a56      	ldr	r2, [pc, #344]	@ (801c538 <HAL_DMA_Init+0x670>)
 801c3e0:	4293      	cmp	r3, r2
 801c3e2:	d054      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4a54      	ldr	r2, [pc, #336]	@ (801c53c <HAL_DMA_Init+0x674>)
 801c3ea:	4293      	cmp	r3, r2
 801c3ec:	d04f      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	4a53      	ldr	r2, [pc, #332]	@ (801c540 <HAL_DMA_Init+0x678>)
 801c3f4:	4293      	cmp	r3, r2
 801c3f6:	d04a      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	4a51      	ldr	r2, [pc, #324]	@ (801c544 <HAL_DMA_Init+0x67c>)
 801c3fe:	4293      	cmp	r3, r2
 801c400:	d045      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	4a50      	ldr	r2, [pc, #320]	@ (801c548 <HAL_DMA_Init+0x680>)
 801c408:	4293      	cmp	r3, r2
 801c40a:	d040      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	4a4e      	ldr	r2, [pc, #312]	@ (801c54c <HAL_DMA_Init+0x684>)
 801c412:	4293      	cmp	r3, r2
 801c414:	d03b      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4a4d      	ldr	r2, [pc, #308]	@ (801c550 <HAL_DMA_Init+0x688>)
 801c41c:	4293      	cmp	r3, r2
 801c41e:	d036      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	4a4b      	ldr	r2, [pc, #300]	@ (801c554 <HAL_DMA_Init+0x68c>)
 801c426:	4293      	cmp	r3, r2
 801c428:	d031      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	4a4a      	ldr	r2, [pc, #296]	@ (801c558 <HAL_DMA_Init+0x690>)
 801c430:	4293      	cmp	r3, r2
 801c432:	d02c      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	4a48      	ldr	r2, [pc, #288]	@ (801c55c <HAL_DMA_Init+0x694>)
 801c43a:	4293      	cmp	r3, r2
 801c43c:	d027      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	4a47      	ldr	r2, [pc, #284]	@ (801c560 <HAL_DMA_Init+0x698>)
 801c444:	4293      	cmp	r3, r2
 801c446:	d022      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	4a45      	ldr	r2, [pc, #276]	@ (801c564 <HAL_DMA_Init+0x69c>)
 801c44e:	4293      	cmp	r3, r2
 801c450:	d01d      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	4a44      	ldr	r2, [pc, #272]	@ (801c568 <HAL_DMA_Init+0x6a0>)
 801c458:	4293      	cmp	r3, r2
 801c45a:	d018      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	4a42      	ldr	r2, [pc, #264]	@ (801c56c <HAL_DMA_Init+0x6a4>)
 801c462:	4293      	cmp	r3, r2
 801c464:	d013      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	4a41      	ldr	r2, [pc, #260]	@ (801c570 <HAL_DMA_Init+0x6a8>)
 801c46c:	4293      	cmp	r3, r2
 801c46e:	d00e      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	4a3f      	ldr	r2, [pc, #252]	@ (801c574 <HAL_DMA_Init+0x6ac>)
 801c476:	4293      	cmp	r3, r2
 801c478:	d009      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	4a3e      	ldr	r2, [pc, #248]	@ (801c578 <HAL_DMA_Init+0x6b0>)
 801c480:	4293      	cmp	r3, r2
 801c482:	d004      	beq.n	801c48e <HAL_DMA_Init+0x5c6>
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	4a3c      	ldr	r2, [pc, #240]	@ (801c57c <HAL_DMA_Init+0x6b4>)
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d101      	bne.n	801c492 <HAL_DMA_Init+0x5ca>
 801c48e:	2301      	movs	r3, #1
 801c490:	e000      	b.n	801c494 <HAL_DMA_Init+0x5cc>
 801c492:	2300      	movs	r3, #0
 801c494:	2b00      	cmp	r3, #0
 801c496:	d032      	beq.n	801c4fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801c498:	6878      	ldr	r0, [r7, #4]
 801c49a:	f001 fb33 	bl	801db04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	689b      	ldr	r3, [r3, #8]
 801c4a2:	2b80      	cmp	r3, #128	@ 0x80
 801c4a4:	d102      	bne.n	801c4ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	685a      	ldr	r2, [r3, #4]
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c4b4:	b2d2      	uxtb	r2, r2
 801c4b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c4bc:	687a      	ldr	r2, [r7, #4]
 801c4be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801c4c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	685b      	ldr	r3, [r3, #4]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d010      	beq.n	801c4ec <HAL_DMA_Init+0x624>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	685b      	ldr	r3, [r3, #4]
 801c4ce:	2b08      	cmp	r3, #8
 801c4d0:	d80c      	bhi.n	801c4ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801c4d2:	6878      	ldr	r0, [r7, #4]
 801c4d4:	f001 fbb0 	bl	801dc38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c4dc:	2200      	movs	r2, #0
 801c4de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c4e4:	687a      	ldr	r2, [r7, #4]
 801c4e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801c4e8:	605a      	str	r2, [r3, #4]
 801c4ea:	e008      	b.n	801c4fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	2200      	movs	r2, #0
 801c4f6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	2200      	movs	r2, #0
 801c502:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2201      	movs	r2, #1
 801c508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801c50c:	2300      	movs	r3, #0
}
 801c50e:	4618      	mov	r0, r3
 801c510:	3718      	adds	r7, #24
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	a7fdabf8 	.word	0xa7fdabf8
 801c51c:	cccccccd 	.word	0xcccccccd
 801c520:	40020010 	.word	0x40020010
 801c524:	40020028 	.word	0x40020028
 801c528:	40020040 	.word	0x40020040
 801c52c:	40020058 	.word	0x40020058
 801c530:	40020070 	.word	0x40020070
 801c534:	40020088 	.word	0x40020088
 801c538:	400200a0 	.word	0x400200a0
 801c53c:	400200b8 	.word	0x400200b8
 801c540:	40020410 	.word	0x40020410
 801c544:	40020428 	.word	0x40020428
 801c548:	40020440 	.word	0x40020440
 801c54c:	40020458 	.word	0x40020458
 801c550:	40020470 	.word	0x40020470
 801c554:	40020488 	.word	0x40020488
 801c558:	400204a0 	.word	0x400204a0
 801c55c:	400204b8 	.word	0x400204b8
 801c560:	58025408 	.word	0x58025408
 801c564:	5802541c 	.word	0x5802541c
 801c568:	58025430 	.word	0x58025430
 801c56c:	58025444 	.word	0x58025444
 801c570:	58025458 	.word	0x58025458
 801c574:	5802546c 	.word	0x5802546c
 801c578:	58025480 	.word	0x58025480
 801c57c:	58025494 	.word	0x58025494

0801c580 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c580:	b580      	push	{r7, lr}
 801c582:	b086      	sub	sp, #24
 801c584:	af00      	add	r7, sp, #0
 801c586:	60f8      	str	r0, [r7, #12]
 801c588:	60b9      	str	r1, [r7, #8]
 801c58a:	607a      	str	r2, [r7, #4]
 801c58c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c58e:	2300      	movs	r3, #0
 801c590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d101      	bne.n	801c59c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 801c598:	2301      	movs	r3, #1
 801c59a:	e0ec      	b.n	801c776 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c5a2:	2b01      	cmp	r3, #1
 801c5a4:	d101      	bne.n	801c5aa <HAL_DMA_Start+0x2a>
 801c5a6:	2302      	movs	r3, #2
 801c5a8:	e0e5      	b.n	801c776 <HAL_DMA_Start+0x1f6>
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	2201      	movs	r2, #1
 801c5ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c5b8:	b2db      	uxtb	r3, r3
 801c5ba:	2b01      	cmp	r3, #1
 801c5bc:	f040 80d0 	bne.w	801c760 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	2202      	movs	r2, #2
 801c5c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c5ce:	68fb      	ldr	r3, [r7, #12]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	4a6b      	ldr	r2, [pc, #428]	@ (801c780 <HAL_DMA_Start+0x200>)
 801c5d4:	4293      	cmp	r3, r2
 801c5d6:	d04a      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	4a69      	ldr	r2, [pc, #420]	@ (801c784 <HAL_DMA_Start+0x204>)
 801c5de:	4293      	cmp	r3, r2
 801c5e0:	d045      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	4a68      	ldr	r2, [pc, #416]	@ (801c788 <HAL_DMA_Start+0x208>)
 801c5e8:	4293      	cmp	r3, r2
 801c5ea:	d040      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	4a66      	ldr	r2, [pc, #408]	@ (801c78c <HAL_DMA_Start+0x20c>)
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	d03b      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4a65      	ldr	r2, [pc, #404]	@ (801c790 <HAL_DMA_Start+0x210>)
 801c5fc:	4293      	cmp	r3, r2
 801c5fe:	d036      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	4a63      	ldr	r2, [pc, #396]	@ (801c794 <HAL_DMA_Start+0x214>)
 801c606:	4293      	cmp	r3, r2
 801c608:	d031      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	4a62      	ldr	r2, [pc, #392]	@ (801c798 <HAL_DMA_Start+0x218>)
 801c610:	4293      	cmp	r3, r2
 801c612:	d02c      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	4a60      	ldr	r2, [pc, #384]	@ (801c79c <HAL_DMA_Start+0x21c>)
 801c61a:	4293      	cmp	r3, r2
 801c61c:	d027      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	4a5f      	ldr	r2, [pc, #380]	@ (801c7a0 <HAL_DMA_Start+0x220>)
 801c624:	4293      	cmp	r3, r2
 801c626:	d022      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	4a5d      	ldr	r2, [pc, #372]	@ (801c7a4 <HAL_DMA_Start+0x224>)
 801c62e:	4293      	cmp	r3, r2
 801c630:	d01d      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	4a5c      	ldr	r2, [pc, #368]	@ (801c7a8 <HAL_DMA_Start+0x228>)
 801c638:	4293      	cmp	r3, r2
 801c63a:	d018      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	4a5a      	ldr	r2, [pc, #360]	@ (801c7ac <HAL_DMA_Start+0x22c>)
 801c642:	4293      	cmp	r3, r2
 801c644:	d013      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	4a59      	ldr	r2, [pc, #356]	@ (801c7b0 <HAL_DMA_Start+0x230>)
 801c64c:	4293      	cmp	r3, r2
 801c64e:	d00e      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	4a57      	ldr	r2, [pc, #348]	@ (801c7b4 <HAL_DMA_Start+0x234>)
 801c656:	4293      	cmp	r3, r2
 801c658:	d009      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	4a56      	ldr	r2, [pc, #344]	@ (801c7b8 <HAL_DMA_Start+0x238>)
 801c660:	4293      	cmp	r3, r2
 801c662:	d004      	beq.n	801c66e <HAL_DMA_Start+0xee>
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	4a54      	ldr	r2, [pc, #336]	@ (801c7bc <HAL_DMA_Start+0x23c>)
 801c66a:	4293      	cmp	r3, r2
 801c66c:	d108      	bne.n	801c680 <HAL_DMA_Start+0x100>
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	681a      	ldr	r2, [r3, #0]
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	f022 0201 	bic.w	r2, r2, #1
 801c67c:	601a      	str	r2, [r3, #0]
 801c67e:	e007      	b.n	801c690 <HAL_DMA_Start+0x110>
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	681a      	ldr	r2, [r3, #0]
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	f022 0201 	bic.w	r2, r2, #1
 801c68e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c690:	683b      	ldr	r3, [r7, #0]
 801c692:	687a      	ldr	r2, [r7, #4]
 801c694:	68b9      	ldr	r1, [r7, #8]
 801c696:	68f8      	ldr	r0, [r7, #12]
 801c698:	f000 ff5a 	bl	801d550 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	4a37      	ldr	r2, [pc, #220]	@ (801c780 <HAL_DMA_Start+0x200>)
 801c6a2:	4293      	cmp	r3, r2
 801c6a4:	d04a      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	4a36      	ldr	r2, [pc, #216]	@ (801c784 <HAL_DMA_Start+0x204>)
 801c6ac:	4293      	cmp	r3, r2
 801c6ae:	d045      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	4a34      	ldr	r2, [pc, #208]	@ (801c788 <HAL_DMA_Start+0x208>)
 801c6b6:	4293      	cmp	r3, r2
 801c6b8:	d040      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	4a33      	ldr	r2, [pc, #204]	@ (801c78c <HAL_DMA_Start+0x20c>)
 801c6c0:	4293      	cmp	r3, r2
 801c6c2:	d03b      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	4a31      	ldr	r2, [pc, #196]	@ (801c790 <HAL_DMA_Start+0x210>)
 801c6ca:	4293      	cmp	r3, r2
 801c6cc:	d036      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	4a30      	ldr	r2, [pc, #192]	@ (801c794 <HAL_DMA_Start+0x214>)
 801c6d4:	4293      	cmp	r3, r2
 801c6d6:	d031      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	4a2e      	ldr	r2, [pc, #184]	@ (801c798 <HAL_DMA_Start+0x218>)
 801c6de:	4293      	cmp	r3, r2
 801c6e0:	d02c      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	4a2d      	ldr	r2, [pc, #180]	@ (801c79c <HAL_DMA_Start+0x21c>)
 801c6e8:	4293      	cmp	r3, r2
 801c6ea:	d027      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	4a2b      	ldr	r2, [pc, #172]	@ (801c7a0 <HAL_DMA_Start+0x220>)
 801c6f2:	4293      	cmp	r3, r2
 801c6f4:	d022      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	4a2a      	ldr	r2, [pc, #168]	@ (801c7a4 <HAL_DMA_Start+0x224>)
 801c6fc:	4293      	cmp	r3, r2
 801c6fe:	d01d      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	4a28      	ldr	r2, [pc, #160]	@ (801c7a8 <HAL_DMA_Start+0x228>)
 801c706:	4293      	cmp	r3, r2
 801c708:	d018      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	4a27      	ldr	r2, [pc, #156]	@ (801c7ac <HAL_DMA_Start+0x22c>)
 801c710:	4293      	cmp	r3, r2
 801c712:	d013      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	4a25      	ldr	r2, [pc, #148]	@ (801c7b0 <HAL_DMA_Start+0x230>)
 801c71a:	4293      	cmp	r3, r2
 801c71c:	d00e      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	4a24      	ldr	r2, [pc, #144]	@ (801c7b4 <HAL_DMA_Start+0x234>)
 801c724:	4293      	cmp	r3, r2
 801c726:	d009      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	4a22      	ldr	r2, [pc, #136]	@ (801c7b8 <HAL_DMA_Start+0x238>)
 801c72e:	4293      	cmp	r3, r2
 801c730:	d004      	beq.n	801c73c <HAL_DMA_Start+0x1bc>
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	4a21      	ldr	r2, [pc, #132]	@ (801c7bc <HAL_DMA_Start+0x23c>)
 801c738:	4293      	cmp	r3, r2
 801c73a:	d108      	bne.n	801c74e <HAL_DMA_Start+0x1ce>
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	681a      	ldr	r2, [r3, #0]
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	f042 0201 	orr.w	r2, r2, #1
 801c74a:	601a      	str	r2, [r3, #0]
 801c74c:	e012      	b.n	801c774 <HAL_DMA_Start+0x1f4>
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	681a      	ldr	r2, [r3, #0]
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	f042 0201 	orr.w	r2, r2, #1
 801c75c:	601a      	str	r2, [r3, #0]
 801c75e:	e009      	b.n	801c774 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c766:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	2200      	movs	r2, #0
 801c76c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 801c770:	2301      	movs	r3, #1
 801c772:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801c774:	7dfb      	ldrb	r3, [r7, #23]
}
 801c776:	4618      	mov	r0, r3
 801c778:	3718      	adds	r7, #24
 801c77a:	46bd      	mov	sp, r7
 801c77c:	bd80      	pop	{r7, pc}
 801c77e:	bf00      	nop
 801c780:	40020010 	.word	0x40020010
 801c784:	40020028 	.word	0x40020028
 801c788:	40020040 	.word	0x40020040
 801c78c:	40020058 	.word	0x40020058
 801c790:	40020070 	.word	0x40020070
 801c794:	40020088 	.word	0x40020088
 801c798:	400200a0 	.word	0x400200a0
 801c79c:	400200b8 	.word	0x400200b8
 801c7a0:	40020410 	.word	0x40020410
 801c7a4:	40020428 	.word	0x40020428
 801c7a8:	40020440 	.word	0x40020440
 801c7ac:	40020458 	.word	0x40020458
 801c7b0:	40020470 	.word	0x40020470
 801c7b4:	40020488 	.word	0x40020488
 801c7b8:	400204a0 	.word	0x400204a0
 801c7bc:	400204b8 	.word	0x400204b8

0801c7c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	b086      	sub	sp, #24
 801c7c4:	af00      	add	r7, sp, #0
 801c7c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801c7c8:	f7ff f9a0 	bl	801bb0c <HAL_GetTick>
 801c7cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d101      	bne.n	801c7d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801c7d4:	2301      	movs	r3, #1
 801c7d6:	e2dc      	b.n	801cd92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c7de:	b2db      	uxtb	r3, r3
 801c7e0:	2b02      	cmp	r3, #2
 801c7e2:	d008      	beq.n	801c7f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	2280      	movs	r2, #128	@ 0x80
 801c7e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801c7f2:	2301      	movs	r3, #1
 801c7f4:	e2cd      	b.n	801cd92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	4a76      	ldr	r2, [pc, #472]	@ (801c9d4 <HAL_DMA_Abort+0x214>)
 801c7fc:	4293      	cmp	r3, r2
 801c7fe:	d04a      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	4a74      	ldr	r2, [pc, #464]	@ (801c9d8 <HAL_DMA_Abort+0x218>)
 801c806:	4293      	cmp	r3, r2
 801c808:	d045      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	4a73      	ldr	r2, [pc, #460]	@ (801c9dc <HAL_DMA_Abort+0x21c>)
 801c810:	4293      	cmp	r3, r2
 801c812:	d040      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	4a71      	ldr	r2, [pc, #452]	@ (801c9e0 <HAL_DMA_Abort+0x220>)
 801c81a:	4293      	cmp	r3, r2
 801c81c:	d03b      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	4a70      	ldr	r2, [pc, #448]	@ (801c9e4 <HAL_DMA_Abort+0x224>)
 801c824:	4293      	cmp	r3, r2
 801c826:	d036      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	4a6e      	ldr	r2, [pc, #440]	@ (801c9e8 <HAL_DMA_Abort+0x228>)
 801c82e:	4293      	cmp	r3, r2
 801c830:	d031      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	4a6d      	ldr	r2, [pc, #436]	@ (801c9ec <HAL_DMA_Abort+0x22c>)
 801c838:	4293      	cmp	r3, r2
 801c83a:	d02c      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4a6b      	ldr	r2, [pc, #428]	@ (801c9f0 <HAL_DMA_Abort+0x230>)
 801c842:	4293      	cmp	r3, r2
 801c844:	d027      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	4a6a      	ldr	r2, [pc, #424]	@ (801c9f4 <HAL_DMA_Abort+0x234>)
 801c84c:	4293      	cmp	r3, r2
 801c84e:	d022      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	4a68      	ldr	r2, [pc, #416]	@ (801c9f8 <HAL_DMA_Abort+0x238>)
 801c856:	4293      	cmp	r3, r2
 801c858:	d01d      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	4a67      	ldr	r2, [pc, #412]	@ (801c9fc <HAL_DMA_Abort+0x23c>)
 801c860:	4293      	cmp	r3, r2
 801c862:	d018      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	4a65      	ldr	r2, [pc, #404]	@ (801ca00 <HAL_DMA_Abort+0x240>)
 801c86a:	4293      	cmp	r3, r2
 801c86c:	d013      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	4a64      	ldr	r2, [pc, #400]	@ (801ca04 <HAL_DMA_Abort+0x244>)
 801c874:	4293      	cmp	r3, r2
 801c876:	d00e      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	4a62      	ldr	r2, [pc, #392]	@ (801ca08 <HAL_DMA_Abort+0x248>)
 801c87e:	4293      	cmp	r3, r2
 801c880:	d009      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	4a61      	ldr	r2, [pc, #388]	@ (801ca0c <HAL_DMA_Abort+0x24c>)
 801c888:	4293      	cmp	r3, r2
 801c88a:	d004      	beq.n	801c896 <HAL_DMA_Abort+0xd6>
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	4a5f      	ldr	r2, [pc, #380]	@ (801ca10 <HAL_DMA_Abort+0x250>)
 801c892:	4293      	cmp	r3, r2
 801c894:	d101      	bne.n	801c89a <HAL_DMA_Abort+0xda>
 801c896:	2301      	movs	r3, #1
 801c898:	e000      	b.n	801c89c <HAL_DMA_Abort+0xdc>
 801c89a:	2300      	movs	r3, #0
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d013      	beq.n	801c8c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	681a      	ldr	r2, [r3, #0]
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	f022 021e 	bic.w	r2, r2, #30
 801c8ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	695a      	ldr	r2, [r3, #20]
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801c8be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	617b      	str	r3, [r7, #20]
 801c8c6:	e00a      	b.n	801c8de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	681a      	ldr	r2, [r3, #0]
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f022 020e 	bic.w	r2, r2, #14
 801c8d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	4a3c      	ldr	r2, [pc, #240]	@ (801c9d4 <HAL_DMA_Abort+0x214>)
 801c8e4:	4293      	cmp	r3, r2
 801c8e6:	d072      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	4a3a      	ldr	r2, [pc, #232]	@ (801c9d8 <HAL_DMA_Abort+0x218>)
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	d06d      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	4a39      	ldr	r2, [pc, #228]	@ (801c9dc <HAL_DMA_Abort+0x21c>)
 801c8f8:	4293      	cmp	r3, r2
 801c8fa:	d068      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	4a37      	ldr	r2, [pc, #220]	@ (801c9e0 <HAL_DMA_Abort+0x220>)
 801c902:	4293      	cmp	r3, r2
 801c904:	d063      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	4a36      	ldr	r2, [pc, #216]	@ (801c9e4 <HAL_DMA_Abort+0x224>)
 801c90c:	4293      	cmp	r3, r2
 801c90e:	d05e      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	4a34      	ldr	r2, [pc, #208]	@ (801c9e8 <HAL_DMA_Abort+0x228>)
 801c916:	4293      	cmp	r3, r2
 801c918:	d059      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	4a33      	ldr	r2, [pc, #204]	@ (801c9ec <HAL_DMA_Abort+0x22c>)
 801c920:	4293      	cmp	r3, r2
 801c922:	d054      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	4a31      	ldr	r2, [pc, #196]	@ (801c9f0 <HAL_DMA_Abort+0x230>)
 801c92a:	4293      	cmp	r3, r2
 801c92c:	d04f      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	4a30      	ldr	r2, [pc, #192]	@ (801c9f4 <HAL_DMA_Abort+0x234>)
 801c934:	4293      	cmp	r3, r2
 801c936:	d04a      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	4a2e      	ldr	r2, [pc, #184]	@ (801c9f8 <HAL_DMA_Abort+0x238>)
 801c93e:	4293      	cmp	r3, r2
 801c940:	d045      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	4a2d      	ldr	r2, [pc, #180]	@ (801c9fc <HAL_DMA_Abort+0x23c>)
 801c948:	4293      	cmp	r3, r2
 801c94a:	d040      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	4a2b      	ldr	r2, [pc, #172]	@ (801ca00 <HAL_DMA_Abort+0x240>)
 801c952:	4293      	cmp	r3, r2
 801c954:	d03b      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	4a2a      	ldr	r2, [pc, #168]	@ (801ca04 <HAL_DMA_Abort+0x244>)
 801c95c:	4293      	cmp	r3, r2
 801c95e:	d036      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	4a28      	ldr	r2, [pc, #160]	@ (801ca08 <HAL_DMA_Abort+0x248>)
 801c966:	4293      	cmp	r3, r2
 801c968:	d031      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	4a27      	ldr	r2, [pc, #156]	@ (801ca0c <HAL_DMA_Abort+0x24c>)
 801c970:	4293      	cmp	r3, r2
 801c972:	d02c      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	4a25      	ldr	r2, [pc, #148]	@ (801ca10 <HAL_DMA_Abort+0x250>)
 801c97a:	4293      	cmp	r3, r2
 801c97c:	d027      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	4a24      	ldr	r2, [pc, #144]	@ (801ca14 <HAL_DMA_Abort+0x254>)
 801c984:	4293      	cmp	r3, r2
 801c986:	d022      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	4a22      	ldr	r2, [pc, #136]	@ (801ca18 <HAL_DMA_Abort+0x258>)
 801c98e:	4293      	cmp	r3, r2
 801c990:	d01d      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	4a21      	ldr	r2, [pc, #132]	@ (801ca1c <HAL_DMA_Abort+0x25c>)
 801c998:	4293      	cmp	r3, r2
 801c99a:	d018      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	4a1f      	ldr	r2, [pc, #124]	@ (801ca20 <HAL_DMA_Abort+0x260>)
 801c9a2:	4293      	cmp	r3, r2
 801c9a4:	d013      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	4a1e      	ldr	r2, [pc, #120]	@ (801ca24 <HAL_DMA_Abort+0x264>)
 801c9ac:	4293      	cmp	r3, r2
 801c9ae:	d00e      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	4a1c      	ldr	r2, [pc, #112]	@ (801ca28 <HAL_DMA_Abort+0x268>)
 801c9b6:	4293      	cmp	r3, r2
 801c9b8:	d009      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	4a1b      	ldr	r2, [pc, #108]	@ (801ca2c <HAL_DMA_Abort+0x26c>)
 801c9c0:	4293      	cmp	r3, r2
 801c9c2:	d004      	beq.n	801c9ce <HAL_DMA_Abort+0x20e>
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	4a19      	ldr	r2, [pc, #100]	@ (801ca30 <HAL_DMA_Abort+0x270>)
 801c9ca:	4293      	cmp	r3, r2
 801c9cc:	d132      	bne.n	801ca34 <HAL_DMA_Abort+0x274>
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	e031      	b.n	801ca36 <HAL_DMA_Abort+0x276>
 801c9d2:	bf00      	nop
 801c9d4:	40020010 	.word	0x40020010
 801c9d8:	40020028 	.word	0x40020028
 801c9dc:	40020040 	.word	0x40020040
 801c9e0:	40020058 	.word	0x40020058
 801c9e4:	40020070 	.word	0x40020070
 801c9e8:	40020088 	.word	0x40020088
 801c9ec:	400200a0 	.word	0x400200a0
 801c9f0:	400200b8 	.word	0x400200b8
 801c9f4:	40020410 	.word	0x40020410
 801c9f8:	40020428 	.word	0x40020428
 801c9fc:	40020440 	.word	0x40020440
 801ca00:	40020458 	.word	0x40020458
 801ca04:	40020470 	.word	0x40020470
 801ca08:	40020488 	.word	0x40020488
 801ca0c:	400204a0 	.word	0x400204a0
 801ca10:	400204b8 	.word	0x400204b8
 801ca14:	58025408 	.word	0x58025408
 801ca18:	5802541c 	.word	0x5802541c
 801ca1c:	58025430 	.word	0x58025430
 801ca20:	58025444 	.word	0x58025444
 801ca24:	58025458 	.word	0x58025458
 801ca28:	5802546c 	.word	0x5802546c
 801ca2c:	58025480 	.word	0x58025480
 801ca30:	58025494 	.word	0x58025494
 801ca34:	2300      	movs	r3, #0
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d007      	beq.n	801ca4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca3e:	681a      	ldr	r2, [r3, #0]
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ca48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	4a6d      	ldr	r2, [pc, #436]	@ (801cc04 <HAL_DMA_Abort+0x444>)
 801ca50:	4293      	cmp	r3, r2
 801ca52:	d04a      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	4a6b      	ldr	r2, [pc, #428]	@ (801cc08 <HAL_DMA_Abort+0x448>)
 801ca5a:	4293      	cmp	r3, r2
 801ca5c:	d045      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	4a6a      	ldr	r2, [pc, #424]	@ (801cc0c <HAL_DMA_Abort+0x44c>)
 801ca64:	4293      	cmp	r3, r2
 801ca66:	d040      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	4a68      	ldr	r2, [pc, #416]	@ (801cc10 <HAL_DMA_Abort+0x450>)
 801ca6e:	4293      	cmp	r3, r2
 801ca70:	d03b      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	4a67      	ldr	r2, [pc, #412]	@ (801cc14 <HAL_DMA_Abort+0x454>)
 801ca78:	4293      	cmp	r3, r2
 801ca7a:	d036      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	4a65      	ldr	r2, [pc, #404]	@ (801cc18 <HAL_DMA_Abort+0x458>)
 801ca82:	4293      	cmp	r3, r2
 801ca84:	d031      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	4a64      	ldr	r2, [pc, #400]	@ (801cc1c <HAL_DMA_Abort+0x45c>)
 801ca8c:	4293      	cmp	r3, r2
 801ca8e:	d02c      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	4a62      	ldr	r2, [pc, #392]	@ (801cc20 <HAL_DMA_Abort+0x460>)
 801ca96:	4293      	cmp	r3, r2
 801ca98:	d027      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	4a61      	ldr	r2, [pc, #388]	@ (801cc24 <HAL_DMA_Abort+0x464>)
 801caa0:	4293      	cmp	r3, r2
 801caa2:	d022      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	4a5f      	ldr	r2, [pc, #380]	@ (801cc28 <HAL_DMA_Abort+0x468>)
 801caaa:	4293      	cmp	r3, r2
 801caac:	d01d      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	4a5e      	ldr	r2, [pc, #376]	@ (801cc2c <HAL_DMA_Abort+0x46c>)
 801cab4:	4293      	cmp	r3, r2
 801cab6:	d018      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	4a5c      	ldr	r2, [pc, #368]	@ (801cc30 <HAL_DMA_Abort+0x470>)
 801cabe:	4293      	cmp	r3, r2
 801cac0:	d013      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	4a5b      	ldr	r2, [pc, #364]	@ (801cc34 <HAL_DMA_Abort+0x474>)
 801cac8:	4293      	cmp	r3, r2
 801caca:	d00e      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	4a59      	ldr	r2, [pc, #356]	@ (801cc38 <HAL_DMA_Abort+0x478>)
 801cad2:	4293      	cmp	r3, r2
 801cad4:	d009      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	4a58      	ldr	r2, [pc, #352]	@ (801cc3c <HAL_DMA_Abort+0x47c>)
 801cadc:	4293      	cmp	r3, r2
 801cade:	d004      	beq.n	801caea <HAL_DMA_Abort+0x32a>
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	4a56      	ldr	r2, [pc, #344]	@ (801cc40 <HAL_DMA_Abort+0x480>)
 801cae6:	4293      	cmp	r3, r2
 801cae8:	d108      	bne.n	801cafc <HAL_DMA_Abort+0x33c>
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	681a      	ldr	r2, [r3, #0]
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	f022 0201 	bic.w	r2, r2, #1
 801caf8:	601a      	str	r2, [r3, #0]
 801cafa:	e007      	b.n	801cb0c <HAL_DMA_Abort+0x34c>
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	681a      	ldr	r2, [r3, #0]
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	f022 0201 	bic.w	r2, r2, #1
 801cb0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cb0c:	e013      	b.n	801cb36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cb0e:	f7fe fffd 	bl	801bb0c <HAL_GetTick>
 801cb12:	4602      	mov	r2, r0
 801cb14:	693b      	ldr	r3, [r7, #16]
 801cb16:	1ad3      	subs	r3, r2, r3
 801cb18:	2b05      	cmp	r3, #5
 801cb1a:	d90c      	bls.n	801cb36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	2220      	movs	r2, #32
 801cb20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	2203      	movs	r2, #3
 801cb26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801cb32:	2301      	movs	r3, #1
 801cb34:	e12d      	b.n	801cd92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cb36:	697b      	ldr	r3, [r7, #20]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	f003 0301 	and.w	r3, r3, #1
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d1e5      	bne.n	801cb0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	4a2f      	ldr	r2, [pc, #188]	@ (801cc04 <HAL_DMA_Abort+0x444>)
 801cb48:	4293      	cmp	r3, r2
 801cb4a:	d04a      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	4a2d      	ldr	r2, [pc, #180]	@ (801cc08 <HAL_DMA_Abort+0x448>)
 801cb52:	4293      	cmp	r3, r2
 801cb54:	d045      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	4a2c      	ldr	r2, [pc, #176]	@ (801cc0c <HAL_DMA_Abort+0x44c>)
 801cb5c:	4293      	cmp	r3, r2
 801cb5e:	d040      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	4a2a      	ldr	r2, [pc, #168]	@ (801cc10 <HAL_DMA_Abort+0x450>)
 801cb66:	4293      	cmp	r3, r2
 801cb68:	d03b      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	4a29      	ldr	r2, [pc, #164]	@ (801cc14 <HAL_DMA_Abort+0x454>)
 801cb70:	4293      	cmp	r3, r2
 801cb72:	d036      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	4a27      	ldr	r2, [pc, #156]	@ (801cc18 <HAL_DMA_Abort+0x458>)
 801cb7a:	4293      	cmp	r3, r2
 801cb7c:	d031      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	4a26      	ldr	r2, [pc, #152]	@ (801cc1c <HAL_DMA_Abort+0x45c>)
 801cb84:	4293      	cmp	r3, r2
 801cb86:	d02c      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	4a24      	ldr	r2, [pc, #144]	@ (801cc20 <HAL_DMA_Abort+0x460>)
 801cb8e:	4293      	cmp	r3, r2
 801cb90:	d027      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	4a23      	ldr	r2, [pc, #140]	@ (801cc24 <HAL_DMA_Abort+0x464>)
 801cb98:	4293      	cmp	r3, r2
 801cb9a:	d022      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	4a21      	ldr	r2, [pc, #132]	@ (801cc28 <HAL_DMA_Abort+0x468>)
 801cba2:	4293      	cmp	r3, r2
 801cba4:	d01d      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	4a20      	ldr	r2, [pc, #128]	@ (801cc2c <HAL_DMA_Abort+0x46c>)
 801cbac:	4293      	cmp	r3, r2
 801cbae:	d018      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	4a1e      	ldr	r2, [pc, #120]	@ (801cc30 <HAL_DMA_Abort+0x470>)
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	d013      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	4a1d      	ldr	r2, [pc, #116]	@ (801cc34 <HAL_DMA_Abort+0x474>)
 801cbc0:	4293      	cmp	r3, r2
 801cbc2:	d00e      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	4a1b      	ldr	r2, [pc, #108]	@ (801cc38 <HAL_DMA_Abort+0x478>)
 801cbca:	4293      	cmp	r3, r2
 801cbcc:	d009      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	4a1a      	ldr	r2, [pc, #104]	@ (801cc3c <HAL_DMA_Abort+0x47c>)
 801cbd4:	4293      	cmp	r3, r2
 801cbd6:	d004      	beq.n	801cbe2 <HAL_DMA_Abort+0x422>
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	4a18      	ldr	r2, [pc, #96]	@ (801cc40 <HAL_DMA_Abort+0x480>)
 801cbde:	4293      	cmp	r3, r2
 801cbe0:	d101      	bne.n	801cbe6 <HAL_DMA_Abort+0x426>
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	e000      	b.n	801cbe8 <HAL_DMA_Abort+0x428>
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d02b      	beq.n	801cc44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cbf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cbf6:	f003 031f 	and.w	r3, r3, #31
 801cbfa:	223f      	movs	r2, #63	@ 0x3f
 801cbfc:	409a      	lsls	r2, r3
 801cbfe:	68bb      	ldr	r3, [r7, #8]
 801cc00:	609a      	str	r2, [r3, #8]
 801cc02:	e02a      	b.n	801cc5a <HAL_DMA_Abort+0x49a>
 801cc04:	40020010 	.word	0x40020010
 801cc08:	40020028 	.word	0x40020028
 801cc0c:	40020040 	.word	0x40020040
 801cc10:	40020058 	.word	0x40020058
 801cc14:	40020070 	.word	0x40020070
 801cc18:	40020088 	.word	0x40020088
 801cc1c:	400200a0 	.word	0x400200a0
 801cc20:	400200b8 	.word	0x400200b8
 801cc24:	40020410 	.word	0x40020410
 801cc28:	40020428 	.word	0x40020428
 801cc2c:	40020440 	.word	0x40020440
 801cc30:	40020458 	.word	0x40020458
 801cc34:	40020470 	.word	0x40020470
 801cc38:	40020488 	.word	0x40020488
 801cc3c:	400204a0 	.word	0x400204a0
 801cc40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cc4e:	f003 031f 	and.w	r3, r3, #31
 801cc52:	2201      	movs	r2, #1
 801cc54:	409a      	lsls	r2, r3
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	4a4f      	ldr	r2, [pc, #316]	@ (801cd9c <HAL_DMA_Abort+0x5dc>)
 801cc60:	4293      	cmp	r3, r2
 801cc62:	d072      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	4a4d      	ldr	r2, [pc, #308]	@ (801cda0 <HAL_DMA_Abort+0x5e0>)
 801cc6a:	4293      	cmp	r3, r2
 801cc6c:	d06d      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	4a4c      	ldr	r2, [pc, #304]	@ (801cda4 <HAL_DMA_Abort+0x5e4>)
 801cc74:	4293      	cmp	r3, r2
 801cc76:	d068      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	4a4a      	ldr	r2, [pc, #296]	@ (801cda8 <HAL_DMA_Abort+0x5e8>)
 801cc7e:	4293      	cmp	r3, r2
 801cc80:	d063      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	4a49      	ldr	r2, [pc, #292]	@ (801cdac <HAL_DMA_Abort+0x5ec>)
 801cc88:	4293      	cmp	r3, r2
 801cc8a:	d05e      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	4a47      	ldr	r2, [pc, #284]	@ (801cdb0 <HAL_DMA_Abort+0x5f0>)
 801cc92:	4293      	cmp	r3, r2
 801cc94:	d059      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	4a46      	ldr	r2, [pc, #280]	@ (801cdb4 <HAL_DMA_Abort+0x5f4>)
 801cc9c:	4293      	cmp	r3, r2
 801cc9e:	d054      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	4a44      	ldr	r2, [pc, #272]	@ (801cdb8 <HAL_DMA_Abort+0x5f8>)
 801cca6:	4293      	cmp	r3, r2
 801cca8:	d04f      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	4a43      	ldr	r2, [pc, #268]	@ (801cdbc <HAL_DMA_Abort+0x5fc>)
 801ccb0:	4293      	cmp	r3, r2
 801ccb2:	d04a      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	4a41      	ldr	r2, [pc, #260]	@ (801cdc0 <HAL_DMA_Abort+0x600>)
 801ccba:	4293      	cmp	r3, r2
 801ccbc:	d045      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	4a40      	ldr	r2, [pc, #256]	@ (801cdc4 <HAL_DMA_Abort+0x604>)
 801ccc4:	4293      	cmp	r3, r2
 801ccc6:	d040      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	4a3e      	ldr	r2, [pc, #248]	@ (801cdc8 <HAL_DMA_Abort+0x608>)
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d03b      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a3d      	ldr	r2, [pc, #244]	@ (801cdcc <HAL_DMA_Abort+0x60c>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d036      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	4a3b      	ldr	r2, [pc, #236]	@ (801cdd0 <HAL_DMA_Abort+0x610>)
 801cce2:	4293      	cmp	r3, r2
 801cce4:	d031      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	4a3a      	ldr	r2, [pc, #232]	@ (801cdd4 <HAL_DMA_Abort+0x614>)
 801ccec:	4293      	cmp	r3, r2
 801ccee:	d02c      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	4a38      	ldr	r2, [pc, #224]	@ (801cdd8 <HAL_DMA_Abort+0x618>)
 801ccf6:	4293      	cmp	r3, r2
 801ccf8:	d027      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	4a37      	ldr	r2, [pc, #220]	@ (801cddc <HAL_DMA_Abort+0x61c>)
 801cd00:	4293      	cmp	r3, r2
 801cd02:	d022      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4a35      	ldr	r2, [pc, #212]	@ (801cde0 <HAL_DMA_Abort+0x620>)
 801cd0a:	4293      	cmp	r3, r2
 801cd0c:	d01d      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	4a34      	ldr	r2, [pc, #208]	@ (801cde4 <HAL_DMA_Abort+0x624>)
 801cd14:	4293      	cmp	r3, r2
 801cd16:	d018      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	4a32      	ldr	r2, [pc, #200]	@ (801cde8 <HAL_DMA_Abort+0x628>)
 801cd1e:	4293      	cmp	r3, r2
 801cd20:	d013      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	4a31      	ldr	r2, [pc, #196]	@ (801cdec <HAL_DMA_Abort+0x62c>)
 801cd28:	4293      	cmp	r3, r2
 801cd2a:	d00e      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	4a2f      	ldr	r2, [pc, #188]	@ (801cdf0 <HAL_DMA_Abort+0x630>)
 801cd32:	4293      	cmp	r3, r2
 801cd34:	d009      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	4a2e      	ldr	r2, [pc, #184]	@ (801cdf4 <HAL_DMA_Abort+0x634>)
 801cd3c:	4293      	cmp	r3, r2
 801cd3e:	d004      	beq.n	801cd4a <HAL_DMA_Abort+0x58a>
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	4a2c      	ldr	r2, [pc, #176]	@ (801cdf8 <HAL_DMA_Abort+0x638>)
 801cd46:	4293      	cmp	r3, r2
 801cd48:	d101      	bne.n	801cd4e <HAL_DMA_Abort+0x58e>
 801cd4a:	2301      	movs	r3, #1
 801cd4c:	e000      	b.n	801cd50 <HAL_DMA_Abort+0x590>
 801cd4e:	2300      	movs	r3, #0
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d015      	beq.n	801cd80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cd58:	687a      	ldr	r2, [r7, #4]
 801cd5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801cd5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d00c      	beq.n	801cd80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cd6a:	681a      	ldr	r2, [r3, #0]
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cd70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cd74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd7a:	687a      	ldr	r2, [r7, #4]
 801cd7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801cd7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	2201      	movs	r2, #1
 801cd84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801cd90:	2300      	movs	r3, #0
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3718      	adds	r7, #24
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	40020010 	.word	0x40020010
 801cda0:	40020028 	.word	0x40020028
 801cda4:	40020040 	.word	0x40020040
 801cda8:	40020058 	.word	0x40020058
 801cdac:	40020070 	.word	0x40020070
 801cdb0:	40020088 	.word	0x40020088
 801cdb4:	400200a0 	.word	0x400200a0
 801cdb8:	400200b8 	.word	0x400200b8
 801cdbc:	40020410 	.word	0x40020410
 801cdc0:	40020428 	.word	0x40020428
 801cdc4:	40020440 	.word	0x40020440
 801cdc8:	40020458 	.word	0x40020458
 801cdcc:	40020470 	.word	0x40020470
 801cdd0:	40020488 	.word	0x40020488
 801cdd4:	400204a0 	.word	0x400204a0
 801cdd8:	400204b8 	.word	0x400204b8
 801cddc:	58025408 	.word	0x58025408
 801cde0:	5802541c 	.word	0x5802541c
 801cde4:	58025430 	.word	0x58025430
 801cde8:	58025444 	.word	0x58025444
 801cdec:	58025458 	.word	0x58025458
 801cdf0:	5802546c 	.word	0x5802546c
 801cdf4:	58025480 	.word	0x58025480
 801cdf8:	58025494 	.word	0x58025494

0801cdfc <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	b08a      	sub	sp, #40	@ 0x28
 801ce00:	af00      	add	r7, sp, #0
 801ce02:	60f8      	str	r0, [r7, #12]
 801ce04:	460b      	mov	r3, r1
 801ce06:	607a      	str	r2, [r7, #4]
 801ce08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 801ce0e:	f7fe fe7d 	bl	801bb0c <HAL_GetTick>
 801ce12:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d101      	bne.n	801ce1e <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801ce1a:	2301      	movs	r3, #1
 801ce1c:	e374      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ce24:	b2db      	uxtb	r3, r3
 801ce26:	2b02      	cmp	r3, #2
 801ce28:	d008      	beq.n	801ce3c <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	2280      	movs	r2, #128	@ 0x80
 801ce2e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	2200      	movs	r2, #0
 801ce34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801ce38:	2301      	movs	r3, #1
 801ce3a:	e365      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	4a7b      	ldr	r2, [pc, #492]	@ (801d030 <HAL_DMA_PollForTransfer+0x234>)
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d04a      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	4a7a      	ldr	r2, [pc, #488]	@ (801d034 <HAL_DMA_PollForTransfer+0x238>)
 801ce4c:	4293      	cmp	r3, r2
 801ce4e:	d045      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4a78      	ldr	r2, [pc, #480]	@ (801d038 <HAL_DMA_PollForTransfer+0x23c>)
 801ce56:	4293      	cmp	r3, r2
 801ce58:	d040      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	4a77      	ldr	r2, [pc, #476]	@ (801d03c <HAL_DMA_PollForTransfer+0x240>)
 801ce60:	4293      	cmp	r3, r2
 801ce62:	d03b      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	4a75      	ldr	r2, [pc, #468]	@ (801d040 <HAL_DMA_PollForTransfer+0x244>)
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d036      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	4a74      	ldr	r2, [pc, #464]	@ (801d044 <HAL_DMA_PollForTransfer+0x248>)
 801ce74:	4293      	cmp	r3, r2
 801ce76:	d031      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	4a72      	ldr	r2, [pc, #456]	@ (801d048 <HAL_DMA_PollForTransfer+0x24c>)
 801ce7e:	4293      	cmp	r3, r2
 801ce80:	d02c      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	4a71      	ldr	r2, [pc, #452]	@ (801d04c <HAL_DMA_PollForTransfer+0x250>)
 801ce88:	4293      	cmp	r3, r2
 801ce8a:	d027      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	4a6f      	ldr	r2, [pc, #444]	@ (801d050 <HAL_DMA_PollForTransfer+0x254>)
 801ce92:	4293      	cmp	r3, r2
 801ce94:	d022      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	4a6e      	ldr	r2, [pc, #440]	@ (801d054 <HAL_DMA_PollForTransfer+0x258>)
 801ce9c:	4293      	cmp	r3, r2
 801ce9e:	d01d      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801cea0:	68fb      	ldr	r3, [r7, #12]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	4a6c      	ldr	r2, [pc, #432]	@ (801d058 <HAL_DMA_PollForTransfer+0x25c>)
 801cea6:	4293      	cmp	r3, r2
 801cea8:	d018      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	4a6b      	ldr	r2, [pc, #428]	@ (801d05c <HAL_DMA_PollForTransfer+0x260>)
 801ceb0:	4293      	cmp	r3, r2
 801ceb2:	d013      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	4a69      	ldr	r2, [pc, #420]	@ (801d060 <HAL_DMA_PollForTransfer+0x264>)
 801ceba:	4293      	cmp	r3, r2
 801cebc:	d00e      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	4a68      	ldr	r2, [pc, #416]	@ (801d064 <HAL_DMA_PollForTransfer+0x268>)
 801cec4:	4293      	cmp	r3, r2
 801cec6:	d009      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801cec8:	68fb      	ldr	r3, [r7, #12]
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	4a66      	ldr	r2, [pc, #408]	@ (801d068 <HAL_DMA_PollForTransfer+0x26c>)
 801cece:	4293      	cmp	r3, r2
 801ced0:	d004      	beq.n	801cedc <HAL_DMA_PollForTransfer+0xe0>
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	4a65      	ldr	r2, [pc, #404]	@ (801d06c <HAL_DMA_PollForTransfer+0x270>)
 801ced8:	4293      	cmp	r3, r2
 801ceda:	d101      	bne.n	801cee0 <HAL_DMA_PollForTransfer+0xe4>
 801cedc:	2301      	movs	r3, #1
 801cede:	e000      	b.n	801cee2 <HAL_DMA_PollForTransfer+0xe6>
 801cee0:	2300      	movs	r3, #0
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d028      	beq.n	801cf38 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d005      	beq.n	801cf00 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cefa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801cefc:	2301      	movs	r3, #1
 801cefe:	e303      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801cf00:	7afb      	ldrb	r3, [r7, #11]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d108      	bne.n	801cf18 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf0a:	f003 031f 	and.w	r3, r3, #31
 801cf0e:	2220      	movs	r2, #32
 801cf10:	fa02 f303 	lsl.w	r3, r2, r3
 801cf14:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf16:	e007      	b.n	801cf28 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf1c:	f003 031f 	and.w	r3, r3, #31
 801cf20:	2210      	movs	r2, #16
 801cf22:	fa02 f303 	lsl.w	r3, r2, r3
 801cf26:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf2c:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf32:	3308      	adds	r3, #8
 801cf34:	61fb      	str	r3, [r7, #28]
 801cf36:	e1d5      	b.n	801d2e4 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	f003 0320 	and.w	r3, r3, #32
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d005      	beq.n	801cf52 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf4c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801cf4e:	2301      	movs	r3, #1
 801cf50:	e2da      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801cf52:	7afb      	ldrb	r3, [r7, #11]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d108      	bne.n	801cf6a <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf5c:	f003 031f 	and.w	r3, r3, #31
 801cf60:	2202      	movs	r2, #2
 801cf62:	fa02 f303 	lsl.w	r3, r2, r3
 801cf66:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf68:	e007      	b.n	801cf7a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf6e:	f003 031f 	and.w	r3, r3, #31
 801cf72:	2204      	movs	r2, #4
 801cf74:	fa02 f303 	lsl.w	r3, r2, r3
 801cf78:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf7e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf84:	3304      	adds	r3, #4
 801cf86:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801cf88:	e1ac      	b.n	801d2e4 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	4a28      	ldr	r2, [pc, #160]	@ (801d030 <HAL_DMA_PollForTransfer+0x234>)
 801cf90:	4293      	cmp	r3, r2
 801cf92:	d04a      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	4a26      	ldr	r2, [pc, #152]	@ (801d034 <HAL_DMA_PollForTransfer+0x238>)
 801cf9a:	4293      	cmp	r3, r2
 801cf9c:	d045      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	4a25      	ldr	r2, [pc, #148]	@ (801d038 <HAL_DMA_PollForTransfer+0x23c>)
 801cfa4:	4293      	cmp	r3, r2
 801cfa6:	d040      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	4a23      	ldr	r2, [pc, #140]	@ (801d03c <HAL_DMA_PollForTransfer+0x240>)
 801cfae:	4293      	cmp	r3, r2
 801cfb0:	d03b      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	4a22      	ldr	r2, [pc, #136]	@ (801d040 <HAL_DMA_PollForTransfer+0x244>)
 801cfb8:	4293      	cmp	r3, r2
 801cfba:	d036      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	4a20      	ldr	r2, [pc, #128]	@ (801d044 <HAL_DMA_PollForTransfer+0x248>)
 801cfc2:	4293      	cmp	r3, r2
 801cfc4:	d031      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	4a1f      	ldr	r2, [pc, #124]	@ (801d048 <HAL_DMA_PollForTransfer+0x24c>)
 801cfcc:	4293      	cmp	r3, r2
 801cfce:	d02c      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	4a1d      	ldr	r2, [pc, #116]	@ (801d04c <HAL_DMA_PollForTransfer+0x250>)
 801cfd6:	4293      	cmp	r3, r2
 801cfd8:	d027      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	4a1c      	ldr	r2, [pc, #112]	@ (801d050 <HAL_DMA_PollForTransfer+0x254>)
 801cfe0:	4293      	cmp	r3, r2
 801cfe2:	d022      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	4a1a      	ldr	r2, [pc, #104]	@ (801d054 <HAL_DMA_PollForTransfer+0x258>)
 801cfea:	4293      	cmp	r3, r2
 801cfec:	d01d      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	4a19      	ldr	r2, [pc, #100]	@ (801d058 <HAL_DMA_PollForTransfer+0x25c>)
 801cff4:	4293      	cmp	r3, r2
 801cff6:	d018      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	4a17      	ldr	r2, [pc, #92]	@ (801d05c <HAL_DMA_PollForTransfer+0x260>)
 801cffe:	4293      	cmp	r3, r2
 801d000:	d013      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	4a16      	ldr	r2, [pc, #88]	@ (801d060 <HAL_DMA_PollForTransfer+0x264>)
 801d008:	4293      	cmp	r3, r2
 801d00a:	d00e      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	4a14      	ldr	r2, [pc, #80]	@ (801d064 <HAL_DMA_PollForTransfer+0x268>)
 801d012:	4293      	cmp	r3, r2
 801d014:	d009      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	4a13      	ldr	r2, [pc, #76]	@ (801d068 <HAL_DMA_PollForTransfer+0x26c>)
 801d01c:	4293      	cmp	r3, r2
 801d01e:	d004      	beq.n	801d02a <HAL_DMA_PollForTransfer+0x22e>
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	4a11      	ldr	r2, [pc, #68]	@ (801d06c <HAL_DMA_PollForTransfer+0x270>)
 801d026:	4293      	cmp	r3, r2
 801d028:	d122      	bne.n	801d070 <HAL_DMA_PollForTransfer+0x274>
 801d02a:	2301      	movs	r3, #1
 801d02c:	e021      	b.n	801d072 <HAL_DMA_PollForTransfer+0x276>
 801d02e:	bf00      	nop
 801d030:	40020010 	.word	0x40020010
 801d034:	40020028 	.word	0x40020028
 801d038:	40020040 	.word	0x40020040
 801d03c:	40020058 	.word	0x40020058
 801d040:	40020070 	.word	0x40020070
 801d044:	40020088 	.word	0x40020088
 801d048:	400200a0 	.word	0x400200a0
 801d04c:	400200b8 	.word	0x400200b8
 801d050:	40020410 	.word	0x40020410
 801d054:	40020428 	.word	0x40020428
 801d058:	40020440 	.word	0x40020440
 801d05c:	40020458 	.word	0x40020458
 801d060:	40020470 	.word	0x40020470
 801d064:	40020488 	.word	0x40020488
 801d068:	400204a0 	.word	0x400204a0
 801d06c:	400204b8 	.word	0x400204b8
 801d070:	2300      	movs	r3, #0
 801d072:	2b00      	cmp	r3, #0
 801d074:	d057      	beq.n	801d126 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d076:	6a3b      	ldr	r3, [r7, #32]
 801d078:	681a      	ldr	r2, [r3, #0]
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d07e:	f003 031f 	and.w	r3, r3, #31
 801d082:	fa22 f303 	lsr.w	r3, r2, r3
 801d086:	f003 0301 	and.w	r3, r3, #1
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d00d      	beq.n	801d0aa <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d092:	f043 0202 	orr.w	r2, r3, #2
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d09e:	f003 031f 	and.w	r3, r3, #31
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	409a      	lsls	r2, r3
 801d0a6:	69fb      	ldr	r3, [r7, #28]
 801d0a8:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d0aa:	6a3b      	ldr	r3, [r7, #32]
 801d0ac:	681a      	ldr	r2, [r3, #0]
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0b2:	f003 031f 	and.w	r3, r3, #31
 801d0b6:	2104      	movs	r1, #4
 801d0b8:	fa01 f303 	lsl.w	r3, r1, r3
 801d0bc:	4013      	ands	r3, r2
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d00d      	beq.n	801d0de <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d0c6:	f043 0204 	orr.w	r2, r3, #4
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0d2:	f003 031f 	and.w	r3, r3, #31
 801d0d6:	2204      	movs	r2, #4
 801d0d8:	409a      	lsls	r2, r3
 801d0da:	69fb      	ldr	r3, [r7, #28]
 801d0dc:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d0de:	6a3b      	ldr	r3, [r7, #32]
 801d0e0:	681a      	ldr	r2, [r3, #0]
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0e6:	f003 031f 	and.w	r3, r3, #31
 801d0ea:	2108      	movs	r1, #8
 801d0ec:	fa01 f303 	lsl.w	r3, r1, r3
 801d0f0:	4013      	ands	r3, r2
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d038      	beq.n	801d168 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d0fa:	f043 0201 	orr.w	r2, r3, #1
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d106:	f003 031f 	and.w	r3, r3, #31
 801d10a:	2208      	movs	r2, #8
 801d10c:	409a      	lsls	r2, r3
 801d10e:	69fb      	ldr	r3, [r7, #28]
 801d110:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	2201      	movs	r2, #1
 801d116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	2200      	movs	r2, #0
 801d11e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d122:	2301      	movs	r3, #1
 801d124:	e1f0      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d126:	6a3b      	ldr	r3, [r7, #32]
 801d128:	681a      	ldr	r2, [r3, #0]
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d12e:	f003 031f 	and.w	r3, r3, #31
 801d132:	2108      	movs	r1, #8
 801d134:	fa01 f303 	lsl.w	r3, r1, r3
 801d138:	4013      	ands	r3, r2
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d014      	beq.n	801d168 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d142:	f003 031f 	and.w	r3, r3, #31
 801d146:	2201      	movs	r2, #1
 801d148:	409a      	lsls	r2, r3
 801d14a:	6a3b      	ldr	r3, [r7, #32]
 801d14c:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	2201      	movs	r2, #1
 801d152:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d154:	68fb      	ldr	r3, [r7, #12]
 801d156:	2201      	movs	r2, #1
 801d158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	2200      	movs	r2, #0
 801d160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d164:	2301      	movs	r3, #1
 801d166:	e1cf      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d16e:	d012      	beq.n	801d196 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 801d170:	f7fe fccc 	bl	801bb0c <HAL_GetTick>
 801d174:	4602      	mov	r2, r0
 801d176:	697b      	ldr	r3, [r7, #20]
 801d178:	1ad3      	subs	r3, r2, r3
 801d17a:	687a      	ldr	r2, [r7, #4]
 801d17c:	429a      	cmp	r2, r3
 801d17e:	d302      	bcc.n	801d186 <HAL_DMA_PollForTransfer+0x38a>
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	2b00      	cmp	r3, #0
 801d184:	d107      	bne.n	801d196 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	2220      	movs	r2, #32
 801d18a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801d18c:	68f8      	ldr	r0, [r7, #12]
 801d18e:	f7ff fb17 	bl	801c7c0 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 801d192:	2301      	movs	r3, #1
 801d194:	e1b8      	b.n	801d508 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	4a81      	ldr	r2, [pc, #516]	@ (801d3a0 <HAL_DMA_PollForTransfer+0x5a4>)
 801d19c:	4293      	cmp	r3, r2
 801d19e:	d072      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	4a7f      	ldr	r2, [pc, #508]	@ (801d3a4 <HAL_DMA_PollForTransfer+0x5a8>)
 801d1a6:	4293      	cmp	r3, r2
 801d1a8:	d06d      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	4a7e      	ldr	r2, [pc, #504]	@ (801d3a8 <HAL_DMA_PollForTransfer+0x5ac>)
 801d1b0:	4293      	cmp	r3, r2
 801d1b2:	d068      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	4a7c      	ldr	r2, [pc, #496]	@ (801d3ac <HAL_DMA_PollForTransfer+0x5b0>)
 801d1ba:	4293      	cmp	r3, r2
 801d1bc:	d063      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	4a7b      	ldr	r2, [pc, #492]	@ (801d3b0 <HAL_DMA_PollForTransfer+0x5b4>)
 801d1c4:	4293      	cmp	r3, r2
 801d1c6:	d05e      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	4a79      	ldr	r2, [pc, #484]	@ (801d3b4 <HAL_DMA_PollForTransfer+0x5b8>)
 801d1ce:	4293      	cmp	r3, r2
 801d1d0:	d059      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	4a78      	ldr	r2, [pc, #480]	@ (801d3b8 <HAL_DMA_PollForTransfer+0x5bc>)
 801d1d8:	4293      	cmp	r3, r2
 801d1da:	d054      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	4a76      	ldr	r2, [pc, #472]	@ (801d3bc <HAL_DMA_PollForTransfer+0x5c0>)
 801d1e2:	4293      	cmp	r3, r2
 801d1e4:	d04f      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	4a75      	ldr	r2, [pc, #468]	@ (801d3c0 <HAL_DMA_PollForTransfer+0x5c4>)
 801d1ec:	4293      	cmp	r3, r2
 801d1ee:	d04a      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	4a73      	ldr	r2, [pc, #460]	@ (801d3c4 <HAL_DMA_PollForTransfer+0x5c8>)
 801d1f6:	4293      	cmp	r3, r2
 801d1f8:	d045      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	4a72      	ldr	r2, [pc, #456]	@ (801d3c8 <HAL_DMA_PollForTransfer+0x5cc>)
 801d200:	4293      	cmp	r3, r2
 801d202:	d040      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4a70      	ldr	r2, [pc, #448]	@ (801d3cc <HAL_DMA_PollForTransfer+0x5d0>)
 801d20a:	4293      	cmp	r3, r2
 801d20c:	d03b      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	4a6f      	ldr	r2, [pc, #444]	@ (801d3d0 <HAL_DMA_PollForTransfer+0x5d4>)
 801d214:	4293      	cmp	r3, r2
 801d216:	d036      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	4a6d      	ldr	r2, [pc, #436]	@ (801d3d4 <HAL_DMA_PollForTransfer+0x5d8>)
 801d21e:	4293      	cmp	r3, r2
 801d220:	d031      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	4a6c      	ldr	r2, [pc, #432]	@ (801d3d8 <HAL_DMA_PollForTransfer+0x5dc>)
 801d228:	4293      	cmp	r3, r2
 801d22a:	d02c      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	4a6a      	ldr	r2, [pc, #424]	@ (801d3dc <HAL_DMA_PollForTransfer+0x5e0>)
 801d232:	4293      	cmp	r3, r2
 801d234:	d027      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	4a69      	ldr	r2, [pc, #420]	@ (801d3e0 <HAL_DMA_PollForTransfer+0x5e4>)
 801d23c:	4293      	cmp	r3, r2
 801d23e:	d022      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	4a67      	ldr	r2, [pc, #412]	@ (801d3e4 <HAL_DMA_PollForTransfer+0x5e8>)
 801d246:	4293      	cmp	r3, r2
 801d248:	d01d      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	4a66      	ldr	r2, [pc, #408]	@ (801d3e8 <HAL_DMA_PollForTransfer+0x5ec>)
 801d250:	4293      	cmp	r3, r2
 801d252:	d018      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	4a64      	ldr	r2, [pc, #400]	@ (801d3ec <HAL_DMA_PollForTransfer+0x5f0>)
 801d25a:	4293      	cmp	r3, r2
 801d25c:	d013      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	4a63      	ldr	r2, [pc, #396]	@ (801d3f0 <HAL_DMA_PollForTransfer+0x5f4>)
 801d264:	4293      	cmp	r3, r2
 801d266:	d00e      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4a61      	ldr	r2, [pc, #388]	@ (801d3f4 <HAL_DMA_PollForTransfer+0x5f8>)
 801d26e:	4293      	cmp	r3, r2
 801d270:	d009      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	4a60      	ldr	r2, [pc, #384]	@ (801d3f8 <HAL_DMA_PollForTransfer+0x5fc>)
 801d278:	4293      	cmp	r3, r2
 801d27a:	d004      	beq.n	801d286 <HAL_DMA_PollForTransfer+0x48a>
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	4a5e      	ldr	r2, [pc, #376]	@ (801d3fc <HAL_DMA_PollForTransfer+0x600>)
 801d282:	4293      	cmp	r3, r2
 801d284:	d101      	bne.n	801d28a <HAL_DMA_PollForTransfer+0x48e>
 801d286:	2301      	movs	r3, #1
 801d288:	e000      	b.n	801d28c <HAL_DMA_PollForTransfer+0x490>
 801d28a:	2300      	movs	r3, #0
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d029      	beq.n	801d2e4 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d294:	2b00      	cmp	r3, #0
 801d296:	d012      	beq.n	801d2be <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 801d298:	68fb      	ldr	r3, [r7, #12]
 801d29a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d29c:	681a      	ldr	r2, [r3, #0]
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2a2:	4013      	ands	r3, r2
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d00a      	beq.n	801d2be <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d2ac:	68fa      	ldr	r2, [r7, #12]
 801d2ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d2b0:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d2b6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d2c2:	681a      	ldr	r2, [r3, #0]
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d2c8:	4013      	ands	r3, r2
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d00a      	beq.n	801d2e4 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d2d2:	68fa      	ldr	r2, [r7, #12]
 801d2d4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d2d6:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801d2d8:	68fb      	ldr	r3, [r7, #12]
 801d2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d2dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d2e4:	6a3b      	ldr	r3, [r7, #32]
 801d2e6:	681a      	ldr	r2, [r3, #0]
 801d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ea:	4013      	ands	r3, r2
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	f43f ae4c 	beq.w	801cf8a <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d2f2:	7afb      	ldrb	r3, [r7, #11]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	f040 80a0 	bne.w	801d43a <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	4a28      	ldr	r2, [pc, #160]	@ (801d3a0 <HAL_DMA_PollForTransfer+0x5a4>)
 801d300:	4293      	cmp	r3, r2
 801d302:	d04a      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	4a26      	ldr	r2, [pc, #152]	@ (801d3a4 <HAL_DMA_PollForTransfer+0x5a8>)
 801d30a:	4293      	cmp	r3, r2
 801d30c:	d045      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	4a25      	ldr	r2, [pc, #148]	@ (801d3a8 <HAL_DMA_PollForTransfer+0x5ac>)
 801d314:	4293      	cmp	r3, r2
 801d316:	d040      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	4a23      	ldr	r2, [pc, #140]	@ (801d3ac <HAL_DMA_PollForTransfer+0x5b0>)
 801d31e:	4293      	cmp	r3, r2
 801d320:	d03b      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	4a22      	ldr	r2, [pc, #136]	@ (801d3b0 <HAL_DMA_PollForTransfer+0x5b4>)
 801d328:	4293      	cmp	r3, r2
 801d32a:	d036      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	681b      	ldr	r3, [r3, #0]
 801d330:	4a20      	ldr	r2, [pc, #128]	@ (801d3b4 <HAL_DMA_PollForTransfer+0x5b8>)
 801d332:	4293      	cmp	r3, r2
 801d334:	d031      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	4a1f      	ldr	r2, [pc, #124]	@ (801d3b8 <HAL_DMA_PollForTransfer+0x5bc>)
 801d33c:	4293      	cmp	r3, r2
 801d33e:	d02c      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	4a1d      	ldr	r2, [pc, #116]	@ (801d3bc <HAL_DMA_PollForTransfer+0x5c0>)
 801d346:	4293      	cmp	r3, r2
 801d348:	d027      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	4a1c      	ldr	r2, [pc, #112]	@ (801d3c0 <HAL_DMA_PollForTransfer+0x5c4>)
 801d350:	4293      	cmp	r3, r2
 801d352:	d022      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	681b      	ldr	r3, [r3, #0]
 801d358:	4a1a      	ldr	r2, [pc, #104]	@ (801d3c4 <HAL_DMA_PollForTransfer+0x5c8>)
 801d35a:	4293      	cmp	r3, r2
 801d35c:	d01d      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	4a19      	ldr	r2, [pc, #100]	@ (801d3c8 <HAL_DMA_PollForTransfer+0x5cc>)
 801d364:	4293      	cmp	r3, r2
 801d366:	d018      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	4a17      	ldr	r2, [pc, #92]	@ (801d3cc <HAL_DMA_PollForTransfer+0x5d0>)
 801d36e:	4293      	cmp	r3, r2
 801d370:	d013      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	4a16      	ldr	r2, [pc, #88]	@ (801d3d0 <HAL_DMA_PollForTransfer+0x5d4>)
 801d378:	4293      	cmp	r3, r2
 801d37a:	d00e      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	4a14      	ldr	r2, [pc, #80]	@ (801d3d4 <HAL_DMA_PollForTransfer+0x5d8>)
 801d382:	4293      	cmp	r3, r2
 801d384:	d009      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	4a13      	ldr	r2, [pc, #76]	@ (801d3d8 <HAL_DMA_PollForTransfer+0x5dc>)
 801d38c:	4293      	cmp	r3, r2
 801d38e:	d004      	beq.n	801d39a <HAL_DMA_PollForTransfer+0x59e>
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4a11      	ldr	r2, [pc, #68]	@ (801d3dc <HAL_DMA_PollForTransfer+0x5e0>)
 801d396:	4293      	cmp	r3, r2
 801d398:	d132      	bne.n	801d400 <HAL_DMA_PollForTransfer+0x604>
 801d39a:	2301      	movs	r3, #1
 801d39c:	e031      	b.n	801d402 <HAL_DMA_PollForTransfer+0x606>
 801d39e:	bf00      	nop
 801d3a0:	40020010 	.word	0x40020010
 801d3a4:	40020028 	.word	0x40020028
 801d3a8:	40020040 	.word	0x40020040
 801d3ac:	40020058 	.word	0x40020058
 801d3b0:	40020070 	.word	0x40020070
 801d3b4:	40020088 	.word	0x40020088
 801d3b8:	400200a0 	.word	0x400200a0
 801d3bc:	400200b8 	.word	0x400200b8
 801d3c0:	40020410 	.word	0x40020410
 801d3c4:	40020428 	.word	0x40020428
 801d3c8:	40020440 	.word	0x40020440
 801d3cc:	40020458 	.word	0x40020458
 801d3d0:	40020470 	.word	0x40020470
 801d3d4:	40020488 	.word	0x40020488
 801d3d8:	400204a0 	.word	0x400204a0
 801d3dc:	400204b8 	.word	0x400204b8
 801d3e0:	58025408 	.word	0x58025408
 801d3e4:	5802541c 	.word	0x5802541c
 801d3e8:	58025430 	.word	0x58025430
 801d3ec:	58025444 	.word	0x58025444
 801d3f0:	58025458 	.word	0x58025458
 801d3f4:	5802546c 	.word	0x5802546c
 801d3f8:	58025480 	.word	0x58025480
 801d3fc:	58025494 	.word	0x58025494
 801d400:	2300      	movs	r3, #0
 801d402:	2b00      	cmp	r3, #0
 801d404:	d008      	beq.n	801d418 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d40a:	f003 031f 	and.w	r3, r3, #31
 801d40e:	2230      	movs	r2, #48	@ 0x30
 801d410:	409a      	lsls	r2, r3
 801d412:	69fb      	ldr	r3, [r7, #28]
 801d414:	601a      	str	r2, [r3, #0]
 801d416:	e007      	b.n	801d428 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d41c:	f003 031f 	and.w	r3, r3, #31
 801d420:	2202      	movs	r2, #2
 801d422:	409a      	lsls	r2, r3
 801d424:	69fb      	ldr	r3, [r7, #28]
 801d426:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	2201      	movs	r2, #1
 801d42c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	2200      	movs	r2, #0
 801d434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801d438:	e065      	b.n	801d506 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	4a34      	ldr	r2, [pc, #208]	@ (801d510 <HAL_DMA_PollForTransfer+0x714>)
 801d440:	4293      	cmp	r3, r2
 801d442:	d04a      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	4a32      	ldr	r2, [pc, #200]	@ (801d514 <HAL_DMA_PollForTransfer+0x718>)
 801d44a:	4293      	cmp	r3, r2
 801d44c:	d045      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	4a31      	ldr	r2, [pc, #196]	@ (801d518 <HAL_DMA_PollForTransfer+0x71c>)
 801d454:	4293      	cmp	r3, r2
 801d456:	d040      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	4a2f      	ldr	r2, [pc, #188]	@ (801d51c <HAL_DMA_PollForTransfer+0x720>)
 801d45e:	4293      	cmp	r3, r2
 801d460:	d03b      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	4a2e      	ldr	r2, [pc, #184]	@ (801d520 <HAL_DMA_PollForTransfer+0x724>)
 801d468:	4293      	cmp	r3, r2
 801d46a:	d036      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	4a2c      	ldr	r2, [pc, #176]	@ (801d524 <HAL_DMA_PollForTransfer+0x728>)
 801d472:	4293      	cmp	r3, r2
 801d474:	d031      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4a2b      	ldr	r2, [pc, #172]	@ (801d528 <HAL_DMA_PollForTransfer+0x72c>)
 801d47c:	4293      	cmp	r3, r2
 801d47e:	d02c      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	4a29      	ldr	r2, [pc, #164]	@ (801d52c <HAL_DMA_PollForTransfer+0x730>)
 801d486:	4293      	cmp	r3, r2
 801d488:	d027      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	4a28      	ldr	r2, [pc, #160]	@ (801d530 <HAL_DMA_PollForTransfer+0x734>)
 801d490:	4293      	cmp	r3, r2
 801d492:	d022      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	4a26      	ldr	r2, [pc, #152]	@ (801d534 <HAL_DMA_PollForTransfer+0x738>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d01d      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	4a25      	ldr	r2, [pc, #148]	@ (801d538 <HAL_DMA_PollForTransfer+0x73c>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d018      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	4a23      	ldr	r2, [pc, #140]	@ (801d53c <HAL_DMA_PollForTransfer+0x740>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d013      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	4a22      	ldr	r2, [pc, #136]	@ (801d540 <HAL_DMA_PollForTransfer+0x744>)
 801d4b8:	4293      	cmp	r3, r2
 801d4ba:	d00e      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	4a20      	ldr	r2, [pc, #128]	@ (801d544 <HAL_DMA_PollForTransfer+0x748>)
 801d4c2:	4293      	cmp	r3, r2
 801d4c4:	d009      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	4a1f      	ldr	r2, [pc, #124]	@ (801d548 <HAL_DMA_PollForTransfer+0x74c>)
 801d4cc:	4293      	cmp	r3, r2
 801d4ce:	d004      	beq.n	801d4da <HAL_DMA_PollForTransfer+0x6de>
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4a1d      	ldr	r2, [pc, #116]	@ (801d54c <HAL_DMA_PollForTransfer+0x750>)
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	d101      	bne.n	801d4de <HAL_DMA_PollForTransfer+0x6e2>
 801d4da:	2301      	movs	r3, #1
 801d4dc:	e000      	b.n	801d4e0 <HAL_DMA_PollForTransfer+0x6e4>
 801d4de:	2300      	movs	r3, #0
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d008      	beq.n	801d4f6 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d4e8:	f003 031f 	and.w	r3, r3, #31
 801d4ec:	2210      	movs	r2, #16
 801d4ee:	409a      	lsls	r2, r3
 801d4f0:	69fb      	ldr	r3, [r7, #28]
 801d4f2:	601a      	str	r2, [r3, #0]
 801d4f4:	e007      	b.n	801d506 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d4fa:	f003 031f 	and.w	r3, r3, #31
 801d4fe:	2204      	movs	r2, #4
 801d500:	409a      	lsls	r2, r3
 801d502:	69fb      	ldr	r3, [r7, #28]
 801d504:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801d506:	7efb      	ldrb	r3, [r7, #27]
}
 801d508:	4618      	mov	r0, r3
 801d50a:	3728      	adds	r7, #40	@ 0x28
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bd80      	pop	{r7, pc}
 801d510:	40020010 	.word	0x40020010
 801d514:	40020028 	.word	0x40020028
 801d518:	40020040 	.word	0x40020040
 801d51c:	40020058 	.word	0x40020058
 801d520:	40020070 	.word	0x40020070
 801d524:	40020088 	.word	0x40020088
 801d528:	400200a0 	.word	0x400200a0
 801d52c:	400200b8 	.word	0x400200b8
 801d530:	40020410 	.word	0x40020410
 801d534:	40020428 	.word	0x40020428
 801d538:	40020440 	.word	0x40020440
 801d53c:	40020458 	.word	0x40020458
 801d540:	40020470 	.word	0x40020470
 801d544:	40020488 	.word	0x40020488
 801d548:	400204a0 	.word	0x400204a0
 801d54c:	400204b8 	.word	0x400204b8

0801d550 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d550:	b480      	push	{r7}
 801d552:	b087      	sub	sp, #28
 801d554:	af00      	add	r7, sp, #0
 801d556:	60f8      	str	r0, [r7, #12]
 801d558:	60b9      	str	r1, [r7, #8]
 801d55a:	607a      	str	r2, [r7, #4]
 801d55c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d562:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d568:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	681b      	ldr	r3, [r3, #0]
 801d56e:	4a7f      	ldr	r2, [pc, #508]	@ (801d76c <DMA_SetConfig+0x21c>)
 801d570:	4293      	cmp	r3, r2
 801d572:	d072      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	4a7d      	ldr	r2, [pc, #500]	@ (801d770 <DMA_SetConfig+0x220>)
 801d57a:	4293      	cmp	r3, r2
 801d57c:	d06d      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	4a7c      	ldr	r2, [pc, #496]	@ (801d774 <DMA_SetConfig+0x224>)
 801d584:	4293      	cmp	r3, r2
 801d586:	d068      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d588:	68fb      	ldr	r3, [r7, #12]
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	4a7a      	ldr	r2, [pc, #488]	@ (801d778 <DMA_SetConfig+0x228>)
 801d58e:	4293      	cmp	r3, r2
 801d590:	d063      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	4a79      	ldr	r2, [pc, #484]	@ (801d77c <DMA_SetConfig+0x22c>)
 801d598:	4293      	cmp	r3, r2
 801d59a:	d05e      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	4a77      	ldr	r2, [pc, #476]	@ (801d780 <DMA_SetConfig+0x230>)
 801d5a2:	4293      	cmp	r3, r2
 801d5a4:	d059      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	4a76      	ldr	r2, [pc, #472]	@ (801d784 <DMA_SetConfig+0x234>)
 801d5ac:	4293      	cmp	r3, r2
 801d5ae:	d054      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	4a74      	ldr	r2, [pc, #464]	@ (801d788 <DMA_SetConfig+0x238>)
 801d5b6:	4293      	cmp	r3, r2
 801d5b8:	d04f      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	4a73      	ldr	r2, [pc, #460]	@ (801d78c <DMA_SetConfig+0x23c>)
 801d5c0:	4293      	cmp	r3, r2
 801d5c2:	d04a      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	4a71      	ldr	r2, [pc, #452]	@ (801d790 <DMA_SetConfig+0x240>)
 801d5ca:	4293      	cmp	r3, r2
 801d5cc:	d045      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	4a70      	ldr	r2, [pc, #448]	@ (801d794 <DMA_SetConfig+0x244>)
 801d5d4:	4293      	cmp	r3, r2
 801d5d6:	d040      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	4a6e      	ldr	r2, [pc, #440]	@ (801d798 <DMA_SetConfig+0x248>)
 801d5de:	4293      	cmp	r3, r2
 801d5e0:	d03b      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	4a6d      	ldr	r2, [pc, #436]	@ (801d79c <DMA_SetConfig+0x24c>)
 801d5e8:	4293      	cmp	r3, r2
 801d5ea:	d036      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	4a6b      	ldr	r2, [pc, #428]	@ (801d7a0 <DMA_SetConfig+0x250>)
 801d5f2:	4293      	cmp	r3, r2
 801d5f4:	d031      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	4a6a      	ldr	r2, [pc, #424]	@ (801d7a4 <DMA_SetConfig+0x254>)
 801d5fc:	4293      	cmp	r3, r2
 801d5fe:	d02c      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	681b      	ldr	r3, [r3, #0]
 801d604:	4a68      	ldr	r2, [pc, #416]	@ (801d7a8 <DMA_SetConfig+0x258>)
 801d606:	4293      	cmp	r3, r2
 801d608:	d027      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	4a67      	ldr	r2, [pc, #412]	@ (801d7ac <DMA_SetConfig+0x25c>)
 801d610:	4293      	cmp	r3, r2
 801d612:	d022      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	4a65      	ldr	r2, [pc, #404]	@ (801d7b0 <DMA_SetConfig+0x260>)
 801d61a:	4293      	cmp	r3, r2
 801d61c:	d01d      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	4a64      	ldr	r2, [pc, #400]	@ (801d7b4 <DMA_SetConfig+0x264>)
 801d624:	4293      	cmp	r3, r2
 801d626:	d018      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	4a62      	ldr	r2, [pc, #392]	@ (801d7b8 <DMA_SetConfig+0x268>)
 801d62e:	4293      	cmp	r3, r2
 801d630:	d013      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	4a61      	ldr	r2, [pc, #388]	@ (801d7bc <DMA_SetConfig+0x26c>)
 801d638:	4293      	cmp	r3, r2
 801d63a:	d00e      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	4a5f      	ldr	r2, [pc, #380]	@ (801d7c0 <DMA_SetConfig+0x270>)
 801d642:	4293      	cmp	r3, r2
 801d644:	d009      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	4a5e      	ldr	r2, [pc, #376]	@ (801d7c4 <DMA_SetConfig+0x274>)
 801d64c:	4293      	cmp	r3, r2
 801d64e:	d004      	beq.n	801d65a <DMA_SetConfig+0x10a>
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	4a5c      	ldr	r2, [pc, #368]	@ (801d7c8 <DMA_SetConfig+0x278>)
 801d656:	4293      	cmp	r3, r2
 801d658:	d101      	bne.n	801d65e <DMA_SetConfig+0x10e>
 801d65a:	2301      	movs	r3, #1
 801d65c:	e000      	b.n	801d660 <DMA_SetConfig+0x110>
 801d65e:	2300      	movs	r3, #0
 801d660:	2b00      	cmp	r3, #0
 801d662:	d00d      	beq.n	801d680 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d668:	68fa      	ldr	r2, [r7, #12]
 801d66a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d66c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d672:	2b00      	cmp	r3, #0
 801d674:	d004      	beq.n	801d680 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d67a:	68fa      	ldr	r2, [r7, #12]
 801d67c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d67e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	4a39      	ldr	r2, [pc, #228]	@ (801d76c <DMA_SetConfig+0x21c>)
 801d686:	4293      	cmp	r3, r2
 801d688:	d04a      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	4a38      	ldr	r2, [pc, #224]	@ (801d770 <DMA_SetConfig+0x220>)
 801d690:	4293      	cmp	r3, r2
 801d692:	d045      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	4a36      	ldr	r2, [pc, #216]	@ (801d774 <DMA_SetConfig+0x224>)
 801d69a:	4293      	cmp	r3, r2
 801d69c:	d040      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	4a35      	ldr	r2, [pc, #212]	@ (801d778 <DMA_SetConfig+0x228>)
 801d6a4:	4293      	cmp	r3, r2
 801d6a6:	d03b      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	4a33      	ldr	r2, [pc, #204]	@ (801d77c <DMA_SetConfig+0x22c>)
 801d6ae:	4293      	cmp	r3, r2
 801d6b0:	d036      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	4a32      	ldr	r2, [pc, #200]	@ (801d780 <DMA_SetConfig+0x230>)
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	d031      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	4a30      	ldr	r2, [pc, #192]	@ (801d784 <DMA_SetConfig+0x234>)
 801d6c2:	4293      	cmp	r3, r2
 801d6c4:	d02c      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6c6:	68fb      	ldr	r3, [r7, #12]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	4a2f      	ldr	r2, [pc, #188]	@ (801d788 <DMA_SetConfig+0x238>)
 801d6cc:	4293      	cmp	r3, r2
 801d6ce:	d027      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	4a2d      	ldr	r2, [pc, #180]	@ (801d78c <DMA_SetConfig+0x23c>)
 801d6d6:	4293      	cmp	r3, r2
 801d6d8:	d022      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	4a2c      	ldr	r2, [pc, #176]	@ (801d790 <DMA_SetConfig+0x240>)
 801d6e0:	4293      	cmp	r3, r2
 801d6e2:	d01d      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	4a2a      	ldr	r2, [pc, #168]	@ (801d794 <DMA_SetConfig+0x244>)
 801d6ea:	4293      	cmp	r3, r2
 801d6ec:	d018      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	4a29      	ldr	r2, [pc, #164]	@ (801d798 <DMA_SetConfig+0x248>)
 801d6f4:	4293      	cmp	r3, r2
 801d6f6:	d013      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	4a27      	ldr	r2, [pc, #156]	@ (801d79c <DMA_SetConfig+0x24c>)
 801d6fe:	4293      	cmp	r3, r2
 801d700:	d00e      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	4a26      	ldr	r2, [pc, #152]	@ (801d7a0 <DMA_SetConfig+0x250>)
 801d708:	4293      	cmp	r3, r2
 801d70a:	d009      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	4a24      	ldr	r2, [pc, #144]	@ (801d7a4 <DMA_SetConfig+0x254>)
 801d712:	4293      	cmp	r3, r2
 801d714:	d004      	beq.n	801d720 <DMA_SetConfig+0x1d0>
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	4a23      	ldr	r2, [pc, #140]	@ (801d7a8 <DMA_SetConfig+0x258>)
 801d71c:	4293      	cmp	r3, r2
 801d71e:	d101      	bne.n	801d724 <DMA_SetConfig+0x1d4>
 801d720:	2301      	movs	r3, #1
 801d722:	e000      	b.n	801d726 <DMA_SetConfig+0x1d6>
 801d724:	2300      	movs	r3, #0
 801d726:	2b00      	cmp	r3, #0
 801d728:	d059      	beq.n	801d7de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d72e:	f003 031f 	and.w	r3, r3, #31
 801d732:	223f      	movs	r2, #63	@ 0x3f
 801d734:	409a      	lsls	r2, r3
 801d736:	697b      	ldr	r3, [r7, #20]
 801d738:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	681a      	ldr	r2, [r3, #0]
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801d748:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	683a      	ldr	r2, [r7, #0]
 801d750:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	689b      	ldr	r3, [r3, #8]
 801d756:	2b40      	cmp	r3, #64	@ 0x40
 801d758:	d138      	bne.n	801d7cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	687a      	ldr	r2, [r7, #4]
 801d760:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	68ba      	ldr	r2, [r7, #8]
 801d768:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801d76a:	e086      	b.n	801d87a <DMA_SetConfig+0x32a>
 801d76c:	40020010 	.word	0x40020010
 801d770:	40020028 	.word	0x40020028
 801d774:	40020040 	.word	0x40020040
 801d778:	40020058 	.word	0x40020058
 801d77c:	40020070 	.word	0x40020070
 801d780:	40020088 	.word	0x40020088
 801d784:	400200a0 	.word	0x400200a0
 801d788:	400200b8 	.word	0x400200b8
 801d78c:	40020410 	.word	0x40020410
 801d790:	40020428 	.word	0x40020428
 801d794:	40020440 	.word	0x40020440
 801d798:	40020458 	.word	0x40020458
 801d79c:	40020470 	.word	0x40020470
 801d7a0:	40020488 	.word	0x40020488
 801d7a4:	400204a0 	.word	0x400204a0
 801d7a8:	400204b8 	.word	0x400204b8
 801d7ac:	58025408 	.word	0x58025408
 801d7b0:	5802541c 	.word	0x5802541c
 801d7b4:	58025430 	.word	0x58025430
 801d7b8:	58025444 	.word	0x58025444
 801d7bc:	58025458 	.word	0x58025458
 801d7c0:	5802546c 	.word	0x5802546c
 801d7c4:	58025480 	.word	0x58025480
 801d7c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	68ba      	ldr	r2, [r7, #8]
 801d7d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	687a      	ldr	r2, [r7, #4]
 801d7da:	60da      	str	r2, [r3, #12]
}
 801d7dc:	e04d      	b.n	801d87a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	4a29      	ldr	r2, [pc, #164]	@ (801d888 <DMA_SetConfig+0x338>)
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	d022      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	4a27      	ldr	r2, [pc, #156]	@ (801d88c <DMA_SetConfig+0x33c>)
 801d7ee:	4293      	cmp	r3, r2
 801d7f0:	d01d      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	4a26      	ldr	r2, [pc, #152]	@ (801d890 <DMA_SetConfig+0x340>)
 801d7f8:	4293      	cmp	r3, r2
 801d7fa:	d018      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	4a24      	ldr	r2, [pc, #144]	@ (801d894 <DMA_SetConfig+0x344>)
 801d802:	4293      	cmp	r3, r2
 801d804:	d013      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	4a23      	ldr	r2, [pc, #140]	@ (801d898 <DMA_SetConfig+0x348>)
 801d80c:	4293      	cmp	r3, r2
 801d80e:	d00e      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	4a21      	ldr	r2, [pc, #132]	@ (801d89c <DMA_SetConfig+0x34c>)
 801d816:	4293      	cmp	r3, r2
 801d818:	d009      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	4a20      	ldr	r2, [pc, #128]	@ (801d8a0 <DMA_SetConfig+0x350>)
 801d820:	4293      	cmp	r3, r2
 801d822:	d004      	beq.n	801d82e <DMA_SetConfig+0x2de>
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	4a1e      	ldr	r2, [pc, #120]	@ (801d8a4 <DMA_SetConfig+0x354>)
 801d82a:	4293      	cmp	r3, r2
 801d82c:	d101      	bne.n	801d832 <DMA_SetConfig+0x2e2>
 801d82e:	2301      	movs	r3, #1
 801d830:	e000      	b.n	801d834 <DMA_SetConfig+0x2e4>
 801d832:	2300      	movs	r3, #0
 801d834:	2b00      	cmp	r3, #0
 801d836:	d020      	beq.n	801d87a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d83c:	f003 031f 	and.w	r3, r3, #31
 801d840:	2201      	movs	r2, #1
 801d842:	409a      	lsls	r2, r3
 801d844:	693b      	ldr	r3, [r7, #16]
 801d846:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	683a      	ldr	r2, [r7, #0]
 801d84e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	689b      	ldr	r3, [r3, #8]
 801d854:	2b40      	cmp	r3, #64	@ 0x40
 801d856:	d108      	bne.n	801d86a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	687a      	ldr	r2, [r7, #4]
 801d85e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	68ba      	ldr	r2, [r7, #8]
 801d866:	60da      	str	r2, [r3, #12]
}
 801d868:	e007      	b.n	801d87a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	68ba      	ldr	r2, [r7, #8]
 801d870:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	60da      	str	r2, [r3, #12]
}
 801d87a:	bf00      	nop
 801d87c:	371c      	adds	r7, #28
 801d87e:	46bd      	mov	sp, r7
 801d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d884:	4770      	bx	lr
 801d886:	bf00      	nop
 801d888:	58025408 	.word	0x58025408
 801d88c:	5802541c 	.word	0x5802541c
 801d890:	58025430 	.word	0x58025430
 801d894:	58025444 	.word	0x58025444
 801d898:	58025458 	.word	0x58025458
 801d89c:	5802546c 	.word	0x5802546c
 801d8a0:	58025480 	.word	0x58025480
 801d8a4:	58025494 	.word	0x58025494

0801d8a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801d8a8:	b480      	push	{r7}
 801d8aa:	b085      	sub	sp, #20
 801d8ac:	af00      	add	r7, sp, #0
 801d8ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	4a42      	ldr	r2, [pc, #264]	@ (801d9c0 <DMA_CalcBaseAndBitshift+0x118>)
 801d8b6:	4293      	cmp	r3, r2
 801d8b8:	d04a      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	4a41      	ldr	r2, [pc, #260]	@ (801d9c4 <DMA_CalcBaseAndBitshift+0x11c>)
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	d045      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	4a3f      	ldr	r2, [pc, #252]	@ (801d9c8 <DMA_CalcBaseAndBitshift+0x120>)
 801d8ca:	4293      	cmp	r3, r2
 801d8cc:	d040      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	4a3e      	ldr	r2, [pc, #248]	@ (801d9cc <DMA_CalcBaseAndBitshift+0x124>)
 801d8d4:	4293      	cmp	r3, r2
 801d8d6:	d03b      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	4a3c      	ldr	r2, [pc, #240]	@ (801d9d0 <DMA_CalcBaseAndBitshift+0x128>)
 801d8de:	4293      	cmp	r3, r2
 801d8e0:	d036      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	4a3b      	ldr	r2, [pc, #236]	@ (801d9d4 <DMA_CalcBaseAndBitshift+0x12c>)
 801d8e8:	4293      	cmp	r3, r2
 801d8ea:	d031      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	4a39      	ldr	r2, [pc, #228]	@ (801d9d8 <DMA_CalcBaseAndBitshift+0x130>)
 801d8f2:	4293      	cmp	r3, r2
 801d8f4:	d02c      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	4a38      	ldr	r2, [pc, #224]	@ (801d9dc <DMA_CalcBaseAndBitshift+0x134>)
 801d8fc:	4293      	cmp	r3, r2
 801d8fe:	d027      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	4a36      	ldr	r2, [pc, #216]	@ (801d9e0 <DMA_CalcBaseAndBitshift+0x138>)
 801d906:	4293      	cmp	r3, r2
 801d908:	d022      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	4a35      	ldr	r2, [pc, #212]	@ (801d9e4 <DMA_CalcBaseAndBitshift+0x13c>)
 801d910:	4293      	cmp	r3, r2
 801d912:	d01d      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	4a33      	ldr	r2, [pc, #204]	@ (801d9e8 <DMA_CalcBaseAndBitshift+0x140>)
 801d91a:	4293      	cmp	r3, r2
 801d91c:	d018      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	4a32      	ldr	r2, [pc, #200]	@ (801d9ec <DMA_CalcBaseAndBitshift+0x144>)
 801d924:	4293      	cmp	r3, r2
 801d926:	d013      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	4a30      	ldr	r2, [pc, #192]	@ (801d9f0 <DMA_CalcBaseAndBitshift+0x148>)
 801d92e:	4293      	cmp	r3, r2
 801d930:	d00e      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	4a2f      	ldr	r2, [pc, #188]	@ (801d9f4 <DMA_CalcBaseAndBitshift+0x14c>)
 801d938:	4293      	cmp	r3, r2
 801d93a:	d009      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	4a2d      	ldr	r2, [pc, #180]	@ (801d9f8 <DMA_CalcBaseAndBitshift+0x150>)
 801d942:	4293      	cmp	r3, r2
 801d944:	d004      	beq.n	801d950 <DMA_CalcBaseAndBitshift+0xa8>
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	4a2c      	ldr	r2, [pc, #176]	@ (801d9fc <DMA_CalcBaseAndBitshift+0x154>)
 801d94c:	4293      	cmp	r3, r2
 801d94e:	d101      	bne.n	801d954 <DMA_CalcBaseAndBitshift+0xac>
 801d950:	2301      	movs	r3, #1
 801d952:	e000      	b.n	801d956 <DMA_CalcBaseAndBitshift+0xae>
 801d954:	2300      	movs	r3, #0
 801d956:	2b00      	cmp	r3, #0
 801d958:	d024      	beq.n	801d9a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	b2db      	uxtb	r3, r3
 801d960:	3b10      	subs	r3, #16
 801d962:	4a27      	ldr	r2, [pc, #156]	@ (801da00 <DMA_CalcBaseAndBitshift+0x158>)
 801d964:	fba2 2303 	umull	r2, r3, r2, r3
 801d968:	091b      	lsrs	r3, r3, #4
 801d96a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	f003 0307 	and.w	r3, r3, #7
 801d972:	4a24      	ldr	r2, [pc, #144]	@ (801da04 <DMA_CalcBaseAndBitshift+0x15c>)
 801d974:	5cd3      	ldrb	r3, [r2, r3]
 801d976:	461a      	mov	r2, r3
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	2b03      	cmp	r3, #3
 801d980:	d908      	bls.n	801d994 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	461a      	mov	r2, r3
 801d988:	4b1f      	ldr	r3, [pc, #124]	@ (801da08 <DMA_CalcBaseAndBitshift+0x160>)
 801d98a:	4013      	ands	r3, r2
 801d98c:	1d1a      	adds	r2, r3, #4
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	659a      	str	r2, [r3, #88]	@ 0x58
 801d992:	e00d      	b.n	801d9b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	461a      	mov	r2, r3
 801d99a:	4b1b      	ldr	r3, [pc, #108]	@ (801da08 <DMA_CalcBaseAndBitshift+0x160>)
 801d99c:	4013      	ands	r3, r2
 801d99e:	687a      	ldr	r2, [r7, #4]
 801d9a0:	6593      	str	r3, [r2, #88]	@ 0x58
 801d9a2:	e005      	b.n	801d9b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	3714      	adds	r7, #20
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9be:	4770      	bx	lr
 801d9c0:	40020010 	.word	0x40020010
 801d9c4:	40020028 	.word	0x40020028
 801d9c8:	40020040 	.word	0x40020040
 801d9cc:	40020058 	.word	0x40020058
 801d9d0:	40020070 	.word	0x40020070
 801d9d4:	40020088 	.word	0x40020088
 801d9d8:	400200a0 	.word	0x400200a0
 801d9dc:	400200b8 	.word	0x400200b8
 801d9e0:	40020410 	.word	0x40020410
 801d9e4:	40020428 	.word	0x40020428
 801d9e8:	40020440 	.word	0x40020440
 801d9ec:	40020458 	.word	0x40020458
 801d9f0:	40020470 	.word	0x40020470
 801d9f4:	40020488 	.word	0x40020488
 801d9f8:	400204a0 	.word	0x400204a0
 801d9fc:	400204b8 	.word	0x400204b8
 801da00:	aaaaaaab 	.word	0xaaaaaaab
 801da04:	0802b5e8 	.word	0x0802b5e8
 801da08:	fffffc00 	.word	0xfffffc00

0801da0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801da0c:	b480      	push	{r7}
 801da0e:	b085      	sub	sp, #20
 801da10:	af00      	add	r7, sp, #0
 801da12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801da14:	2300      	movs	r3, #0
 801da16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	699b      	ldr	r3, [r3, #24]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d120      	bne.n	801da62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da24:	2b03      	cmp	r3, #3
 801da26:	d858      	bhi.n	801dada <DMA_CheckFifoParam+0xce>
 801da28:	a201      	add	r2, pc, #4	@ (adr r2, 801da30 <DMA_CheckFifoParam+0x24>)
 801da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da2e:	bf00      	nop
 801da30:	0801da41 	.word	0x0801da41
 801da34:	0801da53 	.word	0x0801da53
 801da38:	0801da41 	.word	0x0801da41
 801da3c:	0801dadb 	.word	0x0801dadb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d048      	beq.n	801dade <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801da4c:	2301      	movs	r3, #1
 801da4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801da50:	e045      	b.n	801dade <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801da5a:	d142      	bne.n	801dae2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801da5c:	2301      	movs	r3, #1
 801da5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801da60:	e03f      	b.n	801dae2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	699b      	ldr	r3, [r3, #24]
 801da66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801da6a:	d123      	bne.n	801dab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da70:	2b03      	cmp	r3, #3
 801da72:	d838      	bhi.n	801dae6 <DMA_CheckFifoParam+0xda>
 801da74:	a201      	add	r2, pc, #4	@ (adr r2, 801da7c <DMA_CheckFifoParam+0x70>)
 801da76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da7a:	bf00      	nop
 801da7c:	0801da8d 	.word	0x0801da8d
 801da80:	0801da93 	.word	0x0801da93
 801da84:	0801da8d 	.word	0x0801da8d
 801da88:	0801daa5 	.word	0x0801daa5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801da8c:	2301      	movs	r3, #1
 801da8e:	73fb      	strb	r3, [r7, #15]
        break;
 801da90:	e030      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d025      	beq.n	801daea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801da9e:	2301      	movs	r3, #1
 801daa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801daa2:	e022      	b.n	801daea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801daa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801daac:	d11f      	bne.n	801daee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801daae:	2301      	movs	r3, #1
 801dab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dab2:	e01c      	b.n	801daee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dab8:	2b02      	cmp	r3, #2
 801daba:	d902      	bls.n	801dac2 <DMA_CheckFifoParam+0xb6>
 801dabc:	2b03      	cmp	r3, #3
 801dabe:	d003      	beq.n	801dac8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801dac0:	e018      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801dac2:	2301      	movs	r3, #1
 801dac4:	73fb      	strb	r3, [r7, #15]
        break;
 801dac6:	e015      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dacc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d00e      	beq.n	801daf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801dad4:	2301      	movs	r3, #1
 801dad6:	73fb      	strb	r3, [r7, #15]
    break;
 801dad8:	e00b      	b.n	801daf2 <DMA_CheckFifoParam+0xe6>
        break;
 801dada:	bf00      	nop
 801dadc:	e00a      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        break;
 801dade:	bf00      	nop
 801dae0:	e008      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        break;
 801dae2:	bf00      	nop
 801dae4:	e006      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        break;
 801dae6:	bf00      	nop
 801dae8:	e004      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        break;
 801daea:	bf00      	nop
 801daec:	e002      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
        break;
 801daee:	bf00      	nop
 801daf0:	e000      	b.n	801daf4 <DMA_CheckFifoParam+0xe8>
    break;
 801daf2:	bf00      	nop
    }
  }

  return status;
 801daf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801daf6:	4618      	mov	r0, r3
 801daf8:	3714      	adds	r7, #20
 801dafa:	46bd      	mov	sp, r7
 801dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db00:	4770      	bx	lr
 801db02:	bf00      	nop

0801db04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801db04:	b480      	push	{r7}
 801db06:	b085      	sub	sp, #20
 801db08:	af00      	add	r7, sp, #0
 801db0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	4a38      	ldr	r2, [pc, #224]	@ (801dbf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801db18:	4293      	cmp	r3, r2
 801db1a:	d022      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	4a36      	ldr	r2, [pc, #216]	@ (801dbfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801db22:	4293      	cmp	r3, r2
 801db24:	d01d      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	4a35      	ldr	r2, [pc, #212]	@ (801dc00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801db2c:	4293      	cmp	r3, r2
 801db2e:	d018      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	4a33      	ldr	r2, [pc, #204]	@ (801dc04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801db36:	4293      	cmp	r3, r2
 801db38:	d013      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	4a32      	ldr	r2, [pc, #200]	@ (801dc08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801db40:	4293      	cmp	r3, r2
 801db42:	d00e      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	4a30      	ldr	r2, [pc, #192]	@ (801dc0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801db4a:	4293      	cmp	r3, r2
 801db4c:	d009      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	4a2f      	ldr	r2, [pc, #188]	@ (801dc10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801db54:	4293      	cmp	r3, r2
 801db56:	d004      	beq.n	801db62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	4a2d      	ldr	r2, [pc, #180]	@ (801dc14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801db5e:	4293      	cmp	r3, r2
 801db60:	d101      	bne.n	801db66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801db62:	2301      	movs	r3, #1
 801db64:	e000      	b.n	801db68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801db66:	2300      	movs	r3, #0
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d01a      	beq.n	801dba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	b2db      	uxtb	r3, r3
 801db72:	3b08      	subs	r3, #8
 801db74:	4a28      	ldr	r2, [pc, #160]	@ (801dc18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801db76:	fba2 2303 	umull	r2, r3, r2, r3
 801db7a:	091b      	lsrs	r3, r3, #4
 801db7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801db7e:	68fa      	ldr	r2, [r7, #12]
 801db80:	4b26      	ldr	r3, [pc, #152]	@ (801dc1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801db82:	4413      	add	r3, r2
 801db84:	009b      	lsls	r3, r3, #2
 801db86:	461a      	mov	r2, r3
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	4a24      	ldr	r2, [pc, #144]	@ (801dc20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801db90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801db92:	68fb      	ldr	r3, [r7, #12]
 801db94:	f003 031f 	and.w	r3, r3, #31
 801db98:	2201      	movs	r2, #1
 801db9a:	409a      	lsls	r2, r3
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801dba0:	e024      	b.n	801dbec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	b2db      	uxtb	r3, r3
 801dba8:	3b10      	subs	r3, #16
 801dbaa:	4a1e      	ldr	r2, [pc, #120]	@ (801dc24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801dbac:	fba2 2303 	umull	r2, r3, r2, r3
 801dbb0:	091b      	lsrs	r3, r3, #4
 801dbb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	4a1c      	ldr	r2, [pc, #112]	@ (801dc28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801dbb8:	4293      	cmp	r3, r2
 801dbba:	d806      	bhi.n	801dbca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801dbbc:	68bb      	ldr	r3, [r7, #8]
 801dbbe:	4a1b      	ldr	r2, [pc, #108]	@ (801dc2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801dbc0:	4293      	cmp	r3, r2
 801dbc2:	d902      	bls.n	801dbca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801dbc4:	68fb      	ldr	r3, [r7, #12]
 801dbc6:	3308      	adds	r3, #8
 801dbc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801dbca:	68fa      	ldr	r2, [r7, #12]
 801dbcc:	4b18      	ldr	r3, [pc, #96]	@ (801dc30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801dbce:	4413      	add	r3, r2
 801dbd0:	009b      	lsls	r3, r3, #2
 801dbd2:	461a      	mov	r2, r3
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	4a16      	ldr	r2, [pc, #88]	@ (801dc34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801dbdc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	f003 031f 	and.w	r3, r3, #31
 801dbe4:	2201      	movs	r2, #1
 801dbe6:	409a      	lsls	r2, r3
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dbec:	bf00      	nop
 801dbee:	3714      	adds	r7, #20
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf6:	4770      	bx	lr
 801dbf8:	58025408 	.word	0x58025408
 801dbfc:	5802541c 	.word	0x5802541c
 801dc00:	58025430 	.word	0x58025430
 801dc04:	58025444 	.word	0x58025444
 801dc08:	58025458 	.word	0x58025458
 801dc0c:	5802546c 	.word	0x5802546c
 801dc10:	58025480 	.word	0x58025480
 801dc14:	58025494 	.word	0x58025494
 801dc18:	cccccccd 	.word	0xcccccccd
 801dc1c:	16009600 	.word	0x16009600
 801dc20:	58025880 	.word	0x58025880
 801dc24:	aaaaaaab 	.word	0xaaaaaaab
 801dc28:	400204b8 	.word	0x400204b8
 801dc2c:	4002040f 	.word	0x4002040f
 801dc30:	10008200 	.word	0x10008200
 801dc34:	40020880 	.word	0x40020880

0801dc38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801dc38:	b480      	push	{r7}
 801dc3a:	b085      	sub	sp, #20
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	685b      	ldr	r3, [r3, #4]
 801dc44:	b2db      	uxtb	r3, r3
 801dc46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d04a      	beq.n	801dce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	2b08      	cmp	r3, #8
 801dc52:	d847      	bhi.n	801dce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	4a25      	ldr	r2, [pc, #148]	@ (801dcf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	d022      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	4a24      	ldr	r2, [pc, #144]	@ (801dcf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801dc64:	4293      	cmp	r3, r2
 801dc66:	d01d      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	4a22      	ldr	r2, [pc, #136]	@ (801dcf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801dc6e:	4293      	cmp	r3, r2
 801dc70:	d018      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	4a21      	ldr	r2, [pc, #132]	@ (801dcfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d013      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4a1f      	ldr	r2, [pc, #124]	@ (801dd00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d00e      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	4a1e      	ldr	r2, [pc, #120]	@ (801dd04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801dc8c:	4293      	cmp	r3, r2
 801dc8e:	d009      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	4a1c      	ldr	r2, [pc, #112]	@ (801dd08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801dc96:	4293      	cmp	r3, r2
 801dc98:	d004      	beq.n	801dca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	4a1b      	ldr	r2, [pc, #108]	@ (801dd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801dca0:	4293      	cmp	r3, r2
 801dca2:	d101      	bne.n	801dca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801dca4:	2301      	movs	r3, #1
 801dca6:	e000      	b.n	801dcaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d00a      	beq.n	801dcc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801dcae:	68fa      	ldr	r2, [r7, #12]
 801dcb0:	4b17      	ldr	r3, [pc, #92]	@ (801dd10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801dcb2:	4413      	add	r3, r2
 801dcb4:	009b      	lsls	r3, r3, #2
 801dcb6:	461a      	mov	r2, r3
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	4a15      	ldr	r2, [pc, #84]	@ (801dd14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801dcc0:	671a      	str	r2, [r3, #112]	@ 0x70
 801dcc2:	e009      	b.n	801dcd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801dcc4:	68fa      	ldr	r2, [r7, #12]
 801dcc6:	4b14      	ldr	r3, [pc, #80]	@ (801dd18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801dcc8:	4413      	add	r3, r2
 801dcca:	009b      	lsls	r3, r3, #2
 801dccc:	461a      	mov	r2, r3
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	4a11      	ldr	r2, [pc, #68]	@ (801dd1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801dcd6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	3b01      	subs	r3, #1
 801dcdc:	2201      	movs	r2, #1
 801dcde:	409a      	lsls	r2, r3
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801dce4:	bf00      	nop
 801dce6:	3714      	adds	r7, #20
 801dce8:	46bd      	mov	sp, r7
 801dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcee:	4770      	bx	lr
 801dcf0:	58025408 	.word	0x58025408
 801dcf4:	5802541c 	.word	0x5802541c
 801dcf8:	58025430 	.word	0x58025430
 801dcfc:	58025444 	.word	0x58025444
 801dd00:	58025458 	.word	0x58025458
 801dd04:	5802546c 	.word	0x5802546c
 801dd08:	58025480 	.word	0x58025480
 801dd0c:	58025494 	.word	0x58025494
 801dd10:	1600963f 	.word	0x1600963f
 801dd14:	58025940 	.word	0x58025940
 801dd18:	1000823f 	.word	0x1000823f
 801dd1c:	40020940 	.word	0x40020940

0801dd20 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 801dd20:	b580      	push	{r7, lr}
 801dd22:	b086      	sub	sp, #24
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	60f8      	str	r0, [r7, #12]
 801dd28:	60b9      	str	r1, [r7, #8]
 801dd2a:	607a      	str	r2, [r7, #4]
 801dd2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801dd2e:	2300      	movs	r3, #0
 801dd30:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	689b      	ldr	r3, [r3, #8]
 801dd36:	2b80      	cmp	r3, #128	@ 0x80
 801dd38:	d105      	bne.n	801dd46 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dd40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801dd42:	2301      	movs	r3, #1
 801dd44:	e315      	b.n	801e372 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801dd4c:	2b01      	cmp	r3, #1
 801dd4e:	d101      	bne.n	801dd54 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 801dd50:	2302      	movs	r3, #2
 801dd52:	e30e      	b.n	801e372 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	2201      	movs	r2, #1
 801dd58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801dd62:	b2db      	uxtb	r3, r3
 801dd64:	2b01      	cmp	r3, #1
 801dd66:	f040 82fd 	bne.w	801e364 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	2202      	movs	r2, #2
 801dd6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	2200      	movs	r2, #0
 801dd76:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801dd78:	68fb      	ldr	r3, [r7, #12]
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	4a82      	ldr	r2, [pc, #520]	@ (801df88 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801dd7e:	4293      	cmp	r3, r2
 801dd80:	d04a      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	4a81      	ldr	r2, [pc, #516]	@ (801df8c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801dd88:	4293      	cmp	r3, r2
 801dd8a:	d045      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	4a7f      	ldr	r2, [pc, #508]	@ (801df90 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801dd92:	4293      	cmp	r3, r2
 801dd94:	d040      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	4a7e      	ldr	r2, [pc, #504]	@ (801df94 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801dd9c:	4293      	cmp	r3, r2
 801dd9e:	d03b      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	4a7c      	ldr	r2, [pc, #496]	@ (801df98 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801dda6:	4293      	cmp	r3, r2
 801dda8:	d036      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	4a7b      	ldr	r2, [pc, #492]	@ (801df9c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801ddb0:	4293      	cmp	r3, r2
 801ddb2:	d031      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	4a79      	ldr	r2, [pc, #484]	@ (801dfa0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801ddba:	4293      	cmp	r3, r2
 801ddbc:	d02c      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	4a78      	ldr	r2, [pc, #480]	@ (801dfa4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801ddc4:	4293      	cmp	r3, r2
 801ddc6:	d027      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddc8:	68fb      	ldr	r3, [r7, #12]
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	4a76      	ldr	r2, [pc, #472]	@ (801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801ddce:	4293      	cmp	r3, r2
 801ddd0:	d022      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	4a75      	ldr	r2, [pc, #468]	@ (801dfac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801ddd8:	4293      	cmp	r3, r2
 801ddda:	d01d      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	4a73      	ldr	r2, [pc, #460]	@ (801dfb0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801dde2:	4293      	cmp	r3, r2
 801dde4:	d018      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	4a72      	ldr	r2, [pc, #456]	@ (801dfb4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801ddec:	4293      	cmp	r3, r2
 801ddee:	d013      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	4a70      	ldr	r2, [pc, #448]	@ (801dfb8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801ddf6:	4293      	cmp	r3, r2
 801ddf8:	d00e      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	4a6f      	ldr	r2, [pc, #444]	@ (801dfbc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801de00:	4293      	cmp	r3, r2
 801de02:	d009      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	4a6d      	ldr	r2, [pc, #436]	@ (801dfc0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801de0a:	4293      	cmp	r3, r2
 801de0c:	d004      	beq.n	801de18 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	4a6c      	ldr	r2, [pc, #432]	@ (801dfc4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801de14:	4293      	cmp	r3, r2
 801de16:	d101      	bne.n	801de1c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801de18:	2301      	movs	r3, #1
 801de1a:	e000      	b.n	801de1e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801de1c:	2300      	movs	r3, #0
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d018      	beq.n	801de54 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	681a      	ldr	r2, [r3, #0]
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801de30:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	683a      	ldr	r2, [r7, #0]
 801de38:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de3e:	3308      	adds	r3, #8
 801de40:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801de46:	f003 031f 	and.w	r3, r3, #31
 801de4a:	223f      	movs	r2, #63	@ 0x3f
 801de4c:	409a      	lsls	r2, r3
 801de4e:	693b      	ldr	r3, [r7, #16]
 801de50:	601a      	str	r2, [r3, #0]
 801de52:	e018      	b.n	801de86 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	6819      	ldr	r1, [r3, #0]
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	681a      	ldr	r2, [r3, #0]
 801de5e:	f248 0320 	movw	r3, #32800	@ 0x8020
 801de62:	430b      	orrs	r3, r1
 801de64:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	683a      	ldr	r2, [r7, #0]
 801de6c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de72:	3304      	adds	r3, #4
 801de74:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801de7a:	f003 031f 	and.w	r3, r3, #31
 801de7e:	2201      	movs	r2, #1
 801de80:	409a      	lsls	r2, r3
 801de82:	693b      	ldr	r3, [r7, #16]
 801de84:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801de86:	6a3b      	ldr	r3, [r7, #32]
 801de88:	687a      	ldr	r2, [r7, #4]
 801de8a:	68b9      	ldr	r1, [r7, #8]
 801de8c:	68f8      	ldr	r0, [r7, #12]
 801de8e:	f000 faa5 	bl	801e3dc <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801de92:	68fb      	ldr	r3, [r7, #12]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	4a3c      	ldr	r2, [pc, #240]	@ (801df88 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d072      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	4a3a      	ldr	r2, [pc, #232]	@ (801df8c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801dea2:	4293      	cmp	r3, r2
 801dea4:	d06d      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	4a39      	ldr	r2, [pc, #228]	@ (801df90 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801deac:	4293      	cmp	r3, r2
 801deae:	d068      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	4a37      	ldr	r2, [pc, #220]	@ (801df94 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801deb6:	4293      	cmp	r3, r2
 801deb8:	d063      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	4a36      	ldr	r2, [pc, #216]	@ (801df98 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801dec0:	4293      	cmp	r3, r2
 801dec2:	d05e      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	4a34      	ldr	r2, [pc, #208]	@ (801df9c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801deca:	4293      	cmp	r3, r2
 801decc:	d059      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	4a33      	ldr	r2, [pc, #204]	@ (801dfa0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801ded4:	4293      	cmp	r3, r2
 801ded6:	d054      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	4a31      	ldr	r2, [pc, #196]	@ (801dfa4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801dede:	4293      	cmp	r3, r2
 801dee0:	d04f      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	4a30      	ldr	r2, [pc, #192]	@ (801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801dee8:	4293      	cmp	r3, r2
 801deea:	d04a      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	4a2e      	ldr	r2, [pc, #184]	@ (801dfac <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801def2:	4293      	cmp	r3, r2
 801def4:	d045      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	4a2d      	ldr	r2, [pc, #180]	@ (801dfb0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801defc:	4293      	cmp	r3, r2
 801defe:	d040      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	4a2b      	ldr	r2, [pc, #172]	@ (801dfb4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801df06:	4293      	cmp	r3, r2
 801df08:	d03b      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	4a2a      	ldr	r2, [pc, #168]	@ (801dfb8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801df10:	4293      	cmp	r3, r2
 801df12:	d036      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	4a28      	ldr	r2, [pc, #160]	@ (801dfbc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801df1a:	4293      	cmp	r3, r2
 801df1c:	d031      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	4a27      	ldr	r2, [pc, #156]	@ (801dfc0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801df24:	4293      	cmp	r3, r2
 801df26:	d02c      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	4a25      	ldr	r2, [pc, #148]	@ (801dfc4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801df2e:	4293      	cmp	r3, r2
 801df30:	d027      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	4a24      	ldr	r2, [pc, #144]	@ (801dfc8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801df38:	4293      	cmp	r3, r2
 801df3a:	d022      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	4a22      	ldr	r2, [pc, #136]	@ (801dfcc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801df42:	4293      	cmp	r3, r2
 801df44:	d01d      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	4a21      	ldr	r2, [pc, #132]	@ (801dfd0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801df4c:	4293      	cmp	r3, r2
 801df4e:	d018      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	4a1f      	ldr	r2, [pc, #124]	@ (801dfd4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801df56:	4293      	cmp	r3, r2
 801df58:	d013      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	4a1e      	ldr	r2, [pc, #120]	@ (801dfd8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 801df60:	4293      	cmp	r3, r2
 801df62:	d00e      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	4a1c      	ldr	r2, [pc, #112]	@ (801dfdc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801df6a:	4293      	cmp	r3, r2
 801df6c:	d009      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	4a1b      	ldr	r2, [pc, #108]	@ (801dfe0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801df74:	4293      	cmp	r3, r2
 801df76:	d004      	beq.n	801df82 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	4a19      	ldr	r2, [pc, #100]	@ (801dfe4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 801df7e:	4293      	cmp	r3, r2
 801df80:	d132      	bne.n	801dfe8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801df82:	2301      	movs	r3, #1
 801df84:	e031      	b.n	801dfea <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801df86:	bf00      	nop
 801df88:	40020010 	.word	0x40020010
 801df8c:	40020028 	.word	0x40020028
 801df90:	40020040 	.word	0x40020040
 801df94:	40020058 	.word	0x40020058
 801df98:	40020070 	.word	0x40020070
 801df9c:	40020088 	.word	0x40020088
 801dfa0:	400200a0 	.word	0x400200a0
 801dfa4:	400200b8 	.word	0x400200b8
 801dfa8:	40020410 	.word	0x40020410
 801dfac:	40020428 	.word	0x40020428
 801dfb0:	40020440 	.word	0x40020440
 801dfb4:	40020458 	.word	0x40020458
 801dfb8:	40020470 	.word	0x40020470
 801dfbc:	40020488 	.word	0x40020488
 801dfc0:	400204a0 	.word	0x400204a0
 801dfc4:	400204b8 	.word	0x400204b8
 801dfc8:	58025408 	.word	0x58025408
 801dfcc:	5802541c 	.word	0x5802541c
 801dfd0:	58025430 	.word	0x58025430
 801dfd4:	58025444 	.word	0x58025444
 801dfd8:	58025458 	.word	0x58025458
 801dfdc:	5802546c 	.word	0x5802546c
 801dfe0:	58025480 	.word	0x58025480
 801dfe4:	58025494 	.word	0x58025494
 801dfe8:	2300      	movs	r3, #0
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d00d      	beq.n	801e00a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801dff2:	68fa      	ldr	r2, [r7, #12]
 801dff4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801dff6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d004      	beq.n	801e00a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e004:	68fa      	ldr	r2, [r7, #12]
 801e006:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e008:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e00a:	68fb      	ldr	r3, [r7, #12]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	4a3b      	ldr	r2, [pc, #236]	@ (801e0fc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 801e010:	4293      	cmp	r3, r2
 801e012:	d04a      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	4a39      	ldr	r2, [pc, #228]	@ (801e100 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801e01a:	4293      	cmp	r3, r2
 801e01c:	d045      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	4a38      	ldr	r2, [pc, #224]	@ (801e104 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801e024:	4293      	cmp	r3, r2
 801e026:	d040      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	4a36      	ldr	r2, [pc, #216]	@ (801e108 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801e02e:	4293      	cmp	r3, r2
 801e030:	d03b      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	4a35      	ldr	r2, [pc, #212]	@ (801e10c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801e038:	4293      	cmp	r3, r2
 801e03a:	d036      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	4a33      	ldr	r2, [pc, #204]	@ (801e110 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801e042:	4293      	cmp	r3, r2
 801e044:	d031      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	4a32      	ldr	r2, [pc, #200]	@ (801e114 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801e04c:	4293      	cmp	r3, r2
 801e04e:	d02c      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e050:	68fb      	ldr	r3, [r7, #12]
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	4a30      	ldr	r2, [pc, #192]	@ (801e118 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801e056:	4293      	cmp	r3, r2
 801e058:	d027      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	4a2f      	ldr	r2, [pc, #188]	@ (801e11c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 801e060:	4293      	cmp	r3, r2
 801e062:	d022      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	4a2d      	ldr	r2, [pc, #180]	@ (801e120 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801e06a:	4293      	cmp	r3, r2
 801e06c:	d01d      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	4a2c      	ldr	r2, [pc, #176]	@ (801e124 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801e074:	4293      	cmp	r3, r2
 801e076:	d018      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	4a2a      	ldr	r2, [pc, #168]	@ (801e128 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 801e07e:	4293      	cmp	r3, r2
 801e080:	d013      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	4a29      	ldr	r2, [pc, #164]	@ (801e12c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801e088:	4293      	cmp	r3, r2
 801e08a:	d00e      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	4a27      	ldr	r2, [pc, #156]	@ (801e130 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801e092:	4293      	cmp	r3, r2
 801e094:	d009      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	4a26      	ldr	r2, [pc, #152]	@ (801e134 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 801e09c:	4293      	cmp	r3, r2
 801e09e:	d004      	beq.n	801e0aa <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	4a24      	ldr	r2, [pc, #144]	@ (801e138 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801e0a6:	4293      	cmp	r3, r2
 801e0a8:	d101      	bne.n	801e0ae <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	e000      	b.n	801e0b0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d043      	beq.n	801e13c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801e0b4:	68fb      	ldr	r3, [r7, #12]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	f023 021e 	bic.w	r2, r3, #30
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	f042 0216 	orr.w	r2, r2, #22
 801e0c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	695a      	ldr	r2, [r3, #20]
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e0d6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d103      	bne.n	801e0e8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d043      	beq.n	801e170 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	681a      	ldr	r2, [r3, #0]
 801e0ee:	68fb      	ldr	r3, [r7, #12]
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	f042 0208 	orr.w	r2, r2, #8
 801e0f6:	601a      	str	r2, [r3, #0]
 801e0f8:	e03a      	b.n	801e170 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801e0fa:	bf00      	nop
 801e0fc:	40020010 	.word	0x40020010
 801e100:	40020028 	.word	0x40020028
 801e104:	40020040 	.word	0x40020040
 801e108:	40020058 	.word	0x40020058
 801e10c:	40020070 	.word	0x40020070
 801e110:	40020088 	.word	0x40020088
 801e114:	400200a0 	.word	0x400200a0
 801e118:	400200b8 	.word	0x400200b8
 801e11c:	40020410 	.word	0x40020410
 801e120:	40020428 	.word	0x40020428
 801e124:	40020440 	.word	0x40020440
 801e128:	40020458 	.word	0x40020458
 801e12c:	40020470 	.word	0x40020470
 801e130:	40020488 	.word	0x40020488
 801e134:	400204a0 	.word	0x400204a0
 801e138:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	f023 020e 	bic.w	r2, r3, #14
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	f042 020a 	orr.w	r2, r2, #10
 801e14e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e154:	2b00      	cmp	r3, #0
 801e156:	d103      	bne.n	801e160 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d007      	beq.n	801e170 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	681a      	ldr	r2, [r3, #0]
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	f042 0204 	orr.w	r2, r2, #4
 801e16e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	4a81      	ldr	r2, [pc, #516]	@ (801e37c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e176:	4293      	cmp	r3, r2
 801e178:	d072      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	4a80      	ldr	r2, [pc, #512]	@ (801e380 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e180:	4293      	cmp	r3, r2
 801e182:	d06d      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	4a7e      	ldr	r2, [pc, #504]	@ (801e384 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e18a:	4293      	cmp	r3, r2
 801e18c:	d068      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	4a7d      	ldr	r2, [pc, #500]	@ (801e388 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e194:	4293      	cmp	r3, r2
 801e196:	d063      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	4a7b      	ldr	r2, [pc, #492]	@ (801e38c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e19e:	4293      	cmp	r3, r2
 801e1a0:	d05e      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	4a7a      	ldr	r2, [pc, #488]	@ (801e390 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e1a8:	4293      	cmp	r3, r2
 801e1aa:	d059      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	4a78      	ldr	r2, [pc, #480]	@ (801e394 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e1b2:	4293      	cmp	r3, r2
 801e1b4:	d054      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	4a77      	ldr	r2, [pc, #476]	@ (801e398 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	d04f      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	4a75      	ldr	r2, [pc, #468]	@ (801e39c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e1c6:	4293      	cmp	r3, r2
 801e1c8:	d04a      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	681b      	ldr	r3, [r3, #0]
 801e1ce:	4a74      	ldr	r2, [pc, #464]	@ (801e3a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	d045      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	681b      	ldr	r3, [r3, #0]
 801e1d8:	4a72      	ldr	r2, [pc, #456]	@ (801e3a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e1da:	4293      	cmp	r3, r2
 801e1dc:	d040      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	4a71      	ldr	r2, [pc, #452]	@ (801e3a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e1e4:	4293      	cmp	r3, r2
 801e1e6:	d03b      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	4a6f      	ldr	r2, [pc, #444]	@ (801e3ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e1ee:	4293      	cmp	r3, r2
 801e1f0:	d036      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	4a6e      	ldr	r2, [pc, #440]	@ (801e3b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e1f8:	4293      	cmp	r3, r2
 801e1fa:	d031      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	4a6c      	ldr	r2, [pc, #432]	@ (801e3b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e202:	4293      	cmp	r3, r2
 801e204:	d02c      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	4a6b      	ldr	r2, [pc, #428]	@ (801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e20c:	4293      	cmp	r3, r2
 801e20e:	d027      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	4a69      	ldr	r2, [pc, #420]	@ (801e3bc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801e216:	4293      	cmp	r3, r2
 801e218:	d022      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	4a68      	ldr	r2, [pc, #416]	@ (801e3c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 801e220:	4293      	cmp	r3, r2
 801e222:	d01d      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	681b      	ldr	r3, [r3, #0]
 801e228:	4a66      	ldr	r2, [pc, #408]	@ (801e3c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801e22a:	4293      	cmp	r3, r2
 801e22c:	d018      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	4a65      	ldr	r2, [pc, #404]	@ (801e3c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801e234:	4293      	cmp	r3, r2
 801e236:	d013      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	4a63      	ldr	r2, [pc, #396]	@ (801e3cc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801e23e:	4293      	cmp	r3, r2
 801e240:	d00e      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	4a62      	ldr	r2, [pc, #392]	@ (801e3d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801e248:	4293      	cmp	r3, r2
 801e24a:	d009      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e24c:	68fb      	ldr	r3, [r7, #12]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	4a60      	ldr	r2, [pc, #384]	@ (801e3d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 801e252:	4293      	cmp	r3, r2
 801e254:	d004      	beq.n	801e260 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	4a5f      	ldr	r2, [pc, #380]	@ (801e3d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801e25c:	4293      	cmp	r3, r2
 801e25e:	d101      	bne.n	801e264 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 801e260:	2301      	movs	r3, #1
 801e262:	e000      	b.n	801e266 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 801e264:	2300      	movs	r3, #0
 801e266:	2b00      	cmp	r3, #0
 801e268:	d01a      	beq.n	801e2a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e274:	2b00      	cmp	r3, #0
 801e276:	d007      	beq.n	801e288 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e27c:	681a      	ldr	r2, [r3, #0]
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e282:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e286:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d007      	beq.n	801e2a0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e294:	681a      	ldr	r2, [r3, #0]
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e29a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e29e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	4a35      	ldr	r2, [pc, #212]	@ (801e37c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e2a6:	4293      	cmp	r3, r2
 801e2a8:	d04a      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2aa:	68fb      	ldr	r3, [r7, #12]
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	4a34      	ldr	r2, [pc, #208]	@ (801e380 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e2b0:	4293      	cmp	r3, r2
 801e2b2:	d045      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	4a32      	ldr	r2, [pc, #200]	@ (801e384 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e2ba:	4293      	cmp	r3, r2
 801e2bc:	d040      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	4a31      	ldr	r2, [pc, #196]	@ (801e388 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e2c4:	4293      	cmp	r3, r2
 801e2c6:	d03b      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	4a2f      	ldr	r2, [pc, #188]	@ (801e38c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e2ce:	4293      	cmp	r3, r2
 801e2d0:	d036      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	4a2e      	ldr	r2, [pc, #184]	@ (801e390 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e2d8:	4293      	cmp	r3, r2
 801e2da:	d031      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	681b      	ldr	r3, [r3, #0]
 801e2e0:	4a2c      	ldr	r2, [pc, #176]	@ (801e394 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e2e2:	4293      	cmp	r3, r2
 801e2e4:	d02c      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	4a2b      	ldr	r2, [pc, #172]	@ (801e398 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e2ec:	4293      	cmp	r3, r2
 801e2ee:	d027      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	4a29      	ldr	r2, [pc, #164]	@ (801e39c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e2f6:	4293      	cmp	r3, r2
 801e2f8:	d022      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	4a28      	ldr	r2, [pc, #160]	@ (801e3a0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e300:	4293      	cmp	r3, r2
 801e302:	d01d      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e304:	68fb      	ldr	r3, [r7, #12]
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	4a26      	ldr	r2, [pc, #152]	@ (801e3a4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e30a:	4293      	cmp	r3, r2
 801e30c:	d018      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	4a25      	ldr	r2, [pc, #148]	@ (801e3a8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e314:	4293      	cmp	r3, r2
 801e316:	d013      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	4a23      	ldr	r2, [pc, #140]	@ (801e3ac <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e31e:	4293      	cmp	r3, r2
 801e320:	d00e      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	4a22      	ldr	r2, [pc, #136]	@ (801e3b0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e328:	4293      	cmp	r3, r2
 801e32a:	d009      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	4a20      	ldr	r2, [pc, #128]	@ (801e3b4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e332:	4293      	cmp	r3, r2
 801e334:	d004      	beq.n	801e340 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e336:	68fb      	ldr	r3, [r7, #12]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	4a1f      	ldr	r2, [pc, #124]	@ (801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e33c:	4293      	cmp	r3, r2
 801e33e:	d108      	bne.n	801e352 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	681a      	ldr	r2, [r3, #0]
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	f042 0201 	orr.w	r2, r2, #1
 801e34e:	601a      	str	r2, [r3, #0]
 801e350:	e00e      	b.n	801e370 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 801e352:	68fb      	ldr	r3, [r7, #12]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	681a      	ldr	r2, [r3, #0]
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	f042 0201 	orr.w	r2, r2, #1
 801e360:	601a      	str	r2, [r3, #0]
 801e362:	e005      	b.n	801e370 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e36a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801e36c:	2301      	movs	r3, #1
 801e36e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801e370:	7dfb      	ldrb	r3, [r7, #23]
}
 801e372:	4618      	mov	r0, r3
 801e374:	3718      	adds	r7, #24
 801e376:	46bd      	mov	sp, r7
 801e378:	bd80      	pop	{r7, pc}
 801e37a:	bf00      	nop
 801e37c:	40020010 	.word	0x40020010
 801e380:	40020028 	.word	0x40020028
 801e384:	40020040 	.word	0x40020040
 801e388:	40020058 	.word	0x40020058
 801e38c:	40020070 	.word	0x40020070
 801e390:	40020088 	.word	0x40020088
 801e394:	400200a0 	.word	0x400200a0
 801e398:	400200b8 	.word	0x400200b8
 801e39c:	40020410 	.word	0x40020410
 801e3a0:	40020428 	.word	0x40020428
 801e3a4:	40020440 	.word	0x40020440
 801e3a8:	40020458 	.word	0x40020458
 801e3ac:	40020470 	.word	0x40020470
 801e3b0:	40020488 	.word	0x40020488
 801e3b4:	400204a0 	.word	0x400204a0
 801e3b8:	400204b8 	.word	0x400204b8
 801e3bc:	58025408 	.word	0x58025408
 801e3c0:	5802541c 	.word	0x5802541c
 801e3c4:	58025430 	.word	0x58025430
 801e3c8:	58025444 	.word	0x58025444
 801e3cc:	58025458 	.word	0x58025458
 801e3d0:	5802546c 	.word	0x5802546c
 801e3d4:	58025480 	.word	0x58025480
 801e3d8:	58025494 	.word	0x58025494

0801e3dc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e3dc:	b480      	push	{r7}
 801e3de:	b085      	sub	sp, #20
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	60f8      	str	r0, [r7, #12]
 801e3e4:	60b9      	str	r1, [r7, #8]
 801e3e6:	607a      	str	r2, [r7, #4]
 801e3e8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e3ea:	68fb      	ldr	r3, [r7, #12]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	4a46      	ldr	r2, [pc, #280]	@ (801e508 <DMA_MultiBufferSetConfig+0x12c>)
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d04a      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	4a44      	ldr	r2, [pc, #272]	@ (801e50c <DMA_MultiBufferSetConfig+0x130>)
 801e3fa:	4293      	cmp	r3, r2
 801e3fc:	d045      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	4a43      	ldr	r2, [pc, #268]	@ (801e510 <DMA_MultiBufferSetConfig+0x134>)
 801e404:	4293      	cmp	r3, r2
 801e406:	d040      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	4a41      	ldr	r2, [pc, #260]	@ (801e514 <DMA_MultiBufferSetConfig+0x138>)
 801e40e:	4293      	cmp	r3, r2
 801e410:	d03b      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	4a40      	ldr	r2, [pc, #256]	@ (801e518 <DMA_MultiBufferSetConfig+0x13c>)
 801e418:	4293      	cmp	r3, r2
 801e41a:	d036      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	4a3e      	ldr	r2, [pc, #248]	@ (801e51c <DMA_MultiBufferSetConfig+0x140>)
 801e422:	4293      	cmp	r3, r2
 801e424:	d031      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	4a3d      	ldr	r2, [pc, #244]	@ (801e520 <DMA_MultiBufferSetConfig+0x144>)
 801e42c:	4293      	cmp	r3, r2
 801e42e:	d02c      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	4a3b      	ldr	r2, [pc, #236]	@ (801e524 <DMA_MultiBufferSetConfig+0x148>)
 801e436:	4293      	cmp	r3, r2
 801e438:	d027      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	4a3a      	ldr	r2, [pc, #232]	@ (801e528 <DMA_MultiBufferSetConfig+0x14c>)
 801e440:	4293      	cmp	r3, r2
 801e442:	d022      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	4a38      	ldr	r2, [pc, #224]	@ (801e52c <DMA_MultiBufferSetConfig+0x150>)
 801e44a:	4293      	cmp	r3, r2
 801e44c:	d01d      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	4a37      	ldr	r2, [pc, #220]	@ (801e530 <DMA_MultiBufferSetConfig+0x154>)
 801e454:	4293      	cmp	r3, r2
 801e456:	d018      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	4a35      	ldr	r2, [pc, #212]	@ (801e534 <DMA_MultiBufferSetConfig+0x158>)
 801e45e:	4293      	cmp	r3, r2
 801e460:	d013      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	4a34      	ldr	r2, [pc, #208]	@ (801e538 <DMA_MultiBufferSetConfig+0x15c>)
 801e468:	4293      	cmp	r3, r2
 801e46a:	d00e      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	4a32      	ldr	r2, [pc, #200]	@ (801e53c <DMA_MultiBufferSetConfig+0x160>)
 801e472:	4293      	cmp	r3, r2
 801e474:	d009      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	4a31      	ldr	r2, [pc, #196]	@ (801e540 <DMA_MultiBufferSetConfig+0x164>)
 801e47c:	4293      	cmp	r3, r2
 801e47e:	d004      	beq.n	801e48a <DMA_MultiBufferSetConfig+0xae>
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	4a2f      	ldr	r2, [pc, #188]	@ (801e544 <DMA_MultiBufferSetConfig+0x168>)
 801e486:	4293      	cmp	r3, r2
 801e488:	d101      	bne.n	801e48e <DMA_MultiBufferSetConfig+0xb2>
 801e48a:	2301      	movs	r3, #1
 801e48c:	e000      	b.n	801e490 <DMA_MultiBufferSetConfig+0xb4>
 801e48e:	2300      	movs	r3, #0
 801e490:	2b00      	cmp	r3, #0
 801e492:	d019      	beq.n	801e4c8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	683a      	ldr	r2, [r7, #0]
 801e49a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	689b      	ldr	r3, [r3, #8]
 801e4a0:	2b40      	cmp	r3, #64	@ 0x40
 801e4a2:	d108      	bne.n	801e4b6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	681b      	ldr	r3, [r3, #0]
 801e4a8:	687a      	ldr	r2, [r7, #4]
 801e4aa:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	68ba      	ldr	r2, [r7, #8]
 801e4b2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801e4b4:	e021      	b.n	801e4fa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	68ba      	ldr	r2, [r7, #8]
 801e4bc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	687a      	ldr	r2, [r7, #4]
 801e4c4:	60da      	str	r2, [r3, #12]
}
 801e4c6:	e018      	b.n	801e4fa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	683a      	ldr	r2, [r7, #0]
 801e4ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	689b      	ldr	r3, [r3, #8]
 801e4d4:	2b40      	cmp	r3, #64	@ 0x40
 801e4d6:	d108      	bne.n	801e4ea <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	687a      	ldr	r2, [r7, #4]
 801e4de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	68ba      	ldr	r2, [r7, #8]
 801e4e6:	60da      	str	r2, [r3, #12]
}
 801e4e8:	e007      	b.n	801e4fa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	68ba      	ldr	r2, [r7, #8]
 801e4f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	687a      	ldr	r2, [r7, #4]
 801e4f8:	60da      	str	r2, [r3, #12]
}
 801e4fa:	bf00      	nop
 801e4fc:	3714      	adds	r7, #20
 801e4fe:	46bd      	mov	sp, r7
 801e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e504:	4770      	bx	lr
 801e506:	bf00      	nop
 801e508:	40020010 	.word	0x40020010
 801e50c:	40020028 	.word	0x40020028
 801e510:	40020040 	.word	0x40020040
 801e514:	40020058 	.word	0x40020058
 801e518:	40020070 	.word	0x40020070
 801e51c:	40020088 	.word	0x40020088
 801e520:	400200a0 	.word	0x400200a0
 801e524:	400200b8 	.word	0x400200b8
 801e528:	40020410 	.word	0x40020410
 801e52c:	40020428 	.word	0x40020428
 801e530:	40020440 	.word	0x40020440
 801e534:	40020458 	.word	0x40020458
 801e538:	40020470 	.word	0x40020470
 801e53c:	40020488 	.word	0x40020488
 801e540:	400204a0 	.word	0x400204a0
 801e544:	400204b8 	.word	0x400204b8

0801e548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e548:	b480      	push	{r7}
 801e54a:	b089      	sub	sp, #36	@ 0x24
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]
 801e550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801e552:	2300      	movs	r3, #0
 801e554:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801e556:	4b89      	ldr	r3, [pc, #548]	@ (801e77c <HAL_GPIO_Init+0x234>)
 801e558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e55a:	e194      	b.n	801e886 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801e55c:	683b      	ldr	r3, [r7, #0]
 801e55e:	681a      	ldr	r2, [r3, #0]
 801e560:	2101      	movs	r1, #1
 801e562:	69fb      	ldr	r3, [r7, #28]
 801e564:	fa01 f303 	lsl.w	r3, r1, r3
 801e568:	4013      	ands	r3, r2
 801e56a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801e56c:	693b      	ldr	r3, [r7, #16]
 801e56e:	2b00      	cmp	r3, #0
 801e570:	f000 8186 	beq.w	801e880 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801e574:	683b      	ldr	r3, [r7, #0]
 801e576:	685b      	ldr	r3, [r3, #4]
 801e578:	f003 0303 	and.w	r3, r3, #3
 801e57c:	2b01      	cmp	r3, #1
 801e57e:	d005      	beq.n	801e58c <HAL_GPIO_Init+0x44>
 801e580:	683b      	ldr	r3, [r7, #0]
 801e582:	685b      	ldr	r3, [r3, #4]
 801e584:	f003 0303 	and.w	r3, r3, #3
 801e588:	2b02      	cmp	r3, #2
 801e58a:	d130      	bne.n	801e5ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	689b      	ldr	r3, [r3, #8]
 801e590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801e592:	69fb      	ldr	r3, [r7, #28]
 801e594:	005b      	lsls	r3, r3, #1
 801e596:	2203      	movs	r2, #3
 801e598:	fa02 f303 	lsl.w	r3, r2, r3
 801e59c:	43db      	mvns	r3, r3
 801e59e:	69ba      	ldr	r2, [r7, #24]
 801e5a0:	4013      	ands	r3, r2
 801e5a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e5a4:	683b      	ldr	r3, [r7, #0]
 801e5a6:	68da      	ldr	r2, [r3, #12]
 801e5a8:	69fb      	ldr	r3, [r7, #28]
 801e5aa:	005b      	lsls	r3, r3, #1
 801e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 801e5b0:	69ba      	ldr	r2, [r7, #24]
 801e5b2:	4313      	orrs	r3, r2
 801e5b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	69ba      	ldr	r2, [r7, #24]
 801e5ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	685b      	ldr	r3, [r3, #4]
 801e5c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801e5c2:	2201      	movs	r2, #1
 801e5c4:	69fb      	ldr	r3, [r7, #28]
 801e5c6:	fa02 f303 	lsl.w	r3, r2, r3
 801e5ca:	43db      	mvns	r3, r3
 801e5cc:	69ba      	ldr	r2, [r7, #24]
 801e5ce:	4013      	ands	r3, r2
 801e5d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801e5d2:	683b      	ldr	r3, [r7, #0]
 801e5d4:	685b      	ldr	r3, [r3, #4]
 801e5d6:	091b      	lsrs	r3, r3, #4
 801e5d8:	f003 0201 	and.w	r2, r3, #1
 801e5dc:	69fb      	ldr	r3, [r7, #28]
 801e5de:	fa02 f303 	lsl.w	r3, r2, r3
 801e5e2:	69ba      	ldr	r2, [r7, #24]
 801e5e4:	4313      	orrs	r3, r2
 801e5e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	69ba      	ldr	r2, [r7, #24]
 801e5ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801e5ee:	683b      	ldr	r3, [r7, #0]
 801e5f0:	685b      	ldr	r3, [r3, #4]
 801e5f2:	f003 0303 	and.w	r3, r3, #3
 801e5f6:	2b03      	cmp	r3, #3
 801e5f8:	d017      	beq.n	801e62a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	68db      	ldr	r3, [r3, #12]
 801e5fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e600:	69fb      	ldr	r3, [r7, #28]
 801e602:	005b      	lsls	r3, r3, #1
 801e604:	2203      	movs	r2, #3
 801e606:	fa02 f303 	lsl.w	r3, r2, r3
 801e60a:	43db      	mvns	r3, r3
 801e60c:	69ba      	ldr	r2, [r7, #24]
 801e60e:	4013      	ands	r3, r2
 801e610:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e612:	683b      	ldr	r3, [r7, #0]
 801e614:	689a      	ldr	r2, [r3, #8]
 801e616:	69fb      	ldr	r3, [r7, #28]
 801e618:	005b      	lsls	r3, r3, #1
 801e61a:	fa02 f303 	lsl.w	r3, r2, r3
 801e61e:	69ba      	ldr	r2, [r7, #24]
 801e620:	4313      	orrs	r3, r2
 801e622:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	69ba      	ldr	r2, [r7, #24]
 801e628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e62a:	683b      	ldr	r3, [r7, #0]
 801e62c:	685b      	ldr	r3, [r3, #4]
 801e62e:	f003 0303 	and.w	r3, r3, #3
 801e632:	2b02      	cmp	r3, #2
 801e634:	d123      	bne.n	801e67e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e636:	69fb      	ldr	r3, [r7, #28]
 801e638:	08da      	lsrs	r2, r3, #3
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	3208      	adds	r2, #8
 801e63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801e644:	69fb      	ldr	r3, [r7, #28]
 801e646:	f003 0307 	and.w	r3, r3, #7
 801e64a:	009b      	lsls	r3, r3, #2
 801e64c:	220f      	movs	r2, #15
 801e64e:	fa02 f303 	lsl.w	r3, r2, r3
 801e652:	43db      	mvns	r3, r3
 801e654:	69ba      	ldr	r2, [r7, #24]
 801e656:	4013      	ands	r3, r2
 801e658:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801e65a:	683b      	ldr	r3, [r7, #0]
 801e65c:	691a      	ldr	r2, [r3, #16]
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	f003 0307 	and.w	r3, r3, #7
 801e664:	009b      	lsls	r3, r3, #2
 801e666:	fa02 f303 	lsl.w	r3, r2, r3
 801e66a:	69ba      	ldr	r2, [r7, #24]
 801e66c:	4313      	orrs	r3, r2
 801e66e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	08da      	lsrs	r2, r3, #3
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	3208      	adds	r2, #8
 801e678:	69b9      	ldr	r1, [r7, #24]
 801e67a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e684:	69fb      	ldr	r3, [r7, #28]
 801e686:	005b      	lsls	r3, r3, #1
 801e688:	2203      	movs	r2, #3
 801e68a:	fa02 f303 	lsl.w	r3, r2, r3
 801e68e:	43db      	mvns	r3, r3
 801e690:	69ba      	ldr	r2, [r7, #24]
 801e692:	4013      	ands	r3, r2
 801e694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e696:	683b      	ldr	r3, [r7, #0]
 801e698:	685b      	ldr	r3, [r3, #4]
 801e69a:	f003 0203 	and.w	r2, r3, #3
 801e69e:	69fb      	ldr	r3, [r7, #28]
 801e6a0:	005b      	lsls	r3, r3, #1
 801e6a2:	fa02 f303 	lsl.w	r3, r2, r3
 801e6a6:	69ba      	ldr	r2, [r7, #24]
 801e6a8:	4313      	orrs	r3, r2
 801e6aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	69ba      	ldr	r2, [r7, #24]
 801e6b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801e6b2:	683b      	ldr	r3, [r7, #0]
 801e6b4:	685b      	ldr	r3, [r3, #4]
 801e6b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	f000 80e0 	beq.w	801e880 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e6c0:	4b2f      	ldr	r3, [pc, #188]	@ (801e780 <HAL_GPIO_Init+0x238>)
 801e6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e6c6:	4a2e      	ldr	r2, [pc, #184]	@ (801e780 <HAL_GPIO_Init+0x238>)
 801e6c8:	f043 0302 	orr.w	r3, r3, #2
 801e6cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801e6d0:	4b2b      	ldr	r3, [pc, #172]	@ (801e780 <HAL_GPIO_Init+0x238>)
 801e6d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e6d6:	f003 0302 	and.w	r3, r3, #2
 801e6da:	60fb      	str	r3, [r7, #12]
 801e6dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e6de:	4a29      	ldr	r2, [pc, #164]	@ (801e784 <HAL_GPIO_Init+0x23c>)
 801e6e0:	69fb      	ldr	r3, [r7, #28]
 801e6e2:	089b      	lsrs	r3, r3, #2
 801e6e4:	3302      	adds	r3, #2
 801e6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e6ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801e6ec:	69fb      	ldr	r3, [r7, #28]
 801e6ee:	f003 0303 	and.w	r3, r3, #3
 801e6f2:	009b      	lsls	r3, r3, #2
 801e6f4:	220f      	movs	r2, #15
 801e6f6:	fa02 f303 	lsl.w	r3, r2, r3
 801e6fa:	43db      	mvns	r3, r3
 801e6fc:	69ba      	ldr	r2, [r7, #24]
 801e6fe:	4013      	ands	r3, r2
 801e700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	4a20      	ldr	r2, [pc, #128]	@ (801e788 <HAL_GPIO_Init+0x240>)
 801e706:	4293      	cmp	r3, r2
 801e708:	d052      	beq.n	801e7b0 <HAL_GPIO_Init+0x268>
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	4a1f      	ldr	r2, [pc, #124]	@ (801e78c <HAL_GPIO_Init+0x244>)
 801e70e:	4293      	cmp	r3, r2
 801e710:	d031      	beq.n	801e776 <HAL_GPIO_Init+0x22e>
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	4a1e      	ldr	r2, [pc, #120]	@ (801e790 <HAL_GPIO_Init+0x248>)
 801e716:	4293      	cmp	r3, r2
 801e718:	d02b      	beq.n	801e772 <HAL_GPIO_Init+0x22a>
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	4a1d      	ldr	r2, [pc, #116]	@ (801e794 <HAL_GPIO_Init+0x24c>)
 801e71e:	4293      	cmp	r3, r2
 801e720:	d025      	beq.n	801e76e <HAL_GPIO_Init+0x226>
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	4a1c      	ldr	r2, [pc, #112]	@ (801e798 <HAL_GPIO_Init+0x250>)
 801e726:	4293      	cmp	r3, r2
 801e728:	d01f      	beq.n	801e76a <HAL_GPIO_Init+0x222>
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	4a1b      	ldr	r2, [pc, #108]	@ (801e79c <HAL_GPIO_Init+0x254>)
 801e72e:	4293      	cmp	r3, r2
 801e730:	d019      	beq.n	801e766 <HAL_GPIO_Init+0x21e>
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	4a1a      	ldr	r2, [pc, #104]	@ (801e7a0 <HAL_GPIO_Init+0x258>)
 801e736:	4293      	cmp	r3, r2
 801e738:	d013      	beq.n	801e762 <HAL_GPIO_Init+0x21a>
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	4a19      	ldr	r2, [pc, #100]	@ (801e7a4 <HAL_GPIO_Init+0x25c>)
 801e73e:	4293      	cmp	r3, r2
 801e740:	d00d      	beq.n	801e75e <HAL_GPIO_Init+0x216>
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	4a18      	ldr	r2, [pc, #96]	@ (801e7a8 <HAL_GPIO_Init+0x260>)
 801e746:	4293      	cmp	r3, r2
 801e748:	d007      	beq.n	801e75a <HAL_GPIO_Init+0x212>
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	4a17      	ldr	r2, [pc, #92]	@ (801e7ac <HAL_GPIO_Init+0x264>)
 801e74e:	4293      	cmp	r3, r2
 801e750:	d101      	bne.n	801e756 <HAL_GPIO_Init+0x20e>
 801e752:	2309      	movs	r3, #9
 801e754:	e02d      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e756:	230a      	movs	r3, #10
 801e758:	e02b      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e75a:	2308      	movs	r3, #8
 801e75c:	e029      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e75e:	2307      	movs	r3, #7
 801e760:	e027      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e762:	2306      	movs	r3, #6
 801e764:	e025      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e766:	2305      	movs	r3, #5
 801e768:	e023      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e76a:	2304      	movs	r3, #4
 801e76c:	e021      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e76e:	2303      	movs	r3, #3
 801e770:	e01f      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e772:	2302      	movs	r3, #2
 801e774:	e01d      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e776:	2301      	movs	r3, #1
 801e778:	e01b      	b.n	801e7b2 <HAL_GPIO_Init+0x26a>
 801e77a:	bf00      	nop
 801e77c:	58000080 	.word	0x58000080
 801e780:	58024400 	.word	0x58024400
 801e784:	58000400 	.word	0x58000400
 801e788:	58020000 	.word	0x58020000
 801e78c:	58020400 	.word	0x58020400
 801e790:	58020800 	.word	0x58020800
 801e794:	58020c00 	.word	0x58020c00
 801e798:	58021000 	.word	0x58021000
 801e79c:	58021400 	.word	0x58021400
 801e7a0:	58021800 	.word	0x58021800
 801e7a4:	58021c00 	.word	0x58021c00
 801e7a8:	58022000 	.word	0x58022000
 801e7ac:	58022400 	.word	0x58022400
 801e7b0:	2300      	movs	r3, #0
 801e7b2:	69fa      	ldr	r2, [r7, #28]
 801e7b4:	f002 0203 	and.w	r2, r2, #3
 801e7b8:	0092      	lsls	r2, r2, #2
 801e7ba:	4093      	lsls	r3, r2
 801e7bc:	69ba      	ldr	r2, [r7, #24]
 801e7be:	4313      	orrs	r3, r2
 801e7c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e7c2:	4938      	ldr	r1, [pc, #224]	@ (801e8a4 <HAL_GPIO_Init+0x35c>)
 801e7c4:	69fb      	ldr	r3, [r7, #28]
 801e7c6:	089b      	lsrs	r3, r3, #2
 801e7c8:	3302      	adds	r3, #2
 801e7ca:	69ba      	ldr	r2, [r7, #24]
 801e7cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801e7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e7d4:	681b      	ldr	r3, [r3, #0]
 801e7d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e7d8:	693b      	ldr	r3, [r7, #16]
 801e7da:	43db      	mvns	r3, r3
 801e7dc:	69ba      	ldr	r2, [r7, #24]
 801e7de:	4013      	ands	r3, r2
 801e7e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801e7e2:	683b      	ldr	r3, [r7, #0]
 801e7e4:	685b      	ldr	r3, [r3, #4]
 801e7e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	d003      	beq.n	801e7f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801e7ee:	69ba      	ldr	r2, [r7, #24]
 801e7f0:	693b      	ldr	r3, [r7, #16]
 801e7f2:	4313      	orrs	r3, r2
 801e7f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801e7f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e7fa:	69bb      	ldr	r3, [r7, #24]
 801e7fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801e7fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e802:	685b      	ldr	r3, [r3, #4]
 801e804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e806:	693b      	ldr	r3, [r7, #16]
 801e808:	43db      	mvns	r3, r3
 801e80a:	69ba      	ldr	r2, [r7, #24]
 801e80c:	4013      	ands	r3, r2
 801e80e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801e810:	683b      	ldr	r3, [r7, #0]
 801e812:	685b      	ldr	r3, [r3, #4]
 801e814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d003      	beq.n	801e824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801e81c:	69ba      	ldr	r2, [r7, #24]
 801e81e:	693b      	ldr	r3, [r7, #16]
 801e820:	4313      	orrs	r3, r2
 801e822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801e824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e828:	69bb      	ldr	r3, [r7, #24]
 801e82a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801e82c:	697b      	ldr	r3, [r7, #20]
 801e82e:	685b      	ldr	r3, [r3, #4]
 801e830:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e832:	693b      	ldr	r3, [r7, #16]
 801e834:	43db      	mvns	r3, r3
 801e836:	69ba      	ldr	r2, [r7, #24]
 801e838:	4013      	ands	r3, r2
 801e83a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e83c:	683b      	ldr	r3, [r7, #0]
 801e83e:	685b      	ldr	r3, [r3, #4]
 801e840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e844:	2b00      	cmp	r3, #0
 801e846:	d003      	beq.n	801e850 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801e848:	69ba      	ldr	r2, [r7, #24]
 801e84a:	693b      	ldr	r3, [r7, #16]
 801e84c:	4313      	orrs	r3, r2
 801e84e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801e850:	697b      	ldr	r3, [r7, #20]
 801e852:	69ba      	ldr	r2, [r7, #24]
 801e854:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801e856:	697b      	ldr	r3, [r7, #20]
 801e858:	681b      	ldr	r3, [r3, #0]
 801e85a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e85c:	693b      	ldr	r3, [r7, #16]
 801e85e:	43db      	mvns	r3, r3
 801e860:	69ba      	ldr	r2, [r7, #24]
 801e862:	4013      	ands	r3, r2
 801e864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	685b      	ldr	r3, [r3, #4]
 801e86a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d003      	beq.n	801e87a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801e872:	69ba      	ldr	r2, [r7, #24]
 801e874:	693b      	ldr	r3, [r7, #16]
 801e876:	4313      	orrs	r3, r2
 801e878:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801e87a:	697b      	ldr	r3, [r7, #20]
 801e87c:	69ba      	ldr	r2, [r7, #24]
 801e87e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801e880:	69fb      	ldr	r3, [r7, #28]
 801e882:	3301      	adds	r3, #1
 801e884:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e886:	683b      	ldr	r3, [r7, #0]
 801e888:	681a      	ldr	r2, [r3, #0]
 801e88a:	69fb      	ldr	r3, [r7, #28]
 801e88c:	fa22 f303 	lsr.w	r3, r2, r3
 801e890:	2b00      	cmp	r3, #0
 801e892:	f47f ae63 	bne.w	801e55c <HAL_GPIO_Init+0x14>
  }
}
 801e896:	bf00      	nop
 801e898:	bf00      	nop
 801e89a:	3724      	adds	r7, #36	@ 0x24
 801e89c:	46bd      	mov	sp, r7
 801e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a2:	4770      	bx	lr
 801e8a4:	58000400 	.word	0x58000400

0801e8a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801e8a8:	b480      	push	{r7}
 801e8aa:	b085      	sub	sp, #20
 801e8ac:	af00      	add	r7, sp, #0
 801e8ae:	6078      	str	r0, [r7, #4]
 801e8b0:	460b      	mov	r3, r1
 801e8b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	691a      	ldr	r2, [r3, #16]
 801e8b8:	887b      	ldrh	r3, [r7, #2]
 801e8ba:	4013      	ands	r3, r2
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d002      	beq.n	801e8c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e8c0:	2301      	movs	r3, #1
 801e8c2:	73fb      	strb	r3, [r7, #15]
 801e8c4:	e001      	b.n	801e8ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	3714      	adds	r7, #20
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8d6:	4770      	bx	lr

0801e8d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e8d8:	b480      	push	{r7}
 801e8da:	b083      	sub	sp, #12
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	6078      	str	r0, [r7, #4]
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	807b      	strh	r3, [r7, #2]
 801e8e4:	4613      	mov	r3, r2
 801e8e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801e8e8:	787b      	ldrb	r3, [r7, #1]
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d003      	beq.n	801e8f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801e8ee:	887a      	ldrh	r2, [r7, #2]
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801e8f4:	e003      	b.n	801e8fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801e8f6:	887b      	ldrh	r3, [r7, #2]
 801e8f8:	041a      	lsls	r2, r3, #16
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	619a      	str	r2, [r3, #24]
}
 801e8fe:	bf00      	nop
 801e900:	370c      	adds	r7, #12
 801e902:	46bd      	mov	sp, r7
 801e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e908:	4770      	bx	lr
	...

0801e90c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801e90c:	b580      	push	{r7, lr}
 801e90e:	b084      	sub	sp, #16
 801e910:	af00      	add	r7, sp, #0
 801e912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801e914:	4b19      	ldr	r3, [pc, #100]	@ (801e97c <HAL_PWREx_ConfigSupply+0x70>)
 801e916:	68db      	ldr	r3, [r3, #12]
 801e918:	f003 0304 	and.w	r3, r3, #4
 801e91c:	2b04      	cmp	r3, #4
 801e91e:	d00a      	beq.n	801e936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801e920:	4b16      	ldr	r3, [pc, #88]	@ (801e97c <HAL_PWREx_ConfigSupply+0x70>)
 801e922:	68db      	ldr	r3, [r3, #12]
 801e924:	f003 0307 	and.w	r3, r3, #7
 801e928:	687a      	ldr	r2, [r7, #4]
 801e92a:	429a      	cmp	r2, r3
 801e92c:	d001      	beq.n	801e932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801e92e:	2301      	movs	r3, #1
 801e930:	e01f      	b.n	801e972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801e932:	2300      	movs	r3, #0
 801e934:	e01d      	b.n	801e972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801e936:	4b11      	ldr	r3, [pc, #68]	@ (801e97c <HAL_PWREx_ConfigSupply+0x70>)
 801e938:	68db      	ldr	r3, [r3, #12]
 801e93a:	f023 0207 	bic.w	r2, r3, #7
 801e93e:	490f      	ldr	r1, [pc, #60]	@ (801e97c <HAL_PWREx_ConfigSupply+0x70>)
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	4313      	orrs	r3, r2
 801e944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801e946:	f7fd f8e1 	bl	801bb0c <HAL_GetTick>
 801e94a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e94c:	e009      	b.n	801e962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801e94e:	f7fd f8dd 	bl	801bb0c <HAL_GetTick>
 801e952:	4602      	mov	r2, r0
 801e954:	68fb      	ldr	r3, [r7, #12]
 801e956:	1ad3      	subs	r3, r2, r3
 801e958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801e95c:	d901      	bls.n	801e962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801e95e:	2301      	movs	r3, #1
 801e960:	e007      	b.n	801e972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e962:	4b06      	ldr	r3, [pc, #24]	@ (801e97c <HAL_PWREx_ConfigSupply+0x70>)
 801e964:	685b      	ldr	r3, [r3, #4]
 801e966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e96a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e96e:	d1ee      	bne.n	801e94e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801e970:	2300      	movs	r3, #0
}
 801e972:	4618      	mov	r0, r3
 801e974:	3710      	adds	r7, #16
 801e976:	46bd      	mov	sp, r7
 801e978:	bd80      	pop	{r7, pc}
 801e97a:	bf00      	nop
 801e97c:	58024800 	.word	0x58024800

0801e980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b08c      	sub	sp, #48	@ 0x30
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d102      	bne.n	801e994 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801e98e:	2301      	movs	r3, #1
 801e990:	f000 bc48 	b.w	801f224 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	f003 0301 	and.w	r3, r3, #1
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	f000 8088 	beq.w	801eab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e9a2:	4b99      	ldr	r3, [pc, #612]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801e9a4:	691b      	ldr	r3, [r3, #16]
 801e9a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801e9aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801e9ac:	4b96      	ldr	r3, [pc, #600]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801e9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801e9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9b4:	2b10      	cmp	r3, #16
 801e9b6:	d007      	beq.n	801e9c8 <HAL_RCC_OscConfig+0x48>
 801e9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9ba:	2b18      	cmp	r3, #24
 801e9bc:	d111      	bne.n	801e9e2 <HAL_RCC_OscConfig+0x62>
 801e9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9c0:	f003 0303 	and.w	r3, r3, #3
 801e9c4:	2b02      	cmp	r3, #2
 801e9c6:	d10c      	bne.n	801e9e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801e9c8:	4b8f      	ldr	r3, [pc, #572]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d06d      	beq.n	801eab0 <HAL_RCC_OscConfig+0x130>
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	685b      	ldr	r3, [r3, #4]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d169      	bne.n	801eab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801e9dc:	2301      	movs	r3, #1
 801e9de:	f000 bc21 	b.w	801f224 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	685b      	ldr	r3, [r3, #4]
 801e9e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e9ea:	d106      	bne.n	801e9fa <HAL_RCC_OscConfig+0x7a>
 801e9ec:	4b86      	ldr	r3, [pc, #536]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	4a85      	ldr	r2, [pc, #532]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801e9f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e9f6:	6013      	str	r3, [r2, #0]
 801e9f8:	e02e      	b.n	801ea58 <HAL_RCC_OscConfig+0xd8>
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	685b      	ldr	r3, [r3, #4]
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d10c      	bne.n	801ea1c <HAL_RCC_OscConfig+0x9c>
 801ea02:	4b81      	ldr	r3, [pc, #516]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	4a80      	ldr	r2, [pc, #512]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ea0c:	6013      	str	r3, [r2, #0]
 801ea0e:	4b7e      	ldr	r3, [pc, #504]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	4a7d      	ldr	r2, [pc, #500]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ea18:	6013      	str	r3, [r2, #0]
 801ea1a:	e01d      	b.n	801ea58 <HAL_RCC_OscConfig+0xd8>
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	685b      	ldr	r3, [r3, #4]
 801ea20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ea24:	d10c      	bne.n	801ea40 <HAL_RCC_OscConfig+0xc0>
 801ea26:	4b78      	ldr	r3, [pc, #480]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	4a77      	ldr	r2, [pc, #476]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ea30:	6013      	str	r3, [r2, #0]
 801ea32:	4b75      	ldr	r3, [pc, #468]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	4a74      	ldr	r2, [pc, #464]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ea3c:	6013      	str	r3, [r2, #0]
 801ea3e:	e00b      	b.n	801ea58 <HAL_RCC_OscConfig+0xd8>
 801ea40:	4b71      	ldr	r3, [pc, #452]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea42:	681b      	ldr	r3, [r3, #0]
 801ea44:	4a70      	ldr	r2, [pc, #448]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ea4a:	6013      	str	r3, [r2, #0]
 801ea4c:	4b6e      	ldr	r3, [pc, #440]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	4a6d      	ldr	r2, [pc, #436]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ea56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	685b      	ldr	r3, [r3, #4]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d013      	beq.n	801ea88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ea60:	f7fd f854 	bl	801bb0c <HAL_GetTick>
 801ea64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ea66:	e008      	b.n	801ea7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ea68:	f7fd f850 	bl	801bb0c <HAL_GetTick>
 801ea6c:	4602      	mov	r2, r0
 801ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea70:	1ad3      	subs	r3, r2, r3
 801ea72:	2b64      	cmp	r3, #100	@ 0x64
 801ea74:	d901      	bls.n	801ea7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ea76:	2303      	movs	r3, #3
 801ea78:	e3d4      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ea7a:	4b63      	ldr	r3, [pc, #396]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d0f0      	beq.n	801ea68 <HAL_RCC_OscConfig+0xe8>
 801ea86:	e014      	b.n	801eab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ea88:	f7fd f840 	bl	801bb0c <HAL_GetTick>
 801ea8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ea8e:	e008      	b.n	801eaa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ea90:	f7fd f83c 	bl	801bb0c <HAL_GetTick>
 801ea94:	4602      	mov	r2, r0
 801ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea98:	1ad3      	subs	r3, r2, r3
 801ea9a:	2b64      	cmp	r3, #100	@ 0x64
 801ea9c:	d901      	bls.n	801eaa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801ea9e:	2303      	movs	r3, #3
 801eaa0:	e3c0      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801eaa2:	4b59      	ldr	r3, [pc, #356]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d1f0      	bne.n	801ea90 <HAL_RCC_OscConfig+0x110>
 801eaae:	e000      	b.n	801eab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801eab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	f003 0302 	and.w	r3, r3, #2
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	f000 80ca 	beq.w	801ec54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801eac0:	4b51      	ldr	r3, [pc, #324]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eac2:	691b      	ldr	r3, [r3, #16]
 801eac4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801eac8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801eaca:	4b4f      	ldr	r3, [pc, #316]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eace:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801ead0:	6a3b      	ldr	r3, [r7, #32]
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d007      	beq.n	801eae6 <HAL_RCC_OscConfig+0x166>
 801ead6:	6a3b      	ldr	r3, [r7, #32]
 801ead8:	2b18      	cmp	r3, #24
 801eada:	d156      	bne.n	801eb8a <HAL_RCC_OscConfig+0x20a>
 801eadc:	69fb      	ldr	r3, [r7, #28]
 801eade:	f003 0303 	and.w	r3, r3, #3
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d151      	bne.n	801eb8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eae6:	4b48      	ldr	r3, [pc, #288]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	f003 0304 	and.w	r3, r3, #4
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d005      	beq.n	801eafe <HAL_RCC_OscConfig+0x17e>
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	68db      	ldr	r3, [r3, #12]
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d101      	bne.n	801eafe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801eafa:	2301      	movs	r3, #1
 801eafc:	e392      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801eafe:	4b42      	ldr	r3, [pc, #264]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	f023 0219 	bic.w	r2, r3, #25
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	68db      	ldr	r3, [r3, #12]
 801eb0a:	493f      	ldr	r1, [pc, #252]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb0c:	4313      	orrs	r3, r2
 801eb0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eb10:	f7fc fffc 	bl	801bb0c <HAL_GetTick>
 801eb14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801eb16:	e008      	b.n	801eb2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801eb18:	f7fc fff8 	bl	801bb0c <HAL_GetTick>
 801eb1c:	4602      	mov	r2, r0
 801eb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb20:	1ad3      	subs	r3, r2, r3
 801eb22:	2b02      	cmp	r3, #2
 801eb24:	d901      	bls.n	801eb2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801eb26:	2303      	movs	r3, #3
 801eb28:	e37c      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801eb2a:	4b37      	ldr	r3, [pc, #220]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	f003 0304 	and.w	r3, r3, #4
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d0f0      	beq.n	801eb18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801eb36:	f7fd f819 	bl	801bb6c <HAL_GetREVID>
 801eb3a:	4603      	mov	r3, r0
 801eb3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801eb40:	4293      	cmp	r3, r2
 801eb42:	d817      	bhi.n	801eb74 <HAL_RCC_OscConfig+0x1f4>
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	691b      	ldr	r3, [r3, #16]
 801eb48:	2b40      	cmp	r3, #64	@ 0x40
 801eb4a:	d108      	bne.n	801eb5e <HAL_RCC_OscConfig+0x1de>
 801eb4c:	4b2e      	ldr	r3, [pc, #184]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb4e:	685b      	ldr	r3, [r3, #4]
 801eb50:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801eb54:	4a2c      	ldr	r2, [pc, #176]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801eb5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eb5c:	e07a      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801eb5e:	4b2a      	ldr	r3, [pc, #168]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb60:	685b      	ldr	r3, [r3, #4]
 801eb62:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	691b      	ldr	r3, [r3, #16]
 801eb6a:	031b      	lsls	r3, r3, #12
 801eb6c:	4926      	ldr	r1, [pc, #152]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb6e:	4313      	orrs	r3, r2
 801eb70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eb72:	e06f      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801eb74:	4b24      	ldr	r3, [pc, #144]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb76:	685b      	ldr	r3, [r3, #4]
 801eb78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	691b      	ldr	r3, [r3, #16]
 801eb80:	061b      	lsls	r3, r3, #24
 801eb82:	4921      	ldr	r1, [pc, #132]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb84:	4313      	orrs	r3, r2
 801eb86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eb88:	e064      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	68db      	ldr	r3, [r3, #12]
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d047      	beq.n	801ec22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801eb92:	4b1d      	ldr	r3, [pc, #116]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	f023 0219 	bic.w	r2, r3, #25
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	68db      	ldr	r3, [r3, #12]
 801eb9e:	491a      	ldr	r1, [pc, #104]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801eba0:	4313      	orrs	r3, r2
 801eba2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eba4:	f7fc ffb2 	bl	801bb0c <HAL_GetTick>
 801eba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ebaa:	e008      	b.n	801ebbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ebac:	f7fc ffae 	bl	801bb0c <HAL_GetTick>
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebb4:	1ad3      	subs	r3, r2, r3
 801ebb6:	2b02      	cmp	r3, #2
 801ebb8:	d901      	bls.n	801ebbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801ebba:	2303      	movs	r3, #3
 801ebbc:	e332      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ebbe:	4b12      	ldr	r3, [pc, #72]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f003 0304 	and.w	r3, r3, #4
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d0f0      	beq.n	801ebac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ebca:	f7fc ffcf 	bl	801bb6c <HAL_GetREVID>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ebd4:	4293      	cmp	r3, r2
 801ebd6:	d819      	bhi.n	801ec0c <HAL_RCC_OscConfig+0x28c>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	691b      	ldr	r3, [r3, #16]
 801ebdc:	2b40      	cmp	r3, #64	@ 0x40
 801ebde:	d108      	bne.n	801ebf2 <HAL_RCC_OscConfig+0x272>
 801ebe0:	4b09      	ldr	r3, [pc, #36]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ebe2:	685b      	ldr	r3, [r3, #4]
 801ebe4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ebe8:	4a07      	ldr	r2, [pc, #28]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ebea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ebee:	6053      	str	r3, [r2, #4]
 801ebf0:	e030      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
 801ebf2:	4b05      	ldr	r3, [pc, #20]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ebf4:	685b      	ldr	r3, [r3, #4]
 801ebf6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	691b      	ldr	r3, [r3, #16]
 801ebfe:	031b      	lsls	r3, r3, #12
 801ec00:	4901      	ldr	r1, [pc, #4]	@ (801ec08 <HAL_RCC_OscConfig+0x288>)
 801ec02:	4313      	orrs	r3, r2
 801ec04:	604b      	str	r3, [r1, #4]
 801ec06:	e025      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
 801ec08:	58024400 	.word	0x58024400
 801ec0c:	4b9a      	ldr	r3, [pc, #616]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec0e:	685b      	ldr	r3, [r3, #4]
 801ec10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	691b      	ldr	r3, [r3, #16]
 801ec18:	061b      	lsls	r3, r3, #24
 801ec1a:	4997      	ldr	r1, [pc, #604]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec1c:	4313      	orrs	r3, r2
 801ec1e:	604b      	str	r3, [r1, #4]
 801ec20:	e018      	b.n	801ec54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ec22:	4b95      	ldr	r3, [pc, #596]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec24:	681b      	ldr	r3, [r3, #0]
 801ec26:	4a94      	ldr	r2, [pc, #592]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec28:	f023 0301 	bic.w	r3, r3, #1
 801ec2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ec2e:	f7fc ff6d 	bl	801bb0c <HAL_GetTick>
 801ec32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ec34:	e008      	b.n	801ec48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ec36:	f7fc ff69 	bl	801bb0c <HAL_GetTick>
 801ec3a:	4602      	mov	r2, r0
 801ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec3e:	1ad3      	subs	r3, r2, r3
 801ec40:	2b02      	cmp	r3, #2
 801ec42:	d901      	bls.n	801ec48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801ec44:	2303      	movs	r3, #3
 801ec46:	e2ed      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ec48:	4b8b      	ldr	r3, [pc, #556]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	f003 0304 	and.w	r3, r3, #4
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d1f0      	bne.n	801ec36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	f003 0310 	and.w	r3, r3, #16
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	f000 80a9 	beq.w	801edb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ec62:	4b85      	ldr	r3, [pc, #532]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec64:	691b      	ldr	r3, [r3, #16]
 801ec66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ec6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ec6c:	4b82      	ldr	r3, [pc, #520]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ec72:	69bb      	ldr	r3, [r7, #24]
 801ec74:	2b08      	cmp	r3, #8
 801ec76:	d007      	beq.n	801ec88 <HAL_RCC_OscConfig+0x308>
 801ec78:	69bb      	ldr	r3, [r7, #24]
 801ec7a:	2b18      	cmp	r3, #24
 801ec7c:	d13a      	bne.n	801ecf4 <HAL_RCC_OscConfig+0x374>
 801ec7e:	697b      	ldr	r3, [r7, #20]
 801ec80:	f003 0303 	and.w	r3, r3, #3
 801ec84:	2b01      	cmp	r3, #1
 801ec86:	d135      	bne.n	801ecf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ec88:	4b7b      	ldr	r3, [pc, #492]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d005      	beq.n	801eca0 <HAL_RCC_OscConfig+0x320>
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	69db      	ldr	r3, [r3, #28]
 801ec98:	2b80      	cmp	r3, #128	@ 0x80
 801ec9a:	d001      	beq.n	801eca0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801ec9c:	2301      	movs	r3, #1
 801ec9e:	e2c1      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801eca0:	f7fc ff64 	bl	801bb6c <HAL_GetREVID>
 801eca4:	4603      	mov	r3, r0
 801eca6:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ecaa:	4293      	cmp	r3, r2
 801ecac:	d817      	bhi.n	801ecde <HAL_RCC_OscConfig+0x35e>
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	6a1b      	ldr	r3, [r3, #32]
 801ecb2:	2b20      	cmp	r3, #32
 801ecb4:	d108      	bne.n	801ecc8 <HAL_RCC_OscConfig+0x348>
 801ecb6:	4b70      	ldr	r3, [pc, #448]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecb8:	685b      	ldr	r3, [r3, #4]
 801ecba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ecbe:	4a6e      	ldr	r2, [pc, #440]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ecc4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ecc6:	e075      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ecc8:	4b6b      	ldr	r3, [pc, #428]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecca:	685b      	ldr	r3, [r3, #4]
 801eccc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	6a1b      	ldr	r3, [r3, #32]
 801ecd4:	069b      	lsls	r3, r3, #26
 801ecd6:	4968      	ldr	r1, [pc, #416]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecd8:	4313      	orrs	r3, r2
 801ecda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ecdc:	e06a      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ecde:	4b66      	ldr	r3, [pc, #408]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ece0:	68db      	ldr	r3, [r3, #12]
 801ece2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	6a1b      	ldr	r3, [r3, #32]
 801ecea:	061b      	lsls	r3, r3, #24
 801ecec:	4962      	ldr	r1, [pc, #392]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecee:	4313      	orrs	r3, r2
 801ecf0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ecf2:	e05f      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	69db      	ldr	r3, [r3, #28]
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d042      	beq.n	801ed82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ecfc:	4b5e      	ldr	r3, [pc, #376]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	4a5d      	ldr	r2, [pc, #372]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ed06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ed08:	f7fc ff00 	bl	801bb0c <HAL_GetTick>
 801ed0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ed0e:	e008      	b.n	801ed22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ed10:	f7fc fefc 	bl	801bb0c <HAL_GetTick>
 801ed14:	4602      	mov	r2, r0
 801ed16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed18:	1ad3      	subs	r3, r2, r3
 801ed1a:	2b02      	cmp	r3, #2
 801ed1c:	d901      	bls.n	801ed22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801ed1e:	2303      	movs	r3, #3
 801ed20:	e280      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ed22:	4b55      	ldr	r3, [pc, #340]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d0f0      	beq.n	801ed10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ed2e:	f7fc ff1d 	bl	801bb6c <HAL_GetREVID>
 801ed32:	4603      	mov	r3, r0
 801ed34:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ed38:	4293      	cmp	r3, r2
 801ed3a:	d817      	bhi.n	801ed6c <HAL_RCC_OscConfig+0x3ec>
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	6a1b      	ldr	r3, [r3, #32]
 801ed40:	2b20      	cmp	r3, #32
 801ed42:	d108      	bne.n	801ed56 <HAL_RCC_OscConfig+0x3d6>
 801ed44:	4b4c      	ldr	r3, [pc, #304]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed46:	685b      	ldr	r3, [r3, #4]
 801ed48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ed4c:	4a4a      	ldr	r2, [pc, #296]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ed52:	6053      	str	r3, [r2, #4]
 801ed54:	e02e      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
 801ed56:	4b48      	ldr	r3, [pc, #288]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed58:	685b      	ldr	r3, [r3, #4]
 801ed5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	6a1b      	ldr	r3, [r3, #32]
 801ed62:	069b      	lsls	r3, r3, #26
 801ed64:	4944      	ldr	r1, [pc, #272]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed66:	4313      	orrs	r3, r2
 801ed68:	604b      	str	r3, [r1, #4]
 801ed6a:	e023      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
 801ed6c:	4b42      	ldr	r3, [pc, #264]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed6e:	68db      	ldr	r3, [r3, #12]
 801ed70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	6a1b      	ldr	r3, [r3, #32]
 801ed78:	061b      	lsls	r3, r3, #24
 801ed7a:	493f      	ldr	r1, [pc, #252]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed7c:	4313      	orrs	r3, r2
 801ed7e:	60cb      	str	r3, [r1, #12]
 801ed80:	e018      	b.n	801edb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801ed82:	4b3d      	ldr	r3, [pc, #244]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	4a3c      	ldr	r2, [pc, #240]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ed88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ed8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ed8e:	f7fc febd 	bl	801bb0c <HAL_GetTick>
 801ed92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801ed94:	e008      	b.n	801eda8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ed96:	f7fc feb9 	bl	801bb0c <HAL_GetTick>
 801ed9a:	4602      	mov	r2, r0
 801ed9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed9e:	1ad3      	subs	r3, r2, r3
 801eda0:	2b02      	cmp	r3, #2
 801eda2:	d901      	bls.n	801eda8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801eda4:	2303      	movs	r3, #3
 801eda6:	e23d      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801eda8:	4b33      	ldr	r3, [pc, #204]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d1f0      	bne.n	801ed96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	f003 0308 	and.w	r3, r3, #8
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	d036      	beq.n	801ee2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	695b      	ldr	r3, [r3, #20]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d019      	beq.n	801edfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801edc8:	4b2b      	ldr	r3, [pc, #172]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801edca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801edcc:	4a2a      	ldr	r2, [pc, #168]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801edce:	f043 0301 	orr.w	r3, r3, #1
 801edd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801edd4:	f7fc fe9a 	bl	801bb0c <HAL_GetTick>
 801edd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801edda:	e008      	b.n	801edee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801eddc:	f7fc fe96 	bl	801bb0c <HAL_GetTick>
 801ede0:	4602      	mov	r2, r0
 801ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ede4:	1ad3      	subs	r3, r2, r3
 801ede6:	2b02      	cmp	r3, #2
 801ede8:	d901      	bls.n	801edee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801edea:	2303      	movs	r3, #3
 801edec:	e21a      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801edee:	4b22      	ldr	r3, [pc, #136]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801edf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801edf2:	f003 0302 	and.w	r3, r3, #2
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d0f0      	beq.n	801eddc <HAL_RCC_OscConfig+0x45c>
 801edfa:	e018      	b.n	801ee2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801edfc:	4b1e      	ldr	r3, [pc, #120]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801edfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee00:	4a1d      	ldr	r2, [pc, #116]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ee02:	f023 0301 	bic.w	r3, r3, #1
 801ee06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ee08:	f7fc fe80 	bl	801bb0c <HAL_GetTick>
 801ee0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ee0e:	e008      	b.n	801ee22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ee10:	f7fc fe7c 	bl	801bb0c <HAL_GetTick>
 801ee14:	4602      	mov	r2, r0
 801ee16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee18:	1ad3      	subs	r3, r2, r3
 801ee1a:	2b02      	cmp	r3, #2
 801ee1c:	d901      	bls.n	801ee22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ee1e:	2303      	movs	r3, #3
 801ee20:	e200      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ee22:	4b15      	ldr	r3, [pc, #84]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ee24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee26:	f003 0302 	and.w	r3, r3, #2
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d1f0      	bne.n	801ee10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	f003 0320 	and.w	r3, r3, #32
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d039      	beq.n	801eeae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	699b      	ldr	r3, [r3, #24]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d01c      	beq.n	801ee7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ee42:	4b0d      	ldr	r3, [pc, #52]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	4a0c      	ldr	r2, [pc, #48]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ee48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801ee4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ee4e:	f7fc fe5d 	bl	801bb0c <HAL_GetTick>
 801ee52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ee54:	e008      	b.n	801ee68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ee56:	f7fc fe59 	bl	801bb0c <HAL_GetTick>
 801ee5a:	4602      	mov	r2, r0
 801ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee5e:	1ad3      	subs	r3, r2, r3
 801ee60:	2b02      	cmp	r3, #2
 801ee62:	d901      	bls.n	801ee68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801ee64:	2303      	movs	r3, #3
 801ee66:	e1dd      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ee68:	4b03      	ldr	r3, [pc, #12]	@ (801ee78 <HAL_RCC_OscConfig+0x4f8>)
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d0f0      	beq.n	801ee56 <HAL_RCC_OscConfig+0x4d6>
 801ee74:	e01b      	b.n	801eeae <HAL_RCC_OscConfig+0x52e>
 801ee76:	bf00      	nop
 801ee78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801ee7c:	4b9b      	ldr	r3, [pc, #620]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ee7e:	681b      	ldr	r3, [r3, #0]
 801ee80:	4a9a      	ldr	r2, [pc, #616]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ee82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ee86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ee88:	f7fc fe40 	bl	801bb0c <HAL_GetTick>
 801ee8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801ee8e:	e008      	b.n	801eea2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ee90:	f7fc fe3c 	bl	801bb0c <HAL_GetTick>
 801ee94:	4602      	mov	r2, r0
 801ee96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee98:	1ad3      	subs	r3, r2, r3
 801ee9a:	2b02      	cmp	r3, #2
 801ee9c:	d901      	bls.n	801eea2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801ee9e:	2303      	movs	r3, #3
 801eea0:	e1c0      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801eea2:	4b92      	ldr	r3, [pc, #584]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d1f0      	bne.n	801ee90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	f003 0304 	and.w	r3, r3, #4
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	f000 8081 	beq.w	801efbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801eebc:	4b8c      	ldr	r3, [pc, #560]	@ (801f0f0 <HAL_RCC_OscConfig+0x770>)
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	4a8b      	ldr	r2, [pc, #556]	@ (801f0f0 <HAL_RCC_OscConfig+0x770>)
 801eec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801eec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801eec8:	f7fc fe20 	bl	801bb0c <HAL_GetTick>
 801eecc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801eece:	e008      	b.n	801eee2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801eed0:	f7fc fe1c 	bl	801bb0c <HAL_GetTick>
 801eed4:	4602      	mov	r2, r0
 801eed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eed8:	1ad3      	subs	r3, r2, r3
 801eeda:	2b64      	cmp	r3, #100	@ 0x64
 801eedc:	d901      	bls.n	801eee2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801eede:	2303      	movs	r3, #3
 801eee0:	e1a0      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801eee2:	4b83      	ldr	r3, [pc, #524]	@ (801f0f0 <HAL_RCC_OscConfig+0x770>)
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d0f0      	beq.n	801eed0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	689b      	ldr	r3, [r3, #8]
 801eef2:	2b01      	cmp	r3, #1
 801eef4:	d106      	bne.n	801ef04 <HAL_RCC_OscConfig+0x584>
 801eef6:	4b7d      	ldr	r3, [pc, #500]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801eef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eefa:	4a7c      	ldr	r2, [pc, #496]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801eefc:	f043 0301 	orr.w	r3, r3, #1
 801ef00:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef02:	e02d      	b.n	801ef60 <HAL_RCC_OscConfig+0x5e0>
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	689b      	ldr	r3, [r3, #8]
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d10c      	bne.n	801ef26 <HAL_RCC_OscConfig+0x5a6>
 801ef0c:	4b77      	ldr	r3, [pc, #476]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef10:	4a76      	ldr	r2, [pc, #472]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef12:	f023 0301 	bic.w	r3, r3, #1
 801ef16:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef18:	4b74      	ldr	r3, [pc, #464]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef1c:	4a73      	ldr	r2, [pc, #460]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef1e:	f023 0304 	bic.w	r3, r3, #4
 801ef22:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef24:	e01c      	b.n	801ef60 <HAL_RCC_OscConfig+0x5e0>
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	689b      	ldr	r3, [r3, #8]
 801ef2a:	2b05      	cmp	r3, #5
 801ef2c:	d10c      	bne.n	801ef48 <HAL_RCC_OscConfig+0x5c8>
 801ef2e:	4b6f      	ldr	r3, [pc, #444]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef32:	4a6e      	ldr	r2, [pc, #440]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef34:	f043 0304 	orr.w	r3, r3, #4
 801ef38:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef3a:	4b6c      	ldr	r3, [pc, #432]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef3e:	4a6b      	ldr	r2, [pc, #428]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef40:	f043 0301 	orr.w	r3, r3, #1
 801ef44:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef46:	e00b      	b.n	801ef60 <HAL_RCC_OscConfig+0x5e0>
 801ef48:	4b68      	ldr	r3, [pc, #416]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef4c:	4a67      	ldr	r2, [pc, #412]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef4e:	f023 0301 	bic.w	r3, r3, #1
 801ef52:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef54:	4b65      	ldr	r3, [pc, #404]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef58:	4a64      	ldr	r2, [pc, #400]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef5a:	f023 0304 	bic.w	r3, r3, #4
 801ef5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	689b      	ldr	r3, [r3, #8]
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d015      	beq.n	801ef94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ef68:	f7fc fdd0 	bl	801bb0c <HAL_GetTick>
 801ef6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ef6e:	e00a      	b.n	801ef86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ef70:	f7fc fdcc 	bl	801bb0c <HAL_GetTick>
 801ef74:	4602      	mov	r2, r0
 801ef76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef78:	1ad3      	subs	r3, r2, r3
 801ef7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ef7e:	4293      	cmp	r3, r2
 801ef80:	d901      	bls.n	801ef86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801ef82:	2303      	movs	r3, #3
 801ef84:	e14e      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ef86:	4b59      	ldr	r3, [pc, #356]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801ef88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef8a:	f003 0302 	and.w	r3, r3, #2
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d0ee      	beq.n	801ef70 <HAL_RCC_OscConfig+0x5f0>
 801ef92:	e014      	b.n	801efbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ef94:	f7fc fdba 	bl	801bb0c <HAL_GetTick>
 801ef98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801ef9a:	e00a      	b.n	801efb2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ef9c:	f7fc fdb6 	bl	801bb0c <HAL_GetTick>
 801efa0:	4602      	mov	r2, r0
 801efa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa4:	1ad3      	subs	r3, r2, r3
 801efa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801efaa:	4293      	cmp	r3, r2
 801efac:	d901      	bls.n	801efb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801efae:	2303      	movs	r3, #3
 801efb0:	e138      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801efb2:	4b4e      	ldr	r3, [pc, #312]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801efb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efb6:	f003 0302 	and.w	r3, r3, #2
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d1ee      	bne.n	801ef9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	f000 812d 	beq.w	801f222 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801efc8:	4b48      	ldr	r3, [pc, #288]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801efca:	691b      	ldr	r3, [r3, #16]
 801efcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801efd0:	2b18      	cmp	r3, #24
 801efd2:	f000 80bd 	beq.w	801f150 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801efda:	2b02      	cmp	r3, #2
 801efdc:	f040 809e 	bne.w	801f11c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801efe0:	4b42      	ldr	r3, [pc, #264]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	4a41      	ldr	r2, [pc, #260]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801efe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801efea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801efec:	f7fc fd8e 	bl	801bb0c <HAL_GetTick>
 801eff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801eff2:	e008      	b.n	801f006 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801eff4:	f7fc fd8a 	bl	801bb0c <HAL_GetTick>
 801eff8:	4602      	mov	r2, r0
 801effa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801effc:	1ad3      	subs	r3, r2, r3
 801effe:	2b02      	cmp	r3, #2
 801f000:	d901      	bls.n	801f006 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801f002:	2303      	movs	r3, #3
 801f004:	e10e      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f006:	4b39      	ldr	r3, [pc, #228]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d1f0      	bne.n	801eff4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801f012:	4b36      	ldr	r3, [pc, #216]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f016:	4b37      	ldr	r3, [pc, #220]	@ (801f0f4 <HAL_RCC_OscConfig+0x774>)
 801f018:	4013      	ands	r3, r2
 801f01a:	687a      	ldr	r2, [r7, #4]
 801f01c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f01e:	687a      	ldr	r2, [r7, #4]
 801f020:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801f022:	0112      	lsls	r2, r2, #4
 801f024:	430a      	orrs	r2, r1
 801f026:	4931      	ldr	r1, [pc, #196]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f028:	4313      	orrs	r3, r2
 801f02a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f030:	3b01      	subs	r3, #1
 801f032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f03a:	3b01      	subs	r3, #1
 801f03c:	025b      	lsls	r3, r3, #9
 801f03e:	b29b      	uxth	r3, r3
 801f040:	431a      	orrs	r2, r3
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f046:	3b01      	subs	r3, #1
 801f048:	041b      	lsls	r3, r3, #16
 801f04a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f04e:	431a      	orrs	r2, r3
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f054:	3b01      	subs	r3, #1
 801f056:	061b      	lsls	r3, r3, #24
 801f058:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f05c:	4923      	ldr	r1, [pc, #140]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f05e:	4313      	orrs	r3, r2
 801f060:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801f062:	4b22      	ldr	r3, [pc, #136]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f066:	4a21      	ldr	r2, [pc, #132]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f068:	f023 0301 	bic.w	r3, r3, #1
 801f06c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f06e:	4b1f      	ldr	r3, [pc, #124]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f072:	4b21      	ldr	r3, [pc, #132]	@ (801f0f8 <HAL_RCC_OscConfig+0x778>)
 801f074:	4013      	ands	r3, r2
 801f076:	687a      	ldr	r2, [r7, #4]
 801f078:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f07a:	00d2      	lsls	r2, r2, #3
 801f07c:	491b      	ldr	r1, [pc, #108]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f07e:	4313      	orrs	r3, r2
 801f080:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801f082:	4b1a      	ldr	r3, [pc, #104]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f086:	f023 020c 	bic.w	r2, r3, #12
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f08e:	4917      	ldr	r1, [pc, #92]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f090:	4313      	orrs	r3, r2
 801f092:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801f094:	4b15      	ldr	r3, [pc, #84]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f098:	f023 0202 	bic.w	r2, r3, #2
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f0a0:	4912      	ldr	r1, [pc, #72]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0a2:	4313      	orrs	r3, r2
 801f0a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801f0a6:	4b11      	ldr	r3, [pc, #68]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0aa:	4a10      	ldr	r2, [pc, #64]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f0b2:	4b0e      	ldr	r3, [pc, #56]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0b6:	4a0d      	ldr	r2, [pc, #52]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f0bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801f0be:	4b0b      	ldr	r3, [pc, #44]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0c2:	4a0a      	ldr	r2, [pc, #40]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801f0ca:	4b08      	ldr	r3, [pc, #32]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0ce:	4a07      	ldr	r2, [pc, #28]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0d0:	f043 0301 	orr.w	r3, r3, #1
 801f0d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f0d6:	4b05      	ldr	r3, [pc, #20]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0d8:	681b      	ldr	r3, [r3, #0]
 801f0da:	4a04      	ldr	r2, [pc, #16]	@ (801f0ec <HAL_RCC_OscConfig+0x76c>)
 801f0dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f0e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f0e2:	f7fc fd13 	bl	801bb0c <HAL_GetTick>
 801f0e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f0e8:	e011      	b.n	801f10e <HAL_RCC_OscConfig+0x78e>
 801f0ea:	bf00      	nop
 801f0ec:	58024400 	.word	0x58024400
 801f0f0:	58024800 	.word	0x58024800
 801f0f4:	fffffc0c 	.word	0xfffffc0c
 801f0f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f0fc:	f7fc fd06 	bl	801bb0c <HAL_GetTick>
 801f100:	4602      	mov	r2, r0
 801f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f104:	1ad3      	subs	r3, r2, r3
 801f106:	2b02      	cmp	r3, #2
 801f108:	d901      	bls.n	801f10e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801f10a:	2303      	movs	r3, #3
 801f10c:	e08a      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f10e:	4b47      	ldr	r3, [pc, #284]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f116:	2b00      	cmp	r3, #0
 801f118:	d0f0      	beq.n	801f0fc <HAL_RCC_OscConfig+0x77c>
 801f11a:	e082      	b.n	801f222 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f11c:	4b43      	ldr	r3, [pc, #268]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	4a42      	ldr	r2, [pc, #264]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f122:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f128:	f7fc fcf0 	bl	801bb0c <HAL_GetTick>
 801f12c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f12e:	e008      	b.n	801f142 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f130:	f7fc fcec 	bl	801bb0c <HAL_GetTick>
 801f134:	4602      	mov	r2, r0
 801f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f138:	1ad3      	subs	r3, r2, r3
 801f13a:	2b02      	cmp	r3, #2
 801f13c:	d901      	bls.n	801f142 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801f13e:	2303      	movs	r3, #3
 801f140:	e070      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f142:	4b3a      	ldr	r3, [pc, #232]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d1f0      	bne.n	801f130 <HAL_RCC_OscConfig+0x7b0>
 801f14e:	e068      	b.n	801f222 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801f150:	4b36      	ldr	r3, [pc, #216]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f154:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801f156:	4b35      	ldr	r3, [pc, #212]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f15a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f160:	2b01      	cmp	r3, #1
 801f162:	d031      	beq.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f164:	693b      	ldr	r3, [r7, #16]
 801f166:	f003 0203 	and.w	r2, r3, #3
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f16e:	429a      	cmp	r2, r3
 801f170:	d12a      	bne.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	091b      	lsrs	r3, r3, #4
 801f176:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f17e:	429a      	cmp	r2, r3
 801f180:	d122      	bne.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f182:	68fb      	ldr	r3, [r7, #12]
 801f184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f18c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f18e:	429a      	cmp	r2, r3
 801f190:	d11a      	bne.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	0a5b      	lsrs	r3, r3, #9
 801f196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f19e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f1a0:	429a      	cmp	r2, r3
 801f1a2:	d111      	bne.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f1a4:	68fb      	ldr	r3, [r7, #12]
 801f1a6:	0c1b      	lsrs	r3, r3, #16
 801f1a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f1b2:	429a      	cmp	r2, r3
 801f1b4:	d108      	bne.n	801f1c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	0e1b      	lsrs	r3, r3, #24
 801f1ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f1c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f1c4:	429a      	cmp	r2, r3
 801f1c6:	d001      	beq.n	801f1cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801f1c8:	2301      	movs	r3, #1
 801f1ca:	e02b      	b.n	801f224 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801f1cc:	4b17      	ldr	r3, [pc, #92]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1d0:	08db      	lsrs	r3, r3, #3
 801f1d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f1d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f1dc:	693a      	ldr	r2, [r7, #16]
 801f1de:	429a      	cmp	r2, r3
 801f1e0:	d01f      	beq.n	801f222 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801f1e2:	4b12      	ldr	r3, [pc, #72]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1e6:	4a11      	ldr	r2, [pc, #68]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f1e8:	f023 0301 	bic.w	r3, r3, #1
 801f1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801f1ee:	f7fc fc8d 	bl	801bb0c <HAL_GetTick>
 801f1f2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801f1f4:	bf00      	nop
 801f1f6:	f7fc fc89 	bl	801bb0c <HAL_GetTick>
 801f1fa:	4602      	mov	r2, r0
 801f1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1fe:	4293      	cmp	r3, r2
 801f200:	d0f9      	beq.n	801f1f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f202:	4b0a      	ldr	r3, [pc, #40]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f206:	4b0a      	ldr	r3, [pc, #40]	@ (801f230 <HAL_RCC_OscConfig+0x8b0>)
 801f208:	4013      	ands	r3, r2
 801f20a:	687a      	ldr	r2, [r7, #4]
 801f20c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f20e:	00d2      	lsls	r2, r2, #3
 801f210:	4906      	ldr	r1, [pc, #24]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f212:	4313      	orrs	r3, r2
 801f214:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801f216:	4b05      	ldr	r3, [pc, #20]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f21a:	4a04      	ldr	r2, [pc, #16]	@ (801f22c <HAL_RCC_OscConfig+0x8ac>)
 801f21c:	f043 0301 	orr.w	r3, r3, #1
 801f220:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801f222:	2300      	movs	r3, #0
}
 801f224:	4618      	mov	r0, r3
 801f226:	3730      	adds	r7, #48	@ 0x30
 801f228:	46bd      	mov	sp, r7
 801f22a:	bd80      	pop	{r7, pc}
 801f22c:	58024400 	.word	0x58024400
 801f230:	ffff0007 	.word	0xffff0007

0801f234 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f234:	b580      	push	{r7, lr}
 801f236:	b086      	sub	sp, #24
 801f238:	af00      	add	r7, sp, #0
 801f23a:	6078      	str	r0, [r7, #4]
 801f23c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	2b00      	cmp	r3, #0
 801f242:	d101      	bne.n	801f248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f244:	2301      	movs	r3, #1
 801f246:	e19c      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801f248:	4b8a      	ldr	r3, [pc, #552]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	f003 030f 	and.w	r3, r3, #15
 801f250:	683a      	ldr	r2, [r7, #0]
 801f252:	429a      	cmp	r2, r3
 801f254:	d910      	bls.n	801f278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f256:	4b87      	ldr	r3, [pc, #540]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	f023 020f 	bic.w	r2, r3, #15
 801f25e:	4985      	ldr	r1, [pc, #532]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f260:	683b      	ldr	r3, [r7, #0]
 801f262:	4313      	orrs	r3, r2
 801f264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f266:	4b83      	ldr	r3, [pc, #524]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	f003 030f 	and.w	r3, r3, #15
 801f26e:	683a      	ldr	r2, [r7, #0]
 801f270:	429a      	cmp	r2, r3
 801f272:	d001      	beq.n	801f278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801f274:	2301      	movs	r3, #1
 801f276:	e184      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f003 0304 	and.w	r3, r3, #4
 801f280:	2b00      	cmp	r3, #0
 801f282:	d010      	beq.n	801f2a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	691a      	ldr	r2, [r3, #16]
 801f288:	4b7b      	ldr	r3, [pc, #492]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f28a:	699b      	ldr	r3, [r3, #24]
 801f28c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f290:	429a      	cmp	r2, r3
 801f292:	d908      	bls.n	801f2a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f294:	4b78      	ldr	r3, [pc, #480]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f296:	699b      	ldr	r3, [r3, #24]
 801f298:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	691b      	ldr	r3, [r3, #16]
 801f2a0:	4975      	ldr	r1, [pc, #468]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2a2:	4313      	orrs	r3, r2
 801f2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	f003 0308 	and.w	r3, r3, #8
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	d010      	beq.n	801f2d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	695a      	ldr	r2, [r3, #20]
 801f2b6:	4b70      	ldr	r3, [pc, #448]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2b8:	69db      	ldr	r3, [r3, #28]
 801f2ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f2be:	429a      	cmp	r2, r3
 801f2c0:	d908      	bls.n	801f2d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f2c2:	4b6d      	ldr	r3, [pc, #436]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2c4:	69db      	ldr	r3, [r3, #28]
 801f2c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	695b      	ldr	r3, [r3, #20]
 801f2ce:	496a      	ldr	r1, [pc, #424]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2d0:	4313      	orrs	r3, r2
 801f2d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	f003 0310 	and.w	r3, r3, #16
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d010      	beq.n	801f302 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	699a      	ldr	r2, [r3, #24]
 801f2e4:	4b64      	ldr	r3, [pc, #400]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2e6:	69db      	ldr	r3, [r3, #28]
 801f2e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f2ec:	429a      	cmp	r2, r3
 801f2ee:	d908      	bls.n	801f302 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f2f0:	4b61      	ldr	r3, [pc, #388]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2f2:	69db      	ldr	r3, [r3, #28]
 801f2f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	699b      	ldr	r3, [r3, #24]
 801f2fc:	495e      	ldr	r1, [pc, #376]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f2fe:	4313      	orrs	r3, r2
 801f300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	f003 0320 	and.w	r3, r3, #32
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d010      	beq.n	801f330 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	69da      	ldr	r2, [r3, #28]
 801f312:	4b59      	ldr	r3, [pc, #356]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f314:	6a1b      	ldr	r3, [r3, #32]
 801f316:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f31a:	429a      	cmp	r2, r3
 801f31c:	d908      	bls.n	801f330 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f31e:	4b56      	ldr	r3, [pc, #344]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f320:	6a1b      	ldr	r3, [r3, #32]
 801f322:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	69db      	ldr	r3, [r3, #28]
 801f32a:	4953      	ldr	r1, [pc, #332]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f32c:	4313      	orrs	r3, r2
 801f32e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	f003 0302 	and.w	r3, r3, #2
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d010      	beq.n	801f35e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	68da      	ldr	r2, [r3, #12]
 801f340:	4b4d      	ldr	r3, [pc, #308]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f342:	699b      	ldr	r3, [r3, #24]
 801f344:	f003 030f 	and.w	r3, r3, #15
 801f348:	429a      	cmp	r2, r3
 801f34a:	d908      	bls.n	801f35e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f34c:	4b4a      	ldr	r3, [pc, #296]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f34e:	699b      	ldr	r3, [r3, #24]
 801f350:	f023 020f 	bic.w	r2, r3, #15
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	68db      	ldr	r3, [r3, #12]
 801f358:	4947      	ldr	r1, [pc, #284]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f35a:	4313      	orrs	r3, r2
 801f35c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	681b      	ldr	r3, [r3, #0]
 801f362:	f003 0301 	and.w	r3, r3, #1
 801f366:	2b00      	cmp	r3, #0
 801f368:	d055      	beq.n	801f416 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801f36a:	4b43      	ldr	r3, [pc, #268]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f36c:	699b      	ldr	r3, [r3, #24]
 801f36e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	689b      	ldr	r3, [r3, #8]
 801f376:	4940      	ldr	r1, [pc, #256]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f378:	4313      	orrs	r3, r2
 801f37a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	685b      	ldr	r3, [r3, #4]
 801f380:	2b02      	cmp	r3, #2
 801f382:	d107      	bne.n	801f394 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801f384:	4b3c      	ldr	r3, [pc, #240]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d121      	bne.n	801f3d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f390:	2301      	movs	r3, #1
 801f392:	e0f6      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	685b      	ldr	r3, [r3, #4]
 801f398:	2b03      	cmp	r3, #3
 801f39a:	d107      	bne.n	801f3ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f39c:	4b36      	ldr	r3, [pc, #216]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d115      	bne.n	801f3d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f3a8:	2301      	movs	r3, #1
 801f3aa:	e0ea      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801f3ac:	687b      	ldr	r3, [r7, #4]
 801f3ae:	685b      	ldr	r3, [r3, #4]
 801f3b0:	2b01      	cmp	r3, #1
 801f3b2:	d107      	bne.n	801f3c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801f3b4:	4b30      	ldr	r3, [pc, #192]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d109      	bne.n	801f3d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f3c0:	2301      	movs	r3, #1
 801f3c2:	e0de      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801f3c4:	4b2c      	ldr	r3, [pc, #176]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	f003 0304 	and.w	r3, r3, #4
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d101      	bne.n	801f3d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f3d0:	2301      	movs	r3, #1
 801f3d2:	e0d6      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801f3d4:	4b28      	ldr	r3, [pc, #160]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f3d6:	691b      	ldr	r3, [r3, #16]
 801f3d8:	f023 0207 	bic.w	r2, r3, #7
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	685b      	ldr	r3, [r3, #4]
 801f3e0:	4925      	ldr	r1, [pc, #148]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f3e2:	4313      	orrs	r3, r2
 801f3e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f3e6:	f7fc fb91 	bl	801bb0c <HAL_GetTick>
 801f3ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f3ec:	e00a      	b.n	801f404 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f3ee:	f7fc fb8d 	bl	801bb0c <HAL_GetTick>
 801f3f2:	4602      	mov	r2, r0
 801f3f4:	697b      	ldr	r3, [r7, #20]
 801f3f6:	1ad3      	subs	r3, r2, r3
 801f3f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f3fc:	4293      	cmp	r3, r2
 801f3fe:	d901      	bls.n	801f404 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801f400:	2303      	movs	r3, #3
 801f402:	e0be      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f404:	4b1c      	ldr	r3, [pc, #112]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f406:	691b      	ldr	r3, [r3, #16]
 801f408:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	685b      	ldr	r3, [r3, #4]
 801f410:	00db      	lsls	r3, r3, #3
 801f412:	429a      	cmp	r2, r3
 801f414:	d1eb      	bne.n	801f3ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	f003 0302 	and.w	r3, r3, #2
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d010      	beq.n	801f444 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	68da      	ldr	r2, [r3, #12]
 801f426:	4b14      	ldr	r3, [pc, #80]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f428:	699b      	ldr	r3, [r3, #24]
 801f42a:	f003 030f 	and.w	r3, r3, #15
 801f42e:	429a      	cmp	r2, r3
 801f430:	d208      	bcs.n	801f444 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f432:	4b11      	ldr	r3, [pc, #68]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f434:	699b      	ldr	r3, [r3, #24]
 801f436:	f023 020f 	bic.w	r2, r3, #15
 801f43a:	687b      	ldr	r3, [r7, #4]
 801f43c:	68db      	ldr	r3, [r3, #12]
 801f43e:	490e      	ldr	r1, [pc, #56]	@ (801f478 <HAL_RCC_ClockConfig+0x244>)
 801f440:	4313      	orrs	r3, r2
 801f442:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801f444:	4b0b      	ldr	r3, [pc, #44]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	f003 030f 	and.w	r3, r3, #15
 801f44c:	683a      	ldr	r2, [r7, #0]
 801f44e:	429a      	cmp	r2, r3
 801f450:	d214      	bcs.n	801f47c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f452:	4b08      	ldr	r3, [pc, #32]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	f023 020f 	bic.w	r2, r3, #15
 801f45a:	4906      	ldr	r1, [pc, #24]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f45c:	683b      	ldr	r3, [r7, #0]
 801f45e:	4313      	orrs	r3, r2
 801f460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f462:	4b04      	ldr	r3, [pc, #16]	@ (801f474 <HAL_RCC_ClockConfig+0x240>)
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	f003 030f 	and.w	r3, r3, #15
 801f46a:	683a      	ldr	r2, [r7, #0]
 801f46c:	429a      	cmp	r2, r3
 801f46e:	d005      	beq.n	801f47c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801f470:	2301      	movs	r3, #1
 801f472:	e086      	b.n	801f582 <HAL_RCC_ClockConfig+0x34e>
 801f474:	52002000 	.word	0x52002000
 801f478:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	f003 0304 	and.w	r3, r3, #4
 801f484:	2b00      	cmp	r3, #0
 801f486:	d010      	beq.n	801f4aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	691a      	ldr	r2, [r3, #16]
 801f48c:	4b3f      	ldr	r3, [pc, #252]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f48e:	699b      	ldr	r3, [r3, #24]
 801f490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f494:	429a      	cmp	r2, r3
 801f496:	d208      	bcs.n	801f4aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f498:	4b3c      	ldr	r3, [pc, #240]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f49a:	699b      	ldr	r3, [r3, #24]
 801f49c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	691b      	ldr	r3, [r3, #16]
 801f4a4:	4939      	ldr	r1, [pc, #228]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4a6:	4313      	orrs	r3, r2
 801f4a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	f003 0308 	and.w	r3, r3, #8
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d010      	beq.n	801f4d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	695a      	ldr	r2, [r3, #20]
 801f4ba:	4b34      	ldr	r3, [pc, #208]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4bc:	69db      	ldr	r3, [r3, #28]
 801f4be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f4c2:	429a      	cmp	r2, r3
 801f4c4:	d208      	bcs.n	801f4d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f4c6:	4b31      	ldr	r3, [pc, #196]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4c8:	69db      	ldr	r3, [r3, #28]
 801f4ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	695b      	ldr	r3, [r3, #20]
 801f4d2:	492e      	ldr	r1, [pc, #184]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4d4:	4313      	orrs	r3, r2
 801f4d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	f003 0310 	and.w	r3, r3, #16
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d010      	beq.n	801f506 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	699a      	ldr	r2, [r3, #24]
 801f4e8:	4b28      	ldr	r3, [pc, #160]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4ea:	69db      	ldr	r3, [r3, #28]
 801f4ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f4f0:	429a      	cmp	r2, r3
 801f4f2:	d208      	bcs.n	801f506 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f4f4:	4b25      	ldr	r3, [pc, #148]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f4f6:	69db      	ldr	r3, [r3, #28]
 801f4f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	699b      	ldr	r3, [r3, #24]
 801f500:	4922      	ldr	r1, [pc, #136]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f502:	4313      	orrs	r3, r2
 801f504:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	f003 0320 	and.w	r3, r3, #32
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d010      	beq.n	801f534 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	69da      	ldr	r2, [r3, #28]
 801f516:	4b1d      	ldr	r3, [pc, #116]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f518:	6a1b      	ldr	r3, [r3, #32]
 801f51a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f51e:	429a      	cmp	r2, r3
 801f520:	d208      	bcs.n	801f534 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f522:	4b1a      	ldr	r3, [pc, #104]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f524:	6a1b      	ldr	r3, [r3, #32]
 801f526:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	69db      	ldr	r3, [r3, #28]
 801f52e:	4917      	ldr	r1, [pc, #92]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f530:	4313      	orrs	r3, r2
 801f532:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801f534:	f000 f834 	bl	801f5a0 <HAL_RCC_GetSysClockFreq>
 801f538:	4602      	mov	r2, r0
 801f53a:	4b14      	ldr	r3, [pc, #80]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f53c:	699b      	ldr	r3, [r3, #24]
 801f53e:	0a1b      	lsrs	r3, r3, #8
 801f540:	f003 030f 	and.w	r3, r3, #15
 801f544:	4912      	ldr	r1, [pc, #72]	@ (801f590 <HAL_RCC_ClockConfig+0x35c>)
 801f546:	5ccb      	ldrb	r3, [r1, r3]
 801f548:	f003 031f 	and.w	r3, r3, #31
 801f54c:	fa22 f303 	lsr.w	r3, r2, r3
 801f550:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f552:	4b0e      	ldr	r3, [pc, #56]	@ (801f58c <HAL_RCC_ClockConfig+0x358>)
 801f554:	699b      	ldr	r3, [r3, #24]
 801f556:	f003 030f 	and.w	r3, r3, #15
 801f55a:	4a0d      	ldr	r2, [pc, #52]	@ (801f590 <HAL_RCC_ClockConfig+0x35c>)
 801f55c:	5cd3      	ldrb	r3, [r2, r3]
 801f55e:	f003 031f 	and.w	r3, r3, #31
 801f562:	693a      	ldr	r2, [r7, #16]
 801f564:	fa22 f303 	lsr.w	r3, r2, r3
 801f568:	4a0a      	ldr	r2, [pc, #40]	@ (801f594 <HAL_RCC_ClockConfig+0x360>)
 801f56a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f56c:	4a0a      	ldr	r2, [pc, #40]	@ (801f598 <HAL_RCC_ClockConfig+0x364>)
 801f56e:	693b      	ldr	r3, [r7, #16]
 801f570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801f572:	4b0a      	ldr	r3, [pc, #40]	@ (801f59c <HAL_RCC_ClockConfig+0x368>)
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	4618      	mov	r0, r3
 801f578:	f7fc fa7e 	bl	801ba78 <HAL_InitTick>
 801f57c:	4603      	mov	r3, r0
 801f57e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801f580:	7bfb      	ldrb	r3, [r7, #15]
}
 801f582:	4618      	mov	r0, r3
 801f584:	3718      	adds	r7, #24
 801f586:	46bd      	mov	sp, r7
 801f588:	bd80      	pop	{r7, pc}
 801f58a:	bf00      	nop
 801f58c:	58024400 	.word	0x58024400
 801f590:	0802b320 	.word	0x0802b320
 801f594:	24000020 	.word	0x24000020
 801f598:	2400001c 	.word	0x2400001c
 801f59c:	24000024 	.word	0x24000024

0801f5a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f5a0:	b480      	push	{r7}
 801f5a2:	b089      	sub	sp, #36	@ 0x24
 801f5a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f5a6:	4bb3      	ldr	r3, [pc, #716]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f5a8:	691b      	ldr	r3, [r3, #16]
 801f5aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f5ae:	2b18      	cmp	r3, #24
 801f5b0:	f200 8155 	bhi.w	801f85e <HAL_RCC_GetSysClockFreq+0x2be>
 801f5b4:	a201      	add	r2, pc, #4	@ (adr r2, 801f5bc <HAL_RCC_GetSysClockFreq+0x1c>)
 801f5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f5ba:	bf00      	nop
 801f5bc:	0801f621 	.word	0x0801f621
 801f5c0:	0801f85f 	.word	0x0801f85f
 801f5c4:	0801f85f 	.word	0x0801f85f
 801f5c8:	0801f85f 	.word	0x0801f85f
 801f5cc:	0801f85f 	.word	0x0801f85f
 801f5d0:	0801f85f 	.word	0x0801f85f
 801f5d4:	0801f85f 	.word	0x0801f85f
 801f5d8:	0801f85f 	.word	0x0801f85f
 801f5dc:	0801f647 	.word	0x0801f647
 801f5e0:	0801f85f 	.word	0x0801f85f
 801f5e4:	0801f85f 	.word	0x0801f85f
 801f5e8:	0801f85f 	.word	0x0801f85f
 801f5ec:	0801f85f 	.word	0x0801f85f
 801f5f0:	0801f85f 	.word	0x0801f85f
 801f5f4:	0801f85f 	.word	0x0801f85f
 801f5f8:	0801f85f 	.word	0x0801f85f
 801f5fc:	0801f64d 	.word	0x0801f64d
 801f600:	0801f85f 	.word	0x0801f85f
 801f604:	0801f85f 	.word	0x0801f85f
 801f608:	0801f85f 	.word	0x0801f85f
 801f60c:	0801f85f 	.word	0x0801f85f
 801f610:	0801f85f 	.word	0x0801f85f
 801f614:	0801f85f 	.word	0x0801f85f
 801f618:	0801f85f 	.word	0x0801f85f
 801f61c:	0801f653 	.word	0x0801f653
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f620:	4b94      	ldr	r3, [pc, #592]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	f003 0320 	and.w	r3, r3, #32
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d009      	beq.n	801f640 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f62c:	4b91      	ldr	r3, [pc, #580]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	08db      	lsrs	r3, r3, #3
 801f632:	f003 0303 	and.w	r3, r3, #3
 801f636:	4a90      	ldr	r2, [pc, #576]	@ (801f878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f638:	fa22 f303 	lsr.w	r3, r2, r3
 801f63c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801f63e:	e111      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801f640:	4b8d      	ldr	r3, [pc, #564]	@ (801f878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f642:	61bb      	str	r3, [r7, #24]
      break;
 801f644:	e10e      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801f646:	4b8d      	ldr	r3, [pc, #564]	@ (801f87c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f648:	61bb      	str	r3, [r7, #24]
      break;
 801f64a:	e10b      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801f64c:	4b8c      	ldr	r3, [pc, #560]	@ (801f880 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801f64e:	61bb      	str	r3, [r7, #24]
      break;
 801f650:	e108      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f652:	4b88      	ldr	r3, [pc, #544]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f656:	f003 0303 	and.w	r3, r3, #3
 801f65a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801f65c:	4b85      	ldr	r3, [pc, #532]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f660:	091b      	lsrs	r3, r3, #4
 801f662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f666:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801f668:	4b82      	ldr	r3, [pc, #520]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f66c:	f003 0301 	and.w	r3, r3, #1
 801f670:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801f672:	4b80      	ldr	r3, [pc, #512]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f676:	08db      	lsrs	r3, r3, #3
 801f678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f67c:	68fa      	ldr	r2, [r7, #12]
 801f67e:	fb02 f303 	mul.w	r3, r2, r3
 801f682:	ee07 3a90 	vmov	s15, r3
 801f686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f68a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801f68e:	693b      	ldr	r3, [r7, #16]
 801f690:	2b00      	cmp	r3, #0
 801f692:	f000 80e1 	beq.w	801f858 <HAL_RCC_GetSysClockFreq+0x2b8>
 801f696:	697b      	ldr	r3, [r7, #20]
 801f698:	2b02      	cmp	r3, #2
 801f69a:	f000 8083 	beq.w	801f7a4 <HAL_RCC_GetSysClockFreq+0x204>
 801f69e:	697b      	ldr	r3, [r7, #20]
 801f6a0:	2b02      	cmp	r3, #2
 801f6a2:	f200 80a1 	bhi.w	801f7e8 <HAL_RCC_GetSysClockFreq+0x248>
 801f6a6:	697b      	ldr	r3, [r7, #20]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d003      	beq.n	801f6b4 <HAL_RCC_GetSysClockFreq+0x114>
 801f6ac:	697b      	ldr	r3, [r7, #20]
 801f6ae:	2b01      	cmp	r3, #1
 801f6b0:	d056      	beq.n	801f760 <HAL_RCC_GetSysClockFreq+0x1c0>
 801f6b2:	e099      	b.n	801f7e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f6b4:	4b6f      	ldr	r3, [pc, #444]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	f003 0320 	and.w	r3, r3, #32
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d02d      	beq.n	801f71c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f6c0:	4b6c      	ldr	r3, [pc, #432]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	08db      	lsrs	r3, r3, #3
 801f6c6:	f003 0303 	and.w	r3, r3, #3
 801f6ca:	4a6b      	ldr	r2, [pc, #428]	@ (801f878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f6cc:	fa22 f303 	lsr.w	r3, r2, r3
 801f6d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	ee07 3a90 	vmov	s15, r3
 801f6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6dc:	693b      	ldr	r3, [r7, #16]
 801f6de:	ee07 3a90 	vmov	s15, r3
 801f6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6ea:	4b62      	ldr	r3, [pc, #392]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6f2:	ee07 3a90 	vmov	s15, r3
 801f6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6fa:	ed97 6a02 	vldr	s12, [r7, #8]
 801f6fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801f884 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f70a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f712:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f716:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801f71a:	e087      	b.n	801f82c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f71c:	693b      	ldr	r3, [r7, #16]
 801f71e:	ee07 3a90 	vmov	s15, r3
 801f722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f726:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801f888 <HAL_RCC_GetSysClockFreq+0x2e8>
 801f72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f72e:	4b51      	ldr	r3, [pc, #324]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f736:	ee07 3a90 	vmov	s15, r3
 801f73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f73e:	ed97 6a02 	vldr	s12, [r7, #8]
 801f742:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801f884 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f74e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f756:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f75a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f75e:	e065      	b.n	801f82c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f760:	693b      	ldr	r3, [r7, #16]
 801f762:	ee07 3a90 	vmov	s15, r3
 801f766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f76a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801f88c <HAL_RCC_GetSysClockFreq+0x2ec>
 801f76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f772:	4b40      	ldr	r3, [pc, #256]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f77a:	ee07 3a90 	vmov	s15, r3
 801f77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f782:	ed97 6a02 	vldr	s12, [r7, #8]
 801f786:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f884 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f79e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f7a2:	e043      	b.n	801f82c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7a4:	693b      	ldr	r3, [r7, #16]
 801f7a6:	ee07 3a90 	vmov	s15, r3
 801f7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801f890 <HAL_RCC_GetSysClockFreq+0x2f0>
 801f7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7b6:	4b2f      	ldr	r3, [pc, #188]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7be:	ee07 3a90 	vmov	s15, r3
 801f7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7c6:	ed97 6a02 	vldr	s12, [r7, #8]
 801f7ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801f884 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f7e6:	e021      	b.n	801f82c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7e8:	693b      	ldr	r3, [r7, #16]
 801f7ea:	ee07 3a90 	vmov	s15, r3
 801f7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801f88c <HAL_RCC_GetSysClockFreq+0x2ec>
 801f7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7fa:	4b1e      	ldr	r3, [pc, #120]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f802:	ee07 3a90 	vmov	s15, r3
 801f806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f80a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f80e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801f884 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f822:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f826:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f82a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801f82c:	4b11      	ldr	r3, [pc, #68]	@ (801f874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f830:	0a5b      	lsrs	r3, r3, #9
 801f832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f836:	3301      	adds	r3, #1
 801f838:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801f83a:	683b      	ldr	r3, [r7, #0]
 801f83c:	ee07 3a90 	vmov	s15, r3
 801f840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f844:	edd7 6a07 	vldr	s13, [r7, #28]
 801f848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f84c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f850:	ee17 3a90 	vmov	r3, s15
 801f854:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801f856:	e005      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801f858:	2300      	movs	r3, #0
 801f85a:	61bb      	str	r3, [r7, #24]
      break;
 801f85c:	e002      	b.n	801f864 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801f85e:	4b07      	ldr	r3, [pc, #28]	@ (801f87c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f860:	61bb      	str	r3, [r7, #24]
      break;
 801f862:	bf00      	nop
  }

  return sysclockfreq;
 801f864:	69bb      	ldr	r3, [r7, #24]
}
 801f866:	4618      	mov	r0, r3
 801f868:	3724      	adds	r7, #36	@ 0x24
 801f86a:	46bd      	mov	sp, r7
 801f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f870:	4770      	bx	lr
 801f872:	bf00      	nop
 801f874:	58024400 	.word	0x58024400
 801f878:	03d09000 	.word	0x03d09000
 801f87c:	003d0900 	.word	0x003d0900
 801f880:	017d7840 	.word	0x017d7840
 801f884:	46000000 	.word	0x46000000
 801f888:	4c742400 	.word	0x4c742400
 801f88c:	4a742400 	.word	0x4a742400
 801f890:	4bbebc20 	.word	0x4bbebc20

0801f894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f894:	b580      	push	{r7, lr}
 801f896:	b082      	sub	sp, #8
 801f898:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801f89a:	f7ff fe81 	bl	801f5a0 <HAL_RCC_GetSysClockFreq>
 801f89e:	4602      	mov	r2, r0
 801f8a0:	4b10      	ldr	r3, [pc, #64]	@ (801f8e4 <HAL_RCC_GetHCLKFreq+0x50>)
 801f8a2:	699b      	ldr	r3, [r3, #24]
 801f8a4:	0a1b      	lsrs	r3, r3, #8
 801f8a6:	f003 030f 	and.w	r3, r3, #15
 801f8aa:	490f      	ldr	r1, [pc, #60]	@ (801f8e8 <HAL_RCC_GetHCLKFreq+0x54>)
 801f8ac:	5ccb      	ldrb	r3, [r1, r3]
 801f8ae:	f003 031f 	and.w	r3, r3, #31
 801f8b2:	fa22 f303 	lsr.w	r3, r2, r3
 801f8b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f8b8:	4b0a      	ldr	r3, [pc, #40]	@ (801f8e4 <HAL_RCC_GetHCLKFreq+0x50>)
 801f8ba:	699b      	ldr	r3, [r3, #24]
 801f8bc:	f003 030f 	and.w	r3, r3, #15
 801f8c0:	4a09      	ldr	r2, [pc, #36]	@ (801f8e8 <HAL_RCC_GetHCLKFreq+0x54>)
 801f8c2:	5cd3      	ldrb	r3, [r2, r3]
 801f8c4:	f003 031f 	and.w	r3, r3, #31
 801f8c8:	687a      	ldr	r2, [r7, #4]
 801f8ca:	fa22 f303 	lsr.w	r3, r2, r3
 801f8ce:	4a07      	ldr	r2, [pc, #28]	@ (801f8ec <HAL_RCC_GetHCLKFreq+0x58>)
 801f8d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f8d2:	4a07      	ldr	r2, [pc, #28]	@ (801f8f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801f8d8:	4b04      	ldr	r3, [pc, #16]	@ (801f8ec <HAL_RCC_GetHCLKFreq+0x58>)
 801f8da:	681b      	ldr	r3, [r3, #0]
}
 801f8dc:	4618      	mov	r0, r3
 801f8de:	3708      	adds	r7, #8
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	bd80      	pop	{r7, pc}
 801f8e4:	58024400 	.word	0x58024400
 801f8e8:	0802b320 	.word	0x0802b320
 801f8ec:	24000020 	.word	0x24000020
 801f8f0:	2400001c 	.word	0x2400001c

0801f8f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801f8f8:	f7ff ffcc 	bl	801f894 <HAL_RCC_GetHCLKFreq>
 801f8fc:	4602      	mov	r2, r0
 801f8fe:	4b06      	ldr	r3, [pc, #24]	@ (801f918 <HAL_RCC_GetPCLK1Freq+0x24>)
 801f900:	69db      	ldr	r3, [r3, #28]
 801f902:	091b      	lsrs	r3, r3, #4
 801f904:	f003 0307 	and.w	r3, r3, #7
 801f908:	4904      	ldr	r1, [pc, #16]	@ (801f91c <HAL_RCC_GetPCLK1Freq+0x28>)
 801f90a:	5ccb      	ldrb	r3, [r1, r3]
 801f90c:	f003 031f 	and.w	r3, r3, #31
 801f910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801f914:	4618      	mov	r0, r3
 801f916:	bd80      	pop	{r7, pc}
 801f918:	58024400 	.word	0x58024400
 801f91c:	0802b320 	.word	0x0802b320

0801f920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801f920:	b580      	push	{r7, lr}
 801f922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801f924:	f7ff ffb6 	bl	801f894 <HAL_RCC_GetHCLKFreq>
 801f928:	4602      	mov	r2, r0
 801f92a:	4b06      	ldr	r3, [pc, #24]	@ (801f944 <HAL_RCC_GetPCLK2Freq+0x24>)
 801f92c:	69db      	ldr	r3, [r3, #28]
 801f92e:	0a1b      	lsrs	r3, r3, #8
 801f930:	f003 0307 	and.w	r3, r3, #7
 801f934:	4904      	ldr	r1, [pc, #16]	@ (801f948 <HAL_RCC_GetPCLK2Freq+0x28>)
 801f936:	5ccb      	ldrb	r3, [r1, r3]
 801f938:	f003 031f 	and.w	r3, r3, #31
 801f93c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801f940:	4618      	mov	r0, r3
 801f942:	bd80      	pop	{r7, pc}
 801f944:	58024400 	.word	0x58024400
 801f948:	0802b320 	.word	0x0802b320

0801f94c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801f94c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f950:	b0ca      	sub	sp, #296	@ 0x128
 801f952:	af00      	add	r7, sp, #0
 801f954:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801f958:	2300      	movs	r3, #0
 801f95a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801f95e:	2300      	movs	r3, #0
 801f960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801f964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f96c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801f970:	2500      	movs	r5, #0
 801f972:	ea54 0305 	orrs.w	r3, r4, r5
 801f976:	d049      	beq.n	801fa0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801f978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f97c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f97e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f982:	d02f      	beq.n	801f9e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801f984:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f988:	d828      	bhi.n	801f9dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801f98a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801f98e:	d01a      	beq.n	801f9c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801f990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801f994:	d822      	bhi.n	801f9dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 801f996:	2b00      	cmp	r3, #0
 801f998:	d003      	beq.n	801f9a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801f99a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f99e:	d007      	beq.n	801f9b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801f9a0:	e01c      	b.n	801f9dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f9a2:	4bb8      	ldr	r3, [pc, #736]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9a6:	4ab7      	ldr	r2, [pc, #732]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f9ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801f9ae:	e01a      	b.n	801f9e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9b4:	3308      	adds	r3, #8
 801f9b6:	2102      	movs	r1, #2
 801f9b8:	4618      	mov	r0, r3
 801f9ba:	f002 fb61 	bl	8022080 <RCCEx_PLL2_Config>
 801f9be:	4603      	mov	r3, r0
 801f9c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801f9c4:	e00f      	b.n	801f9e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9ca:	3328      	adds	r3, #40	@ 0x28
 801f9cc:	2102      	movs	r1, #2
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f002 fc08 	bl	80221e4 <RCCEx_PLL3_Config>
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801f9da:	e004      	b.n	801f9e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f9dc:	2301      	movs	r3, #1
 801f9de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f9e2:	e000      	b.n	801f9e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801f9e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	d10a      	bne.n	801fa04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801f9ee:	4ba5      	ldr	r3, [pc, #660]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f9f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801f9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f9fc:	4aa1      	ldr	r2, [pc, #644]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9fe:	430b      	orrs	r3, r1
 801fa00:	6513      	str	r3, [r2, #80]	@ 0x50
 801fa02:	e003      	b.n	801fa0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fa04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fa08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801fa0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801fa18:	f04f 0900 	mov.w	r9, #0
 801fa1c:	ea58 0309 	orrs.w	r3, r8, r9
 801fa20:	d047      	beq.n	801fab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801fa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fa28:	2b04      	cmp	r3, #4
 801fa2a:	d82a      	bhi.n	801fa82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801fa2c:	a201      	add	r2, pc, #4	@ (adr r2, 801fa34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801fa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa32:	bf00      	nop
 801fa34:	0801fa49 	.word	0x0801fa49
 801fa38:	0801fa57 	.word	0x0801fa57
 801fa3c:	0801fa6d 	.word	0x0801fa6d
 801fa40:	0801fa8b 	.word	0x0801fa8b
 801fa44:	0801fa8b 	.word	0x0801fa8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fa48:	4b8e      	ldr	r3, [pc, #568]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa4c:	4a8d      	ldr	r2, [pc, #564]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fa52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fa54:	e01a      	b.n	801fa8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa5a:	3308      	adds	r3, #8
 801fa5c:	2100      	movs	r1, #0
 801fa5e:	4618      	mov	r0, r3
 801fa60:	f002 fb0e 	bl	8022080 <RCCEx_PLL2_Config>
 801fa64:	4603      	mov	r3, r0
 801fa66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fa6a:	e00f      	b.n	801fa8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fa6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa70:	3328      	adds	r3, #40	@ 0x28
 801fa72:	2100      	movs	r1, #0
 801fa74:	4618      	mov	r0, r3
 801fa76:	f002 fbb5 	bl	80221e4 <RCCEx_PLL3_Config>
 801fa7a:	4603      	mov	r3, r0
 801fa7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fa80:	e004      	b.n	801fa8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fa82:	2301      	movs	r3, #1
 801fa84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fa88:	e000      	b.n	801fa8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801fa8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fa8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d10a      	bne.n	801faaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801fa94:	4b7b      	ldr	r3, [pc, #492]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fa98:	f023 0107 	bic.w	r1, r3, #7
 801fa9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801faa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801faa2:	4a78      	ldr	r2, [pc, #480]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801faa4:	430b      	orrs	r3, r1
 801faa6:	6513      	str	r3, [r2, #80]	@ 0x50
 801faa8:	e003      	b.n	801fab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801faaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801faae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801fab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801fabe:	f04f 0b00 	mov.w	fp, #0
 801fac2:	ea5a 030b 	orrs.w	r3, sl, fp
 801fac6:	d04c      	beq.n	801fb62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801fac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801facc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801face:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fad2:	d030      	beq.n	801fb36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801fad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fad8:	d829      	bhi.n	801fb2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fada:	2bc0      	cmp	r3, #192	@ 0xc0
 801fadc:	d02d      	beq.n	801fb3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801fade:	2bc0      	cmp	r3, #192	@ 0xc0
 801fae0:	d825      	bhi.n	801fb2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fae2:	2b80      	cmp	r3, #128	@ 0x80
 801fae4:	d018      	beq.n	801fb18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801fae6:	2b80      	cmp	r3, #128	@ 0x80
 801fae8:	d821      	bhi.n	801fb2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801faea:	2b00      	cmp	r3, #0
 801faec:	d002      	beq.n	801faf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801faee:	2b40      	cmp	r3, #64	@ 0x40
 801faf0:	d007      	beq.n	801fb02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801faf2:	e01c      	b.n	801fb2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801faf4:	4b63      	ldr	r3, [pc, #396]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801faf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801faf8:	4a62      	ldr	r2, [pc, #392]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fafa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fafe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb00:	e01c      	b.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb06:	3308      	adds	r3, #8
 801fb08:	2100      	movs	r1, #0
 801fb0a:	4618      	mov	r0, r3
 801fb0c:	f002 fab8 	bl	8022080 <RCCEx_PLL2_Config>
 801fb10:	4603      	mov	r3, r0
 801fb12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb16:	e011      	b.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb1c:	3328      	adds	r3, #40	@ 0x28
 801fb1e:	2100      	movs	r1, #0
 801fb20:	4618      	mov	r0, r3
 801fb22:	f002 fb5f 	bl	80221e4 <RCCEx_PLL3_Config>
 801fb26:	4603      	mov	r3, r0
 801fb28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb2c:	e006      	b.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fb2e:	2301      	movs	r3, #1
 801fb30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fb34:	e002      	b.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fb36:	bf00      	nop
 801fb38:	e000      	b.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fb3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fb3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d10a      	bne.n	801fb5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801fb44:	4b4f      	ldr	r3, [pc, #316]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fb48:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801fb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fb52:	4a4c      	ldr	r2, [pc, #304]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb54:	430b      	orrs	r3, r1
 801fb56:	6513      	str	r3, [r2, #80]	@ 0x50
 801fb58:	e003      	b.n	801fb62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fb5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801fb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb6a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801fb6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801fb72:	2300      	movs	r3, #0
 801fb74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801fb78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801fb7c:	460b      	mov	r3, r1
 801fb7e:	4313      	orrs	r3, r2
 801fb80:	d053      	beq.n	801fc2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801fb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fb8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fb8e:	d035      	beq.n	801fbfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801fb90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fb94:	d82e      	bhi.n	801fbf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fb96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fb9a:	d031      	beq.n	801fc00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801fb9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fba0:	d828      	bhi.n	801fbf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fba6:	d01a      	beq.n	801fbde <HAL_RCCEx_PeriphCLKConfig+0x292>
 801fba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fbac:	d822      	bhi.n	801fbf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d003      	beq.n	801fbba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801fbb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fbb6:	d007      	beq.n	801fbc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801fbb8:	e01c      	b.n	801fbf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fbba:	4b32      	ldr	r3, [pc, #200]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbbe:	4a31      	ldr	r2, [pc, #196]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fbc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fbc6:	e01c      	b.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbcc:	3308      	adds	r3, #8
 801fbce:	2100      	movs	r1, #0
 801fbd0:	4618      	mov	r0, r3
 801fbd2:	f002 fa55 	bl	8022080 <RCCEx_PLL2_Config>
 801fbd6:	4603      	mov	r3, r0
 801fbd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fbdc:	e011      	b.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbe2:	3328      	adds	r3, #40	@ 0x28
 801fbe4:	2100      	movs	r1, #0
 801fbe6:	4618      	mov	r0, r3
 801fbe8:	f002 fafc 	bl	80221e4 <RCCEx_PLL3_Config>
 801fbec:	4603      	mov	r3, r0
 801fbee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fbf2:	e006      	b.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fbf4:	2301      	movs	r3, #1
 801fbf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fbfa:	e002      	b.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fbfc:	bf00      	nop
 801fbfe:	e000      	b.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fc02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d10b      	bne.n	801fc22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801fc0a:	4b1e      	ldr	r3, [pc, #120]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fc0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801fc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fc1a:	4a1a      	ldr	r2, [pc, #104]	@ (801fc84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc1c:	430b      	orrs	r3, r1
 801fc1e:	6593      	str	r3, [r2, #88]	@ 0x58
 801fc20:	e003      	b.n	801fc2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fc22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801fc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801fc36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801fc3a:	2300      	movs	r3, #0
 801fc3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801fc40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801fc44:	460b      	mov	r3, r1
 801fc46:	4313      	orrs	r3, r2
 801fc48:	d056      	beq.n	801fcf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801fc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fc52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fc56:	d038      	beq.n	801fcca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801fc58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fc5c:	d831      	bhi.n	801fcc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fc5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fc62:	d034      	beq.n	801fcce <HAL_RCCEx_PeriphCLKConfig+0x382>
 801fc64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fc68:	d82b      	bhi.n	801fcc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fc6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fc6e:	d01d      	beq.n	801fcac <HAL_RCCEx_PeriphCLKConfig+0x360>
 801fc70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fc74:	d825      	bhi.n	801fcc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d006      	beq.n	801fc88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801fc7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fc7e:	d00a      	beq.n	801fc96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801fc80:	e01f      	b.n	801fcc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fc82:	bf00      	nop
 801fc84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fc88:	4ba2      	ldr	r3, [pc, #648]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc8c:	4aa1      	ldr	r2, [pc, #644]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fc8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fc92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fc94:	e01c      	b.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc9a:	3308      	adds	r3, #8
 801fc9c:	2100      	movs	r1, #0
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f002 f9ee 	bl	8022080 <RCCEx_PLL2_Config>
 801fca4:	4603      	mov	r3, r0
 801fca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fcaa:	e011      	b.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcb0:	3328      	adds	r3, #40	@ 0x28
 801fcb2:	2100      	movs	r1, #0
 801fcb4:	4618      	mov	r0, r3
 801fcb6:	f002 fa95 	bl	80221e4 <RCCEx_PLL3_Config>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fcc0:	e006      	b.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fcc2:	2301      	movs	r3, #1
 801fcc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fcc8:	e002      	b.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fcca:	bf00      	nop
 801fccc:	e000      	b.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fcce:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fcd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	d10b      	bne.n	801fcf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801fcd8:	4b8e      	ldr	r3, [pc, #568]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fcda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fcdc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801fce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fce8:	4a8a      	ldr	r2, [pc, #552]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fcea:	430b      	orrs	r3, r1
 801fcec:	6593      	str	r3, [r2, #88]	@ 0x58
 801fcee:	e003      	b.n	801fcf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fcf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fcf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801fcf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801fd04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801fd08:	2300      	movs	r3, #0
 801fd0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801fd0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801fd12:	460b      	mov	r3, r1
 801fd14:	4313      	orrs	r3, r2
 801fd16:	d03a      	beq.n	801fd8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801fd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd1e:	2b30      	cmp	r3, #48	@ 0x30
 801fd20:	d01f      	beq.n	801fd62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801fd22:	2b30      	cmp	r3, #48	@ 0x30
 801fd24:	d819      	bhi.n	801fd5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fd26:	2b20      	cmp	r3, #32
 801fd28:	d00c      	beq.n	801fd44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801fd2a:	2b20      	cmp	r3, #32
 801fd2c:	d815      	bhi.n	801fd5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d019      	beq.n	801fd66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801fd32:	2b10      	cmp	r3, #16
 801fd34:	d111      	bne.n	801fd5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fd36:	4b77      	ldr	r3, [pc, #476]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd3a:	4a76      	ldr	r2, [pc, #472]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fd40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fd42:	e011      	b.n	801fd68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd48:	3308      	adds	r3, #8
 801fd4a:	2102      	movs	r1, #2
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	f002 f997 	bl	8022080 <RCCEx_PLL2_Config>
 801fd52:	4603      	mov	r3, r0
 801fd54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fd58:	e006      	b.n	801fd68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801fd5a:	2301      	movs	r3, #1
 801fd5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fd60:	e002      	b.n	801fd68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fd62:	bf00      	nop
 801fd64:	e000      	b.n	801fd68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fd66:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fd68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d10a      	bne.n	801fd86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801fd70:	4b68      	ldr	r3, [pc, #416]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801fd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd7e:	4a65      	ldr	r2, [pc, #404]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd80:	430b      	orrs	r3, r1
 801fd82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801fd84:	e003      	b.n	801fd8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fd86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801fd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801fd9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801fd9e:	2300      	movs	r3, #0
 801fda0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801fda4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801fda8:	460b      	mov	r3, r1
 801fdaa:	4313      	orrs	r3, r2
 801fdac:	d051      	beq.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801fdae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fdb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fdb8:	d035      	beq.n	801fe26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801fdba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fdbe:	d82e      	bhi.n	801fe1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fdc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fdc4:	d031      	beq.n	801fe2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801fdc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fdca:	d828      	bhi.n	801fe1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fdcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fdd0:	d01a      	beq.n	801fe08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801fdd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fdd6:	d822      	bhi.n	801fe1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d003      	beq.n	801fde4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801fddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fde0:	d007      	beq.n	801fdf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801fde2:	e01c      	b.n	801fe1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fde4:	4b4b      	ldr	r3, [pc, #300]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fde8:	4a4a      	ldr	r2, [pc, #296]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fdea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fdee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fdf0:	e01c      	b.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdf6:	3308      	adds	r3, #8
 801fdf8:	2100      	movs	r1, #0
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f002 f940 	bl	8022080 <RCCEx_PLL2_Config>
 801fe00:	4603      	mov	r3, r0
 801fe02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fe06:	e011      	b.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fe08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe0c:	3328      	adds	r3, #40	@ 0x28
 801fe0e:	2100      	movs	r1, #0
 801fe10:	4618      	mov	r0, r3
 801fe12:	f002 f9e7 	bl	80221e4 <RCCEx_PLL3_Config>
 801fe16:	4603      	mov	r3, r0
 801fe18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fe1c:	e006      	b.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fe1e:	2301      	movs	r3, #1
 801fe20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fe24:	e002      	b.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801fe26:	bf00      	nop
 801fe28:	e000      	b.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801fe2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fe2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d10a      	bne.n	801fe4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801fe34:	4b37      	ldr	r3, [pc, #220]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fe38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801fe3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fe42:	4a34      	ldr	r2, [pc, #208]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe44:	430b      	orrs	r3, r1
 801fe46:	6513      	str	r3, [r2, #80]	@ 0x50
 801fe48:	e003      	b.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801fe52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801fe5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801fe62:	2300      	movs	r3, #0
 801fe64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801fe68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801fe6c:	460b      	mov	r3, r1
 801fe6e:	4313      	orrs	r3, r2
 801fe70:	d056      	beq.n	801ff20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801fe72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fe78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801fe7c:	d033      	beq.n	801fee6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801fe7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801fe82:	d82c      	bhi.n	801fede <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fe84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801fe88:	d02f      	beq.n	801feea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801fe8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801fe8e:	d826      	bhi.n	801fede <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fe90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801fe94:	d02b      	beq.n	801feee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801fe96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801fe9a:	d820      	bhi.n	801fede <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fe9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801fea0:	d012      	beq.n	801fec8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801fea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801fea6:	d81a      	bhi.n	801fede <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d022      	beq.n	801fef2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801feac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801feb0:	d115      	bne.n	801fede <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801feb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801feb6:	3308      	adds	r3, #8
 801feb8:	2101      	movs	r1, #1
 801feba:	4618      	mov	r0, r3
 801febc:	f002 f8e0 	bl	8022080 <RCCEx_PLL2_Config>
 801fec0:	4603      	mov	r3, r0
 801fec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801fec6:	e015      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801fec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fecc:	3328      	adds	r3, #40	@ 0x28
 801fece:	2101      	movs	r1, #1
 801fed0:	4618      	mov	r0, r3
 801fed2:	f002 f987 	bl	80221e4 <RCCEx_PLL3_Config>
 801fed6:	4603      	mov	r3, r0
 801fed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801fedc:	e00a      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fede:	2301      	movs	r3, #1
 801fee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fee4:	e006      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801fee6:	bf00      	nop
 801fee8:	e004      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801feea:	bf00      	nop
 801feec:	e002      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801feee:	bf00      	nop
 801fef0:	e000      	b.n	801fef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801fef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d10d      	bne.n	801ff18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801fefc:	4b05      	ldr	r3, [pc, #20]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fefe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ff00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801ff04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff0a:	4a02      	ldr	r2, [pc, #8]	@ (801ff14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff0c:	430b      	orrs	r3, r1
 801ff0e:	6513      	str	r3, [r2, #80]	@ 0x50
 801ff10:	e006      	b.n	801ff20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801ff12:	bf00      	nop
 801ff14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ff18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ff20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801ff2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801ff30:	2300      	movs	r3, #0
 801ff32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801ff36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801ff3a:	460b      	mov	r3, r1
 801ff3c:	4313      	orrs	r3, r2
 801ff3e:	d055      	beq.n	801ffec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801ff40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801ff48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ff4c:	d033      	beq.n	801ffb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801ff4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ff52:	d82c      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ff54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ff58:	d02f      	beq.n	801ffba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801ff5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ff5e:	d826      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ff60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ff64:	d02b      	beq.n	801ffbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 801ff66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ff6a:	d820      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ff6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ff70:	d012      	beq.n	801ff98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801ff72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ff76:	d81a      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d022      	beq.n	801ffc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801ff7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ff80:	d115      	bne.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ff82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff86:	3308      	adds	r3, #8
 801ff88:	2101      	movs	r1, #1
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	f002 f878 	bl	8022080 <RCCEx_PLL2_Config>
 801ff90:	4603      	mov	r3, r0
 801ff92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801ff96:	e015      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ff98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff9c:	3328      	adds	r3, #40	@ 0x28
 801ff9e:	2101      	movs	r1, #1
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	f002 f91f 	bl	80221e4 <RCCEx_PLL3_Config>
 801ffa6:	4603      	mov	r3, r0
 801ffa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801ffac:	e00a      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801ffae:	2301      	movs	r3, #1
 801ffb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ffb4:	e006      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801ffb6:	bf00      	nop
 801ffb8:	e004      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801ffba:	bf00      	nop
 801ffbc:	e002      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801ffbe:	bf00      	nop
 801ffc0:	e000      	b.n	801ffc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801ffc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ffc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d10b      	bne.n	801ffe4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801ffcc:	4ba3      	ldr	r3, [pc, #652]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ffce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ffd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ffd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801ffdc:	4a9f      	ldr	r2, [pc, #636]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ffde:	430b      	orrs	r3, r1
 801ffe0:	6593      	str	r3, [r2, #88]	@ 0x58
 801ffe2:	e003      	b.n	801ffec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ffe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ffe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801ffec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fff4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801fff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801fffc:	2300      	movs	r3, #0
 801fffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8020002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8020006:	460b      	mov	r3, r1
 8020008:	4313      	orrs	r3, r2
 802000a:	d037      	beq.n	802007c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 802000c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020016:	d00e      	beq.n	8020036 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8020018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802001c:	d816      	bhi.n	802004c <HAL_RCCEx_PeriphCLKConfig+0x700>
 802001e:	2b00      	cmp	r3, #0
 8020020:	d018      	beq.n	8020054 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8020022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020026:	d111      	bne.n	802004c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020028:	4b8c      	ldr	r3, [pc, #560]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802002a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802002c:	4a8b      	ldr	r2, [pc, #556]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802002e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8020034:	e00f      	b.n	8020056 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802003a:	3308      	adds	r3, #8
 802003c:	2101      	movs	r1, #1
 802003e:	4618      	mov	r0, r3
 8020040:	f002 f81e 	bl	8022080 <RCCEx_PLL2_Config>
 8020044:	4603      	mov	r3, r0
 8020046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802004a:	e004      	b.n	8020056 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802004c:	2301      	movs	r3, #1
 802004e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020052:	e000      	b.n	8020056 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8020054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802005a:	2b00      	cmp	r3, #0
 802005c:	d10a      	bne.n	8020074 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 802005e:	4b7f      	ldr	r3, [pc, #508]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020062:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8020066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802006a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802006c:	4a7b      	ldr	r2, [pc, #492]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802006e:	430b      	orrs	r3, r1
 8020070:	6513      	str	r3, [r2, #80]	@ 0x50
 8020072:	e003      	b.n	802007c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802007c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020084:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8020088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802008c:	2300      	movs	r3, #0
 802008e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8020092:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8020096:	460b      	mov	r3, r1
 8020098:	4313      	orrs	r3, r2
 802009a:	d039      	beq.n	8020110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 802009c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80200a2:	2b03      	cmp	r3, #3
 80200a4:	d81c      	bhi.n	80200e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80200a6:	a201      	add	r2, pc, #4	@ (adr r2, 80200ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80200a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200ac:	080200e9 	.word	0x080200e9
 80200b0:	080200bd 	.word	0x080200bd
 80200b4:	080200cb 	.word	0x080200cb
 80200b8:	080200e9 	.word	0x080200e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80200bc:	4b67      	ldr	r3, [pc, #412]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80200c0:	4a66      	ldr	r2, [pc, #408]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80200c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80200c8:	e00f      	b.n	80200ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80200ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200ce:	3308      	adds	r3, #8
 80200d0:	2102      	movs	r1, #2
 80200d2:	4618      	mov	r0, r3
 80200d4:	f001 ffd4 	bl	8022080 <RCCEx_PLL2_Config>
 80200d8:	4603      	mov	r3, r0
 80200da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80200de:	e004      	b.n	80200ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80200e0:	2301      	movs	r3, #1
 80200e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80200e6:	e000      	b.n	80200ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80200e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80200ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d10a      	bne.n	8020108 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80200f2:	4b5a      	ldr	r3, [pc, #360]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80200f6:	f023 0103 	bic.w	r1, r3, #3
 80200fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020100:	4a56      	ldr	r2, [pc, #344]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020102:	430b      	orrs	r3, r1
 8020104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020106:	e003      	b.n	8020110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802010c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8020110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020118:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 802011c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8020120:	2300      	movs	r3, #0
 8020122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8020126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 802012a:	460b      	mov	r3, r1
 802012c:	4313      	orrs	r3, r2
 802012e:	f000 809f 	beq.w	8020270 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8020132:	4b4b      	ldr	r3, [pc, #300]	@ (8020260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	4a4a      	ldr	r2, [pc, #296]	@ (8020260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8020138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802013c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802013e:	f7fb fce5 	bl	801bb0c <HAL_GetTick>
 8020142:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8020146:	e00b      	b.n	8020160 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020148:	f7fb fce0 	bl	801bb0c <HAL_GetTick>
 802014c:	4602      	mov	r2, r0
 802014e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020152:	1ad3      	subs	r3, r2, r3
 8020154:	2b64      	cmp	r3, #100	@ 0x64
 8020156:	d903      	bls.n	8020160 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8020158:	2303      	movs	r3, #3
 802015a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802015e:	e005      	b.n	802016c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8020160:	4b3f      	ldr	r3, [pc, #252]	@ (8020260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020168:	2b00      	cmp	r3, #0
 802016a:	d0ed      	beq.n	8020148 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 802016c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020170:	2b00      	cmp	r3, #0
 8020172:	d179      	bne.n	8020268 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8020174:	4b39      	ldr	r3, [pc, #228]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020176:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802017c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020180:	4053      	eors	r3, r2
 8020182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8020186:	2b00      	cmp	r3, #0
 8020188:	d015      	beq.n	80201b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802018a:	4b34      	ldr	r3, [pc, #208]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802018c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802018e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020192:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8020196:	4b31      	ldr	r3, [pc, #196]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802019a:	4a30      	ldr	r2, [pc, #192]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802019c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80201a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80201a2:	4b2e      	ldr	r3, [pc, #184]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201a6:	4a2d      	ldr	r2, [pc, #180]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80201ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80201ae:	4a2b      	ldr	r2, [pc, #172]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80201b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80201b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80201be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80201c2:	d118      	bne.n	80201f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80201c4:	f7fb fca2 	bl	801bb0c <HAL_GetTick>
 80201c8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80201cc:	e00d      	b.n	80201ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80201ce:	f7fb fc9d 	bl	801bb0c <HAL_GetTick>
 80201d2:	4602      	mov	r2, r0
 80201d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80201d8:	1ad2      	subs	r2, r2, r3
 80201da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80201de:	429a      	cmp	r2, r3
 80201e0:	d903      	bls.n	80201ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80201e2:	2303      	movs	r3, #3
 80201e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80201e8:	e005      	b.n	80201f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80201ea:	4b1c      	ldr	r3, [pc, #112]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201ee:	f003 0302 	and.w	r3, r3, #2
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d0eb      	beq.n	80201ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80201f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d129      	bne.n	8020252 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80201fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802020a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802020e:	d10e      	bne.n	802022e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8020210:	4b12      	ldr	r3, [pc, #72]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020212:	691b      	ldr	r3, [r3, #16]
 8020214:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8020218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802021c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020220:	091a      	lsrs	r2, r3, #4
 8020222:	4b10      	ldr	r3, [pc, #64]	@ (8020264 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8020224:	4013      	ands	r3, r2
 8020226:	4a0d      	ldr	r2, [pc, #52]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020228:	430b      	orrs	r3, r1
 802022a:	6113      	str	r3, [r2, #16]
 802022c:	e005      	b.n	802023a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 802022e:	4b0b      	ldr	r3, [pc, #44]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020230:	691b      	ldr	r3, [r3, #16]
 8020232:	4a0a      	ldr	r2, [pc, #40]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020234:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8020238:	6113      	str	r3, [r2, #16]
 802023a:	4b08      	ldr	r3, [pc, #32]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802023c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 802023e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802024a:	4a04      	ldr	r2, [pc, #16]	@ (802025c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802024c:	430b      	orrs	r3, r1
 802024e:	6713      	str	r3, [r2, #112]	@ 0x70
 8020250:	e00e      	b.n	8020270 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8020252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802025a:	e009      	b.n	8020270 <HAL_RCCEx_PeriphCLKConfig+0x924>
 802025c:	58024400 	.word	0x58024400
 8020260:	58024800 	.word	0x58024800
 8020264:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802026c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8020270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020278:	f002 0301 	and.w	r3, r2, #1
 802027c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8020280:	2300      	movs	r3, #0
 8020282:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8020286:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802028a:	460b      	mov	r3, r1
 802028c:	4313      	orrs	r3, r2
 802028e:	f000 8089 	beq.w	80203a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8020292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020298:	2b28      	cmp	r3, #40	@ 0x28
 802029a:	d86b      	bhi.n	8020374 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 802029c:	a201      	add	r2, pc, #4	@ (adr r2, 80202a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802029e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80202a2:	bf00      	nop
 80202a4:	0802037d 	.word	0x0802037d
 80202a8:	08020375 	.word	0x08020375
 80202ac:	08020375 	.word	0x08020375
 80202b0:	08020375 	.word	0x08020375
 80202b4:	08020375 	.word	0x08020375
 80202b8:	08020375 	.word	0x08020375
 80202bc:	08020375 	.word	0x08020375
 80202c0:	08020375 	.word	0x08020375
 80202c4:	08020349 	.word	0x08020349
 80202c8:	08020375 	.word	0x08020375
 80202cc:	08020375 	.word	0x08020375
 80202d0:	08020375 	.word	0x08020375
 80202d4:	08020375 	.word	0x08020375
 80202d8:	08020375 	.word	0x08020375
 80202dc:	08020375 	.word	0x08020375
 80202e0:	08020375 	.word	0x08020375
 80202e4:	0802035f 	.word	0x0802035f
 80202e8:	08020375 	.word	0x08020375
 80202ec:	08020375 	.word	0x08020375
 80202f0:	08020375 	.word	0x08020375
 80202f4:	08020375 	.word	0x08020375
 80202f8:	08020375 	.word	0x08020375
 80202fc:	08020375 	.word	0x08020375
 8020300:	08020375 	.word	0x08020375
 8020304:	0802037d 	.word	0x0802037d
 8020308:	08020375 	.word	0x08020375
 802030c:	08020375 	.word	0x08020375
 8020310:	08020375 	.word	0x08020375
 8020314:	08020375 	.word	0x08020375
 8020318:	08020375 	.word	0x08020375
 802031c:	08020375 	.word	0x08020375
 8020320:	08020375 	.word	0x08020375
 8020324:	0802037d 	.word	0x0802037d
 8020328:	08020375 	.word	0x08020375
 802032c:	08020375 	.word	0x08020375
 8020330:	08020375 	.word	0x08020375
 8020334:	08020375 	.word	0x08020375
 8020338:	08020375 	.word	0x08020375
 802033c:	08020375 	.word	0x08020375
 8020340:	08020375 	.word	0x08020375
 8020344:	0802037d 	.word	0x0802037d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802034c:	3308      	adds	r3, #8
 802034e:	2101      	movs	r1, #1
 8020350:	4618      	mov	r0, r3
 8020352:	f001 fe95 	bl	8022080 <RCCEx_PLL2_Config>
 8020356:	4603      	mov	r3, r0
 8020358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802035c:	e00f      	b.n	802037e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802035e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020362:	3328      	adds	r3, #40	@ 0x28
 8020364:	2101      	movs	r1, #1
 8020366:	4618      	mov	r0, r3
 8020368:	f001 ff3c 	bl	80221e4 <RCCEx_PLL3_Config>
 802036c:	4603      	mov	r3, r0
 802036e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8020372:	e004      	b.n	802037e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020374:	2301      	movs	r3, #1
 8020376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802037a:	e000      	b.n	802037e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 802037c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802037e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020382:	2b00      	cmp	r3, #0
 8020384:	d10a      	bne.n	802039c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8020386:	4bbf      	ldr	r3, [pc, #764]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802038a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 802038e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020394:	4abb      	ldr	r2, [pc, #748]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020396:	430b      	orrs	r3, r1
 8020398:	6553      	str	r3, [r2, #84]	@ 0x54
 802039a:	e003      	b.n	80203a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802039c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80203a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80203a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203ac:	f002 0302 	and.w	r3, r2, #2
 80203b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80203b4:	2300      	movs	r3, #0
 80203b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80203ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80203be:	460b      	mov	r3, r1
 80203c0:	4313      	orrs	r3, r2
 80203c2:	d041      	beq.n	8020448 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80203c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80203ca:	2b05      	cmp	r3, #5
 80203cc:	d824      	bhi.n	8020418 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80203ce:	a201      	add	r2, pc, #4	@ (adr r2, 80203d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80203d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203d4:	08020421 	.word	0x08020421
 80203d8:	080203ed 	.word	0x080203ed
 80203dc:	08020403 	.word	0x08020403
 80203e0:	08020421 	.word	0x08020421
 80203e4:	08020421 	.word	0x08020421
 80203e8:	08020421 	.word	0x08020421
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80203ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203f0:	3308      	adds	r3, #8
 80203f2:	2101      	movs	r1, #1
 80203f4:	4618      	mov	r0, r3
 80203f6:	f001 fe43 	bl	8022080 <RCCEx_PLL2_Config>
 80203fa:	4603      	mov	r3, r0
 80203fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8020400:	e00f      	b.n	8020422 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020406:	3328      	adds	r3, #40	@ 0x28
 8020408:	2101      	movs	r1, #1
 802040a:	4618      	mov	r0, r3
 802040c:	f001 feea 	bl	80221e4 <RCCEx_PLL3_Config>
 8020410:	4603      	mov	r3, r0
 8020412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8020416:	e004      	b.n	8020422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020418:	2301      	movs	r3, #1
 802041a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802041e:	e000      	b.n	8020422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8020420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020426:	2b00      	cmp	r3, #0
 8020428:	d10a      	bne.n	8020440 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 802042a:	4b96      	ldr	r3, [pc, #600]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802042c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802042e:	f023 0107 	bic.w	r1, r3, #7
 8020432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020438:	4a92      	ldr	r2, [pc, #584]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802043a:	430b      	orrs	r3, r1
 802043c:	6553      	str	r3, [r2, #84]	@ 0x54
 802043e:	e003      	b.n	8020448 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8020448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802044c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020450:	f002 0304 	and.w	r3, r2, #4
 8020454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8020458:	2300      	movs	r3, #0
 802045a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802045e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8020462:	460b      	mov	r3, r1
 8020464:	4313      	orrs	r3, r2
 8020466:	d044      	beq.n	80204f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8020468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802046c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020470:	2b05      	cmp	r3, #5
 8020472:	d825      	bhi.n	80204c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8020474:	a201      	add	r2, pc, #4	@ (adr r2, 802047c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8020476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802047a:	bf00      	nop
 802047c:	080204c9 	.word	0x080204c9
 8020480:	08020495 	.word	0x08020495
 8020484:	080204ab 	.word	0x080204ab
 8020488:	080204c9 	.word	0x080204c9
 802048c:	080204c9 	.word	0x080204c9
 8020490:	080204c9 	.word	0x080204c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020498:	3308      	adds	r3, #8
 802049a:	2101      	movs	r1, #1
 802049c:	4618      	mov	r0, r3
 802049e:	f001 fdef 	bl	8022080 <RCCEx_PLL2_Config>
 80204a2:	4603      	mov	r3, r0
 80204a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80204a8:	e00f      	b.n	80204ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80204aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204ae:	3328      	adds	r3, #40	@ 0x28
 80204b0:	2101      	movs	r1, #1
 80204b2:	4618      	mov	r0, r3
 80204b4:	f001 fe96 	bl	80221e4 <RCCEx_PLL3_Config>
 80204b8:	4603      	mov	r3, r0
 80204ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80204be:	e004      	b.n	80204ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80204c0:	2301      	movs	r3, #1
 80204c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80204c6:	e000      	b.n	80204ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80204c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80204ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d10b      	bne.n	80204ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80204d2:	4b6c      	ldr	r3, [pc, #432]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80204d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80204d6:	f023 0107 	bic.w	r1, r3, #7
 80204da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80204e2:	4a68      	ldr	r2, [pc, #416]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80204e4:	430b      	orrs	r3, r1
 80204e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80204e8:	e003      	b.n	80204f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80204ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80204ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80204f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204fa:	f002 0320 	and.w	r3, r2, #32
 80204fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8020502:	2300      	movs	r3, #0
 8020504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802050c:	460b      	mov	r3, r1
 802050e:	4313      	orrs	r3, r2
 8020510:	d055      	beq.n	80205be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8020512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802051a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802051e:	d033      	beq.n	8020588 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8020520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8020524:	d82c      	bhi.n	8020580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802052a:	d02f      	beq.n	802058c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 802052c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020530:	d826      	bhi.n	8020580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020536:	d02b      	beq.n	8020590 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8020538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802053c:	d820      	bhi.n	8020580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802053e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020542:	d012      	beq.n	802056a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8020544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020548:	d81a      	bhi.n	8020580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802054a:	2b00      	cmp	r3, #0
 802054c:	d022      	beq.n	8020594 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 802054e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020552:	d115      	bne.n	8020580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020558:	3308      	adds	r3, #8
 802055a:	2100      	movs	r1, #0
 802055c:	4618      	mov	r0, r3
 802055e:	f001 fd8f 	bl	8022080 <RCCEx_PLL2_Config>
 8020562:	4603      	mov	r3, r0
 8020564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8020568:	e015      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802056a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802056e:	3328      	adds	r3, #40	@ 0x28
 8020570:	2102      	movs	r1, #2
 8020572:	4618      	mov	r0, r3
 8020574:	f001 fe36 	bl	80221e4 <RCCEx_PLL3_Config>
 8020578:	4603      	mov	r3, r0
 802057a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802057e:	e00a      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020580:	2301      	movs	r3, #1
 8020582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020586:	e006      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020588:	bf00      	nop
 802058a:	e004      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802058c:	bf00      	nop
 802058e:	e002      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020590:	bf00      	nop
 8020592:	e000      	b.n	8020596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802059a:	2b00      	cmp	r3, #0
 802059c:	d10b      	bne.n	80205b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802059e:	4b39      	ldr	r3, [pc, #228]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80205a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80205ae:	4a35      	ldr	r2, [pc, #212]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205b0:	430b      	orrs	r3, r1
 80205b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80205b4:	e003      	b.n	80205be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80205b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80205be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80205ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80205ce:	2300      	movs	r3, #0
 80205d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80205d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80205d8:	460b      	mov	r3, r1
 80205da:	4313      	orrs	r3, r2
 80205dc:	d058      	beq.n	8020690 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80205de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80205e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80205ea:	d033      	beq.n	8020654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80205ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80205f0:	d82c      	bhi.n	802064c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80205f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80205f6:	d02f      	beq.n	8020658 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80205f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80205fc:	d826      	bhi.n	802064c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80205fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020602:	d02b      	beq.n	802065c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8020604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020608:	d820      	bhi.n	802064c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802060a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802060e:	d012      	beq.n	8020636 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8020610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020614:	d81a      	bhi.n	802064c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020616:	2b00      	cmp	r3, #0
 8020618:	d022      	beq.n	8020660 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 802061a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802061e:	d115      	bne.n	802064c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020624:	3308      	adds	r3, #8
 8020626:	2100      	movs	r1, #0
 8020628:	4618      	mov	r0, r3
 802062a:	f001 fd29 	bl	8022080 <RCCEx_PLL2_Config>
 802062e:	4603      	mov	r3, r0
 8020630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8020634:	e015      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802063a:	3328      	adds	r3, #40	@ 0x28
 802063c:	2102      	movs	r1, #2
 802063e:	4618      	mov	r0, r3
 8020640:	f001 fdd0 	bl	80221e4 <RCCEx_PLL3_Config>
 8020644:	4603      	mov	r3, r0
 8020646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802064a:	e00a      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802064c:	2301      	movs	r3, #1
 802064e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020652:	e006      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020654:	bf00      	nop
 8020656:	e004      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020658:	bf00      	nop
 802065a:	e002      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802065c:	bf00      	nop
 802065e:	e000      	b.n	8020662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8020660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020666:	2b00      	cmp	r3, #0
 8020668:	d10e      	bne.n	8020688 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 802066a:	4b06      	ldr	r3, [pc, #24]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802066e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8020672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802067a:	4a02      	ldr	r2, [pc, #8]	@ (8020684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802067c:	430b      	orrs	r3, r1
 802067e:	6593      	str	r3, [r2, #88]	@ 0x58
 8020680:	e006      	b.n	8020690 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8020682:	bf00      	nop
 8020684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802068c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8020690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020698:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 802069c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80206a0:	2300      	movs	r3, #0
 80206a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80206a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80206aa:	460b      	mov	r3, r1
 80206ac:	4313      	orrs	r3, r2
 80206ae:	d055      	beq.n	802075c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80206b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80206b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80206bc:	d033      	beq.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80206be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80206c2:	d82c      	bhi.n	802071e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80206c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80206c8:	d02f      	beq.n	802072a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80206ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80206ce:	d826      	bhi.n	802071e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80206d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80206d4:	d02b      	beq.n	802072e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80206d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80206da:	d820      	bhi.n	802071e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80206dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80206e0:	d012      	beq.n	8020708 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80206e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80206e6:	d81a      	bhi.n	802071e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d022      	beq.n	8020732 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80206ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80206f0:	d115      	bne.n	802071e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80206f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206f6:	3308      	adds	r3, #8
 80206f8:	2100      	movs	r1, #0
 80206fa:	4618      	mov	r0, r3
 80206fc:	f001 fcc0 	bl	8022080 <RCCEx_PLL2_Config>
 8020700:	4603      	mov	r3, r0
 8020702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8020706:	e015      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802070c:	3328      	adds	r3, #40	@ 0x28
 802070e:	2102      	movs	r1, #2
 8020710:	4618      	mov	r0, r3
 8020712:	f001 fd67 	bl	80221e4 <RCCEx_PLL3_Config>
 8020716:	4603      	mov	r3, r0
 8020718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802071c:	e00a      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802071e:	2301      	movs	r3, #1
 8020720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020724:	e006      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020726:	bf00      	nop
 8020728:	e004      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802072a:	bf00      	nop
 802072c:	e002      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802072e:	bf00      	nop
 8020730:	e000      	b.n	8020734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020738:	2b00      	cmp	r3, #0
 802073a:	d10b      	bne.n	8020754 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 802073c:	4ba1      	ldr	r3, [pc, #644]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802073e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020740:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8020744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 802074c:	4a9d      	ldr	r2, [pc, #628]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802074e:	430b      	orrs	r3, r1
 8020750:	6593      	str	r3, [r2, #88]	@ 0x58
 8020752:	e003      	b.n	802075c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 802075c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020764:	f002 0308 	and.w	r3, r2, #8
 8020768:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802076c:	2300      	movs	r3, #0
 802076e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8020772:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8020776:	460b      	mov	r3, r1
 8020778:	4313      	orrs	r3, r2
 802077a:	d01e      	beq.n	80207ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 802077c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020788:	d10c      	bne.n	80207a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802078a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802078e:	3328      	adds	r3, #40	@ 0x28
 8020790:	2102      	movs	r1, #2
 8020792:	4618      	mov	r0, r3
 8020794:	f001 fd26 	bl	80221e4 <RCCEx_PLL3_Config>
 8020798:	4603      	mov	r3, r0
 802079a:	2b00      	cmp	r3, #0
 802079c:	d002      	beq.n	80207a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 802079e:	2301      	movs	r3, #1
 80207a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80207a4:	4b87      	ldr	r3, [pc, #540]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80207a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80207ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80207b4:	4a83      	ldr	r2, [pc, #524]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80207b6:	430b      	orrs	r3, r1
 80207b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80207ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207c2:	f002 0310 	and.w	r3, r2, #16
 80207c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80207ca:	2300      	movs	r3, #0
 80207cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80207d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80207d4:	460b      	mov	r3, r1
 80207d6:	4313      	orrs	r3, r2
 80207d8:	d01e      	beq.n	8020818 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80207da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80207e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80207e6:	d10c      	bne.n	8020802 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80207e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207ec:	3328      	adds	r3, #40	@ 0x28
 80207ee:	2102      	movs	r1, #2
 80207f0:	4618      	mov	r0, r3
 80207f2:	f001 fcf7 	bl	80221e4 <RCCEx_PLL3_Config>
 80207f6:	4603      	mov	r3, r0
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d002      	beq.n	8020802 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80207fc:	2301      	movs	r3, #1
 80207fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8020802:	4b70      	ldr	r3, [pc, #448]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 802080a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802080e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020812:	4a6c      	ldr	r2, [pc, #432]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020814:	430b      	orrs	r3, r1
 8020816:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8020818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020820:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8020824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8020828:	2300      	movs	r3, #0
 802082a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802082e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8020832:	460b      	mov	r3, r1
 8020834:	4313      	orrs	r3, r2
 8020836:	d03e      	beq.n	80208b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8020838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802083c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8020840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020844:	d022      	beq.n	802088c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8020846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802084a:	d81b      	bhi.n	8020884 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 802084c:	2b00      	cmp	r3, #0
 802084e:	d003      	beq.n	8020858 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8020850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020854:	d00b      	beq.n	802086e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8020856:	e015      	b.n	8020884 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802085c:	3308      	adds	r3, #8
 802085e:	2100      	movs	r1, #0
 8020860:	4618      	mov	r0, r3
 8020862:	f001 fc0d 	bl	8022080 <RCCEx_PLL2_Config>
 8020866:	4603      	mov	r3, r0
 8020868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 802086c:	e00f      	b.n	802088e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020872:	3328      	adds	r3, #40	@ 0x28
 8020874:	2102      	movs	r1, #2
 8020876:	4618      	mov	r0, r3
 8020878:	f001 fcb4 	bl	80221e4 <RCCEx_PLL3_Config>
 802087c:	4603      	mov	r3, r0
 802087e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8020882:	e004      	b.n	802088e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020884:	2301      	movs	r3, #1
 8020886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802088a:	e000      	b.n	802088e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 802088c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802088e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020892:	2b00      	cmp	r3, #0
 8020894:	d10b      	bne.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8020896:	4b4b      	ldr	r3, [pc, #300]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802089a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 802089e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80208a6:	4a47      	ldr	r2, [pc, #284]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208a8:	430b      	orrs	r3, r1
 80208aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80208ac:	e003      	b.n	80208b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80208ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80208b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80208c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80208c4:	2300      	movs	r3, #0
 80208c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80208c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80208cc:	460b      	mov	r3, r1
 80208ce:	4313      	orrs	r3, r2
 80208d0:	d03b      	beq.n	802094a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80208d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80208da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80208de:	d01f      	beq.n	8020920 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80208e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80208e4:	d818      	bhi.n	8020918 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80208e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208ea:	d003      	beq.n	80208f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80208ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80208f0:	d007      	beq.n	8020902 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80208f2:	e011      	b.n	8020918 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80208f4:	4b33      	ldr	r3, [pc, #204]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80208f8:	4a32      	ldr	r2, [pc, #200]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80208fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8020900:	e00f      	b.n	8020922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020906:	3328      	adds	r3, #40	@ 0x28
 8020908:	2101      	movs	r1, #1
 802090a:	4618      	mov	r0, r3
 802090c:	f001 fc6a 	bl	80221e4 <RCCEx_PLL3_Config>
 8020910:	4603      	mov	r3, r0
 8020912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8020916:	e004      	b.n	8020922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020918:	2301      	movs	r3, #1
 802091a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802091e:	e000      	b.n	8020922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8020920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020926:	2b00      	cmp	r3, #0
 8020928:	d10b      	bne.n	8020942 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 802092a:	4b26      	ldr	r3, [pc, #152]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802092c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802092e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8020932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802093a:	4a22      	ldr	r2, [pc, #136]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802093c:	430b      	orrs	r3, r1
 802093e:	6553      	str	r3, [r2, #84]	@ 0x54
 8020940:	e003      	b.n	802094a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 802094a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020952:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8020956:	673b      	str	r3, [r7, #112]	@ 0x70
 8020958:	2300      	movs	r3, #0
 802095a:	677b      	str	r3, [r7, #116]	@ 0x74
 802095c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8020960:	460b      	mov	r3, r1
 8020962:	4313      	orrs	r3, r2
 8020964:	d034      	beq.n	80209d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8020966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802096a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802096c:	2b00      	cmp	r3, #0
 802096e:	d003      	beq.n	8020978 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8020970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020974:	d007      	beq.n	8020986 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8020976:	e011      	b.n	802099c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020978:	4b12      	ldr	r3, [pc, #72]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802097c:	4a11      	ldr	r2, [pc, #68]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802097e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8020984:	e00e      	b.n	80209a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802098a:	3308      	adds	r3, #8
 802098c:	2102      	movs	r1, #2
 802098e:	4618      	mov	r0, r3
 8020990:	f001 fb76 	bl	8022080 <RCCEx_PLL2_Config>
 8020994:	4603      	mov	r3, r0
 8020996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 802099a:	e003      	b.n	80209a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 802099c:	2301      	movs	r3, #1
 802099e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80209a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80209a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d10d      	bne.n	80209c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80209ac:	4b05      	ldr	r3, [pc, #20]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80209b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80209b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80209ba:	4a02      	ldr	r2, [pc, #8]	@ (80209c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209bc:	430b      	orrs	r3, r1
 80209be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80209c0:	e006      	b.n	80209d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80209c2:	bf00      	nop
 80209c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80209c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80209d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80209dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80209de:	2300      	movs	r3, #0
 80209e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80209e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80209e6:	460b      	mov	r3, r1
 80209e8:	4313      	orrs	r3, r2
 80209ea:	d00c      	beq.n	8020a06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80209ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209f0:	3328      	adds	r3, #40	@ 0x28
 80209f2:	2102      	movs	r1, #2
 80209f4:	4618      	mov	r0, r3
 80209f6:	f001 fbf5 	bl	80221e4 <RCCEx_PLL3_Config>
 80209fa:	4603      	mov	r3, r0
 80209fc:	2b00      	cmp	r3, #0
 80209fe:	d002      	beq.n	8020a06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8020a00:	2301      	movs	r3, #1
 8020a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8020a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8020a12:	663b      	str	r3, [r7, #96]	@ 0x60
 8020a14:	2300      	movs	r3, #0
 8020a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8020a18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8020a1c:	460b      	mov	r3, r1
 8020a1e:	4313      	orrs	r3, r2
 8020a20:	d038      	beq.n	8020a94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8020a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020a2e:	d018      	beq.n	8020a62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8020a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020a34:	d811      	bhi.n	8020a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020a3a:	d014      	beq.n	8020a66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8020a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020a40:	d80b      	bhi.n	8020a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d011      	beq.n	8020a6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8020a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020a4a:	d106      	bne.n	8020a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020a4c:	4bc3      	ldr	r3, [pc, #780]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a50:	4ac2      	ldr	r2, [pc, #776]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8020a58:	e008      	b.n	8020a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020a5a:	2301      	movs	r3, #1
 8020a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020a60:	e004      	b.n	8020a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020a62:	bf00      	nop
 8020a64:	e002      	b.n	8020a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020a66:	bf00      	nop
 8020a68:	e000      	b.n	8020a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a70:	2b00      	cmp	r3, #0
 8020a72:	d10b      	bne.n	8020a8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8020a74:	4bb9      	ldr	r3, [pc, #740]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020a84:	4ab5      	ldr	r2, [pc, #724]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a86:	430b      	orrs	r3, r1
 8020a88:	6553      	str	r3, [r2, #84]	@ 0x54
 8020a8a:	e003      	b.n	8020a94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8020a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8020aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020aa6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8020aaa:	460b      	mov	r3, r1
 8020aac:	4313      	orrs	r3, r2
 8020aae:	d009      	beq.n	8020ac4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8020ab0:	4baa      	ldr	r3, [pc, #680]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020ab4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020abe:	4aa7      	ldr	r2, [pc, #668]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ac0:	430b      	orrs	r3, r1
 8020ac2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8020ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020acc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8020ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8020ad6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8020ada:	460b      	mov	r3, r1
 8020adc:	4313      	orrs	r3, r2
 8020ade:	d00a      	beq.n	8020af6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8020ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ae2:	691b      	ldr	r3, [r3, #16]
 8020ae4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8020ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8020af0:	4a9a      	ldr	r2, [pc, #616]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020af2:	430b      	orrs	r3, r1
 8020af4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8020af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020afe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8020b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020b04:	2300      	movs	r3, #0
 8020b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020b08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8020b0c:	460b      	mov	r3, r1
 8020b0e:	4313      	orrs	r3, r2
 8020b10:	d009      	beq.n	8020b26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8020b12:	4b92      	ldr	r3, [pc, #584]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020b16:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8020b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020b20:	4a8e      	ldr	r2, [pc, #568]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b22:	430b      	orrs	r3, r1
 8020b24:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8020b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8020b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8020b34:	2300      	movs	r3, #0
 8020b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8020b38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8020b3c:	460b      	mov	r3, r1
 8020b3e:	4313      	orrs	r3, r2
 8020b40:	d00e      	beq.n	8020b60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8020b42:	4b86      	ldr	r3, [pc, #536]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b44:	691b      	ldr	r3, [r3, #16]
 8020b46:	4a85      	ldr	r2, [pc, #532]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8020b4c:	6113      	str	r3, [r2, #16]
 8020b4e:	4b83      	ldr	r3, [pc, #524]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b50:	6919      	ldr	r1, [r3, #16]
 8020b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020b5a:	4a80      	ldr	r2, [pc, #512]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b5c:	430b      	orrs	r3, r1
 8020b5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8020b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b68:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8020b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020b6e:	2300      	movs	r3, #0
 8020b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020b72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8020b76:	460b      	mov	r3, r1
 8020b78:	4313      	orrs	r3, r2
 8020b7a:	d009      	beq.n	8020b90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8020b7c:	4b77      	ldr	r3, [pc, #476]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020b80:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8020b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020b8a:	4a74      	ldr	r2, [pc, #464]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b8c:	430b      	orrs	r3, r1
 8020b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8020b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b98:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8020b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8020b9e:	2300      	movs	r3, #0
 8020ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8020ba2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8020ba6:	460b      	mov	r3, r1
 8020ba8:	4313      	orrs	r3, r2
 8020baa:	d00a      	beq.n	8020bc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8020bac:	4b6b      	ldr	r3, [pc, #428]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020bb0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8020bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020bbc:	4a67      	ldr	r2, [pc, #412]	@ (8020d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bbe:	430b      	orrs	r3, r1
 8020bc0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8020bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bca:	2100      	movs	r1, #0
 8020bcc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8020bce:	f003 0301 	and.w	r3, r3, #1
 8020bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020bd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8020bd8:	460b      	mov	r3, r1
 8020bda:	4313      	orrs	r3, r2
 8020bdc:	d011      	beq.n	8020c02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020be2:	3308      	adds	r3, #8
 8020be4:	2100      	movs	r1, #0
 8020be6:	4618      	mov	r0, r3
 8020be8:	f001 fa4a 	bl	8022080 <RCCEx_PLL2_Config>
 8020bec:	4603      	mov	r3, r0
 8020bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d003      	beq.n	8020c02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8020c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c0a:	2100      	movs	r1, #0
 8020c0c:	6239      	str	r1, [r7, #32]
 8020c0e:	f003 0302 	and.w	r3, r3, #2
 8020c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8020c14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8020c18:	460b      	mov	r3, r1
 8020c1a:	4313      	orrs	r3, r2
 8020c1c:	d011      	beq.n	8020c42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c22:	3308      	adds	r3, #8
 8020c24:	2101      	movs	r1, #1
 8020c26:	4618      	mov	r0, r3
 8020c28:	f001 fa2a 	bl	8022080 <RCCEx_PLL2_Config>
 8020c2c:	4603      	mov	r3, r0
 8020c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d003      	beq.n	8020c42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8020c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4a:	2100      	movs	r1, #0
 8020c4c:	61b9      	str	r1, [r7, #24]
 8020c4e:	f003 0304 	and.w	r3, r3, #4
 8020c52:	61fb      	str	r3, [r7, #28]
 8020c54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8020c58:	460b      	mov	r3, r1
 8020c5a:	4313      	orrs	r3, r2
 8020c5c:	d011      	beq.n	8020c82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c62:	3308      	adds	r3, #8
 8020c64:	2102      	movs	r1, #2
 8020c66:	4618      	mov	r0, r3
 8020c68:	f001 fa0a 	bl	8022080 <RCCEx_PLL2_Config>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	d003      	beq.n	8020c82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8020c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c8a:	2100      	movs	r1, #0
 8020c8c:	6139      	str	r1, [r7, #16]
 8020c8e:	f003 0308 	and.w	r3, r3, #8
 8020c92:	617b      	str	r3, [r7, #20]
 8020c94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8020c98:	460b      	mov	r3, r1
 8020c9a:	4313      	orrs	r3, r2
 8020c9c:	d011      	beq.n	8020cc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8020c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ca2:	3328      	adds	r3, #40	@ 0x28
 8020ca4:	2100      	movs	r1, #0
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	f001 fa9c 	bl	80221e4 <RCCEx_PLL3_Config>
 8020cac:	4603      	mov	r3, r0
 8020cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8020cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d003      	beq.n	8020cc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8020cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cca:	2100      	movs	r1, #0
 8020ccc:	60b9      	str	r1, [r7, #8]
 8020cce:	f003 0310 	and.w	r3, r3, #16
 8020cd2:	60fb      	str	r3, [r7, #12]
 8020cd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020cd8:	460b      	mov	r3, r1
 8020cda:	4313      	orrs	r3, r2
 8020cdc:	d011      	beq.n	8020d02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ce2:	3328      	adds	r3, #40	@ 0x28
 8020ce4:	2101      	movs	r1, #1
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	f001 fa7c 	bl	80221e4 <RCCEx_PLL3_Config>
 8020cec:	4603      	mov	r3, r0
 8020cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	d003      	beq.n	8020d02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8020d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d0a:	2100      	movs	r1, #0
 8020d0c:	6039      	str	r1, [r7, #0]
 8020d0e:	f003 0320 	and.w	r3, r3, #32
 8020d12:	607b      	str	r3, [r7, #4]
 8020d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020d18:	460b      	mov	r3, r1
 8020d1a:	4313      	orrs	r3, r2
 8020d1c:	d011      	beq.n	8020d42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d22:	3328      	adds	r3, #40	@ 0x28
 8020d24:	2102      	movs	r1, #2
 8020d26:	4618      	mov	r0, r3
 8020d28:	f001 fa5c 	bl	80221e4 <RCCEx_PLL3_Config>
 8020d2c:	4603      	mov	r3, r0
 8020d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d003      	beq.n	8020d42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8020d42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	d101      	bne.n	8020d4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	e000      	b.n	8020d50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8020d4e:	2301      	movs	r3, #1
}
 8020d50:	4618      	mov	r0, r3
 8020d52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8020d56:	46bd      	mov	sp, r7
 8020d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020d5c:	58024400 	.word	0x58024400

08020d60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8020d60:	b580      	push	{r7, lr}
 8020d62:	b090      	sub	sp, #64	@ 0x40
 8020d64:	af00      	add	r7, sp, #0
 8020d66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8020d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020d6e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8020d72:	430b      	orrs	r3, r1
 8020d74:	f040 8094 	bne.w	8020ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8020d78:	4b9e      	ldr	r3, [pc, #632]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020d7c:	f003 0307 	and.w	r3, r3, #7
 8020d80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020d84:	2b04      	cmp	r3, #4
 8020d86:	f200 8087 	bhi.w	8020e98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8020d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8020d90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8020d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d90:	08020da5 	.word	0x08020da5
 8020d94:	08020dcd 	.word	0x08020dcd
 8020d98:	08020df5 	.word	0x08020df5
 8020d9c:	08020e91 	.word	0x08020e91
 8020da0:	08020e1d 	.word	0x08020e1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020da4:	4b93      	ldr	r3, [pc, #588]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020da6:	681b      	ldr	r3, [r3, #0]
 8020da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020dac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020db0:	d108      	bne.n	8020dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020db6:	4618      	mov	r0, r3
 8020db8:	f001 f810 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020dc0:	f000 bd45 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020dc8:	f000 bd41 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020dcc:	4b89      	ldr	r3, [pc, #548]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020dce:	681b      	ldr	r3, [r3, #0]
 8020dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020dd8:	d108      	bne.n	8020dec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020dda:	f107 0318 	add.w	r3, r7, #24
 8020dde:	4618      	mov	r0, r3
 8020de0:	f000 fd54 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020de4:	69bb      	ldr	r3, [r7, #24]
 8020de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020de8:	f000 bd31 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020dec:	2300      	movs	r3, #0
 8020dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020df0:	f000 bd2d 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020df4:	4b7f      	ldr	r3, [pc, #508]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020df6:	681b      	ldr	r3, [r3, #0]
 8020df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020e00:	d108      	bne.n	8020e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020e02:	f107 030c 	add.w	r3, r7, #12
 8020e06:	4618      	mov	r0, r3
 8020e08:	f000 fe94 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020e0c:	68fb      	ldr	r3, [r7, #12]
 8020e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020e10:	f000 bd1d 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020e14:	2300      	movs	r3, #0
 8020e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e18:	f000 bd19 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020e1c:	4b75      	ldr	r3, [pc, #468]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020e20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020e24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020e26:	4b73      	ldr	r3, [pc, #460]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e28:	681b      	ldr	r3, [r3, #0]
 8020e2a:	f003 0304 	and.w	r3, r3, #4
 8020e2e:	2b04      	cmp	r3, #4
 8020e30:	d10c      	bne.n	8020e4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8020e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d109      	bne.n	8020e4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020e38:	4b6e      	ldr	r3, [pc, #440]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e3a:	681b      	ldr	r3, [r3, #0]
 8020e3c:	08db      	lsrs	r3, r3, #3
 8020e3e:	f003 0303 	and.w	r3, r3, #3
 8020e42:	4a6d      	ldr	r2, [pc, #436]	@ (8020ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020e44:	fa22 f303 	lsr.w	r3, r2, r3
 8020e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020e4a:	e01f      	b.n	8020e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020e4c:	4b69      	ldr	r3, [pc, #420]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020e58:	d106      	bne.n	8020e68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8020e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020e60:	d102      	bne.n	8020e68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020e62:	4b66      	ldr	r3, [pc, #408]	@ (8020ffc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020e66:	e011      	b.n	8020e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020e68:	4b62      	ldr	r3, [pc, #392]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020e74:	d106      	bne.n	8020e84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8020e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020e7c:	d102      	bne.n	8020e84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8020e7e:	4b60      	ldr	r3, [pc, #384]	@ (8021000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8020e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020e82:	e003      	b.n	8020e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8020e84:	2300      	movs	r3, #0
 8020e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8020e88:	f000 bce1 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8020e8c:	f000 bcdf 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8020e90:	4b5c      	ldr	r3, [pc, #368]	@ (8021004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8020e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e94:	f000 bcdb 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8020e98:	2300      	movs	r3, #0
 8020e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e9c:	f000 bcd7 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8020ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020ea4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8020ea8:	430b      	orrs	r3, r1
 8020eaa:	f040 80ad 	bne.w	8021008 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8020eae:	4b51      	ldr	r3, [pc, #324]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020eb2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8020eb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020ebe:	d056      	beq.n	8020f6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8020ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020ec6:	f200 8090 	bhi.w	8020fea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ecc:	2bc0      	cmp	r3, #192	@ 0xc0
 8020ece:	f000 8088 	beq.w	8020fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8020ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ed4:	2bc0      	cmp	r3, #192	@ 0xc0
 8020ed6:	f200 8088 	bhi.w	8020fea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020edc:	2b80      	cmp	r3, #128	@ 0x80
 8020ede:	d032      	beq.n	8020f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8020ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ee2:	2b80      	cmp	r3, #128	@ 0x80
 8020ee4:	f200 8081 	bhi.w	8020fea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d003      	beq.n	8020ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8020eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ef0:	2b40      	cmp	r3, #64	@ 0x40
 8020ef2:	d014      	beq.n	8020f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8020ef4:	e079      	b.n	8020fea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020f02:	d108      	bne.n	8020f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020f08:	4618      	mov	r0, r3
 8020f0a:	f000 ff67 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f12:	f000 bc9c 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f16:	2300      	movs	r3, #0
 8020f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f1a:	f000 bc98 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020f1e:	4b35      	ldr	r3, [pc, #212]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020f2a:	d108      	bne.n	8020f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020f2c:	f107 0318 	add.w	r3, r7, #24
 8020f30:	4618      	mov	r0, r3
 8020f32:	f000 fcab 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020f36:	69bb      	ldr	r3, [r7, #24]
 8020f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f3a:	f000 bc88 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f3e:	2300      	movs	r3, #0
 8020f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f42:	f000 bc84 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020f46:	4b2b      	ldr	r3, [pc, #172]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f48:	681b      	ldr	r3, [r3, #0]
 8020f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020f52:	d108      	bne.n	8020f66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f54:	f107 030c 	add.w	r3, r7, #12
 8020f58:	4618      	mov	r0, r3
 8020f5a:	f000 fdeb 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020f5e:	68fb      	ldr	r3, [r7, #12]
 8020f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f62:	f000 bc74 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f66:	2300      	movs	r3, #0
 8020f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f6a:	f000 bc70 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020f6e:	4b21      	ldr	r3, [pc, #132]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020f72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020f76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020f78:	4b1e      	ldr	r3, [pc, #120]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	f003 0304 	and.w	r3, r3, #4
 8020f80:	2b04      	cmp	r3, #4
 8020f82:	d10c      	bne.n	8020f9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8020f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d109      	bne.n	8020f9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	08db      	lsrs	r3, r3, #3
 8020f90:	f003 0303 	and.w	r3, r3, #3
 8020f94:	4a18      	ldr	r2, [pc, #96]	@ (8020ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020f96:	fa22 f303 	lsr.w	r3, r2, r3
 8020f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020f9c:	e01f      	b.n	8020fde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020f9e:	4b15      	ldr	r3, [pc, #84]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020faa:	d106      	bne.n	8020fba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8020fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020fb2:	d102      	bne.n	8020fba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020fb4:	4b11      	ldr	r3, [pc, #68]	@ (8020ffc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020fb8:	e011      	b.n	8020fde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020fba:	4b0e      	ldr	r3, [pc, #56]	@ (8020ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020fc6:	d106      	bne.n	8020fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8020fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020fce:	d102      	bne.n	8020fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8020fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8021000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8020fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020fd4:	e003      	b.n	8020fde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8020fd6:	2300      	movs	r3, #0
 8020fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8020fda:	f000 bc38 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8020fde:	f000 bc36 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8020fe2:	4b08      	ldr	r3, [pc, #32]	@ (8021004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8020fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fe6:	f000 bc32 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8020fea:	2300      	movs	r3, #0
 8020fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fee:	f000 bc2e 	b.w	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8020ff2:	bf00      	nop
 8020ff4:	58024400 	.word	0x58024400
 8020ff8:	03d09000 	.word	0x03d09000
 8020ffc:	003d0900 	.word	0x003d0900
 8021000:	017d7840 	.word	0x017d7840
 8021004:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8021008:	e9d7 2300 	ldrd	r2, r3, [r7]
 802100c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8021010:	430b      	orrs	r3, r1
 8021012:	f040 809c 	bne.w	802114e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8021016:	4b9e      	ldr	r3, [pc, #632]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802101a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 802101e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8021020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021022:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8021026:	d054      	beq.n	80210d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8021028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802102a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802102e:	f200 808b 	bhi.w	8021148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8021032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021034:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8021038:	f000 8083 	beq.w	8021142 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 802103c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802103e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8021042:	f200 8081 	bhi.w	8021148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8021046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802104c:	d02f      	beq.n	80210ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 802104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021054:	d878      	bhi.n	8021148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8021056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021058:	2b00      	cmp	r3, #0
 802105a:	d004      	beq.n	8021066 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 802105c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802105e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8021062:	d012      	beq.n	802108a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8021064:	e070      	b.n	8021148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021066:	4b8a      	ldr	r3, [pc, #552]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802106e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021072:	d107      	bne.n	8021084 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021078:	4618      	mov	r0, r3
 802107a:	f000 feaf 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021082:	e3e4      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021084:	2300      	movs	r3, #0
 8021086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021088:	e3e1      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802108a:	4b81      	ldr	r3, [pc, #516]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021096:	d107      	bne.n	80210a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021098:	f107 0318 	add.w	r3, r7, #24
 802109c:	4618      	mov	r0, r3
 802109e:	f000 fbf5 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80210a2:	69bb      	ldr	r3, [r7, #24]
 80210a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210a6:	e3d2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210a8:	2300      	movs	r3, #0
 80210aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210ac:	e3cf      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80210ae:	4b78      	ldr	r3, [pc, #480]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80210b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80210ba:	d107      	bne.n	80210cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80210bc:	f107 030c 	add.w	r3, r7, #12
 80210c0:	4618      	mov	r0, r3
 80210c2:	f000 fd37 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210ca:	e3c0      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210cc:	2300      	movs	r3, #0
 80210ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210d0:	e3bd      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80210d2:	4b6f      	ldr	r3, [pc, #444]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80210d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80210da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80210dc:	4b6c      	ldr	r3, [pc, #432]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210de:	681b      	ldr	r3, [r3, #0]
 80210e0:	f003 0304 	and.w	r3, r3, #4
 80210e4:	2b04      	cmp	r3, #4
 80210e6:	d10c      	bne.n	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80210e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d109      	bne.n	8021102 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80210ee:	4b68      	ldr	r3, [pc, #416]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	08db      	lsrs	r3, r3, #3
 80210f4:	f003 0303 	and.w	r3, r3, #3
 80210f8:	4a66      	ldr	r2, [pc, #408]	@ (8021294 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80210fa:	fa22 f303 	lsr.w	r3, r2, r3
 80210fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021100:	e01e      	b.n	8021140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021102:	4b63      	ldr	r3, [pc, #396]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802110a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802110e:	d106      	bne.n	802111e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8021110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021116:	d102      	bne.n	802111e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021118:	4b5f      	ldr	r3, [pc, #380]	@ (8021298 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 802111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802111c:	e010      	b.n	8021140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802111e:	4b5c      	ldr	r3, [pc, #368]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802112a:	d106      	bne.n	802113a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 802112c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802112e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021132:	d102      	bne.n	802113a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021134:	4b59      	ldr	r3, [pc, #356]	@ (802129c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8021136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021138:	e002      	b.n	8021140 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802113a:	2300      	movs	r3, #0
 802113c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 802113e:	e386      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021140:	e385      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8021142:	4b57      	ldr	r3, [pc, #348]	@ (80212a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8021144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021146:	e382      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021148:	2300      	movs	r3, #0
 802114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802114c:	e37f      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 802114e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021152:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8021156:	430b      	orrs	r3, r1
 8021158:	f040 80a7 	bne.w	80212aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 802115c:	4b4c      	ldr	r3, [pc, #304]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021160:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8021164:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8021166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021168:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802116c:	d055      	beq.n	802121a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 802116e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8021174:	f200 8096 	bhi.w	80212a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8021178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802117a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 802117e:	f000 8084 	beq.w	802128a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8021182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021184:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8021188:	f200 808c 	bhi.w	80212a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 802118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802118e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021192:	d030      	beq.n	80211f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8021194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802119a:	f200 8083 	bhi.w	80212a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 802119e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d004      	beq.n	80211ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80211a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80211aa:	d012      	beq.n	80211d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80211ac:	e07a      	b.n	80212a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80211ae:	4b38      	ldr	r3, [pc, #224]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80211b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80211ba:	d107      	bne.n	80211cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80211bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80211c0:	4618      	mov	r0, r3
 80211c2:	f000 fe0b 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80211c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80211c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80211ca:	e340      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80211cc:	2300      	movs	r3, #0
 80211ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211d0:	e33d      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80211d2:	4b2f      	ldr	r3, [pc, #188]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80211da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80211de:	d107      	bne.n	80211f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80211e0:	f107 0318 	add.w	r3, r7, #24
 80211e4:	4618      	mov	r0, r3
 80211e6:	f000 fb51 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80211ea:	69bb      	ldr	r3, [r7, #24]
 80211ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80211ee:	e32e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80211f0:	2300      	movs	r3, #0
 80211f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211f4:	e32b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80211f6:	4b26      	ldr	r3, [pc, #152]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80211fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021202:	d107      	bne.n	8021214 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021204:	f107 030c 	add.w	r3, r7, #12
 8021208:	4618      	mov	r0, r3
 802120a:	f000 fc93 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021212:	e31c      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021214:	2300      	movs	r3, #0
 8021216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021218:	e319      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802121a:	4b1d      	ldr	r3, [pc, #116]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802121e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021222:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021224:	4b1a      	ldr	r3, [pc, #104]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	f003 0304 	and.w	r3, r3, #4
 802122c:	2b04      	cmp	r3, #4
 802122e:	d10c      	bne.n	802124a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8021230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021232:	2b00      	cmp	r3, #0
 8021234:	d109      	bne.n	802124a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021236:	4b16      	ldr	r3, [pc, #88]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	08db      	lsrs	r3, r3, #3
 802123c:	f003 0303 	and.w	r3, r3, #3
 8021240:	4a14      	ldr	r2, [pc, #80]	@ (8021294 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8021242:	fa22 f303 	lsr.w	r3, r2, r3
 8021246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021248:	e01e      	b.n	8021288 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802124a:	4b11      	ldr	r3, [pc, #68]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802124c:	681b      	ldr	r3, [r3, #0]
 802124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021256:	d106      	bne.n	8021266 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8021258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802125a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802125e:	d102      	bne.n	8021266 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021260:	4b0d      	ldr	r3, [pc, #52]	@ (8021298 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8021262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021264:	e010      	b.n	8021288 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021266:	4b0a      	ldr	r3, [pc, #40]	@ (8021290 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802126e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021272:	d106      	bne.n	8021282 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8021274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802127a:	d102      	bne.n	8021282 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802127c:	4b07      	ldr	r3, [pc, #28]	@ (802129c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 802127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021280:	e002      	b.n	8021288 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021282:	2300      	movs	r3, #0
 8021284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021286:	e2e2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021288:	e2e1      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802128a:	4b05      	ldr	r3, [pc, #20]	@ (80212a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 802128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802128e:	e2de      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021290:	58024400 	.word	0x58024400
 8021294:	03d09000 	.word	0x03d09000
 8021298:	003d0900 	.word	0x003d0900
 802129c:	017d7840 	.word	0x017d7840
 80212a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80212a4:	2300      	movs	r3, #0
 80212a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212a8:	e2d1      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80212aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80212ae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80212b2:	430b      	orrs	r3, r1
 80212b4:	f040 809c 	bne.w	80213f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80212b8:	4b93      	ldr	r3, [pc, #588]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80212ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80212bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80212c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80212c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80212c8:	d054      	beq.n	8021374 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80212ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80212d0:	f200 808b 	bhi.w	80213ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80212d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80212da:	f000 8083 	beq.w	80213e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80212de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80212e4:	f200 8081 	bhi.w	80213ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80212e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80212ee:	d02f      	beq.n	8021350 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80212f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80212f6:	d878      	bhi.n	80213ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80212f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d004      	beq.n	8021308 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80212fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021304:	d012      	beq.n	802132c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8021306:	e070      	b.n	80213ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021308:	4b7f      	ldr	r3, [pc, #508]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021314:	d107      	bne.n	8021326 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802131a:	4618      	mov	r0, r3
 802131c:	f000 fd5e 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021324:	e293      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021326:	2300      	movs	r3, #0
 8021328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802132a:	e290      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802132c:	4b76      	ldr	r3, [pc, #472]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021338:	d107      	bne.n	802134a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802133a:	f107 0318 	add.w	r3, r7, #24
 802133e:	4618      	mov	r0, r3
 8021340:	f000 faa4 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8021344:	69bb      	ldr	r3, [r7, #24]
 8021346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021348:	e281      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802134a:	2300      	movs	r3, #0
 802134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802134e:	e27e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021350:	4b6d      	ldr	r3, [pc, #436]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802135c:	d107      	bne.n	802136e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802135e:	f107 030c 	add.w	r3, r7, #12
 8021362:	4618      	mov	r0, r3
 8021364:	f000 fbe6 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021368:	68fb      	ldr	r3, [r7, #12]
 802136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802136c:	e26f      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802136e:	2300      	movs	r3, #0
 8021370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021372:	e26c      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021374:	4b64      	ldr	r3, [pc, #400]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802137c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802137e:	4b62      	ldr	r3, [pc, #392]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	f003 0304 	and.w	r3, r3, #4
 8021386:	2b04      	cmp	r3, #4
 8021388:	d10c      	bne.n	80213a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 802138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802138c:	2b00      	cmp	r3, #0
 802138e:	d109      	bne.n	80213a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021390:	4b5d      	ldr	r3, [pc, #372]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021392:	681b      	ldr	r3, [r3, #0]
 8021394:	08db      	lsrs	r3, r3, #3
 8021396:	f003 0303 	and.w	r3, r3, #3
 802139a:	4a5c      	ldr	r2, [pc, #368]	@ (802150c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 802139c:	fa22 f303 	lsr.w	r3, r2, r3
 80213a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213a2:	e01e      	b.n	80213e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80213a4:	4b58      	ldr	r3, [pc, #352]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80213ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80213b0:	d106      	bne.n	80213c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80213b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80213b8:	d102      	bne.n	80213c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80213ba:	4b55      	ldr	r3, [pc, #340]	@ (8021510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80213bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213be:	e010      	b.n	80213e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80213c0:	4b51      	ldr	r3, [pc, #324]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80213c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80213cc:	d106      	bne.n	80213dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80213ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80213d4:	d102      	bne.n	80213dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80213d6:	4b4f      	ldr	r3, [pc, #316]	@ (8021514 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80213d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213da:	e002      	b.n	80213e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80213dc:	2300      	movs	r3, #0
 80213de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80213e0:	e235      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80213e2:	e234      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80213e4:	4b4c      	ldr	r3, [pc, #304]	@ (8021518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80213e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213e8:	e231      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80213ea:	2300      	movs	r3, #0
 80213ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213ee:	e22e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80213f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80213f4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80213f8:	430b      	orrs	r3, r1
 80213fa:	f040 808f 	bne.w	802151c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80213fe:	4b42      	ldr	r3, [pc, #264]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021402:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8021406:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8021408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802140a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802140e:	d06b      	beq.n	80214e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8021410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021416:	d874      	bhi.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802141a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802141e:	d056      	beq.n	80214ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8021420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8021426:	d86c      	bhi.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802142a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802142e:	d03b      	beq.n	80214a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8021430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021432:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8021436:	d864      	bhi.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802143a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802143e:	d021      	beq.n	8021484 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8021440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021446:	d85c      	bhi.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802144a:	2b00      	cmp	r3, #0
 802144c:	d004      	beq.n	8021458 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 802144e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021454:	d004      	beq.n	8021460 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8021456:	e054      	b.n	8021502 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8021458:	f7fe fa4c 	bl	801f8f4 <HAL_RCC_GetPCLK1Freq>
 802145c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802145e:	e1f6      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021460:	4b29      	ldr	r3, [pc, #164]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802146c:	d107      	bne.n	802147e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802146e:	f107 0318 	add.w	r3, r7, #24
 8021472:	4618      	mov	r0, r3
 8021474:	f000 fa0a 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021478:	69fb      	ldr	r3, [r7, #28]
 802147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802147c:	e1e7      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802147e:	2300      	movs	r3, #0
 8021480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021482:	e1e4      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021484:	4b20      	ldr	r3, [pc, #128]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802148c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021490:	d107      	bne.n	80214a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021492:	f107 030c 	add.w	r3, r7, #12
 8021496:	4618      	mov	r0, r3
 8021498:	f000 fb4c 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 802149c:	693b      	ldr	r3, [r7, #16]
 802149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214a0:	e1d5      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214a2:	2300      	movs	r3, #0
 80214a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214a6:	e1d2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80214a8:	4b17      	ldr	r3, [pc, #92]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	f003 0304 	and.w	r3, r3, #4
 80214b0:	2b04      	cmp	r3, #4
 80214b2:	d109      	bne.n	80214c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80214b4:	4b14      	ldr	r3, [pc, #80]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	08db      	lsrs	r3, r3, #3
 80214ba:	f003 0303 	and.w	r3, r3, #3
 80214be:	4a13      	ldr	r2, [pc, #76]	@ (802150c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80214c0:	fa22 f303 	lsr.w	r3, r2, r3
 80214c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214c6:	e1c2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214c8:	2300      	movs	r3, #0
 80214ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214cc:	e1bf      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80214ce:	4b0e      	ldr	r3, [pc, #56]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80214d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80214da:	d102      	bne.n	80214e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80214dc:	4b0c      	ldr	r3, [pc, #48]	@ (8021510 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80214de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214e0:	e1b5      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214e2:	2300      	movs	r3, #0
 80214e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214e6:	e1b2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80214e8:	4b07      	ldr	r3, [pc, #28]	@ (8021508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80214f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80214f4:	d102      	bne.n	80214fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80214f6:	4b07      	ldr	r3, [pc, #28]	@ (8021514 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80214f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214fa:	e1a8      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214fc:	2300      	movs	r3, #0
 80214fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021500:	e1a5      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021502:	2300      	movs	r3, #0
 8021504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021506:	e1a2      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021508:	58024400 	.word	0x58024400
 802150c:	03d09000 	.word	0x03d09000
 8021510:	003d0900 	.word	0x003d0900
 8021514:	017d7840 	.word	0x017d7840
 8021518:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 802151c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021520:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8021524:	430b      	orrs	r3, r1
 8021526:	d173      	bne.n	8021610 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8021528:	4b9c      	ldr	r3, [pc, #624]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802152c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8021530:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8021532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021538:	d02f      	beq.n	802159a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 802153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802153c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021540:	d863      	bhi.n	802160a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8021542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021544:	2b00      	cmp	r3, #0
 8021546:	d004      	beq.n	8021552 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8021548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802154a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802154e:	d012      	beq.n	8021576 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8021550:	e05b      	b.n	802160a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021552:	4b92      	ldr	r3, [pc, #584]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802155a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802155e:	d107      	bne.n	8021570 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021560:	f107 0318 	add.w	r3, r7, #24
 8021564:	4618      	mov	r0, r3
 8021566:	f000 f991 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 802156a:	69bb      	ldr	r3, [r7, #24]
 802156c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802156e:	e16e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021570:	2300      	movs	r3, #0
 8021572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021574:	e16b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021576:	4b89      	ldr	r3, [pc, #548]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802157e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021582:	d107      	bne.n	8021594 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021584:	f107 030c 	add.w	r3, r7, #12
 8021588:	4618      	mov	r0, r3
 802158a:	f000 fad3 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 802158e:	697b      	ldr	r3, [r7, #20]
 8021590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021592:	e15c      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021594:	2300      	movs	r3, #0
 8021596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021598:	e159      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802159a:	4b80      	ldr	r3, [pc, #512]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802159e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80215a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80215a4:	4b7d      	ldr	r3, [pc, #500]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	f003 0304 	and.w	r3, r3, #4
 80215ac:	2b04      	cmp	r3, #4
 80215ae:	d10c      	bne.n	80215ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80215b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d109      	bne.n	80215ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80215b6:	4b79      	ldr	r3, [pc, #484]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	08db      	lsrs	r3, r3, #3
 80215bc:	f003 0303 	and.w	r3, r3, #3
 80215c0:	4a77      	ldr	r2, [pc, #476]	@ (80217a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80215c2:	fa22 f303 	lsr.w	r3, r2, r3
 80215c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80215c8:	e01e      	b.n	8021608 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80215ca:	4b74      	ldr	r3, [pc, #464]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80215d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80215d6:	d106      	bne.n	80215e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80215d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80215da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80215de:	d102      	bne.n	80215e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80215e0:	4b70      	ldr	r3, [pc, #448]	@ (80217a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80215e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80215e4:	e010      	b.n	8021608 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80215e6:	4b6d      	ldr	r3, [pc, #436]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80215ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80215f2:	d106      	bne.n	8021602 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80215f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80215f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80215fa:	d102      	bne.n	8021602 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80215fc:	4b6a      	ldr	r3, [pc, #424]	@ (80217a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80215fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021600:	e002      	b.n	8021608 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021602:	2300      	movs	r3, #0
 8021604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021606:	e122      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021608:	e121      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 802160a:	2300      	movs	r3, #0
 802160c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802160e:	e11e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8021610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021614:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8021618:	430b      	orrs	r3, r1
 802161a:	d133      	bne.n	8021684 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 802161c:	4b5f      	ldr	r3, [pc, #380]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021624:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8021626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021628:	2b00      	cmp	r3, #0
 802162a:	d004      	beq.n	8021636 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 802162c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802162e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021632:	d012      	beq.n	802165a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8021634:	e023      	b.n	802167e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021636:	4b59      	ldr	r3, [pc, #356]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802163e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021642:	d107      	bne.n	8021654 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021648:	4618      	mov	r0, r3
 802164a:	f000 fbc7 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021652:	e0fc      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021654:	2300      	movs	r3, #0
 8021656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021658:	e0f9      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802165a:	4b50      	ldr	r3, [pc, #320]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021666:	d107      	bne.n	8021678 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021668:	f107 0318 	add.w	r3, r7, #24
 802166c:	4618      	mov	r0, r3
 802166e:	f000 f90d 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8021672:	6a3b      	ldr	r3, [r7, #32]
 8021674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021676:	e0ea      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021678:	2300      	movs	r3, #0
 802167a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802167c:	e0e7      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 802167e:	2300      	movs	r3, #0
 8021680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021682:	e0e4      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8021684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021688:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 802168c:	430b      	orrs	r3, r1
 802168e:	f040 808d 	bne.w	80217ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8021692:	4b42      	ldr	r3, [pc, #264]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021696:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 802169a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802169e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80216a2:	d06b      	beq.n	802177c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80216a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80216aa:	d874      	bhi.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80216ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80216b2:	d056      	beq.n	8021762 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80216b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80216ba:	d86c      	bhi.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80216bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80216c2:	d03b      	beq.n	802173c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80216c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80216ca:	d864      	bhi.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80216cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80216d2:	d021      	beq.n	8021718 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80216d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80216da:	d85c      	bhi.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80216dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d004      	beq.n	80216ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80216e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80216e8:	d004      	beq.n	80216f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80216ea:	e054      	b.n	8021796 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80216ec:	f000 f8b8 	bl	8021860 <HAL_RCCEx_GetD3PCLK1Freq>
 80216f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80216f2:	e0ac      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80216f4:	4b29      	ldr	r3, [pc, #164]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80216fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021700:	d107      	bne.n	8021712 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021702:	f107 0318 	add.w	r3, r7, #24
 8021706:	4618      	mov	r0, r3
 8021708:	f000 f8c0 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 802170c:	69fb      	ldr	r3, [r7, #28]
 802170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021710:	e09d      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021712:	2300      	movs	r3, #0
 8021714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021716:	e09a      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021718:	4b20      	ldr	r3, [pc, #128]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802171a:	681b      	ldr	r3, [r3, #0]
 802171c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021724:	d107      	bne.n	8021736 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021726:	f107 030c 	add.w	r3, r7, #12
 802172a:	4618      	mov	r0, r3
 802172c:	f000 fa02 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8021730:	693b      	ldr	r3, [r7, #16]
 8021732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021734:	e08b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021736:	2300      	movs	r3, #0
 8021738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802173a:	e088      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 802173c:	4b17      	ldr	r3, [pc, #92]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	f003 0304 	and.w	r3, r3, #4
 8021744:	2b04      	cmp	r3, #4
 8021746:	d109      	bne.n	802175c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021748:	4b14      	ldr	r3, [pc, #80]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	08db      	lsrs	r3, r3, #3
 802174e:	f003 0303 	and.w	r3, r3, #3
 8021752:	4a13      	ldr	r2, [pc, #76]	@ (80217a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8021754:	fa22 f303 	lsr.w	r3, r2, r3
 8021758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802175a:	e078      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802175c:	2300      	movs	r3, #0
 802175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021760:	e075      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8021762:	4b0e      	ldr	r3, [pc, #56]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802176a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802176e:	d102      	bne.n	8021776 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8021770:	4b0c      	ldr	r3, [pc, #48]	@ (80217a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8021772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021774:	e06b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021776:	2300      	movs	r3, #0
 8021778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802177a:	e068      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 802177c:	4b07      	ldr	r3, [pc, #28]	@ (802179c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802177e:	681b      	ldr	r3, [r3, #0]
 8021780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021788:	d102      	bne.n	8021790 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 802178a:	4b07      	ldr	r3, [pc, #28]	@ (80217a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 802178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802178e:	e05e      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021790:	2300      	movs	r3, #0
 8021792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021794:	e05b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8021796:	2300      	movs	r3, #0
 8021798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802179a:	e058      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802179c:	58024400 	.word	0x58024400
 80217a0:	03d09000 	.word	0x03d09000
 80217a4:	003d0900 	.word	0x003d0900
 80217a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80217ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80217b4:	430b      	orrs	r3, r1
 80217b6:	d148      	bne.n	802184a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80217b8:	4b27      	ldr	r3, [pc, #156]	@ (8021858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80217ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80217bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80217c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80217c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80217c8:	d02a      	beq.n	8021820 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80217ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80217d0:	d838      	bhi.n	8021844 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80217d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d004      	beq.n	80217e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80217d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80217de:	d00d      	beq.n	80217fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80217e0:	e030      	b.n	8021844 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80217e2:	4b1d      	ldr	r3, [pc, #116]	@ (8021858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80217e4:	681b      	ldr	r3, [r3, #0]
 80217e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80217ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80217ee:	d102      	bne.n	80217f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80217f0:	4b1a      	ldr	r3, [pc, #104]	@ (802185c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80217f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80217f4:	e02b      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80217f6:	2300      	movs	r3, #0
 80217f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217fa:	e028      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80217fc:	4b16      	ldr	r3, [pc, #88]	@ (8021858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021808:	d107      	bne.n	802181a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802180a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802180e:	4618      	mov	r0, r3
 8021810:	f000 fae4 	bl	8021ddc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021818:	e019      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802181a:	2300      	movs	r3, #0
 802181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802181e:	e016      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021820:	4b0d      	ldr	r3, [pc, #52]	@ (8021858 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802182c:	d107      	bne.n	802183e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802182e:	f107 0318 	add.w	r3, r7, #24
 8021832:	4618      	mov	r0, r3
 8021834:	f000 f82a 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021838:	69fb      	ldr	r3, [r7, #28]
 802183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802183c:	e007      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802183e:	2300      	movs	r3, #0
 8021840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021842:	e004      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021844:	2300      	movs	r3, #0
 8021846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021848:	e001      	b.n	802184e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 802184a:	2300      	movs	r3, #0
 802184c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 802184e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8021850:	4618      	mov	r0, r3
 8021852:	3740      	adds	r7, #64	@ 0x40
 8021854:	46bd      	mov	sp, r7
 8021856:	bd80      	pop	{r7, pc}
 8021858:	58024400 	.word	0x58024400
 802185c:	017d7840 	.word	0x017d7840

08021860 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8021860:	b580      	push	{r7, lr}
 8021862:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8021864:	f7fe f816 	bl	801f894 <HAL_RCC_GetHCLKFreq>
 8021868:	4602      	mov	r2, r0
 802186a:	4b06      	ldr	r3, [pc, #24]	@ (8021884 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 802186c:	6a1b      	ldr	r3, [r3, #32]
 802186e:	091b      	lsrs	r3, r3, #4
 8021870:	f003 0307 	and.w	r3, r3, #7
 8021874:	4904      	ldr	r1, [pc, #16]	@ (8021888 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8021876:	5ccb      	ldrb	r3, [r1, r3]
 8021878:	f003 031f 	and.w	r3, r3, #31
 802187c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8021880:	4618      	mov	r0, r3
 8021882:	bd80      	pop	{r7, pc}
 8021884:	58024400 	.word	0x58024400
 8021888:	0802b320 	.word	0x0802b320

0802188c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 802188c:	b480      	push	{r7}
 802188e:	b089      	sub	sp, #36	@ 0x24
 8021890:	af00      	add	r7, sp, #0
 8021892:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021894:	4ba1      	ldr	r3, [pc, #644]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021898:	f003 0303 	and.w	r3, r3, #3
 802189c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 802189e:	4b9f      	ldr	r3, [pc, #636]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218a2:	0b1b      	lsrs	r3, r3, #12
 80218a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80218a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80218aa:	4b9c      	ldr	r3, [pc, #624]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218ae:	091b      	lsrs	r3, r3, #4
 80218b0:	f003 0301 	and.w	r3, r3, #1
 80218b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80218b6:	4b99      	ldr	r3, [pc, #612]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80218ba:	08db      	lsrs	r3, r3, #3
 80218bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80218c0:	693a      	ldr	r2, [r7, #16]
 80218c2:	fb02 f303 	mul.w	r3, r2, r3
 80218c6:	ee07 3a90 	vmov	s15, r3
 80218ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80218ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80218d2:	697b      	ldr	r3, [r7, #20]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	f000 8111 	beq.w	8021afc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80218da:	69bb      	ldr	r3, [r7, #24]
 80218dc:	2b02      	cmp	r3, #2
 80218de:	f000 8083 	beq.w	80219e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80218e2:	69bb      	ldr	r3, [r7, #24]
 80218e4:	2b02      	cmp	r3, #2
 80218e6:	f200 80a1 	bhi.w	8021a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80218ea:	69bb      	ldr	r3, [r7, #24]
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d003      	beq.n	80218f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80218f0:	69bb      	ldr	r3, [r7, #24]
 80218f2:	2b01      	cmp	r3, #1
 80218f4:	d056      	beq.n	80219a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80218f6:	e099      	b.n	8021a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80218f8:	4b88      	ldr	r3, [pc, #544]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	f003 0320 	and.w	r3, r3, #32
 8021900:	2b00      	cmp	r3, #0
 8021902:	d02d      	beq.n	8021960 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021904:	4b85      	ldr	r3, [pc, #532]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021906:	681b      	ldr	r3, [r3, #0]
 8021908:	08db      	lsrs	r3, r3, #3
 802190a:	f003 0303 	and.w	r3, r3, #3
 802190e:	4a84      	ldr	r2, [pc, #528]	@ (8021b20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8021910:	fa22 f303 	lsr.w	r3, r2, r3
 8021914:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021916:	68bb      	ldr	r3, [r7, #8]
 8021918:	ee07 3a90 	vmov	s15, r3
 802191c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021920:	697b      	ldr	r3, [r7, #20]
 8021922:	ee07 3a90 	vmov	s15, r3
 8021926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802192a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802192e:	4b7b      	ldr	r3, [pc, #492]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021936:	ee07 3a90 	vmov	s15, r3
 802193a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802193e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021942:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802194a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802194e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021956:	ee67 7a27 	vmul.f32	s15, s14, s15
 802195a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802195e:	e087      	b.n	8021a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021960:	697b      	ldr	r3, [r7, #20]
 8021962:	ee07 3a90 	vmov	s15, r3
 8021966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802196a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021b28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 802196e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021972:	4b6a      	ldr	r3, [pc, #424]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802197a:	ee07 3a90 	vmov	s15, r3
 802197e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021982:	ed97 6a03 	vldr	s12, [r7, #12]
 8021986:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802198a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802198e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802199e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80219a2:	e065      	b.n	8021a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80219a4:	697b      	ldr	r3, [r7, #20]
 80219a6:	ee07 3a90 	vmov	s15, r3
 80219aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80219ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80219b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80219b6:	4b59      	ldr	r3, [pc, #356]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80219ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80219be:	ee07 3a90 	vmov	s15, r3
 80219c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80219c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80219ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80219ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80219d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80219d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80219da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80219de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80219e6:	e043      	b.n	8021a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80219e8:	697b      	ldr	r3, [r7, #20]
 80219ea:	ee07 3a90 	vmov	s15, r3
 80219ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80219f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80219f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80219fa:	4b48      	ldr	r3, [pc, #288]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80219fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a02:	ee07 3a90 	vmov	s15, r3
 8021a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021a2a:	e021      	b.n	8021a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021a2c:	697b      	ldr	r3, [r7, #20]
 8021a2e:	ee07 3a90 	vmov	s15, r3
 8021a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021a3e:	4b37      	ldr	r3, [pc, #220]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a46:	ee07 3a90 	vmov	s15, r3
 8021a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021b24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021a6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8021a70:	4b2a      	ldr	r3, [pc, #168]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a74:	0a5b      	lsrs	r3, r3, #9
 8021a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021a7a:	ee07 3a90 	vmov	s15, r3
 8021a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8021a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021a96:	ee17 2a90 	vmov	r2, s15
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8021a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021aa2:	0c1b      	lsrs	r3, r3, #16
 8021aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021aa8:	ee07 3a90 	vmov	s15, r3
 8021aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8021abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021ac4:	ee17 2a90 	vmov	r2, s15
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8021acc:	4b13      	ldr	r3, [pc, #76]	@ (8021b1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021ad0:	0e1b      	lsrs	r3, r3, #24
 8021ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021ad6:	ee07 3a90 	vmov	s15, r3
 8021ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8021aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021af2:	ee17 2a90 	vmov	r2, s15
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8021afa:	e008      	b.n	8021b0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	2200      	movs	r2, #0
 8021b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	2200      	movs	r2, #0
 8021b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	2200      	movs	r2, #0
 8021b0c:	609a      	str	r2, [r3, #8]
}
 8021b0e:	bf00      	nop
 8021b10:	3724      	adds	r7, #36	@ 0x24
 8021b12:	46bd      	mov	sp, r7
 8021b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b18:	4770      	bx	lr
 8021b1a:	bf00      	nop
 8021b1c:	58024400 	.word	0x58024400
 8021b20:	03d09000 	.word	0x03d09000
 8021b24:	46000000 	.word	0x46000000
 8021b28:	4c742400 	.word	0x4c742400
 8021b2c:	4a742400 	.word	0x4a742400
 8021b30:	4bbebc20 	.word	0x4bbebc20

08021b34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8021b34:	b480      	push	{r7}
 8021b36:	b089      	sub	sp, #36	@ 0x24
 8021b38:	af00      	add	r7, sp, #0
 8021b3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021b3c:	4ba1      	ldr	r3, [pc, #644]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b40:	f003 0303 	and.w	r3, r3, #3
 8021b44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8021b46:	4b9f      	ldr	r3, [pc, #636]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b4a:	0d1b      	lsrs	r3, r3, #20
 8021b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021b50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8021b52:	4b9c      	ldr	r3, [pc, #624]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b56:	0a1b      	lsrs	r3, r3, #8
 8021b58:	f003 0301 	and.w	r3, r3, #1
 8021b5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8021b5e:	4b99      	ldr	r3, [pc, #612]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021b62:	08db      	lsrs	r3, r3, #3
 8021b64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021b68:	693a      	ldr	r2, [r7, #16]
 8021b6a:	fb02 f303 	mul.w	r3, r2, r3
 8021b6e:	ee07 3a90 	vmov	s15, r3
 8021b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8021b7a:	697b      	ldr	r3, [r7, #20]
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	f000 8111 	beq.w	8021da4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8021b82:	69bb      	ldr	r3, [r7, #24]
 8021b84:	2b02      	cmp	r3, #2
 8021b86:	f000 8083 	beq.w	8021c90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8021b8a:	69bb      	ldr	r3, [r7, #24]
 8021b8c:	2b02      	cmp	r3, #2
 8021b8e:	f200 80a1 	bhi.w	8021cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8021b92:	69bb      	ldr	r3, [r7, #24]
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	d003      	beq.n	8021ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8021b98:	69bb      	ldr	r3, [r7, #24]
 8021b9a:	2b01      	cmp	r3, #1
 8021b9c:	d056      	beq.n	8021c4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8021b9e:	e099      	b.n	8021cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021ba0:	4b88      	ldr	r3, [pc, #544]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	f003 0320 	and.w	r3, r3, #32
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d02d      	beq.n	8021c08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021bac:	4b85      	ldr	r3, [pc, #532]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	08db      	lsrs	r3, r3, #3
 8021bb2:	f003 0303 	and.w	r3, r3, #3
 8021bb6:	4a84      	ldr	r2, [pc, #528]	@ (8021dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8021bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8021bbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021bbe:	68bb      	ldr	r3, [r7, #8]
 8021bc0:	ee07 3a90 	vmov	s15, r3
 8021bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021bc8:	697b      	ldr	r3, [r7, #20]
 8021bca:	ee07 3a90 	vmov	s15, r3
 8021bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021bde:	ee07 3a90 	vmov	s15, r3
 8021be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8021bea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021c02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021c06:	e087      	b.n	8021d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c08:	697b      	ldr	r3, [r7, #20]
 8021c0a:	ee07 3a90 	vmov	s15, r3
 8021c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8021c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c22:	ee07 3a90 	vmov	s15, r3
 8021c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8021c2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021c4a:	e065      	b.n	8021d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c4c:	697b      	ldr	r3, [r7, #20]
 8021c4e:	ee07 3a90 	vmov	s15, r3
 8021c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021c5e:	4b59      	ldr	r3, [pc, #356]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c66:	ee07 3a90 	vmov	s15, r3
 8021c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021c72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021c8e:	e043      	b.n	8021d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c90:	697b      	ldr	r3, [r7, #20]
 8021c92:	ee07 3a90 	vmov	s15, r3
 8021c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8021c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ca2:	4b48      	ldr	r3, [pc, #288]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021caa:	ee07 3a90 	vmov	s15, r3
 8021cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8021cb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021cd2:	e021      	b.n	8021d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021cd4:	697b      	ldr	r3, [r7, #20]
 8021cd6:	ee07 3a90 	vmov	s15, r3
 8021cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021cde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ce6:	4b37      	ldr	r3, [pc, #220]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021cee:	ee07 3a90 	vmov	s15, r3
 8021cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8021cfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021dcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021d16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8021d18:	4b2a      	ldr	r3, [pc, #168]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d1c:	0a5b      	lsrs	r3, r3, #9
 8021d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d22:	ee07 3a90 	vmov	s15, r3
 8021d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8021d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d3e:	ee17 2a90 	vmov	r2, s15
 8021d42:	687b      	ldr	r3, [r7, #4]
 8021d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8021d46:	4b1f      	ldr	r3, [pc, #124]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d4a:	0c1b      	lsrs	r3, r3, #16
 8021d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d50:	ee07 3a90 	vmov	s15, r3
 8021d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8021d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d6c:	ee17 2a90 	vmov	r2, s15
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8021d74:	4b13      	ldr	r3, [pc, #76]	@ (8021dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d78:	0e1b      	lsrs	r3, r3, #24
 8021d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d7e:	ee07 3a90 	vmov	s15, r3
 8021d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8021d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d9a:	ee17 2a90 	vmov	r2, s15
 8021d9e:	687b      	ldr	r3, [r7, #4]
 8021da0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8021da2:	e008      	b.n	8021db6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	2200      	movs	r2, #0
 8021da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	2200      	movs	r2, #0
 8021dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	2200      	movs	r2, #0
 8021db4:	609a      	str	r2, [r3, #8]
}
 8021db6:	bf00      	nop
 8021db8:	3724      	adds	r7, #36	@ 0x24
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc0:	4770      	bx	lr
 8021dc2:	bf00      	nop
 8021dc4:	58024400 	.word	0x58024400
 8021dc8:	03d09000 	.word	0x03d09000
 8021dcc:	46000000 	.word	0x46000000
 8021dd0:	4c742400 	.word	0x4c742400
 8021dd4:	4a742400 	.word	0x4a742400
 8021dd8:	4bbebc20 	.word	0x4bbebc20

08021ddc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8021ddc:	b480      	push	{r7}
 8021dde:	b089      	sub	sp, #36	@ 0x24
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021de4:	4ba0      	ldr	r3, [pc, #640]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021de8:	f003 0303 	and.w	r3, r3, #3
 8021dec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8021dee:	4b9e      	ldr	r3, [pc, #632]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021df2:	091b      	lsrs	r3, r3, #4
 8021df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021df8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8021dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021dfe:	f003 0301 	and.w	r3, r3, #1
 8021e02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8021e04:	4b98      	ldr	r3, [pc, #608]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021e08:	08db      	lsrs	r3, r3, #3
 8021e0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021e0e:	693a      	ldr	r2, [r7, #16]
 8021e10:	fb02 f303 	mul.w	r3, r2, r3
 8021e14:	ee07 3a90 	vmov	s15, r3
 8021e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8021e20:	697b      	ldr	r3, [r7, #20]
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	f000 8111 	beq.w	802204a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8021e28:	69bb      	ldr	r3, [r7, #24]
 8021e2a:	2b02      	cmp	r3, #2
 8021e2c:	f000 8083 	beq.w	8021f36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8021e30:	69bb      	ldr	r3, [r7, #24]
 8021e32:	2b02      	cmp	r3, #2
 8021e34:	f200 80a1 	bhi.w	8021f7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8021e38:	69bb      	ldr	r3, [r7, #24]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d003      	beq.n	8021e46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8021e3e:	69bb      	ldr	r3, [r7, #24]
 8021e40:	2b01      	cmp	r3, #1
 8021e42:	d056      	beq.n	8021ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8021e44:	e099      	b.n	8021f7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021e46:	4b88      	ldr	r3, [pc, #544]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	f003 0320 	and.w	r3, r3, #32
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d02d      	beq.n	8021eae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021e52:	4b85      	ldr	r3, [pc, #532]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	08db      	lsrs	r3, r3, #3
 8021e58:	f003 0303 	and.w	r3, r3, #3
 8021e5c:	4a83      	ldr	r2, [pc, #524]	@ (802206c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8021e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8021e62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021e64:	68bb      	ldr	r3, [r7, #8]
 8021e66:	ee07 3a90 	vmov	s15, r3
 8021e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021e6e:	697b      	ldr	r3, [r7, #20]
 8021e70:	ee07 3a90 	vmov	s15, r3
 8021e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021e7c:	4b7a      	ldr	r3, [pc, #488]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021e84:	ee07 3a90 	vmov	s15, r3
 8021e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8021e90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8022070 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021ea8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021eac:	e087      	b.n	8021fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021eae:	697b      	ldr	r3, [r7, #20]
 8021eb0:	ee07 3a90 	vmov	s15, r3
 8021eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021eb8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8022074 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8021ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ec0:	4b69      	ldr	r3, [pc, #420]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021ec8:	ee07 3a90 	vmov	s15, r3
 8021ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8021ed4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8022070 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021eec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021ef0:	e065      	b.n	8021fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021ef2:	697b      	ldr	r3, [r7, #20]
 8021ef4:	ee07 3a90 	vmov	s15, r3
 8021ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021efc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8022078 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8021f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f04:	4b58      	ldr	r3, [pc, #352]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f0c:	ee07 3a90 	vmov	s15, r3
 8021f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8021f18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8022070 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021f30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021f34:	e043      	b.n	8021fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021f36:	697b      	ldr	r3, [r7, #20]
 8021f38:	ee07 3a90 	vmov	s15, r3
 8021f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 802207c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8021f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f48:	4b47      	ldr	r3, [pc, #284]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f50:	ee07 3a90 	vmov	s15, r3
 8021f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f58:	ed97 6a03 	vldr	s12, [r7, #12]
 8021f5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8022070 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021f68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021f74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021f78:	e021      	b.n	8021fbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021f7a:	697b      	ldr	r3, [r7, #20]
 8021f7c:	ee07 3a90 	vmov	s15, r3
 8021f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8022074 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8021f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f8c:	4b36      	ldr	r3, [pc, #216]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f94:	ee07 3a90 	vmov	s15, r3
 8021f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8021fa0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8022070 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021fbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8021fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fc2:	0a5b      	lsrs	r3, r3, #9
 8021fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021fc8:	ee07 3a90 	vmov	s15, r3
 8021fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8021fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021fe4:	ee17 2a90 	vmov	r2, s15
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8021fec:	4b1e      	ldr	r3, [pc, #120]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ff0:	0c1b      	lsrs	r3, r3, #16
 8021ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021ff6:	ee07 3a90 	vmov	s15, r3
 8021ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8022006:	edd7 6a07 	vldr	s13, [r7, #28]
 802200a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802200e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022012:	ee17 2a90 	vmov	r2, s15
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 802201a:	4b13      	ldr	r3, [pc, #76]	@ (8022068 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 802201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802201e:	0e1b      	lsrs	r3, r3, #24
 8022020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022024:	ee07 3a90 	vmov	s15, r3
 8022028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802202c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8022034:	edd7 6a07 	vldr	s13, [r7, #28]
 8022038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022040:	ee17 2a90 	vmov	r2, s15
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8022048:	e008      	b.n	802205c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	2200      	movs	r2, #0
 802204e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	2200      	movs	r2, #0
 8022054:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	2200      	movs	r2, #0
 802205a:	609a      	str	r2, [r3, #8]
}
 802205c:	bf00      	nop
 802205e:	3724      	adds	r7, #36	@ 0x24
 8022060:	46bd      	mov	sp, r7
 8022062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022066:	4770      	bx	lr
 8022068:	58024400 	.word	0x58024400
 802206c:	03d09000 	.word	0x03d09000
 8022070:	46000000 	.word	0x46000000
 8022074:	4c742400 	.word	0x4c742400
 8022078:	4a742400 	.word	0x4a742400
 802207c:	4bbebc20 	.word	0x4bbebc20

08022080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8022080:	b580      	push	{r7, lr}
 8022082:	b084      	sub	sp, #16
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
 8022088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802208a:	2300      	movs	r3, #0
 802208c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802208e:	4b53      	ldr	r3, [pc, #332]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022092:	f003 0303 	and.w	r3, r3, #3
 8022096:	2b03      	cmp	r3, #3
 8022098:	d101      	bne.n	802209e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802209a:	2301      	movs	r3, #1
 802209c:	e099      	b.n	80221d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802209e:	4b4f      	ldr	r3, [pc, #316]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	4a4e      	ldr	r2, [pc, #312]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80220a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80220a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80220aa:	f7f9 fd2f 	bl	801bb0c <HAL_GetTick>
 80220ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80220b0:	e008      	b.n	80220c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80220b2:	f7f9 fd2b 	bl	801bb0c <HAL_GetTick>
 80220b6:	4602      	mov	r2, r0
 80220b8:	68bb      	ldr	r3, [r7, #8]
 80220ba:	1ad3      	subs	r3, r2, r3
 80220bc:	2b02      	cmp	r3, #2
 80220be:	d901      	bls.n	80220c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80220c0:	2303      	movs	r3, #3
 80220c2:	e086      	b.n	80221d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80220c4:	4b45      	ldr	r3, [pc, #276]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80220c6:	681b      	ldr	r3, [r3, #0]
 80220c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d1f0      	bne.n	80220b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80220d0:	4b42      	ldr	r3, [pc, #264]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80220d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80220d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	031b      	lsls	r3, r3, #12
 80220de:	493f      	ldr	r1, [pc, #252]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80220e0:	4313      	orrs	r3, r2
 80220e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	685b      	ldr	r3, [r3, #4]
 80220e8:	3b01      	subs	r3, #1
 80220ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	689b      	ldr	r3, [r3, #8]
 80220f2:	3b01      	subs	r3, #1
 80220f4:	025b      	lsls	r3, r3, #9
 80220f6:	b29b      	uxth	r3, r3
 80220f8:	431a      	orrs	r2, r3
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	68db      	ldr	r3, [r3, #12]
 80220fe:	3b01      	subs	r3, #1
 8022100:	041b      	lsls	r3, r3, #16
 8022102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8022106:	431a      	orrs	r2, r3
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	691b      	ldr	r3, [r3, #16]
 802210c:	3b01      	subs	r3, #1
 802210e:	061b      	lsls	r3, r3, #24
 8022110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8022114:	4931      	ldr	r1, [pc, #196]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022116:	4313      	orrs	r3, r2
 8022118:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802211a:	4b30      	ldr	r3, [pc, #192]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802211e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	695b      	ldr	r3, [r3, #20]
 8022126:	492d      	ldr	r1, [pc, #180]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022128:	4313      	orrs	r3, r2
 802212a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802212c:	4b2b      	ldr	r3, [pc, #172]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022130:	f023 0220 	bic.w	r2, r3, #32
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	699b      	ldr	r3, [r3, #24]
 8022138:	4928      	ldr	r1, [pc, #160]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802213a:	4313      	orrs	r3, r2
 802213c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802213e:	4b27      	ldr	r3, [pc, #156]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022142:	4a26      	ldr	r2, [pc, #152]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022144:	f023 0310 	bic.w	r3, r3, #16
 8022148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802214a:	4b24      	ldr	r3, [pc, #144]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802214c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802214e:	4b24      	ldr	r3, [pc, #144]	@ (80221e0 <RCCEx_PLL2_Config+0x160>)
 8022150:	4013      	ands	r3, r2
 8022152:	687a      	ldr	r2, [r7, #4]
 8022154:	69d2      	ldr	r2, [r2, #28]
 8022156:	00d2      	lsls	r2, r2, #3
 8022158:	4920      	ldr	r1, [pc, #128]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802215a:	4313      	orrs	r3, r2
 802215c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802215e:	4b1f      	ldr	r3, [pc, #124]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022162:	4a1e      	ldr	r2, [pc, #120]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022164:	f043 0310 	orr.w	r3, r3, #16
 8022168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	2b00      	cmp	r3, #0
 802216e:	d106      	bne.n	802217e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8022170:	4b1a      	ldr	r3, [pc, #104]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022174:	4a19      	ldr	r2, [pc, #100]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 802217a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802217c:	e00f      	b.n	802219e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802217e:	683b      	ldr	r3, [r7, #0]
 8022180:	2b01      	cmp	r3, #1
 8022182:	d106      	bne.n	8022192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8022184:	4b15      	ldr	r3, [pc, #84]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022188:	4a14      	ldr	r2, [pc, #80]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 802218a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802218e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022190:	e005      	b.n	802219e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8022192:	4b12      	ldr	r3, [pc, #72]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022196:	4a11      	ldr	r2, [pc, #68]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 8022198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 802219c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802219e:	4b0f      	ldr	r3, [pc, #60]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	4a0e      	ldr	r2, [pc, #56]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80221a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80221a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80221aa:	f7f9 fcaf 	bl	801bb0c <HAL_GetTick>
 80221ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80221b0:	e008      	b.n	80221c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80221b2:	f7f9 fcab 	bl	801bb0c <HAL_GetTick>
 80221b6:	4602      	mov	r2, r0
 80221b8:	68bb      	ldr	r3, [r7, #8]
 80221ba:	1ad3      	subs	r3, r2, r3
 80221bc:	2b02      	cmp	r3, #2
 80221be:	d901      	bls.n	80221c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80221c0:	2303      	movs	r3, #3
 80221c2:	e006      	b.n	80221d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80221c4:	4b05      	ldr	r3, [pc, #20]	@ (80221dc <RCCEx_PLL2_Config+0x15c>)
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d0f0      	beq.n	80221b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80221d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80221d2:	4618      	mov	r0, r3
 80221d4:	3710      	adds	r7, #16
 80221d6:	46bd      	mov	sp, r7
 80221d8:	bd80      	pop	{r7, pc}
 80221da:	bf00      	nop
 80221dc:	58024400 	.word	0x58024400
 80221e0:	ffff0007 	.word	0xffff0007

080221e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80221e4:	b580      	push	{r7, lr}
 80221e6:	b084      	sub	sp, #16
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	6078      	str	r0, [r7, #4]
 80221ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80221ee:	2300      	movs	r3, #0
 80221f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80221f2:	4b53      	ldr	r3, [pc, #332]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80221f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221f6:	f003 0303 	and.w	r3, r3, #3
 80221fa:	2b03      	cmp	r3, #3
 80221fc:	d101      	bne.n	8022202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80221fe:	2301      	movs	r3, #1
 8022200:	e099      	b.n	8022336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8022202:	4b4f      	ldr	r3, [pc, #316]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022204:	681b      	ldr	r3, [r3, #0]
 8022206:	4a4e      	ldr	r2, [pc, #312]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802220c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802220e:	f7f9 fc7d 	bl	801bb0c <HAL_GetTick>
 8022212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8022214:	e008      	b.n	8022228 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8022216:	f7f9 fc79 	bl	801bb0c <HAL_GetTick>
 802221a:	4602      	mov	r2, r0
 802221c:	68bb      	ldr	r3, [r7, #8]
 802221e:	1ad3      	subs	r3, r2, r3
 8022220:	2b02      	cmp	r3, #2
 8022222:	d901      	bls.n	8022228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8022224:	2303      	movs	r3, #3
 8022226:	e086      	b.n	8022336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8022228:	4b45      	ldr	r3, [pc, #276]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022230:	2b00      	cmp	r3, #0
 8022232:	d1f0      	bne.n	8022216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8022234:	4b42      	ldr	r3, [pc, #264]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022238:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	051b      	lsls	r3, r3, #20
 8022242:	493f      	ldr	r1, [pc, #252]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022244:	4313      	orrs	r3, r2
 8022246:	628b      	str	r3, [r1, #40]	@ 0x28
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	685b      	ldr	r3, [r3, #4]
 802224c:	3b01      	subs	r3, #1
 802224e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	689b      	ldr	r3, [r3, #8]
 8022256:	3b01      	subs	r3, #1
 8022258:	025b      	lsls	r3, r3, #9
 802225a:	b29b      	uxth	r3, r3
 802225c:	431a      	orrs	r2, r3
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	68db      	ldr	r3, [r3, #12]
 8022262:	3b01      	subs	r3, #1
 8022264:	041b      	lsls	r3, r3, #16
 8022266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802226a:	431a      	orrs	r2, r3
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	691b      	ldr	r3, [r3, #16]
 8022270:	3b01      	subs	r3, #1
 8022272:	061b      	lsls	r3, r3, #24
 8022274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8022278:	4931      	ldr	r1, [pc, #196]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 802227a:	4313      	orrs	r3, r2
 802227c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802227e:	4b30      	ldr	r3, [pc, #192]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	695b      	ldr	r3, [r3, #20]
 802228a:	492d      	ldr	r1, [pc, #180]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 802228c:	4313      	orrs	r3, r2
 802228e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8022290:	4b2b      	ldr	r3, [pc, #172]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022294:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	699b      	ldr	r3, [r3, #24]
 802229c:	4928      	ldr	r1, [pc, #160]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 802229e:	4313      	orrs	r3, r2
 80222a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80222a2:	4b27      	ldr	r3, [pc, #156]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222a6:	4a26      	ldr	r2, [pc, #152]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80222ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80222ae:	4b24      	ldr	r3, [pc, #144]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80222b2:	4b24      	ldr	r3, [pc, #144]	@ (8022344 <RCCEx_PLL3_Config+0x160>)
 80222b4:	4013      	ands	r3, r2
 80222b6:	687a      	ldr	r2, [r7, #4]
 80222b8:	69d2      	ldr	r2, [r2, #28]
 80222ba:	00d2      	lsls	r2, r2, #3
 80222bc:	4920      	ldr	r1, [pc, #128]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222be:	4313      	orrs	r3, r2
 80222c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80222c2:	4b1f      	ldr	r3, [pc, #124]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222c6:	4a1e      	ldr	r2, [pc, #120]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80222cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80222ce:	683b      	ldr	r3, [r7, #0]
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d106      	bne.n	80222e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80222d4:	4b1a      	ldr	r3, [pc, #104]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222d8:	4a19      	ldr	r2, [pc, #100]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80222de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80222e0:	e00f      	b.n	8022302 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80222e2:	683b      	ldr	r3, [r7, #0]
 80222e4:	2b01      	cmp	r3, #1
 80222e6:	d106      	bne.n	80222f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80222e8:	4b15      	ldr	r3, [pc, #84]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ec:	4a14      	ldr	r2, [pc, #80]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80222f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80222f4:	e005      	b.n	8022302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80222f6:	4b12      	ldr	r3, [pc, #72]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222fa:	4a11      	ldr	r2, [pc, #68]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 80222fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8022302:	4b0f      	ldr	r3, [pc, #60]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	4a0e      	ldr	r2, [pc, #56]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 8022308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802230c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802230e:	f7f9 fbfd 	bl	801bb0c <HAL_GetTick>
 8022312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8022314:	e008      	b.n	8022328 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8022316:	f7f9 fbf9 	bl	801bb0c <HAL_GetTick>
 802231a:	4602      	mov	r2, r0
 802231c:	68bb      	ldr	r3, [r7, #8]
 802231e:	1ad3      	subs	r3, r2, r3
 8022320:	2b02      	cmp	r3, #2
 8022322:	d901      	bls.n	8022328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8022324:	2303      	movs	r3, #3
 8022326:	e006      	b.n	8022336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8022328:	4b05      	ldr	r3, [pc, #20]	@ (8022340 <RCCEx_PLL3_Config+0x15c>)
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022330:	2b00      	cmp	r3, #0
 8022332:	d0f0      	beq.n	8022316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8022334:	7bfb      	ldrb	r3, [r7, #15]
}
 8022336:	4618      	mov	r0, r3
 8022338:	3710      	adds	r7, #16
 802233a:	46bd      	mov	sp, r7
 802233c:	bd80      	pop	{r7, pc}
 802233e:	bf00      	nop
 8022340:	58024400 	.word	0x58024400
 8022344:	ffff0007 	.word	0xffff0007

08022348 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8022348:	b580      	push	{r7, lr}
 802234a:	b08a      	sub	sp, #40	@ 0x28
 802234c:	af00      	add	r7, sp, #0
 802234e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	2b00      	cmp	r3, #0
 8022354:	d101      	bne.n	802235a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8022356:	2301      	movs	r3, #1
 8022358:	e075      	b.n	8022446 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022360:	b2db      	uxtb	r3, r3
 8022362:	2b00      	cmp	r3, #0
 8022364:	d105      	bne.n	8022372 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	2200      	movs	r2, #0
 802236a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 802236c:	6878      	ldr	r0, [r7, #4]
 802236e:	f7ec fbe3 	bl	800eb38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	2204      	movs	r2, #4
 8022376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 802237a:	6878      	ldr	r0, [r7, #4]
 802237c:	f000 f868 	bl	8022450 <HAL_SD_InitCard>
 8022380:	4603      	mov	r3, r0
 8022382:	2b00      	cmp	r3, #0
 8022384:	d001      	beq.n	802238a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8022386:	2301      	movs	r3, #1
 8022388:	e05d      	b.n	8022446 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 802238a:	f107 0308 	add.w	r3, r7, #8
 802238e:	4619      	mov	r1, r3
 8022390:	6878      	ldr	r0, [r7, #4]
 8022392:	f000 fdaf 	bl	8022ef4 <HAL_SD_GetCardStatus>
 8022396:	4603      	mov	r3, r0
 8022398:	2b00      	cmp	r3, #0
 802239a:	d001      	beq.n	80223a0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 802239c:	2301      	movs	r3, #1
 802239e:	e052      	b.n	8022446 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80223a0:	7e3b      	ldrb	r3, [r7, #24]
 80223a2:	b2db      	uxtb	r3, r3
 80223a4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80223a6:	7e7b      	ldrb	r3, [r7, #25]
 80223a8:	b2db      	uxtb	r3, r3
 80223aa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80223ac:	687b      	ldr	r3, [r7, #4]
 80223ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80223b0:	2b01      	cmp	r3, #1
 80223b2:	d10a      	bne.n	80223ca <HAL_SD_Init+0x82>
 80223b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d102      	bne.n	80223c0 <HAL_SD_Init+0x78>
 80223ba:	6a3b      	ldr	r3, [r7, #32]
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d004      	beq.n	80223ca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80223c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80223c8:	e00b      	b.n	80223e2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80223ce:	2b01      	cmp	r3, #1
 80223d0:	d104      	bne.n	80223dc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80223d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80223da:	e002      	b.n	80223e2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	2200      	movs	r2, #0
 80223e0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	68db      	ldr	r3, [r3, #12]
 80223e6:	4619      	mov	r1, r3
 80223e8:	6878      	ldr	r0, [r7, #4]
 80223ea:	f000 fe6d 	bl	80230c8 <HAL_SD_ConfigWideBusOperation>
 80223ee:	4603      	mov	r3, r0
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d001      	beq.n	80223f8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80223f4:	2301      	movs	r3, #1
 80223f6:	e026      	b.n	8022446 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80223f8:	f7f9 fb88 	bl	801bb0c <HAL_GetTick>
 80223fc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80223fe:	e011      	b.n	8022424 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8022400:	f7f9 fb84 	bl	801bb0c <HAL_GetTick>
 8022404:	4602      	mov	r2, r0
 8022406:	69fb      	ldr	r3, [r7, #28]
 8022408:	1ad3      	subs	r3, r2, r3
 802240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802240e:	d109      	bne.n	8022424 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8022416:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	2201      	movs	r2, #1
 802241c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8022420:	2303      	movs	r3, #3
 8022422:	e010      	b.n	8022446 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8022424:	6878      	ldr	r0, [r7, #4]
 8022426:	f000 ff61 	bl	80232ec <HAL_SD_GetCardState>
 802242a:	4603      	mov	r3, r0
 802242c:	2b04      	cmp	r3, #4
 802242e:	d1e7      	bne.n	8022400 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	2200      	movs	r2, #0
 8022434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	2200      	movs	r2, #0
 802243a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	2201      	movs	r2, #1
 8022440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8022444:	2300      	movs	r3, #0
}
 8022446:	4618      	mov	r0, r3
 8022448:	3728      	adds	r7, #40	@ 0x28
 802244a:	46bd      	mov	sp, r7
 802244c:	bd80      	pop	{r7, pc}
	...

08022450 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8022450:	b590      	push	{r4, r7, lr}
 8022452:	b08d      	sub	sp, #52	@ 0x34
 8022454:	af02      	add	r7, sp, #8
 8022456:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8022458:	2300      	movs	r3, #0
 802245a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 802245c:	2300      	movs	r3, #0
 802245e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8022460:	2300      	movs	r3, #0
 8022462:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8022464:	2300      	movs	r3, #0
 8022466:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8022468:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802246c:	f04f 0100 	mov.w	r1, #0
 8022470:	f7fe fc76 	bl	8020d60 <HAL_RCCEx_GetPeriphCLKFreq>
 8022474:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8022476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022478:	2b00      	cmp	r3, #0
 802247a:	d109      	bne.n	8022490 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	2201      	movs	r2, #1
 8022480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 802248a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802248c:	2301      	movs	r3, #1
 802248e:	e070      	b.n	8022572 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8022490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022492:	0a1b      	lsrs	r3, r3, #8
 8022494:	4a39      	ldr	r2, [pc, #228]	@ (802257c <HAL_SD_InitCard+0x12c>)
 8022496:	fba2 2303 	umull	r2, r3, r2, r3
 802249a:	091b      	lsrs	r3, r3, #4
 802249c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	681c      	ldr	r4, [r3, #0]
 80224a2:	466a      	mov	r2, sp
 80224a4:	f107 0318 	add.w	r3, r7, #24
 80224a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80224ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80224b0:	f107 030c 	add.w	r3, r7, #12
 80224b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80224b6:	4620      	mov	r0, r4
 80224b8:	f002 fe5e 	bl	8025178 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	4618      	mov	r0, r3
 80224c2:	f002 fea1 	bl	8025208 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80224c6:	69fb      	ldr	r3, [r7, #28]
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d005      	beq.n	80224d8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80224cc:	69fb      	ldr	r3, [r7, #28]
 80224ce:	005b      	lsls	r3, r3, #1
 80224d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80224d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80224d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80224d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d007      	beq.n	80224ee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80224de:	4a28      	ldr	r2, [pc, #160]	@ (8022580 <HAL_SD_InitCard+0x130>)
 80224e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80224e6:	3301      	adds	r3, #1
 80224e8:	4618      	mov	r0, r3
 80224ea:	f7f9 fb1b 	bl	801bb24 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80224ee:	6878      	ldr	r0, [r7, #4]
 80224f0:	f000 ffea 	bl	80234c8 <SD_PowerON>
 80224f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80224f6:	6a3b      	ldr	r3, [r7, #32]
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d00b      	beq.n	8022514 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	2201      	movs	r2, #1
 8022500:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022508:	6a3b      	ldr	r3, [r7, #32]
 802250a:	431a      	orrs	r2, r3
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022510:	2301      	movs	r3, #1
 8022512:	e02e      	b.n	8022572 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8022514:	6878      	ldr	r0, [r7, #4]
 8022516:	f000 ff09 	bl	802332c <SD_InitCard>
 802251a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802251c:	6a3b      	ldr	r3, [r7, #32]
 802251e:	2b00      	cmp	r3, #0
 8022520:	d00b      	beq.n	802253a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	2201      	movs	r2, #1
 8022526:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802252e:	6a3b      	ldr	r3, [r7, #32]
 8022530:	431a      	orrs	r2, r3
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022536:	2301      	movs	r3, #1
 8022538:	e01b      	b.n	8022572 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802253a:	687b      	ldr	r3, [r7, #4]
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8022542:	4618      	mov	r0, r3
 8022544:	f002 fef6 	bl	8025334 <SDMMC_CmdBlockLength>
 8022548:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802254a:	6a3b      	ldr	r3, [r7, #32]
 802254c:	2b00      	cmp	r3, #0
 802254e:	d00f      	beq.n	8022570 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	4a0b      	ldr	r2, [pc, #44]	@ (8022584 <HAL_SD_InitCard+0x134>)
 8022556:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802255c:	6a3b      	ldr	r3, [r7, #32]
 802255e:	431a      	orrs	r2, r3
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	2201      	movs	r2, #1
 8022568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 802256c:	2301      	movs	r3, #1
 802256e:	e000      	b.n	8022572 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8022570:	2300      	movs	r3, #0
}
 8022572:	4618      	mov	r0, r3
 8022574:	372c      	adds	r7, #44	@ 0x2c
 8022576:	46bd      	mov	sp, r7
 8022578:	bd90      	pop	{r4, r7, pc}
 802257a:	bf00      	nop
 802257c:	014f8b59 	.word	0x014f8b59
 8022580:	00012110 	.word	0x00012110
 8022584:	1fe00fff 	.word	0x1fe00fff

08022588 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8022588:	b580      	push	{r7, lr}
 802258a:	b08c      	sub	sp, #48	@ 0x30
 802258c:	af00      	add	r7, sp, #0
 802258e:	60f8      	str	r0, [r7, #12]
 8022590:	60b9      	str	r1, [r7, #8]
 8022592:	607a      	str	r2, [r7, #4]
 8022594:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 802259a:	68bb      	ldr	r3, [r7, #8]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d107      	bne.n	80225b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80225a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80225a8:	68fb      	ldr	r3, [r7, #12]
 80225aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80225ac:	2301      	movs	r3, #1
 80225ae:	e08d      	b.n	80226cc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80225b0:	68fb      	ldr	r3, [r7, #12]
 80225b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80225b6:	b2db      	uxtb	r3, r3
 80225b8:	2b01      	cmp	r3, #1
 80225ba:	f040 8086 	bne.w	80226ca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	2200      	movs	r2, #0
 80225c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80225c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80225c6:	683b      	ldr	r3, [r7, #0]
 80225c8:	441a      	add	r2, r3
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80225ce:	429a      	cmp	r2, r3
 80225d0:	d907      	bls.n	80225e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80225d2:	68fb      	ldr	r3, [r7, #12]
 80225d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80225d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80225da:	68fb      	ldr	r3, [r7, #12]
 80225dc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80225de:	2301      	movs	r3, #1
 80225e0:	e074      	b.n	80226cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80225e2:	68fb      	ldr	r3, [r7, #12]
 80225e4:	2203      	movs	r2, #3
 80225e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	2200      	movs	r2, #0
 80225f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	68ba      	ldr	r2, [r7, #8]
 80225f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80225f8:	683b      	ldr	r3, [r7, #0]
 80225fa:	025a      	lsls	r2, r3, #9
 80225fc:	68fb      	ldr	r3, [r7, #12]
 80225fe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022604:	2b01      	cmp	r3, #1
 8022606:	d002      	beq.n	802260e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8022608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802260a:	025b      	lsls	r3, r3, #9
 802260c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802260e:	f04f 33ff 	mov.w	r3, #4294967295
 8022612:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8022614:	683b      	ldr	r3, [r7, #0]
 8022616:	025b      	lsls	r3, r3, #9
 8022618:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 802261a:	2390      	movs	r3, #144	@ 0x90
 802261c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 802261e:	2302      	movs	r3, #2
 8022620:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8022622:	2300      	movs	r3, #0
 8022624:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8022626:	2300      	movs	r3, #0
 8022628:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 802262a:	68fb      	ldr	r3, [r7, #12]
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	f107 0210 	add.w	r2, r7, #16
 8022632:	4611      	mov	r1, r2
 8022634:	4618      	mov	r0, r3
 8022636:	f002 fe51 	bl	80252dc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	68da      	ldr	r2, [r3, #12]
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8022648:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 802264a:	68fb      	ldr	r3, [r7, #12]
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	68ba      	ldr	r2, [r7, #8]
 8022650:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8022652:	68fb      	ldr	r3, [r7, #12]
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	2201      	movs	r2, #1
 8022658:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 802265a:	683b      	ldr	r3, [r7, #0]
 802265c:	2b01      	cmp	r3, #1
 802265e:	d90a      	bls.n	8022676 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8022660:	68fb      	ldr	r3, [r7, #12]
 8022662:	2282      	movs	r2, #130	@ 0x82
 8022664:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8022666:	68fb      	ldr	r3, [r7, #12]
 8022668:	681b      	ldr	r3, [r3, #0]
 802266a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802266c:	4618      	mov	r0, r3
 802266e:	f002 fea7 	bl	80253c0 <SDMMC_CmdReadMultiBlock>
 8022672:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8022674:	e009      	b.n	802268a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8022676:	68fb      	ldr	r3, [r7, #12]
 8022678:	2281      	movs	r2, #129	@ 0x81
 802267a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 802267c:	68fb      	ldr	r3, [r7, #12]
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022682:	4618      	mov	r0, r3
 8022684:	f002 fe79 	bl	802537a <SDMMC_CmdReadSingleBlock>
 8022688:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 802268a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802268c:	2b00      	cmp	r3, #0
 802268e:	d012      	beq.n	80226b6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	4a0f      	ldr	r2, [pc, #60]	@ (80226d4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8022696:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8022698:	68fb      	ldr	r3, [r7, #12]
 802269a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802269e:	431a      	orrs	r2, r3
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80226a4:	68fb      	ldr	r3, [r7, #12]
 80226a6:	2201      	movs	r2, #1
 80226a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	2200      	movs	r2, #0
 80226b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80226b2:	2301      	movs	r3, #1
 80226b4:	e00a      	b.n	80226cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80226b6:	68fb      	ldr	r3, [r7, #12]
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80226c4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80226c6:	2300      	movs	r3, #0
 80226c8:	e000      	b.n	80226cc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80226ca:	2302      	movs	r3, #2
  }
}
 80226cc:	4618      	mov	r0, r3
 80226ce:	3730      	adds	r7, #48	@ 0x30
 80226d0:	46bd      	mov	sp, r7
 80226d2:	bd80      	pop	{r7, pc}
 80226d4:	1fe00fff 	.word	0x1fe00fff

080226d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80226d8:	b580      	push	{r7, lr}
 80226da:	b08c      	sub	sp, #48	@ 0x30
 80226dc:	af00      	add	r7, sp, #0
 80226de:	60f8      	str	r0, [r7, #12]
 80226e0:	60b9      	str	r1, [r7, #8]
 80226e2:	607a      	str	r2, [r7, #4]
 80226e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80226ea:	68bb      	ldr	r3, [r7, #8]
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	d107      	bne.n	8022700 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80226f0:	68fb      	ldr	r3, [r7, #12]
 80226f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80226f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80226fc:	2301      	movs	r3, #1
 80226fe:	e08d      	b.n	802281c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8022700:	68fb      	ldr	r3, [r7, #12]
 8022702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022706:	b2db      	uxtb	r3, r3
 8022708:	2b01      	cmp	r3, #1
 802270a:	f040 8086 	bne.w	802281a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 802270e:	68fb      	ldr	r3, [r7, #12]
 8022710:	2200      	movs	r2, #0
 8022712:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8022714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022716:	683b      	ldr	r3, [r7, #0]
 8022718:	441a      	add	r2, r3
 802271a:	68fb      	ldr	r3, [r7, #12]
 802271c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802271e:	429a      	cmp	r2, r3
 8022720:	d907      	bls.n	8022732 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8022722:	68fb      	ldr	r3, [r7, #12]
 8022724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022726:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 802272a:	68fb      	ldr	r3, [r7, #12]
 802272c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 802272e:	2301      	movs	r3, #1
 8022730:	e074      	b.n	802281c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8022732:	68fb      	ldr	r3, [r7, #12]
 8022734:	2203      	movs	r2, #3
 8022736:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	2200      	movs	r2, #0
 8022740:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8022742:	68fb      	ldr	r3, [r7, #12]
 8022744:	68ba      	ldr	r2, [r7, #8]
 8022746:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	025a      	lsls	r2, r3, #9
 802274c:	68fb      	ldr	r3, [r7, #12]
 802274e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022754:	2b01      	cmp	r3, #1
 8022756:	d002      	beq.n	802275e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8022758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802275a:	025b      	lsls	r3, r3, #9
 802275c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802275e:	f04f 33ff 	mov.w	r3, #4294967295
 8022762:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8022764:	683b      	ldr	r3, [r7, #0]
 8022766:	025b      	lsls	r3, r3, #9
 8022768:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 802276a:	2390      	movs	r3, #144	@ 0x90
 802276c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 802276e:	2300      	movs	r3, #0
 8022770:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8022772:	2300      	movs	r3, #0
 8022774:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8022776:	2300      	movs	r3, #0
 8022778:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	f107 0210 	add.w	r2, r7, #16
 8022782:	4611      	mov	r1, r2
 8022784:	4618      	mov	r0, r3
 8022786:	f002 fda9 	bl	80252dc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 802278a:	68fb      	ldr	r3, [r7, #12]
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	68da      	ldr	r2, [r3, #12]
 8022790:	68fb      	ldr	r3, [r7, #12]
 8022792:	681b      	ldr	r3, [r3, #0]
 8022794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8022798:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 802279a:	68fb      	ldr	r3, [r7, #12]
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	68ba      	ldr	r2, [r7, #8]
 80227a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80227a2:	68fb      	ldr	r3, [r7, #12]
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	2201      	movs	r2, #1
 80227a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80227aa:	683b      	ldr	r3, [r7, #0]
 80227ac:	2b01      	cmp	r3, #1
 80227ae:	d90a      	bls.n	80227c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80227b0:	68fb      	ldr	r3, [r7, #12]
 80227b2:	22a0      	movs	r2, #160	@ 0xa0
 80227b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80227bc:	4618      	mov	r0, r3
 80227be:	f002 fe45 	bl	802544c <SDMMC_CmdWriteMultiBlock>
 80227c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80227c4:	e009      	b.n	80227da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80227c6:	68fb      	ldr	r3, [r7, #12]
 80227c8:	2290      	movs	r2, #144	@ 0x90
 80227ca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	681b      	ldr	r3, [r3, #0]
 80227d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80227d2:	4618      	mov	r0, r3
 80227d4:	f002 fe17 	bl	8025406 <SDMMC_CmdWriteSingleBlock>
 80227d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80227da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80227dc:	2b00      	cmp	r3, #0
 80227de:	d012      	beq.n	8022806 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80227e0:	68fb      	ldr	r3, [r7, #12]
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	4a0f      	ldr	r2, [pc, #60]	@ (8022824 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80227e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80227e8:	68fb      	ldr	r3, [r7, #12]
 80227ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80227ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80227ee:	431a      	orrs	r2, r3
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80227f4:	68fb      	ldr	r3, [r7, #12]
 80227f6:	2201      	movs	r2, #1
 80227f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80227fc:	68fb      	ldr	r3, [r7, #12]
 80227fe:	2200      	movs	r2, #0
 8022800:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8022802:	2301      	movs	r3, #1
 8022804:	e00a      	b.n	802281c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	681b      	ldr	r3, [r3, #0]
 802280a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802280c:	68fb      	ldr	r3, [r7, #12]
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8022814:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8022816:	2300      	movs	r3, #0
 8022818:	e000      	b.n	802281c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 802281a:	2302      	movs	r3, #2
  }
}
 802281c:	4618      	mov	r0, r3
 802281e:	3730      	adds	r7, #48	@ 0x30
 8022820:	46bd      	mov	sp, r7
 8022822:	bd80      	pop	{r7, pc}
 8022824:	1fe00fff 	.word	0x1fe00fff

08022828 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8022828:	b580      	push	{r7, lr}
 802282a:	b084      	sub	sp, #16
 802282c:	af00      	add	r7, sp, #0
 802282e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022834:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802283c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8022840:	2b00      	cmp	r3, #0
 8022842:	d008      	beq.n	8022856 <HAL_SD_IRQHandler+0x2e>
 8022844:	68fb      	ldr	r3, [r7, #12]
 8022846:	f003 0308 	and.w	r3, r3, #8
 802284a:	2b00      	cmp	r3, #0
 802284c:	d003      	beq.n	8022856 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 802284e:	6878      	ldr	r0, [r7, #4]
 8022850:	f001 f926 	bl	8023aa0 <SD_Read_IT>
 8022854:	e19a      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022860:	2b00      	cmp	r3, #0
 8022862:	f000 80ac 	beq.w	80229be <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	681b      	ldr	r3, [r3, #0]
 802286a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802286e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	681b      	ldr	r3, [r3, #0]
 8022874:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	681a      	ldr	r2, [r3, #0]
 802287a:	4b59      	ldr	r3, [pc, #356]	@ (80229e0 <HAL_SD_IRQHandler+0x1b8>)
 802287c:	400b      	ands	r3, r1
 802287e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022886:	687b      	ldr	r3, [r7, #4]
 8022888:	681b      	ldr	r3, [r3, #0]
 802288a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 802288e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	681b      	ldr	r3, [r3, #0]
 8022894:	68da      	ldr	r2, [r3, #12]
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 802289e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80228a0:	68fb      	ldr	r3, [r7, #12]
 80228a2:	f003 0308 	and.w	r3, r3, #8
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d038      	beq.n	802291c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80228aa:	68fb      	ldr	r3, [r7, #12]
 80228ac:	f003 0302 	and.w	r3, r3, #2
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d104      	bne.n	80228be <HAL_SD_IRQHandler+0x96>
 80228b4:	68fb      	ldr	r3, [r7, #12]
 80228b6:	f003 0320 	and.w	r3, r3, #32
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d011      	beq.n	80228e2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	4618      	mov	r0, r3
 80228c4:	f002 fde6 	bl	8025494 <SDMMC_CmdStopTransfer>
 80228c8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80228ca:	68bb      	ldr	r3, [r7, #8]
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	d008      	beq.n	80228e2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80228d4:	68bb      	ldr	r3, [r7, #8]
 80228d6:	431a      	orrs	r2, r3
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80228dc:	6878      	ldr	r0, [r7, #4]
 80228de:	f000 f95b 	bl	8022b98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	4a3f      	ldr	r2, [pc, #252]	@ (80229e4 <HAL_SD_IRQHandler+0x1bc>)
 80228e8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	2201      	movs	r2, #1
 80228ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80228f2:	687b      	ldr	r3, [r7, #4]
 80228f4:	2200      	movs	r2, #0
 80228f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	f003 0301 	and.w	r3, r3, #1
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d104      	bne.n	802290c <HAL_SD_IRQHandler+0xe4>
 8022902:	68fb      	ldr	r3, [r7, #12]
 8022904:	f003 0302 	and.w	r3, r3, #2
 8022908:	2b00      	cmp	r3, #0
 802290a:	d003      	beq.n	8022914 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 802290c:	6878      	ldr	r0, [r7, #4]
 802290e:	f003 fa73 	bl	8025df8 <HAL_SD_RxCpltCallback>
 8022912:	e13b      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8022914:	6878      	ldr	r0, [r7, #4]
 8022916:	f003 fa65 	bl	8025de4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802291a:	e137      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022922:	2b00      	cmp	r3, #0
 8022924:	f000 8132 	beq.w	8022b8c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	681b      	ldr	r3, [r3, #0]
 802292c:	2200      	movs	r2, #0
 802292e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	2200      	movs	r2, #0
 8022936:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	2200      	movs	r2, #0
 802293e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	f003 0302 	and.w	r3, r3, #2
 8022946:	2b00      	cmp	r3, #0
 8022948:	d104      	bne.n	8022954 <HAL_SD_IRQHandler+0x12c>
 802294a:	68fb      	ldr	r3, [r7, #12]
 802294c:	f003 0320 	and.w	r3, r3, #32
 8022950:	2b00      	cmp	r3, #0
 8022952:	d011      	beq.n	8022978 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	4618      	mov	r0, r3
 802295a:	f002 fd9b 	bl	8025494 <SDMMC_CmdStopTransfer>
 802295e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8022960:	68bb      	ldr	r3, [r7, #8]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d008      	beq.n	8022978 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802296a:	68bb      	ldr	r3, [r7, #8]
 802296c:	431a      	orrs	r2, r3
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8022972:	6878      	ldr	r0, [r7, #4]
 8022974:	f000 f910 	bl	8022b98 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8022978:	687b      	ldr	r3, [r7, #4]
 802297a:	2201      	movs	r2, #1
 802297c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	2200      	movs	r2, #0
 8022984:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022986:	68fb      	ldr	r3, [r7, #12]
 8022988:	f003 0310 	and.w	r3, r3, #16
 802298c:	2b00      	cmp	r3, #0
 802298e:	d104      	bne.n	802299a <HAL_SD_IRQHandler+0x172>
 8022990:	68fb      	ldr	r3, [r7, #12]
 8022992:	f003 0320 	and.w	r3, r3, #32
 8022996:	2b00      	cmp	r3, #0
 8022998:	d002      	beq.n	80229a0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 802299a:	6878      	ldr	r0, [r7, #4]
 802299c:	f003 fa22 	bl	8025de4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80229a0:	68fb      	ldr	r3, [r7, #12]
 80229a2:	f003 0301 	and.w	r3, r3, #1
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d105      	bne.n	80229b6 <HAL_SD_IRQHandler+0x18e>
 80229aa:	68fb      	ldr	r3, [r7, #12]
 80229ac:	f003 0302 	and.w	r3, r3, #2
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	f000 80eb 	beq.w	8022b8c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80229b6:	6878      	ldr	r0, [r7, #4]
 80229b8:	f003 fa1e 	bl	8025df8 <HAL_SD_RxCpltCallback>
}
 80229bc:	e0e6      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	d00d      	beq.n	80229e8 <HAL_SD_IRQHandler+0x1c0>
 80229cc:	68fb      	ldr	r3, [r7, #12]
 80229ce:	f003 0308 	and.w	r3, r3, #8
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d008      	beq.n	80229e8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80229d6:	6878      	ldr	r0, [r7, #4]
 80229d8:	f001 f8a8 	bl	8023b2c <SD_Write_IT>
 80229dc:	e0d6      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
 80229de:	bf00      	nop
 80229e0:	ffff3ec5 	.word	0xffff3ec5
 80229e4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229ee:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	f000 809d 	beq.w	8022b32 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229fe:	f003 0302 	and.w	r3, r3, #2
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d005      	beq.n	8022a12 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a0a:	f043 0202 	orr.w	r2, r3, #2
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a18:	f003 0308 	and.w	r3, r3, #8
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d005      	beq.n	8022a2c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a24:	f043 0208 	orr.w	r2, r3, #8
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a32:	f003 0320 	and.w	r3, r3, #32
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d005      	beq.n	8022a46 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a3e:	f043 0220 	orr.w	r2, r3, #32
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a4c:	f003 0310 	and.w	r3, r3, #16
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d005      	beq.n	8022a60 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a58:	f043 0210 	orr.w	r2, r3, #16
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	681b      	ldr	r3, [r3, #0]
 8022a64:	4a4b      	ldr	r2, [pc, #300]	@ (8022b94 <HAL_SD_IRQHandler+0x36c>)
 8022a66:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8022a76:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	68da      	ldr	r2, [r3, #12]
 8022a7e:	687b      	ldr	r3, [r7, #4]
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022a86:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	681b      	ldr	r3, [r3, #0]
 8022a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8022a96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	681b      	ldr	r3, [r3, #0]
 8022a9c:	68da      	ldr	r2, [r3, #12]
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8022aa6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	4618      	mov	r0, r3
 8022aae:	f002 fcf1 	bl	8025494 <SDMMC_CmdStopTransfer>
 8022ab2:	4602      	mov	r2, r0
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022ab8:	431a      	orrs	r2, r3
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	68da      	ldr	r2, [r3, #12]
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	681b      	ldr	r3, [r3, #0]
 8022ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022acc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	681b      	ldr	r3, [r3, #0]
 8022ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	f003 0308 	and.w	r3, r3, #8
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d00a      	beq.n	8022af8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	2201      	movs	r2, #1
 8022ae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	2200      	movs	r2, #0
 8022aee:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8022af0:	6878      	ldr	r0, [r7, #4]
 8022af2:	f000 f851 	bl	8022b98 <HAL_SD_ErrorCallback>
}
 8022af6:	e049      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022af8:	68fb      	ldr	r3, [r7, #12]
 8022afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	d044      	beq.n	8022b8c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d040      	beq.n	8022b8c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	681b      	ldr	r3, [r3, #0]
 8022b14:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8022b18:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	681b      	ldr	r3, [r3, #0]
 8022b1e:	2200      	movs	r2, #0
 8022b20:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	2201      	movs	r2, #1
 8022b26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8022b2a:	6878      	ldr	r0, [r7, #4]
 8022b2c:	f000 f834 	bl	8022b98 <HAL_SD_ErrorCallback>
}
 8022b30:	e02c      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	681b      	ldr	r3, [r3, #0]
 8022b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d025      	beq.n	8022b8c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022b48:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b50:	f003 0304 	and.w	r3, r3, #4
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d10c      	bne.n	8022b72 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022b58:	68fb      	ldr	r3, [r7, #12]
 8022b5a:	f003 0320 	and.w	r3, r3, #32
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d003      	beq.n	8022b6a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8022b62:	6878      	ldr	r0, [r7, #4]
 8022b64:	f001 f84a 	bl	8023bfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8022b68:	e010      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8022b6a:	6878      	ldr	r0, [r7, #4]
 8022b6c:	f001 f832 	bl	8023bd4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8022b70:	e00c      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022b72:	68fb      	ldr	r3, [r7, #12]
 8022b74:	f003 0320 	and.w	r3, r3, #32
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d003      	beq.n	8022b84 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8022b7c:	6878      	ldr	r0, [r7, #4]
 8022b7e:	f001 f833 	bl	8023be8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8022b82:	e003      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8022b84:	6878      	ldr	r0, [r7, #4]
 8022b86:	f001 f81b 	bl	8023bc0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8022b8a:	e7ff      	b.n	8022b8c <HAL_SD_IRQHandler+0x364>
 8022b8c:	bf00      	nop
 8022b8e:	3710      	adds	r7, #16
 8022b90:	46bd      	mov	sp, r7
 8022b92:	bd80      	pop	{r7, pc}
 8022b94:	18000f3a 	.word	0x18000f3a

08022b98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8022b98:	b480      	push	{r7}
 8022b9a:	b083      	sub	sp, #12
 8022b9c:	af00      	add	r7, sp, #0
 8022b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8022ba0:	bf00      	nop
 8022ba2:	370c      	adds	r7, #12
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022baa:	4770      	bx	lr

08022bac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8022bac:	b480      	push	{r7}
 8022bae:	b083      	sub	sp, #12
 8022bb0:	af00      	add	r7, sp, #0
 8022bb2:	6078      	str	r0, [r7, #4]
 8022bb4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022bba:	0f9b      	lsrs	r3, r3, #30
 8022bbc:	b2da      	uxtb	r2, r3
 8022bbe:	683b      	ldr	r3, [r7, #0]
 8022bc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8022bc2:	687b      	ldr	r3, [r7, #4]
 8022bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022bc6:	0e9b      	lsrs	r3, r3, #26
 8022bc8:	b2db      	uxtb	r3, r3
 8022bca:	f003 030f 	and.w	r3, r3, #15
 8022bce:	b2da      	uxtb	r2, r3
 8022bd0:	683b      	ldr	r3, [r7, #0]
 8022bd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022bd8:	0e1b      	lsrs	r3, r3, #24
 8022bda:	b2db      	uxtb	r3, r3
 8022bdc:	f003 0303 	and.w	r3, r3, #3
 8022be0:	b2da      	uxtb	r2, r3
 8022be2:	683b      	ldr	r3, [r7, #0]
 8022be4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022bea:	0c1b      	lsrs	r3, r3, #16
 8022bec:	b2da      	uxtb	r2, r3
 8022bee:	683b      	ldr	r3, [r7, #0]
 8022bf0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022bf6:	0a1b      	lsrs	r3, r3, #8
 8022bf8:	b2da      	uxtb	r2, r3
 8022bfa:	683b      	ldr	r3, [r7, #0]
 8022bfc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c02:	b2da      	uxtb	r2, r3
 8022c04:	683b      	ldr	r3, [r7, #0]
 8022c06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c0c:	0d1b      	lsrs	r3, r3, #20
 8022c0e:	b29a      	uxth	r2, r3
 8022c10:	683b      	ldr	r3, [r7, #0]
 8022c12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c18:	0c1b      	lsrs	r3, r3, #16
 8022c1a:	b2db      	uxtb	r3, r3
 8022c1c:	f003 030f 	and.w	r3, r3, #15
 8022c20:	b2da      	uxtb	r2, r3
 8022c22:	683b      	ldr	r3, [r7, #0]
 8022c24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c2a:	0bdb      	lsrs	r3, r3, #15
 8022c2c:	b2db      	uxtb	r3, r3
 8022c2e:	f003 0301 	and.w	r3, r3, #1
 8022c32:	b2da      	uxtb	r2, r3
 8022c34:	683b      	ldr	r3, [r7, #0]
 8022c36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c3c:	0b9b      	lsrs	r3, r3, #14
 8022c3e:	b2db      	uxtb	r3, r3
 8022c40:	f003 0301 	and.w	r3, r3, #1
 8022c44:	b2da      	uxtb	r2, r3
 8022c46:	683b      	ldr	r3, [r7, #0]
 8022c48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c4e:	0b5b      	lsrs	r3, r3, #13
 8022c50:	b2db      	uxtb	r3, r3
 8022c52:	f003 0301 	and.w	r3, r3, #1
 8022c56:	b2da      	uxtb	r2, r3
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c60:	0b1b      	lsrs	r3, r3, #12
 8022c62:	b2db      	uxtb	r3, r3
 8022c64:	f003 0301 	and.w	r3, r3, #1
 8022c68:	b2da      	uxtb	r2, r3
 8022c6a:	683b      	ldr	r3, [r7, #0]
 8022c6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8022c6e:	683b      	ldr	r3, [r7, #0]
 8022c70:	2200      	movs	r2, #0
 8022c72:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022c78:	2b00      	cmp	r3, #0
 8022c7a:	d163      	bne.n	8022d44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c80:	009a      	lsls	r2, r3, #2
 8022c82:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8022c86:	4013      	ands	r3, r2
 8022c88:	687a      	ldr	r2, [r7, #4]
 8022c8a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8022c8c:	0f92      	lsrs	r2, r2, #30
 8022c8e:	431a      	orrs	r2, r3
 8022c90:	683b      	ldr	r3, [r7, #0]
 8022c92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022c98:	0edb      	lsrs	r3, r3, #27
 8022c9a:	b2db      	uxtb	r3, r3
 8022c9c:	f003 0307 	and.w	r3, r3, #7
 8022ca0:	b2da      	uxtb	r2, r3
 8022ca2:	683b      	ldr	r3, [r7, #0]
 8022ca4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022caa:	0e1b      	lsrs	r3, r3, #24
 8022cac:	b2db      	uxtb	r3, r3
 8022cae:	f003 0307 	and.w	r3, r3, #7
 8022cb2:	b2da      	uxtb	r2, r3
 8022cb4:	683b      	ldr	r3, [r7, #0]
 8022cb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022cbc:	0d5b      	lsrs	r3, r3, #21
 8022cbe:	b2db      	uxtb	r3, r3
 8022cc0:	f003 0307 	and.w	r3, r3, #7
 8022cc4:	b2da      	uxtb	r2, r3
 8022cc6:	683b      	ldr	r3, [r7, #0]
 8022cc8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022cce:	0c9b      	lsrs	r3, r3, #18
 8022cd0:	b2db      	uxtb	r3, r3
 8022cd2:	f003 0307 	and.w	r3, r3, #7
 8022cd6:	b2da      	uxtb	r2, r3
 8022cd8:	683b      	ldr	r3, [r7, #0]
 8022cda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ce0:	0bdb      	lsrs	r3, r3, #15
 8022ce2:	b2db      	uxtb	r3, r3
 8022ce4:	f003 0307 	and.w	r3, r3, #7
 8022ce8:	b2da      	uxtb	r2, r3
 8022cea:	683b      	ldr	r3, [r7, #0]
 8022cec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8022cee:	683b      	ldr	r3, [r7, #0]
 8022cf0:	691b      	ldr	r3, [r3, #16]
 8022cf2:	1c5a      	adds	r2, r3, #1
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8022cf8:	683b      	ldr	r3, [r7, #0]
 8022cfa:	7e1b      	ldrb	r3, [r3, #24]
 8022cfc:	b2db      	uxtb	r3, r3
 8022cfe:	f003 0307 	and.w	r3, r3, #7
 8022d02:	3302      	adds	r3, #2
 8022d04:	2201      	movs	r2, #1
 8022d06:	fa02 f303 	lsl.w	r3, r2, r3
 8022d0a:	687a      	ldr	r2, [r7, #4]
 8022d0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022d0e:	fb03 f202 	mul.w	r2, r3, r2
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8022d16:	683b      	ldr	r3, [r7, #0]
 8022d18:	7a1b      	ldrb	r3, [r3, #8]
 8022d1a:	b2db      	uxtb	r3, r3
 8022d1c:	f003 030f 	and.w	r3, r3, #15
 8022d20:	2201      	movs	r2, #1
 8022d22:	409a      	lsls	r2, r3
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022d2c:	687a      	ldr	r2, [r7, #4]
 8022d2e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8022d30:	0a52      	lsrs	r2, r2, #9
 8022d32:	fb03 f202 	mul.w	r2, r3, r2
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022d40:	655a      	str	r2, [r3, #84]	@ 0x54
 8022d42:	e031      	b.n	8022da8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022d48:	2b01      	cmp	r3, #1
 8022d4a:	d11d      	bne.n	8022d88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d50:	041b      	lsls	r3, r3, #16
 8022d52:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022d5a:	0c1b      	lsrs	r3, r3, #16
 8022d5c:	431a      	orrs	r2, r3
 8022d5e:	683b      	ldr	r3, [r7, #0]
 8022d60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8022d62:	683b      	ldr	r3, [r7, #0]
 8022d64:	691b      	ldr	r3, [r3, #16]
 8022d66:	3301      	adds	r3, #1
 8022d68:	029a      	lsls	r2, r3, #10
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	655a      	str	r2, [r3, #84]	@ 0x54
 8022d86:	e00f      	b.n	8022da8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	681b      	ldr	r3, [r3, #0]
 8022d8c:	4a58      	ldr	r2, [pc, #352]	@ (8022ef0 <HAL_SD_GetCardCSD+0x344>)
 8022d8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	2201      	movs	r2, #1
 8022da0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8022da4:	2301      	movs	r3, #1
 8022da6:	e09d      	b.n	8022ee4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022dac:	0b9b      	lsrs	r3, r3, #14
 8022dae:	b2db      	uxtb	r3, r3
 8022db0:	f003 0301 	and.w	r3, r3, #1
 8022db4:	b2da      	uxtb	r2, r3
 8022db6:	683b      	ldr	r3, [r7, #0]
 8022db8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022dbe:	09db      	lsrs	r3, r3, #7
 8022dc0:	b2db      	uxtb	r3, r3
 8022dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022dc6:	b2da      	uxtb	r2, r3
 8022dc8:	683b      	ldr	r3, [r7, #0]
 8022dca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022dd0:	b2db      	uxtb	r3, r3
 8022dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022dd6:	b2da      	uxtb	r2, r3
 8022dd8:	683b      	ldr	r3, [r7, #0]
 8022dda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022de0:	0fdb      	lsrs	r3, r3, #31
 8022de2:	b2da      	uxtb	r2, r3
 8022de4:	683b      	ldr	r3, [r7, #0]
 8022de6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022dec:	0f5b      	lsrs	r3, r3, #29
 8022dee:	b2db      	uxtb	r3, r3
 8022df0:	f003 0303 	and.w	r3, r3, #3
 8022df4:	b2da      	uxtb	r2, r3
 8022df6:	683b      	ldr	r3, [r7, #0]
 8022df8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022dfe:	0e9b      	lsrs	r3, r3, #26
 8022e00:	b2db      	uxtb	r3, r3
 8022e02:	f003 0307 	and.w	r3, r3, #7
 8022e06:	b2da      	uxtb	r2, r3
 8022e08:	683b      	ldr	r3, [r7, #0]
 8022e0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e10:	0d9b      	lsrs	r3, r3, #22
 8022e12:	b2db      	uxtb	r3, r3
 8022e14:	f003 030f 	and.w	r3, r3, #15
 8022e18:	b2da      	uxtb	r2, r3
 8022e1a:	683b      	ldr	r3, [r7, #0]
 8022e1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e22:	0d5b      	lsrs	r3, r3, #21
 8022e24:	b2db      	uxtb	r3, r3
 8022e26:	f003 0301 	and.w	r3, r3, #1
 8022e2a:	b2da      	uxtb	r2, r3
 8022e2c:	683b      	ldr	r3, [r7, #0]
 8022e2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8022e32:	683b      	ldr	r3, [r7, #0]
 8022e34:	2200      	movs	r2, #0
 8022e36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8022e3a:	687b      	ldr	r3, [r7, #4]
 8022e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e3e:	0c1b      	lsrs	r3, r3, #16
 8022e40:	b2db      	uxtb	r3, r3
 8022e42:	f003 0301 	and.w	r3, r3, #1
 8022e46:	b2da      	uxtb	r2, r3
 8022e48:	683b      	ldr	r3, [r7, #0]
 8022e4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8022e4e:	687b      	ldr	r3, [r7, #4]
 8022e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e52:	0bdb      	lsrs	r3, r3, #15
 8022e54:	b2db      	uxtb	r3, r3
 8022e56:	f003 0301 	and.w	r3, r3, #1
 8022e5a:	b2da      	uxtb	r2, r3
 8022e5c:	683b      	ldr	r3, [r7, #0]
 8022e5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e66:	0b9b      	lsrs	r3, r3, #14
 8022e68:	b2db      	uxtb	r3, r3
 8022e6a:	f003 0301 	and.w	r3, r3, #1
 8022e6e:	b2da      	uxtb	r2, r3
 8022e70:	683b      	ldr	r3, [r7, #0]
 8022e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e7a:	0b5b      	lsrs	r3, r3, #13
 8022e7c:	b2db      	uxtb	r3, r3
 8022e7e:	f003 0301 	and.w	r3, r3, #1
 8022e82:	b2da      	uxtb	r2, r3
 8022e84:	683b      	ldr	r3, [r7, #0]
 8022e86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e8e:	0b1b      	lsrs	r3, r3, #12
 8022e90:	b2db      	uxtb	r3, r3
 8022e92:	f003 0301 	and.w	r3, r3, #1
 8022e96:	b2da      	uxtb	r2, r3
 8022e98:	683b      	ldr	r3, [r7, #0]
 8022e9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022ea2:	0a9b      	lsrs	r3, r3, #10
 8022ea4:	b2db      	uxtb	r3, r3
 8022ea6:	f003 0303 	and.w	r3, r3, #3
 8022eaa:	b2da      	uxtb	r2, r3
 8022eac:	683b      	ldr	r3, [r7, #0]
 8022eae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022eb6:	0a1b      	lsrs	r3, r3, #8
 8022eb8:	b2db      	uxtb	r3, r3
 8022eba:	f003 0303 	and.w	r3, r3, #3
 8022ebe:	b2da      	uxtb	r2, r3
 8022ec0:	683b      	ldr	r3, [r7, #0]
 8022ec2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022eca:	085b      	lsrs	r3, r3, #1
 8022ecc:	b2db      	uxtb	r3, r3
 8022ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022ed2:	b2da      	uxtb	r2, r3
 8022ed4:	683b      	ldr	r3, [r7, #0]
 8022ed6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8022eda:	683b      	ldr	r3, [r7, #0]
 8022edc:	2201      	movs	r2, #1
 8022ede:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8022ee2:	2300      	movs	r3, #0
}
 8022ee4:	4618      	mov	r0, r3
 8022ee6:	370c      	adds	r7, #12
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eee:	4770      	bx	lr
 8022ef0:	1fe00fff 	.word	0x1fe00fff

08022ef4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8022ef4:	b580      	push	{r7, lr}
 8022ef6:	b094      	sub	sp, #80	@ 0x50
 8022ef8:	af00      	add	r7, sp, #0
 8022efa:	6078      	str	r0, [r7, #4]
 8022efc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8022efe:	2300      	movs	r3, #0
 8022f00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8022f04:	687b      	ldr	r3, [r7, #4]
 8022f06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022f0a:	b2db      	uxtb	r3, r3
 8022f0c:	2b03      	cmp	r3, #3
 8022f0e:	d101      	bne.n	8022f14 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8022f10:	2301      	movs	r3, #1
 8022f12:	e0a7      	b.n	8023064 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8022f14:	f107 0308 	add.w	r3, r7, #8
 8022f18:	4619      	mov	r1, r3
 8022f1a:	6878      	ldr	r0, [r7, #4]
 8022f1c:	f000 fb62 	bl	80235e4 <SD_SendSDStatus>
 8022f20:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8022f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	d011      	beq.n	8022f4c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	681b      	ldr	r3, [r3, #0]
 8022f2c:	4a4f      	ldr	r2, [pc, #316]	@ (802306c <HAL_SD_GetCardStatus+0x178>)
 8022f2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022f36:	431a      	orrs	r2, r3
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	2201      	movs	r2, #1
 8022f40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8022f44:	2301      	movs	r3, #1
 8022f46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8022f4a:	e070      	b.n	802302e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8022f4c:	68bb      	ldr	r3, [r7, #8]
 8022f4e:	099b      	lsrs	r3, r3, #6
 8022f50:	b2db      	uxtb	r3, r3
 8022f52:	f003 0303 	and.w	r3, r3, #3
 8022f56:	b2da      	uxtb	r2, r3
 8022f58:	683b      	ldr	r3, [r7, #0]
 8022f5a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8022f5c:	68bb      	ldr	r3, [r7, #8]
 8022f5e:	095b      	lsrs	r3, r3, #5
 8022f60:	b2db      	uxtb	r3, r3
 8022f62:	f003 0301 	and.w	r3, r3, #1
 8022f66:	b2da      	uxtb	r2, r3
 8022f68:	683b      	ldr	r3, [r7, #0]
 8022f6a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8022f6c:	68bb      	ldr	r3, [r7, #8]
 8022f6e:	0a1b      	lsrs	r3, r3, #8
 8022f70:	b29b      	uxth	r3, r3
 8022f72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8022f76:	b29a      	uxth	r2, r3
 8022f78:	68bb      	ldr	r3, [r7, #8]
 8022f7a:	0e1b      	lsrs	r3, r3, #24
 8022f7c:	b29b      	uxth	r3, r3
 8022f7e:	4313      	orrs	r3, r2
 8022f80:	b29a      	uxth	r2, r3
 8022f82:	683b      	ldr	r3, [r7, #0]
 8022f84:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022f86:	68fb      	ldr	r3, [r7, #12]
 8022f88:	061a      	lsls	r2, r3, #24
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	021b      	lsls	r3, r3, #8
 8022f8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8022f92:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8022f94:	68fb      	ldr	r3, [r7, #12]
 8022f96:	0a1b      	lsrs	r3, r3, #8
 8022f98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022f9c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8022f9e:	68fb      	ldr	r3, [r7, #12]
 8022fa0:	0e1b      	lsrs	r3, r3, #24
 8022fa2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022fa4:	683b      	ldr	r3, [r7, #0]
 8022fa6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8022fa8:	693b      	ldr	r3, [r7, #16]
 8022faa:	b2da      	uxtb	r2, r3
 8022fac:	683b      	ldr	r3, [r7, #0]
 8022fae:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8022fb0:	693b      	ldr	r3, [r7, #16]
 8022fb2:	0a1b      	lsrs	r3, r3, #8
 8022fb4:	b2da      	uxtb	r2, r3
 8022fb6:	683b      	ldr	r3, [r7, #0]
 8022fb8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8022fba:	693b      	ldr	r3, [r7, #16]
 8022fbc:	0d1b      	lsrs	r3, r3, #20
 8022fbe:	b2db      	uxtb	r3, r3
 8022fc0:	f003 030f 	and.w	r3, r3, #15
 8022fc4:	b2da      	uxtb	r2, r3
 8022fc6:	683b      	ldr	r3, [r7, #0]
 8022fc8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8022fca:	693b      	ldr	r3, [r7, #16]
 8022fcc:	0c1b      	lsrs	r3, r3, #16
 8022fce:	b29b      	uxth	r3, r3
 8022fd0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8022fd4:	b29a      	uxth	r2, r3
 8022fd6:	697b      	ldr	r3, [r7, #20]
 8022fd8:	b29b      	uxth	r3, r3
 8022fda:	b2db      	uxtb	r3, r3
 8022fdc:	b29b      	uxth	r3, r3
 8022fde:	4313      	orrs	r3, r2
 8022fe0:	b29a      	uxth	r2, r3
 8022fe2:	683b      	ldr	r3, [r7, #0]
 8022fe4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8022fe6:	697b      	ldr	r3, [r7, #20]
 8022fe8:	0a9b      	lsrs	r3, r3, #10
 8022fea:	b2db      	uxtb	r3, r3
 8022fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022ff0:	b2da      	uxtb	r2, r3
 8022ff2:	683b      	ldr	r3, [r7, #0]
 8022ff4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8022ff6:	697b      	ldr	r3, [r7, #20]
 8022ff8:	0a1b      	lsrs	r3, r3, #8
 8022ffa:	b2db      	uxtb	r3, r3
 8022ffc:	f003 0303 	and.w	r3, r3, #3
 8023000:	b2da      	uxtb	r2, r3
 8023002:	683b      	ldr	r3, [r7, #0]
 8023004:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8023006:	697b      	ldr	r3, [r7, #20]
 8023008:	091b      	lsrs	r3, r3, #4
 802300a:	b2db      	uxtb	r3, r3
 802300c:	f003 030f 	and.w	r3, r3, #15
 8023010:	b2da      	uxtb	r2, r3
 8023012:	683b      	ldr	r3, [r7, #0]
 8023014:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8023016:	697b      	ldr	r3, [r7, #20]
 8023018:	b2db      	uxtb	r3, r3
 802301a:	f003 030f 	and.w	r3, r3, #15
 802301e:	b2da      	uxtb	r2, r3
 8023020:	683b      	ldr	r3, [r7, #0]
 8023022:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8023024:	69bb      	ldr	r3, [r7, #24]
 8023026:	0e1b      	lsrs	r3, r3, #24
 8023028:	b2da      	uxtb	r2, r3
 802302a:	683b      	ldr	r3, [r7, #0]
 802302c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8023036:	4618      	mov	r0, r3
 8023038:	f002 f97c 	bl	8025334 <SDMMC_CmdBlockLength>
 802303c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 802303e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023040:	2b00      	cmp	r3, #0
 8023042:	d00d      	beq.n	8023060 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	4a08      	ldr	r2, [pc, #32]	@ (802306c <HAL_SD_GetCardStatus+0x178>)
 802304a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 802304c:	687b      	ldr	r3, [r7, #4]
 802304e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023050:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	2201      	movs	r2, #1
 8023056:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 802305a:	2301      	movs	r3, #1
 802305c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8023060:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8023064:	4618      	mov	r0, r3
 8023066:	3750      	adds	r7, #80	@ 0x50
 8023068:	46bd      	mov	sp, r7
 802306a:	bd80      	pop	{r7, pc}
 802306c:	1fe00fff 	.word	0x1fe00fff

08023070 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8023070:	b480      	push	{r7}
 8023072:	b083      	sub	sp, #12
 8023074:	af00      	add	r7, sp, #0
 8023076:	6078      	str	r0, [r7, #4]
 8023078:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 802307a:	687b      	ldr	r3, [r7, #4]
 802307c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802307e:	683b      	ldr	r3, [r7, #0]
 8023080:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8023086:	683b      	ldr	r3, [r7, #0]
 8023088:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802308e:	683b      	ldr	r3, [r7, #0]
 8023090:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8023096:	683b      	ldr	r3, [r7, #0]
 8023098:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802309e:	683b      	ldr	r3, [r7, #0]
 80230a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80230a2:	687b      	ldr	r3, [r7, #4]
 80230a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80230a6:	683b      	ldr	r3, [r7, #0]
 80230a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80230ae:	683b      	ldr	r3, [r7, #0]
 80230b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80230b6:	683b      	ldr	r3, [r7, #0]
 80230b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80230ba:	2300      	movs	r3, #0
}
 80230bc:	4618      	mov	r0, r3
 80230be:	370c      	adds	r7, #12
 80230c0:	46bd      	mov	sp, r7
 80230c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230c6:	4770      	bx	lr

080230c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80230c8:	b590      	push	{r4, r7, lr}
 80230ca:	b08d      	sub	sp, #52	@ 0x34
 80230cc:	af02      	add	r7, sp, #8
 80230ce:	6078      	str	r0, [r7, #4]
 80230d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80230d2:	2300      	movs	r3, #0
 80230d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	2203      	movs	r2, #3
 80230dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80230e4:	2b03      	cmp	r3, #3
 80230e6:	d02e      	beq.n	8023146 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80230e8:	683b      	ldr	r3, [r7, #0]
 80230ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80230ee:	d106      	bne.n	80230fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80230f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80230fc:	e029      	b.n	8023152 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80230fe:	683b      	ldr	r3, [r7, #0]
 8023100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023104:	d10a      	bne.n	802311c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8023106:	6878      	ldr	r0, [r7, #4]
 8023108:	f000 fb64 	bl	80237d4 <SD_WideBus_Enable>
 802310c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023112:	6a3b      	ldr	r3, [r7, #32]
 8023114:	431a      	orrs	r2, r3
 8023116:	687b      	ldr	r3, [r7, #4]
 8023118:	635a      	str	r2, [r3, #52]	@ 0x34
 802311a:	e01a      	b.n	8023152 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 802311c:	683b      	ldr	r3, [r7, #0]
 802311e:	2b00      	cmp	r3, #0
 8023120:	d10a      	bne.n	8023138 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8023122:	6878      	ldr	r0, [r7, #4]
 8023124:	f000 fba1 	bl	802386a <SD_WideBus_Disable>
 8023128:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802312e:	6a3b      	ldr	r3, [r7, #32]
 8023130:	431a      	orrs	r2, r3
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	635a      	str	r2, [r3, #52]	@ 0x34
 8023136:	e00c      	b.n	8023152 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802313c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	635a      	str	r2, [r3, #52]	@ 0x34
 8023144:	e005      	b.n	8023152 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802314a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023156:	2b00      	cmp	r3, #0
 8023158:	d007      	beq.n	802316a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	4a5f      	ldr	r2, [pc, #380]	@ (80232dc <HAL_SD_ConfigWideBusOperation+0x214>)
 8023160:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8023162:	2301      	movs	r3, #1
 8023164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023168:	e096      	b.n	8023298 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 802316a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802316e:	f04f 0100 	mov.w	r1, #0
 8023172:	f7fd fdf5 	bl	8020d60 <HAL_RCCEx_GetPeriphCLKFreq>
 8023176:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8023178:	69fb      	ldr	r3, [r7, #28]
 802317a:	2b00      	cmp	r3, #0
 802317c:	f000 8083 	beq.w	8023286 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	685b      	ldr	r3, [r3, #4]
 8023184:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	689b      	ldr	r3, [r3, #8]
 802318a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 802318c:	683b      	ldr	r3, [r7, #0]
 802318e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	691b      	ldr	r3, [r3, #16]
 8023194:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8023196:	687b      	ldr	r3, [r7, #4]
 8023198:	695a      	ldr	r2, [r3, #20]
 802319a:	69fb      	ldr	r3, [r7, #28]
 802319c:	4950      	ldr	r1, [pc, #320]	@ (80232e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 802319e:	fba1 1303 	umull	r1, r3, r1, r3
 80231a2:	0e1b      	lsrs	r3, r3, #24
 80231a4:	429a      	cmp	r2, r3
 80231a6:	d303      	bcc.n	80231b0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	695b      	ldr	r3, [r3, #20]
 80231ac:	61bb      	str	r3, [r7, #24]
 80231ae:	e05a      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80231b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80231b8:	d103      	bne.n	80231c2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	695b      	ldr	r3, [r3, #20]
 80231be:	61bb      	str	r3, [r7, #24]
 80231c0:	e051      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80231c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80231ca:	d126      	bne.n	802321a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	695b      	ldr	r3, [r3, #20]
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d10e      	bne.n	80231f2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80231d4:	69fb      	ldr	r3, [r7, #28]
 80231d6:	4a43      	ldr	r2, [pc, #268]	@ (80232e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80231d8:	4293      	cmp	r3, r2
 80231da:	d906      	bls.n	80231ea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80231dc:	69fb      	ldr	r3, [r7, #28]
 80231de:	4a40      	ldr	r2, [pc, #256]	@ (80232e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80231e0:	fba2 2303 	umull	r2, r3, r2, r3
 80231e4:	0e5b      	lsrs	r3, r3, #25
 80231e6:	61bb      	str	r3, [r7, #24]
 80231e8:	e03d      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80231ea:	687b      	ldr	r3, [r7, #4]
 80231ec:	695b      	ldr	r3, [r3, #20]
 80231ee:	61bb      	str	r3, [r7, #24]
 80231f0:	e039      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	695b      	ldr	r3, [r3, #20]
 80231f6:	005b      	lsls	r3, r3, #1
 80231f8:	69fa      	ldr	r2, [r7, #28]
 80231fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80231fe:	4a39      	ldr	r2, [pc, #228]	@ (80232e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023200:	4293      	cmp	r3, r2
 8023202:	d906      	bls.n	8023212 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8023204:	69fb      	ldr	r3, [r7, #28]
 8023206:	4a36      	ldr	r2, [pc, #216]	@ (80232e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023208:	fba2 2303 	umull	r2, r3, r2, r3
 802320c:	0e5b      	lsrs	r3, r3, #25
 802320e:	61bb      	str	r3, [r7, #24]
 8023210:	e029      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	695b      	ldr	r3, [r3, #20]
 8023216:	61bb      	str	r3, [r7, #24]
 8023218:	e025      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	695b      	ldr	r3, [r3, #20]
 802321e:	2b00      	cmp	r3, #0
 8023220:	d10e      	bne.n	8023240 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8023222:	69fb      	ldr	r3, [r7, #28]
 8023224:	4a30      	ldr	r2, [pc, #192]	@ (80232e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8023226:	4293      	cmp	r3, r2
 8023228:	d906      	bls.n	8023238 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 802322a:	69fb      	ldr	r3, [r7, #28]
 802322c:	4a2c      	ldr	r2, [pc, #176]	@ (80232e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 802322e:	fba2 2303 	umull	r2, r3, r2, r3
 8023232:	0e1b      	lsrs	r3, r3, #24
 8023234:	61bb      	str	r3, [r7, #24]
 8023236:	e016      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	695b      	ldr	r3, [r3, #20]
 802323c:	61bb      	str	r3, [r7, #24]
 802323e:	e012      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	695b      	ldr	r3, [r3, #20]
 8023244:	005b      	lsls	r3, r3, #1
 8023246:	69fa      	ldr	r2, [r7, #28]
 8023248:	fbb2 f3f3 	udiv	r3, r2, r3
 802324c:	4a26      	ldr	r2, [pc, #152]	@ (80232e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 802324e:	4293      	cmp	r3, r2
 8023250:	d906      	bls.n	8023260 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8023252:	69fb      	ldr	r3, [r7, #28]
 8023254:	4a22      	ldr	r2, [pc, #136]	@ (80232e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023256:	fba2 2303 	umull	r2, r3, r2, r3
 802325a:	0e1b      	lsrs	r3, r3, #24
 802325c:	61bb      	str	r3, [r7, #24]
 802325e:	e002      	b.n	8023266 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	695b      	ldr	r3, [r3, #20]
 8023264:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	681c      	ldr	r4, [r3, #0]
 802326a:	466a      	mov	r2, sp
 802326c:	f107 0314 	add.w	r3, r7, #20
 8023270:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023274:	e882 0003 	stmia.w	r2, {r0, r1}
 8023278:	f107 0308 	add.w	r3, r7, #8
 802327c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802327e:	4620      	mov	r0, r4
 8023280:	f001 ff7a 	bl	8025178 <SDMMC_Init>
 8023284:	e008      	b.n	8023298 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802328a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8023292:	2301      	movs	r3, #1
 8023294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80232a0:	4618      	mov	r0, r3
 80232a2:	f002 f847 	bl	8025334 <SDMMC_CmdBlockLength>
 80232a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80232a8:	6a3b      	ldr	r3, [r7, #32]
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d00c      	beq.n	80232c8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	4a0a      	ldr	r2, [pc, #40]	@ (80232dc <HAL_SD_ConfigWideBusOperation+0x214>)
 80232b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80232ba:	6a3b      	ldr	r3, [r7, #32]
 80232bc:	431a      	orrs	r2, r3
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80232c2:	2301      	movs	r3, #1
 80232c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	2201      	movs	r2, #1
 80232cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80232d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80232d4:	4618      	mov	r0, r3
 80232d6:	372c      	adds	r7, #44	@ 0x2c
 80232d8:	46bd      	mov	sp, r7
 80232da:	bd90      	pop	{r4, r7, pc}
 80232dc:	1fe00fff 	.word	0x1fe00fff
 80232e0:	55e63b89 	.word	0x55e63b89
 80232e4:	02faf080 	.word	0x02faf080
 80232e8:	017d7840 	.word	0x017d7840

080232ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80232ec:	b580      	push	{r7, lr}
 80232ee:	b086      	sub	sp, #24
 80232f0:	af00      	add	r7, sp, #0
 80232f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80232f4:	2300      	movs	r3, #0
 80232f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80232f8:	f107 030c 	add.w	r3, r7, #12
 80232fc:	4619      	mov	r1, r3
 80232fe:	6878      	ldr	r0, [r7, #4]
 8023300:	f000 fa40 	bl	8023784 <SD_SendStatus>
 8023304:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023306:	697b      	ldr	r3, [r7, #20]
 8023308:	2b00      	cmp	r3, #0
 802330a:	d005      	beq.n	8023318 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023310:	697b      	ldr	r3, [r7, #20]
 8023312:	431a      	orrs	r2, r3
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8023318:	68fb      	ldr	r3, [r7, #12]
 802331a:	0a5b      	lsrs	r3, r3, #9
 802331c:	f003 030f 	and.w	r3, r3, #15
 8023320:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8023322:	693b      	ldr	r3, [r7, #16]
}
 8023324:	4618      	mov	r0, r3
 8023326:	3718      	adds	r7, #24
 8023328:	46bd      	mov	sp, r7
 802332a:	bd80      	pop	{r7, pc}

0802332c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 802332c:	b580      	push	{r7, lr}
 802332e:	b090      	sub	sp, #64	@ 0x40
 8023330:	af00      	add	r7, sp, #0
 8023332:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8023334:	2300      	movs	r3, #0
 8023336:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8023338:	f7f8 fbe8 	bl	801bb0c <HAL_GetTick>
 802333c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	681b      	ldr	r3, [r3, #0]
 8023342:	4618      	mov	r0, r3
 8023344:	f001 ff71 	bl	802522a <SDMMC_GetPowerState>
 8023348:	4603      	mov	r3, r0
 802334a:	2b00      	cmp	r3, #0
 802334c:	d102      	bne.n	8023354 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 802334e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8023352:	e0b5      	b.n	80234c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023358:	2b03      	cmp	r3, #3
 802335a:	d02e      	beq.n	80233ba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	4618      	mov	r0, r3
 8023362:	f002 f9bc 	bl	80256de <SDMMC_CmdSendCID>
 8023366:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8023368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802336a:	2b00      	cmp	r3, #0
 802336c:	d001      	beq.n	8023372 <SD_InitCard+0x46>
    {
      return errorstate;
 802336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023370:	e0a6      	b.n	80234c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	681b      	ldr	r3, [r3, #0]
 8023376:	2100      	movs	r1, #0
 8023378:	4618      	mov	r0, r3
 802337a:	f001 ff9c 	bl	80252b6 <SDMMC_GetResponse>
 802337e:	4602      	mov	r2, r0
 8023380:	687b      	ldr	r3, [r7, #4]
 8023382:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8023384:	687b      	ldr	r3, [r7, #4]
 8023386:	681b      	ldr	r3, [r3, #0]
 8023388:	2104      	movs	r1, #4
 802338a:	4618      	mov	r0, r3
 802338c:	f001 ff93 	bl	80252b6 <SDMMC_GetResponse>
 8023390:	4602      	mov	r2, r0
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	2108      	movs	r1, #8
 802339c:	4618      	mov	r0, r3
 802339e:	f001 ff8a 	bl	80252b6 <SDMMC_GetResponse>
 80233a2:	4602      	mov	r2, r0
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	681b      	ldr	r3, [r3, #0]
 80233ac:	210c      	movs	r1, #12
 80233ae:	4618      	mov	r0, r3
 80233b0:	f001 ff81 	bl	80252b6 <SDMMC_GetResponse>
 80233b4:	4602      	mov	r2, r0
 80233b6:	687b      	ldr	r3, [r7, #4]
 80233b8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80233be:	2b03      	cmp	r3, #3
 80233c0:	d01d      	beq.n	80233fe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80233c2:	e019      	b.n	80233f8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	f107 020a 	add.w	r2, r7, #10
 80233cc:	4611      	mov	r1, r2
 80233ce:	4618      	mov	r0, r3
 80233d0:	f002 f9c4 	bl	802575c <SDMMC_CmdSetRelAdd>
 80233d4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80233d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d001      	beq.n	80233e0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80233dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233de:	e06f      	b.n	80234c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80233e0:	f7f8 fb94 	bl	801bb0c <HAL_GetTick>
 80233e4:	4602      	mov	r2, r0
 80233e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80233e8:	1ad3      	subs	r3, r2, r3
 80233ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 80233ee:	4293      	cmp	r3, r2
 80233f0:	d902      	bls.n	80233f8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80233f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80233f6:	e063      	b.n	80234c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80233f8:	897b      	ldrh	r3, [r7, #10]
 80233fa:	2b00      	cmp	r3, #0
 80233fc:	d0e2      	beq.n	80233c4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023402:	2b03      	cmp	r3, #3
 8023404:	d036      	beq.n	8023474 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8023406:	897b      	ldrh	r3, [r7, #10]
 8023408:	461a      	mov	r2, r3
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	681a      	ldr	r2, [r3, #0]
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023416:	041b      	lsls	r3, r3, #16
 8023418:	4619      	mov	r1, r3
 802341a:	4610      	mov	r0, r2
 802341c:	f002 f97e 	bl	802571c <SDMMC_CmdSendCSD>
 8023420:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8023422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023424:	2b00      	cmp	r3, #0
 8023426:	d001      	beq.n	802342c <SD_InitCard+0x100>
    {
      return errorstate;
 8023428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802342a:	e049      	b.n	80234c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802342c:	687b      	ldr	r3, [r7, #4]
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	2100      	movs	r1, #0
 8023432:	4618      	mov	r0, r3
 8023434:	f001 ff3f 	bl	80252b6 <SDMMC_GetResponse>
 8023438:	4602      	mov	r2, r0
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 802343e:	687b      	ldr	r3, [r7, #4]
 8023440:	681b      	ldr	r3, [r3, #0]
 8023442:	2104      	movs	r1, #4
 8023444:	4618      	mov	r0, r3
 8023446:	f001 ff36 	bl	80252b6 <SDMMC_GetResponse>
 802344a:	4602      	mov	r2, r0
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	681b      	ldr	r3, [r3, #0]
 8023454:	2108      	movs	r1, #8
 8023456:	4618      	mov	r0, r3
 8023458:	f001 ff2d 	bl	80252b6 <SDMMC_GetResponse>
 802345c:	4602      	mov	r2, r0
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	681b      	ldr	r3, [r3, #0]
 8023466:	210c      	movs	r1, #12
 8023468:	4618      	mov	r0, r3
 802346a:	f001 ff24 	bl	80252b6 <SDMMC_GetResponse>
 802346e:	4602      	mov	r2, r0
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	2104      	movs	r1, #4
 802347a:	4618      	mov	r0, r3
 802347c:	f001 ff1b 	bl	80252b6 <SDMMC_GetResponse>
 8023480:	4603      	mov	r3, r0
 8023482:	0d1a      	lsrs	r2, r3, #20
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8023488:	f107 030c 	add.w	r3, r7, #12
 802348c:	4619      	mov	r1, r3
 802348e:	6878      	ldr	r0, [r7, #4]
 8023490:	f7ff fb8c 	bl	8022bac <HAL_SD_GetCardCSD>
 8023494:	4603      	mov	r3, r0
 8023496:	2b00      	cmp	r3, #0
 8023498:	d002      	beq.n	80234a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802349a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802349e:	e00f      	b.n	80234c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80234a0:	687b      	ldr	r3, [r7, #4]
 80234a2:	681a      	ldr	r2, [r3, #0]
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80234a8:	041b      	lsls	r3, r3, #16
 80234aa:	4619      	mov	r1, r3
 80234ac:	4610      	mov	r0, r2
 80234ae:	f002 f82d 	bl	802550c <SDMMC_CmdSelDesel>
 80234b2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80234b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	d001      	beq.n	80234be <SD_InitCard+0x192>
  {
    return errorstate;
 80234ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234bc:	e000      	b.n	80234c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80234be:	2300      	movs	r3, #0
}
 80234c0:	4618      	mov	r0, r3
 80234c2:	3740      	adds	r7, #64	@ 0x40
 80234c4:	46bd      	mov	sp, r7
 80234c6:	bd80      	pop	{r7, pc}

080234c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80234c8:	b580      	push	{r7, lr}
 80234ca:	b086      	sub	sp, #24
 80234cc:	af00      	add	r7, sp, #0
 80234ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80234d0:	2300      	movs	r3, #0
 80234d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80234d4:	2300      	movs	r3, #0
 80234d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80234d8:	2300      	movs	r3, #0
 80234da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	4618      	mov	r0, r3
 80234e2:	f002 f836 	bl	8025552 <SDMMC_CmdGoIdleState>
 80234e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	2b00      	cmp	r3, #0
 80234ec:	d001      	beq.n	80234f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80234ee:	68fb      	ldr	r3, [r7, #12]
 80234f0:	e072      	b.n	80235d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	4618      	mov	r0, r3
 80234f8:	f002 f849 	bl	802558e <SDMMC_CmdOperCond>
 80234fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80234fe:	68fb      	ldr	r3, [r7, #12]
 8023500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8023504:	d10d      	bne.n	8023522 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8023506:	687b      	ldr	r3, [r7, #4]
 8023508:	2200      	movs	r2, #0
 802350a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	4618      	mov	r0, r3
 8023512:	f002 f81e 	bl	8025552 <SDMMC_CmdGoIdleState>
 8023516:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023518:	68fb      	ldr	r3, [r7, #12]
 802351a:	2b00      	cmp	r3, #0
 802351c:	d004      	beq.n	8023528 <SD_PowerON+0x60>
    {
      return errorstate;
 802351e:	68fb      	ldr	r3, [r7, #12]
 8023520:	e05a      	b.n	80235d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2201      	movs	r2, #1
 8023526:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802352c:	2b01      	cmp	r3, #1
 802352e:	d137      	bne.n	80235a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	2100      	movs	r1, #0
 8023536:	4618      	mov	r0, r3
 8023538:	f002 f849 	bl	80255ce <SDMMC_CmdAppCommand>
 802353c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 802353e:	68fb      	ldr	r3, [r7, #12]
 8023540:	2b00      	cmp	r3, #0
 8023542:	d02d      	beq.n	80235a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023544:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023548:	e046      	b.n	80235d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	681b      	ldr	r3, [r3, #0]
 802354e:	2100      	movs	r1, #0
 8023550:	4618      	mov	r0, r3
 8023552:	f002 f83c 	bl	80255ce <SDMMC_CmdAppCommand>
 8023556:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	2b00      	cmp	r3, #0
 802355c:	d001      	beq.n	8023562 <SD_PowerON+0x9a>
    {
      return errorstate;
 802355e:	68fb      	ldr	r3, [r7, #12]
 8023560:	e03a      	b.n	80235d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	681b      	ldr	r3, [r3, #0]
 8023566:	491e      	ldr	r1, [pc, #120]	@ (80235e0 <SD_PowerON+0x118>)
 8023568:	4618      	mov	r0, r3
 802356a:	f002 f853 	bl	8025614 <SDMMC_CmdAppOperCommand>
 802356e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8023570:	68fb      	ldr	r3, [r7, #12]
 8023572:	2b00      	cmp	r3, #0
 8023574:	d002      	beq.n	802357c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023576:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802357a:	e02d      	b.n	80235d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	2100      	movs	r1, #0
 8023582:	4618      	mov	r0, r3
 8023584:	f001 fe97 	bl	80252b6 <SDMMC_GetResponse>
 8023588:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 802358a:	697b      	ldr	r3, [r7, #20]
 802358c:	0fdb      	lsrs	r3, r3, #31
 802358e:	2b01      	cmp	r3, #1
 8023590:	d101      	bne.n	8023596 <SD_PowerON+0xce>
 8023592:	2301      	movs	r3, #1
 8023594:	e000      	b.n	8023598 <SD_PowerON+0xd0>
 8023596:	2300      	movs	r3, #0
 8023598:	613b      	str	r3, [r7, #16]

    count++;
 802359a:	68bb      	ldr	r3, [r7, #8]
 802359c:	3301      	adds	r3, #1
 802359e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80235a0:	68bb      	ldr	r3, [r7, #8]
 80235a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80235a6:	4293      	cmp	r3, r2
 80235a8:	d802      	bhi.n	80235b0 <SD_PowerON+0xe8>
 80235aa:	693b      	ldr	r3, [r7, #16]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d0cc      	beq.n	802354a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80235b0:	68bb      	ldr	r3, [r7, #8]
 80235b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80235b6:	4293      	cmp	r3, r2
 80235b8:	d902      	bls.n	80235c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80235ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80235be:	e00b      	b.n	80235d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	2200      	movs	r2, #0
 80235c4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80235c6:	697b      	ldr	r3, [r7, #20]
 80235c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d002      	beq.n	80235d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	2201      	movs	r2, #1
 80235d4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80235d6:	2300      	movs	r3, #0
}
 80235d8:	4618      	mov	r0, r3
 80235da:	3718      	adds	r7, #24
 80235dc:	46bd      	mov	sp, r7
 80235de:	bd80      	pop	{r7, pc}
 80235e0:	c1100000 	.word	0xc1100000

080235e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80235e4:	b580      	push	{r7, lr}
 80235e6:	b08c      	sub	sp, #48	@ 0x30
 80235e8:	af00      	add	r7, sp, #0
 80235ea:	6078      	str	r0, [r7, #4]
 80235ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80235ee:	f7f8 fa8d 	bl	801bb0c <HAL_GetTick>
 80235f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80235f4:	683b      	ldr	r3, [r7, #0]
 80235f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	2100      	movs	r1, #0
 80235fe:	4618      	mov	r0, r3
 8023600:	f001 fe59 	bl	80252b6 <SDMMC_GetResponse>
 8023604:	4603      	mov	r3, r0
 8023606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802360a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802360e:	d102      	bne.n	8023616 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023614:	e0b0      	b.n	8023778 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8023616:	687b      	ldr	r3, [r7, #4]
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	2140      	movs	r1, #64	@ 0x40
 802361c:	4618      	mov	r0, r3
 802361e:	f001 fe89 	bl	8025334 <SDMMC_CmdBlockLength>
 8023622:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023624:	6a3b      	ldr	r3, [r7, #32]
 8023626:	2b00      	cmp	r3, #0
 8023628:	d005      	beq.n	8023636 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8023632:	6a3b      	ldr	r3, [r7, #32]
 8023634:	e0a0      	b.n	8023778 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	681a      	ldr	r2, [r3, #0]
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802363e:	041b      	lsls	r3, r3, #16
 8023640:	4619      	mov	r1, r3
 8023642:	4610      	mov	r0, r2
 8023644:	f001 ffc3 	bl	80255ce <SDMMC_CmdAppCommand>
 8023648:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802364a:	6a3b      	ldr	r3, [r7, #32]
 802364c:	2b00      	cmp	r3, #0
 802364e:	d005      	beq.n	802365c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023650:	687b      	ldr	r3, [r7, #4]
 8023652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8023658:	6a3b      	ldr	r3, [r7, #32]
 802365a:	e08d      	b.n	8023778 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802365c:	f04f 33ff 	mov.w	r3, #4294967295
 8023660:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8023662:	2340      	movs	r3, #64	@ 0x40
 8023664:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8023666:	2360      	movs	r3, #96	@ 0x60
 8023668:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 802366a:	2302      	movs	r3, #2
 802366c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802366e:	2300      	movs	r3, #0
 8023670:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8023672:	2301      	movs	r3, #1
 8023674:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	681b      	ldr	r3, [r3, #0]
 802367a:	f107 0208 	add.w	r2, r7, #8
 802367e:	4611      	mov	r1, r2
 8023680:	4618      	mov	r0, r3
 8023682:	f001 fe2b 	bl	80252dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8023686:	687b      	ldr	r3, [r7, #4]
 8023688:	681b      	ldr	r3, [r3, #0]
 802368a:	4618      	mov	r0, r3
 802368c:	f002 f8ab 	bl	80257e6 <SDMMC_CmdStatusRegister>
 8023690:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023692:	6a3b      	ldr	r3, [r7, #32]
 8023694:	2b00      	cmp	r3, #0
 8023696:	d02b      	beq.n	80236f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80236a0:	6a3b      	ldr	r3, [r7, #32]
 80236a2:	e069      	b.n	8023778 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	d013      	beq.n	80236da <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80236b2:	2300      	movs	r3, #0
 80236b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80236b6:	e00d      	b.n	80236d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	681b      	ldr	r3, [r3, #0]
 80236bc:	4618      	mov	r0, r3
 80236be:	f001 fd85 	bl	80251cc <SDMMC_ReadFIFO>
 80236c2:	4602      	mov	r2, r0
 80236c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236c6:	601a      	str	r2, [r3, #0]
        pData++;
 80236c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80236ca:	3304      	adds	r3, #4
 80236cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80236ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236d0:	3301      	adds	r3, #1
 80236d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80236d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236d6:	2b07      	cmp	r3, #7
 80236d8:	d9ee      	bls.n	80236b8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80236da:	f7f8 fa17 	bl	801bb0c <HAL_GetTick>
 80236de:	4602      	mov	r2, r0
 80236e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80236e2:	1ad3      	subs	r3, r2, r3
 80236e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236e8:	d102      	bne.n	80236f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80236ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80236ee:	e043      	b.n	8023778 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	681b      	ldr	r3, [r3, #0]
 80236f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236f6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80236fa:	2b00      	cmp	r3, #0
 80236fc:	d0d2      	beq.n	80236a4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	681b      	ldr	r3, [r3, #0]
 8023702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023704:	f003 0308 	and.w	r3, r3, #8
 8023708:	2b00      	cmp	r3, #0
 802370a:	d001      	beq.n	8023710 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 802370c:	2308      	movs	r3, #8
 802370e:	e033      	b.n	8023778 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	681b      	ldr	r3, [r3, #0]
 8023714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023716:	f003 0302 	and.w	r3, r3, #2
 802371a:	2b00      	cmp	r3, #0
 802371c:	d001      	beq.n	8023722 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 802371e:	2302      	movs	r3, #2
 8023720:	e02a      	b.n	8023778 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	681b      	ldr	r3, [r3, #0]
 8023726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023728:	f003 0320 	and.w	r3, r3, #32
 802372c:	2b00      	cmp	r3, #0
 802372e:	d017      	beq.n	8023760 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8023730:	2320      	movs	r3, #32
 8023732:	e021      	b.n	8023778 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	4618      	mov	r0, r3
 802373a:	f001 fd47 	bl	80251cc <SDMMC_ReadFIFO>
 802373e:	4602      	mov	r2, r0
 8023740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023742:	601a      	str	r2, [r3, #0]
    pData++;
 8023744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023746:	3304      	adds	r3, #4
 8023748:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 802374a:	f7f8 f9df 	bl	801bb0c <HAL_GetTick>
 802374e:	4602      	mov	r2, r0
 8023750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023752:	1ad3      	subs	r3, r2, r3
 8023754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023758:	d102      	bne.n	8023760 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 802375a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802375e:	e00b      	b.n	8023778 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 802376a:	2b00      	cmp	r3, #0
 802376c:	d1e2      	bne.n	8023734 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 802376e:	687b      	ldr	r3, [r7, #4]
 8023770:	681b      	ldr	r3, [r3, #0]
 8023772:	4a03      	ldr	r2, [pc, #12]	@ (8023780 <SD_SendSDStatus+0x19c>)
 8023774:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8023776:	2300      	movs	r3, #0
}
 8023778:	4618      	mov	r0, r3
 802377a:	3730      	adds	r7, #48	@ 0x30
 802377c:	46bd      	mov	sp, r7
 802377e:	bd80      	pop	{r7, pc}
 8023780:	18000f3a 	.word	0x18000f3a

08023784 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8023784:	b580      	push	{r7, lr}
 8023786:	b084      	sub	sp, #16
 8023788:	af00      	add	r7, sp, #0
 802378a:	6078      	str	r0, [r7, #4]
 802378c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 802378e:	683b      	ldr	r3, [r7, #0]
 8023790:	2b00      	cmp	r3, #0
 8023792:	d102      	bne.n	802379a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8023794:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8023798:	e018      	b.n	80237cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	681a      	ldr	r2, [r3, #0]
 802379e:	687b      	ldr	r3, [r7, #4]
 80237a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80237a2:	041b      	lsls	r3, r3, #16
 80237a4:	4619      	mov	r1, r3
 80237a6:	4610      	mov	r0, r2
 80237a8:	f001 fffa 	bl	80257a0 <SDMMC_CmdSendStatus>
 80237ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80237ae:	68fb      	ldr	r3, [r7, #12]
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d001      	beq.n	80237b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80237b4:	68fb      	ldr	r3, [r7, #12]
 80237b6:	e009      	b.n	80237cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	681b      	ldr	r3, [r3, #0]
 80237bc:	2100      	movs	r1, #0
 80237be:	4618      	mov	r0, r3
 80237c0:	f001 fd79 	bl	80252b6 <SDMMC_GetResponse>
 80237c4:	4602      	mov	r2, r0
 80237c6:	683b      	ldr	r3, [r7, #0]
 80237c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80237ca:	2300      	movs	r3, #0
}
 80237cc:	4618      	mov	r0, r3
 80237ce:	3710      	adds	r7, #16
 80237d0:	46bd      	mov	sp, r7
 80237d2:	bd80      	pop	{r7, pc}

080237d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b086      	sub	sp, #24
 80237d8:	af00      	add	r7, sp, #0
 80237da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80237dc:	2300      	movs	r3, #0
 80237de:	60fb      	str	r3, [r7, #12]
 80237e0:	2300      	movs	r3, #0
 80237e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80237e4:	687b      	ldr	r3, [r7, #4]
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	2100      	movs	r1, #0
 80237ea:	4618      	mov	r0, r3
 80237ec:	f001 fd63 	bl	80252b6 <SDMMC_GetResponse>
 80237f0:	4603      	mov	r3, r0
 80237f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80237f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80237fa:	d102      	bne.n	8023802 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80237fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023800:	e02f      	b.n	8023862 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8023802:	f107 030c 	add.w	r3, r7, #12
 8023806:	4619      	mov	r1, r3
 8023808:	6878      	ldr	r0, [r7, #4]
 802380a:	f000 f879 	bl	8023900 <SD_FindSCR>
 802380e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023810:	697b      	ldr	r3, [r7, #20]
 8023812:	2b00      	cmp	r3, #0
 8023814:	d001      	beq.n	802381a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8023816:	697b      	ldr	r3, [r7, #20]
 8023818:	e023      	b.n	8023862 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 802381a:	693b      	ldr	r3, [r7, #16]
 802381c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8023820:	2b00      	cmp	r3, #0
 8023822:	d01c      	beq.n	802385e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	681a      	ldr	r2, [r3, #0]
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802382c:	041b      	lsls	r3, r3, #16
 802382e:	4619      	mov	r1, r3
 8023830:	4610      	mov	r0, r2
 8023832:	f001 fecc 	bl	80255ce <SDMMC_CmdAppCommand>
 8023836:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023838:	697b      	ldr	r3, [r7, #20]
 802383a:	2b00      	cmp	r3, #0
 802383c:	d001      	beq.n	8023842 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 802383e:	697b      	ldr	r3, [r7, #20]
 8023840:	e00f      	b.n	8023862 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	681b      	ldr	r3, [r3, #0]
 8023846:	2102      	movs	r1, #2
 8023848:	4618      	mov	r0, r3
 802384a:	f001 ff03 	bl	8025654 <SDMMC_CmdBusWidth>
 802384e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023850:	697b      	ldr	r3, [r7, #20]
 8023852:	2b00      	cmp	r3, #0
 8023854:	d001      	beq.n	802385a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8023856:	697b      	ldr	r3, [r7, #20]
 8023858:	e003      	b.n	8023862 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 802385a:	2300      	movs	r3, #0
 802385c:	e001      	b.n	8023862 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 802385e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8023862:	4618      	mov	r0, r3
 8023864:	3718      	adds	r7, #24
 8023866:	46bd      	mov	sp, r7
 8023868:	bd80      	pop	{r7, pc}

0802386a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 802386a:	b580      	push	{r7, lr}
 802386c:	b086      	sub	sp, #24
 802386e:	af00      	add	r7, sp, #0
 8023870:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8023872:	2300      	movs	r3, #0
 8023874:	60fb      	str	r3, [r7, #12]
 8023876:	2300      	movs	r3, #0
 8023878:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	681b      	ldr	r3, [r3, #0]
 802387e:	2100      	movs	r1, #0
 8023880:	4618      	mov	r0, r3
 8023882:	f001 fd18 	bl	80252b6 <SDMMC_GetResponse>
 8023886:	4603      	mov	r3, r0
 8023888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802388c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023890:	d102      	bne.n	8023898 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023896:	e02f      	b.n	80238f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8023898:	f107 030c 	add.w	r3, r7, #12
 802389c:	4619      	mov	r1, r3
 802389e:	6878      	ldr	r0, [r7, #4]
 80238a0:	f000 f82e 	bl	8023900 <SD_FindSCR>
 80238a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80238a6:	697b      	ldr	r3, [r7, #20]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d001      	beq.n	80238b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80238ac:	697b      	ldr	r3, [r7, #20]
 80238ae:	e023      	b.n	80238f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80238b0:	693b      	ldr	r3, [r7, #16]
 80238b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80238b6:	2b00      	cmp	r3, #0
 80238b8:	d01c      	beq.n	80238f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	681a      	ldr	r2, [r3, #0]
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80238c2:	041b      	lsls	r3, r3, #16
 80238c4:	4619      	mov	r1, r3
 80238c6:	4610      	mov	r0, r2
 80238c8:	f001 fe81 	bl	80255ce <SDMMC_CmdAppCommand>
 80238cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80238ce:	697b      	ldr	r3, [r7, #20]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d001      	beq.n	80238d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80238d4:	697b      	ldr	r3, [r7, #20]
 80238d6:	e00f      	b.n	80238f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80238d8:	687b      	ldr	r3, [r7, #4]
 80238da:	681b      	ldr	r3, [r3, #0]
 80238dc:	2100      	movs	r1, #0
 80238de:	4618      	mov	r0, r3
 80238e0:	f001 feb8 	bl	8025654 <SDMMC_CmdBusWidth>
 80238e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80238e6:	697b      	ldr	r3, [r7, #20]
 80238e8:	2b00      	cmp	r3, #0
 80238ea:	d001      	beq.n	80238f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80238ec:	697b      	ldr	r3, [r7, #20]
 80238ee:	e003      	b.n	80238f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80238f0:	2300      	movs	r3, #0
 80238f2:	e001      	b.n	80238f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80238f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80238f8:	4618      	mov	r0, r3
 80238fa:	3718      	adds	r7, #24
 80238fc:	46bd      	mov	sp, r7
 80238fe:	bd80      	pop	{r7, pc}

08023900 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8023900:	b580      	push	{r7, lr}
 8023902:	b08e      	sub	sp, #56	@ 0x38
 8023904:	af00      	add	r7, sp, #0
 8023906:	6078      	str	r0, [r7, #4]
 8023908:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 802390a:	f7f8 f8ff 	bl	801bb0c <HAL_GetTick>
 802390e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8023910:	2300      	movs	r3, #0
 8023912:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8023914:	2300      	movs	r3, #0
 8023916:	60bb      	str	r3, [r7, #8]
 8023918:	2300      	movs	r3, #0
 802391a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 802391c:	683b      	ldr	r3, [r7, #0]
 802391e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	2108      	movs	r1, #8
 8023926:	4618      	mov	r0, r3
 8023928:	f001 fd04 	bl	8025334 <SDMMC_CmdBlockLength>
 802392c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 802392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023930:	2b00      	cmp	r3, #0
 8023932:	d001      	beq.n	8023938 <SD_FindSCR+0x38>
  {
    return errorstate;
 8023934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023936:	e0ad      	b.n	8023a94 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	681a      	ldr	r2, [r3, #0]
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023940:	041b      	lsls	r3, r3, #16
 8023942:	4619      	mov	r1, r3
 8023944:	4610      	mov	r0, r2
 8023946:	f001 fe42 	bl	80255ce <SDMMC_CmdAppCommand>
 802394a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 802394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802394e:	2b00      	cmp	r3, #0
 8023950:	d001      	beq.n	8023956 <SD_FindSCR+0x56>
  {
    return errorstate;
 8023952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023954:	e09e      	b.n	8023a94 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8023956:	f04f 33ff 	mov.w	r3, #4294967295
 802395a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 802395c:	2308      	movs	r3, #8
 802395e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8023960:	2330      	movs	r3, #48	@ 0x30
 8023962:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8023964:	2302      	movs	r3, #2
 8023966:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8023968:	2300      	movs	r3, #0
 802396a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 802396c:	2301      	movs	r3, #1
 802396e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	f107 0210 	add.w	r2, r7, #16
 8023978:	4611      	mov	r1, r2
 802397a:	4618      	mov	r0, r3
 802397c:	f001 fcae 	bl	80252dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	4618      	mov	r0, r3
 8023986:	f001 fe88 	bl	802569a <SDMMC_CmdSendSCR>
 802398a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 802398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802398e:	2b00      	cmp	r3, #0
 8023990:	d027      	beq.n	80239e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8023992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023994:	e07e      	b.n	8023a94 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802399c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d113      	bne.n	80239cc <SD_FindSCR+0xcc>
 80239a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	d110      	bne.n	80239cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	4618      	mov	r0, r3
 80239b0:	f001 fc0c 	bl	80251cc <SDMMC_ReadFIFO>
 80239b4:	4603      	mov	r3, r0
 80239b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	4618      	mov	r0, r3
 80239be:	f001 fc05 	bl	80251cc <SDMMC_ReadFIFO>
 80239c2:	4603      	mov	r3, r0
 80239c4:	60fb      	str	r3, [r7, #12]
      index++;
 80239c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80239c8:	3301      	adds	r3, #1
 80239ca:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80239cc:	f7f8 f89e 	bl	801bb0c <HAL_GetTick>
 80239d0:	4602      	mov	r2, r0
 80239d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80239d4:	1ad3      	subs	r3, r2, r3
 80239d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239da:	d102      	bne.n	80239e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80239dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80239e0:	e058      	b.n	8023a94 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80239e8:	f240 532a 	movw	r3, #1322	@ 0x52a
 80239ec:	4013      	ands	r3, r2
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	d0d1      	beq.n	8023996 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80239f8:	f003 0308 	and.w	r3, r3, #8
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	d005      	beq.n	8023a0c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	2208      	movs	r2, #8
 8023a06:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023a08:	2308      	movs	r3, #8
 8023a0a:	e043      	b.n	8023a94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	681b      	ldr	r3, [r3, #0]
 8023a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023a12:	f003 0302 	and.w	r3, r3, #2
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d005      	beq.n	8023a26 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	681b      	ldr	r3, [r3, #0]
 8023a1e:	2202      	movs	r2, #2
 8023a20:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023a22:	2302      	movs	r3, #2
 8023a24:	e036      	b.n	8023a94 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	681b      	ldr	r3, [r3, #0]
 8023a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023a2c:	f003 0320 	and.w	r3, r3, #32
 8023a30:	2b00      	cmp	r3, #0
 8023a32:	d005      	beq.n	8023a40 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	2220      	movs	r2, #32
 8023a3a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8023a3c:	2320      	movs	r3, #32
 8023a3e:	e029      	b.n	8023a94 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	4a15      	ldr	r2, [pc, #84]	@ (8023a9c <SD_FindSCR+0x19c>)
 8023a46:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023a48:	68fb      	ldr	r3, [r7, #12]
 8023a4a:	061a      	lsls	r2, r3, #24
 8023a4c:	68fb      	ldr	r3, [r7, #12]
 8023a4e:	021b      	lsls	r3, r3, #8
 8023a50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023a54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023a56:	68fb      	ldr	r3, [r7, #12]
 8023a58:	0a1b      	lsrs	r3, r3, #8
 8023a5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023a5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023a60:	68fb      	ldr	r3, [r7, #12]
 8023a62:	0e1b      	lsrs	r3, r3, #24
 8023a64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a68:	601a      	str	r2, [r3, #0]
    scr++;
 8023a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a6c:	3304      	adds	r3, #4
 8023a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023a70:	68bb      	ldr	r3, [r7, #8]
 8023a72:	061a      	lsls	r2, r3, #24
 8023a74:	68bb      	ldr	r3, [r7, #8]
 8023a76:	021b      	lsls	r3, r3, #8
 8023a78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023a7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023a7e:	68bb      	ldr	r3, [r7, #8]
 8023a80:	0a1b      	lsrs	r3, r3, #8
 8023a82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023a86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023a88:	68bb      	ldr	r3, [r7, #8]
 8023a8a:	0e1b      	lsrs	r3, r3, #24
 8023a8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023a90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8023a92:	2300      	movs	r3, #0
}
 8023a94:	4618      	mov	r0, r3
 8023a96:	3738      	adds	r7, #56	@ 0x38
 8023a98:	46bd      	mov	sp, r7
 8023a9a:	bd80      	pop	{r7, pc}
 8023a9c:	18000f3a 	.word	0x18000f3a

08023aa0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8023aa0:	b580      	push	{r7, lr}
 8023aa2:	b086      	sub	sp, #24
 8023aa4:	af00      	add	r7, sp, #0
 8023aa6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023aac:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023ab2:	2b1f      	cmp	r3, #31
 8023ab4:	d936      	bls.n	8023b24 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	617b      	str	r3, [r7, #20]
 8023aba:	e027      	b.n	8023b0c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	681b      	ldr	r3, [r3, #0]
 8023ac0:	4618      	mov	r0, r3
 8023ac2:	f001 fb83 	bl	80251cc <SDMMC_ReadFIFO>
 8023ac6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8023ac8:	68fb      	ldr	r3, [r7, #12]
 8023aca:	b2da      	uxtb	r2, r3
 8023acc:	693b      	ldr	r3, [r7, #16]
 8023ace:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023ad0:	693b      	ldr	r3, [r7, #16]
 8023ad2:	3301      	adds	r3, #1
 8023ad4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8023ad6:	68fb      	ldr	r3, [r7, #12]
 8023ad8:	0a1b      	lsrs	r3, r3, #8
 8023ada:	b2da      	uxtb	r2, r3
 8023adc:	693b      	ldr	r3, [r7, #16]
 8023ade:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023ae0:	693b      	ldr	r3, [r7, #16]
 8023ae2:	3301      	adds	r3, #1
 8023ae4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8023ae6:	68fb      	ldr	r3, [r7, #12]
 8023ae8:	0c1b      	lsrs	r3, r3, #16
 8023aea:	b2da      	uxtb	r2, r3
 8023aec:	693b      	ldr	r3, [r7, #16]
 8023aee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023af0:	693b      	ldr	r3, [r7, #16]
 8023af2:	3301      	adds	r3, #1
 8023af4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8023af6:	68fb      	ldr	r3, [r7, #12]
 8023af8:	0e1b      	lsrs	r3, r3, #24
 8023afa:	b2da      	uxtb	r2, r3
 8023afc:	693b      	ldr	r3, [r7, #16]
 8023afe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023b00:	693b      	ldr	r3, [r7, #16]
 8023b02:	3301      	adds	r3, #1
 8023b04:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8023b06:	697b      	ldr	r3, [r7, #20]
 8023b08:	3301      	adds	r3, #1
 8023b0a:	617b      	str	r3, [r7, #20]
 8023b0c:	697b      	ldr	r3, [r7, #20]
 8023b0e:	2b07      	cmp	r3, #7
 8023b10:	d9d4      	bls.n	8023abc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	693a      	ldr	r2, [r7, #16]
 8023b16:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8023b18:	687b      	ldr	r3, [r7, #4]
 8023b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023b1c:	f1a3 0220 	sub.w	r2, r3, #32
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8023b24:	bf00      	nop
 8023b26:	3718      	adds	r7, #24
 8023b28:	46bd      	mov	sp, r7
 8023b2a:	bd80      	pop	{r7, pc}

08023b2c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8023b2c:	b580      	push	{r7, lr}
 8023b2e:	b086      	sub	sp, #24
 8023b30:	af00      	add	r7, sp, #0
 8023b32:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	69db      	ldr	r3, [r3, #28]
 8023b38:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	6a1b      	ldr	r3, [r3, #32]
 8023b3e:	2b1f      	cmp	r3, #31
 8023b40:	d93a      	bls.n	8023bb8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8023b42:	2300      	movs	r3, #0
 8023b44:	617b      	str	r3, [r7, #20]
 8023b46:	e02b      	b.n	8023ba0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8023b48:	693b      	ldr	r3, [r7, #16]
 8023b4a:	781b      	ldrb	r3, [r3, #0]
 8023b4c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023b4e:	693b      	ldr	r3, [r7, #16]
 8023b50:	3301      	adds	r3, #1
 8023b52:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8023b54:	693b      	ldr	r3, [r7, #16]
 8023b56:	781b      	ldrb	r3, [r3, #0]
 8023b58:	021a      	lsls	r2, r3, #8
 8023b5a:	68fb      	ldr	r3, [r7, #12]
 8023b5c:	4313      	orrs	r3, r2
 8023b5e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023b60:	693b      	ldr	r3, [r7, #16]
 8023b62:	3301      	adds	r3, #1
 8023b64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8023b66:	693b      	ldr	r3, [r7, #16]
 8023b68:	781b      	ldrb	r3, [r3, #0]
 8023b6a:	041a      	lsls	r2, r3, #16
 8023b6c:	68fb      	ldr	r3, [r7, #12]
 8023b6e:	4313      	orrs	r3, r2
 8023b70:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023b72:	693b      	ldr	r3, [r7, #16]
 8023b74:	3301      	adds	r3, #1
 8023b76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8023b78:	693b      	ldr	r3, [r7, #16]
 8023b7a:	781b      	ldrb	r3, [r3, #0]
 8023b7c:	061a      	lsls	r2, r3, #24
 8023b7e:	68fb      	ldr	r3, [r7, #12]
 8023b80:	4313      	orrs	r3, r2
 8023b82:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023b84:	693b      	ldr	r3, [r7, #16]
 8023b86:	3301      	adds	r3, #1
 8023b88:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	f107 020c 	add.w	r2, r7, #12
 8023b92:	4611      	mov	r1, r2
 8023b94:	4618      	mov	r0, r3
 8023b96:	f001 fb26 	bl	80251e6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8023b9a:	697b      	ldr	r3, [r7, #20]
 8023b9c:	3301      	adds	r3, #1
 8023b9e:	617b      	str	r3, [r7, #20]
 8023ba0:	697b      	ldr	r3, [r7, #20]
 8023ba2:	2b07      	cmp	r3, #7
 8023ba4:	d9d0      	bls.n	8023b48 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	693a      	ldr	r2, [r7, #16]
 8023baa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	6a1b      	ldr	r3, [r3, #32]
 8023bb0:	f1a3 0220 	sub.w	r2, r3, #32
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	621a      	str	r2, [r3, #32]
  }
}
 8023bb8:	bf00      	nop
 8023bba:	3718      	adds	r7, #24
 8023bbc:	46bd      	mov	sp, r7
 8023bbe:	bd80      	pop	{r7, pc}

08023bc0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023bc0:	b480      	push	{r7}
 8023bc2:	b083      	sub	sp, #12
 8023bc4:	af00      	add	r7, sp, #0
 8023bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023bc8:	bf00      	nop
 8023bca:	370c      	adds	r7, #12
 8023bcc:	46bd      	mov	sp, r7
 8023bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bd2:	4770      	bx	lr

08023bd4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023bd4:	b480      	push	{r7}
 8023bd6:	b083      	sub	sp, #12
 8023bd8:	af00      	add	r7, sp, #0
 8023bda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023bdc:	bf00      	nop
 8023bde:	370c      	adds	r7, #12
 8023be0:	46bd      	mov	sp, r7
 8023be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023be6:	4770      	bx	lr

08023be8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023be8:	b480      	push	{r7}
 8023bea:	b083      	sub	sp, #12
 8023bec:	af00      	add	r7, sp, #0
 8023bee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023bf0:	bf00      	nop
 8023bf2:	370c      	adds	r7, #12
 8023bf4:	46bd      	mov	sp, r7
 8023bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bfa:	4770      	bx	lr

08023bfc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023bfc:	b480      	push	{r7}
 8023bfe:	b083      	sub	sp, #12
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023c04:	bf00      	nop
 8023c06:	370c      	adds	r7, #12
 8023c08:	46bd      	mov	sp, r7
 8023c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c0e:	4770      	bx	lr

08023c10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8023c10:	b580      	push	{r7, lr}
 8023c12:	b084      	sub	sp, #16
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	2b00      	cmp	r3, #0
 8023c1c:	d101      	bne.n	8023c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8023c1e:	2301      	movs	r3, #1
 8023c20:	e10f      	b.n	8023e42 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	2200      	movs	r2, #0
 8023c26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	4a87      	ldr	r2, [pc, #540]	@ (8023e4c <HAL_SPI_Init+0x23c>)
 8023c2e:	4293      	cmp	r3, r2
 8023c30:	d00f      	beq.n	8023c52 <HAL_SPI_Init+0x42>
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	4a86      	ldr	r2, [pc, #536]	@ (8023e50 <HAL_SPI_Init+0x240>)
 8023c38:	4293      	cmp	r3, r2
 8023c3a:	d00a      	beq.n	8023c52 <HAL_SPI_Init+0x42>
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	4a84      	ldr	r2, [pc, #528]	@ (8023e54 <HAL_SPI_Init+0x244>)
 8023c42:	4293      	cmp	r3, r2
 8023c44:	d005      	beq.n	8023c52 <HAL_SPI_Init+0x42>
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	68db      	ldr	r3, [r3, #12]
 8023c4a:	2b0f      	cmp	r3, #15
 8023c4c:	d901      	bls.n	8023c52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8023c4e:	2301      	movs	r3, #1
 8023c50:	e0f7      	b.n	8023e42 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8023c52:	6878      	ldr	r0, [r7, #4]
 8023c54:	f000 f90a 	bl	8023e6c <SPI_GetPacketSize>
 8023c58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	681b      	ldr	r3, [r3, #0]
 8023c5e:	4a7b      	ldr	r2, [pc, #492]	@ (8023e4c <HAL_SPI_Init+0x23c>)
 8023c60:	4293      	cmp	r3, r2
 8023c62:	d00c      	beq.n	8023c7e <HAL_SPI_Init+0x6e>
 8023c64:	687b      	ldr	r3, [r7, #4]
 8023c66:	681b      	ldr	r3, [r3, #0]
 8023c68:	4a79      	ldr	r2, [pc, #484]	@ (8023e50 <HAL_SPI_Init+0x240>)
 8023c6a:	4293      	cmp	r3, r2
 8023c6c:	d007      	beq.n	8023c7e <HAL_SPI_Init+0x6e>
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	4a78      	ldr	r2, [pc, #480]	@ (8023e54 <HAL_SPI_Init+0x244>)
 8023c74:	4293      	cmp	r3, r2
 8023c76:	d002      	beq.n	8023c7e <HAL_SPI_Init+0x6e>
 8023c78:	68fb      	ldr	r3, [r7, #12]
 8023c7a:	2b08      	cmp	r3, #8
 8023c7c:	d811      	bhi.n	8023ca2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023c82:	4a72      	ldr	r2, [pc, #456]	@ (8023e4c <HAL_SPI_Init+0x23c>)
 8023c84:	4293      	cmp	r3, r2
 8023c86:	d009      	beq.n	8023c9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023c88:	687b      	ldr	r3, [r7, #4]
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	4a70      	ldr	r2, [pc, #448]	@ (8023e50 <HAL_SPI_Init+0x240>)
 8023c8e:	4293      	cmp	r3, r2
 8023c90:	d004      	beq.n	8023c9c <HAL_SPI_Init+0x8c>
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	681b      	ldr	r3, [r3, #0]
 8023c96:	4a6f      	ldr	r2, [pc, #444]	@ (8023e54 <HAL_SPI_Init+0x244>)
 8023c98:	4293      	cmp	r3, r2
 8023c9a:	d104      	bne.n	8023ca6 <HAL_SPI_Init+0x96>
 8023c9c:	68fb      	ldr	r3, [r7, #12]
 8023c9e:	2b10      	cmp	r3, #16
 8023ca0:	d901      	bls.n	8023ca6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8023ca2:	2301      	movs	r3, #1
 8023ca4:	e0cd      	b.n	8023e42 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8023cac:	b2db      	uxtb	r3, r3
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	d106      	bne.n	8023cc0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	2200      	movs	r2, #0
 8023cb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8023cba:	6878      	ldr	r0, [r7, #4]
 8023cbc:	f000 f8cc 	bl	8023e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	2202      	movs	r2, #2
 8023cc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8023cc8:	687b      	ldr	r3, [r7, #4]
 8023cca:	681b      	ldr	r3, [r3, #0]
 8023ccc:	681a      	ldr	r2, [r3, #0]
 8023cce:	687b      	ldr	r3, [r7, #4]
 8023cd0:	681b      	ldr	r3, [r3, #0]
 8023cd2:	f022 0201 	bic.w	r2, r2, #1
 8023cd6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8023cd8:	687b      	ldr	r3, [r7, #4]
 8023cda:	681b      	ldr	r3, [r3, #0]
 8023cdc:	689b      	ldr	r3, [r3, #8]
 8023cde:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8023ce2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	699b      	ldr	r3, [r3, #24]
 8023ce8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8023cec:	d119      	bne.n	8023d22 <HAL_SPI_Init+0x112>
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	685b      	ldr	r3, [r3, #4]
 8023cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8023cf6:	d103      	bne.n	8023d00 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023cf8:	687b      	ldr	r3, [r7, #4]
 8023cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	d008      	beq.n	8023d12 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d10c      	bne.n	8023d22 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023d0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023d10:	d107      	bne.n	8023d22 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8023d12:	687b      	ldr	r3, [r7, #4]
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	681a      	ldr	r2, [r3, #0]
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8023d20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	685b      	ldr	r3, [r3, #4]
 8023d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023d2a:	2b00      	cmp	r3, #0
 8023d2c:	d00f      	beq.n	8023d4e <HAL_SPI_Init+0x13e>
 8023d2e:	687b      	ldr	r3, [r7, #4]
 8023d30:	68db      	ldr	r3, [r3, #12]
 8023d32:	2b06      	cmp	r3, #6
 8023d34:	d90b      	bls.n	8023d4e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	681b      	ldr	r3, [r3, #0]
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	681b      	ldr	r3, [r3, #0]
 8023d48:	430a      	orrs	r2, r1
 8023d4a:	601a      	str	r2, [r3, #0]
 8023d4c:	e007      	b.n	8023d5e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	681b      	ldr	r3, [r3, #0]
 8023d52:	681a      	ldr	r2, [r3, #0]
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	681b      	ldr	r3, [r3, #0]
 8023d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8023d5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	69da      	ldr	r2, [r3, #28]
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d66:	431a      	orrs	r2, r3
 8023d68:	68bb      	ldr	r3, [r7, #8]
 8023d6a:	431a      	orrs	r2, r3
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023d70:	ea42 0103 	orr.w	r1, r2, r3
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	68da      	ldr	r2, [r3, #12]
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	681b      	ldr	r3, [r3, #0]
 8023d7c:	430a      	orrs	r2, r1
 8023d7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8023d80:	687b      	ldr	r3, [r7, #4]
 8023d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023d88:	431a      	orrs	r2, r3
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023d8e:	431a      	orrs	r2, r3
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	699b      	ldr	r3, [r3, #24]
 8023d94:	431a      	orrs	r2, r3
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	691b      	ldr	r3, [r3, #16]
 8023d9a:	431a      	orrs	r2, r3
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	695b      	ldr	r3, [r3, #20]
 8023da0:	431a      	orrs	r2, r3
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	6a1b      	ldr	r3, [r3, #32]
 8023da6:	431a      	orrs	r2, r3
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	685b      	ldr	r3, [r3, #4]
 8023dac:	431a      	orrs	r2, r3
 8023dae:	687b      	ldr	r3, [r7, #4]
 8023db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023db2:	431a      	orrs	r2, r3
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	689b      	ldr	r3, [r3, #8]
 8023db8:	431a      	orrs	r2, r3
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8023dbe:	ea42 0103 	orr.w	r1, r2, r3
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023dc6:	687b      	ldr	r3, [r7, #4]
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	430a      	orrs	r2, r1
 8023dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8023dce:	687b      	ldr	r3, [r7, #4]
 8023dd0:	685b      	ldr	r3, [r3, #4]
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	d113      	bne.n	8023dfe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	689b      	ldr	r3, [r3, #8]
 8023ddc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8023de0:	687b      	ldr	r3, [r7, #4]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8023de8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	689b      	ldr	r3, [r3, #8]
 8023df0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023dfc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	681b      	ldr	r3, [r3, #0]
 8023e08:	f022 0201 	bic.w	r2, r2, #1
 8023e0c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	685b      	ldr	r3, [r3, #4]
 8023e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023e16:	2b00      	cmp	r3, #0
 8023e18:	d00a      	beq.n	8023e30 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8023e1a:	687b      	ldr	r3, [r7, #4]
 8023e1c:	681b      	ldr	r3, [r3, #0]
 8023e1e:	68db      	ldr	r3, [r3, #12]
 8023e20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	430a      	orrs	r2, r1
 8023e2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	2200      	movs	r2, #0
 8023e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	2201      	movs	r2, #1
 8023e3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8023e40:	2300      	movs	r3, #0
}
 8023e42:	4618      	mov	r0, r3
 8023e44:	3710      	adds	r7, #16
 8023e46:	46bd      	mov	sp, r7
 8023e48:	bd80      	pop	{r7, pc}
 8023e4a:	bf00      	nop
 8023e4c:	40013000 	.word	0x40013000
 8023e50:	40003800 	.word	0x40003800
 8023e54:	40003c00 	.word	0x40003c00

08023e58 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8023e58:	b480      	push	{r7}
 8023e5a:	b083      	sub	sp, #12
 8023e5c:	af00      	add	r7, sp, #0
 8023e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8023e60:	bf00      	nop
 8023e62:	370c      	adds	r7, #12
 8023e64:	46bd      	mov	sp, r7
 8023e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e6a:	4770      	bx	lr

08023e6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8023e6c:	b480      	push	{r7}
 8023e6e:	b085      	sub	sp, #20
 8023e70:	af00      	add	r7, sp, #0
 8023e72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023e78:	095b      	lsrs	r3, r3, #5
 8023e7a:	3301      	adds	r3, #1
 8023e7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8023e7e:	687b      	ldr	r3, [r7, #4]
 8023e80:	68db      	ldr	r3, [r3, #12]
 8023e82:	3301      	adds	r3, #1
 8023e84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8023e86:	68bb      	ldr	r3, [r7, #8]
 8023e88:	3307      	adds	r3, #7
 8023e8a:	08db      	lsrs	r3, r3, #3
 8023e8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8023e8e:	68bb      	ldr	r3, [r7, #8]
 8023e90:	68fa      	ldr	r2, [r7, #12]
 8023e92:	fb02 f303 	mul.w	r3, r2, r3
}
 8023e96:	4618      	mov	r0, r3
 8023e98:	3714      	adds	r7, #20
 8023e9a:	46bd      	mov	sp, r7
 8023e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ea0:	4770      	bx	lr

08023ea2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023ea2:	b580      	push	{r7, lr}
 8023ea4:	b082      	sub	sp, #8
 8023ea6:	af00      	add	r7, sp, #0
 8023ea8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023eaa:	687b      	ldr	r3, [r7, #4]
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	d101      	bne.n	8023eb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023eb0:	2301      	movs	r3, #1
 8023eb2:	e042      	b.n	8023f3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023eba:	2b00      	cmp	r3, #0
 8023ebc:	d106      	bne.n	8023ecc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	2200      	movs	r2, #0
 8023ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8023ec6:	6878      	ldr	r0, [r7, #4]
 8023ec8:	f7ea fecc 	bl	800ec64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	2224      	movs	r2, #36	@ 0x24
 8023ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	681b      	ldr	r3, [r3, #0]
 8023ed8:	681a      	ldr	r2, [r3, #0]
 8023eda:	687b      	ldr	r3, [r7, #4]
 8023edc:	681b      	ldr	r3, [r3, #0]
 8023ede:	f022 0201 	bic.w	r2, r2, #1
 8023ee2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	d002      	beq.n	8023ef2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8023eec:	6878      	ldr	r0, [r7, #4]
 8023eee:	f000 fe1f 	bl	8024b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8023ef2:	6878      	ldr	r0, [r7, #4]
 8023ef4:	f000 f8b4 	bl	8024060 <UART_SetConfig>
 8023ef8:	4603      	mov	r3, r0
 8023efa:	2b01      	cmp	r3, #1
 8023efc:	d101      	bne.n	8023f02 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8023efe:	2301      	movs	r3, #1
 8023f00:	e01b      	b.n	8023f3a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	685a      	ldr	r2, [r3, #4]
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8023f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	681b      	ldr	r3, [r3, #0]
 8023f16:	689a      	ldr	r2, [r3, #8]
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	681b      	ldr	r3, [r3, #0]
 8023f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8023f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8023f22:	687b      	ldr	r3, [r7, #4]
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	681a      	ldr	r2, [r3, #0]
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	681b      	ldr	r3, [r3, #0]
 8023f2c:	f042 0201 	orr.w	r2, r2, #1
 8023f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8023f32:	6878      	ldr	r0, [r7, #4]
 8023f34:	f000 fe9e 	bl	8024c74 <UART_CheckIdleState>
 8023f38:	4603      	mov	r3, r0
}
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	3708      	adds	r7, #8
 8023f3e:	46bd      	mov	sp, r7
 8023f40:	bd80      	pop	{r7, pc}

08023f42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023f42:	b580      	push	{r7, lr}
 8023f44:	b08a      	sub	sp, #40	@ 0x28
 8023f46:	af02      	add	r7, sp, #8
 8023f48:	60f8      	str	r0, [r7, #12]
 8023f4a:	60b9      	str	r1, [r7, #8]
 8023f4c:	603b      	str	r3, [r7, #0]
 8023f4e:	4613      	mov	r3, r2
 8023f50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8023f52:	68fb      	ldr	r3, [r7, #12]
 8023f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023f58:	2b20      	cmp	r3, #32
 8023f5a:	d17b      	bne.n	8024054 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8023f5c:	68bb      	ldr	r3, [r7, #8]
 8023f5e:	2b00      	cmp	r3, #0
 8023f60:	d002      	beq.n	8023f68 <HAL_UART_Transmit+0x26>
 8023f62:	88fb      	ldrh	r3, [r7, #6]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d101      	bne.n	8023f6c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8023f68:	2301      	movs	r3, #1
 8023f6a:	e074      	b.n	8024056 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	2200      	movs	r2, #0
 8023f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8023f74:	68fb      	ldr	r3, [r7, #12]
 8023f76:	2221      	movs	r2, #33	@ 0x21
 8023f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8023f7c:	f7f7 fdc6 	bl	801bb0c <HAL_GetTick>
 8023f80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8023f82:	68fb      	ldr	r3, [r7, #12]
 8023f84:	88fa      	ldrh	r2, [r7, #6]
 8023f86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8023f8a:	68fb      	ldr	r3, [r7, #12]
 8023f8c:	88fa      	ldrh	r2, [r7, #6]
 8023f8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023f92:	68fb      	ldr	r3, [r7, #12]
 8023f94:	689b      	ldr	r3, [r3, #8]
 8023f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023f9a:	d108      	bne.n	8023fae <HAL_UART_Transmit+0x6c>
 8023f9c:	68fb      	ldr	r3, [r7, #12]
 8023f9e:	691b      	ldr	r3, [r3, #16]
 8023fa0:	2b00      	cmp	r3, #0
 8023fa2:	d104      	bne.n	8023fae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8023fa4:	2300      	movs	r3, #0
 8023fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8023fa8:	68bb      	ldr	r3, [r7, #8]
 8023faa:	61bb      	str	r3, [r7, #24]
 8023fac:	e003      	b.n	8023fb6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8023fae:	68bb      	ldr	r3, [r7, #8]
 8023fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023fb2:	2300      	movs	r3, #0
 8023fb4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8023fb6:	e030      	b.n	802401a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8023fb8:	683b      	ldr	r3, [r7, #0]
 8023fba:	9300      	str	r3, [sp, #0]
 8023fbc:	697b      	ldr	r3, [r7, #20]
 8023fbe:	2200      	movs	r2, #0
 8023fc0:	2180      	movs	r1, #128	@ 0x80
 8023fc2:	68f8      	ldr	r0, [r7, #12]
 8023fc4:	f000 ff00 	bl	8024dc8 <UART_WaitOnFlagUntilTimeout>
 8023fc8:	4603      	mov	r3, r0
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d005      	beq.n	8023fda <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8023fce:	68fb      	ldr	r3, [r7, #12]
 8023fd0:	2220      	movs	r2, #32
 8023fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8023fd6:	2303      	movs	r3, #3
 8023fd8:	e03d      	b.n	8024056 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8023fda:	69fb      	ldr	r3, [r7, #28]
 8023fdc:	2b00      	cmp	r3, #0
 8023fde:	d10b      	bne.n	8023ff8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8023fe0:	69bb      	ldr	r3, [r7, #24]
 8023fe2:	881b      	ldrh	r3, [r3, #0]
 8023fe4:	461a      	mov	r2, r3
 8023fe6:	68fb      	ldr	r3, [r7, #12]
 8023fe8:	681b      	ldr	r3, [r3, #0]
 8023fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023fee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8023ff0:	69bb      	ldr	r3, [r7, #24]
 8023ff2:	3302      	adds	r3, #2
 8023ff4:	61bb      	str	r3, [r7, #24]
 8023ff6:	e007      	b.n	8024008 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8023ff8:	69fb      	ldr	r3, [r7, #28]
 8023ffa:	781a      	ldrb	r2, [r3, #0]
 8023ffc:	68fb      	ldr	r3, [r7, #12]
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8024002:	69fb      	ldr	r3, [r7, #28]
 8024004:	3301      	adds	r3, #1
 8024006:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8024008:	68fb      	ldr	r3, [r7, #12]
 802400a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 802400e:	b29b      	uxth	r3, r3
 8024010:	3b01      	subs	r3, #1
 8024012:	b29a      	uxth	r2, r3
 8024014:	68fb      	ldr	r3, [r7, #12]
 8024016:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 802401a:	68fb      	ldr	r3, [r7, #12]
 802401c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8024020:	b29b      	uxth	r3, r3
 8024022:	2b00      	cmp	r3, #0
 8024024:	d1c8      	bne.n	8023fb8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8024026:	683b      	ldr	r3, [r7, #0]
 8024028:	9300      	str	r3, [sp, #0]
 802402a:	697b      	ldr	r3, [r7, #20]
 802402c:	2200      	movs	r2, #0
 802402e:	2140      	movs	r1, #64	@ 0x40
 8024030:	68f8      	ldr	r0, [r7, #12]
 8024032:	f000 fec9 	bl	8024dc8 <UART_WaitOnFlagUntilTimeout>
 8024036:	4603      	mov	r3, r0
 8024038:	2b00      	cmp	r3, #0
 802403a:	d005      	beq.n	8024048 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 802403c:	68fb      	ldr	r3, [r7, #12]
 802403e:	2220      	movs	r2, #32
 8024040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8024044:	2303      	movs	r3, #3
 8024046:	e006      	b.n	8024056 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8024048:	68fb      	ldr	r3, [r7, #12]
 802404a:	2220      	movs	r2, #32
 802404c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8024050:	2300      	movs	r3, #0
 8024052:	e000      	b.n	8024056 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8024054:	2302      	movs	r3, #2
  }
}
 8024056:	4618      	mov	r0, r3
 8024058:	3720      	adds	r7, #32
 802405a:	46bd      	mov	sp, r7
 802405c:	bd80      	pop	{r7, pc}
	...

08024060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8024060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024064:	b092      	sub	sp, #72	@ 0x48
 8024066:	af00      	add	r7, sp, #0
 8024068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802406a:	2300      	movs	r3, #0
 802406c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024070:	697b      	ldr	r3, [r7, #20]
 8024072:	689a      	ldr	r2, [r3, #8]
 8024074:	697b      	ldr	r3, [r7, #20]
 8024076:	691b      	ldr	r3, [r3, #16]
 8024078:	431a      	orrs	r2, r3
 802407a:	697b      	ldr	r3, [r7, #20]
 802407c:	695b      	ldr	r3, [r3, #20]
 802407e:	431a      	orrs	r2, r3
 8024080:	697b      	ldr	r3, [r7, #20]
 8024082:	69db      	ldr	r3, [r3, #28]
 8024084:	4313      	orrs	r3, r2
 8024086:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024088:	697b      	ldr	r3, [r7, #20]
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	681a      	ldr	r2, [r3, #0]
 802408e:	4bbe      	ldr	r3, [pc, #760]	@ (8024388 <UART_SetConfig+0x328>)
 8024090:	4013      	ands	r3, r2
 8024092:	697a      	ldr	r2, [r7, #20]
 8024094:	6812      	ldr	r2, [r2, #0]
 8024096:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8024098:	430b      	orrs	r3, r1
 802409a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802409c:	697b      	ldr	r3, [r7, #20]
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	685b      	ldr	r3, [r3, #4]
 80240a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80240a6:	697b      	ldr	r3, [r7, #20]
 80240a8:	68da      	ldr	r2, [r3, #12]
 80240aa:	697b      	ldr	r3, [r7, #20]
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	430a      	orrs	r2, r1
 80240b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80240b2:	697b      	ldr	r3, [r7, #20]
 80240b4:	699b      	ldr	r3, [r3, #24]
 80240b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80240b8:	697b      	ldr	r3, [r7, #20]
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	4ab3      	ldr	r2, [pc, #716]	@ (802438c <UART_SetConfig+0x32c>)
 80240be:	4293      	cmp	r3, r2
 80240c0:	d004      	beq.n	80240cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80240c2:	697b      	ldr	r3, [r7, #20]
 80240c4:	6a1b      	ldr	r3, [r3, #32]
 80240c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80240c8:	4313      	orrs	r3, r2
 80240ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80240cc:	697b      	ldr	r3, [r7, #20]
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	689a      	ldr	r2, [r3, #8]
 80240d2:	4baf      	ldr	r3, [pc, #700]	@ (8024390 <UART_SetConfig+0x330>)
 80240d4:	4013      	ands	r3, r2
 80240d6:	697a      	ldr	r2, [r7, #20]
 80240d8:	6812      	ldr	r2, [r2, #0]
 80240da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80240dc:	430b      	orrs	r3, r1
 80240de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80240e0:	697b      	ldr	r3, [r7, #20]
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80240e6:	f023 010f 	bic.w	r1, r3, #15
 80240ea:	697b      	ldr	r3, [r7, #20]
 80240ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80240ee:	697b      	ldr	r3, [r7, #20]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	430a      	orrs	r2, r1
 80240f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80240f6:	697b      	ldr	r3, [r7, #20]
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	4aa6      	ldr	r2, [pc, #664]	@ (8024394 <UART_SetConfig+0x334>)
 80240fc:	4293      	cmp	r3, r2
 80240fe:	d177      	bne.n	80241f0 <UART_SetConfig+0x190>
 8024100:	4ba5      	ldr	r3, [pc, #660]	@ (8024398 <UART_SetConfig+0x338>)
 8024102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8024108:	2b28      	cmp	r3, #40	@ 0x28
 802410a:	d86d      	bhi.n	80241e8 <UART_SetConfig+0x188>
 802410c:	a201      	add	r2, pc, #4	@ (adr r2, 8024114 <UART_SetConfig+0xb4>)
 802410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024112:	bf00      	nop
 8024114:	080241b9 	.word	0x080241b9
 8024118:	080241e9 	.word	0x080241e9
 802411c:	080241e9 	.word	0x080241e9
 8024120:	080241e9 	.word	0x080241e9
 8024124:	080241e9 	.word	0x080241e9
 8024128:	080241e9 	.word	0x080241e9
 802412c:	080241e9 	.word	0x080241e9
 8024130:	080241e9 	.word	0x080241e9
 8024134:	080241c1 	.word	0x080241c1
 8024138:	080241e9 	.word	0x080241e9
 802413c:	080241e9 	.word	0x080241e9
 8024140:	080241e9 	.word	0x080241e9
 8024144:	080241e9 	.word	0x080241e9
 8024148:	080241e9 	.word	0x080241e9
 802414c:	080241e9 	.word	0x080241e9
 8024150:	080241e9 	.word	0x080241e9
 8024154:	080241c9 	.word	0x080241c9
 8024158:	080241e9 	.word	0x080241e9
 802415c:	080241e9 	.word	0x080241e9
 8024160:	080241e9 	.word	0x080241e9
 8024164:	080241e9 	.word	0x080241e9
 8024168:	080241e9 	.word	0x080241e9
 802416c:	080241e9 	.word	0x080241e9
 8024170:	080241e9 	.word	0x080241e9
 8024174:	080241d1 	.word	0x080241d1
 8024178:	080241e9 	.word	0x080241e9
 802417c:	080241e9 	.word	0x080241e9
 8024180:	080241e9 	.word	0x080241e9
 8024184:	080241e9 	.word	0x080241e9
 8024188:	080241e9 	.word	0x080241e9
 802418c:	080241e9 	.word	0x080241e9
 8024190:	080241e9 	.word	0x080241e9
 8024194:	080241d9 	.word	0x080241d9
 8024198:	080241e9 	.word	0x080241e9
 802419c:	080241e9 	.word	0x080241e9
 80241a0:	080241e9 	.word	0x080241e9
 80241a4:	080241e9 	.word	0x080241e9
 80241a8:	080241e9 	.word	0x080241e9
 80241ac:	080241e9 	.word	0x080241e9
 80241b0:	080241e9 	.word	0x080241e9
 80241b4:	080241e1 	.word	0x080241e1
 80241b8:	2301      	movs	r3, #1
 80241ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241be:	e222      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241c0:	2304      	movs	r3, #4
 80241c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241c6:	e21e      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241c8:	2308      	movs	r3, #8
 80241ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241ce:	e21a      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241d0:	2310      	movs	r3, #16
 80241d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241d6:	e216      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241d8:	2320      	movs	r3, #32
 80241da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241de:	e212      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241e0:	2340      	movs	r3, #64	@ 0x40
 80241e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241e6:	e20e      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241e8:	2380      	movs	r3, #128	@ 0x80
 80241ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80241ee:	e20a      	b.n	8024606 <UART_SetConfig+0x5a6>
 80241f0:	697b      	ldr	r3, [r7, #20]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	4a69      	ldr	r2, [pc, #420]	@ (802439c <UART_SetConfig+0x33c>)
 80241f6:	4293      	cmp	r3, r2
 80241f8:	d130      	bne.n	802425c <UART_SetConfig+0x1fc>
 80241fa:	4b67      	ldr	r3, [pc, #412]	@ (8024398 <UART_SetConfig+0x338>)
 80241fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80241fe:	f003 0307 	and.w	r3, r3, #7
 8024202:	2b05      	cmp	r3, #5
 8024204:	d826      	bhi.n	8024254 <UART_SetConfig+0x1f4>
 8024206:	a201      	add	r2, pc, #4	@ (adr r2, 802420c <UART_SetConfig+0x1ac>)
 8024208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802420c:	08024225 	.word	0x08024225
 8024210:	0802422d 	.word	0x0802422d
 8024214:	08024235 	.word	0x08024235
 8024218:	0802423d 	.word	0x0802423d
 802421c:	08024245 	.word	0x08024245
 8024220:	0802424d 	.word	0x0802424d
 8024224:	2300      	movs	r3, #0
 8024226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802422a:	e1ec      	b.n	8024606 <UART_SetConfig+0x5a6>
 802422c:	2304      	movs	r3, #4
 802422e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024232:	e1e8      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024234:	2308      	movs	r3, #8
 8024236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802423a:	e1e4      	b.n	8024606 <UART_SetConfig+0x5a6>
 802423c:	2310      	movs	r3, #16
 802423e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024242:	e1e0      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024244:	2320      	movs	r3, #32
 8024246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802424a:	e1dc      	b.n	8024606 <UART_SetConfig+0x5a6>
 802424c:	2340      	movs	r3, #64	@ 0x40
 802424e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024252:	e1d8      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024254:	2380      	movs	r3, #128	@ 0x80
 8024256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802425a:	e1d4      	b.n	8024606 <UART_SetConfig+0x5a6>
 802425c:	697b      	ldr	r3, [r7, #20]
 802425e:	681b      	ldr	r3, [r3, #0]
 8024260:	4a4f      	ldr	r2, [pc, #316]	@ (80243a0 <UART_SetConfig+0x340>)
 8024262:	4293      	cmp	r3, r2
 8024264:	d130      	bne.n	80242c8 <UART_SetConfig+0x268>
 8024266:	4b4c      	ldr	r3, [pc, #304]	@ (8024398 <UART_SetConfig+0x338>)
 8024268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802426a:	f003 0307 	and.w	r3, r3, #7
 802426e:	2b05      	cmp	r3, #5
 8024270:	d826      	bhi.n	80242c0 <UART_SetConfig+0x260>
 8024272:	a201      	add	r2, pc, #4	@ (adr r2, 8024278 <UART_SetConfig+0x218>)
 8024274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024278:	08024291 	.word	0x08024291
 802427c:	08024299 	.word	0x08024299
 8024280:	080242a1 	.word	0x080242a1
 8024284:	080242a9 	.word	0x080242a9
 8024288:	080242b1 	.word	0x080242b1
 802428c:	080242b9 	.word	0x080242b9
 8024290:	2300      	movs	r3, #0
 8024292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024296:	e1b6      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024298:	2304      	movs	r3, #4
 802429a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802429e:	e1b2      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242a0:	2308      	movs	r3, #8
 80242a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242a6:	e1ae      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242a8:	2310      	movs	r3, #16
 80242aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242ae:	e1aa      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242b0:	2320      	movs	r3, #32
 80242b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242b6:	e1a6      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242b8:	2340      	movs	r3, #64	@ 0x40
 80242ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242be:	e1a2      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242c0:	2380      	movs	r3, #128	@ 0x80
 80242c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242c6:	e19e      	b.n	8024606 <UART_SetConfig+0x5a6>
 80242c8:	697b      	ldr	r3, [r7, #20]
 80242ca:	681b      	ldr	r3, [r3, #0]
 80242cc:	4a35      	ldr	r2, [pc, #212]	@ (80243a4 <UART_SetConfig+0x344>)
 80242ce:	4293      	cmp	r3, r2
 80242d0:	d130      	bne.n	8024334 <UART_SetConfig+0x2d4>
 80242d2:	4b31      	ldr	r3, [pc, #196]	@ (8024398 <UART_SetConfig+0x338>)
 80242d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80242d6:	f003 0307 	and.w	r3, r3, #7
 80242da:	2b05      	cmp	r3, #5
 80242dc:	d826      	bhi.n	802432c <UART_SetConfig+0x2cc>
 80242de:	a201      	add	r2, pc, #4	@ (adr r2, 80242e4 <UART_SetConfig+0x284>)
 80242e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242e4:	080242fd 	.word	0x080242fd
 80242e8:	08024305 	.word	0x08024305
 80242ec:	0802430d 	.word	0x0802430d
 80242f0:	08024315 	.word	0x08024315
 80242f4:	0802431d 	.word	0x0802431d
 80242f8:	08024325 	.word	0x08024325
 80242fc:	2300      	movs	r3, #0
 80242fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024302:	e180      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024304:	2304      	movs	r3, #4
 8024306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802430a:	e17c      	b.n	8024606 <UART_SetConfig+0x5a6>
 802430c:	2308      	movs	r3, #8
 802430e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024312:	e178      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024314:	2310      	movs	r3, #16
 8024316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802431a:	e174      	b.n	8024606 <UART_SetConfig+0x5a6>
 802431c:	2320      	movs	r3, #32
 802431e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024322:	e170      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024324:	2340      	movs	r3, #64	@ 0x40
 8024326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802432a:	e16c      	b.n	8024606 <UART_SetConfig+0x5a6>
 802432c:	2380      	movs	r3, #128	@ 0x80
 802432e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024332:	e168      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024334:	697b      	ldr	r3, [r7, #20]
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	4a1b      	ldr	r2, [pc, #108]	@ (80243a8 <UART_SetConfig+0x348>)
 802433a:	4293      	cmp	r3, r2
 802433c:	d142      	bne.n	80243c4 <UART_SetConfig+0x364>
 802433e:	4b16      	ldr	r3, [pc, #88]	@ (8024398 <UART_SetConfig+0x338>)
 8024340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024342:	f003 0307 	and.w	r3, r3, #7
 8024346:	2b05      	cmp	r3, #5
 8024348:	d838      	bhi.n	80243bc <UART_SetConfig+0x35c>
 802434a:	a201      	add	r2, pc, #4	@ (adr r2, 8024350 <UART_SetConfig+0x2f0>)
 802434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024350:	08024369 	.word	0x08024369
 8024354:	08024371 	.word	0x08024371
 8024358:	08024379 	.word	0x08024379
 802435c:	08024381 	.word	0x08024381
 8024360:	080243ad 	.word	0x080243ad
 8024364:	080243b5 	.word	0x080243b5
 8024368:	2300      	movs	r3, #0
 802436a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802436e:	e14a      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024370:	2304      	movs	r3, #4
 8024372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024376:	e146      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024378:	2308      	movs	r3, #8
 802437a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802437e:	e142      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024380:	2310      	movs	r3, #16
 8024382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024386:	e13e      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024388:	cfff69f3 	.word	0xcfff69f3
 802438c:	58000c00 	.word	0x58000c00
 8024390:	11fff4ff 	.word	0x11fff4ff
 8024394:	40011000 	.word	0x40011000
 8024398:	58024400 	.word	0x58024400
 802439c:	40004400 	.word	0x40004400
 80243a0:	40004800 	.word	0x40004800
 80243a4:	40004c00 	.word	0x40004c00
 80243a8:	40005000 	.word	0x40005000
 80243ac:	2320      	movs	r3, #32
 80243ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243b2:	e128      	b.n	8024606 <UART_SetConfig+0x5a6>
 80243b4:	2340      	movs	r3, #64	@ 0x40
 80243b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ba:	e124      	b.n	8024606 <UART_SetConfig+0x5a6>
 80243bc:	2380      	movs	r3, #128	@ 0x80
 80243be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243c2:	e120      	b.n	8024606 <UART_SetConfig+0x5a6>
 80243c4:	697b      	ldr	r3, [r7, #20]
 80243c6:	681b      	ldr	r3, [r3, #0]
 80243c8:	4acb      	ldr	r2, [pc, #812]	@ (80246f8 <UART_SetConfig+0x698>)
 80243ca:	4293      	cmp	r3, r2
 80243cc:	d176      	bne.n	80244bc <UART_SetConfig+0x45c>
 80243ce:	4bcb      	ldr	r3, [pc, #812]	@ (80246fc <UART_SetConfig+0x69c>)
 80243d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80243d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80243d6:	2b28      	cmp	r3, #40	@ 0x28
 80243d8:	d86c      	bhi.n	80244b4 <UART_SetConfig+0x454>
 80243da:	a201      	add	r2, pc, #4	@ (adr r2, 80243e0 <UART_SetConfig+0x380>)
 80243dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243e0:	08024485 	.word	0x08024485
 80243e4:	080244b5 	.word	0x080244b5
 80243e8:	080244b5 	.word	0x080244b5
 80243ec:	080244b5 	.word	0x080244b5
 80243f0:	080244b5 	.word	0x080244b5
 80243f4:	080244b5 	.word	0x080244b5
 80243f8:	080244b5 	.word	0x080244b5
 80243fc:	080244b5 	.word	0x080244b5
 8024400:	0802448d 	.word	0x0802448d
 8024404:	080244b5 	.word	0x080244b5
 8024408:	080244b5 	.word	0x080244b5
 802440c:	080244b5 	.word	0x080244b5
 8024410:	080244b5 	.word	0x080244b5
 8024414:	080244b5 	.word	0x080244b5
 8024418:	080244b5 	.word	0x080244b5
 802441c:	080244b5 	.word	0x080244b5
 8024420:	08024495 	.word	0x08024495
 8024424:	080244b5 	.word	0x080244b5
 8024428:	080244b5 	.word	0x080244b5
 802442c:	080244b5 	.word	0x080244b5
 8024430:	080244b5 	.word	0x080244b5
 8024434:	080244b5 	.word	0x080244b5
 8024438:	080244b5 	.word	0x080244b5
 802443c:	080244b5 	.word	0x080244b5
 8024440:	0802449d 	.word	0x0802449d
 8024444:	080244b5 	.word	0x080244b5
 8024448:	080244b5 	.word	0x080244b5
 802444c:	080244b5 	.word	0x080244b5
 8024450:	080244b5 	.word	0x080244b5
 8024454:	080244b5 	.word	0x080244b5
 8024458:	080244b5 	.word	0x080244b5
 802445c:	080244b5 	.word	0x080244b5
 8024460:	080244a5 	.word	0x080244a5
 8024464:	080244b5 	.word	0x080244b5
 8024468:	080244b5 	.word	0x080244b5
 802446c:	080244b5 	.word	0x080244b5
 8024470:	080244b5 	.word	0x080244b5
 8024474:	080244b5 	.word	0x080244b5
 8024478:	080244b5 	.word	0x080244b5
 802447c:	080244b5 	.word	0x080244b5
 8024480:	080244ad 	.word	0x080244ad
 8024484:	2301      	movs	r3, #1
 8024486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802448a:	e0bc      	b.n	8024606 <UART_SetConfig+0x5a6>
 802448c:	2304      	movs	r3, #4
 802448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024492:	e0b8      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024494:	2308      	movs	r3, #8
 8024496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802449a:	e0b4      	b.n	8024606 <UART_SetConfig+0x5a6>
 802449c:	2310      	movs	r3, #16
 802449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244a2:	e0b0      	b.n	8024606 <UART_SetConfig+0x5a6>
 80244a4:	2320      	movs	r3, #32
 80244a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244aa:	e0ac      	b.n	8024606 <UART_SetConfig+0x5a6>
 80244ac:	2340      	movs	r3, #64	@ 0x40
 80244ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244b2:	e0a8      	b.n	8024606 <UART_SetConfig+0x5a6>
 80244b4:	2380      	movs	r3, #128	@ 0x80
 80244b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244ba:	e0a4      	b.n	8024606 <UART_SetConfig+0x5a6>
 80244bc:	697b      	ldr	r3, [r7, #20]
 80244be:	681b      	ldr	r3, [r3, #0]
 80244c0:	4a8f      	ldr	r2, [pc, #572]	@ (8024700 <UART_SetConfig+0x6a0>)
 80244c2:	4293      	cmp	r3, r2
 80244c4:	d130      	bne.n	8024528 <UART_SetConfig+0x4c8>
 80244c6:	4b8d      	ldr	r3, [pc, #564]	@ (80246fc <UART_SetConfig+0x69c>)
 80244c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80244ca:	f003 0307 	and.w	r3, r3, #7
 80244ce:	2b05      	cmp	r3, #5
 80244d0:	d826      	bhi.n	8024520 <UART_SetConfig+0x4c0>
 80244d2:	a201      	add	r2, pc, #4	@ (adr r2, 80244d8 <UART_SetConfig+0x478>)
 80244d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244d8:	080244f1 	.word	0x080244f1
 80244dc:	080244f9 	.word	0x080244f9
 80244e0:	08024501 	.word	0x08024501
 80244e4:	08024509 	.word	0x08024509
 80244e8:	08024511 	.word	0x08024511
 80244ec:	08024519 	.word	0x08024519
 80244f0:	2300      	movs	r3, #0
 80244f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244f6:	e086      	b.n	8024606 <UART_SetConfig+0x5a6>
 80244f8:	2304      	movs	r3, #4
 80244fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244fe:	e082      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024500:	2308      	movs	r3, #8
 8024502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024506:	e07e      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024508:	2310      	movs	r3, #16
 802450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802450e:	e07a      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024510:	2320      	movs	r3, #32
 8024512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024516:	e076      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024518:	2340      	movs	r3, #64	@ 0x40
 802451a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802451e:	e072      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024520:	2380      	movs	r3, #128	@ 0x80
 8024522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024526:	e06e      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024528:	697b      	ldr	r3, [r7, #20]
 802452a:	681b      	ldr	r3, [r3, #0]
 802452c:	4a75      	ldr	r2, [pc, #468]	@ (8024704 <UART_SetConfig+0x6a4>)
 802452e:	4293      	cmp	r3, r2
 8024530:	d130      	bne.n	8024594 <UART_SetConfig+0x534>
 8024532:	4b72      	ldr	r3, [pc, #456]	@ (80246fc <UART_SetConfig+0x69c>)
 8024534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024536:	f003 0307 	and.w	r3, r3, #7
 802453a:	2b05      	cmp	r3, #5
 802453c:	d826      	bhi.n	802458c <UART_SetConfig+0x52c>
 802453e:	a201      	add	r2, pc, #4	@ (adr r2, 8024544 <UART_SetConfig+0x4e4>)
 8024540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024544:	0802455d 	.word	0x0802455d
 8024548:	08024565 	.word	0x08024565
 802454c:	0802456d 	.word	0x0802456d
 8024550:	08024575 	.word	0x08024575
 8024554:	0802457d 	.word	0x0802457d
 8024558:	08024585 	.word	0x08024585
 802455c:	2300      	movs	r3, #0
 802455e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024562:	e050      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024564:	2304      	movs	r3, #4
 8024566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802456a:	e04c      	b.n	8024606 <UART_SetConfig+0x5a6>
 802456c:	2308      	movs	r3, #8
 802456e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024572:	e048      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024574:	2310      	movs	r3, #16
 8024576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802457a:	e044      	b.n	8024606 <UART_SetConfig+0x5a6>
 802457c:	2320      	movs	r3, #32
 802457e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024582:	e040      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024584:	2340      	movs	r3, #64	@ 0x40
 8024586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802458a:	e03c      	b.n	8024606 <UART_SetConfig+0x5a6>
 802458c:	2380      	movs	r3, #128	@ 0x80
 802458e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024592:	e038      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024594:	697b      	ldr	r3, [r7, #20]
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	4a5b      	ldr	r2, [pc, #364]	@ (8024708 <UART_SetConfig+0x6a8>)
 802459a:	4293      	cmp	r3, r2
 802459c:	d130      	bne.n	8024600 <UART_SetConfig+0x5a0>
 802459e:	4b57      	ldr	r3, [pc, #348]	@ (80246fc <UART_SetConfig+0x69c>)
 80245a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80245a2:	f003 0307 	and.w	r3, r3, #7
 80245a6:	2b05      	cmp	r3, #5
 80245a8:	d826      	bhi.n	80245f8 <UART_SetConfig+0x598>
 80245aa:	a201      	add	r2, pc, #4	@ (adr r2, 80245b0 <UART_SetConfig+0x550>)
 80245ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80245b0:	080245c9 	.word	0x080245c9
 80245b4:	080245d1 	.word	0x080245d1
 80245b8:	080245d9 	.word	0x080245d9
 80245bc:	080245e1 	.word	0x080245e1
 80245c0:	080245e9 	.word	0x080245e9
 80245c4:	080245f1 	.word	0x080245f1
 80245c8:	2302      	movs	r3, #2
 80245ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ce:	e01a      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245d0:	2304      	movs	r3, #4
 80245d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245d6:	e016      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245d8:	2308      	movs	r3, #8
 80245da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245de:	e012      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245e0:	2310      	movs	r3, #16
 80245e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245e6:	e00e      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245e8:	2320      	movs	r3, #32
 80245ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ee:	e00a      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245f0:	2340      	movs	r3, #64	@ 0x40
 80245f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245f6:	e006      	b.n	8024606 <UART_SetConfig+0x5a6>
 80245f8:	2380      	movs	r3, #128	@ 0x80
 80245fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245fe:	e002      	b.n	8024606 <UART_SetConfig+0x5a6>
 8024600:	2380      	movs	r3, #128	@ 0x80
 8024602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8024606:	697b      	ldr	r3, [r7, #20]
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	4a3f      	ldr	r2, [pc, #252]	@ (8024708 <UART_SetConfig+0x6a8>)
 802460c:	4293      	cmp	r3, r2
 802460e:	f040 80f8 	bne.w	8024802 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8024612:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8024616:	2b20      	cmp	r3, #32
 8024618:	dc46      	bgt.n	80246a8 <UART_SetConfig+0x648>
 802461a:	2b02      	cmp	r3, #2
 802461c:	f2c0 8082 	blt.w	8024724 <UART_SetConfig+0x6c4>
 8024620:	3b02      	subs	r3, #2
 8024622:	2b1e      	cmp	r3, #30
 8024624:	d87e      	bhi.n	8024724 <UART_SetConfig+0x6c4>
 8024626:	a201      	add	r2, pc, #4	@ (adr r2, 802462c <UART_SetConfig+0x5cc>)
 8024628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802462c:	080246af 	.word	0x080246af
 8024630:	08024725 	.word	0x08024725
 8024634:	080246b7 	.word	0x080246b7
 8024638:	08024725 	.word	0x08024725
 802463c:	08024725 	.word	0x08024725
 8024640:	08024725 	.word	0x08024725
 8024644:	080246c7 	.word	0x080246c7
 8024648:	08024725 	.word	0x08024725
 802464c:	08024725 	.word	0x08024725
 8024650:	08024725 	.word	0x08024725
 8024654:	08024725 	.word	0x08024725
 8024658:	08024725 	.word	0x08024725
 802465c:	08024725 	.word	0x08024725
 8024660:	08024725 	.word	0x08024725
 8024664:	080246d7 	.word	0x080246d7
 8024668:	08024725 	.word	0x08024725
 802466c:	08024725 	.word	0x08024725
 8024670:	08024725 	.word	0x08024725
 8024674:	08024725 	.word	0x08024725
 8024678:	08024725 	.word	0x08024725
 802467c:	08024725 	.word	0x08024725
 8024680:	08024725 	.word	0x08024725
 8024684:	08024725 	.word	0x08024725
 8024688:	08024725 	.word	0x08024725
 802468c:	08024725 	.word	0x08024725
 8024690:	08024725 	.word	0x08024725
 8024694:	08024725 	.word	0x08024725
 8024698:	08024725 	.word	0x08024725
 802469c:	08024725 	.word	0x08024725
 80246a0:	08024725 	.word	0x08024725
 80246a4:	08024717 	.word	0x08024717
 80246a8:	2b40      	cmp	r3, #64	@ 0x40
 80246aa:	d037      	beq.n	802471c <UART_SetConfig+0x6bc>
 80246ac:	e03a      	b.n	8024724 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80246ae:	f7fd f8d7 	bl	8021860 <HAL_RCCEx_GetD3PCLK1Freq>
 80246b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80246b4:	e03c      	b.n	8024730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80246b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80246ba:	4618      	mov	r0, r3
 80246bc:	f7fd f8e6 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80246c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80246c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80246c4:	e034      	b.n	8024730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80246c6:	f107 0318 	add.w	r3, r7, #24
 80246ca:	4618      	mov	r0, r3
 80246cc:	f7fd fa32 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80246d0:	69fb      	ldr	r3, [r7, #28]
 80246d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80246d4:	e02c      	b.n	8024730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80246d6:	4b09      	ldr	r3, [pc, #36]	@ (80246fc <UART_SetConfig+0x69c>)
 80246d8:	681b      	ldr	r3, [r3, #0]
 80246da:	f003 0320 	and.w	r3, r3, #32
 80246de:	2b00      	cmp	r3, #0
 80246e0:	d016      	beq.n	8024710 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80246e2:	4b06      	ldr	r3, [pc, #24]	@ (80246fc <UART_SetConfig+0x69c>)
 80246e4:	681b      	ldr	r3, [r3, #0]
 80246e6:	08db      	lsrs	r3, r3, #3
 80246e8:	f003 0303 	and.w	r3, r3, #3
 80246ec:	4a07      	ldr	r2, [pc, #28]	@ (802470c <UART_SetConfig+0x6ac>)
 80246ee:	fa22 f303 	lsr.w	r3, r2, r3
 80246f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80246f4:	e01c      	b.n	8024730 <UART_SetConfig+0x6d0>
 80246f6:	bf00      	nop
 80246f8:	40011400 	.word	0x40011400
 80246fc:	58024400 	.word	0x58024400
 8024700:	40007800 	.word	0x40007800
 8024704:	40007c00 	.word	0x40007c00
 8024708:	58000c00 	.word	0x58000c00
 802470c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8024710:	4b9d      	ldr	r3, [pc, #628]	@ (8024988 <UART_SetConfig+0x928>)
 8024712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024714:	e00c      	b.n	8024730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024716:	4b9d      	ldr	r3, [pc, #628]	@ (802498c <UART_SetConfig+0x92c>)
 8024718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802471a:	e009      	b.n	8024730 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802471c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024722:	e005      	b.n	8024730 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8024724:	2300      	movs	r3, #0
 8024726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024728:	2301      	movs	r3, #1
 802472a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 802472e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8024730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024732:	2b00      	cmp	r3, #0
 8024734:	f000 81de 	beq.w	8024af4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8024738:	697b      	ldr	r3, [r7, #20]
 802473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802473c:	4a94      	ldr	r2, [pc, #592]	@ (8024990 <UART_SetConfig+0x930>)
 802473e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024742:	461a      	mov	r2, r3
 8024744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024746:	fbb3 f3f2 	udiv	r3, r3, r2
 802474a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802474c:	697b      	ldr	r3, [r7, #20]
 802474e:	685a      	ldr	r2, [r3, #4]
 8024750:	4613      	mov	r3, r2
 8024752:	005b      	lsls	r3, r3, #1
 8024754:	4413      	add	r3, r2
 8024756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024758:	429a      	cmp	r2, r3
 802475a:	d305      	bcc.n	8024768 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802475c:	697b      	ldr	r3, [r7, #20]
 802475e:	685b      	ldr	r3, [r3, #4]
 8024760:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8024762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024764:	429a      	cmp	r2, r3
 8024766:	d903      	bls.n	8024770 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8024768:	2301      	movs	r3, #1
 802476a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802476e:	e1c1      	b.n	8024af4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024772:	2200      	movs	r2, #0
 8024774:	60bb      	str	r3, [r7, #8]
 8024776:	60fa      	str	r2, [r7, #12]
 8024778:	697b      	ldr	r3, [r7, #20]
 802477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802477c:	4a84      	ldr	r2, [pc, #528]	@ (8024990 <UART_SetConfig+0x930>)
 802477e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024782:	b29b      	uxth	r3, r3
 8024784:	2200      	movs	r2, #0
 8024786:	603b      	str	r3, [r7, #0]
 8024788:	607a      	str	r2, [r7, #4]
 802478a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802478e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024792:	f7dc f8d7 	bl	8000944 <__aeabi_uldivmod>
 8024796:	4602      	mov	r2, r0
 8024798:	460b      	mov	r3, r1
 802479a:	4610      	mov	r0, r2
 802479c:	4619      	mov	r1, r3
 802479e:	f04f 0200 	mov.w	r2, #0
 80247a2:	f04f 0300 	mov.w	r3, #0
 80247a6:	020b      	lsls	r3, r1, #8
 80247a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80247ac:	0202      	lsls	r2, r0, #8
 80247ae:	6979      	ldr	r1, [r7, #20]
 80247b0:	6849      	ldr	r1, [r1, #4]
 80247b2:	0849      	lsrs	r1, r1, #1
 80247b4:	2000      	movs	r0, #0
 80247b6:	460c      	mov	r4, r1
 80247b8:	4605      	mov	r5, r0
 80247ba:	eb12 0804 	adds.w	r8, r2, r4
 80247be:	eb43 0905 	adc.w	r9, r3, r5
 80247c2:	697b      	ldr	r3, [r7, #20]
 80247c4:	685b      	ldr	r3, [r3, #4]
 80247c6:	2200      	movs	r2, #0
 80247c8:	469a      	mov	sl, r3
 80247ca:	4693      	mov	fp, r2
 80247cc:	4652      	mov	r2, sl
 80247ce:	465b      	mov	r3, fp
 80247d0:	4640      	mov	r0, r8
 80247d2:	4649      	mov	r1, r9
 80247d4:	f7dc f8b6 	bl	8000944 <__aeabi_uldivmod>
 80247d8:	4602      	mov	r2, r0
 80247da:	460b      	mov	r3, r1
 80247dc:	4613      	mov	r3, r2
 80247de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80247e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80247e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80247e6:	d308      	bcc.n	80247fa <UART_SetConfig+0x79a>
 80247e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80247ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80247ee:	d204      	bcs.n	80247fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80247f0:	697b      	ldr	r3, [r7, #20]
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80247f6:	60da      	str	r2, [r3, #12]
 80247f8:	e17c      	b.n	8024af4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80247fa:	2301      	movs	r3, #1
 80247fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024800:	e178      	b.n	8024af4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024802:	697b      	ldr	r3, [r7, #20]
 8024804:	69db      	ldr	r3, [r3, #28]
 8024806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802480a:	f040 80c5 	bne.w	8024998 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802480e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8024812:	2b20      	cmp	r3, #32
 8024814:	dc48      	bgt.n	80248a8 <UART_SetConfig+0x848>
 8024816:	2b00      	cmp	r3, #0
 8024818:	db7b      	blt.n	8024912 <UART_SetConfig+0x8b2>
 802481a:	2b20      	cmp	r3, #32
 802481c:	d879      	bhi.n	8024912 <UART_SetConfig+0x8b2>
 802481e:	a201      	add	r2, pc, #4	@ (adr r2, 8024824 <UART_SetConfig+0x7c4>)
 8024820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024824:	080248af 	.word	0x080248af
 8024828:	080248b7 	.word	0x080248b7
 802482c:	08024913 	.word	0x08024913
 8024830:	08024913 	.word	0x08024913
 8024834:	080248bf 	.word	0x080248bf
 8024838:	08024913 	.word	0x08024913
 802483c:	08024913 	.word	0x08024913
 8024840:	08024913 	.word	0x08024913
 8024844:	080248cf 	.word	0x080248cf
 8024848:	08024913 	.word	0x08024913
 802484c:	08024913 	.word	0x08024913
 8024850:	08024913 	.word	0x08024913
 8024854:	08024913 	.word	0x08024913
 8024858:	08024913 	.word	0x08024913
 802485c:	08024913 	.word	0x08024913
 8024860:	08024913 	.word	0x08024913
 8024864:	080248df 	.word	0x080248df
 8024868:	08024913 	.word	0x08024913
 802486c:	08024913 	.word	0x08024913
 8024870:	08024913 	.word	0x08024913
 8024874:	08024913 	.word	0x08024913
 8024878:	08024913 	.word	0x08024913
 802487c:	08024913 	.word	0x08024913
 8024880:	08024913 	.word	0x08024913
 8024884:	08024913 	.word	0x08024913
 8024888:	08024913 	.word	0x08024913
 802488c:	08024913 	.word	0x08024913
 8024890:	08024913 	.word	0x08024913
 8024894:	08024913 	.word	0x08024913
 8024898:	08024913 	.word	0x08024913
 802489c:	08024913 	.word	0x08024913
 80248a0:	08024913 	.word	0x08024913
 80248a4:	08024905 	.word	0x08024905
 80248a8:	2b40      	cmp	r3, #64	@ 0x40
 80248aa:	d02e      	beq.n	802490a <UART_SetConfig+0x8aa>
 80248ac:	e031      	b.n	8024912 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80248ae:	f7fb f821 	bl	801f8f4 <HAL_RCC_GetPCLK1Freq>
 80248b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80248b4:	e033      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80248b6:	f7fb f833 	bl	801f920 <HAL_RCC_GetPCLK2Freq>
 80248ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80248bc:	e02f      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80248be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80248c2:	4618      	mov	r0, r3
 80248c4:	f7fc ffe2 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80248c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80248ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80248cc:	e027      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80248ce:	f107 0318 	add.w	r3, r7, #24
 80248d2:	4618      	mov	r0, r3
 80248d4:	f7fd f92e 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80248d8:	69fb      	ldr	r3, [r7, #28]
 80248da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80248dc:	e01f      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80248de:	4b2d      	ldr	r3, [pc, #180]	@ (8024994 <UART_SetConfig+0x934>)
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	f003 0320 	and.w	r3, r3, #32
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	d009      	beq.n	80248fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80248ea:	4b2a      	ldr	r3, [pc, #168]	@ (8024994 <UART_SetConfig+0x934>)
 80248ec:	681b      	ldr	r3, [r3, #0]
 80248ee:	08db      	lsrs	r3, r3, #3
 80248f0:	f003 0303 	and.w	r3, r3, #3
 80248f4:	4a24      	ldr	r2, [pc, #144]	@ (8024988 <UART_SetConfig+0x928>)
 80248f6:	fa22 f303 	lsr.w	r3, r2, r3
 80248fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80248fc:	e00f      	b.n	802491e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80248fe:	4b22      	ldr	r3, [pc, #136]	@ (8024988 <UART_SetConfig+0x928>)
 8024900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024902:	e00c      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024904:	4b21      	ldr	r3, [pc, #132]	@ (802498c <UART_SetConfig+0x92c>)
 8024906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024908:	e009      	b.n	802491e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802490a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024910:	e005      	b.n	802491e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8024912:	2300      	movs	r3, #0
 8024914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024916:	2301      	movs	r3, #1
 8024918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 802491c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802491e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024920:	2b00      	cmp	r3, #0
 8024922:	f000 80e7 	beq.w	8024af4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024926:	697b      	ldr	r3, [r7, #20]
 8024928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802492a:	4a19      	ldr	r2, [pc, #100]	@ (8024990 <UART_SetConfig+0x930>)
 802492c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024930:	461a      	mov	r2, r3
 8024932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024934:	fbb3 f3f2 	udiv	r3, r3, r2
 8024938:	005a      	lsls	r2, r3, #1
 802493a:	697b      	ldr	r3, [r7, #20]
 802493c:	685b      	ldr	r3, [r3, #4]
 802493e:	085b      	lsrs	r3, r3, #1
 8024940:	441a      	add	r2, r3
 8024942:	697b      	ldr	r3, [r7, #20]
 8024944:	685b      	ldr	r3, [r3, #4]
 8024946:	fbb2 f3f3 	udiv	r3, r2, r3
 802494a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802494c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802494e:	2b0f      	cmp	r3, #15
 8024950:	d916      	bls.n	8024980 <UART_SetConfig+0x920>
 8024952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024958:	d212      	bcs.n	8024980 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802495c:	b29b      	uxth	r3, r3
 802495e:	f023 030f 	bic.w	r3, r3, #15
 8024962:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8024964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024966:	085b      	lsrs	r3, r3, #1
 8024968:	b29b      	uxth	r3, r3
 802496a:	f003 0307 	and.w	r3, r3, #7
 802496e:	b29a      	uxth	r2, r3
 8024970:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024972:	4313      	orrs	r3, r2
 8024974:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8024976:	697b      	ldr	r3, [r7, #20]
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 802497c:	60da      	str	r2, [r3, #12]
 802497e:	e0b9      	b.n	8024af4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024980:	2301      	movs	r3, #1
 8024982:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024986:	e0b5      	b.n	8024af4 <UART_SetConfig+0xa94>
 8024988:	03d09000 	.word	0x03d09000
 802498c:	003d0900 	.word	0x003d0900
 8024990:	0802b5f0 	.word	0x0802b5f0
 8024994:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8024998:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802499c:	2b20      	cmp	r3, #32
 802499e:	dc49      	bgt.n	8024a34 <UART_SetConfig+0x9d4>
 80249a0:	2b00      	cmp	r3, #0
 80249a2:	db7c      	blt.n	8024a9e <UART_SetConfig+0xa3e>
 80249a4:	2b20      	cmp	r3, #32
 80249a6:	d87a      	bhi.n	8024a9e <UART_SetConfig+0xa3e>
 80249a8:	a201      	add	r2, pc, #4	@ (adr r2, 80249b0 <UART_SetConfig+0x950>)
 80249aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80249ae:	bf00      	nop
 80249b0:	08024a3b 	.word	0x08024a3b
 80249b4:	08024a43 	.word	0x08024a43
 80249b8:	08024a9f 	.word	0x08024a9f
 80249bc:	08024a9f 	.word	0x08024a9f
 80249c0:	08024a4b 	.word	0x08024a4b
 80249c4:	08024a9f 	.word	0x08024a9f
 80249c8:	08024a9f 	.word	0x08024a9f
 80249cc:	08024a9f 	.word	0x08024a9f
 80249d0:	08024a5b 	.word	0x08024a5b
 80249d4:	08024a9f 	.word	0x08024a9f
 80249d8:	08024a9f 	.word	0x08024a9f
 80249dc:	08024a9f 	.word	0x08024a9f
 80249e0:	08024a9f 	.word	0x08024a9f
 80249e4:	08024a9f 	.word	0x08024a9f
 80249e8:	08024a9f 	.word	0x08024a9f
 80249ec:	08024a9f 	.word	0x08024a9f
 80249f0:	08024a6b 	.word	0x08024a6b
 80249f4:	08024a9f 	.word	0x08024a9f
 80249f8:	08024a9f 	.word	0x08024a9f
 80249fc:	08024a9f 	.word	0x08024a9f
 8024a00:	08024a9f 	.word	0x08024a9f
 8024a04:	08024a9f 	.word	0x08024a9f
 8024a08:	08024a9f 	.word	0x08024a9f
 8024a0c:	08024a9f 	.word	0x08024a9f
 8024a10:	08024a9f 	.word	0x08024a9f
 8024a14:	08024a9f 	.word	0x08024a9f
 8024a18:	08024a9f 	.word	0x08024a9f
 8024a1c:	08024a9f 	.word	0x08024a9f
 8024a20:	08024a9f 	.word	0x08024a9f
 8024a24:	08024a9f 	.word	0x08024a9f
 8024a28:	08024a9f 	.word	0x08024a9f
 8024a2c:	08024a9f 	.word	0x08024a9f
 8024a30:	08024a91 	.word	0x08024a91
 8024a34:	2b40      	cmp	r3, #64	@ 0x40
 8024a36:	d02e      	beq.n	8024a96 <UART_SetConfig+0xa36>
 8024a38:	e031      	b.n	8024a9e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8024a3a:	f7fa ff5b 	bl	801f8f4 <HAL_RCC_GetPCLK1Freq>
 8024a3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a40:	e033      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8024a42:	f7fa ff6d 	bl	801f920 <HAL_RCC_GetPCLK2Freq>
 8024a46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a48:	e02f      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024a4e:	4618      	mov	r0, r3
 8024a50:	f7fc ff1c 	bl	802188c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a58:	e027      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024a5a:	f107 0318 	add.w	r3, r7, #24
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f7fd f868 	bl	8021b34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024a64:	69fb      	ldr	r3, [r7, #28]
 8024a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a68:	e01f      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8024b20 <UART_SetConfig+0xac0>)
 8024a6c:	681b      	ldr	r3, [r3, #0]
 8024a6e:	f003 0320 	and.w	r3, r3, #32
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d009      	beq.n	8024a8a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024a76:	4b2a      	ldr	r3, [pc, #168]	@ (8024b20 <UART_SetConfig+0xac0>)
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	08db      	lsrs	r3, r3, #3
 8024a7c:	f003 0303 	and.w	r3, r3, #3
 8024a80:	4a28      	ldr	r2, [pc, #160]	@ (8024b24 <UART_SetConfig+0xac4>)
 8024a82:	fa22 f303 	lsr.w	r3, r2, r3
 8024a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024a88:	e00f      	b.n	8024aaa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8024a8a:	4b26      	ldr	r3, [pc, #152]	@ (8024b24 <UART_SetConfig+0xac4>)
 8024a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a8e:	e00c      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024a90:	4b25      	ldr	r3, [pc, #148]	@ (8024b28 <UART_SetConfig+0xac8>)
 8024a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a94:	e009      	b.n	8024aaa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a9c:	e005      	b.n	8024aaa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8024a9e:	2300      	movs	r3, #0
 8024aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024aa2:	2301      	movs	r3, #1
 8024aa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8024aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	d021      	beq.n	8024af4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024ab0:	697b      	ldr	r3, [r7, #20]
 8024ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8024b2c <UART_SetConfig+0xacc>)
 8024ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024aba:	461a      	mov	r2, r3
 8024abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8024ac2:	697b      	ldr	r3, [r7, #20]
 8024ac4:	685b      	ldr	r3, [r3, #4]
 8024ac6:	085b      	lsrs	r3, r3, #1
 8024ac8:	441a      	add	r2, r3
 8024aca:	697b      	ldr	r3, [r7, #20]
 8024acc:	685b      	ldr	r3, [r3, #4]
 8024ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8024ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ad6:	2b0f      	cmp	r3, #15
 8024ad8:	d909      	bls.n	8024aee <UART_SetConfig+0xa8e>
 8024ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024ae0:	d205      	bcs.n	8024aee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8024ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ae4:	b29a      	uxth	r2, r3
 8024ae6:	697b      	ldr	r3, [r7, #20]
 8024ae8:	681b      	ldr	r3, [r3, #0]
 8024aea:	60da      	str	r2, [r3, #12]
 8024aec:	e002      	b.n	8024af4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024aee:	2301      	movs	r3, #1
 8024af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8024af4:	697b      	ldr	r3, [r7, #20]
 8024af6:	2201      	movs	r2, #1
 8024af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8024afc:	697b      	ldr	r3, [r7, #20]
 8024afe:	2201      	movs	r2, #1
 8024b00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8024b04:	697b      	ldr	r3, [r7, #20]
 8024b06:	2200      	movs	r2, #0
 8024b08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8024b0a:	697b      	ldr	r3, [r7, #20]
 8024b0c:	2200      	movs	r2, #0
 8024b0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8024b10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8024b14:	4618      	mov	r0, r3
 8024b16:	3748      	adds	r7, #72	@ 0x48
 8024b18:	46bd      	mov	sp, r7
 8024b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024b1e:	bf00      	nop
 8024b20:	58024400 	.word	0x58024400
 8024b24:	03d09000 	.word	0x03d09000
 8024b28:	003d0900 	.word	0x003d0900
 8024b2c:	0802b5f0 	.word	0x0802b5f0

08024b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8024b30:	b480      	push	{r7}
 8024b32:	b083      	sub	sp, #12
 8024b34:	af00      	add	r7, sp, #0
 8024b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b3c:	f003 0308 	and.w	r3, r3, #8
 8024b40:	2b00      	cmp	r3, #0
 8024b42:	d00a      	beq.n	8024b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	685b      	ldr	r3, [r3, #4]
 8024b4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8024b52:	687b      	ldr	r3, [r7, #4]
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	430a      	orrs	r2, r1
 8024b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b5e:	f003 0301 	and.w	r3, r3, #1
 8024b62:	2b00      	cmp	r3, #0
 8024b64:	d00a      	beq.n	8024b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8024b66:	687b      	ldr	r3, [r7, #4]
 8024b68:	681b      	ldr	r3, [r3, #0]
 8024b6a:	685b      	ldr	r3, [r3, #4]
 8024b6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	430a      	orrs	r2, r1
 8024b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b80:	f003 0302 	and.w	r3, r3, #2
 8024b84:	2b00      	cmp	r3, #0
 8024b86:	d00a      	beq.n	8024b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8024b88:	687b      	ldr	r3, [r7, #4]
 8024b8a:	681b      	ldr	r3, [r3, #0]
 8024b8c:	685b      	ldr	r3, [r3, #4]
 8024b8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	430a      	orrs	r2, r1
 8024b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024ba2:	f003 0304 	and.w	r3, r3, #4
 8024ba6:	2b00      	cmp	r3, #0
 8024ba8:	d00a      	beq.n	8024bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	681b      	ldr	r3, [r3, #0]
 8024bae:	685b      	ldr	r3, [r3, #4]
 8024bb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	430a      	orrs	r2, r1
 8024bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024bc4:	f003 0310 	and.w	r3, r3, #16
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d00a      	beq.n	8024be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8024bcc:	687b      	ldr	r3, [r7, #4]
 8024bce:	681b      	ldr	r3, [r3, #0]
 8024bd0:	689b      	ldr	r3, [r3, #8]
 8024bd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024bda:	687b      	ldr	r3, [r7, #4]
 8024bdc:	681b      	ldr	r3, [r3, #0]
 8024bde:	430a      	orrs	r2, r1
 8024be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024be6:	f003 0320 	and.w	r3, r3, #32
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d00a      	beq.n	8024c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	681b      	ldr	r3, [r3, #0]
 8024bf2:	689b      	ldr	r3, [r3, #8]
 8024bf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	681b      	ldr	r3, [r3, #0]
 8024c00:	430a      	orrs	r2, r1
 8024c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8024c04:	687b      	ldr	r3, [r7, #4]
 8024c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	d01a      	beq.n	8024c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	685b      	ldr	r3, [r3, #4]
 8024c16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	681b      	ldr	r3, [r3, #0]
 8024c22:	430a      	orrs	r2, r1
 8024c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024c2e:	d10a      	bne.n	8024c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	681b      	ldr	r3, [r3, #0]
 8024c34:	685b      	ldr	r3, [r3, #4]
 8024c36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8024c3e:	687b      	ldr	r3, [r7, #4]
 8024c40:	681b      	ldr	r3, [r3, #0]
 8024c42:	430a      	orrs	r2, r1
 8024c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024c4e:	2b00      	cmp	r3, #0
 8024c50:	d00a      	beq.n	8024c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8024c52:	687b      	ldr	r3, [r7, #4]
 8024c54:	681b      	ldr	r3, [r3, #0]
 8024c56:	685b      	ldr	r3, [r3, #4]
 8024c58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8024c60:	687b      	ldr	r3, [r7, #4]
 8024c62:	681b      	ldr	r3, [r3, #0]
 8024c64:	430a      	orrs	r2, r1
 8024c66:	605a      	str	r2, [r3, #4]
  }
}
 8024c68:	bf00      	nop
 8024c6a:	370c      	adds	r7, #12
 8024c6c:	46bd      	mov	sp, r7
 8024c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c72:	4770      	bx	lr

08024c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8024c74:	b580      	push	{r7, lr}
 8024c76:	b098      	sub	sp, #96	@ 0x60
 8024c78:	af02      	add	r7, sp, #8
 8024c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	2200      	movs	r2, #0
 8024c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8024c84:	f7f6 ff42 	bl	801bb0c <HAL_GetTick>
 8024c88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	f003 0308 	and.w	r3, r3, #8
 8024c94:	2b08      	cmp	r3, #8
 8024c96:	d12f      	bne.n	8024cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024c9c:	9300      	str	r3, [sp, #0]
 8024c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024ca0:	2200      	movs	r2, #0
 8024ca2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8024ca6:	6878      	ldr	r0, [r7, #4]
 8024ca8:	f000 f88e 	bl	8024dc8 <UART_WaitOnFlagUntilTimeout>
 8024cac:	4603      	mov	r3, r0
 8024cae:	2b00      	cmp	r3, #0
 8024cb0:	d022      	beq.n	8024cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	681b      	ldr	r3, [r3, #0]
 8024cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024cba:	e853 3f00 	ldrex	r3, [r3]
 8024cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8024cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8024cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	681b      	ldr	r3, [r3, #0]
 8024ccc:	461a      	mov	r2, r3
 8024cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8024cd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024cd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024cd8:	e841 2300 	strex	r3, r2, [r1]
 8024cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8024cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d1e6      	bne.n	8024cb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	2220      	movs	r2, #32
 8024ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	2200      	movs	r2, #0
 8024cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024cf4:	2303      	movs	r3, #3
 8024cf6:	e063      	b.n	8024dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	681b      	ldr	r3, [r3, #0]
 8024cfe:	f003 0304 	and.w	r3, r3, #4
 8024d02:	2b04      	cmp	r3, #4
 8024d04:	d149      	bne.n	8024d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024d06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024d0a:	9300      	str	r3, [sp, #0]
 8024d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024d0e:	2200      	movs	r2, #0
 8024d10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8024d14:	6878      	ldr	r0, [r7, #4]
 8024d16:	f000 f857 	bl	8024dc8 <UART_WaitOnFlagUntilTimeout>
 8024d1a:	4603      	mov	r3, r0
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d03c      	beq.n	8024d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024d28:	e853 3f00 	ldrex	r3, [r3]
 8024d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8024d2e:	6a3b      	ldr	r3, [r7, #32]
 8024d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	461a      	mov	r2, r3
 8024d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024d3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8024d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024d46:	e841 2300 	strex	r3, r2, [r1]
 8024d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8024d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	d1e6      	bne.n	8024d20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	3308      	adds	r3, #8
 8024d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024d5a:	693b      	ldr	r3, [r7, #16]
 8024d5c:	e853 3f00 	ldrex	r3, [r3]
 8024d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8024d62:	68fb      	ldr	r3, [r7, #12]
 8024d64:	f023 0301 	bic.w	r3, r3, #1
 8024d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	3308      	adds	r3, #8
 8024d70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024d72:	61fa      	str	r2, [r7, #28]
 8024d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024d76:	69b9      	ldr	r1, [r7, #24]
 8024d78:	69fa      	ldr	r2, [r7, #28]
 8024d7a:	e841 2300 	strex	r3, r2, [r1]
 8024d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8024d80:	697b      	ldr	r3, [r7, #20]
 8024d82:	2b00      	cmp	r3, #0
 8024d84:	d1e5      	bne.n	8024d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	2220      	movs	r2, #32
 8024d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	2200      	movs	r2, #0
 8024d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024d96:	2303      	movs	r3, #3
 8024d98:	e012      	b.n	8024dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	2220      	movs	r2, #32
 8024d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	2220      	movs	r2, #32
 8024da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	2200      	movs	r2, #0
 8024dae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	2200      	movs	r2, #0
 8024db4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	2200      	movs	r2, #0
 8024dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024dbe:	2300      	movs	r3, #0
}
 8024dc0:	4618      	mov	r0, r3
 8024dc2:	3758      	adds	r7, #88	@ 0x58
 8024dc4:	46bd      	mov	sp, r7
 8024dc6:	bd80      	pop	{r7, pc}

08024dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8024dc8:	b580      	push	{r7, lr}
 8024dca:	b084      	sub	sp, #16
 8024dcc:	af00      	add	r7, sp, #0
 8024dce:	60f8      	str	r0, [r7, #12]
 8024dd0:	60b9      	str	r1, [r7, #8]
 8024dd2:	603b      	str	r3, [r7, #0]
 8024dd4:	4613      	mov	r3, r2
 8024dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024dd8:	e04f      	b.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024dda:	69bb      	ldr	r3, [r7, #24]
 8024ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024de0:	d04b      	beq.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024de2:	f7f6 fe93 	bl	801bb0c <HAL_GetTick>
 8024de6:	4602      	mov	r2, r0
 8024de8:	683b      	ldr	r3, [r7, #0]
 8024dea:	1ad3      	subs	r3, r2, r3
 8024dec:	69ba      	ldr	r2, [r7, #24]
 8024dee:	429a      	cmp	r2, r3
 8024df0:	d302      	bcc.n	8024df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8024df2:	69bb      	ldr	r3, [r7, #24]
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d101      	bne.n	8024dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8024df8:	2303      	movs	r3, #3
 8024dfa:	e04e      	b.n	8024e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8024dfc:	68fb      	ldr	r3, [r7, #12]
 8024dfe:	681b      	ldr	r3, [r3, #0]
 8024e00:	681b      	ldr	r3, [r3, #0]
 8024e02:	f003 0304 	and.w	r3, r3, #4
 8024e06:	2b00      	cmp	r3, #0
 8024e08:	d037      	beq.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8024e0a:	68bb      	ldr	r3, [r7, #8]
 8024e0c:	2b80      	cmp	r3, #128	@ 0x80
 8024e0e:	d034      	beq.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8024e10:	68bb      	ldr	r3, [r7, #8]
 8024e12:	2b40      	cmp	r3, #64	@ 0x40
 8024e14:	d031      	beq.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8024e16:	68fb      	ldr	r3, [r7, #12]
 8024e18:	681b      	ldr	r3, [r3, #0]
 8024e1a:	69db      	ldr	r3, [r3, #28]
 8024e1c:	f003 0308 	and.w	r3, r3, #8
 8024e20:	2b08      	cmp	r3, #8
 8024e22:	d110      	bne.n	8024e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8024e24:	68fb      	ldr	r3, [r7, #12]
 8024e26:	681b      	ldr	r3, [r3, #0]
 8024e28:	2208      	movs	r2, #8
 8024e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024e2c:	68f8      	ldr	r0, [r7, #12]
 8024e2e:	f000 f839 	bl	8024ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8024e32:	68fb      	ldr	r3, [r7, #12]
 8024e34:	2208      	movs	r2, #8
 8024e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024e3a:	68fb      	ldr	r3, [r7, #12]
 8024e3c:	2200      	movs	r2, #0
 8024e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8024e42:	2301      	movs	r3, #1
 8024e44:	e029      	b.n	8024e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8024e46:	68fb      	ldr	r3, [r7, #12]
 8024e48:	681b      	ldr	r3, [r3, #0]
 8024e4a:	69db      	ldr	r3, [r3, #28]
 8024e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8024e54:	d111      	bne.n	8024e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8024e56:	68fb      	ldr	r3, [r7, #12]
 8024e58:	681b      	ldr	r3, [r3, #0]
 8024e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024e60:	68f8      	ldr	r0, [r7, #12]
 8024e62:	f000 f81f 	bl	8024ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8024e66:	68fb      	ldr	r3, [r7, #12]
 8024e68:	2220      	movs	r2, #32
 8024e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024e6e:	68fb      	ldr	r3, [r7, #12]
 8024e70:	2200      	movs	r2, #0
 8024e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8024e76:	2303      	movs	r3, #3
 8024e78:	e00f      	b.n	8024e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024e7a:	68fb      	ldr	r3, [r7, #12]
 8024e7c:	681b      	ldr	r3, [r3, #0]
 8024e7e:	69da      	ldr	r2, [r3, #28]
 8024e80:	68bb      	ldr	r3, [r7, #8]
 8024e82:	4013      	ands	r3, r2
 8024e84:	68ba      	ldr	r2, [r7, #8]
 8024e86:	429a      	cmp	r2, r3
 8024e88:	bf0c      	ite	eq
 8024e8a:	2301      	moveq	r3, #1
 8024e8c:	2300      	movne	r3, #0
 8024e8e:	b2db      	uxtb	r3, r3
 8024e90:	461a      	mov	r2, r3
 8024e92:	79fb      	ldrb	r3, [r7, #7]
 8024e94:	429a      	cmp	r2, r3
 8024e96:	d0a0      	beq.n	8024dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8024e98:	2300      	movs	r3, #0
}
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	3710      	adds	r7, #16
 8024e9e:	46bd      	mov	sp, r7
 8024ea0:	bd80      	pop	{r7, pc}
	...

08024ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8024ea4:	b480      	push	{r7}
 8024ea6:	b095      	sub	sp, #84	@ 0x54
 8024ea8:	af00      	add	r7, sp, #0
 8024eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024eac:	687b      	ldr	r3, [r7, #4]
 8024eae:	681b      	ldr	r3, [r3, #0]
 8024eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024eb4:	e853 3f00 	ldrex	r3, [r3]
 8024eb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8024eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	461a      	mov	r2, r3
 8024ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8024ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024ece:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024ed2:	e841 2300 	strex	r3, r2, [r1]
 8024ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8024ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	d1e6      	bne.n	8024eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	681b      	ldr	r3, [r3, #0]
 8024ee2:	3308      	adds	r3, #8
 8024ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024ee6:	6a3b      	ldr	r3, [r7, #32]
 8024ee8:	e853 3f00 	ldrex	r3, [r3]
 8024eec:	61fb      	str	r3, [r7, #28]
   return(result);
 8024eee:	69fa      	ldr	r2, [r7, #28]
 8024ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8024f6c <UART_EndRxTransfer+0xc8>)
 8024ef2:	4013      	ands	r3, r2
 8024ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	681b      	ldr	r3, [r3, #0]
 8024efa:	3308      	adds	r3, #8
 8024efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8024f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024f06:	e841 2300 	strex	r3, r2, [r1]
 8024f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8024f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	d1e5      	bne.n	8024ede <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024f16:	2b01      	cmp	r3, #1
 8024f18:	d118      	bne.n	8024f4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	681b      	ldr	r3, [r3, #0]
 8024f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	e853 3f00 	ldrex	r3, [r3]
 8024f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8024f28:	68bb      	ldr	r3, [r7, #8]
 8024f2a:	f023 0310 	bic.w	r3, r3, #16
 8024f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8024f30:	687b      	ldr	r3, [r7, #4]
 8024f32:	681b      	ldr	r3, [r3, #0]
 8024f34:	461a      	mov	r2, r3
 8024f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024f38:	61bb      	str	r3, [r7, #24]
 8024f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f3c:	6979      	ldr	r1, [r7, #20]
 8024f3e:	69ba      	ldr	r2, [r7, #24]
 8024f40:	e841 2300 	strex	r3, r2, [r1]
 8024f44:	613b      	str	r3, [r7, #16]
   return(result);
 8024f46:	693b      	ldr	r3, [r7, #16]
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	d1e6      	bne.n	8024f1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	2220      	movs	r2, #32
 8024f50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024f54:	687b      	ldr	r3, [r7, #4]
 8024f56:	2200      	movs	r2, #0
 8024f58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	2200      	movs	r2, #0
 8024f5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8024f60:	bf00      	nop
 8024f62:	3754      	adds	r7, #84	@ 0x54
 8024f64:	46bd      	mov	sp, r7
 8024f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f6a:	4770      	bx	lr
 8024f6c:	effffffe 	.word	0xeffffffe

08024f70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8024f70:	b480      	push	{r7}
 8024f72:	b085      	sub	sp, #20
 8024f74:	af00      	add	r7, sp, #0
 8024f76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024f7e:	2b01      	cmp	r3, #1
 8024f80:	d101      	bne.n	8024f86 <HAL_UARTEx_DisableFifoMode+0x16>
 8024f82:	2302      	movs	r3, #2
 8024f84:	e027      	b.n	8024fd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	2201      	movs	r2, #1
 8024f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	2224      	movs	r2, #36	@ 0x24
 8024f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024f96:	687b      	ldr	r3, [r7, #4]
 8024f98:	681b      	ldr	r3, [r3, #0]
 8024f9a:	681b      	ldr	r3, [r3, #0]
 8024f9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	681b      	ldr	r3, [r3, #0]
 8024fa2:	681a      	ldr	r2, [r3, #0]
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	681b      	ldr	r3, [r3, #0]
 8024fa8:	f022 0201 	bic.w	r2, r2, #1
 8024fac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8024fae:	68fb      	ldr	r3, [r7, #12]
 8024fb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8024fb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8024fb6:	687b      	ldr	r3, [r7, #4]
 8024fb8:	2200      	movs	r2, #0
 8024fba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024fbc:	687b      	ldr	r3, [r7, #4]
 8024fbe:	681b      	ldr	r3, [r3, #0]
 8024fc0:	68fa      	ldr	r2, [r7, #12]
 8024fc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024fc4:	687b      	ldr	r3, [r7, #4]
 8024fc6:	2220      	movs	r2, #32
 8024fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	2200      	movs	r2, #0
 8024fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024fd4:	2300      	movs	r3, #0
}
 8024fd6:	4618      	mov	r0, r3
 8024fd8:	3714      	adds	r7, #20
 8024fda:	46bd      	mov	sp, r7
 8024fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fe0:	4770      	bx	lr

08024fe2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8024fe2:	b580      	push	{r7, lr}
 8024fe4:	b084      	sub	sp, #16
 8024fe6:	af00      	add	r7, sp, #0
 8024fe8:	6078      	str	r0, [r7, #4]
 8024fea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024fec:	687b      	ldr	r3, [r7, #4]
 8024fee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024ff2:	2b01      	cmp	r3, #1
 8024ff4:	d101      	bne.n	8024ffa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8024ff6:	2302      	movs	r3, #2
 8024ff8:	e02d      	b.n	8025056 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	2201      	movs	r2, #1
 8024ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	2224      	movs	r2, #36	@ 0x24
 8025006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802500a:	687b      	ldr	r3, [r7, #4]
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	681b      	ldr	r3, [r3, #0]
 8025010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	681a      	ldr	r2, [r3, #0]
 8025018:	687b      	ldr	r3, [r7, #4]
 802501a:	681b      	ldr	r3, [r3, #0]
 802501c:	f022 0201 	bic.w	r2, r2, #1
 8025020:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	681b      	ldr	r3, [r3, #0]
 8025026:	689b      	ldr	r3, [r3, #8]
 8025028:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 802502c:	687b      	ldr	r3, [r7, #4]
 802502e:	681b      	ldr	r3, [r3, #0]
 8025030:	683a      	ldr	r2, [r7, #0]
 8025032:	430a      	orrs	r2, r1
 8025034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8025036:	6878      	ldr	r0, [r7, #4]
 8025038:	f000 f850 	bl	80250dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	68fa      	ldr	r2, [r7, #12]
 8025042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	2220      	movs	r2, #32
 8025048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802504c:	687b      	ldr	r3, [r7, #4]
 802504e:	2200      	movs	r2, #0
 8025050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8025054:	2300      	movs	r3, #0
}
 8025056:	4618      	mov	r0, r3
 8025058:	3710      	adds	r7, #16
 802505a:	46bd      	mov	sp, r7
 802505c:	bd80      	pop	{r7, pc}

0802505e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802505e:	b580      	push	{r7, lr}
 8025060:	b084      	sub	sp, #16
 8025062:	af00      	add	r7, sp, #0
 8025064:	6078      	str	r0, [r7, #4]
 8025066:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802506e:	2b01      	cmp	r3, #1
 8025070:	d101      	bne.n	8025076 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8025072:	2302      	movs	r3, #2
 8025074:	e02d      	b.n	80250d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	2201      	movs	r2, #1
 802507a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	2224      	movs	r2, #36	@ 0x24
 8025082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	681b      	ldr	r3, [r3, #0]
 802508c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	681b      	ldr	r3, [r3, #0]
 8025092:	681a      	ldr	r2, [r3, #0]
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	f022 0201 	bic.w	r2, r2, #1
 802509c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	689b      	ldr	r3, [r3, #8]
 80250a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	683a      	ldr	r2, [r7, #0]
 80250ae:	430a      	orrs	r2, r1
 80250b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80250b2:	6878      	ldr	r0, [r7, #4]
 80250b4:	f000 f812 	bl	80250dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80250b8:	687b      	ldr	r3, [r7, #4]
 80250ba:	681b      	ldr	r3, [r3, #0]
 80250bc:	68fa      	ldr	r2, [r7, #12]
 80250be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	2220      	movs	r2, #32
 80250c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80250c8:	687b      	ldr	r3, [r7, #4]
 80250ca:	2200      	movs	r2, #0
 80250cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80250d0:	2300      	movs	r3, #0
}
 80250d2:	4618      	mov	r0, r3
 80250d4:	3710      	adds	r7, #16
 80250d6:	46bd      	mov	sp, r7
 80250d8:	bd80      	pop	{r7, pc}
	...

080250dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80250dc:	b480      	push	{r7}
 80250de:	b085      	sub	sp, #20
 80250e0:	af00      	add	r7, sp, #0
 80250e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80250e8:	2b00      	cmp	r3, #0
 80250ea:	d108      	bne.n	80250fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	2201      	movs	r2, #1
 80250f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	2201      	movs	r2, #1
 80250f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80250fc:	e031      	b.n	8025162 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80250fe:	2310      	movs	r3, #16
 8025100:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8025102:	2310      	movs	r3, #16
 8025104:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	681b      	ldr	r3, [r3, #0]
 802510a:	689b      	ldr	r3, [r3, #8]
 802510c:	0e5b      	lsrs	r3, r3, #25
 802510e:	b2db      	uxtb	r3, r3
 8025110:	f003 0307 	and.w	r3, r3, #7
 8025114:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	689b      	ldr	r3, [r3, #8]
 802511c:	0f5b      	lsrs	r3, r3, #29
 802511e:	b2db      	uxtb	r3, r3
 8025120:	f003 0307 	and.w	r3, r3, #7
 8025124:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8025126:	7bbb      	ldrb	r3, [r7, #14]
 8025128:	7b3a      	ldrb	r2, [r7, #12]
 802512a:	4911      	ldr	r1, [pc, #68]	@ (8025170 <UARTEx_SetNbDataToProcess+0x94>)
 802512c:	5c8a      	ldrb	r2, [r1, r2]
 802512e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8025132:	7b3a      	ldrb	r2, [r7, #12]
 8025134:	490f      	ldr	r1, [pc, #60]	@ (8025174 <UARTEx_SetNbDataToProcess+0x98>)
 8025136:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8025138:	fb93 f3f2 	sdiv	r3, r3, r2
 802513c:	b29a      	uxth	r2, r3
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8025144:	7bfb      	ldrb	r3, [r7, #15]
 8025146:	7b7a      	ldrb	r2, [r7, #13]
 8025148:	4909      	ldr	r1, [pc, #36]	@ (8025170 <UARTEx_SetNbDataToProcess+0x94>)
 802514a:	5c8a      	ldrb	r2, [r1, r2]
 802514c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8025150:	7b7a      	ldrb	r2, [r7, #13]
 8025152:	4908      	ldr	r1, [pc, #32]	@ (8025174 <UARTEx_SetNbDataToProcess+0x98>)
 8025154:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8025156:	fb93 f3f2 	sdiv	r3, r3, r2
 802515a:	b29a      	uxth	r2, r3
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8025162:	bf00      	nop
 8025164:	3714      	adds	r7, #20
 8025166:	46bd      	mov	sp, r7
 8025168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802516c:	4770      	bx	lr
 802516e:	bf00      	nop
 8025170:	0802b608 	.word	0x0802b608
 8025174:	0802b610 	.word	0x0802b610

08025178 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8025178:	b084      	sub	sp, #16
 802517a:	b480      	push	{r7}
 802517c:	b085      	sub	sp, #20
 802517e:	af00      	add	r7, sp, #0
 8025180:	6078      	str	r0, [r7, #4]
 8025182:	f107 001c 	add.w	r0, r7, #28
 8025186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 802518a:	2300      	movs	r3, #0
 802518c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 802518e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8025190:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8025192:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8025194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8025196:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8025198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 802519a:	431a      	orrs	r2, r3
             Init.ClockDiv
 802519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 802519e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80251a0:	68fa      	ldr	r2, [r7, #12]
 80251a2:	4313      	orrs	r3, r2
 80251a4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	685a      	ldr	r2, [r3, #4]
 80251aa:	4b07      	ldr	r3, [pc, #28]	@ (80251c8 <SDMMC_Init+0x50>)
 80251ac:	4013      	ands	r3, r2
 80251ae:	68fa      	ldr	r2, [r7, #12]
 80251b0:	431a      	orrs	r2, r3
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80251b6:	2300      	movs	r3, #0
}
 80251b8:	4618      	mov	r0, r3
 80251ba:	3714      	adds	r7, #20
 80251bc:	46bd      	mov	sp, r7
 80251be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c2:	b004      	add	sp, #16
 80251c4:	4770      	bx	lr
 80251c6:	bf00      	nop
 80251c8:	ffc02c00 	.word	0xffc02c00

080251cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80251cc:	b480      	push	{r7}
 80251ce:	b083      	sub	sp, #12
 80251d0:	af00      	add	r7, sp, #0
 80251d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80251da:	4618      	mov	r0, r3
 80251dc:	370c      	adds	r7, #12
 80251de:	46bd      	mov	sp, r7
 80251e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251e4:	4770      	bx	lr

080251e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80251e6:	b480      	push	{r7}
 80251e8:	b083      	sub	sp, #12
 80251ea:	af00      	add	r7, sp, #0
 80251ec:	6078      	str	r0, [r7, #4]
 80251ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80251f0:	683b      	ldr	r3, [r7, #0]
 80251f2:	681a      	ldr	r2, [r3, #0]
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80251fa:	2300      	movs	r3, #0
}
 80251fc:	4618      	mov	r0, r3
 80251fe:	370c      	adds	r7, #12
 8025200:	46bd      	mov	sp, r7
 8025202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025206:	4770      	bx	lr

08025208 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8025208:	b480      	push	{r7}
 802520a:	b083      	sub	sp, #12
 802520c:	af00      	add	r7, sp, #0
 802520e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	681b      	ldr	r3, [r3, #0]
 8025214:	f043 0203 	orr.w	r2, r3, #3
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 802521c:	2300      	movs	r3, #0
}
 802521e:	4618      	mov	r0, r3
 8025220:	370c      	adds	r7, #12
 8025222:	46bd      	mov	sp, r7
 8025224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025228:	4770      	bx	lr

0802522a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 802522a:	b480      	push	{r7}
 802522c:	b083      	sub	sp, #12
 802522e:	af00      	add	r7, sp, #0
 8025230:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8025232:	687b      	ldr	r3, [r7, #4]
 8025234:	681b      	ldr	r3, [r3, #0]
 8025236:	f003 0303 	and.w	r3, r3, #3
}
 802523a:	4618      	mov	r0, r3
 802523c:	370c      	adds	r7, #12
 802523e:	46bd      	mov	sp, r7
 8025240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025244:	4770      	bx	lr
	...

08025248 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8025248:	b480      	push	{r7}
 802524a:	b085      	sub	sp, #20
 802524c:	af00      	add	r7, sp, #0
 802524e:	6078      	str	r0, [r7, #4]
 8025250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8025252:	2300      	movs	r3, #0
 8025254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8025256:	683b      	ldr	r3, [r7, #0]
 8025258:	681a      	ldr	r2, [r3, #0]
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 802525e:	683b      	ldr	r3, [r7, #0]
 8025260:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8025262:	683b      	ldr	r3, [r7, #0]
 8025264:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8025266:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8025268:	683b      	ldr	r3, [r7, #0]
 802526a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 802526c:	431a      	orrs	r2, r3
                       Command->CPSM);
 802526e:	683b      	ldr	r3, [r7, #0]
 8025270:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8025272:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8025274:	68fa      	ldr	r2, [r7, #12]
 8025276:	4313      	orrs	r3, r2
 8025278:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 802527a:	687b      	ldr	r3, [r7, #4]
 802527c:	68da      	ldr	r2, [r3, #12]
 802527e:	4b06      	ldr	r3, [pc, #24]	@ (8025298 <SDMMC_SendCommand+0x50>)
 8025280:	4013      	ands	r3, r2
 8025282:	68fa      	ldr	r2, [r7, #12]
 8025284:	431a      	orrs	r2, r3
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802528a:	2300      	movs	r3, #0
}
 802528c:	4618      	mov	r0, r3
 802528e:	3714      	adds	r7, #20
 8025290:	46bd      	mov	sp, r7
 8025292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025296:	4770      	bx	lr
 8025298:	fffee0c0 	.word	0xfffee0c0

0802529c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 802529c:	b480      	push	{r7}
 802529e:	b083      	sub	sp, #12
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80252a4:	687b      	ldr	r3, [r7, #4]
 80252a6:	691b      	ldr	r3, [r3, #16]
 80252a8:	b2db      	uxtb	r3, r3
}
 80252aa:	4618      	mov	r0, r3
 80252ac:	370c      	adds	r7, #12
 80252ae:	46bd      	mov	sp, r7
 80252b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252b4:	4770      	bx	lr

080252b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80252b6:	b480      	push	{r7}
 80252b8:	b085      	sub	sp, #20
 80252ba:	af00      	add	r7, sp, #0
 80252bc:	6078      	str	r0, [r7, #4]
 80252be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	3314      	adds	r3, #20
 80252c4:	461a      	mov	r2, r3
 80252c6:	683b      	ldr	r3, [r7, #0]
 80252c8:	4413      	add	r3, r2
 80252ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80252cc:	68fb      	ldr	r3, [r7, #12]
 80252ce:	681b      	ldr	r3, [r3, #0]
}
 80252d0:	4618      	mov	r0, r3
 80252d2:	3714      	adds	r7, #20
 80252d4:	46bd      	mov	sp, r7
 80252d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252da:	4770      	bx	lr

080252dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80252dc:	b480      	push	{r7}
 80252de:	b085      	sub	sp, #20
 80252e0:	af00      	add	r7, sp, #0
 80252e2:	6078      	str	r0, [r7, #4]
 80252e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80252e6:	2300      	movs	r3, #0
 80252e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80252ea:	683b      	ldr	r3, [r7, #0]
 80252ec:	681a      	ldr	r2, [r3, #0]
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80252f2:	683b      	ldr	r3, [r7, #0]
 80252f4:	685a      	ldr	r2, [r3, #4]
 80252f6:	687b      	ldr	r3, [r7, #4]
 80252f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80252fa:	683b      	ldr	r3, [r7, #0]
 80252fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80252fe:	683b      	ldr	r3, [r7, #0]
 8025300:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025302:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8025304:	683b      	ldr	r3, [r7, #0]
 8025306:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8025308:	431a      	orrs	r2, r3
                       Data->DPSM);
 802530a:	683b      	ldr	r3, [r7, #0]
 802530c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 802530e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025310:	68fa      	ldr	r2, [r7, #12]
 8025312:	4313      	orrs	r3, r2
 8025314:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802531a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 802531e:	68fb      	ldr	r3, [r7, #12]
 8025320:	431a      	orrs	r2, r3
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8025326:	2300      	movs	r3, #0

}
 8025328:	4618      	mov	r0, r3
 802532a:	3714      	adds	r7, #20
 802532c:	46bd      	mov	sp, r7
 802532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025332:	4770      	bx	lr

08025334 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8025334:	b580      	push	{r7, lr}
 8025336:	b088      	sub	sp, #32
 8025338:	af00      	add	r7, sp, #0
 802533a:	6078      	str	r0, [r7, #4]
 802533c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 802533e:	683b      	ldr	r3, [r7, #0]
 8025340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8025342:	2310      	movs	r3, #16
 8025344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802534a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802534c:	2300      	movs	r3, #0
 802534e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025356:	f107 0308 	add.w	r3, r7, #8
 802535a:	4619      	mov	r1, r3
 802535c:	6878      	ldr	r0, [r7, #4]
 802535e:	f7ff ff73 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8025362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025366:	2110      	movs	r1, #16
 8025368:	6878      	ldr	r0, [r7, #4]
 802536a:	f000 fa5f 	bl	802582c <SDMMC_GetCmdResp1>
 802536e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025370:	69fb      	ldr	r3, [r7, #28]
}
 8025372:	4618      	mov	r0, r3
 8025374:	3720      	adds	r7, #32
 8025376:	46bd      	mov	sp, r7
 8025378:	bd80      	pop	{r7, pc}

0802537a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 802537a:	b580      	push	{r7, lr}
 802537c:	b088      	sub	sp, #32
 802537e:	af00      	add	r7, sp, #0
 8025380:	6078      	str	r0, [r7, #4]
 8025382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8025384:	683b      	ldr	r3, [r7, #0]
 8025386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8025388:	2311      	movs	r3, #17
 802538a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802538c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025392:	2300      	movs	r3, #0
 8025394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802539a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802539c:	f107 0308 	add.w	r3, r7, #8
 80253a0:	4619      	mov	r1, r3
 80253a2:	6878      	ldr	r0, [r7, #4]
 80253a4:	f7ff ff50 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80253a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80253ac:	2111      	movs	r1, #17
 80253ae:	6878      	ldr	r0, [r7, #4]
 80253b0:	f000 fa3c 	bl	802582c <SDMMC_GetCmdResp1>
 80253b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80253b6:	69fb      	ldr	r3, [r7, #28]
}
 80253b8:	4618      	mov	r0, r3
 80253ba:	3720      	adds	r7, #32
 80253bc:	46bd      	mov	sp, r7
 80253be:	bd80      	pop	{r7, pc}

080253c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80253c0:	b580      	push	{r7, lr}
 80253c2:	b088      	sub	sp, #32
 80253c4:	af00      	add	r7, sp, #0
 80253c6:	6078      	str	r0, [r7, #4]
 80253c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80253ca:	683b      	ldr	r3, [r7, #0]
 80253cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80253ce:	2312      	movs	r3, #18
 80253d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80253d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80253d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80253d8:	2300      	movs	r3, #0
 80253da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80253dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80253e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80253e2:	f107 0308 	add.w	r3, r7, #8
 80253e6:	4619      	mov	r1, r3
 80253e8:	6878      	ldr	r0, [r7, #4]
 80253ea:	f7ff ff2d 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80253ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80253f2:	2112      	movs	r1, #18
 80253f4:	6878      	ldr	r0, [r7, #4]
 80253f6:	f000 fa19 	bl	802582c <SDMMC_GetCmdResp1>
 80253fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80253fc:	69fb      	ldr	r3, [r7, #28]
}
 80253fe:	4618      	mov	r0, r3
 8025400:	3720      	adds	r7, #32
 8025402:	46bd      	mov	sp, r7
 8025404:	bd80      	pop	{r7, pc}

08025406 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8025406:	b580      	push	{r7, lr}
 8025408:	b088      	sub	sp, #32
 802540a:	af00      	add	r7, sp, #0
 802540c:	6078      	str	r0, [r7, #4]
 802540e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8025410:	683b      	ldr	r3, [r7, #0]
 8025412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8025414:	2318      	movs	r3, #24
 8025416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802541c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802541e:	2300      	movs	r3, #0
 8025420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025428:	f107 0308 	add.w	r3, r7, #8
 802542c:	4619      	mov	r1, r3
 802542e:	6878      	ldr	r0, [r7, #4]
 8025430:	f7ff ff0a 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8025434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025438:	2118      	movs	r1, #24
 802543a:	6878      	ldr	r0, [r7, #4]
 802543c:	f000 f9f6 	bl	802582c <SDMMC_GetCmdResp1>
 8025440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025442:	69fb      	ldr	r3, [r7, #28]
}
 8025444:	4618      	mov	r0, r3
 8025446:	3720      	adds	r7, #32
 8025448:	46bd      	mov	sp, r7
 802544a:	bd80      	pop	{r7, pc}

0802544c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 802544c:	b580      	push	{r7, lr}
 802544e:	b088      	sub	sp, #32
 8025450:	af00      	add	r7, sp, #0
 8025452:	6078      	str	r0, [r7, #4]
 8025454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8025456:	683b      	ldr	r3, [r7, #0]
 8025458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 802545a:	2319      	movs	r3, #25
 802545c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802545e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025464:	2300      	movs	r3, #0
 8025466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802546c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802546e:	f107 0308 	add.w	r3, r7, #8
 8025472:	4619      	mov	r1, r3
 8025474:	6878      	ldr	r0, [r7, #4]
 8025476:	f7ff fee7 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 802547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802547e:	2119      	movs	r1, #25
 8025480:	6878      	ldr	r0, [r7, #4]
 8025482:	f000 f9d3 	bl	802582c <SDMMC_GetCmdResp1>
 8025486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025488:	69fb      	ldr	r3, [r7, #28]
}
 802548a:	4618      	mov	r0, r3
 802548c:	3720      	adds	r7, #32
 802548e:	46bd      	mov	sp, r7
 8025490:	bd80      	pop	{r7, pc}
	...

08025494 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8025494:	b580      	push	{r7, lr}
 8025496:	b088      	sub	sp, #32
 8025498:	af00      	add	r7, sp, #0
 802549a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 802549c:	2300      	movs	r3, #0
 802549e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80254a0:	230c      	movs	r3, #12
 80254a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254aa:	2300      	movs	r3, #0
 80254ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80254b4:	687b      	ldr	r3, [r7, #4]
 80254b6:	68db      	ldr	r3, [r3, #12]
 80254b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	68db      	ldr	r3, [r3, #12]
 80254c4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80254cc:	f107 0308 	add.w	r3, r7, #8
 80254d0:	4619      	mov	r1, r3
 80254d2:	6878      	ldr	r0, [r7, #4]
 80254d4:	f7ff feb8 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80254d8:	4a0b      	ldr	r2, [pc, #44]	@ (8025508 <SDMMC_CmdStopTransfer+0x74>)
 80254da:	210c      	movs	r1, #12
 80254dc:	6878      	ldr	r0, [r7, #4]
 80254de:	f000 f9a5 	bl	802582c <SDMMC_GetCmdResp1>
 80254e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	68db      	ldr	r3, [r3, #12]
 80254e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80254ec:	687b      	ldr	r3, [r7, #4]
 80254ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80254f0:	69fb      	ldr	r3, [r7, #28]
 80254f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80254f6:	d101      	bne.n	80254fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80254f8:	2300      	movs	r3, #0
 80254fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80254fc:	69fb      	ldr	r3, [r7, #28]
}
 80254fe:	4618      	mov	r0, r3
 8025500:	3720      	adds	r7, #32
 8025502:	46bd      	mov	sp, r7
 8025504:	bd80      	pop	{r7, pc}
 8025506:	bf00      	nop
 8025508:	05f5e100 	.word	0x05f5e100

0802550c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 802550c:	b580      	push	{r7, lr}
 802550e:	b088      	sub	sp, #32
 8025510:	af00      	add	r7, sp, #0
 8025512:	6078      	str	r0, [r7, #4]
 8025514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8025516:	683b      	ldr	r3, [r7, #0]
 8025518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 802551a:	2307      	movs	r3, #7
 802551c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802551e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025524:	2300      	movs	r3, #0
 8025526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802552c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802552e:	f107 0308 	add.w	r3, r7, #8
 8025532:	4619      	mov	r1, r3
 8025534:	6878      	ldr	r0, [r7, #4]
 8025536:	f7ff fe87 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 802553a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802553e:	2107      	movs	r1, #7
 8025540:	6878      	ldr	r0, [r7, #4]
 8025542:	f000 f973 	bl	802582c <SDMMC_GetCmdResp1>
 8025546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025548:	69fb      	ldr	r3, [r7, #28]
}
 802554a:	4618      	mov	r0, r3
 802554c:	3720      	adds	r7, #32
 802554e:	46bd      	mov	sp, r7
 8025550:	bd80      	pop	{r7, pc}

08025552 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8025552:	b580      	push	{r7, lr}
 8025554:	b088      	sub	sp, #32
 8025556:	af00      	add	r7, sp, #0
 8025558:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 802555a:	2300      	movs	r3, #0
 802555c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 802555e:	2300      	movs	r3, #0
 8025560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8025562:	2300      	movs	r3, #0
 8025564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025566:	2300      	movs	r3, #0
 8025568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802556a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802556e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025570:	f107 0308 	add.w	r3, r7, #8
 8025574:	4619      	mov	r1, r3
 8025576:	6878      	ldr	r0, [r7, #4]
 8025578:	f7ff fe66 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 802557c:	6878      	ldr	r0, [r7, #4]
 802557e:	f000 fb97 	bl	8025cb0 <SDMMC_GetCmdError>
 8025582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025584:	69fb      	ldr	r3, [r7, #28]
}
 8025586:	4618      	mov	r0, r3
 8025588:	3720      	adds	r7, #32
 802558a:	46bd      	mov	sp, r7
 802558c:	bd80      	pop	{r7, pc}

0802558e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 802558e:	b580      	push	{r7, lr}
 8025590:	b088      	sub	sp, #32
 8025592:	af00      	add	r7, sp, #0
 8025594:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8025596:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 802559a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 802559c:	2308      	movs	r3, #8
 802559e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255a6:	2300      	movs	r3, #0
 80255a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255b0:	f107 0308 	add.w	r3, r7, #8
 80255b4:	4619      	mov	r1, r3
 80255b6:	6878      	ldr	r0, [r7, #4]
 80255b8:	f7ff fe46 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80255bc:	6878      	ldr	r0, [r7, #4]
 80255be:	f000 fb29 	bl	8025c14 <SDMMC_GetCmdResp7>
 80255c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80255c4:	69fb      	ldr	r3, [r7, #28]
}
 80255c6:	4618      	mov	r0, r3
 80255c8:	3720      	adds	r7, #32
 80255ca:	46bd      	mov	sp, r7
 80255cc:	bd80      	pop	{r7, pc}

080255ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80255ce:	b580      	push	{r7, lr}
 80255d0:	b088      	sub	sp, #32
 80255d2:	af00      	add	r7, sp, #0
 80255d4:	6078      	str	r0, [r7, #4]
 80255d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80255d8:	683b      	ldr	r3, [r7, #0]
 80255da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80255dc:	2337      	movs	r3, #55	@ 0x37
 80255de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255e6:	2300      	movs	r3, #0
 80255e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255f0:	f107 0308 	add.w	r3, r7, #8
 80255f4:	4619      	mov	r1, r3
 80255f6:	6878      	ldr	r0, [r7, #4]
 80255f8:	f7ff fe26 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80255fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025600:	2137      	movs	r1, #55	@ 0x37
 8025602:	6878      	ldr	r0, [r7, #4]
 8025604:	f000 f912 	bl	802582c <SDMMC_GetCmdResp1>
 8025608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802560a:	69fb      	ldr	r3, [r7, #28]
}
 802560c:	4618      	mov	r0, r3
 802560e:	3720      	adds	r7, #32
 8025610:	46bd      	mov	sp, r7
 8025612:	bd80      	pop	{r7, pc}

08025614 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8025614:	b580      	push	{r7, lr}
 8025616:	b088      	sub	sp, #32
 8025618:	af00      	add	r7, sp, #0
 802561a:	6078      	str	r0, [r7, #4]
 802561c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802561e:	683b      	ldr	r3, [r7, #0]
 8025620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8025622:	2329      	movs	r3, #41	@ 0x29
 8025624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802562a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802562c:	2300      	movs	r3, #0
 802562e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025636:	f107 0308 	add.w	r3, r7, #8
 802563a:	4619      	mov	r1, r3
 802563c:	6878      	ldr	r0, [r7, #4]
 802563e:	f7ff fe03 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8025642:	6878      	ldr	r0, [r7, #4]
 8025644:	f000 fa2e 	bl	8025aa4 <SDMMC_GetCmdResp3>
 8025648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802564a:	69fb      	ldr	r3, [r7, #28]
}
 802564c:	4618      	mov	r0, r3
 802564e:	3720      	adds	r7, #32
 8025650:	46bd      	mov	sp, r7
 8025652:	bd80      	pop	{r7, pc}

08025654 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8025654:	b580      	push	{r7, lr}
 8025656:	b088      	sub	sp, #32
 8025658:	af00      	add	r7, sp, #0
 802565a:	6078      	str	r0, [r7, #4]
 802565c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 802565e:	683b      	ldr	r3, [r7, #0]
 8025660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8025662:	2306      	movs	r3, #6
 8025664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802566a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802566c:	2300      	movs	r3, #0
 802566e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025676:	f107 0308 	add.w	r3, r7, #8
 802567a:	4619      	mov	r1, r3
 802567c:	6878      	ldr	r0, [r7, #4]
 802567e:	f7ff fde3 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8025682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025686:	2106      	movs	r1, #6
 8025688:	6878      	ldr	r0, [r7, #4]
 802568a:	f000 f8cf 	bl	802582c <SDMMC_GetCmdResp1>
 802568e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025690:	69fb      	ldr	r3, [r7, #28]
}
 8025692:	4618      	mov	r0, r3
 8025694:	3720      	adds	r7, #32
 8025696:	46bd      	mov	sp, r7
 8025698:	bd80      	pop	{r7, pc}

0802569a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802569a:	b580      	push	{r7, lr}
 802569c:	b088      	sub	sp, #32
 802569e:	af00      	add	r7, sp, #0
 80256a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80256a2:	2300      	movs	r3, #0
 80256a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80256a6:	2333      	movs	r3, #51	@ 0x33
 80256a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256b0:	2300      	movs	r3, #0
 80256b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80256ba:	f107 0308 	add.w	r3, r7, #8
 80256be:	4619      	mov	r1, r3
 80256c0:	6878      	ldr	r0, [r7, #4]
 80256c2:	f7ff fdc1 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80256c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80256ca:	2133      	movs	r1, #51	@ 0x33
 80256cc:	6878      	ldr	r0, [r7, #4]
 80256ce:	f000 f8ad 	bl	802582c <SDMMC_GetCmdResp1>
 80256d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80256d4:	69fb      	ldr	r3, [r7, #28]
}
 80256d6:	4618      	mov	r0, r3
 80256d8:	3720      	adds	r7, #32
 80256da:	46bd      	mov	sp, r7
 80256dc:	bd80      	pop	{r7, pc}

080256de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80256de:	b580      	push	{r7, lr}
 80256e0:	b088      	sub	sp, #32
 80256e2:	af00      	add	r7, sp, #0
 80256e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80256e6:	2300      	movs	r3, #0
 80256e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80256ea:	2302      	movs	r3, #2
 80256ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80256ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80256f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256f4:	2300      	movs	r3, #0
 80256f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80256fe:	f107 0308 	add.w	r3, r7, #8
 8025702:	4619      	mov	r1, r3
 8025704:	6878      	ldr	r0, [r7, #4]
 8025706:	f7ff fd9f 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802570a:	6878      	ldr	r0, [r7, #4]
 802570c:	f000 f980 	bl	8025a10 <SDMMC_GetCmdResp2>
 8025710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025712:	69fb      	ldr	r3, [r7, #28]
}
 8025714:	4618      	mov	r0, r3
 8025716:	3720      	adds	r7, #32
 8025718:	46bd      	mov	sp, r7
 802571a:	bd80      	pop	{r7, pc}

0802571c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802571c:	b580      	push	{r7, lr}
 802571e:	b088      	sub	sp, #32
 8025720:	af00      	add	r7, sp, #0
 8025722:	6078      	str	r0, [r7, #4]
 8025724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8025726:	683b      	ldr	r3, [r7, #0]
 8025728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802572a:	2309      	movs	r3, #9
 802572c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802572e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8025732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025734:	2300      	movs	r3, #0
 8025736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802573c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802573e:	f107 0308 	add.w	r3, r7, #8
 8025742:	4619      	mov	r1, r3
 8025744:	6878      	ldr	r0, [r7, #4]
 8025746:	f7ff fd7f 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802574a:	6878      	ldr	r0, [r7, #4]
 802574c:	f000 f960 	bl	8025a10 <SDMMC_GetCmdResp2>
 8025750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025752:	69fb      	ldr	r3, [r7, #28]
}
 8025754:	4618      	mov	r0, r3
 8025756:	3720      	adds	r7, #32
 8025758:	46bd      	mov	sp, r7
 802575a:	bd80      	pop	{r7, pc}

0802575c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 802575c:	b580      	push	{r7, lr}
 802575e:	b088      	sub	sp, #32
 8025760:	af00      	add	r7, sp, #0
 8025762:	6078      	str	r0, [r7, #4]
 8025764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8025766:	2300      	movs	r3, #0
 8025768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802576a:	2303      	movs	r3, #3
 802576c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802576e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025774:	2300      	movs	r3, #0
 8025776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802577c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802577e:	f107 0308 	add.w	r3, r7, #8
 8025782:	4619      	mov	r1, r3
 8025784:	6878      	ldr	r0, [r7, #4]
 8025786:	f7ff fd5f 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802578a:	683a      	ldr	r2, [r7, #0]
 802578c:	2103      	movs	r1, #3
 802578e:	6878      	ldr	r0, [r7, #4]
 8025790:	f000 f9c8 	bl	8025b24 <SDMMC_GetCmdResp6>
 8025794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025796:	69fb      	ldr	r3, [r7, #28]
}
 8025798:	4618      	mov	r0, r3
 802579a:	3720      	adds	r7, #32
 802579c:	46bd      	mov	sp, r7
 802579e:	bd80      	pop	{r7, pc}

080257a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80257a0:	b580      	push	{r7, lr}
 80257a2:	b088      	sub	sp, #32
 80257a4:	af00      	add	r7, sp, #0
 80257a6:	6078      	str	r0, [r7, #4]
 80257a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80257aa:	683b      	ldr	r3, [r7, #0]
 80257ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80257ae:	230d      	movs	r3, #13
 80257b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257b8:	2300      	movs	r3, #0
 80257ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80257bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80257c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80257c2:	f107 0308 	add.w	r3, r7, #8
 80257c6:	4619      	mov	r1, r3
 80257c8:	6878      	ldr	r0, [r7, #4]
 80257ca:	f7ff fd3d 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80257ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80257d2:	210d      	movs	r1, #13
 80257d4:	6878      	ldr	r0, [r7, #4]
 80257d6:	f000 f829 	bl	802582c <SDMMC_GetCmdResp1>
 80257da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80257dc:	69fb      	ldr	r3, [r7, #28]
}
 80257de:	4618      	mov	r0, r3
 80257e0:	3720      	adds	r7, #32
 80257e2:	46bd      	mov	sp, r7
 80257e4:	bd80      	pop	{r7, pc}

080257e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80257e6:	b580      	push	{r7, lr}
 80257e8:	b088      	sub	sp, #32
 80257ea:	af00      	add	r7, sp, #0
 80257ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80257ee:	2300      	movs	r3, #0
 80257f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80257f2:	230d      	movs	r3, #13
 80257f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257fc:	2300      	movs	r3, #0
 80257fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025806:	f107 0308 	add.w	r3, r7, #8
 802580a:	4619      	mov	r1, r3
 802580c:	6878      	ldr	r0, [r7, #4]
 802580e:	f7ff fd1b 	bl	8025248 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8025812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025816:	210d      	movs	r1, #13
 8025818:	6878      	ldr	r0, [r7, #4]
 802581a:	f000 f807 	bl	802582c <SDMMC_GetCmdResp1>
 802581e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025820:	69fb      	ldr	r3, [r7, #28]
}
 8025822:	4618      	mov	r0, r3
 8025824:	3720      	adds	r7, #32
 8025826:	46bd      	mov	sp, r7
 8025828:	bd80      	pop	{r7, pc}
	...

0802582c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 802582c:	b580      	push	{r7, lr}
 802582e:	b088      	sub	sp, #32
 8025830:	af00      	add	r7, sp, #0
 8025832:	60f8      	str	r0, [r7, #12]
 8025834:	460b      	mov	r3, r1
 8025836:	607a      	str	r2, [r7, #4]
 8025838:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 802583a:	4b70      	ldr	r3, [pc, #448]	@ (80259fc <SDMMC_GetCmdResp1+0x1d0>)
 802583c:	681b      	ldr	r3, [r3, #0]
 802583e:	4a70      	ldr	r2, [pc, #448]	@ (8025a00 <SDMMC_GetCmdResp1+0x1d4>)
 8025840:	fba2 2303 	umull	r2, r3, r2, r3
 8025844:	0a5a      	lsrs	r2, r3, #9
 8025846:	687b      	ldr	r3, [r7, #4]
 8025848:	fb02 f303 	mul.w	r3, r2, r3
 802584c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 802584e:	69fb      	ldr	r3, [r7, #28]
 8025850:	1e5a      	subs	r2, r3, #1
 8025852:	61fa      	str	r2, [r7, #28]
 8025854:	2b00      	cmp	r3, #0
 8025856:	d102      	bne.n	802585e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025858:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802585c:	e0c9      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 802585e:	68fb      	ldr	r3, [r7, #12]
 8025860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025862:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8025864:	69ba      	ldr	r2, [r7, #24]
 8025866:	4b67      	ldr	r3, [pc, #412]	@ (8025a04 <SDMMC_GetCmdResp1+0x1d8>)
 8025868:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 802586a:	2b00      	cmp	r3, #0
 802586c:	d0ef      	beq.n	802584e <SDMMC_GetCmdResp1+0x22>
 802586e:	69bb      	ldr	r3, [r7, #24]
 8025870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025874:	2b00      	cmp	r3, #0
 8025876:	d1ea      	bne.n	802584e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025878:	68fb      	ldr	r3, [r7, #12]
 802587a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802587c:	f003 0304 	and.w	r3, r3, #4
 8025880:	2b00      	cmp	r3, #0
 8025882:	d004      	beq.n	802588e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	2204      	movs	r2, #4
 8025888:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802588a:	2304      	movs	r3, #4
 802588c:	e0b1      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802588e:	68fb      	ldr	r3, [r7, #12]
 8025890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025892:	f003 0301 	and.w	r3, r3, #1
 8025896:	2b00      	cmp	r3, #0
 8025898:	d004      	beq.n	80258a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802589a:	68fb      	ldr	r3, [r7, #12]
 802589c:	2201      	movs	r2, #1
 802589e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80258a0:	2301      	movs	r3, #1
 80258a2:	e0a6      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80258a4:	68fb      	ldr	r3, [r7, #12]
 80258a6:	4a58      	ldr	r2, [pc, #352]	@ (8025a08 <SDMMC_GetCmdResp1+0x1dc>)
 80258a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80258aa:	68f8      	ldr	r0, [r7, #12]
 80258ac:	f7ff fcf6 	bl	802529c <SDMMC_GetCommandResponse>
 80258b0:	4603      	mov	r3, r0
 80258b2:	461a      	mov	r2, r3
 80258b4:	7afb      	ldrb	r3, [r7, #11]
 80258b6:	4293      	cmp	r3, r2
 80258b8:	d001      	beq.n	80258be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80258ba:	2301      	movs	r3, #1
 80258bc:	e099      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80258be:	2100      	movs	r1, #0
 80258c0:	68f8      	ldr	r0, [r7, #12]
 80258c2:	f7ff fcf8 	bl	80252b6 <SDMMC_GetResponse>
 80258c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80258c8:	697a      	ldr	r2, [r7, #20]
 80258ca:	4b50      	ldr	r3, [pc, #320]	@ (8025a0c <SDMMC_GetCmdResp1+0x1e0>)
 80258cc:	4013      	ands	r3, r2
 80258ce:	2b00      	cmp	r3, #0
 80258d0:	d101      	bne.n	80258d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80258d2:	2300      	movs	r3, #0
 80258d4:	e08d      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80258d6:	697b      	ldr	r3, [r7, #20]
 80258d8:	2b00      	cmp	r3, #0
 80258da:	da02      	bge.n	80258e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80258dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80258e0:	e087      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80258e2:	697b      	ldr	r3, [r7, #20]
 80258e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80258e8:	2b00      	cmp	r3, #0
 80258ea:	d001      	beq.n	80258f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80258ec:	2340      	movs	r3, #64	@ 0x40
 80258ee:	e080      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80258f0:	697b      	ldr	r3, [r7, #20]
 80258f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80258f6:	2b00      	cmp	r3, #0
 80258f8:	d001      	beq.n	80258fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80258fa:	2380      	movs	r3, #128	@ 0x80
 80258fc:	e079      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80258fe:	697b      	ldr	r3, [r7, #20]
 8025900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8025904:	2b00      	cmp	r3, #0
 8025906:	d002      	beq.n	802590e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8025908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802590c:	e071      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 802590e:	697b      	ldr	r3, [r7, #20]
 8025910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8025914:	2b00      	cmp	r3, #0
 8025916:	d002      	beq.n	802591e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8025918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802591c:	e069      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802591e:	697b      	ldr	r3, [r7, #20]
 8025920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8025924:	2b00      	cmp	r3, #0
 8025926:	d002      	beq.n	802592e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8025928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802592c:	e061      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802592e:	697b      	ldr	r3, [r7, #20]
 8025930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8025934:	2b00      	cmp	r3, #0
 8025936:	d002      	beq.n	802593e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8025938:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802593c:	e059      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802593e:	697b      	ldr	r3, [r7, #20]
 8025940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8025944:	2b00      	cmp	r3, #0
 8025946:	d002      	beq.n	802594e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802594c:	e051      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802594e:	697b      	ldr	r3, [r7, #20]
 8025950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8025954:	2b00      	cmp	r3, #0
 8025956:	d002      	beq.n	802595e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802595c:	e049      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802595e:	697b      	ldr	r3, [r7, #20]
 8025960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8025964:	2b00      	cmp	r3, #0
 8025966:	d002      	beq.n	802596e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8025968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 802596c:	e041      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802596e:	697b      	ldr	r3, [r7, #20]
 8025970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8025974:	2b00      	cmp	r3, #0
 8025976:	d002      	beq.n	802597e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8025978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802597c:	e039      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802597e:	697b      	ldr	r3, [r7, #20]
 8025980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8025984:	2b00      	cmp	r3, #0
 8025986:	d002      	beq.n	802598e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8025988:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 802598c:	e031      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802598e:	697b      	ldr	r3, [r7, #20]
 8025990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025994:	2b00      	cmp	r3, #0
 8025996:	d002      	beq.n	802599e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8025998:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802599c:	e029      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802599e:	697b      	ldr	r3, [r7, #20]
 80259a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	d002      	beq.n	80259ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80259a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80259ac:	e021      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80259ae:	697b      	ldr	r3, [r7, #20]
 80259b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80259b4:	2b00      	cmp	r3, #0
 80259b6:	d002      	beq.n	80259be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80259b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80259bc:	e019      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80259be:	697b      	ldr	r3, [r7, #20]
 80259c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	d002      	beq.n	80259ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80259c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80259cc:	e011      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80259ce:	697b      	ldr	r3, [r7, #20]
 80259d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	d002      	beq.n	80259de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80259d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80259dc:	e009      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80259de:	697b      	ldr	r3, [r7, #20]
 80259e0:	f003 0308 	and.w	r3, r3, #8
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d002      	beq.n	80259ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80259e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80259ec:	e001      	b.n	80259f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80259ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80259f2:	4618      	mov	r0, r3
 80259f4:	3720      	adds	r7, #32
 80259f6:	46bd      	mov	sp, r7
 80259f8:	bd80      	pop	{r7, pc}
 80259fa:	bf00      	nop
 80259fc:	2400001c 	.word	0x2400001c
 8025a00:	10624dd3 	.word	0x10624dd3
 8025a04:	00200045 	.word	0x00200045
 8025a08:	002000c5 	.word	0x002000c5
 8025a0c:	fdffe008 	.word	0xfdffe008

08025a10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8025a10:	b480      	push	{r7}
 8025a12:	b085      	sub	sp, #20
 8025a14:	af00      	add	r7, sp, #0
 8025a16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025a18:	4b1f      	ldr	r3, [pc, #124]	@ (8025a98 <SDMMC_GetCmdResp2+0x88>)
 8025a1a:	681b      	ldr	r3, [r3, #0]
 8025a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8025a9c <SDMMC_GetCmdResp2+0x8c>)
 8025a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8025a22:	0a5b      	lsrs	r3, r3, #9
 8025a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025a28:	fb02 f303 	mul.w	r3, r2, r3
 8025a2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025a2e:	68fb      	ldr	r3, [r7, #12]
 8025a30:	1e5a      	subs	r2, r3, #1
 8025a32:	60fa      	str	r2, [r7, #12]
 8025a34:	2b00      	cmp	r3, #0
 8025a36:	d102      	bne.n	8025a3e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025a38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025a3c:	e026      	b.n	8025a8c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8025a3e:	687b      	ldr	r3, [r7, #4]
 8025a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025a44:	68bb      	ldr	r3, [r7, #8]
 8025a46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025a4a:	2b00      	cmp	r3, #0
 8025a4c:	d0ef      	beq.n	8025a2e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025a4e:	68bb      	ldr	r3, [r7, #8]
 8025a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	d1ea      	bne.n	8025a2e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a5c:	f003 0304 	and.w	r3, r3, #4
 8025a60:	2b00      	cmp	r3, #0
 8025a62:	d004      	beq.n	8025a6e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025a64:	687b      	ldr	r3, [r7, #4]
 8025a66:	2204      	movs	r2, #4
 8025a68:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025a6a:	2304      	movs	r3, #4
 8025a6c:	e00e      	b.n	8025a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a72:	f003 0301 	and.w	r3, r3, #1
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d004      	beq.n	8025a84 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	2201      	movs	r2, #1
 8025a7e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025a80:	2301      	movs	r3, #1
 8025a82:	e003      	b.n	8025a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	4a06      	ldr	r2, [pc, #24]	@ (8025aa0 <SDMMC_GetCmdResp2+0x90>)
 8025a88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025a8a:	2300      	movs	r3, #0
}
 8025a8c:	4618      	mov	r0, r3
 8025a8e:	3714      	adds	r7, #20
 8025a90:	46bd      	mov	sp, r7
 8025a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a96:	4770      	bx	lr
 8025a98:	2400001c 	.word	0x2400001c
 8025a9c:	10624dd3 	.word	0x10624dd3
 8025aa0:	002000c5 	.word	0x002000c5

08025aa4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8025aa4:	b480      	push	{r7}
 8025aa6:	b085      	sub	sp, #20
 8025aa8:	af00      	add	r7, sp, #0
 8025aaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025aac:	4b1a      	ldr	r3, [pc, #104]	@ (8025b18 <SDMMC_GetCmdResp3+0x74>)
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8025b1c <SDMMC_GetCmdResp3+0x78>)
 8025ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8025ab6:	0a5b      	lsrs	r3, r3, #9
 8025ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025abc:	fb02 f303 	mul.w	r3, r2, r3
 8025ac0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025ac2:	68fb      	ldr	r3, [r7, #12]
 8025ac4:	1e5a      	subs	r2, r3, #1
 8025ac6:	60fa      	str	r2, [r7, #12]
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d102      	bne.n	8025ad2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025ad0:	e01b      	b.n	8025b0a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ad6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025ad8:	68bb      	ldr	r3, [r7, #8]
 8025ada:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025ade:	2b00      	cmp	r3, #0
 8025ae0:	d0ef      	beq.n	8025ac2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025ae2:	68bb      	ldr	r3, [r7, #8]
 8025ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	d1ea      	bne.n	8025ac2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025aec:	687b      	ldr	r3, [r7, #4]
 8025aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025af0:	f003 0304 	and.w	r3, r3, #4
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d004      	beq.n	8025b02 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	2204      	movs	r2, #4
 8025afc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025afe:	2304      	movs	r3, #4
 8025b00:	e003      	b.n	8025b0a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025b02:	687b      	ldr	r3, [r7, #4]
 8025b04:	4a06      	ldr	r2, [pc, #24]	@ (8025b20 <SDMMC_GetCmdResp3+0x7c>)
 8025b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025b08:	2300      	movs	r3, #0
}
 8025b0a:	4618      	mov	r0, r3
 8025b0c:	3714      	adds	r7, #20
 8025b0e:	46bd      	mov	sp, r7
 8025b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b14:	4770      	bx	lr
 8025b16:	bf00      	nop
 8025b18:	2400001c 	.word	0x2400001c
 8025b1c:	10624dd3 	.word	0x10624dd3
 8025b20:	002000c5 	.word	0x002000c5

08025b24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8025b24:	b580      	push	{r7, lr}
 8025b26:	b088      	sub	sp, #32
 8025b28:	af00      	add	r7, sp, #0
 8025b2a:	60f8      	str	r0, [r7, #12]
 8025b2c:	460b      	mov	r3, r1
 8025b2e:	607a      	str	r2, [r7, #4]
 8025b30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025b32:	4b35      	ldr	r3, [pc, #212]	@ (8025c08 <SDMMC_GetCmdResp6+0xe4>)
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	4a35      	ldr	r2, [pc, #212]	@ (8025c0c <SDMMC_GetCmdResp6+0xe8>)
 8025b38:	fba2 2303 	umull	r2, r3, r2, r3
 8025b3c:	0a5b      	lsrs	r3, r3, #9
 8025b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025b42:	fb02 f303 	mul.w	r3, r2, r3
 8025b46:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025b48:	69fb      	ldr	r3, [r7, #28]
 8025b4a:	1e5a      	subs	r2, r3, #1
 8025b4c:	61fa      	str	r2, [r7, #28]
 8025b4e:	2b00      	cmp	r3, #0
 8025b50:	d102      	bne.n	8025b58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025b52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025b56:	e052      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8025b58:	68fb      	ldr	r3, [r7, #12]
 8025b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b5c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b5e:	69bb      	ldr	r3, [r7, #24]
 8025b60:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025b64:	2b00      	cmp	r3, #0
 8025b66:	d0ef      	beq.n	8025b48 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025b68:	69bb      	ldr	r3, [r7, #24]
 8025b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	d1ea      	bne.n	8025b48 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025b72:	68fb      	ldr	r3, [r7, #12]
 8025b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b76:	f003 0304 	and.w	r3, r3, #4
 8025b7a:	2b00      	cmp	r3, #0
 8025b7c:	d004      	beq.n	8025b88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025b7e:	68fb      	ldr	r3, [r7, #12]
 8025b80:	2204      	movs	r2, #4
 8025b82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025b84:	2304      	movs	r3, #4
 8025b86:	e03a      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025b88:	68fb      	ldr	r3, [r7, #12]
 8025b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b8c:	f003 0301 	and.w	r3, r3, #1
 8025b90:	2b00      	cmp	r3, #0
 8025b92:	d004      	beq.n	8025b9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025b94:	68fb      	ldr	r3, [r7, #12]
 8025b96:	2201      	movs	r2, #1
 8025b98:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025b9a:	2301      	movs	r3, #1
 8025b9c:	e02f      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8025b9e:	68f8      	ldr	r0, [r7, #12]
 8025ba0:	f7ff fb7c 	bl	802529c <SDMMC_GetCommandResponse>
 8025ba4:	4603      	mov	r3, r0
 8025ba6:	461a      	mov	r2, r3
 8025ba8:	7afb      	ldrb	r3, [r7, #11]
 8025baa:	4293      	cmp	r3, r2
 8025bac:	d001      	beq.n	8025bb2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025bae:	2301      	movs	r3, #1
 8025bb0:	e025      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025bb2:	68fb      	ldr	r3, [r7, #12]
 8025bb4:	4a16      	ldr	r2, [pc, #88]	@ (8025c10 <SDMMC_GetCmdResp6+0xec>)
 8025bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025bb8:	2100      	movs	r1, #0
 8025bba:	68f8      	ldr	r0, [r7, #12]
 8025bbc:	f7ff fb7b 	bl	80252b6 <SDMMC_GetResponse>
 8025bc0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8025bc2:	697b      	ldr	r3, [r7, #20]
 8025bc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d106      	bne.n	8025bda <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8025bcc:	697b      	ldr	r3, [r7, #20]
 8025bce:	0c1b      	lsrs	r3, r3, #16
 8025bd0:	b29a      	uxth	r2, r3
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8025bd6:	2300      	movs	r3, #0
 8025bd8:	e011      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8025bda:	697b      	ldr	r3, [r7, #20]
 8025bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	d002      	beq.n	8025bea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025be8:	e009      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8025bea:	697b      	ldr	r3, [r7, #20]
 8025bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	d002      	beq.n	8025bfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025bf8:	e001      	b.n	8025bfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025bfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025bfe:	4618      	mov	r0, r3
 8025c00:	3720      	adds	r7, #32
 8025c02:	46bd      	mov	sp, r7
 8025c04:	bd80      	pop	{r7, pc}
 8025c06:	bf00      	nop
 8025c08:	2400001c 	.word	0x2400001c
 8025c0c:	10624dd3 	.word	0x10624dd3
 8025c10:	002000c5 	.word	0x002000c5

08025c14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8025c14:	b480      	push	{r7}
 8025c16:	b085      	sub	sp, #20
 8025c18:	af00      	add	r7, sp, #0
 8025c1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025c1c:	4b22      	ldr	r3, [pc, #136]	@ (8025ca8 <SDMMC_GetCmdResp7+0x94>)
 8025c1e:	681b      	ldr	r3, [r3, #0]
 8025c20:	4a22      	ldr	r2, [pc, #136]	@ (8025cac <SDMMC_GetCmdResp7+0x98>)
 8025c22:	fba2 2303 	umull	r2, r3, r2, r3
 8025c26:	0a5b      	lsrs	r3, r3, #9
 8025c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025c2c:	fb02 f303 	mul.w	r3, r2, r3
 8025c30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025c32:	68fb      	ldr	r3, [r7, #12]
 8025c34:	1e5a      	subs	r2, r3, #1
 8025c36:	60fa      	str	r2, [r7, #12]
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d102      	bne.n	8025c42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025c3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025c40:	e02c      	b.n	8025c9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8025c42:	687b      	ldr	r3, [r7, #4]
 8025c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c46:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c48:	68bb      	ldr	r3, [r7, #8]
 8025c4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d0ef      	beq.n	8025c32 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025c52:	68bb      	ldr	r3, [r7, #8]
 8025c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d1ea      	bne.n	8025c32 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025c5c:	687b      	ldr	r3, [r7, #4]
 8025c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c60:	f003 0304 	and.w	r3, r3, #4
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	d004      	beq.n	8025c72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025c68:	687b      	ldr	r3, [r7, #4]
 8025c6a:	2204      	movs	r2, #4
 8025c6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025c6e:	2304      	movs	r3, #4
 8025c70:	e014      	b.n	8025c9c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c76:	f003 0301 	and.w	r3, r3, #1
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d004      	beq.n	8025c88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	2201      	movs	r2, #1
 8025c82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025c84:	2301      	movs	r3, #1
 8025c86:	e009      	b.n	8025c9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d002      	beq.n	8025c9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	2240      	movs	r2, #64	@ 0x40
 8025c98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025c9a:	2300      	movs	r3, #0

}
 8025c9c:	4618      	mov	r0, r3
 8025c9e:	3714      	adds	r7, #20
 8025ca0:	46bd      	mov	sp, r7
 8025ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ca6:	4770      	bx	lr
 8025ca8:	2400001c 	.word	0x2400001c
 8025cac:	10624dd3 	.word	0x10624dd3

08025cb0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8025cb0:	b480      	push	{r7}
 8025cb2:	b085      	sub	sp, #20
 8025cb4:	af00      	add	r7, sp, #0
 8025cb6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025cb8:	4b11      	ldr	r3, [pc, #68]	@ (8025d00 <SDMMC_GetCmdError+0x50>)
 8025cba:	681b      	ldr	r3, [r3, #0]
 8025cbc:	4a11      	ldr	r2, [pc, #68]	@ (8025d04 <SDMMC_GetCmdError+0x54>)
 8025cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8025cc2:	0a5b      	lsrs	r3, r3, #9
 8025cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025cc8:	fb02 f303 	mul.w	r3, r2, r3
 8025ccc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025cce:	68fb      	ldr	r3, [r7, #12]
 8025cd0:	1e5a      	subs	r2, r3, #1
 8025cd2:	60fa      	str	r2, [r7, #12]
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	d102      	bne.n	8025cde <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025cdc:	e009      	b.n	8025cf2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025ce6:	2b00      	cmp	r3, #0
 8025ce8:	d0f1      	beq.n	8025cce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025cea:	687b      	ldr	r3, [r7, #4]
 8025cec:	4a06      	ldr	r2, [pc, #24]	@ (8025d08 <SDMMC_GetCmdError+0x58>)
 8025cee:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8025cf0:	2300      	movs	r3, #0
}
 8025cf2:	4618      	mov	r0, r3
 8025cf4:	3714      	adds	r7, #20
 8025cf6:	46bd      	mov	sp, r7
 8025cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cfc:	4770      	bx	lr
 8025cfe:	bf00      	nop
 8025d00:	2400001c 	.word	0x2400001c
 8025d04:	10624dd3 	.word	0x10624dd3
 8025d08:	002000c5 	.word	0x002000c5

08025d0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8025d0c:	b580      	push	{r7, lr}
 8025d0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8025d10:	4904      	ldr	r1, [pc, #16]	@ (8025d24 <MX_FATFS_Init+0x18>)
 8025d12:	4805      	ldr	r0, [pc, #20]	@ (8025d28 <MX_FATFS_Init+0x1c>)
 8025d14:	f002 fc08 	bl	8028528 <FATFS_LinkDriver>
 8025d18:	4603      	mov	r3, r0
 8025d1a:	461a      	mov	r2, r3
 8025d1c:	4b03      	ldr	r3, [pc, #12]	@ (8025d2c <MX_FATFS_Init+0x20>)
 8025d1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8025d20:	bf00      	nop
 8025d22:	bd80      	pop	{r7, pc}
 8025d24:	24000420 	.word	0x24000420
 8025d28:	0802b618 	.word	0x0802b618
 8025d2c:	2400041c 	.word	0x2400041c

08025d30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8025d30:	b480      	push	{r7}
 8025d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8025d34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8025d36:	4618      	mov	r0, r3
 8025d38:	46bd      	mov	sp, r7
 8025d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d3e:	4770      	bx	lr

08025d40 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8025d40:	b580      	push	{r7, lr}
 8025d42:	b086      	sub	sp, #24
 8025d44:	af00      	add	r7, sp, #0
 8025d46:	60f8      	str	r0, [r7, #12]
 8025d48:	60b9      	str	r1, [r7, #8]
 8025d4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025d4c:	2300      	movs	r3, #0
 8025d4e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	68ba      	ldr	r2, [r7, #8]
 8025d54:	68f9      	ldr	r1, [r7, #12]
 8025d56:	4806      	ldr	r0, [pc, #24]	@ (8025d70 <BSP_SD_ReadBlocks_DMA+0x30>)
 8025d58:	f7fc fc16 	bl	8022588 <HAL_SD_ReadBlocks_DMA>
 8025d5c:	4603      	mov	r3, r0
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	d001      	beq.n	8025d66 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025d62:	2301      	movs	r3, #1
 8025d64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8025d68:	4618      	mov	r0, r3
 8025d6a:	3718      	adds	r7, #24
 8025d6c:	46bd      	mov	sp, r7
 8025d6e:	bd80      	pop	{r7, pc}
 8025d70:	240002fc 	.word	0x240002fc

08025d74 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8025d74:	b580      	push	{r7, lr}
 8025d76:	b086      	sub	sp, #24
 8025d78:	af00      	add	r7, sp, #0
 8025d7a:	60f8      	str	r0, [r7, #12]
 8025d7c:	60b9      	str	r1, [r7, #8]
 8025d7e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025d80:	2300      	movs	r3, #0
 8025d82:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	68ba      	ldr	r2, [r7, #8]
 8025d88:	68f9      	ldr	r1, [r7, #12]
 8025d8a:	4806      	ldr	r0, [pc, #24]	@ (8025da4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8025d8c:	f7fc fca4 	bl	80226d8 <HAL_SD_WriteBlocks_DMA>
 8025d90:	4603      	mov	r3, r0
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d001      	beq.n	8025d9a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025d96:	2301      	movs	r3, #1
 8025d98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8025d9c:	4618      	mov	r0, r3
 8025d9e:	3718      	adds	r7, #24
 8025da0:	46bd      	mov	sp, r7
 8025da2:	bd80      	pop	{r7, pc}
 8025da4:	240002fc 	.word	0x240002fc

08025da8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8025da8:	b580      	push	{r7, lr}
 8025daa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8025dac:	4805      	ldr	r0, [pc, #20]	@ (8025dc4 <BSP_SD_GetCardState+0x1c>)
 8025dae:	f7fd fa9d 	bl	80232ec <HAL_SD_GetCardState>
 8025db2:	4603      	mov	r3, r0
 8025db4:	2b04      	cmp	r3, #4
 8025db6:	bf14      	ite	ne
 8025db8:	2301      	movne	r3, #1
 8025dba:	2300      	moveq	r3, #0
 8025dbc:	b2db      	uxtb	r3, r3
}
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	bd80      	pop	{r7, pc}
 8025dc2:	bf00      	nop
 8025dc4:	240002fc 	.word	0x240002fc

08025dc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8025dc8:	b580      	push	{r7, lr}
 8025dca:	b082      	sub	sp, #8
 8025dcc:	af00      	add	r7, sp, #0
 8025dce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8025dd0:	6879      	ldr	r1, [r7, #4]
 8025dd2:	4803      	ldr	r0, [pc, #12]	@ (8025de0 <BSP_SD_GetCardInfo+0x18>)
 8025dd4:	f7fd f94c 	bl	8023070 <HAL_SD_GetCardInfo>
}
 8025dd8:	bf00      	nop
 8025dda:	3708      	adds	r7, #8
 8025ddc:	46bd      	mov	sp, r7
 8025dde:	bd80      	pop	{r7, pc}
 8025de0:	240002fc 	.word	0x240002fc

08025de4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025de4:	b580      	push	{r7, lr}
 8025de6:	b082      	sub	sp, #8
 8025de8:	af00      	add	r7, sp, #0
 8025dea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8025dec:	f000 fa14 	bl	8026218 <BSP_SD_WriteCpltCallback>
}
 8025df0:	bf00      	nop
 8025df2:	3708      	adds	r7, #8
 8025df4:	46bd      	mov	sp, r7
 8025df6:	bd80      	pop	{r7, pc}

08025df8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025df8:	b580      	push	{r7, lr}
 8025dfa:	b082      	sub	sp, #8
 8025dfc:	af00      	add	r7, sp, #0
 8025dfe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8025e00:	f000 fa16 	bl	8026230 <BSP_SD_ReadCpltCallback>
}
 8025e04:	bf00      	nop
 8025e06:	3708      	adds	r7, #8
 8025e08:	46bd      	mov	sp, r7
 8025e0a:	bd80      	pop	{r7, pc}

08025e0c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8025e0c:	b580      	push	{r7, lr}
 8025e0e:	b084      	sub	sp, #16
 8025e10:	af00      	add	r7, sp, #0
 8025e12:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8025e14:	f7f5 fe7a 	bl	801bb0c <HAL_GetTick>
 8025e18:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8025e1a:	e006      	b.n	8025e2a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025e1c:	f7ff ffc4 	bl	8025da8 <BSP_SD_GetCardState>
 8025e20:	4603      	mov	r3, r0
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	d101      	bne.n	8025e2a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8025e26:	2300      	movs	r3, #0
 8025e28:	e009      	b.n	8025e3e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8025e2a:	f7f5 fe6f 	bl	801bb0c <HAL_GetTick>
 8025e2e:	4602      	mov	r2, r0
 8025e30:	68fb      	ldr	r3, [r7, #12]
 8025e32:	1ad3      	subs	r3, r2, r3
 8025e34:	687a      	ldr	r2, [r7, #4]
 8025e36:	429a      	cmp	r2, r3
 8025e38:	d8f0      	bhi.n	8025e1c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8025e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025e3e:	4618      	mov	r0, r3
 8025e40:	3710      	adds	r7, #16
 8025e42:	46bd      	mov	sp, r7
 8025e44:	bd80      	pop	{r7, pc}
	...

08025e48 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8025e48:	b580      	push	{r7, lr}
 8025e4a:	b082      	sub	sp, #8
 8025e4c:	af00      	add	r7, sp, #0
 8025e4e:	4603      	mov	r3, r0
 8025e50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8025e52:	4b0b      	ldr	r3, [pc, #44]	@ (8025e80 <SD_CheckStatus+0x38>)
 8025e54:	2201      	movs	r2, #1
 8025e56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8025e58:	f7ff ffa6 	bl	8025da8 <BSP_SD_GetCardState>
 8025e5c:	4603      	mov	r3, r0
 8025e5e:	2b00      	cmp	r3, #0
 8025e60:	d107      	bne.n	8025e72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8025e62:	4b07      	ldr	r3, [pc, #28]	@ (8025e80 <SD_CheckStatus+0x38>)
 8025e64:	781b      	ldrb	r3, [r3, #0]
 8025e66:	b2db      	uxtb	r3, r3
 8025e68:	f023 0301 	bic.w	r3, r3, #1
 8025e6c:	b2da      	uxtb	r2, r3
 8025e6e:	4b04      	ldr	r3, [pc, #16]	@ (8025e80 <SD_CheckStatus+0x38>)
 8025e70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8025e72:	4b03      	ldr	r3, [pc, #12]	@ (8025e80 <SD_CheckStatus+0x38>)
 8025e74:	781b      	ldrb	r3, [r3, #0]
 8025e76:	b2db      	uxtb	r3, r3
}
 8025e78:	4618      	mov	r0, r3
 8025e7a:	3708      	adds	r7, #8
 8025e7c:	46bd      	mov	sp, r7
 8025e7e:	bd80      	pop	{r7, pc}
 8025e80:	24000029 	.word	0x24000029

08025e84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8025e84:	b580      	push	{r7, lr}
 8025e86:	b082      	sub	sp, #8
 8025e88:	af00      	add	r7, sp, #0
 8025e8a:	4603      	mov	r3, r0
 8025e8c:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8025e8e:	79fb      	ldrb	r3, [r7, #7]
 8025e90:	4618      	mov	r0, r3
 8025e92:	f7ff ffd9 	bl	8025e48 <SD_CheckStatus>
 8025e96:	4603      	mov	r3, r0
 8025e98:	461a      	mov	r2, r3
 8025e9a:	4b04      	ldr	r3, [pc, #16]	@ (8025eac <SD_initialize+0x28>)
 8025e9c:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8025e9e:	4b03      	ldr	r3, [pc, #12]	@ (8025eac <SD_initialize+0x28>)
 8025ea0:	781b      	ldrb	r3, [r3, #0]
 8025ea2:	b2db      	uxtb	r3, r3
}
 8025ea4:	4618      	mov	r0, r3
 8025ea6:	3708      	adds	r7, #8
 8025ea8:	46bd      	mov	sp, r7
 8025eaa:	bd80      	pop	{r7, pc}
 8025eac:	24000029 	.word	0x24000029

08025eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8025eb0:	b580      	push	{r7, lr}
 8025eb2:	b082      	sub	sp, #8
 8025eb4:	af00      	add	r7, sp, #0
 8025eb6:	4603      	mov	r3, r0
 8025eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8025eba:	79fb      	ldrb	r3, [r7, #7]
 8025ebc:	4618      	mov	r0, r3
 8025ebe:	f7ff ffc3 	bl	8025e48 <SD_CheckStatus>
 8025ec2:	4603      	mov	r3, r0
}
 8025ec4:	4618      	mov	r0, r3
 8025ec6:	3708      	adds	r7, #8
 8025ec8:	46bd      	mov	sp, r7
 8025eca:	bd80      	pop	{r7, pc}

08025ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8025ecc:	b580      	push	{r7, lr}
 8025ece:	b088      	sub	sp, #32
 8025ed0:	af00      	add	r7, sp, #0
 8025ed2:	60b9      	str	r1, [r7, #8]
 8025ed4:	607a      	str	r2, [r7, #4]
 8025ed6:	603b      	str	r3, [r7, #0]
 8025ed8:	4603      	mov	r3, r0
 8025eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8025edc:	2301      	movs	r3, #1
 8025ede:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8025ee0:	f247 5030 	movw	r0, #30000	@ 0x7530
 8025ee4:	f7ff ff92 	bl	8025e0c <SD_CheckStatusWithTimeout>
 8025ee8:	4603      	mov	r3, r0
 8025eea:	2b00      	cmp	r3, #0
 8025eec:	da01      	bge.n	8025ef2 <SD_read+0x26>
  {
    return res;
 8025eee:	7ffb      	ldrb	r3, [r7, #31]
 8025ef0:	e08b      	b.n	802600a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8025ef2:	68bb      	ldr	r3, [r7, #8]
 8025ef4:	f003 0303 	and.w	r3, r3, #3
 8025ef8:	2b00      	cmp	r3, #0
 8025efa:	d13b      	bne.n	8025f74 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8025efc:	683a      	ldr	r2, [r7, #0]
 8025efe:	6879      	ldr	r1, [r7, #4]
 8025f00:	68b8      	ldr	r0, [r7, #8]
 8025f02:	f7ff ff1d 	bl	8025d40 <BSP_SD_ReadBlocks_DMA>
 8025f06:	4603      	mov	r3, r0
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d17d      	bne.n	8026008 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8025f0c:	4b41      	ldr	r3, [pc, #260]	@ (8026014 <SD_read+0x148>)
 8025f0e:	2200      	movs	r2, #0
 8025f10:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8025f12:	f7f5 fdfb 	bl	801bb0c <HAL_GetTick>
 8025f16:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8025f18:	bf00      	nop
 8025f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8026014 <SD_read+0x148>)
 8025f1c:	681b      	ldr	r3, [r3, #0]
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	d108      	bne.n	8025f34 <SD_read+0x68>
 8025f22:	f7f5 fdf3 	bl	801bb0c <HAL_GetTick>
 8025f26:	4602      	mov	r2, r0
 8025f28:	697b      	ldr	r3, [r7, #20]
 8025f2a:	1ad3      	subs	r3, r2, r3
 8025f2c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025f30:	4293      	cmp	r3, r2
 8025f32:	d9f2      	bls.n	8025f1a <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8025f34:	4b37      	ldr	r3, [pc, #220]	@ (8026014 <SD_read+0x148>)
 8025f36:	681b      	ldr	r3, [r3, #0]
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d102      	bne.n	8025f42 <SD_read+0x76>
      {
        res = RES_ERROR;
 8025f3c:	2301      	movs	r3, #1
 8025f3e:	77fb      	strb	r3, [r7, #31]
 8025f40:	e062      	b.n	8026008 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8025f42:	4b34      	ldr	r3, [pc, #208]	@ (8026014 <SD_read+0x148>)
 8025f44:	2200      	movs	r2, #0
 8025f46:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8025f48:	f7f5 fde0 	bl	801bb0c <HAL_GetTick>
 8025f4c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8025f4e:	e007      	b.n	8025f60 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025f50:	f7ff ff2a 	bl	8025da8 <BSP_SD_GetCardState>
 8025f54:	4603      	mov	r3, r0
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	d102      	bne.n	8025f60 <SD_read+0x94>
          {
            res = RES_OK;
 8025f5a:	2300      	movs	r3, #0
 8025f5c:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8025f5e:	e053      	b.n	8026008 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8025f60:	f7f5 fdd4 	bl	801bb0c <HAL_GetTick>
 8025f64:	4602      	mov	r2, r0
 8025f66:	697b      	ldr	r3, [r7, #20]
 8025f68:	1ad3      	subs	r3, r2, r3
 8025f6a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025f6e:	4293      	cmp	r3, r2
 8025f70:	d9ee      	bls.n	8025f50 <SD_read+0x84>
 8025f72:	e049      	b.n	8026008 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8025f74:	2300      	movs	r3, #0
 8025f76:	61bb      	str	r3, [r7, #24]
 8025f78:	e037      	b.n	8025fea <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8025f7a:	687b      	ldr	r3, [r7, #4]
 8025f7c:	1c5a      	adds	r2, r3, #1
 8025f7e:	607a      	str	r2, [r7, #4]
 8025f80:	2201      	movs	r2, #1
 8025f82:	4619      	mov	r1, r3
 8025f84:	4824      	ldr	r0, [pc, #144]	@ (8026018 <SD_read+0x14c>)
 8025f86:	f7ff fedb 	bl	8025d40 <BSP_SD_ReadBlocks_DMA>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8025f8e:	7fbb      	ldrb	r3, [r7, #30]
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	d12f      	bne.n	8025ff4 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8025f94:	f7f5 fdba 	bl	801bb0c <HAL_GetTick>
 8025f98:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8025f9a:	bf00      	nop
 8025f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8026014 <SD_read+0x148>)
 8025f9e:	681b      	ldr	r3, [r3, #0]
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d108      	bne.n	8025fb6 <SD_read+0xea>
 8025fa4:	f7f5 fdb2 	bl	801bb0c <HAL_GetTick>
 8025fa8:	4602      	mov	r2, r0
 8025faa:	697b      	ldr	r3, [r7, #20]
 8025fac:	1ad3      	subs	r3, r2, r3
 8025fae:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025fb2:	4293      	cmp	r3, r2
 8025fb4:	d9f2      	bls.n	8025f9c <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 8025fb6:	4b17      	ldr	r3, [pc, #92]	@ (8026014 <SD_read+0x148>)
 8025fb8:	681b      	ldr	r3, [r3, #0]
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d102      	bne.n	8025fc4 <SD_read+0xf8>
          {
            res = RES_ERROR;
 8025fbe:	2301      	movs	r3, #1
 8025fc0:	77fb      	strb	r3, [r7, #31]
            break;
 8025fc2:	e018      	b.n	8025ff6 <SD_read+0x12a>
          }
          ReadStatus = 0;
 8025fc4:	4b13      	ldr	r3, [pc, #76]	@ (8026014 <SD_read+0x148>)
 8025fc6:	2200      	movs	r2, #0
 8025fc8:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8025fca:	68bb      	ldr	r3, [r7, #8]
 8025fcc:	4a12      	ldr	r2, [pc, #72]	@ (8026018 <SD_read+0x14c>)
 8025fce:	4618      	mov	r0, r3
 8025fd0:	4611      	mov	r1, r2
 8025fd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8025fd6:	461a      	mov	r2, r3
 8025fd8:	f003 fbb9 	bl	802974e <memcpy>
          buff += BLOCKSIZE;
 8025fdc:	68bb      	ldr	r3, [r7, #8]
 8025fde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8025fe2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8025fe4:	69bb      	ldr	r3, [r7, #24]
 8025fe6:	3301      	adds	r3, #1
 8025fe8:	61bb      	str	r3, [r7, #24]
 8025fea:	69bb      	ldr	r3, [r7, #24]
 8025fec:	683a      	ldr	r2, [r7, #0]
 8025fee:	429a      	cmp	r2, r3
 8025ff0:	d8c3      	bhi.n	8025f7a <SD_read+0xae>
 8025ff2:	e000      	b.n	8025ff6 <SD_read+0x12a>
        }
        else
        {
          break;
 8025ff4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8025ff6:	69bb      	ldr	r3, [r7, #24]
 8025ff8:	683a      	ldr	r2, [r7, #0]
 8025ffa:	429a      	cmp	r2, r3
 8025ffc:	d104      	bne.n	8026008 <SD_read+0x13c>
 8025ffe:	7fbb      	ldrb	r3, [r7, #30]
 8026000:	2b00      	cmp	r3, #0
 8026002:	d101      	bne.n	8026008 <SD_read+0x13c>
        res = RES_OK;
 8026004:	2300      	movs	r3, #0
 8026006:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8026008:	7ffb      	ldrb	r3, [r7, #31]
}
 802600a:	4618      	mov	r0, r3
 802600c:	3720      	adds	r7, #32
 802600e:	46bd      	mov	sp, r7
 8026010:	bd80      	pop	{r7, pc}
 8026012:	bf00      	nop
 8026014:	24000a88 	.word	0x24000a88
 8026018:	24000884 	.word	0x24000884

0802601c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802601c:	b580      	push	{r7, lr}
 802601e:	b088      	sub	sp, #32
 8026020:	af00      	add	r7, sp, #0
 8026022:	60b9      	str	r1, [r7, #8]
 8026024:	607a      	str	r2, [r7, #4]
 8026026:	603b      	str	r3, [r7, #0]
 8026028:	4603      	mov	r3, r0
 802602a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802602c:	2301      	movs	r3, #1
 802602e:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8026030:	4b4b      	ldr	r3, [pc, #300]	@ (8026160 <SD_write+0x144>)
 8026032:	2200      	movs	r2, #0
 8026034:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8026036:	f247 5030 	movw	r0, #30000	@ 0x7530
 802603a:	f7ff fee7 	bl	8025e0c <SD_CheckStatusWithTimeout>
 802603e:	4603      	mov	r3, r0
 8026040:	2b00      	cmp	r3, #0
 8026042:	da01      	bge.n	8026048 <SD_write+0x2c>
  {
    return res;
 8026044:	7ffb      	ldrb	r3, [r7, #31]
 8026046:	e087      	b.n	8026158 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8026048:	68bb      	ldr	r3, [r7, #8]
 802604a:	f003 0303 	and.w	r3, r3, #3
 802604e:	2b00      	cmp	r3, #0
 8026050:	d138      	bne.n	80260c4 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8026052:	683a      	ldr	r2, [r7, #0]
 8026054:	6879      	ldr	r1, [r7, #4]
 8026056:	68b8      	ldr	r0, [r7, #8]
 8026058:	f7ff fe8c 	bl	8025d74 <BSP_SD_WriteBlocks_DMA>
 802605c:	4603      	mov	r3, r0
 802605e:	2b00      	cmp	r3, #0
 8026060:	d179      	bne.n	8026156 <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8026062:	f7f5 fd53 	bl	801bb0c <HAL_GetTick>
 8026066:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8026068:	bf00      	nop
 802606a:	4b3d      	ldr	r3, [pc, #244]	@ (8026160 <SD_write+0x144>)
 802606c:	681b      	ldr	r3, [r3, #0]
 802606e:	2b00      	cmp	r3, #0
 8026070:	d108      	bne.n	8026084 <SD_write+0x68>
 8026072:	f7f5 fd4b 	bl	801bb0c <HAL_GetTick>
 8026076:	4602      	mov	r2, r0
 8026078:	697b      	ldr	r3, [r7, #20]
 802607a:	1ad3      	subs	r3, r2, r3
 802607c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026080:	4293      	cmp	r3, r2
 8026082:	d9f2      	bls.n	802606a <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8026084:	4b36      	ldr	r3, [pc, #216]	@ (8026160 <SD_write+0x144>)
 8026086:	681b      	ldr	r3, [r3, #0]
 8026088:	2b00      	cmp	r3, #0
 802608a:	d102      	bne.n	8026092 <SD_write+0x76>
      {
        res = RES_ERROR;
 802608c:	2301      	movs	r3, #1
 802608e:	77fb      	strb	r3, [r7, #31]
 8026090:	e061      	b.n	8026156 <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 8026092:	4b33      	ldr	r3, [pc, #204]	@ (8026160 <SD_write+0x144>)
 8026094:	2200      	movs	r2, #0
 8026096:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8026098:	f7f5 fd38 	bl	801bb0c <HAL_GetTick>
 802609c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802609e:	e007      	b.n	80260b0 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80260a0:	f7ff fe82 	bl	8025da8 <BSP_SD_GetCardState>
 80260a4:	4603      	mov	r3, r0
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d102      	bne.n	80260b0 <SD_write+0x94>
          {
            res = RES_OK;
 80260aa:	2300      	movs	r3, #0
 80260ac:	77fb      	strb	r3, [r7, #31]
            break;
 80260ae:	e052      	b.n	8026156 <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80260b0:	f7f5 fd2c 	bl	801bb0c <HAL_GetTick>
 80260b4:	4602      	mov	r2, r0
 80260b6:	697b      	ldr	r3, [r7, #20]
 80260b8:	1ad3      	subs	r3, r2, r3
 80260ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 80260be:	4293      	cmp	r3, r2
 80260c0:	d9ee      	bls.n	80260a0 <SD_write+0x84>
 80260c2:	e048      	b.n	8026156 <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80260c4:	2300      	movs	r3, #0
 80260c6:	61bb      	str	r3, [r7, #24]
 80260c8:	e034      	b.n	8026134 <SD_write+0x118>
      {
        WriteStatus = 0;
 80260ca:	4b25      	ldr	r3, [pc, #148]	@ (8026160 <SD_write+0x144>)
 80260cc:	2200      	movs	r2, #0
 80260ce:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 80260d0:	4a24      	ldr	r2, [pc, #144]	@ (8026164 <SD_write+0x148>)
 80260d2:	68bb      	ldr	r3, [r7, #8]
 80260d4:	4610      	mov	r0, r2
 80260d6:	4619      	mov	r1, r3
 80260d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80260dc:	461a      	mov	r2, r3
 80260de:	f003 fb36 	bl	802974e <memcpy>
        buff += BLOCKSIZE;
 80260e2:	68bb      	ldr	r3, [r7, #8]
 80260e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80260e8:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	1c5a      	adds	r2, r3, #1
 80260ee:	607a      	str	r2, [r7, #4]
 80260f0:	2201      	movs	r2, #1
 80260f2:	4619      	mov	r1, r3
 80260f4:	481b      	ldr	r0, [pc, #108]	@ (8026164 <SD_write+0x148>)
 80260f6:	f7ff fe3d 	bl	8025d74 <BSP_SD_WriteBlocks_DMA>
 80260fa:	4603      	mov	r3, r0
 80260fc:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80260fe:	7fbb      	ldrb	r3, [r7, #30]
 8026100:	2b00      	cmp	r3, #0
 8026102:	d11c      	bne.n	802613e <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8026104:	f7f5 fd02 	bl	801bb0c <HAL_GetTick>
 8026108:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802610a:	bf00      	nop
 802610c:	4b14      	ldr	r3, [pc, #80]	@ (8026160 <SD_write+0x144>)
 802610e:	681b      	ldr	r3, [r3, #0]
 8026110:	2b00      	cmp	r3, #0
 8026112:	d108      	bne.n	8026126 <SD_write+0x10a>
 8026114:	f7f5 fcfa 	bl	801bb0c <HAL_GetTick>
 8026118:	4602      	mov	r2, r0
 802611a:	697b      	ldr	r3, [r7, #20]
 802611c:	1ad3      	subs	r3, r2, r3
 802611e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026122:	4293      	cmp	r3, r2
 8026124:	d9f2      	bls.n	802610c <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 8026126:	4b0e      	ldr	r3, [pc, #56]	@ (8026160 <SD_write+0x144>)
 8026128:	681b      	ldr	r3, [r3, #0]
 802612a:	2b00      	cmp	r3, #0
 802612c:	d009      	beq.n	8026142 <SD_write+0x126>
      for (i = 0; i < count; i++)
 802612e:	69bb      	ldr	r3, [r7, #24]
 8026130:	3301      	adds	r3, #1
 8026132:	61bb      	str	r3, [r7, #24]
 8026134:	69bb      	ldr	r3, [r7, #24]
 8026136:	683a      	ldr	r2, [r7, #0]
 8026138:	429a      	cmp	r2, r3
 802613a:	d8c6      	bhi.n	80260ca <SD_write+0xae>
 802613c:	e002      	b.n	8026144 <SD_write+0x128>
          }

        }
        else
        {
          break;
 802613e:	bf00      	nop
 8026140:	e000      	b.n	8026144 <SD_write+0x128>
            break;
 8026142:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8026144:	69bb      	ldr	r3, [r7, #24]
 8026146:	683a      	ldr	r2, [r7, #0]
 8026148:	429a      	cmp	r2, r3
 802614a:	d104      	bne.n	8026156 <SD_write+0x13a>
 802614c:	7fbb      	ldrb	r3, [r7, #30]
 802614e:	2b00      	cmp	r3, #0
 8026150:	d101      	bne.n	8026156 <SD_write+0x13a>
        res = RES_OK;
 8026152:	2300      	movs	r3, #0
 8026154:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 8026156:	7ffb      	ldrb	r3, [r7, #31]
}
 8026158:	4618      	mov	r0, r3
 802615a:	3720      	adds	r7, #32
 802615c:	46bd      	mov	sp, r7
 802615e:	bd80      	pop	{r7, pc}
 8026160:	24000a84 	.word	0x24000a84
 8026164:	24000884 	.word	0x24000884

08026168 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8026168:	b580      	push	{r7, lr}
 802616a:	b08c      	sub	sp, #48	@ 0x30
 802616c:	af00      	add	r7, sp, #0
 802616e:	4603      	mov	r3, r0
 8026170:	603a      	str	r2, [r7, #0]
 8026172:	71fb      	strb	r3, [r7, #7]
 8026174:	460b      	mov	r3, r1
 8026176:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8026178:	2301      	movs	r3, #1
 802617a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802617e:	4b25      	ldr	r3, [pc, #148]	@ (8026214 <SD_ioctl+0xac>)
 8026180:	781b      	ldrb	r3, [r3, #0]
 8026182:	b2db      	uxtb	r3, r3
 8026184:	f003 0301 	and.w	r3, r3, #1
 8026188:	2b00      	cmp	r3, #0
 802618a:	d001      	beq.n	8026190 <SD_ioctl+0x28>
 802618c:	2303      	movs	r3, #3
 802618e:	e03c      	b.n	802620a <SD_ioctl+0xa2>

  switch (cmd)
 8026190:	79bb      	ldrb	r3, [r7, #6]
 8026192:	2b03      	cmp	r3, #3
 8026194:	d834      	bhi.n	8026200 <SD_ioctl+0x98>
 8026196:	a201      	add	r2, pc, #4	@ (adr r2, 802619c <SD_ioctl+0x34>)
 8026198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802619c:	080261ad 	.word	0x080261ad
 80261a0:	080261b5 	.word	0x080261b5
 80261a4:	080261cd 	.word	0x080261cd
 80261a8:	080261e7 	.word	0x080261e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80261ac:	2300      	movs	r3, #0
 80261ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80261b2:	e028      	b.n	8026206 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80261b4:	f107 0308 	add.w	r3, r7, #8
 80261b8:	4618      	mov	r0, r3
 80261ba:	f7ff fe05 	bl	8025dc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80261be:	6a3a      	ldr	r2, [r7, #32]
 80261c0:	683b      	ldr	r3, [r7, #0]
 80261c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80261c4:	2300      	movs	r3, #0
 80261c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80261ca:	e01c      	b.n	8026206 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80261cc:	f107 0308 	add.w	r3, r7, #8
 80261d0:	4618      	mov	r0, r3
 80261d2:	f7ff fdf9 	bl	8025dc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80261d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261d8:	b29a      	uxth	r2, r3
 80261da:	683b      	ldr	r3, [r7, #0]
 80261dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80261de:	2300      	movs	r3, #0
 80261e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80261e4:	e00f      	b.n	8026206 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80261e6:	f107 0308 	add.w	r3, r7, #8
 80261ea:	4618      	mov	r0, r3
 80261ec:	f7ff fdec 	bl	8025dc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80261f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261f2:	0a5a      	lsrs	r2, r3, #9
 80261f4:	683b      	ldr	r3, [r7, #0]
 80261f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80261f8:	2300      	movs	r3, #0
 80261fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80261fe:	e002      	b.n	8026206 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8026200:	2304      	movs	r3, #4
 8026202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8026206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802620a:	4618      	mov	r0, r3
 802620c:	3730      	adds	r7, #48	@ 0x30
 802620e:	46bd      	mov	sp, r7
 8026210:	bd80      	pop	{r7, pc}
 8026212:	bf00      	nop
 8026214:	24000029 	.word	0x24000029

08026218 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8026218:	b480      	push	{r7}
 802621a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 802621c:	4b03      	ldr	r3, [pc, #12]	@ (802622c <BSP_SD_WriteCpltCallback+0x14>)
 802621e:	2201      	movs	r2, #1
 8026220:	601a      	str	r2, [r3, #0]
}
 8026222:	bf00      	nop
 8026224:	46bd      	mov	sp, r7
 8026226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802622a:	4770      	bx	lr
 802622c:	24000a84 	.word	0x24000a84

08026230 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8026230:	b480      	push	{r7}
 8026232:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8026234:	4b03      	ldr	r3, [pc, #12]	@ (8026244 <BSP_SD_ReadCpltCallback+0x14>)
 8026236:	2201      	movs	r2, #1
 8026238:	601a      	str	r2, [r3, #0]
}
 802623a:	bf00      	nop
 802623c:	46bd      	mov	sp, r7
 802623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026242:	4770      	bx	lr
 8026244:	24000a88 	.word	0x24000a88

08026248 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8026248:	b580      	push	{r7, lr}
 802624a:	b084      	sub	sp, #16
 802624c:	af00      	add	r7, sp, #0
 802624e:	4603      	mov	r3, r0
 8026250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8026252:	79fb      	ldrb	r3, [r7, #7]
 8026254:	4a08      	ldr	r2, [pc, #32]	@ (8026278 <disk_status+0x30>)
 8026256:	009b      	lsls	r3, r3, #2
 8026258:	4413      	add	r3, r2
 802625a:	685b      	ldr	r3, [r3, #4]
 802625c:	685b      	ldr	r3, [r3, #4]
 802625e:	79fa      	ldrb	r2, [r7, #7]
 8026260:	4905      	ldr	r1, [pc, #20]	@ (8026278 <disk_status+0x30>)
 8026262:	440a      	add	r2, r1
 8026264:	7a12      	ldrb	r2, [r2, #8]
 8026266:	4610      	mov	r0, r2
 8026268:	4798      	blx	r3
 802626a:	4603      	mov	r3, r0
 802626c:	73fb      	strb	r3, [r7, #15]
  return stat;
 802626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026270:	4618      	mov	r0, r3
 8026272:	3710      	adds	r7, #16
 8026274:	46bd      	mov	sp, r7
 8026276:	bd80      	pop	{r7, pc}
 8026278:	24000ab4 	.word	0x24000ab4

0802627c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802627c:	b580      	push	{r7, lr}
 802627e:	b084      	sub	sp, #16
 8026280:	af00      	add	r7, sp, #0
 8026282:	4603      	mov	r3, r0
 8026284:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8026286:	2300      	movs	r3, #0
 8026288:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802628a:	79fb      	ldrb	r3, [r7, #7]
 802628c:	4a0e      	ldr	r2, [pc, #56]	@ (80262c8 <disk_initialize+0x4c>)
 802628e:	5cd3      	ldrb	r3, [r2, r3]
 8026290:	2b00      	cmp	r3, #0
 8026292:	d114      	bne.n	80262be <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8026294:	79fb      	ldrb	r3, [r7, #7]
 8026296:	4a0c      	ldr	r2, [pc, #48]	@ (80262c8 <disk_initialize+0x4c>)
 8026298:	009b      	lsls	r3, r3, #2
 802629a:	4413      	add	r3, r2
 802629c:	685b      	ldr	r3, [r3, #4]
 802629e:	681b      	ldr	r3, [r3, #0]
 80262a0:	79fa      	ldrb	r2, [r7, #7]
 80262a2:	4909      	ldr	r1, [pc, #36]	@ (80262c8 <disk_initialize+0x4c>)
 80262a4:	440a      	add	r2, r1
 80262a6:	7a12      	ldrb	r2, [r2, #8]
 80262a8:	4610      	mov	r0, r2
 80262aa:	4798      	blx	r3
 80262ac:	4603      	mov	r3, r0
 80262ae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80262b0:	7bfb      	ldrb	r3, [r7, #15]
 80262b2:	2b00      	cmp	r3, #0
 80262b4:	d103      	bne.n	80262be <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80262b6:	79fb      	ldrb	r3, [r7, #7]
 80262b8:	4a03      	ldr	r2, [pc, #12]	@ (80262c8 <disk_initialize+0x4c>)
 80262ba:	2101      	movs	r1, #1
 80262bc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80262be:	7bfb      	ldrb	r3, [r7, #15]
}
 80262c0:	4618      	mov	r0, r3
 80262c2:	3710      	adds	r7, #16
 80262c4:	46bd      	mov	sp, r7
 80262c6:	bd80      	pop	{r7, pc}
 80262c8:	24000ab4 	.word	0x24000ab4

080262cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80262cc:	b590      	push	{r4, r7, lr}
 80262ce:	b087      	sub	sp, #28
 80262d0:	af00      	add	r7, sp, #0
 80262d2:	60b9      	str	r1, [r7, #8]
 80262d4:	607a      	str	r2, [r7, #4]
 80262d6:	603b      	str	r3, [r7, #0]
 80262d8:	4603      	mov	r3, r0
 80262da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80262dc:	7bfb      	ldrb	r3, [r7, #15]
 80262de:	4a0a      	ldr	r2, [pc, #40]	@ (8026308 <disk_read+0x3c>)
 80262e0:	009b      	lsls	r3, r3, #2
 80262e2:	4413      	add	r3, r2
 80262e4:	685b      	ldr	r3, [r3, #4]
 80262e6:	689c      	ldr	r4, [r3, #8]
 80262e8:	7bfb      	ldrb	r3, [r7, #15]
 80262ea:	4a07      	ldr	r2, [pc, #28]	@ (8026308 <disk_read+0x3c>)
 80262ec:	4413      	add	r3, r2
 80262ee:	7a18      	ldrb	r0, [r3, #8]
 80262f0:	683b      	ldr	r3, [r7, #0]
 80262f2:	687a      	ldr	r2, [r7, #4]
 80262f4:	68b9      	ldr	r1, [r7, #8]
 80262f6:	47a0      	blx	r4
 80262f8:	4603      	mov	r3, r0
 80262fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80262fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80262fe:	4618      	mov	r0, r3
 8026300:	371c      	adds	r7, #28
 8026302:	46bd      	mov	sp, r7
 8026304:	bd90      	pop	{r4, r7, pc}
 8026306:	bf00      	nop
 8026308:	24000ab4 	.word	0x24000ab4

0802630c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 802630c:	b590      	push	{r4, r7, lr}
 802630e:	b087      	sub	sp, #28
 8026310:	af00      	add	r7, sp, #0
 8026312:	60b9      	str	r1, [r7, #8]
 8026314:	607a      	str	r2, [r7, #4]
 8026316:	603b      	str	r3, [r7, #0]
 8026318:	4603      	mov	r3, r0
 802631a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 802631c:	7bfb      	ldrb	r3, [r7, #15]
 802631e:	4a0a      	ldr	r2, [pc, #40]	@ (8026348 <disk_write+0x3c>)
 8026320:	009b      	lsls	r3, r3, #2
 8026322:	4413      	add	r3, r2
 8026324:	685b      	ldr	r3, [r3, #4]
 8026326:	68dc      	ldr	r4, [r3, #12]
 8026328:	7bfb      	ldrb	r3, [r7, #15]
 802632a:	4a07      	ldr	r2, [pc, #28]	@ (8026348 <disk_write+0x3c>)
 802632c:	4413      	add	r3, r2
 802632e:	7a18      	ldrb	r0, [r3, #8]
 8026330:	683b      	ldr	r3, [r7, #0]
 8026332:	687a      	ldr	r2, [r7, #4]
 8026334:	68b9      	ldr	r1, [r7, #8]
 8026336:	47a0      	blx	r4
 8026338:	4603      	mov	r3, r0
 802633a:	75fb      	strb	r3, [r7, #23]
  return res;
 802633c:	7dfb      	ldrb	r3, [r7, #23]
}
 802633e:	4618      	mov	r0, r3
 8026340:	371c      	adds	r7, #28
 8026342:	46bd      	mov	sp, r7
 8026344:	bd90      	pop	{r4, r7, pc}
 8026346:	bf00      	nop
 8026348:	24000ab4 	.word	0x24000ab4

0802634c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 802634c:	b580      	push	{r7, lr}
 802634e:	b084      	sub	sp, #16
 8026350:	af00      	add	r7, sp, #0
 8026352:	4603      	mov	r3, r0
 8026354:	603a      	str	r2, [r7, #0]
 8026356:	71fb      	strb	r3, [r7, #7]
 8026358:	460b      	mov	r3, r1
 802635a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 802635c:	79fb      	ldrb	r3, [r7, #7]
 802635e:	4a09      	ldr	r2, [pc, #36]	@ (8026384 <disk_ioctl+0x38>)
 8026360:	009b      	lsls	r3, r3, #2
 8026362:	4413      	add	r3, r2
 8026364:	685b      	ldr	r3, [r3, #4]
 8026366:	691b      	ldr	r3, [r3, #16]
 8026368:	79fa      	ldrb	r2, [r7, #7]
 802636a:	4906      	ldr	r1, [pc, #24]	@ (8026384 <disk_ioctl+0x38>)
 802636c:	440a      	add	r2, r1
 802636e:	7a10      	ldrb	r0, [r2, #8]
 8026370:	79b9      	ldrb	r1, [r7, #6]
 8026372:	683a      	ldr	r2, [r7, #0]
 8026374:	4798      	blx	r3
 8026376:	4603      	mov	r3, r0
 8026378:	73fb      	strb	r3, [r7, #15]
  return res;
 802637a:	7bfb      	ldrb	r3, [r7, #15]
}
 802637c:	4618      	mov	r0, r3
 802637e:	3710      	adds	r7, #16
 8026380:	46bd      	mov	sp, r7
 8026382:	bd80      	pop	{r7, pc}
 8026384:	24000ab4 	.word	0x24000ab4

08026388 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8026388:	b480      	push	{r7}
 802638a:	b085      	sub	sp, #20
 802638c:	af00      	add	r7, sp, #0
 802638e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8026390:	687b      	ldr	r3, [r7, #4]
 8026392:	3301      	adds	r3, #1
 8026394:	781b      	ldrb	r3, [r3, #0]
 8026396:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8026398:	89fb      	ldrh	r3, [r7, #14]
 802639a:	021b      	lsls	r3, r3, #8
 802639c:	b21a      	sxth	r2, r3
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	781b      	ldrb	r3, [r3, #0]
 80263a2:	b21b      	sxth	r3, r3
 80263a4:	4313      	orrs	r3, r2
 80263a6:	b21b      	sxth	r3, r3
 80263a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80263aa:	89fb      	ldrh	r3, [r7, #14]
}
 80263ac:	4618      	mov	r0, r3
 80263ae:	3714      	adds	r7, #20
 80263b0:	46bd      	mov	sp, r7
 80263b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263b6:	4770      	bx	lr

080263b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80263b8:	b480      	push	{r7}
 80263ba:	b085      	sub	sp, #20
 80263bc:	af00      	add	r7, sp, #0
 80263be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	3303      	adds	r3, #3
 80263c4:	781b      	ldrb	r3, [r3, #0]
 80263c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80263c8:	68fb      	ldr	r3, [r7, #12]
 80263ca:	021b      	lsls	r3, r3, #8
 80263cc:	687a      	ldr	r2, [r7, #4]
 80263ce:	3202      	adds	r2, #2
 80263d0:	7812      	ldrb	r2, [r2, #0]
 80263d2:	4313      	orrs	r3, r2
 80263d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80263d6:	68fb      	ldr	r3, [r7, #12]
 80263d8:	021b      	lsls	r3, r3, #8
 80263da:	687a      	ldr	r2, [r7, #4]
 80263dc:	3201      	adds	r2, #1
 80263de:	7812      	ldrb	r2, [r2, #0]
 80263e0:	4313      	orrs	r3, r2
 80263e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80263e4:	68fb      	ldr	r3, [r7, #12]
 80263e6:	021b      	lsls	r3, r3, #8
 80263e8:	687a      	ldr	r2, [r7, #4]
 80263ea:	7812      	ldrb	r2, [r2, #0]
 80263ec:	4313      	orrs	r3, r2
 80263ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80263f0:	68fb      	ldr	r3, [r7, #12]
}
 80263f2:	4618      	mov	r0, r3
 80263f4:	3714      	adds	r7, #20
 80263f6:	46bd      	mov	sp, r7
 80263f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263fc:	4770      	bx	lr

080263fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80263fe:	b480      	push	{r7}
 8026400:	b083      	sub	sp, #12
 8026402:	af00      	add	r7, sp, #0
 8026404:	6078      	str	r0, [r7, #4]
 8026406:	460b      	mov	r3, r1
 8026408:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	1c5a      	adds	r2, r3, #1
 802640e:	607a      	str	r2, [r7, #4]
 8026410:	887a      	ldrh	r2, [r7, #2]
 8026412:	b2d2      	uxtb	r2, r2
 8026414:	701a      	strb	r2, [r3, #0]
 8026416:	887b      	ldrh	r3, [r7, #2]
 8026418:	0a1b      	lsrs	r3, r3, #8
 802641a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 802641c:	687b      	ldr	r3, [r7, #4]
 802641e:	1c5a      	adds	r2, r3, #1
 8026420:	607a      	str	r2, [r7, #4]
 8026422:	887a      	ldrh	r2, [r7, #2]
 8026424:	b2d2      	uxtb	r2, r2
 8026426:	701a      	strb	r2, [r3, #0]
}
 8026428:	bf00      	nop
 802642a:	370c      	adds	r7, #12
 802642c:	46bd      	mov	sp, r7
 802642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026432:	4770      	bx	lr

08026434 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8026434:	b480      	push	{r7}
 8026436:	b083      	sub	sp, #12
 8026438:	af00      	add	r7, sp, #0
 802643a:	6078      	str	r0, [r7, #4]
 802643c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802643e:	687b      	ldr	r3, [r7, #4]
 8026440:	1c5a      	adds	r2, r3, #1
 8026442:	607a      	str	r2, [r7, #4]
 8026444:	683a      	ldr	r2, [r7, #0]
 8026446:	b2d2      	uxtb	r2, r2
 8026448:	701a      	strb	r2, [r3, #0]
 802644a:	683b      	ldr	r3, [r7, #0]
 802644c:	0a1b      	lsrs	r3, r3, #8
 802644e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	1c5a      	adds	r2, r3, #1
 8026454:	607a      	str	r2, [r7, #4]
 8026456:	683a      	ldr	r2, [r7, #0]
 8026458:	b2d2      	uxtb	r2, r2
 802645a:	701a      	strb	r2, [r3, #0]
 802645c:	683b      	ldr	r3, [r7, #0]
 802645e:	0a1b      	lsrs	r3, r3, #8
 8026460:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	1c5a      	adds	r2, r3, #1
 8026466:	607a      	str	r2, [r7, #4]
 8026468:	683a      	ldr	r2, [r7, #0]
 802646a:	b2d2      	uxtb	r2, r2
 802646c:	701a      	strb	r2, [r3, #0]
 802646e:	683b      	ldr	r3, [r7, #0]
 8026470:	0a1b      	lsrs	r3, r3, #8
 8026472:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	1c5a      	adds	r2, r3, #1
 8026478:	607a      	str	r2, [r7, #4]
 802647a:	683a      	ldr	r2, [r7, #0]
 802647c:	b2d2      	uxtb	r2, r2
 802647e:	701a      	strb	r2, [r3, #0]
}
 8026480:	bf00      	nop
 8026482:	370c      	adds	r7, #12
 8026484:	46bd      	mov	sp, r7
 8026486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802648a:	4770      	bx	lr

0802648c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 802648c:	b480      	push	{r7}
 802648e:	b087      	sub	sp, #28
 8026490:	af00      	add	r7, sp, #0
 8026492:	60f8      	str	r0, [r7, #12]
 8026494:	60b9      	str	r1, [r7, #8]
 8026496:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 802649c:	68bb      	ldr	r3, [r7, #8]
 802649e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	2b00      	cmp	r3, #0
 80264a4:	d00d      	beq.n	80264c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80264a6:	693a      	ldr	r2, [r7, #16]
 80264a8:	1c53      	adds	r3, r2, #1
 80264aa:	613b      	str	r3, [r7, #16]
 80264ac:	697b      	ldr	r3, [r7, #20]
 80264ae:	1c59      	adds	r1, r3, #1
 80264b0:	6179      	str	r1, [r7, #20]
 80264b2:	7812      	ldrb	r2, [r2, #0]
 80264b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	3b01      	subs	r3, #1
 80264ba:	607b      	str	r3, [r7, #4]
 80264bc:	687b      	ldr	r3, [r7, #4]
 80264be:	2b00      	cmp	r3, #0
 80264c0:	d1f1      	bne.n	80264a6 <mem_cpy+0x1a>
	}
}
 80264c2:	bf00      	nop
 80264c4:	371c      	adds	r7, #28
 80264c6:	46bd      	mov	sp, r7
 80264c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264cc:	4770      	bx	lr

080264ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80264ce:	b480      	push	{r7}
 80264d0:	b087      	sub	sp, #28
 80264d2:	af00      	add	r7, sp, #0
 80264d4:	60f8      	str	r0, [r7, #12]
 80264d6:	60b9      	str	r1, [r7, #8]
 80264d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80264de:	697b      	ldr	r3, [r7, #20]
 80264e0:	1c5a      	adds	r2, r3, #1
 80264e2:	617a      	str	r2, [r7, #20]
 80264e4:	68ba      	ldr	r2, [r7, #8]
 80264e6:	b2d2      	uxtb	r2, r2
 80264e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80264ea:	687b      	ldr	r3, [r7, #4]
 80264ec:	3b01      	subs	r3, #1
 80264ee:	607b      	str	r3, [r7, #4]
 80264f0:	687b      	ldr	r3, [r7, #4]
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d1f3      	bne.n	80264de <mem_set+0x10>
}
 80264f6:	bf00      	nop
 80264f8:	bf00      	nop
 80264fa:	371c      	adds	r7, #28
 80264fc:	46bd      	mov	sp, r7
 80264fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026502:	4770      	bx	lr

08026504 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8026504:	b480      	push	{r7}
 8026506:	b089      	sub	sp, #36	@ 0x24
 8026508:	af00      	add	r7, sp, #0
 802650a:	60f8      	str	r0, [r7, #12]
 802650c:	60b9      	str	r1, [r7, #8]
 802650e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8026510:	68fb      	ldr	r3, [r7, #12]
 8026512:	61fb      	str	r3, [r7, #28]
 8026514:	68bb      	ldr	r3, [r7, #8]
 8026516:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8026518:	2300      	movs	r3, #0
 802651a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 802651c:	69fb      	ldr	r3, [r7, #28]
 802651e:	1c5a      	adds	r2, r3, #1
 8026520:	61fa      	str	r2, [r7, #28]
 8026522:	781b      	ldrb	r3, [r3, #0]
 8026524:	4619      	mov	r1, r3
 8026526:	69bb      	ldr	r3, [r7, #24]
 8026528:	1c5a      	adds	r2, r3, #1
 802652a:	61ba      	str	r2, [r7, #24]
 802652c:	781b      	ldrb	r3, [r3, #0]
 802652e:	1acb      	subs	r3, r1, r3
 8026530:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8026532:	687b      	ldr	r3, [r7, #4]
 8026534:	3b01      	subs	r3, #1
 8026536:	607b      	str	r3, [r7, #4]
 8026538:	687b      	ldr	r3, [r7, #4]
 802653a:	2b00      	cmp	r3, #0
 802653c:	d002      	beq.n	8026544 <mem_cmp+0x40>
 802653e:	697b      	ldr	r3, [r7, #20]
 8026540:	2b00      	cmp	r3, #0
 8026542:	d0eb      	beq.n	802651c <mem_cmp+0x18>

	return r;
 8026544:	697b      	ldr	r3, [r7, #20]
}
 8026546:	4618      	mov	r0, r3
 8026548:	3724      	adds	r7, #36	@ 0x24
 802654a:	46bd      	mov	sp, r7
 802654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026550:	4770      	bx	lr

08026552 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8026552:	b480      	push	{r7}
 8026554:	b083      	sub	sp, #12
 8026556:	af00      	add	r7, sp, #0
 8026558:	6078      	str	r0, [r7, #4]
 802655a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 802655c:	e002      	b.n	8026564 <chk_chr+0x12>
 802655e:	687b      	ldr	r3, [r7, #4]
 8026560:	3301      	adds	r3, #1
 8026562:	607b      	str	r3, [r7, #4]
 8026564:	687b      	ldr	r3, [r7, #4]
 8026566:	781b      	ldrb	r3, [r3, #0]
 8026568:	2b00      	cmp	r3, #0
 802656a:	d005      	beq.n	8026578 <chk_chr+0x26>
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	781b      	ldrb	r3, [r3, #0]
 8026570:	461a      	mov	r2, r3
 8026572:	683b      	ldr	r3, [r7, #0]
 8026574:	4293      	cmp	r3, r2
 8026576:	d1f2      	bne.n	802655e <chk_chr+0xc>
	return *str;
 8026578:	687b      	ldr	r3, [r7, #4]
 802657a:	781b      	ldrb	r3, [r3, #0]
}
 802657c:	4618      	mov	r0, r3
 802657e:	370c      	adds	r7, #12
 8026580:	46bd      	mov	sp, r7
 8026582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026586:	4770      	bx	lr

08026588 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8026588:	b480      	push	{r7}
 802658a:	b085      	sub	sp, #20
 802658c:	af00      	add	r7, sp, #0
 802658e:	6078      	str	r0, [r7, #4]
 8026590:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8026592:	2300      	movs	r3, #0
 8026594:	60bb      	str	r3, [r7, #8]
 8026596:	68bb      	ldr	r3, [r7, #8]
 8026598:	60fb      	str	r3, [r7, #12]
 802659a:	e029      	b.n	80265f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 802659c:	4a27      	ldr	r2, [pc, #156]	@ (802663c <chk_lock+0xb4>)
 802659e:	68fb      	ldr	r3, [r7, #12]
 80265a0:	011b      	lsls	r3, r3, #4
 80265a2:	4413      	add	r3, r2
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d01d      	beq.n	80265e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80265aa:	4a24      	ldr	r2, [pc, #144]	@ (802663c <chk_lock+0xb4>)
 80265ac:	68fb      	ldr	r3, [r7, #12]
 80265ae:	011b      	lsls	r3, r3, #4
 80265b0:	4413      	add	r3, r2
 80265b2:	681a      	ldr	r2, [r3, #0]
 80265b4:	687b      	ldr	r3, [r7, #4]
 80265b6:	681b      	ldr	r3, [r3, #0]
 80265b8:	429a      	cmp	r2, r3
 80265ba:	d116      	bne.n	80265ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80265bc:	4a1f      	ldr	r2, [pc, #124]	@ (802663c <chk_lock+0xb4>)
 80265be:	68fb      	ldr	r3, [r7, #12]
 80265c0:	011b      	lsls	r3, r3, #4
 80265c2:	4413      	add	r3, r2
 80265c4:	3304      	adds	r3, #4
 80265c6:	681a      	ldr	r2, [r3, #0]
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80265cc:	429a      	cmp	r2, r3
 80265ce:	d10c      	bne.n	80265ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80265d0:	4a1a      	ldr	r2, [pc, #104]	@ (802663c <chk_lock+0xb4>)
 80265d2:	68fb      	ldr	r3, [r7, #12]
 80265d4:	011b      	lsls	r3, r3, #4
 80265d6:	4413      	add	r3, r2
 80265d8:	3308      	adds	r3, #8
 80265da:	681a      	ldr	r2, [r3, #0]
 80265dc:	687b      	ldr	r3, [r7, #4]
 80265de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80265e0:	429a      	cmp	r2, r3
 80265e2:	d102      	bne.n	80265ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80265e4:	e007      	b.n	80265f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80265e6:	2301      	movs	r3, #1
 80265e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80265ea:	68fb      	ldr	r3, [r7, #12]
 80265ec:	3301      	adds	r3, #1
 80265ee:	60fb      	str	r3, [r7, #12]
 80265f0:	68fb      	ldr	r3, [r7, #12]
 80265f2:	2b01      	cmp	r3, #1
 80265f4:	d9d2      	bls.n	802659c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80265f6:	68fb      	ldr	r3, [r7, #12]
 80265f8:	2b02      	cmp	r3, #2
 80265fa:	d109      	bne.n	8026610 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80265fc:	68bb      	ldr	r3, [r7, #8]
 80265fe:	2b00      	cmp	r3, #0
 8026600:	d102      	bne.n	8026608 <chk_lock+0x80>
 8026602:	683b      	ldr	r3, [r7, #0]
 8026604:	2b02      	cmp	r3, #2
 8026606:	d101      	bne.n	802660c <chk_lock+0x84>
 8026608:	2300      	movs	r3, #0
 802660a:	e010      	b.n	802662e <chk_lock+0xa6>
 802660c:	2312      	movs	r3, #18
 802660e:	e00e      	b.n	802662e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8026610:	683b      	ldr	r3, [r7, #0]
 8026612:	2b00      	cmp	r3, #0
 8026614:	d108      	bne.n	8026628 <chk_lock+0xa0>
 8026616:	4a09      	ldr	r2, [pc, #36]	@ (802663c <chk_lock+0xb4>)
 8026618:	68fb      	ldr	r3, [r7, #12]
 802661a:	011b      	lsls	r3, r3, #4
 802661c:	4413      	add	r3, r2
 802661e:	330c      	adds	r3, #12
 8026620:	881b      	ldrh	r3, [r3, #0]
 8026622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8026626:	d101      	bne.n	802662c <chk_lock+0xa4>
 8026628:	2310      	movs	r3, #16
 802662a:	e000      	b.n	802662e <chk_lock+0xa6>
 802662c:	2300      	movs	r3, #0
}
 802662e:	4618      	mov	r0, r3
 8026630:	3714      	adds	r7, #20
 8026632:	46bd      	mov	sp, r7
 8026634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026638:	4770      	bx	lr
 802663a:	bf00      	nop
 802663c:	24000a94 	.word	0x24000a94

08026640 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8026640:	b480      	push	{r7}
 8026642:	b083      	sub	sp, #12
 8026644:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8026646:	2300      	movs	r3, #0
 8026648:	607b      	str	r3, [r7, #4]
 802664a:	e002      	b.n	8026652 <enq_lock+0x12>
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	3301      	adds	r3, #1
 8026650:	607b      	str	r3, [r7, #4]
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	2b01      	cmp	r3, #1
 8026656:	d806      	bhi.n	8026666 <enq_lock+0x26>
 8026658:	4a09      	ldr	r2, [pc, #36]	@ (8026680 <enq_lock+0x40>)
 802665a:	687b      	ldr	r3, [r7, #4]
 802665c:	011b      	lsls	r3, r3, #4
 802665e:	4413      	add	r3, r2
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	2b00      	cmp	r3, #0
 8026664:	d1f2      	bne.n	802664c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8026666:	687b      	ldr	r3, [r7, #4]
 8026668:	2b02      	cmp	r3, #2
 802666a:	bf14      	ite	ne
 802666c:	2301      	movne	r3, #1
 802666e:	2300      	moveq	r3, #0
 8026670:	b2db      	uxtb	r3, r3
}
 8026672:	4618      	mov	r0, r3
 8026674:	370c      	adds	r7, #12
 8026676:	46bd      	mov	sp, r7
 8026678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802667c:	4770      	bx	lr
 802667e:	bf00      	nop
 8026680:	24000a94 	.word	0x24000a94

08026684 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8026684:	b480      	push	{r7}
 8026686:	b085      	sub	sp, #20
 8026688:	af00      	add	r7, sp, #0
 802668a:	6078      	str	r0, [r7, #4]
 802668c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802668e:	2300      	movs	r3, #0
 8026690:	60fb      	str	r3, [r7, #12]
 8026692:	e01f      	b.n	80266d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8026694:	4a41      	ldr	r2, [pc, #260]	@ (802679c <inc_lock+0x118>)
 8026696:	68fb      	ldr	r3, [r7, #12]
 8026698:	011b      	lsls	r3, r3, #4
 802669a:	4413      	add	r3, r2
 802669c:	681a      	ldr	r2, [r3, #0]
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	681b      	ldr	r3, [r3, #0]
 80266a2:	429a      	cmp	r2, r3
 80266a4:	d113      	bne.n	80266ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80266a6:	4a3d      	ldr	r2, [pc, #244]	@ (802679c <inc_lock+0x118>)
 80266a8:	68fb      	ldr	r3, [r7, #12]
 80266aa:	011b      	lsls	r3, r3, #4
 80266ac:	4413      	add	r3, r2
 80266ae:	3304      	adds	r3, #4
 80266b0:	681a      	ldr	r2, [r3, #0]
 80266b2:	687b      	ldr	r3, [r7, #4]
 80266b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80266b6:	429a      	cmp	r2, r3
 80266b8:	d109      	bne.n	80266ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80266ba:	4a38      	ldr	r2, [pc, #224]	@ (802679c <inc_lock+0x118>)
 80266bc:	68fb      	ldr	r3, [r7, #12]
 80266be:	011b      	lsls	r3, r3, #4
 80266c0:	4413      	add	r3, r2
 80266c2:	3308      	adds	r3, #8
 80266c4:	681a      	ldr	r2, [r3, #0]
 80266c6:	687b      	ldr	r3, [r7, #4]
 80266c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80266ca:	429a      	cmp	r2, r3
 80266cc:	d006      	beq.n	80266dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80266ce:	68fb      	ldr	r3, [r7, #12]
 80266d0:	3301      	adds	r3, #1
 80266d2:	60fb      	str	r3, [r7, #12]
 80266d4:	68fb      	ldr	r3, [r7, #12]
 80266d6:	2b01      	cmp	r3, #1
 80266d8:	d9dc      	bls.n	8026694 <inc_lock+0x10>
 80266da:	e000      	b.n	80266de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80266dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80266de:	68fb      	ldr	r3, [r7, #12]
 80266e0:	2b02      	cmp	r3, #2
 80266e2:	d132      	bne.n	802674a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80266e4:	2300      	movs	r3, #0
 80266e6:	60fb      	str	r3, [r7, #12]
 80266e8:	e002      	b.n	80266f0 <inc_lock+0x6c>
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	3301      	adds	r3, #1
 80266ee:	60fb      	str	r3, [r7, #12]
 80266f0:	68fb      	ldr	r3, [r7, #12]
 80266f2:	2b01      	cmp	r3, #1
 80266f4:	d806      	bhi.n	8026704 <inc_lock+0x80>
 80266f6:	4a29      	ldr	r2, [pc, #164]	@ (802679c <inc_lock+0x118>)
 80266f8:	68fb      	ldr	r3, [r7, #12]
 80266fa:	011b      	lsls	r3, r3, #4
 80266fc:	4413      	add	r3, r2
 80266fe:	681b      	ldr	r3, [r3, #0]
 8026700:	2b00      	cmp	r3, #0
 8026702:	d1f2      	bne.n	80266ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8026704:	68fb      	ldr	r3, [r7, #12]
 8026706:	2b02      	cmp	r3, #2
 8026708:	d101      	bne.n	802670e <inc_lock+0x8a>
 802670a:	2300      	movs	r3, #0
 802670c:	e040      	b.n	8026790 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	681a      	ldr	r2, [r3, #0]
 8026712:	4922      	ldr	r1, [pc, #136]	@ (802679c <inc_lock+0x118>)
 8026714:	68fb      	ldr	r3, [r7, #12]
 8026716:	011b      	lsls	r3, r3, #4
 8026718:	440b      	add	r3, r1
 802671a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	689a      	ldr	r2, [r3, #8]
 8026720:	491e      	ldr	r1, [pc, #120]	@ (802679c <inc_lock+0x118>)
 8026722:	68fb      	ldr	r3, [r7, #12]
 8026724:	011b      	lsls	r3, r3, #4
 8026726:	440b      	add	r3, r1
 8026728:	3304      	adds	r3, #4
 802672a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 802672c:	687b      	ldr	r3, [r7, #4]
 802672e:	695a      	ldr	r2, [r3, #20]
 8026730:	491a      	ldr	r1, [pc, #104]	@ (802679c <inc_lock+0x118>)
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	011b      	lsls	r3, r3, #4
 8026736:	440b      	add	r3, r1
 8026738:	3308      	adds	r3, #8
 802673a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 802673c:	4a17      	ldr	r2, [pc, #92]	@ (802679c <inc_lock+0x118>)
 802673e:	68fb      	ldr	r3, [r7, #12]
 8026740:	011b      	lsls	r3, r3, #4
 8026742:	4413      	add	r3, r2
 8026744:	330c      	adds	r3, #12
 8026746:	2200      	movs	r2, #0
 8026748:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802674a:	683b      	ldr	r3, [r7, #0]
 802674c:	2b00      	cmp	r3, #0
 802674e:	d009      	beq.n	8026764 <inc_lock+0xe0>
 8026750:	4a12      	ldr	r2, [pc, #72]	@ (802679c <inc_lock+0x118>)
 8026752:	68fb      	ldr	r3, [r7, #12]
 8026754:	011b      	lsls	r3, r3, #4
 8026756:	4413      	add	r3, r2
 8026758:	330c      	adds	r3, #12
 802675a:	881b      	ldrh	r3, [r3, #0]
 802675c:	2b00      	cmp	r3, #0
 802675e:	d001      	beq.n	8026764 <inc_lock+0xe0>
 8026760:	2300      	movs	r3, #0
 8026762:	e015      	b.n	8026790 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8026764:	683b      	ldr	r3, [r7, #0]
 8026766:	2b00      	cmp	r3, #0
 8026768:	d108      	bne.n	802677c <inc_lock+0xf8>
 802676a:	4a0c      	ldr	r2, [pc, #48]	@ (802679c <inc_lock+0x118>)
 802676c:	68fb      	ldr	r3, [r7, #12]
 802676e:	011b      	lsls	r3, r3, #4
 8026770:	4413      	add	r3, r2
 8026772:	330c      	adds	r3, #12
 8026774:	881b      	ldrh	r3, [r3, #0]
 8026776:	3301      	adds	r3, #1
 8026778:	b29a      	uxth	r2, r3
 802677a:	e001      	b.n	8026780 <inc_lock+0xfc>
 802677c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026780:	4906      	ldr	r1, [pc, #24]	@ (802679c <inc_lock+0x118>)
 8026782:	68fb      	ldr	r3, [r7, #12]
 8026784:	011b      	lsls	r3, r3, #4
 8026786:	440b      	add	r3, r1
 8026788:	330c      	adds	r3, #12
 802678a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 802678c:	68fb      	ldr	r3, [r7, #12]
 802678e:	3301      	adds	r3, #1
}
 8026790:	4618      	mov	r0, r3
 8026792:	3714      	adds	r7, #20
 8026794:	46bd      	mov	sp, r7
 8026796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802679a:	4770      	bx	lr
 802679c:	24000a94 	.word	0x24000a94

080267a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80267a0:	b480      	push	{r7}
 80267a2:	b085      	sub	sp, #20
 80267a4:	af00      	add	r7, sp, #0
 80267a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	3b01      	subs	r3, #1
 80267ac:	607b      	str	r3, [r7, #4]
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	2b01      	cmp	r3, #1
 80267b2:	d825      	bhi.n	8026800 <dec_lock+0x60>
		n = Files[i].ctr;
 80267b4:	4a17      	ldr	r2, [pc, #92]	@ (8026814 <dec_lock+0x74>)
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	011b      	lsls	r3, r3, #4
 80267ba:	4413      	add	r3, r2
 80267bc:	330c      	adds	r3, #12
 80267be:	881b      	ldrh	r3, [r3, #0]
 80267c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80267c2:	89fb      	ldrh	r3, [r7, #14]
 80267c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80267c8:	d101      	bne.n	80267ce <dec_lock+0x2e>
 80267ca:	2300      	movs	r3, #0
 80267cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80267ce:	89fb      	ldrh	r3, [r7, #14]
 80267d0:	2b00      	cmp	r3, #0
 80267d2:	d002      	beq.n	80267da <dec_lock+0x3a>
 80267d4:	89fb      	ldrh	r3, [r7, #14]
 80267d6:	3b01      	subs	r3, #1
 80267d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80267da:	4a0e      	ldr	r2, [pc, #56]	@ (8026814 <dec_lock+0x74>)
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	011b      	lsls	r3, r3, #4
 80267e0:	4413      	add	r3, r2
 80267e2:	330c      	adds	r3, #12
 80267e4:	89fa      	ldrh	r2, [r7, #14]
 80267e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80267e8:	89fb      	ldrh	r3, [r7, #14]
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	d105      	bne.n	80267fa <dec_lock+0x5a>
 80267ee:	4a09      	ldr	r2, [pc, #36]	@ (8026814 <dec_lock+0x74>)
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	011b      	lsls	r3, r3, #4
 80267f4:	4413      	add	r3, r2
 80267f6:	2200      	movs	r2, #0
 80267f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80267fa:	2300      	movs	r3, #0
 80267fc:	737b      	strb	r3, [r7, #13]
 80267fe:	e001      	b.n	8026804 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8026800:	2302      	movs	r3, #2
 8026802:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8026804:	7b7b      	ldrb	r3, [r7, #13]
}
 8026806:	4618      	mov	r0, r3
 8026808:	3714      	adds	r7, #20
 802680a:	46bd      	mov	sp, r7
 802680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026810:	4770      	bx	lr
 8026812:	bf00      	nop
 8026814:	24000a94 	.word	0x24000a94

08026818 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8026818:	b480      	push	{r7}
 802681a:	b085      	sub	sp, #20
 802681c:	af00      	add	r7, sp, #0
 802681e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8026820:	2300      	movs	r3, #0
 8026822:	60fb      	str	r3, [r7, #12]
 8026824:	e010      	b.n	8026848 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8026826:	4a0d      	ldr	r2, [pc, #52]	@ (802685c <clear_lock+0x44>)
 8026828:	68fb      	ldr	r3, [r7, #12]
 802682a:	011b      	lsls	r3, r3, #4
 802682c:	4413      	add	r3, r2
 802682e:	681b      	ldr	r3, [r3, #0]
 8026830:	687a      	ldr	r2, [r7, #4]
 8026832:	429a      	cmp	r2, r3
 8026834:	d105      	bne.n	8026842 <clear_lock+0x2a>
 8026836:	4a09      	ldr	r2, [pc, #36]	@ (802685c <clear_lock+0x44>)
 8026838:	68fb      	ldr	r3, [r7, #12]
 802683a:	011b      	lsls	r3, r3, #4
 802683c:	4413      	add	r3, r2
 802683e:	2200      	movs	r2, #0
 8026840:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8026842:	68fb      	ldr	r3, [r7, #12]
 8026844:	3301      	adds	r3, #1
 8026846:	60fb      	str	r3, [r7, #12]
 8026848:	68fb      	ldr	r3, [r7, #12]
 802684a:	2b01      	cmp	r3, #1
 802684c:	d9eb      	bls.n	8026826 <clear_lock+0xe>
	}
}
 802684e:	bf00      	nop
 8026850:	bf00      	nop
 8026852:	3714      	adds	r7, #20
 8026854:	46bd      	mov	sp, r7
 8026856:	f85d 7b04 	ldr.w	r7, [sp], #4
 802685a:	4770      	bx	lr
 802685c:	24000a94 	.word	0x24000a94

08026860 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8026860:	b580      	push	{r7, lr}
 8026862:	b086      	sub	sp, #24
 8026864:	af00      	add	r7, sp, #0
 8026866:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8026868:	2300      	movs	r3, #0
 802686a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	78db      	ldrb	r3, [r3, #3]
 8026870:	2b00      	cmp	r3, #0
 8026872:	d034      	beq.n	80268de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8026874:	687b      	ldr	r3, [r7, #4]
 8026876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026878:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	7858      	ldrb	r0, [r3, #1]
 802687e:	687b      	ldr	r3, [r7, #4]
 8026880:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026884:	2301      	movs	r3, #1
 8026886:	697a      	ldr	r2, [r7, #20]
 8026888:	f7ff fd40 	bl	802630c <disk_write>
 802688c:	4603      	mov	r3, r0
 802688e:	2b00      	cmp	r3, #0
 8026890:	d002      	beq.n	8026898 <sync_window+0x38>
			res = FR_DISK_ERR;
 8026892:	2301      	movs	r3, #1
 8026894:	73fb      	strb	r3, [r7, #15]
 8026896:	e022      	b.n	80268de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8026898:	687b      	ldr	r3, [r7, #4]
 802689a:	2200      	movs	r2, #0
 802689c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	6a1b      	ldr	r3, [r3, #32]
 80268a2:	697a      	ldr	r2, [r7, #20]
 80268a4:	1ad2      	subs	r2, r2, r3
 80268a6:	687b      	ldr	r3, [r7, #4]
 80268a8:	699b      	ldr	r3, [r3, #24]
 80268aa:	429a      	cmp	r2, r3
 80268ac:	d217      	bcs.n	80268de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	789b      	ldrb	r3, [r3, #2]
 80268b2:	613b      	str	r3, [r7, #16]
 80268b4:	e010      	b.n	80268d8 <sync_window+0x78>
					wsect += fs->fsize;
 80268b6:	687b      	ldr	r3, [r7, #4]
 80268b8:	699b      	ldr	r3, [r3, #24]
 80268ba:	697a      	ldr	r2, [r7, #20]
 80268bc:	4413      	add	r3, r2
 80268be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	7858      	ldrb	r0, [r3, #1]
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80268ca:	2301      	movs	r3, #1
 80268cc:	697a      	ldr	r2, [r7, #20]
 80268ce:	f7ff fd1d 	bl	802630c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80268d2:	693b      	ldr	r3, [r7, #16]
 80268d4:	3b01      	subs	r3, #1
 80268d6:	613b      	str	r3, [r7, #16]
 80268d8:	693b      	ldr	r3, [r7, #16]
 80268da:	2b01      	cmp	r3, #1
 80268dc:	d8eb      	bhi.n	80268b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80268de:	7bfb      	ldrb	r3, [r7, #15]
}
 80268e0:	4618      	mov	r0, r3
 80268e2:	3718      	adds	r7, #24
 80268e4:	46bd      	mov	sp, r7
 80268e6:	bd80      	pop	{r7, pc}

080268e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80268e8:	b580      	push	{r7, lr}
 80268ea:	b084      	sub	sp, #16
 80268ec:	af00      	add	r7, sp, #0
 80268ee:	6078      	str	r0, [r7, #4]
 80268f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80268f2:	2300      	movs	r3, #0
 80268f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80268f6:	687b      	ldr	r3, [r7, #4]
 80268f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80268fa:	683a      	ldr	r2, [r7, #0]
 80268fc:	429a      	cmp	r2, r3
 80268fe:	d01b      	beq.n	8026938 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8026900:	6878      	ldr	r0, [r7, #4]
 8026902:	f7ff ffad 	bl	8026860 <sync_window>
 8026906:	4603      	mov	r3, r0
 8026908:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 802690a:	7bfb      	ldrb	r3, [r7, #15]
 802690c:	2b00      	cmp	r3, #0
 802690e:	d113      	bne.n	8026938 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	7858      	ldrb	r0, [r3, #1]
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802691a:	2301      	movs	r3, #1
 802691c:	683a      	ldr	r2, [r7, #0]
 802691e:	f7ff fcd5 	bl	80262cc <disk_read>
 8026922:	4603      	mov	r3, r0
 8026924:	2b00      	cmp	r3, #0
 8026926:	d004      	beq.n	8026932 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8026928:	f04f 33ff 	mov.w	r3, #4294967295
 802692c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 802692e:	2301      	movs	r3, #1
 8026930:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	683a      	ldr	r2, [r7, #0]
 8026936:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8026938:	7bfb      	ldrb	r3, [r7, #15]
}
 802693a:	4618      	mov	r0, r3
 802693c:	3710      	adds	r7, #16
 802693e:	46bd      	mov	sp, r7
 8026940:	bd80      	pop	{r7, pc}
	...

08026944 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8026944:	b580      	push	{r7, lr}
 8026946:	b084      	sub	sp, #16
 8026948:	af00      	add	r7, sp, #0
 802694a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 802694c:	6878      	ldr	r0, [r7, #4]
 802694e:	f7ff ff87 	bl	8026860 <sync_window>
 8026952:	4603      	mov	r3, r0
 8026954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8026956:	7bfb      	ldrb	r3, [r7, #15]
 8026958:	2b00      	cmp	r3, #0
 802695a:	d158      	bne.n	8026a0e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	781b      	ldrb	r3, [r3, #0]
 8026960:	2b03      	cmp	r3, #3
 8026962:	d148      	bne.n	80269f6 <sync_fs+0xb2>
 8026964:	687b      	ldr	r3, [r7, #4]
 8026966:	791b      	ldrb	r3, [r3, #4]
 8026968:	2b01      	cmp	r3, #1
 802696a:	d144      	bne.n	80269f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	3330      	adds	r3, #48	@ 0x30
 8026970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8026974:	2100      	movs	r1, #0
 8026976:	4618      	mov	r0, r3
 8026978:	f7ff fda9 	bl	80264ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 802697c:	687b      	ldr	r3, [r7, #4]
 802697e:	3330      	adds	r3, #48	@ 0x30
 8026980:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8026984:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8026988:	4618      	mov	r0, r3
 802698a:	f7ff fd38 	bl	80263fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	3330      	adds	r3, #48	@ 0x30
 8026992:	4921      	ldr	r1, [pc, #132]	@ (8026a18 <sync_fs+0xd4>)
 8026994:	4618      	mov	r0, r3
 8026996:	f7ff fd4d 	bl	8026434 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	3330      	adds	r3, #48	@ 0x30
 802699e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80269a2:	491e      	ldr	r1, [pc, #120]	@ (8026a1c <sync_fs+0xd8>)
 80269a4:	4618      	mov	r0, r3
 80269a6:	f7ff fd45 	bl	8026434 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	3330      	adds	r3, #48	@ 0x30
 80269ae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	691b      	ldr	r3, [r3, #16]
 80269b6:	4619      	mov	r1, r3
 80269b8:	4610      	mov	r0, r2
 80269ba:	f7ff fd3b 	bl	8026434 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80269be:	687b      	ldr	r3, [r7, #4]
 80269c0:	3330      	adds	r3, #48	@ 0x30
 80269c2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	68db      	ldr	r3, [r3, #12]
 80269ca:	4619      	mov	r1, r3
 80269cc:	4610      	mov	r0, r2
 80269ce:	f7ff fd31 	bl	8026434 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	69db      	ldr	r3, [r3, #28]
 80269d6:	1c5a      	adds	r2, r3, #1
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	7858      	ldrb	r0, [r3, #1]
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80269e6:	687b      	ldr	r3, [r7, #4]
 80269e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80269ea:	2301      	movs	r3, #1
 80269ec:	f7ff fc8e 	bl	802630c <disk_write>
			fs->fsi_flag = 0;
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	2200      	movs	r2, #0
 80269f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	785b      	ldrb	r3, [r3, #1]
 80269fa:	2200      	movs	r2, #0
 80269fc:	2100      	movs	r1, #0
 80269fe:	4618      	mov	r0, r3
 8026a00:	f7ff fca4 	bl	802634c <disk_ioctl>
 8026a04:	4603      	mov	r3, r0
 8026a06:	2b00      	cmp	r3, #0
 8026a08:	d001      	beq.n	8026a0e <sync_fs+0xca>
 8026a0a:	2301      	movs	r3, #1
 8026a0c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8026a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026a10:	4618      	mov	r0, r3
 8026a12:	3710      	adds	r7, #16
 8026a14:	46bd      	mov	sp, r7
 8026a16:	bd80      	pop	{r7, pc}
 8026a18:	41615252 	.word	0x41615252
 8026a1c:	61417272 	.word	0x61417272

08026a20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8026a20:	b480      	push	{r7}
 8026a22:	b083      	sub	sp, #12
 8026a24:	af00      	add	r7, sp, #0
 8026a26:	6078      	str	r0, [r7, #4]
 8026a28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8026a2a:	683b      	ldr	r3, [r7, #0]
 8026a2c:	3b02      	subs	r3, #2
 8026a2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8026a30:	687b      	ldr	r3, [r7, #4]
 8026a32:	695b      	ldr	r3, [r3, #20]
 8026a34:	3b02      	subs	r3, #2
 8026a36:	683a      	ldr	r2, [r7, #0]
 8026a38:	429a      	cmp	r2, r3
 8026a3a:	d301      	bcc.n	8026a40 <clust2sect+0x20>
 8026a3c:	2300      	movs	r3, #0
 8026a3e:	e008      	b.n	8026a52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	895b      	ldrh	r3, [r3, #10]
 8026a44:	461a      	mov	r2, r3
 8026a46:	683b      	ldr	r3, [r7, #0]
 8026a48:	fb03 f202 	mul.w	r2, r3, r2
 8026a4c:	687b      	ldr	r3, [r7, #4]
 8026a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026a50:	4413      	add	r3, r2
}
 8026a52:	4618      	mov	r0, r3
 8026a54:	370c      	adds	r7, #12
 8026a56:	46bd      	mov	sp, r7
 8026a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a5c:	4770      	bx	lr

08026a5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8026a5e:	b580      	push	{r7, lr}
 8026a60:	b086      	sub	sp, #24
 8026a62:	af00      	add	r7, sp, #0
 8026a64:	6078      	str	r0, [r7, #4]
 8026a66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8026a68:	687b      	ldr	r3, [r7, #4]
 8026a6a:	681b      	ldr	r3, [r3, #0]
 8026a6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8026a6e:	683b      	ldr	r3, [r7, #0]
 8026a70:	2b01      	cmp	r3, #1
 8026a72:	d904      	bls.n	8026a7e <get_fat+0x20>
 8026a74:	693b      	ldr	r3, [r7, #16]
 8026a76:	695b      	ldr	r3, [r3, #20]
 8026a78:	683a      	ldr	r2, [r7, #0]
 8026a7a:	429a      	cmp	r2, r3
 8026a7c:	d302      	bcc.n	8026a84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8026a7e:	2301      	movs	r3, #1
 8026a80:	617b      	str	r3, [r7, #20]
 8026a82:	e08e      	b.n	8026ba2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8026a84:	f04f 33ff 	mov.w	r3, #4294967295
 8026a88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8026a8a:	693b      	ldr	r3, [r7, #16]
 8026a8c:	781b      	ldrb	r3, [r3, #0]
 8026a8e:	2b03      	cmp	r3, #3
 8026a90:	d061      	beq.n	8026b56 <get_fat+0xf8>
 8026a92:	2b03      	cmp	r3, #3
 8026a94:	dc7b      	bgt.n	8026b8e <get_fat+0x130>
 8026a96:	2b01      	cmp	r3, #1
 8026a98:	d002      	beq.n	8026aa0 <get_fat+0x42>
 8026a9a:	2b02      	cmp	r3, #2
 8026a9c:	d041      	beq.n	8026b22 <get_fat+0xc4>
 8026a9e:	e076      	b.n	8026b8e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8026aa0:	683b      	ldr	r3, [r7, #0]
 8026aa2:	60fb      	str	r3, [r7, #12]
 8026aa4:	68fb      	ldr	r3, [r7, #12]
 8026aa6:	085b      	lsrs	r3, r3, #1
 8026aa8:	68fa      	ldr	r2, [r7, #12]
 8026aaa:	4413      	add	r3, r2
 8026aac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026aae:	693b      	ldr	r3, [r7, #16]
 8026ab0:	6a1a      	ldr	r2, [r3, #32]
 8026ab2:	68fb      	ldr	r3, [r7, #12]
 8026ab4:	0a5b      	lsrs	r3, r3, #9
 8026ab6:	4413      	add	r3, r2
 8026ab8:	4619      	mov	r1, r3
 8026aba:	6938      	ldr	r0, [r7, #16]
 8026abc:	f7ff ff14 	bl	80268e8 <move_window>
 8026ac0:	4603      	mov	r3, r0
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	d166      	bne.n	8026b94 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8026ac6:	68fb      	ldr	r3, [r7, #12]
 8026ac8:	1c5a      	adds	r2, r3, #1
 8026aca:	60fa      	str	r2, [r7, #12]
 8026acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026ad0:	693a      	ldr	r2, [r7, #16]
 8026ad2:	4413      	add	r3, r2
 8026ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026ad8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026ada:	693b      	ldr	r3, [r7, #16]
 8026adc:	6a1a      	ldr	r2, [r3, #32]
 8026ade:	68fb      	ldr	r3, [r7, #12]
 8026ae0:	0a5b      	lsrs	r3, r3, #9
 8026ae2:	4413      	add	r3, r2
 8026ae4:	4619      	mov	r1, r3
 8026ae6:	6938      	ldr	r0, [r7, #16]
 8026ae8:	f7ff fefe 	bl	80268e8 <move_window>
 8026aec:	4603      	mov	r3, r0
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d152      	bne.n	8026b98 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8026af2:	68fb      	ldr	r3, [r7, #12]
 8026af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026af8:	693a      	ldr	r2, [r7, #16]
 8026afa:	4413      	add	r3, r2
 8026afc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026b00:	021b      	lsls	r3, r3, #8
 8026b02:	68ba      	ldr	r2, [r7, #8]
 8026b04:	4313      	orrs	r3, r2
 8026b06:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8026b08:	683b      	ldr	r3, [r7, #0]
 8026b0a:	f003 0301 	and.w	r3, r3, #1
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	d002      	beq.n	8026b18 <get_fat+0xba>
 8026b12:	68bb      	ldr	r3, [r7, #8]
 8026b14:	091b      	lsrs	r3, r3, #4
 8026b16:	e002      	b.n	8026b1e <get_fat+0xc0>
 8026b18:	68bb      	ldr	r3, [r7, #8]
 8026b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b1e:	617b      	str	r3, [r7, #20]
			break;
 8026b20:	e03f      	b.n	8026ba2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026b22:	693b      	ldr	r3, [r7, #16]
 8026b24:	6a1a      	ldr	r2, [r3, #32]
 8026b26:	683b      	ldr	r3, [r7, #0]
 8026b28:	0a1b      	lsrs	r3, r3, #8
 8026b2a:	4413      	add	r3, r2
 8026b2c:	4619      	mov	r1, r3
 8026b2e:	6938      	ldr	r0, [r7, #16]
 8026b30:	f7ff feda 	bl	80268e8 <move_window>
 8026b34:	4603      	mov	r3, r0
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d130      	bne.n	8026b9c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8026b3a:	693b      	ldr	r3, [r7, #16]
 8026b3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026b40:	683b      	ldr	r3, [r7, #0]
 8026b42:	005b      	lsls	r3, r3, #1
 8026b44:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026b48:	4413      	add	r3, r2
 8026b4a:	4618      	mov	r0, r3
 8026b4c:	f7ff fc1c 	bl	8026388 <ld_word>
 8026b50:	4603      	mov	r3, r0
 8026b52:	617b      	str	r3, [r7, #20]
			break;
 8026b54:	e025      	b.n	8026ba2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026b56:	693b      	ldr	r3, [r7, #16]
 8026b58:	6a1a      	ldr	r2, [r3, #32]
 8026b5a:	683b      	ldr	r3, [r7, #0]
 8026b5c:	09db      	lsrs	r3, r3, #7
 8026b5e:	4413      	add	r3, r2
 8026b60:	4619      	mov	r1, r3
 8026b62:	6938      	ldr	r0, [r7, #16]
 8026b64:	f7ff fec0 	bl	80268e8 <move_window>
 8026b68:	4603      	mov	r3, r0
 8026b6a:	2b00      	cmp	r3, #0
 8026b6c:	d118      	bne.n	8026ba0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8026b6e:	693b      	ldr	r3, [r7, #16]
 8026b70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026b74:	683b      	ldr	r3, [r7, #0]
 8026b76:	009b      	lsls	r3, r3, #2
 8026b78:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026b7c:	4413      	add	r3, r2
 8026b7e:	4618      	mov	r0, r3
 8026b80:	f7ff fc1a 	bl	80263b8 <ld_dword>
 8026b84:	4603      	mov	r3, r0
 8026b86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8026b8a:	617b      	str	r3, [r7, #20]
			break;
 8026b8c:	e009      	b.n	8026ba2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8026b8e:	2301      	movs	r3, #1
 8026b90:	617b      	str	r3, [r7, #20]
 8026b92:	e006      	b.n	8026ba2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026b94:	bf00      	nop
 8026b96:	e004      	b.n	8026ba2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026b98:	bf00      	nop
 8026b9a:	e002      	b.n	8026ba2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026b9c:	bf00      	nop
 8026b9e:	e000      	b.n	8026ba2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026ba0:	bf00      	nop
		}
	}

	return val;
 8026ba2:	697b      	ldr	r3, [r7, #20]
}
 8026ba4:	4618      	mov	r0, r3
 8026ba6:	3718      	adds	r7, #24
 8026ba8:	46bd      	mov	sp, r7
 8026baa:	bd80      	pop	{r7, pc}

08026bac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8026bac:	b590      	push	{r4, r7, lr}
 8026bae:	b089      	sub	sp, #36	@ 0x24
 8026bb0:	af00      	add	r7, sp, #0
 8026bb2:	60f8      	str	r0, [r7, #12]
 8026bb4:	60b9      	str	r1, [r7, #8]
 8026bb6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8026bb8:	2302      	movs	r3, #2
 8026bba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8026bbc:	68bb      	ldr	r3, [r7, #8]
 8026bbe:	2b01      	cmp	r3, #1
 8026bc0:	f240 80d9 	bls.w	8026d76 <put_fat+0x1ca>
 8026bc4:	68fb      	ldr	r3, [r7, #12]
 8026bc6:	695b      	ldr	r3, [r3, #20]
 8026bc8:	68ba      	ldr	r2, [r7, #8]
 8026bca:	429a      	cmp	r2, r3
 8026bcc:	f080 80d3 	bcs.w	8026d76 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8026bd0:	68fb      	ldr	r3, [r7, #12]
 8026bd2:	781b      	ldrb	r3, [r3, #0]
 8026bd4:	2b03      	cmp	r3, #3
 8026bd6:	f000 8096 	beq.w	8026d06 <put_fat+0x15a>
 8026bda:	2b03      	cmp	r3, #3
 8026bdc:	f300 80cb 	bgt.w	8026d76 <put_fat+0x1ca>
 8026be0:	2b01      	cmp	r3, #1
 8026be2:	d002      	beq.n	8026bea <put_fat+0x3e>
 8026be4:	2b02      	cmp	r3, #2
 8026be6:	d06e      	beq.n	8026cc6 <put_fat+0x11a>
 8026be8:	e0c5      	b.n	8026d76 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8026bea:	68bb      	ldr	r3, [r7, #8]
 8026bec:	61bb      	str	r3, [r7, #24]
 8026bee:	69bb      	ldr	r3, [r7, #24]
 8026bf0:	085b      	lsrs	r3, r3, #1
 8026bf2:	69ba      	ldr	r2, [r7, #24]
 8026bf4:	4413      	add	r3, r2
 8026bf6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026bf8:	68fb      	ldr	r3, [r7, #12]
 8026bfa:	6a1a      	ldr	r2, [r3, #32]
 8026bfc:	69bb      	ldr	r3, [r7, #24]
 8026bfe:	0a5b      	lsrs	r3, r3, #9
 8026c00:	4413      	add	r3, r2
 8026c02:	4619      	mov	r1, r3
 8026c04:	68f8      	ldr	r0, [r7, #12]
 8026c06:	f7ff fe6f 	bl	80268e8 <move_window>
 8026c0a:	4603      	mov	r3, r0
 8026c0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026c0e:	7ffb      	ldrb	r3, [r7, #31]
 8026c10:	2b00      	cmp	r3, #0
 8026c12:	f040 80a9 	bne.w	8026d68 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8026c16:	68fb      	ldr	r3, [r7, #12]
 8026c18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026c1c:	69bb      	ldr	r3, [r7, #24]
 8026c1e:	1c59      	adds	r1, r3, #1
 8026c20:	61b9      	str	r1, [r7, #24]
 8026c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c26:	4413      	add	r3, r2
 8026c28:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8026c2a:	68bb      	ldr	r3, [r7, #8]
 8026c2c:	f003 0301 	and.w	r3, r3, #1
 8026c30:	2b00      	cmp	r3, #0
 8026c32:	d00d      	beq.n	8026c50 <put_fat+0xa4>
 8026c34:	697b      	ldr	r3, [r7, #20]
 8026c36:	781b      	ldrb	r3, [r3, #0]
 8026c38:	b25b      	sxtb	r3, r3
 8026c3a:	f003 030f 	and.w	r3, r3, #15
 8026c3e:	b25a      	sxtb	r2, r3
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	b2db      	uxtb	r3, r3
 8026c44:	011b      	lsls	r3, r3, #4
 8026c46:	b25b      	sxtb	r3, r3
 8026c48:	4313      	orrs	r3, r2
 8026c4a:	b25b      	sxtb	r3, r3
 8026c4c:	b2db      	uxtb	r3, r3
 8026c4e:	e001      	b.n	8026c54 <put_fat+0xa8>
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	b2db      	uxtb	r3, r3
 8026c54:	697a      	ldr	r2, [r7, #20]
 8026c56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026c58:	68fb      	ldr	r3, [r7, #12]
 8026c5a:	2201      	movs	r2, #1
 8026c5c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026c5e:	68fb      	ldr	r3, [r7, #12]
 8026c60:	6a1a      	ldr	r2, [r3, #32]
 8026c62:	69bb      	ldr	r3, [r7, #24]
 8026c64:	0a5b      	lsrs	r3, r3, #9
 8026c66:	4413      	add	r3, r2
 8026c68:	4619      	mov	r1, r3
 8026c6a:	68f8      	ldr	r0, [r7, #12]
 8026c6c:	f7ff fe3c 	bl	80268e8 <move_window>
 8026c70:	4603      	mov	r3, r0
 8026c72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026c74:	7ffb      	ldrb	r3, [r7, #31]
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d178      	bne.n	8026d6c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8026c7a:	68fb      	ldr	r3, [r7, #12]
 8026c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026c80:	69bb      	ldr	r3, [r7, #24]
 8026c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c86:	4413      	add	r3, r2
 8026c88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8026c8a:	68bb      	ldr	r3, [r7, #8]
 8026c8c:	f003 0301 	and.w	r3, r3, #1
 8026c90:	2b00      	cmp	r3, #0
 8026c92:	d003      	beq.n	8026c9c <put_fat+0xf0>
 8026c94:	687b      	ldr	r3, [r7, #4]
 8026c96:	091b      	lsrs	r3, r3, #4
 8026c98:	b2db      	uxtb	r3, r3
 8026c9a:	e00e      	b.n	8026cba <put_fat+0x10e>
 8026c9c:	697b      	ldr	r3, [r7, #20]
 8026c9e:	781b      	ldrb	r3, [r3, #0]
 8026ca0:	b25b      	sxtb	r3, r3
 8026ca2:	f023 030f 	bic.w	r3, r3, #15
 8026ca6:	b25a      	sxtb	r2, r3
 8026ca8:	687b      	ldr	r3, [r7, #4]
 8026caa:	0a1b      	lsrs	r3, r3, #8
 8026cac:	b25b      	sxtb	r3, r3
 8026cae:	f003 030f 	and.w	r3, r3, #15
 8026cb2:	b25b      	sxtb	r3, r3
 8026cb4:	4313      	orrs	r3, r2
 8026cb6:	b25b      	sxtb	r3, r3
 8026cb8:	b2db      	uxtb	r3, r3
 8026cba:	697a      	ldr	r2, [r7, #20]
 8026cbc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026cbe:	68fb      	ldr	r3, [r7, #12]
 8026cc0:	2201      	movs	r2, #1
 8026cc2:	70da      	strb	r2, [r3, #3]
			break;
 8026cc4:	e057      	b.n	8026d76 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8026cc6:	68fb      	ldr	r3, [r7, #12]
 8026cc8:	6a1a      	ldr	r2, [r3, #32]
 8026cca:	68bb      	ldr	r3, [r7, #8]
 8026ccc:	0a1b      	lsrs	r3, r3, #8
 8026cce:	4413      	add	r3, r2
 8026cd0:	4619      	mov	r1, r3
 8026cd2:	68f8      	ldr	r0, [r7, #12]
 8026cd4:	f7ff fe08 	bl	80268e8 <move_window>
 8026cd8:	4603      	mov	r3, r0
 8026cda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026cdc:	7ffb      	ldrb	r3, [r7, #31]
 8026cde:	2b00      	cmp	r3, #0
 8026ce0:	d146      	bne.n	8026d70 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8026ce2:	68fb      	ldr	r3, [r7, #12]
 8026ce4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026ce8:	68bb      	ldr	r3, [r7, #8]
 8026cea:	005b      	lsls	r3, r3, #1
 8026cec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026cf0:	4413      	add	r3, r2
 8026cf2:	687a      	ldr	r2, [r7, #4]
 8026cf4:	b292      	uxth	r2, r2
 8026cf6:	4611      	mov	r1, r2
 8026cf8:	4618      	mov	r0, r3
 8026cfa:	f7ff fb80 	bl	80263fe <st_word>
			fs->wflag = 1;
 8026cfe:	68fb      	ldr	r3, [r7, #12]
 8026d00:	2201      	movs	r2, #1
 8026d02:	70da      	strb	r2, [r3, #3]
			break;
 8026d04:	e037      	b.n	8026d76 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8026d06:	68fb      	ldr	r3, [r7, #12]
 8026d08:	6a1a      	ldr	r2, [r3, #32]
 8026d0a:	68bb      	ldr	r3, [r7, #8]
 8026d0c:	09db      	lsrs	r3, r3, #7
 8026d0e:	4413      	add	r3, r2
 8026d10:	4619      	mov	r1, r3
 8026d12:	68f8      	ldr	r0, [r7, #12]
 8026d14:	f7ff fde8 	bl	80268e8 <move_window>
 8026d18:	4603      	mov	r3, r0
 8026d1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d1c:	7ffb      	ldrb	r3, [r7, #31]
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	d128      	bne.n	8026d74 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8026d22:	687b      	ldr	r3, [r7, #4]
 8026d24:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8026d28:	68fb      	ldr	r3, [r7, #12]
 8026d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d2e:	68bb      	ldr	r3, [r7, #8]
 8026d30:	009b      	lsls	r3, r3, #2
 8026d32:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026d36:	4413      	add	r3, r2
 8026d38:	4618      	mov	r0, r3
 8026d3a:	f7ff fb3d 	bl	80263b8 <ld_dword>
 8026d3e:	4603      	mov	r3, r0
 8026d40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8026d44:	4323      	orrs	r3, r4
 8026d46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8026d48:	68fb      	ldr	r3, [r7, #12]
 8026d4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d4e:	68bb      	ldr	r3, [r7, #8]
 8026d50:	009b      	lsls	r3, r3, #2
 8026d52:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026d56:	4413      	add	r3, r2
 8026d58:	6879      	ldr	r1, [r7, #4]
 8026d5a:	4618      	mov	r0, r3
 8026d5c:	f7ff fb6a 	bl	8026434 <st_dword>
			fs->wflag = 1;
 8026d60:	68fb      	ldr	r3, [r7, #12]
 8026d62:	2201      	movs	r2, #1
 8026d64:	70da      	strb	r2, [r3, #3]
			break;
 8026d66:	e006      	b.n	8026d76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026d68:	bf00      	nop
 8026d6a:	e004      	b.n	8026d76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026d6c:	bf00      	nop
 8026d6e:	e002      	b.n	8026d76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026d70:	bf00      	nop
 8026d72:	e000      	b.n	8026d76 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026d74:	bf00      	nop
		}
	}
	return res;
 8026d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8026d78:	4618      	mov	r0, r3
 8026d7a:	3724      	adds	r7, #36	@ 0x24
 8026d7c:	46bd      	mov	sp, r7
 8026d7e:	bd90      	pop	{r4, r7, pc}

08026d80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8026d80:	b580      	push	{r7, lr}
 8026d82:	b088      	sub	sp, #32
 8026d84:	af00      	add	r7, sp, #0
 8026d86:	60f8      	str	r0, [r7, #12]
 8026d88:	60b9      	str	r1, [r7, #8]
 8026d8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8026d8c:	2300      	movs	r3, #0
 8026d8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	681b      	ldr	r3, [r3, #0]
 8026d94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8026d96:	68bb      	ldr	r3, [r7, #8]
 8026d98:	2b01      	cmp	r3, #1
 8026d9a:	d904      	bls.n	8026da6 <remove_chain+0x26>
 8026d9c:	69bb      	ldr	r3, [r7, #24]
 8026d9e:	695b      	ldr	r3, [r3, #20]
 8026da0:	68ba      	ldr	r2, [r7, #8]
 8026da2:	429a      	cmp	r2, r3
 8026da4:	d301      	bcc.n	8026daa <remove_chain+0x2a>
 8026da6:	2302      	movs	r3, #2
 8026da8:	e04b      	b.n	8026e42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8026daa:	687b      	ldr	r3, [r7, #4]
 8026dac:	2b00      	cmp	r3, #0
 8026dae:	d00c      	beq.n	8026dca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8026db0:	f04f 32ff 	mov.w	r2, #4294967295
 8026db4:	6879      	ldr	r1, [r7, #4]
 8026db6:	69b8      	ldr	r0, [r7, #24]
 8026db8:	f7ff fef8 	bl	8026bac <put_fat>
 8026dbc:	4603      	mov	r3, r0
 8026dbe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8026dc0:	7ffb      	ldrb	r3, [r7, #31]
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	d001      	beq.n	8026dca <remove_chain+0x4a>
 8026dc6:	7ffb      	ldrb	r3, [r7, #31]
 8026dc8:	e03b      	b.n	8026e42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8026dca:	68b9      	ldr	r1, [r7, #8]
 8026dcc:	68f8      	ldr	r0, [r7, #12]
 8026dce:	f7ff fe46 	bl	8026a5e <get_fat>
 8026dd2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8026dd4:	697b      	ldr	r3, [r7, #20]
 8026dd6:	2b00      	cmp	r3, #0
 8026dd8:	d031      	beq.n	8026e3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8026dda:	697b      	ldr	r3, [r7, #20]
 8026ddc:	2b01      	cmp	r3, #1
 8026dde:	d101      	bne.n	8026de4 <remove_chain+0x64>
 8026de0:	2302      	movs	r3, #2
 8026de2:	e02e      	b.n	8026e42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8026de4:	697b      	ldr	r3, [r7, #20]
 8026de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026dea:	d101      	bne.n	8026df0 <remove_chain+0x70>
 8026dec:	2301      	movs	r3, #1
 8026dee:	e028      	b.n	8026e42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8026df0:	2200      	movs	r2, #0
 8026df2:	68b9      	ldr	r1, [r7, #8]
 8026df4:	69b8      	ldr	r0, [r7, #24]
 8026df6:	f7ff fed9 	bl	8026bac <put_fat>
 8026dfa:	4603      	mov	r3, r0
 8026dfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8026dfe:	7ffb      	ldrb	r3, [r7, #31]
 8026e00:	2b00      	cmp	r3, #0
 8026e02:	d001      	beq.n	8026e08 <remove_chain+0x88>
 8026e04:	7ffb      	ldrb	r3, [r7, #31]
 8026e06:	e01c      	b.n	8026e42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8026e08:	69bb      	ldr	r3, [r7, #24]
 8026e0a:	691a      	ldr	r2, [r3, #16]
 8026e0c:	69bb      	ldr	r3, [r7, #24]
 8026e0e:	695b      	ldr	r3, [r3, #20]
 8026e10:	3b02      	subs	r3, #2
 8026e12:	429a      	cmp	r2, r3
 8026e14:	d20b      	bcs.n	8026e2e <remove_chain+0xae>
			fs->free_clst++;
 8026e16:	69bb      	ldr	r3, [r7, #24]
 8026e18:	691b      	ldr	r3, [r3, #16]
 8026e1a:	1c5a      	adds	r2, r3, #1
 8026e1c:	69bb      	ldr	r3, [r7, #24]
 8026e1e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8026e20:	69bb      	ldr	r3, [r7, #24]
 8026e22:	791b      	ldrb	r3, [r3, #4]
 8026e24:	f043 0301 	orr.w	r3, r3, #1
 8026e28:	b2da      	uxtb	r2, r3
 8026e2a:	69bb      	ldr	r3, [r7, #24]
 8026e2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8026e2e:	697b      	ldr	r3, [r7, #20]
 8026e30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8026e32:	69bb      	ldr	r3, [r7, #24]
 8026e34:	695b      	ldr	r3, [r3, #20]
 8026e36:	68ba      	ldr	r2, [r7, #8]
 8026e38:	429a      	cmp	r2, r3
 8026e3a:	d3c6      	bcc.n	8026dca <remove_chain+0x4a>
 8026e3c:	e000      	b.n	8026e40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8026e3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8026e40:	2300      	movs	r3, #0
}
 8026e42:	4618      	mov	r0, r3
 8026e44:	3720      	adds	r7, #32
 8026e46:	46bd      	mov	sp, r7
 8026e48:	bd80      	pop	{r7, pc}

08026e4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8026e4a:	b580      	push	{r7, lr}
 8026e4c:	b088      	sub	sp, #32
 8026e4e:	af00      	add	r7, sp, #0
 8026e50:	6078      	str	r0, [r7, #4]
 8026e52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	681b      	ldr	r3, [r3, #0]
 8026e58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8026e5a:	683b      	ldr	r3, [r7, #0]
 8026e5c:	2b00      	cmp	r3, #0
 8026e5e:	d10d      	bne.n	8026e7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8026e60:	693b      	ldr	r3, [r7, #16]
 8026e62:	68db      	ldr	r3, [r3, #12]
 8026e64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8026e66:	69bb      	ldr	r3, [r7, #24]
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	d004      	beq.n	8026e76 <create_chain+0x2c>
 8026e6c:	693b      	ldr	r3, [r7, #16]
 8026e6e:	695b      	ldr	r3, [r3, #20]
 8026e70:	69ba      	ldr	r2, [r7, #24]
 8026e72:	429a      	cmp	r2, r3
 8026e74:	d31b      	bcc.n	8026eae <create_chain+0x64>
 8026e76:	2301      	movs	r3, #1
 8026e78:	61bb      	str	r3, [r7, #24]
 8026e7a:	e018      	b.n	8026eae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8026e7c:	6839      	ldr	r1, [r7, #0]
 8026e7e:	6878      	ldr	r0, [r7, #4]
 8026e80:	f7ff fded 	bl	8026a5e <get_fat>
 8026e84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8026e86:	68fb      	ldr	r3, [r7, #12]
 8026e88:	2b01      	cmp	r3, #1
 8026e8a:	d801      	bhi.n	8026e90 <create_chain+0x46>
 8026e8c:	2301      	movs	r3, #1
 8026e8e:	e070      	b.n	8026f72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8026e90:	68fb      	ldr	r3, [r7, #12]
 8026e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026e96:	d101      	bne.n	8026e9c <create_chain+0x52>
 8026e98:	68fb      	ldr	r3, [r7, #12]
 8026e9a:	e06a      	b.n	8026f72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8026e9c:	693b      	ldr	r3, [r7, #16]
 8026e9e:	695b      	ldr	r3, [r3, #20]
 8026ea0:	68fa      	ldr	r2, [r7, #12]
 8026ea2:	429a      	cmp	r2, r3
 8026ea4:	d201      	bcs.n	8026eaa <create_chain+0x60>
 8026ea6:	68fb      	ldr	r3, [r7, #12]
 8026ea8:	e063      	b.n	8026f72 <create_chain+0x128>
		scl = clst;
 8026eaa:	683b      	ldr	r3, [r7, #0]
 8026eac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8026eae:	69bb      	ldr	r3, [r7, #24]
 8026eb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8026eb2:	69fb      	ldr	r3, [r7, #28]
 8026eb4:	3301      	adds	r3, #1
 8026eb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8026eb8:	693b      	ldr	r3, [r7, #16]
 8026eba:	695b      	ldr	r3, [r3, #20]
 8026ebc:	69fa      	ldr	r2, [r7, #28]
 8026ebe:	429a      	cmp	r2, r3
 8026ec0:	d307      	bcc.n	8026ed2 <create_chain+0x88>
				ncl = 2;
 8026ec2:	2302      	movs	r3, #2
 8026ec4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8026ec6:	69fa      	ldr	r2, [r7, #28]
 8026ec8:	69bb      	ldr	r3, [r7, #24]
 8026eca:	429a      	cmp	r2, r3
 8026ecc:	d901      	bls.n	8026ed2 <create_chain+0x88>
 8026ece:	2300      	movs	r3, #0
 8026ed0:	e04f      	b.n	8026f72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8026ed2:	69f9      	ldr	r1, [r7, #28]
 8026ed4:	6878      	ldr	r0, [r7, #4]
 8026ed6:	f7ff fdc2 	bl	8026a5e <get_fat>
 8026eda:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8026edc:	68fb      	ldr	r3, [r7, #12]
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d00e      	beq.n	8026f00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8026ee2:	68fb      	ldr	r3, [r7, #12]
 8026ee4:	2b01      	cmp	r3, #1
 8026ee6:	d003      	beq.n	8026ef0 <create_chain+0xa6>
 8026ee8:	68fb      	ldr	r3, [r7, #12]
 8026eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026eee:	d101      	bne.n	8026ef4 <create_chain+0xaa>
 8026ef0:	68fb      	ldr	r3, [r7, #12]
 8026ef2:	e03e      	b.n	8026f72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8026ef4:	69fa      	ldr	r2, [r7, #28]
 8026ef6:	69bb      	ldr	r3, [r7, #24]
 8026ef8:	429a      	cmp	r2, r3
 8026efa:	d1da      	bne.n	8026eb2 <create_chain+0x68>
 8026efc:	2300      	movs	r3, #0
 8026efe:	e038      	b.n	8026f72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8026f00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8026f02:	f04f 32ff 	mov.w	r2, #4294967295
 8026f06:	69f9      	ldr	r1, [r7, #28]
 8026f08:	6938      	ldr	r0, [r7, #16]
 8026f0a:	f7ff fe4f 	bl	8026bac <put_fat>
 8026f0e:	4603      	mov	r3, r0
 8026f10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8026f12:	7dfb      	ldrb	r3, [r7, #23]
 8026f14:	2b00      	cmp	r3, #0
 8026f16:	d109      	bne.n	8026f2c <create_chain+0xe2>
 8026f18:	683b      	ldr	r3, [r7, #0]
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d006      	beq.n	8026f2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8026f1e:	69fa      	ldr	r2, [r7, #28]
 8026f20:	6839      	ldr	r1, [r7, #0]
 8026f22:	6938      	ldr	r0, [r7, #16]
 8026f24:	f7ff fe42 	bl	8026bac <put_fat>
 8026f28:	4603      	mov	r3, r0
 8026f2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8026f2c:	7dfb      	ldrb	r3, [r7, #23]
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	d116      	bne.n	8026f60 <create_chain+0x116>
		fs->last_clst = ncl;
 8026f32:	693b      	ldr	r3, [r7, #16]
 8026f34:	69fa      	ldr	r2, [r7, #28]
 8026f36:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8026f38:	693b      	ldr	r3, [r7, #16]
 8026f3a:	691a      	ldr	r2, [r3, #16]
 8026f3c:	693b      	ldr	r3, [r7, #16]
 8026f3e:	695b      	ldr	r3, [r3, #20]
 8026f40:	3b02      	subs	r3, #2
 8026f42:	429a      	cmp	r2, r3
 8026f44:	d804      	bhi.n	8026f50 <create_chain+0x106>
 8026f46:	693b      	ldr	r3, [r7, #16]
 8026f48:	691b      	ldr	r3, [r3, #16]
 8026f4a:	1e5a      	subs	r2, r3, #1
 8026f4c:	693b      	ldr	r3, [r7, #16]
 8026f4e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8026f50:	693b      	ldr	r3, [r7, #16]
 8026f52:	791b      	ldrb	r3, [r3, #4]
 8026f54:	f043 0301 	orr.w	r3, r3, #1
 8026f58:	b2da      	uxtb	r2, r3
 8026f5a:	693b      	ldr	r3, [r7, #16]
 8026f5c:	711a      	strb	r2, [r3, #4]
 8026f5e:	e007      	b.n	8026f70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8026f60:	7dfb      	ldrb	r3, [r7, #23]
 8026f62:	2b01      	cmp	r3, #1
 8026f64:	d102      	bne.n	8026f6c <create_chain+0x122>
 8026f66:	f04f 33ff 	mov.w	r3, #4294967295
 8026f6a:	e000      	b.n	8026f6e <create_chain+0x124>
 8026f6c:	2301      	movs	r3, #1
 8026f6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8026f70:	69fb      	ldr	r3, [r7, #28]
}
 8026f72:	4618      	mov	r0, r3
 8026f74:	3720      	adds	r7, #32
 8026f76:	46bd      	mov	sp, r7
 8026f78:	bd80      	pop	{r7, pc}

08026f7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8026f7a:	b480      	push	{r7}
 8026f7c:	b087      	sub	sp, #28
 8026f7e:	af00      	add	r7, sp, #0
 8026f80:	6078      	str	r0, [r7, #4]
 8026f82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8026f84:	687b      	ldr	r3, [r7, #4]
 8026f86:	681b      	ldr	r3, [r3, #0]
 8026f88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026f8e:	3304      	adds	r3, #4
 8026f90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8026f92:	683b      	ldr	r3, [r7, #0]
 8026f94:	0a5b      	lsrs	r3, r3, #9
 8026f96:	68fa      	ldr	r2, [r7, #12]
 8026f98:	8952      	ldrh	r2, [r2, #10]
 8026f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8026f9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8026fa0:	693b      	ldr	r3, [r7, #16]
 8026fa2:	1d1a      	adds	r2, r3, #4
 8026fa4:	613a      	str	r2, [r7, #16]
 8026fa6:	681b      	ldr	r3, [r3, #0]
 8026fa8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8026faa:	68bb      	ldr	r3, [r7, #8]
 8026fac:	2b00      	cmp	r3, #0
 8026fae:	d101      	bne.n	8026fb4 <clmt_clust+0x3a>
 8026fb0:	2300      	movs	r3, #0
 8026fb2:	e010      	b.n	8026fd6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8026fb4:	697a      	ldr	r2, [r7, #20]
 8026fb6:	68bb      	ldr	r3, [r7, #8]
 8026fb8:	429a      	cmp	r2, r3
 8026fba:	d307      	bcc.n	8026fcc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8026fbc:	697a      	ldr	r2, [r7, #20]
 8026fbe:	68bb      	ldr	r3, [r7, #8]
 8026fc0:	1ad3      	subs	r3, r2, r3
 8026fc2:	617b      	str	r3, [r7, #20]
 8026fc4:	693b      	ldr	r3, [r7, #16]
 8026fc6:	3304      	adds	r3, #4
 8026fc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8026fca:	e7e9      	b.n	8026fa0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8026fcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8026fce:	693b      	ldr	r3, [r7, #16]
 8026fd0:	681a      	ldr	r2, [r3, #0]
 8026fd2:	697b      	ldr	r3, [r7, #20]
 8026fd4:	4413      	add	r3, r2
}
 8026fd6:	4618      	mov	r0, r3
 8026fd8:	371c      	adds	r7, #28
 8026fda:	46bd      	mov	sp, r7
 8026fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fe0:	4770      	bx	lr

08026fe2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8026fe2:	b580      	push	{r7, lr}
 8026fe4:	b086      	sub	sp, #24
 8026fe6:	af00      	add	r7, sp, #0
 8026fe8:	6078      	str	r0, [r7, #4]
 8026fea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8026fec:	687b      	ldr	r3, [r7, #4]
 8026fee:	681b      	ldr	r3, [r3, #0]
 8026ff0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8026ff2:	683b      	ldr	r3, [r7, #0]
 8026ff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026ff8:	d204      	bcs.n	8027004 <dir_sdi+0x22>
 8026ffa:	683b      	ldr	r3, [r7, #0]
 8026ffc:	f003 031f 	and.w	r3, r3, #31
 8027000:	2b00      	cmp	r3, #0
 8027002:	d001      	beq.n	8027008 <dir_sdi+0x26>
		return FR_INT_ERR;
 8027004:	2302      	movs	r3, #2
 8027006:	e063      	b.n	80270d0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	683a      	ldr	r2, [r7, #0]
 802700c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	689b      	ldr	r3, [r3, #8]
 8027012:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8027014:	697b      	ldr	r3, [r7, #20]
 8027016:	2b00      	cmp	r3, #0
 8027018:	d106      	bne.n	8027028 <dir_sdi+0x46>
 802701a:	693b      	ldr	r3, [r7, #16]
 802701c:	781b      	ldrb	r3, [r3, #0]
 802701e:	2b02      	cmp	r3, #2
 8027020:	d902      	bls.n	8027028 <dir_sdi+0x46>
		clst = fs->dirbase;
 8027022:	693b      	ldr	r3, [r7, #16]
 8027024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027026:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8027028:	697b      	ldr	r3, [r7, #20]
 802702a:	2b00      	cmp	r3, #0
 802702c:	d10c      	bne.n	8027048 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 802702e:	683b      	ldr	r3, [r7, #0]
 8027030:	095b      	lsrs	r3, r3, #5
 8027032:	693a      	ldr	r2, [r7, #16]
 8027034:	8912      	ldrh	r2, [r2, #8]
 8027036:	4293      	cmp	r3, r2
 8027038:	d301      	bcc.n	802703e <dir_sdi+0x5c>
 802703a:	2302      	movs	r3, #2
 802703c:	e048      	b.n	80270d0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 802703e:	693b      	ldr	r3, [r7, #16]
 8027040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	61da      	str	r2, [r3, #28]
 8027046:	e029      	b.n	802709c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8027048:	693b      	ldr	r3, [r7, #16]
 802704a:	895b      	ldrh	r3, [r3, #10]
 802704c:	025b      	lsls	r3, r3, #9
 802704e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8027050:	e019      	b.n	8027086 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	6979      	ldr	r1, [r7, #20]
 8027056:	4618      	mov	r0, r3
 8027058:	f7ff fd01 	bl	8026a5e <get_fat>
 802705c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802705e:	697b      	ldr	r3, [r7, #20]
 8027060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027064:	d101      	bne.n	802706a <dir_sdi+0x88>
 8027066:	2301      	movs	r3, #1
 8027068:	e032      	b.n	80270d0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 802706a:	697b      	ldr	r3, [r7, #20]
 802706c:	2b01      	cmp	r3, #1
 802706e:	d904      	bls.n	802707a <dir_sdi+0x98>
 8027070:	693b      	ldr	r3, [r7, #16]
 8027072:	695b      	ldr	r3, [r3, #20]
 8027074:	697a      	ldr	r2, [r7, #20]
 8027076:	429a      	cmp	r2, r3
 8027078:	d301      	bcc.n	802707e <dir_sdi+0x9c>
 802707a:	2302      	movs	r3, #2
 802707c:	e028      	b.n	80270d0 <dir_sdi+0xee>
			ofs -= csz;
 802707e:	683a      	ldr	r2, [r7, #0]
 8027080:	68fb      	ldr	r3, [r7, #12]
 8027082:	1ad3      	subs	r3, r2, r3
 8027084:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8027086:	683a      	ldr	r2, [r7, #0]
 8027088:	68fb      	ldr	r3, [r7, #12]
 802708a:	429a      	cmp	r2, r3
 802708c:	d2e1      	bcs.n	8027052 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 802708e:	6979      	ldr	r1, [r7, #20]
 8027090:	6938      	ldr	r0, [r7, #16]
 8027092:	f7ff fcc5 	bl	8026a20 <clust2sect>
 8027096:	4602      	mov	r2, r0
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	697a      	ldr	r2, [r7, #20]
 80270a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80270a2:	687b      	ldr	r3, [r7, #4]
 80270a4:	69db      	ldr	r3, [r3, #28]
 80270a6:	2b00      	cmp	r3, #0
 80270a8:	d101      	bne.n	80270ae <dir_sdi+0xcc>
 80270aa:	2302      	movs	r3, #2
 80270ac:	e010      	b.n	80270d0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80270ae:	687b      	ldr	r3, [r7, #4]
 80270b0:	69da      	ldr	r2, [r3, #28]
 80270b2:	683b      	ldr	r3, [r7, #0]
 80270b4:	0a5b      	lsrs	r3, r3, #9
 80270b6:	441a      	add	r2, r3
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80270bc:	693b      	ldr	r3, [r7, #16]
 80270be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80270c2:	683b      	ldr	r3, [r7, #0]
 80270c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80270c8:	441a      	add	r2, r3
 80270ca:	687b      	ldr	r3, [r7, #4]
 80270cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80270ce:	2300      	movs	r3, #0
}
 80270d0:	4618      	mov	r0, r3
 80270d2:	3718      	adds	r7, #24
 80270d4:	46bd      	mov	sp, r7
 80270d6:	bd80      	pop	{r7, pc}

080270d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80270d8:	b580      	push	{r7, lr}
 80270da:	b086      	sub	sp, #24
 80270dc:	af00      	add	r7, sp, #0
 80270de:	6078      	str	r0, [r7, #4]
 80270e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80270e2:	687b      	ldr	r3, [r7, #4]
 80270e4:	681b      	ldr	r3, [r3, #0]
 80270e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	695b      	ldr	r3, [r3, #20]
 80270ec:	3320      	adds	r3, #32
 80270ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	69db      	ldr	r3, [r3, #28]
 80270f4:	2b00      	cmp	r3, #0
 80270f6:	d003      	beq.n	8027100 <dir_next+0x28>
 80270f8:	68bb      	ldr	r3, [r7, #8]
 80270fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80270fe:	d301      	bcc.n	8027104 <dir_next+0x2c>
 8027100:	2304      	movs	r3, #4
 8027102:	e0aa      	b.n	802725a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8027104:	68bb      	ldr	r3, [r7, #8]
 8027106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802710a:	2b00      	cmp	r3, #0
 802710c:	f040 8098 	bne.w	8027240 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8027110:	687b      	ldr	r3, [r7, #4]
 8027112:	69db      	ldr	r3, [r3, #28]
 8027114:	1c5a      	adds	r2, r3, #1
 8027116:	687b      	ldr	r3, [r7, #4]
 8027118:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 802711a:	687b      	ldr	r3, [r7, #4]
 802711c:	699b      	ldr	r3, [r3, #24]
 802711e:	2b00      	cmp	r3, #0
 8027120:	d10b      	bne.n	802713a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8027122:	68bb      	ldr	r3, [r7, #8]
 8027124:	095b      	lsrs	r3, r3, #5
 8027126:	68fa      	ldr	r2, [r7, #12]
 8027128:	8912      	ldrh	r2, [r2, #8]
 802712a:	4293      	cmp	r3, r2
 802712c:	f0c0 8088 	bcc.w	8027240 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	2200      	movs	r2, #0
 8027134:	61da      	str	r2, [r3, #28]
 8027136:	2304      	movs	r3, #4
 8027138:	e08f      	b.n	802725a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 802713a:	68bb      	ldr	r3, [r7, #8]
 802713c:	0a5b      	lsrs	r3, r3, #9
 802713e:	68fa      	ldr	r2, [r7, #12]
 8027140:	8952      	ldrh	r2, [r2, #10]
 8027142:	3a01      	subs	r2, #1
 8027144:	4013      	ands	r3, r2
 8027146:	2b00      	cmp	r3, #0
 8027148:	d17a      	bne.n	8027240 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802714a:	687a      	ldr	r2, [r7, #4]
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	699b      	ldr	r3, [r3, #24]
 8027150:	4619      	mov	r1, r3
 8027152:	4610      	mov	r0, r2
 8027154:	f7ff fc83 	bl	8026a5e <get_fat>
 8027158:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 802715a:	697b      	ldr	r3, [r7, #20]
 802715c:	2b01      	cmp	r3, #1
 802715e:	d801      	bhi.n	8027164 <dir_next+0x8c>
 8027160:	2302      	movs	r3, #2
 8027162:	e07a      	b.n	802725a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8027164:	697b      	ldr	r3, [r7, #20]
 8027166:	f1b3 3fff 	cmp.w	r3, #4294967295
 802716a:	d101      	bne.n	8027170 <dir_next+0x98>
 802716c:	2301      	movs	r3, #1
 802716e:	e074      	b.n	802725a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8027170:	68fb      	ldr	r3, [r7, #12]
 8027172:	695b      	ldr	r3, [r3, #20]
 8027174:	697a      	ldr	r2, [r7, #20]
 8027176:	429a      	cmp	r2, r3
 8027178:	d358      	bcc.n	802722c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 802717a:	683b      	ldr	r3, [r7, #0]
 802717c:	2b00      	cmp	r3, #0
 802717e:	d104      	bne.n	802718a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8027180:	687b      	ldr	r3, [r7, #4]
 8027182:	2200      	movs	r2, #0
 8027184:	61da      	str	r2, [r3, #28]
 8027186:	2304      	movs	r3, #4
 8027188:	e067      	b.n	802725a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 802718a:	687a      	ldr	r2, [r7, #4]
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	699b      	ldr	r3, [r3, #24]
 8027190:	4619      	mov	r1, r3
 8027192:	4610      	mov	r0, r2
 8027194:	f7ff fe59 	bl	8026e4a <create_chain>
 8027198:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 802719a:	697b      	ldr	r3, [r7, #20]
 802719c:	2b00      	cmp	r3, #0
 802719e:	d101      	bne.n	80271a4 <dir_next+0xcc>
 80271a0:	2307      	movs	r3, #7
 80271a2:	e05a      	b.n	802725a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80271a4:	697b      	ldr	r3, [r7, #20]
 80271a6:	2b01      	cmp	r3, #1
 80271a8:	d101      	bne.n	80271ae <dir_next+0xd6>
 80271aa:	2302      	movs	r3, #2
 80271ac:	e055      	b.n	802725a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80271ae:	697b      	ldr	r3, [r7, #20]
 80271b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80271b4:	d101      	bne.n	80271ba <dir_next+0xe2>
 80271b6:	2301      	movs	r3, #1
 80271b8:	e04f      	b.n	802725a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80271ba:	68f8      	ldr	r0, [r7, #12]
 80271bc:	f7ff fb50 	bl	8026860 <sync_window>
 80271c0:	4603      	mov	r3, r0
 80271c2:	2b00      	cmp	r3, #0
 80271c4:	d001      	beq.n	80271ca <dir_next+0xf2>
 80271c6:	2301      	movs	r3, #1
 80271c8:	e047      	b.n	802725a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80271ca:	68fb      	ldr	r3, [r7, #12]
 80271cc:	3330      	adds	r3, #48	@ 0x30
 80271ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80271d2:	2100      	movs	r1, #0
 80271d4:	4618      	mov	r0, r3
 80271d6:	f7ff f97a 	bl	80264ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80271da:	2300      	movs	r3, #0
 80271dc:	613b      	str	r3, [r7, #16]
 80271de:	6979      	ldr	r1, [r7, #20]
 80271e0:	68f8      	ldr	r0, [r7, #12]
 80271e2:	f7ff fc1d 	bl	8026a20 <clust2sect>
 80271e6:	4602      	mov	r2, r0
 80271e8:	68fb      	ldr	r3, [r7, #12]
 80271ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80271ec:	e012      	b.n	8027214 <dir_next+0x13c>
						fs->wflag = 1;
 80271ee:	68fb      	ldr	r3, [r7, #12]
 80271f0:	2201      	movs	r2, #1
 80271f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80271f4:	68f8      	ldr	r0, [r7, #12]
 80271f6:	f7ff fb33 	bl	8026860 <sync_window>
 80271fa:	4603      	mov	r3, r0
 80271fc:	2b00      	cmp	r3, #0
 80271fe:	d001      	beq.n	8027204 <dir_next+0x12c>
 8027200:	2301      	movs	r3, #1
 8027202:	e02a      	b.n	802725a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8027204:	693b      	ldr	r3, [r7, #16]
 8027206:	3301      	adds	r3, #1
 8027208:	613b      	str	r3, [r7, #16]
 802720a:	68fb      	ldr	r3, [r7, #12]
 802720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802720e:	1c5a      	adds	r2, r3, #1
 8027210:	68fb      	ldr	r3, [r7, #12]
 8027212:	62da      	str	r2, [r3, #44]	@ 0x2c
 8027214:	68fb      	ldr	r3, [r7, #12]
 8027216:	895b      	ldrh	r3, [r3, #10]
 8027218:	461a      	mov	r2, r3
 802721a:	693b      	ldr	r3, [r7, #16]
 802721c:	4293      	cmp	r3, r2
 802721e:	d3e6      	bcc.n	80271ee <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8027220:	68fb      	ldr	r3, [r7, #12]
 8027222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8027224:	693b      	ldr	r3, [r7, #16]
 8027226:	1ad2      	subs	r2, r2, r3
 8027228:	68fb      	ldr	r3, [r7, #12]
 802722a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	697a      	ldr	r2, [r7, #20]
 8027230:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8027232:	6979      	ldr	r1, [r7, #20]
 8027234:	68f8      	ldr	r0, [r7, #12]
 8027236:	f7ff fbf3 	bl	8026a20 <clust2sect>
 802723a:	4602      	mov	r2, r0
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8027240:	687b      	ldr	r3, [r7, #4]
 8027242:	68ba      	ldr	r2, [r7, #8]
 8027244:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8027246:	68fb      	ldr	r3, [r7, #12]
 8027248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 802724c:	68bb      	ldr	r3, [r7, #8]
 802724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027252:	441a      	add	r2, r3
 8027254:	687b      	ldr	r3, [r7, #4]
 8027256:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8027258:	2300      	movs	r3, #0
}
 802725a:	4618      	mov	r0, r3
 802725c:	3718      	adds	r7, #24
 802725e:	46bd      	mov	sp, r7
 8027260:	bd80      	pop	{r7, pc}

08027262 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8027262:	b580      	push	{r7, lr}
 8027264:	b086      	sub	sp, #24
 8027266:	af00      	add	r7, sp, #0
 8027268:	6078      	str	r0, [r7, #4]
 802726a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	681b      	ldr	r3, [r3, #0]
 8027270:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8027272:	2100      	movs	r1, #0
 8027274:	6878      	ldr	r0, [r7, #4]
 8027276:	f7ff feb4 	bl	8026fe2 <dir_sdi>
 802727a:	4603      	mov	r3, r0
 802727c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802727e:	7dfb      	ldrb	r3, [r7, #23]
 8027280:	2b00      	cmp	r3, #0
 8027282:	d12b      	bne.n	80272dc <dir_alloc+0x7a>
		n = 0;
 8027284:	2300      	movs	r3, #0
 8027286:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8027288:	687b      	ldr	r3, [r7, #4]
 802728a:	69db      	ldr	r3, [r3, #28]
 802728c:	4619      	mov	r1, r3
 802728e:	68f8      	ldr	r0, [r7, #12]
 8027290:	f7ff fb2a 	bl	80268e8 <move_window>
 8027294:	4603      	mov	r3, r0
 8027296:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8027298:	7dfb      	ldrb	r3, [r7, #23]
 802729a:	2b00      	cmp	r3, #0
 802729c:	d11d      	bne.n	80272da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	6a1b      	ldr	r3, [r3, #32]
 80272a2:	781b      	ldrb	r3, [r3, #0]
 80272a4:	2be5      	cmp	r3, #229	@ 0xe5
 80272a6:	d004      	beq.n	80272b2 <dir_alloc+0x50>
 80272a8:	687b      	ldr	r3, [r7, #4]
 80272aa:	6a1b      	ldr	r3, [r3, #32]
 80272ac:	781b      	ldrb	r3, [r3, #0]
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d107      	bne.n	80272c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80272b2:	693b      	ldr	r3, [r7, #16]
 80272b4:	3301      	adds	r3, #1
 80272b6:	613b      	str	r3, [r7, #16]
 80272b8:	693a      	ldr	r2, [r7, #16]
 80272ba:	683b      	ldr	r3, [r7, #0]
 80272bc:	429a      	cmp	r2, r3
 80272be:	d102      	bne.n	80272c6 <dir_alloc+0x64>
 80272c0:	e00c      	b.n	80272dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80272c2:	2300      	movs	r3, #0
 80272c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80272c6:	2101      	movs	r1, #1
 80272c8:	6878      	ldr	r0, [r7, #4]
 80272ca:	f7ff ff05 	bl	80270d8 <dir_next>
 80272ce:	4603      	mov	r3, r0
 80272d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80272d2:	7dfb      	ldrb	r3, [r7, #23]
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	d0d7      	beq.n	8027288 <dir_alloc+0x26>
 80272d8:	e000      	b.n	80272dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80272da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80272dc:	7dfb      	ldrb	r3, [r7, #23]
 80272de:	2b04      	cmp	r3, #4
 80272e0:	d101      	bne.n	80272e6 <dir_alloc+0x84>
 80272e2:	2307      	movs	r3, #7
 80272e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80272e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80272e8:	4618      	mov	r0, r3
 80272ea:	3718      	adds	r7, #24
 80272ec:	46bd      	mov	sp, r7
 80272ee:	bd80      	pop	{r7, pc}

080272f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80272f0:	b580      	push	{r7, lr}
 80272f2:	b084      	sub	sp, #16
 80272f4:	af00      	add	r7, sp, #0
 80272f6:	6078      	str	r0, [r7, #4]
 80272f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80272fa:	683b      	ldr	r3, [r7, #0]
 80272fc:	331a      	adds	r3, #26
 80272fe:	4618      	mov	r0, r3
 8027300:	f7ff f842 	bl	8026388 <ld_word>
 8027304:	4603      	mov	r3, r0
 8027306:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8027308:	687b      	ldr	r3, [r7, #4]
 802730a:	781b      	ldrb	r3, [r3, #0]
 802730c:	2b03      	cmp	r3, #3
 802730e:	d109      	bne.n	8027324 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8027310:	683b      	ldr	r3, [r7, #0]
 8027312:	3314      	adds	r3, #20
 8027314:	4618      	mov	r0, r3
 8027316:	f7ff f837 	bl	8026388 <ld_word>
 802731a:	4603      	mov	r3, r0
 802731c:	041b      	lsls	r3, r3, #16
 802731e:	68fa      	ldr	r2, [r7, #12]
 8027320:	4313      	orrs	r3, r2
 8027322:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8027324:	68fb      	ldr	r3, [r7, #12]
}
 8027326:	4618      	mov	r0, r3
 8027328:	3710      	adds	r7, #16
 802732a:	46bd      	mov	sp, r7
 802732c:	bd80      	pop	{r7, pc}

0802732e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 802732e:	b580      	push	{r7, lr}
 8027330:	b084      	sub	sp, #16
 8027332:	af00      	add	r7, sp, #0
 8027334:	60f8      	str	r0, [r7, #12]
 8027336:	60b9      	str	r1, [r7, #8]
 8027338:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 802733a:	68bb      	ldr	r3, [r7, #8]
 802733c:	331a      	adds	r3, #26
 802733e:	687a      	ldr	r2, [r7, #4]
 8027340:	b292      	uxth	r2, r2
 8027342:	4611      	mov	r1, r2
 8027344:	4618      	mov	r0, r3
 8027346:	f7ff f85a 	bl	80263fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 802734a:	68fb      	ldr	r3, [r7, #12]
 802734c:	781b      	ldrb	r3, [r3, #0]
 802734e:	2b03      	cmp	r3, #3
 8027350:	d109      	bne.n	8027366 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8027352:	68bb      	ldr	r3, [r7, #8]
 8027354:	f103 0214 	add.w	r2, r3, #20
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	0c1b      	lsrs	r3, r3, #16
 802735c:	b29b      	uxth	r3, r3
 802735e:	4619      	mov	r1, r3
 8027360:	4610      	mov	r0, r2
 8027362:	f7ff f84c 	bl	80263fe <st_word>
	}
}
 8027366:	bf00      	nop
 8027368:	3710      	adds	r7, #16
 802736a:	46bd      	mov	sp, r7
 802736c:	bd80      	pop	{r7, pc}

0802736e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 802736e:	b580      	push	{r7, lr}
 8027370:	b086      	sub	sp, #24
 8027372:	af00      	add	r7, sp, #0
 8027374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8027376:	687b      	ldr	r3, [r7, #4]
 8027378:	681b      	ldr	r3, [r3, #0]
 802737a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 802737c:	2100      	movs	r1, #0
 802737e:	6878      	ldr	r0, [r7, #4]
 8027380:	f7ff fe2f 	bl	8026fe2 <dir_sdi>
 8027384:	4603      	mov	r3, r0
 8027386:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8027388:	7dfb      	ldrb	r3, [r7, #23]
 802738a:	2b00      	cmp	r3, #0
 802738c:	d001      	beq.n	8027392 <dir_find+0x24>
 802738e:	7dfb      	ldrb	r3, [r7, #23]
 8027390:	e03e      	b.n	8027410 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8027392:	687b      	ldr	r3, [r7, #4]
 8027394:	69db      	ldr	r3, [r3, #28]
 8027396:	4619      	mov	r1, r3
 8027398:	6938      	ldr	r0, [r7, #16]
 802739a:	f7ff faa5 	bl	80268e8 <move_window>
 802739e:	4603      	mov	r3, r0
 80273a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80273a2:	7dfb      	ldrb	r3, [r7, #23]
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	d12f      	bne.n	8027408 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80273a8:	687b      	ldr	r3, [r7, #4]
 80273aa:	6a1b      	ldr	r3, [r3, #32]
 80273ac:	781b      	ldrb	r3, [r3, #0]
 80273ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80273b0:	7bfb      	ldrb	r3, [r7, #15]
 80273b2:	2b00      	cmp	r3, #0
 80273b4:	d102      	bne.n	80273bc <dir_find+0x4e>
 80273b6:	2304      	movs	r3, #4
 80273b8:	75fb      	strb	r3, [r7, #23]
 80273ba:	e028      	b.n	802740e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	6a1b      	ldr	r3, [r3, #32]
 80273c0:	330b      	adds	r3, #11
 80273c2:	781b      	ldrb	r3, [r3, #0]
 80273c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80273c8:	b2da      	uxtb	r2, r3
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80273ce:	687b      	ldr	r3, [r7, #4]
 80273d0:	6a1b      	ldr	r3, [r3, #32]
 80273d2:	330b      	adds	r3, #11
 80273d4:	781b      	ldrb	r3, [r3, #0]
 80273d6:	f003 0308 	and.w	r3, r3, #8
 80273da:	2b00      	cmp	r3, #0
 80273dc:	d10a      	bne.n	80273f4 <dir_find+0x86>
 80273de:	687b      	ldr	r3, [r7, #4]
 80273e0:	6a18      	ldr	r0, [r3, #32]
 80273e2:	687b      	ldr	r3, [r7, #4]
 80273e4:	3324      	adds	r3, #36	@ 0x24
 80273e6:	220b      	movs	r2, #11
 80273e8:	4619      	mov	r1, r3
 80273ea:	f7ff f88b 	bl	8026504 <mem_cmp>
 80273ee:	4603      	mov	r3, r0
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d00b      	beq.n	802740c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80273f4:	2100      	movs	r1, #0
 80273f6:	6878      	ldr	r0, [r7, #4]
 80273f8:	f7ff fe6e 	bl	80270d8 <dir_next>
 80273fc:	4603      	mov	r3, r0
 80273fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8027400:	7dfb      	ldrb	r3, [r7, #23]
 8027402:	2b00      	cmp	r3, #0
 8027404:	d0c5      	beq.n	8027392 <dir_find+0x24>
 8027406:	e002      	b.n	802740e <dir_find+0xa0>
		if (res != FR_OK) break;
 8027408:	bf00      	nop
 802740a:	e000      	b.n	802740e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 802740c:	bf00      	nop

	return res;
 802740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027410:	4618      	mov	r0, r3
 8027412:	3718      	adds	r7, #24
 8027414:	46bd      	mov	sp, r7
 8027416:	bd80      	pop	{r7, pc}

08027418 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8027418:	b580      	push	{r7, lr}
 802741a:	b084      	sub	sp, #16
 802741c:	af00      	add	r7, sp, #0
 802741e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8027420:	687b      	ldr	r3, [r7, #4]
 8027422:	681b      	ldr	r3, [r3, #0]
 8027424:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8027426:	2101      	movs	r1, #1
 8027428:	6878      	ldr	r0, [r7, #4]
 802742a:	f7ff ff1a 	bl	8027262 <dir_alloc>
 802742e:	4603      	mov	r3, r0
 8027430:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8027432:	7bfb      	ldrb	r3, [r7, #15]
 8027434:	2b00      	cmp	r3, #0
 8027436:	d11c      	bne.n	8027472 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8027438:	687b      	ldr	r3, [r7, #4]
 802743a:	69db      	ldr	r3, [r3, #28]
 802743c:	4619      	mov	r1, r3
 802743e:	68b8      	ldr	r0, [r7, #8]
 8027440:	f7ff fa52 	bl	80268e8 <move_window>
 8027444:	4603      	mov	r3, r0
 8027446:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8027448:	7bfb      	ldrb	r3, [r7, #15]
 802744a:	2b00      	cmp	r3, #0
 802744c:	d111      	bne.n	8027472 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 802744e:	687b      	ldr	r3, [r7, #4]
 8027450:	6a1b      	ldr	r3, [r3, #32]
 8027452:	2220      	movs	r2, #32
 8027454:	2100      	movs	r1, #0
 8027456:	4618      	mov	r0, r3
 8027458:	f7ff f839 	bl	80264ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 802745c:	687b      	ldr	r3, [r7, #4]
 802745e:	6a18      	ldr	r0, [r3, #32]
 8027460:	687b      	ldr	r3, [r7, #4]
 8027462:	3324      	adds	r3, #36	@ 0x24
 8027464:	220b      	movs	r2, #11
 8027466:	4619      	mov	r1, r3
 8027468:	f7ff f810 	bl	802648c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 802746c:	68bb      	ldr	r3, [r7, #8]
 802746e:	2201      	movs	r2, #1
 8027470:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8027472:	7bfb      	ldrb	r3, [r7, #15]
}
 8027474:	4618      	mov	r0, r3
 8027476:	3710      	adds	r7, #16
 8027478:	46bd      	mov	sp, r7
 802747a:	bd80      	pop	{r7, pc}

0802747c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 802747c:	b580      	push	{r7, lr}
 802747e:	b088      	sub	sp, #32
 8027480:	af00      	add	r7, sp, #0
 8027482:	6078      	str	r0, [r7, #4]
 8027484:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8027486:	683b      	ldr	r3, [r7, #0]
 8027488:	681b      	ldr	r3, [r3, #0]
 802748a:	60fb      	str	r3, [r7, #12]
 802748c:	687b      	ldr	r3, [r7, #4]
 802748e:	3324      	adds	r3, #36	@ 0x24
 8027490:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8027492:	220b      	movs	r2, #11
 8027494:	2120      	movs	r1, #32
 8027496:	68b8      	ldr	r0, [r7, #8]
 8027498:	f7ff f819 	bl	80264ce <mem_set>
	si = i = 0; ni = 8;
 802749c:	2300      	movs	r3, #0
 802749e:	613b      	str	r3, [r7, #16]
 80274a0:	693b      	ldr	r3, [r7, #16]
 80274a2:	61fb      	str	r3, [r7, #28]
 80274a4:	2308      	movs	r3, #8
 80274a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80274a8:	69fb      	ldr	r3, [r7, #28]
 80274aa:	1c5a      	adds	r2, r3, #1
 80274ac:	61fa      	str	r2, [r7, #28]
 80274ae:	68fa      	ldr	r2, [r7, #12]
 80274b0:	4413      	add	r3, r2
 80274b2:	781b      	ldrb	r3, [r3, #0]
 80274b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80274b6:	7efb      	ldrb	r3, [r7, #27]
 80274b8:	2b20      	cmp	r3, #32
 80274ba:	d94e      	bls.n	802755a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80274bc:	7efb      	ldrb	r3, [r7, #27]
 80274be:	2b2f      	cmp	r3, #47	@ 0x2f
 80274c0:	d006      	beq.n	80274d0 <create_name+0x54>
 80274c2:	7efb      	ldrb	r3, [r7, #27]
 80274c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80274c6:	d110      	bne.n	80274ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80274c8:	e002      	b.n	80274d0 <create_name+0x54>
 80274ca:	69fb      	ldr	r3, [r7, #28]
 80274cc:	3301      	adds	r3, #1
 80274ce:	61fb      	str	r3, [r7, #28]
 80274d0:	68fa      	ldr	r2, [r7, #12]
 80274d2:	69fb      	ldr	r3, [r7, #28]
 80274d4:	4413      	add	r3, r2
 80274d6:	781b      	ldrb	r3, [r3, #0]
 80274d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80274da:	d0f6      	beq.n	80274ca <create_name+0x4e>
 80274dc:	68fa      	ldr	r2, [r7, #12]
 80274de:	69fb      	ldr	r3, [r7, #28]
 80274e0:	4413      	add	r3, r2
 80274e2:	781b      	ldrb	r3, [r3, #0]
 80274e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80274e6:	d0f0      	beq.n	80274ca <create_name+0x4e>
			break;
 80274e8:	e038      	b.n	802755c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80274ea:	7efb      	ldrb	r3, [r7, #27]
 80274ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80274ee:	d003      	beq.n	80274f8 <create_name+0x7c>
 80274f0:	693a      	ldr	r2, [r7, #16]
 80274f2:	697b      	ldr	r3, [r7, #20]
 80274f4:	429a      	cmp	r2, r3
 80274f6:	d30c      	bcc.n	8027512 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80274f8:	697b      	ldr	r3, [r7, #20]
 80274fa:	2b0b      	cmp	r3, #11
 80274fc:	d002      	beq.n	8027504 <create_name+0x88>
 80274fe:	7efb      	ldrb	r3, [r7, #27]
 8027500:	2b2e      	cmp	r3, #46	@ 0x2e
 8027502:	d001      	beq.n	8027508 <create_name+0x8c>
 8027504:	2306      	movs	r3, #6
 8027506:	e044      	b.n	8027592 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8027508:	2308      	movs	r3, #8
 802750a:	613b      	str	r3, [r7, #16]
 802750c:	230b      	movs	r3, #11
 802750e:	617b      	str	r3, [r7, #20]
			continue;
 8027510:	e022      	b.n	8027558 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8027512:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8027516:	2b00      	cmp	r3, #0
 8027518:	da04      	bge.n	8027524 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 802751a:	7efb      	ldrb	r3, [r7, #27]
 802751c:	3b80      	subs	r3, #128	@ 0x80
 802751e:	4a1f      	ldr	r2, [pc, #124]	@ (802759c <create_name+0x120>)
 8027520:	5cd3      	ldrb	r3, [r2, r3]
 8027522:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8027524:	7efb      	ldrb	r3, [r7, #27]
 8027526:	4619      	mov	r1, r3
 8027528:	481d      	ldr	r0, [pc, #116]	@ (80275a0 <create_name+0x124>)
 802752a:	f7ff f812 	bl	8026552 <chk_chr>
 802752e:	4603      	mov	r3, r0
 8027530:	2b00      	cmp	r3, #0
 8027532:	d001      	beq.n	8027538 <create_name+0xbc>
 8027534:	2306      	movs	r3, #6
 8027536:	e02c      	b.n	8027592 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8027538:	7efb      	ldrb	r3, [r7, #27]
 802753a:	2b60      	cmp	r3, #96	@ 0x60
 802753c:	d905      	bls.n	802754a <create_name+0xce>
 802753e:	7efb      	ldrb	r3, [r7, #27]
 8027540:	2b7a      	cmp	r3, #122	@ 0x7a
 8027542:	d802      	bhi.n	802754a <create_name+0xce>
 8027544:	7efb      	ldrb	r3, [r7, #27]
 8027546:	3b20      	subs	r3, #32
 8027548:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 802754a:	693b      	ldr	r3, [r7, #16]
 802754c:	1c5a      	adds	r2, r3, #1
 802754e:	613a      	str	r2, [r7, #16]
 8027550:	68ba      	ldr	r2, [r7, #8]
 8027552:	4413      	add	r3, r2
 8027554:	7efa      	ldrb	r2, [r7, #27]
 8027556:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8027558:	e7a6      	b.n	80274a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 802755a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 802755c:	68fa      	ldr	r2, [r7, #12]
 802755e:	69fb      	ldr	r3, [r7, #28]
 8027560:	441a      	add	r2, r3
 8027562:	683b      	ldr	r3, [r7, #0]
 8027564:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8027566:	693b      	ldr	r3, [r7, #16]
 8027568:	2b00      	cmp	r3, #0
 802756a:	d101      	bne.n	8027570 <create_name+0xf4>
 802756c:	2306      	movs	r3, #6
 802756e:	e010      	b.n	8027592 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8027570:	68bb      	ldr	r3, [r7, #8]
 8027572:	781b      	ldrb	r3, [r3, #0]
 8027574:	2be5      	cmp	r3, #229	@ 0xe5
 8027576:	d102      	bne.n	802757e <create_name+0x102>
 8027578:	68bb      	ldr	r3, [r7, #8]
 802757a:	2205      	movs	r2, #5
 802757c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802757e:	7efb      	ldrb	r3, [r7, #27]
 8027580:	2b20      	cmp	r3, #32
 8027582:	d801      	bhi.n	8027588 <create_name+0x10c>
 8027584:	2204      	movs	r2, #4
 8027586:	e000      	b.n	802758a <create_name+0x10e>
 8027588:	2200      	movs	r2, #0
 802758a:	68bb      	ldr	r3, [r7, #8]
 802758c:	330b      	adds	r3, #11
 802758e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8027590:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8027592:	4618      	mov	r0, r3
 8027594:	3720      	adds	r7, #32
 8027596:	46bd      	mov	sp, r7
 8027598:	bd80      	pop	{r7, pc}
 802759a:	bf00      	nop
 802759c:	0802b62c 	.word	0x0802b62c
 80275a0:	0802afd8 	.word	0x0802afd8

080275a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80275a4:	b580      	push	{r7, lr}
 80275a6:	b086      	sub	sp, #24
 80275a8:	af00      	add	r7, sp, #0
 80275aa:	6078      	str	r0, [r7, #4]
 80275ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80275ae:	687b      	ldr	r3, [r7, #4]
 80275b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80275b2:	693b      	ldr	r3, [r7, #16]
 80275b4:	681b      	ldr	r3, [r3, #0]
 80275b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80275b8:	e002      	b.n	80275c0 <follow_path+0x1c>
 80275ba:	683b      	ldr	r3, [r7, #0]
 80275bc:	3301      	adds	r3, #1
 80275be:	603b      	str	r3, [r7, #0]
 80275c0:	683b      	ldr	r3, [r7, #0]
 80275c2:	781b      	ldrb	r3, [r3, #0]
 80275c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80275c6:	d0f8      	beq.n	80275ba <follow_path+0x16>
 80275c8:	683b      	ldr	r3, [r7, #0]
 80275ca:	781b      	ldrb	r3, [r3, #0]
 80275cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80275ce:	d0f4      	beq.n	80275ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80275d0:	693b      	ldr	r3, [r7, #16]
 80275d2:	2200      	movs	r2, #0
 80275d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80275d6:	683b      	ldr	r3, [r7, #0]
 80275d8:	781b      	ldrb	r3, [r3, #0]
 80275da:	2b1f      	cmp	r3, #31
 80275dc:	d80a      	bhi.n	80275f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80275de:	687b      	ldr	r3, [r7, #4]
 80275e0:	2280      	movs	r2, #128	@ 0x80
 80275e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80275e6:	2100      	movs	r1, #0
 80275e8:	6878      	ldr	r0, [r7, #4]
 80275ea:	f7ff fcfa 	bl	8026fe2 <dir_sdi>
 80275ee:	4603      	mov	r3, r0
 80275f0:	75fb      	strb	r3, [r7, #23]
 80275f2:	e043      	b.n	802767c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80275f4:	463b      	mov	r3, r7
 80275f6:	4619      	mov	r1, r3
 80275f8:	6878      	ldr	r0, [r7, #4]
 80275fa:	f7ff ff3f 	bl	802747c <create_name>
 80275fe:	4603      	mov	r3, r0
 8027600:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8027602:	7dfb      	ldrb	r3, [r7, #23]
 8027604:	2b00      	cmp	r3, #0
 8027606:	d134      	bne.n	8027672 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8027608:	6878      	ldr	r0, [r7, #4]
 802760a:	f7ff feb0 	bl	802736e <dir_find>
 802760e:	4603      	mov	r3, r0
 8027610:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8027618:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 802761a:	7dfb      	ldrb	r3, [r7, #23]
 802761c:	2b00      	cmp	r3, #0
 802761e:	d00a      	beq.n	8027636 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8027620:	7dfb      	ldrb	r3, [r7, #23]
 8027622:	2b04      	cmp	r3, #4
 8027624:	d127      	bne.n	8027676 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8027626:	7afb      	ldrb	r3, [r7, #11]
 8027628:	f003 0304 	and.w	r3, r3, #4
 802762c:	2b00      	cmp	r3, #0
 802762e:	d122      	bne.n	8027676 <follow_path+0xd2>
 8027630:	2305      	movs	r3, #5
 8027632:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8027634:	e01f      	b.n	8027676 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8027636:	7afb      	ldrb	r3, [r7, #11]
 8027638:	f003 0304 	and.w	r3, r3, #4
 802763c:	2b00      	cmp	r3, #0
 802763e:	d11c      	bne.n	802767a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8027640:	693b      	ldr	r3, [r7, #16]
 8027642:	799b      	ldrb	r3, [r3, #6]
 8027644:	f003 0310 	and.w	r3, r3, #16
 8027648:	2b00      	cmp	r3, #0
 802764a:	d102      	bne.n	8027652 <follow_path+0xae>
				res = FR_NO_PATH; break;
 802764c:	2305      	movs	r3, #5
 802764e:	75fb      	strb	r3, [r7, #23]
 8027650:	e014      	b.n	802767c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8027652:	68fb      	ldr	r3, [r7, #12]
 8027654:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027658:	687b      	ldr	r3, [r7, #4]
 802765a:	695b      	ldr	r3, [r3, #20]
 802765c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027660:	4413      	add	r3, r2
 8027662:	4619      	mov	r1, r3
 8027664:	68f8      	ldr	r0, [r7, #12]
 8027666:	f7ff fe43 	bl	80272f0 <ld_clust>
 802766a:	4602      	mov	r2, r0
 802766c:	693b      	ldr	r3, [r7, #16]
 802766e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8027670:	e7c0      	b.n	80275f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8027672:	bf00      	nop
 8027674:	e002      	b.n	802767c <follow_path+0xd8>
				break;
 8027676:	bf00      	nop
 8027678:	e000      	b.n	802767c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802767a:	bf00      	nop
			}
		}
	}

	return res;
 802767c:	7dfb      	ldrb	r3, [r7, #23]
}
 802767e:	4618      	mov	r0, r3
 8027680:	3718      	adds	r7, #24
 8027682:	46bd      	mov	sp, r7
 8027684:	bd80      	pop	{r7, pc}

08027686 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8027686:	b480      	push	{r7}
 8027688:	b087      	sub	sp, #28
 802768a:	af00      	add	r7, sp, #0
 802768c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802768e:	f04f 33ff 	mov.w	r3, #4294967295
 8027692:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	681b      	ldr	r3, [r3, #0]
 8027698:	2b00      	cmp	r3, #0
 802769a:	d031      	beq.n	8027700 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 802769c:	687b      	ldr	r3, [r7, #4]
 802769e:	681b      	ldr	r3, [r3, #0]
 80276a0:	617b      	str	r3, [r7, #20]
 80276a2:	e002      	b.n	80276aa <get_ldnumber+0x24>
 80276a4:	697b      	ldr	r3, [r7, #20]
 80276a6:	3301      	adds	r3, #1
 80276a8:	617b      	str	r3, [r7, #20]
 80276aa:	697b      	ldr	r3, [r7, #20]
 80276ac:	781b      	ldrb	r3, [r3, #0]
 80276ae:	2b20      	cmp	r3, #32
 80276b0:	d903      	bls.n	80276ba <get_ldnumber+0x34>
 80276b2:	697b      	ldr	r3, [r7, #20]
 80276b4:	781b      	ldrb	r3, [r3, #0]
 80276b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80276b8:	d1f4      	bne.n	80276a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80276ba:	697b      	ldr	r3, [r7, #20]
 80276bc:	781b      	ldrb	r3, [r3, #0]
 80276be:	2b3a      	cmp	r3, #58	@ 0x3a
 80276c0:	d11c      	bne.n	80276fc <get_ldnumber+0x76>
			tp = *path;
 80276c2:	687b      	ldr	r3, [r7, #4]
 80276c4:	681b      	ldr	r3, [r3, #0]
 80276c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80276c8:	68fb      	ldr	r3, [r7, #12]
 80276ca:	1c5a      	adds	r2, r3, #1
 80276cc:	60fa      	str	r2, [r7, #12]
 80276ce:	781b      	ldrb	r3, [r3, #0]
 80276d0:	3b30      	subs	r3, #48	@ 0x30
 80276d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80276d4:	68bb      	ldr	r3, [r7, #8]
 80276d6:	2b09      	cmp	r3, #9
 80276d8:	d80e      	bhi.n	80276f8 <get_ldnumber+0x72>
 80276da:	68fa      	ldr	r2, [r7, #12]
 80276dc:	697b      	ldr	r3, [r7, #20]
 80276de:	429a      	cmp	r2, r3
 80276e0:	d10a      	bne.n	80276f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80276e2:	68bb      	ldr	r3, [r7, #8]
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	d107      	bne.n	80276f8 <get_ldnumber+0x72>
					vol = (int)i;
 80276e8:	68bb      	ldr	r3, [r7, #8]
 80276ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80276ec:	697b      	ldr	r3, [r7, #20]
 80276ee:	3301      	adds	r3, #1
 80276f0:	617b      	str	r3, [r7, #20]
 80276f2:	687b      	ldr	r3, [r7, #4]
 80276f4:	697a      	ldr	r2, [r7, #20]
 80276f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80276f8:	693b      	ldr	r3, [r7, #16]
 80276fa:	e002      	b.n	8027702 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80276fc:	2300      	movs	r3, #0
 80276fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8027700:	693b      	ldr	r3, [r7, #16]
}
 8027702:	4618      	mov	r0, r3
 8027704:	371c      	adds	r7, #28
 8027706:	46bd      	mov	sp, r7
 8027708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802770c:	4770      	bx	lr
	...

08027710 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8027710:	b580      	push	{r7, lr}
 8027712:	b082      	sub	sp, #8
 8027714:	af00      	add	r7, sp, #0
 8027716:	6078      	str	r0, [r7, #4]
 8027718:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	2200      	movs	r2, #0
 802771e:	70da      	strb	r2, [r3, #3]
 8027720:	687b      	ldr	r3, [r7, #4]
 8027722:	f04f 32ff 	mov.w	r2, #4294967295
 8027726:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8027728:	6839      	ldr	r1, [r7, #0]
 802772a:	6878      	ldr	r0, [r7, #4]
 802772c:	f7ff f8dc 	bl	80268e8 <move_window>
 8027730:	4603      	mov	r3, r0
 8027732:	2b00      	cmp	r3, #0
 8027734:	d001      	beq.n	802773a <check_fs+0x2a>
 8027736:	2304      	movs	r3, #4
 8027738:	e038      	b.n	80277ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802773a:	687b      	ldr	r3, [r7, #4]
 802773c:	3330      	adds	r3, #48	@ 0x30
 802773e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8027742:	4618      	mov	r0, r3
 8027744:	f7fe fe20 	bl	8026388 <ld_word>
 8027748:	4603      	mov	r3, r0
 802774a:	461a      	mov	r2, r3
 802774c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027750:	429a      	cmp	r2, r3
 8027752:	d001      	beq.n	8027758 <check_fs+0x48>
 8027754:	2303      	movs	r3, #3
 8027756:	e029      	b.n	80277ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802775e:	2be9      	cmp	r3, #233	@ 0xe9
 8027760:	d009      	beq.n	8027776 <check_fs+0x66>
 8027762:	687b      	ldr	r3, [r7, #4]
 8027764:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8027768:	2beb      	cmp	r3, #235	@ 0xeb
 802776a:	d11e      	bne.n	80277aa <check_fs+0x9a>
 802776c:	687b      	ldr	r3, [r7, #4]
 802776e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8027772:	2b90      	cmp	r3, #144	@ 0x90
 8027774:	d119      	bne.n	80277aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8027776:	687b      	ldr	r3, [r7, #4]
 8027778:	3330      	adds	r3, #48	@ 0x30
 802777a:	3336      	adds	r3, #54	@ 0x36
 802777c:	4618      	mov	r0, r3
 802777e:	f7fe fe1b 	bl	80263b8 <ld_dword>
 8027782:	4603      	mov	r3, r0
 8027784:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8027788:	4a0a      	ldr	r2, [pc, #40]	@ (80277b4 <check_fs+0xa4>)
 802778a:	4293      	cmp	r3, r2
 802778c:	d101      	bne.n	8027792 <check_fs+0x82>
 802778e:	2300      	movs	r3, #0
 8027790:	e00c      	b.n	80277ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	3330      	adds	r3, #48	@ 0x30
 8027796:	3352      	adds	r3, #82	@ 0x52
 8027798:	4618      	mov	r0, r3
 802779a:	f7fe fe0d 	bl	80263b8 <ld_dword>
 802779e:	4603      	mov	r3, r0
 80277a0:	4a05      	ldr	r2, [pc, #20]	@ (80277b8 <check_fs+0xa8>)
 80277a2:	4293      	cmp	r3, r2
 80277a4:	d101      	bne.n	80277aa <check_fs+0x9a>
 80277a6:	2300      	movs	r3, #0
 80277a8:	e000      	b.n	80277ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80277aa:	2302      	movs	r3, #2
}
 80277ac:	4618      	mov	r0, r3
 80277ae:	3708      	adds	r7, #8
 80277b0:	46bd      	mov	sp, r7
 80277b2:	bd80      	pop	{r7, pc}
 80277b4:	00544146 	.word	0x00544146
 80277b8:	33544146 	.word	0x33544146

080277bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80277bc:	b580      	push	{r7, lr}
 80277be:	b096      	sub	sp, #88	@ 0x58
 80277c0:	af00      	add	r7, sp, #0
 80277c2:	60f8      	str	r0, [r7, #12]
 80277c4:	60b9      	str	r1, [r7, #8]
 80277c6:	4613      	mov	r3, r2
 80277c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80277ca:	68bb      	ldr	r3, [r7, #8]
 80277cc:	2200      	movs	r2, #0
 80277ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80277d0:	68f8      	ldr	r0, [r7, #12]
 80277d2:	f7ff ff58 	bl	8027686 <get_ldnumber>
 80277d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80277d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80277da:	2b00      	cmp	r3, #0
 80277dc:	da01      	bge.n	80277e2 <find_volume+0x26>
 80277de:	230b      	movs	r3, #11
 80277e0:	e22d      	b.n	8027c3e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80277e2:	4aa1      	ldr	r2, [pc, #644]	@ (8027a68 <find_volume+0x2ac>)
 80277e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80277e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80277ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80277ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80277ee:	2b00      	cmp	r3, #0
 80277f0:	d101      	bne.n	80277f6 <find_volume+0x3a>
 80277f2:	230c      	movs	r3, #12
 80277f4:	e223      	b.n	8027c3e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80277f6:	68bb      	ldr	r3, [r7, #8]
 80277f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80277fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80277fc:	79fb      	ldrb	r3, [r7, #7]
 80277fe:	f023 0301 	bic.w	r3, r3, #1
 8027802:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8027804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027806:	781b      	ldrb	r3, [r3, #0]
 8027808:	2b00      	cmp	r3, #0
 802780a:	d01a      	beq.n	8027842 <find_volume+0x86>
		stat = disk_status(fs->drv);
 802780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802780e:	785b      	ldrb	r3, [r3, #1]
 8027810:	4618      	mov	r0, r3
 8027812:	f7fe fd19 	bl	8026248 <disk_status>
 8027816:	4603      	mov	r3, r0
 8027818:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 802781c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027820:	f003 0301 	and.w	r3, r3, #1
 8027824:	2b00      	cmp	r3, #0
 8027826:	d10c      	bne.n	8027842 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8027828:	79fb      	ldrb	r3, [r7, #7]
 802782a:	2b00      	cmp	r3, #0
 802782c:	d007      	beq.n	802783e <find_volume+0x82>
 802782e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027832:	f003 0304 	and.w	r3, r3, #4
 8027836:	2b00      	cmp	r3, #0
 8027838:	d001      	beq.n	802783e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 802783a:	230a      	movs	r3, #10
 802783c:	e1ff      	b.n	8027c3e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 802783e:	2300      	movs	r3, #0
 8027840:	e1fd      	b.n	8027c3e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8027842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027844:	2200      	movs	r2, #0
 8027846:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8027848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802784a:	b2da      	uxtb	r2, r3
 802784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802784e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8027850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027852:	785b      	ldrb	r3, [r3, #1]
 8027854:	4618      	mov	r0, r3
 8027856:	f7fe fd11 	bl	802627c <disk_initialize>
 802785a:	4603      	mov	r3, r0
 802785c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8027860:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027864:	f003 0301 	and.w	r3, r3, #1
 8027868:	2b00      	cmp	r3, #0
 802786a:	d001      	beq.n	8027870 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 802786c:	2303      	movs	r3, #3
 802786e:	e1e6      	b.n	8027c3e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8027870:	79fb      	ldrb	r3, [r7, #7]
 8027872:	2b00      	cmp	r3, #0
 8027874:	d007      	beq.n	8027886 <find_volume+0xca>
 8027876:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802787a:	f003 0304 	and.w	r3, r3, #4
 802787e:	2b00      	cmp	r3, #0
 8027880:	d001      	beq.n	8027886 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8027882:	230a      	movs	r3, #10
 8027884:	e1db      	b.n	8027c3e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8027886:	2300      	movs	r3, #0
 8027888:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802788a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802788c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 802788e:	f7ff ff3f 	bl	8027710 <check_fs>
 8027892:	4603      	mov	r3, r0
 8027894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8027898:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802789c:	2b02      	cmp	r3, #2
 802789e:	d149      	bne.n	8027934 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80278a0:	2300      	movs	r3, #0
 80278a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80278a4:	e01e      	b.n	80278e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80278a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80278a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80278ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278ae:	011b      	lsls	r3, r3, #4
 80278b0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80278b4:	4413      	add	r3, r2
 80278b6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80278b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278ba:	3304      	adds	r3, #4
 80278bc:	781b      	ldrb	r3, [r3, #0]
 80278be:	2b00      	cmp	r3, #0
 80278c0:	d006      	beq.n	80278d0 <find_volume+0x114>
 80278c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80278c4:	3308      	adds	r3, #8
 80278c6:	4618      	mov	r0, r3
 80278c8:	f7fe fd76 	bl	80263b8 <ld_dword>
 80278cc:	4602      	mov	r2, r0
 80278ce:	e000      	b.n	80278d2 <find_volume+0x116>
 80278d0:	2200      	movs	r2, #0
 80278d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278d4:	009b      	lsls	r3, r3, #2
 80278d6:	3358      	adds	r3, #88	@ 0x58
 80278d8:	443b      	add	r3, r7
 80278da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80278de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278e0:	3301      	adds	r3, #1
 80278e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80278e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278e6:	2b03      	cmp	r3, #3
 80278e8:	d9dd      	bls.n	80278a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80278ea:	2300      	movs	r3, #0
 80278ec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80278ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278f0:	2b00      	cmp	r3, #0
 80278f2:	d002      	beq.n	80278fa <find_volume+0x13e>
 80278f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278f6:	3b01      	subs	r3, #1
 80278f8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80278fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278fc:	009b      	lsls	r3, r3, #2
 80278fe:	3358      	adds	r3, #88	@ 0x58
 8027900:	443b      	add	r3, r7
 8027902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8027906:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8027908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802790a:	2b00      	cmp	r3, #0
 802790c:	d005      	beq.n	802791a <find_volume+0x15e>
 802790e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027910:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027912:	f7ff fefd 	bl	8027710 <check_fs>
 8027916:	4603      	mov	r3, r0
 8027918:	e000      	b.n	802791c <find_volume+0x160>
 802791a:	2303      	movs	r3, #3
 802791c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8027920:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027924:	2b01      	cmp	r3, #1
 8027926:	d905      	bls.n	8027934 <find_volume+0x178>
 8027928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802792a:	3301      	adds	r3, #1
 802792c:	643b      	str	r3, [r7, #64]	@ 0x40
 802792e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027930:	2b03      	cmp	r3, #3
 8027932:	d9e2      	bls.n	80278fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8027934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027938:	2b04      	cmp	r3, #4
 802793a:	d101      	bne.n	8027940 <find_volume+0x184>
 802793c:	2301      	movs	r3, #1
 802793e:	e17e      	b.n	8027c3e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8027940:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027944:	2b01      	cmp	r3, #1
 8027946:	d901      	bls.n	802794c <find_volume+0x190>
 8027948:	230d      	movs	r3, #13
 802794a:	e178      	b.n	8027c3e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 802794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802794e:	3330      	adds	r3, #48	@ 0x30
 8027950:	330b      	adds	r3, #11
 8027952:	4618      	mov	r0, r3
 8027954:	f7fe fd18 	bl	8026388 <ld_word>
 8027958:	4603      	mov	r3, r0
 802795a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802795e:	d001      	beq.n	8027964 <find_volume+0x1a8>
 8027960:	230d      	movs	r3, #13
 8027962:	e16c      	b.n	8027c3e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8027964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027966:	3330      	adds	r3, #48	@ 0x30
 8027968:	3316      	adds	r3, #22
 802796a:	4618      	mov	r0, r3
 802796c:	f7fe fd0c 	bl	8026388 <ld_word>
 8027970:	4603      	mov	r3, r0
 8027972:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8027974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027976:	2b00      	cmp	r3, #0
 8027978:	d106      	bne.n	8027988 <find_volume+0x1cc>
 802797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802797c:	3330      	adds	r3, #48	@ 0x30
 802797e:	3324      	adds	r3, #36	@ 0x24
 8027980:	4618      	mov	r0, r3
 8027982:	f7fe fd19 	bl	80263b8 <ld_dword>
 8027986:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8027988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802798a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802798c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027990:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8027994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027996:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8027998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802799a:	789b      	ldrb	r3, [r3, #2]
 802799c:	2b01      	cmp	r3, #1
 802799e:	d005      	beq.n	80279ac <find_volume+0x1f0>
 80279a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279a2:	789b      	ldrb	r3, [r3, #2]
 80279a4:	2b02      	cmp	r3, #2
 80279a6:	d001      	beq.n	80279ac <find_volume+0x1f0>
 80279a8:	230d      	movs	r3, #13
 80279aa:	e148      	b.n	8027c3e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80279ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279ae:	789b      	ldrb	r3, [r3, #2]
 80279b0:	461a      	mov	r2, r3
 80279b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80279b4:	fb02 f303 	mul.w	r3, r2, r3
 80279b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80279ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80279c0:	461a      	mov	r2, r3
 80279c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80279c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279c8:	895b      	ldrh	r3, [r3, #10]
 80279ca:	2b00      	cmp	r3, #0
 80279cc:	d008      	beq.n	80279e0 <find_volume+0x224>
 80279ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279d0:	895b      	ldrh	r3, [r3, #10]
 80279d2:	461a      	mov	r2, r3
 80279d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279d6:	895b      	ldrh	r3, [r3, #10]
 80279d8:	3b01      	subs	r3, #1
 80279da:	4013      	ands	r3, r2
 80279dc:	2b00      	cmp	r3, #0
 80279de:	d001      	beq.n	80279e4 <find_volume+0x228>
 80279e0:	230d      	movs	r3, #13
 80279e2:	e12c      	b.n	8027c3e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80279e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279e6:	3330      	adds	r3, #48	@ 0x30
 80279e8:	3311      	adds	r3, #17
 80279ea:	4618      	mov	r0, r3
 80279ec:	f7fe fccc 	bl	8026388 <ld_word>
 80279f0:	4603      	mov	r3, r0
 80279f2:	461a      	mov	r2, r3
 80279f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80279f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279fa:	891b      	ldrh	r3, [r3, #8]
 80279fc:	f003 030f 	and.w	r3, r3, #15
 8027a00:	b29b      	uxth	r3, r3
 8027a02:	2b00      	cmp	r3, #0
 8027a04:	d001      	beq.n	8027a0a <find_volume+0x24e>
 8027a06:	230d      	movs	r3, #13
 8027a08:	e119      	b.n	8027c3e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8027a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a0c:	3330      	adds	r3, #48	@ 0x30
 8027a0e:	3313      	adds	r3, #19
 8027a10:	4618      	mov	r0, r3
 8027a12:	f7fe fcb9 	bl	8026388 <ld_word>
 8027a16:	4603      	mov	r3, r0
 8027a18:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8027a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027a1c:	2b00      	cmp	r3, #0
 8027a1e:	d106      	bne.n	8027a2e <find_volume+0x272>
 8027a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a22:	3330      	adds	r3, #48	@ 0x30
 8027a24:	3320      	adds	r3, #32
 8027a26:	4618      	mov	r0, r3
 8027a28:	f7fe fcc6 	bl	80263b8 <ld_dword>
 8027a2c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8027a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a30:	3330      	adds	r3, #48	@ 0x30
 8027a32:	330e      	adds	r3, #14
 8027a34:	4618      	mov	r0, r3
 8027a36:	f7fe fca7 	bl	8026388 <ld_word>
 8027a3a:	4603      	mov	r3, r0
 8027a3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8027a3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d101      	bne.n	8027a48 <find_volume+0x28c>
 8027a44:	230d      	movs	r3, #13
 8027a46:	e0fa      	b.n	8027c3e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8027a48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027a4c:	4413      	add	r3, r2
 8027a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027a50:	8912      	ldrh	r2, [r2, #8]
 8027a52:	0912      	lsrs	r2, r2, #4
 8027a54:	b292      	uxth	r2, r2
 8027a56:	4413      	add	r3, r2
 8027a58:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8027a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027a5e:	429a      	cmp	r2, r3
 8027a60:	d204      	bcs.n	8027a6c <find_volume+0x2b0>
 8027a62:	230d      	movs	r3, #13
 8027a64:	e0eb      	b.n	8027c3e <find_volume+0x482>
 8027a66:	bf00      	nop
 8027a68:	24000a8c 	.word	0x24000a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8027a6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027a70:	1ad3      	subs	r3, r2, r3
 8027a72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027a74:	8952      	ldrh	r2, [r2, #10]
 8027a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8027a7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8027a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d101      	bne.n	8027a86 <find_volume+0x2ca>
 8027a82:	230d      	movs	r3, #13
 8027a84:	e0db      	b.n	8027c3e <find_volume+0x482>
		fmt = FS_FAT32;
 8027a86:	2303      	movs	r3, #3
 8027a88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8027a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027a8e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8027a92:	4293      	cmp	r3, r2
 8027a94:	d802      	bhi.n	8027a9c <find_volume+0x2e0>
 8027a96:	2302      	movs	r3, #2
 8027a98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8027a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027a9e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8027aa2:	4293      	cmp	r3, r2
 8027aa4:	d802      	bhi.n	8027aac <find_volume+0x2f0>
 8027aa6:	2301      	movs	r3, #1
 8027aa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8027aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027aae:	1c9a      	adds	r2, r3, #2
 8027ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ab2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8027ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ab6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027ab8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8027aba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027abe:	441a      	add	r2, r3
 8027ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ac2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8027ac4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027ac8:	441a      	add	r2, r3
 8027aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027acc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8027ace:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027ad2:	2b03      	cmp	r3, #3
 8027ad4:	d11e      	bne.n	8027b14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8027ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ad8:	3330      	adds	r3, #48	@ 0x30
 8027ada:	332a      	adds	r3, #42	@ 0x2a
 8027adc:	4618      	mov	r0, r3
 8027ade:	f7fe fc53 	bl	8026388 <ld_word>
 8027ae2:	4603      	mov	r3, r0
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	d001      	beq.n	8027aec <find_volume+0x330>
 8027ae8:	230d      	movs	r3, #13
 8027aea:	e0a8      	b.n	8027c3e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8027aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027aee:	891b      	ldrh	r3, [r3, #8]
 8027af0:	2b00      	cmp	r3, #0
 8027af2:	d001      	beq.n	8027af8 <find_volume+0x33c>
 8027af4:	230d      	movs	r3, #13
 8027af6:	e0a2      	b.n	8027c3e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8027af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027afa:	3330      	adds	r3, #48	@ 0x30
 8027afc:	332c      	adds	r3, #44	@ 0x2c
 8027afe:	4618      	mov	r0, r3
 8027b00:	f7fe fc5a 	bl	80263b8 <ld_dword>
 8027b04:	4602      	mov	r2, r0
 8027b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b08:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8027b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b0c:	695b      	ldr	r3, [r3, #20]
 8027b0e:	009b      	lsls	r3, r3, #2
 8027b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8027b12:	e01f      	b.n	8027b54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8027b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b16:	891b      	ldrh	r3, [r3, #8]
 8027b18:	2b00      	cmp	r3, #0
 8027b1a:	d101      	bne.n	8027b20 <find_volume+0x364>
 8027b1c:	230d      	movs	r3, #13
 8027b1e:	e08e      	b.n	8027c3e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8027b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b22:	6a1a      	ldr	r2, [r3, #32]
 8027b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027b26:	441a      	add	r2, r3
 8027b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b2a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8027b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027b30:	2b02      	cmp	r3, #2
 8027b32:	d103      	bne.n	8027b3c <find_volume+0x380>
 8027b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b36:	695b      	ldr	r3, [r3, #20]
 8027b38:	005b      	lsls	r3, r3, #1
 8027b3a:	e00a      	b.n	8027b52 <find_volume+0x396>
 8027b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b3e:	695a      	ldr	r2, [r3, #20]
 8027b40:	4613      	mov	r3, r2
 8027b42:	005b      	lsls	r3, r3, #1
 8027b44:	4413      	add	r3, r2
 8027b46:	085a      	lsrs	r2, r3, #1
 8027b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b4a:	695b      	ldr	r3, [r3, #20]
 8027b4c:	f003 0301 	and.w	r3, r3, #1
 8027b50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8027b52:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8027b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b56:	699a      	ldr	r2, [r3, #24]
 8027b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027b5a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8027b5e:	0a5b      	lsrs	r3, r3, #9
 8027b60:	429a      	cmp	r2, r3
 8027b62:	d201      	bcs.n	8027b68 <find_volume+0x3ac>
 8027b64:	230d      	movs	r3, #13
 8027b66:	e06a      	b.n	8027c3e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8027b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8027b6e:	611a      	str	r2, [r3, #16]
 8027b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b72:	691a      	ldr	r2, [r3, #16]
 8027b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b76:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8027b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b7a:	2280      	movs	r2, #128	@ 0x80
 8027b7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8027b7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027b82:	2b03      	cmp	r3, #3
 8027b84:	d149      	bne.n	8027c1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8027b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b88:	3330      	adds	r3, #48	@ 0x30
 8027b8a:	3330      	adds	r3, #48	@ 0x30
 8027b8c:	4618      	mov	r0, r3
 8027b8e:	f7fe fbfb 	bl	8026388 <ld_word>
 8027b92:	4603      	mov	r3, r0
 8027b94:	2b01      	cmp	r3, #1
 8027b96:	d140      	bne.n	8027c1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8027b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027b9a:	3301      	adds	r3, #1
 8027b9c:	4619      	mov	r1, r3
 8027b9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027ba0:	f7fe fea2 	bl	80268e8 <move_window>
 8027ba4:	4603      	mov	r3, r0
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d137      	bne.n	8027c1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8027baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bac:	2200      	movs	r2, #0
 8027bae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8027bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bb2:	3330      	adds	r3, #48	@ 0x30
 8027bb4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8027bb8:	4618      	mov	r0, r3
 8027bba:	f7fe fbe5 	bl	8026388 <ld_word>
 8027bbe:	4603      	mov	r3, r0
 8027bc0:	461a      	mov	r2, r3
 8027bc2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027bc6:	429a      	cmp	r2, r3
 8027bc8:	d127      	bne.n	8027c1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8027bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bcc:	3330      	adds	r3, #48	@ 0x30
 8027bce:	4618      	mov	r0, r3
 8027bd0:	f7fe fbf2 	bl	80263b8 <ld_dword>
 8027bd4:	4603      	mov	r3, r0
 8027bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8027c48 <find_volume+0x48c>)
 8027bd8:	4293      	cmp	r3, r2
 8027bda:	d11e      	bne.n	8027c1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8027bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bde:	3330      	adds	r3, #48	@ 0x30
 8027be0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8027be4:	4618      	mov	r0, r3
 8027be6:	f7fe fbe7 	bl	80263b8 <ld_dword>
 8027bea:	4603      	mov	r3, r0
 8027bec:	4a17      	ldr	r2, [pc, #92]	@ (8027c4c <find_volume+0x490>)
 8027bee:	4293      	cmp	r3, r2
 8027bf0:	d113      	bne.n	8027c1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8027bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bf4:	3330      	adds	r3, #48	@ 0x30
 8027bf6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8027bfa:	4618      	mov	r0, r3
 8027bfc:	f7fe fbdc 	bl	80263b8 <ld_dword>
 8027c00:	4602      	mov	r2, r0
 8027c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c04:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8027c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c08:	3330      	adds	r3, #48	@ 0x30
 8027c0a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8027c0e:	4618      	mov	r0, r3
 8027c10:	f7fe fbd2 	bl	80263b8 <ld_dword>
 8027c14:	4602      	mov	r2, r0
 8027c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c18:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8027c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c1c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8027c20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8027c22:	4b0b      	ldr	r3, [pc, #44]	@ (8027c50 <find_volume+0x494>)
 8027c24:	881b      	ldrh	r3, [r3, #0]
 8027c26:	3301      	adds	r3, #1
 8027c28:	b29a      	uxth	r2, r3
 8027c2a:	4b09      	ldr	r3, [pc, #36]	@ (8027c50 <find_volume+0x494>)
 8027c2c:	801a      	strh	r2, [r3, #0]
 8027c2e:	4b08      	ldr	r3, [pc, #32]	@ (8027c50 <find_volume+0x494>)
 8027c30:	881a      	ldrh	r2, [r3, #0]
 8027c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c34:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8027c36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027c38:	f7fe fdee 	bl	8026818 <clear_lock>
#endif
	return FR_OK;
 8027c3c:	2300      	movs	r3, #0
}
 8027c3e:	4618      	mov	r0, r3
 8027c40:	3758      	adds	r7, #88	@ 0x58
 8027c42:	46bd      	mov	sp, r7
 8027c44:	bd80      	pop	{r7, pc}
 8027c46:	bf00      	nop
 8027c48:	41615252 	.word	0x41615252
 8027c4c:	61417272 	.word	0x61417272
 8027c50:	24000a90 	.word	0x24000a90

08027c54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8027c54:	b580      	push	{r7, lr}
 8027c56:	b084      	sub	sp, #16
 8027c58:	af00      	add	r7, sp, #0
 8027c5a:	6078      	str	r0, [r7, #4]
 8027c5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8027c5e:	2309      	movs	r3, #9
 8027c60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8027c62:	687b      	ldr	r3, [r7, #4]
 8027c64:	2b00      	cmp	r3, #0
 8027c66:	d01c      	beq.n	8027ca2 <validate+0x4e>
 8027c68:	687b      	ldr	r3, [r7, #4]
 8027c6a:	681b      	ldr	r3, [r3, #0]
 8027c6c:	2b00      	cmp	r3, #0
 8027c6e:	d018      	beq.n	8027ca2 <validate+0x4e>
 8027c70:	687b      	ldr	r3, [r7, #4]
 8027c72:	681b      	ldr	r3, [r3, #0]
 8027c74:	781b      	ldrb	r3, [r3, #0]
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	d013      	beq.n	8027ca2 <validate+0x4e>
 8027c7a:	687b      	ldr	r3, [r7, #4]
 8027c7c:	889a      	ldrh	r2, [r3, #4]
 8027c7e:	687b      	ldr	r3, [r7, #4]
 8027c80:	681b      	ldr	r3, [r3, #0]
 8027c82:	88db      	ldrh	r3, [r3, #6]
 8027c84:	429a      	cmp	r2, r3
 8027c86:	d10c      	bne.n	8027ca2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8027c88:	687b      	ldr	r3, [r7, #4]
 8027c8a:	681b      	ldr	r3, [r3, #0]
 8027c8c:	785b      	ldrb	r3, [r3, #1]
 8027c8e:	4618      	mov	r0, r3
 8027c90:	f7fe fada 	bl	8026248 <disk_status>
 8027c94:	4603      	mov	r3, r0
 8027c96:	f003 0301 	and.w	r3, r3, #1
 8027c9a:	2b00      	cmp	r3, #0
 8027c9c:	d101      	bne.n	8027ca2 <validate+0x4e>
			res = FR_OK;
 8027c9e:	2300      	movs	r3, #0
 8027ca0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8027ca2:	7bfb      	ldrb	r3, [r7, #15]
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	d102      	bne.n	8027cae <validate+0x5a>
 8027ca8:	687b      	ldr	r3, [r7, #4]
 8027caa:	681b      	ldr	r3, [r3, #0]
 8027cac:	e000      	b.n	8027cb0 <validate+0x5c>
 8027cae:	2300      	movs	r3, #0
 8027cb0:	683a      	ldr	r2, [r7, #0]
 8027cb2:	6013      	str	r3, [r2, #0]
	return res;
 8027cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8027cb6:	4618      	mov	r0, r3
 8027cb8:	3710      	adds	r7, #16
 8027cba:	46bd      	mov	sp, r7
 8027cbc:	bd80      	pop	{r7, pc}
	...

08027cc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8027cc0:	b580      	push	{r7, lr}
 8027cc2:	b088      	sub	sp, #32
 8027cc4:	af00      	add	r7, sp, #0
 8027cc6:	60f8      	str	r0, [r7, #12]
 8027cc8:	60b9      	str	r1, [r7, #8]
 8027cca:	4613      	mov	r3, r2
 8027ccc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8027cce:	68bb      	ldr	r3, [r7, #8]
 8027cd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8027cd2:	f107 0310 	add.w	r3, r7, #16
 8027cd6:	4618      	mov	r0, r3
 8027cd8:	f7ff fcd5 	bl	8027686 <get_ldnumber>
 8027cdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8027cde:	69fb      	ldr	r3, [r7, #28]
 8027ce0:	2b00      	cmp	r3, #0
 8027ce2:	da01      	bge.n	8027ce8 <f_mount+0x28>
 8027ce4:	230b      	movs	r3, #11
 8027ce6:	e02b      	b.n	8027d40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8027ce8:	4a17      	ldr	r2, [pc, #92]	@ (8027d48 <f_mount+0x88>)
 8027cea:	69fb      	ldr	r3, [r7, #28]
 8027cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027cf0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8027cf2:	69bb      	ldr	r3, [r7, #24]
 8027cf4:	2b00      	cmp	r3, #0
 8027cf6:	d005      	beq.n	8027d04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8027cf8:	69b8      	ldr	r0, [r7, #24]
 8027cfa:	f7fe fd8d 	bl	8026818 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8027cfe:	69bb      	ldr	r3, [r7, #24]
 8027d00:	2200      	movs	r2, #0
 8027d02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8027d04:	68fb      	ldr	r3, [r7, #12]
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	d002      	beq.n	8027d10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	2200      	movs	r2, #0
 8027d0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8027d10:	68fa      	ldr	r2, [r7, #12]
 8027d12:	490d      	ldr	r1, [pc, #52]	@ (8027d48 <f_mount+0x88>)
 8027d14:	69fb      	ldr	r3, [r7, #28]
 8027d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8027d1a:	68fb      	ldr	r3, [r7, #12]
 8027d1c:	2b00      	cmp	r3, #0
 8027d1e:	d002      	beq.n	8027d26 <f_mount+0x66>
 8027d20:	79fb      	ldrb	r3, [r7, #7]
 8027d22:	2b01      	cmp	r3, #1
 8027d24:	d001      	beq.n	8027d2a <f_mount+0x6a>
 8027d26:	2300      	movs	r3, #0
 8027d28:	e00a      	b.n	8027d40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8027d2a:	f107 010c 	add.w	r1, r7, #12
 8027d2e:	f107 0308 	add.w	r3, r7, #8
 8027d32:	2200      	movs	r2, #0
 8027d34:	4618      	mov	r0, r3
 8027d36:	f7ff fd41 	bl	80277bc <find_volume>
 8027d3a:	4603      	mov	r3, r0
 8027d3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8027d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027d40:	4618      	mov	r0, r3
 8027d42:	3720      	adds	r7, #32
 8027d44:	46bd      	mov	sp, r7
 8027d46:	bd80      	pop	{r7, pc}
 8027d48:	24000a8c 	.word	0x24000a8c

08027d4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8027d4c:	b580      	push	{r7, lr}
 8027d4e:	b098      	sub	sp, #96	@ 0x60
 8027d50:	af00      	add	r7, sp, #0
 8027d52:	60f8      	str	r0, [r7, #12]
 8027d54:	60b9      	str	r1, [r7, #8]
 8027d56:	4613      	mov	r3, r2
 8027d58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8027d5a:	68fb      	ldr	r3, [r7, #12]
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d101      	bne.n	8027d64 <f_open+0x18>
 8027d60:	2309      	movs	r3, #9
 8027d62:	e1a9      	b.n	80280b8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8027d64:	79fb      	ldrb	r3, [r7, #7]
 8027d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027d6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8027d6c:	79fa      	ldrb	r2, [r7, #7]
 8027d6e:	f107 0110 	add.w	r1, r7, #16
 8027d72:	f107 0308 	add.w	r3, r7, #8
 8027d76:	4618      	mov	r0, r3
 8027d78:	f7ff fd20 	bl	80277bc <find_volume>
 8027d7c:	4603      	mov	r3, r0
 8027d7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8027d82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027d86:	2b00      	cmp	r3, #0
 8027d88:	f040 818d 	bne.w	80280a6 <f_open+0x35a>
		dj.obj.fs = fs;
 8027d8c:	693b      	ldr	r3, [r7, #16]
 8027d8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8027d90:	68ba      	ldr	r2, [r7, #8]
 8027d92:	f107 0314 	add.w	r3, r7, #20
 8027d96:	4611      	mov	r1, r2
 8027d98:	4618      	mov	r0, r3
 8027d9a:	f7ff fc03 	bl	80275a4 <follow_path>
 8027d9e:	4603      	mov	r3, r0
 8027da0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8027da4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d118      	bne.n	8027dde <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8027dac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8027db0:	b25b      	sxtb	r3, r3
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	da03      	bge.n	8027dbe <f_open+0x72>
				res = FR_INVALID_NAME;
 8027db6:	2306      	movs	r3, #6
 8027db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027dbc:	e00f      	b.n	8027dde <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027dbe:	79fb      	ldrb	r3, [r7, #7]
 8027dc0:	2b01      	cmp	r3, #1
 8027dc2:	bf8c      	ite	hi
 8027dc4:	2301      	movhi	r3, #1
 8027dc6:	2300      	movls	r3, #0
 8027dc8:	b2db      	uxtb	r3, r3
 8027dca:	461a      	mov	r2, r3
 8027dcc:	f107 0314 	add.w	r3, r7, #20
 8027dd0:	4611      	mov	r1, r2
 8027dd2:	4618      	mov	r0, r3
 8027dd4:	f7fe fbd8 	bl	8026588 <chk_lock>
 8027dd8:	4603      	mov	r3, r0
 8027dda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8027dde:	79fb      	ldrb	r3, [r7, #7]
 8027de0:	f003 031c 	and.w	r3, r3, #28
 8027de4:	2b00      	cmp	r3, #0
 8027de6:	d07f      	beq.n	8027ee8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8027de8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027dec:	2b00      	cmp	r3, #0
 8027dee:	d017      	beq.n	8027e20 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8027df0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027df4:	2b04      	cmp	r3, #4
 8027df6:	d10e      	bne.n	8027e16 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8027df8:	f7fe fc22 	bl	8026640 <enq_lock>
 8027dfc:	4603      	mov	r3, r0
 8027dfe:	2b00      	cmp	r3, #0
 8027e00:	d006      	beq.n	8027e10 <f_open+0xc4>
 8027e02:	f107 0314 	add.w	r3, r7, #20
 8027e06:	4618      	mov	r0, r3
 8027e08:	f7ff fb06 	bl	8027418 <dir_register>
 8027e0c:	4603      	mov	r3, r0
 8027e0e:	e000      	b.n	8027e12 <f_open+0xc6>
 8027e10:	2312      	movs	r3, #18
 8027e12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8027e16:	79fb      	ldrb	r3, [r7, #7]
 8027e18:	f043 0308 	orr.w	r3, r3, #8
 8027e1c:	71fb      	strb	r3, [r7, #7]
 8027e1e:	e010      	b.n	8027e42 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8027e20:	7ebb      	ldrb	r3, [r7, #26]
 8027e22:	f003 0311 	and.w	r3, r3, #17
 8027e26:	2b00      	cmp	r3, #0
 8027e28:	d003      	beq.n	8027e32 <f_open+0xe6>
					res = FR_DENIED;
 8027e2a:	2307      	movs	r3, #7
 8027e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027e30:	e007      	b.n	8027e42 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8027e32:	79fb      	ldrb	r3, [r7, #7]
 8027e34:	f003 0304 	and.w	r3, r3, #4
 8027e38:	2b00      	cmp	r3, #0
 8027e3a:	d002      	beq.n	8027e42 <f_open+0xf6>
 8027e3c:	2308      	movs	r3, #8
 8027e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8027e42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027e46:	2b00      	cmp	r3, #0
 8027e48:	d168      	bne.n	8027f1c <f_open+0x1d0>
 8027e4a:	79fb      	ldrb	r3, [r7, #7]
 8027e4c:	f003 0308 	and.w	r3, r3, #8
 8027e50:	2b00      	cmp	r3, #0
 8027e52:	d063      	beq.n	8027f1c <f_open+0x1d0>
				dw = GET_FATTIME();
 8027e54:	f7fd ff6c 	bl	8025d30 <get_fattime>
 8027e58:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8027e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027e5c:	330e      	adds	r3, #14
 8027e5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027e60:	4618      	mov	r0, r3
 8027e62:	f7fe fae7 	bl	8026434 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8027e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027e68:	3316      	adds	r3, #22
 8027e6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027e6c:	4618      	mov	r0, r3
 8027e6e:	f7fe fae1 	bl	8026434 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8027e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027e74:	330b      	adds	r3, #11
 8027e76:	2220      	movs	r2, #32
 8027e78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8027e7a:	693b      	ldr	r3, [r7, #16]
 8027e7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027e7e:	4611      	mov	r1, r2
 8027e80:	4618      	mov	r0, r3
 8027e82:	f7ff fa35 	bl	80272f0 <ld_clust>
 8027e86:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8027e88:	693b      	ldr	r3, [r7, #16]
 8027e8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8027e8c:	2200      	movs	r2, #0
 8027e8e:	4618      	mov	r0, r3
 8027e90:	f7ff fa4d 	bl	802732e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8027e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027e96:	331c      	adds	r3, #28
 8027e98:	2100      	movs	r1, #0
 8027e9a:	4618      	mov	r0, r3
 8027e9c:	f7fe faca 	bl	8026434 <st_dword>
					fs->wflag = 1;
 8027ea0:	693b      	ldr	r3, [r7, #16]
 8027ea2:	2201      	movs	r2, #1
 8027ea4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8027ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027ea8:	2b00      	cmp	r3, #0
 8027eaa:	d037      	beq.n	8027f1c <f_open+0x1d0>
						dw = fs->winsect;
 8027eac:	693b      	ldr	r3, [r7, #16]
 8027eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027eb0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8027eb2:	f107 0314 	add.w	r3, r7, #20
 8027eb6:	2200      	movs	r2, #0
 8027eb8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8027eba:	4618      	mov	r0, r3
 8027ebc:	f7fe ff60 	bl	8026d80 <remove_chain>
 8027ec0:	4603      	mov	r3, r0
 8027ec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8027ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	d126      	bne.n	8027f1c <f_open+0x1d0>
							res = move_window(fs, dw);
 8027ece:	693b      	ldr	r3, [r7, #16]
 8027ed0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027ed2:	4618      	mov	r0, r3
 8027ed4:	f7fe fd08 	bl	80268e8 <move_window>
 8027ed8:	4603      	mov	r3, r0
 8027eda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8027ede:	693b      	ldr	r3, [r7, #16]
 8027ee0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027ee2:	3a01      	subs	r2, #1
 8027ee4:	60da      	str	r2, [r3, #12]
 8027ee6:	e019      	b.n	8027f1c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8027ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	d115      	bne.n	8027f1c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8027ef0:	7ebb      	ldrb	r3, [r7, #26]
 8027ef2:	f003 0310 	and.w	r3, r3, #16
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	d003      	beq.n	8027f02 <f_open+0x1b6>
					res = FR_NO_FILE;
 8027efa:	2304      	movs	r3, #4
 8027efc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027f00:	e00c      	b.n	8027f1c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8027f02:	79fb      	ldrb	r3, [r7, #7]
 8027f04:	f003 0302 	and.w	r3, r3, #2
 8027f08:	2b00      	cmp	r3, #0
 8027f0a:	d007      	beq.n	8027f1c <f_open+0x1d0>
 8027f0c:	7ebb      	ldrb	r3, [r7, #26]
 8027f0e:	f003 0301 	and.w	r3, r3, #1
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d002      	beq.n	8027f1c <f_open+0x1d0>
						res = FR_DENIED;
 8027f16:	2307      	movs	r3, #7
 8027f18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8027f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f20:	2b00      	cmp	r3, #0
 8027f22:	d126      	bne.n	8027f72 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8027f24:	79fb      	ldrb	r3, [r7, #7]
 8027f26:	f003 0308 	and.w	r3, r3, #8
 8027f2a:	2b00      	cmp	r3, #0
 8027f2c:	d003      	beq.n	8027f36 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8027f2e:	79fb      	ldrb	r3, [r7, #7]
 8027f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027f34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8027f36:	693b      	ldr	r3, [r7, #16]
 8027f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8027f3a:	68fb      	ldr	r3, [r7, #12]
 8027f3c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8027f3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027f40:	68fb      	ldr	r3, [r7, #12]
 8027f42:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027f44:	79fb      	ldrb	r3, [r7, #7]
 8027f46:	2b01      	cmp	r3, #1
 8027f48:	bf8c      	ite	hi
 8027f4a:	2301      	movhi	r3, #1
 8027f4c:	2300      	movls	r3, #0
 8027f4e:	b2db      	uxtb	r3, r3
 8027f50:	461a      	mov	r2, r3
 8027f52:	f107 0314 	add.w	r3, r7, #20
 8027f56:	4611      	mov	r1, r2
 8027f58:	4618      	mov	r0, r3
 8027f5a:	f7fe fb93 	bl	8026684 <inc_lock>
 8027f5e:	4602      	mov	r2, r0
 8027f60:	68fb      	ldr	r3, [r7, #12]
 8027f62:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8027f64:	68fb      	ldr	r3, [r7, #12]
 8027f66:	691b      	ldr	r3, [r3, #16]
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d102      	bne.n	8027f72 <f_open+0x226>
 8027f6c:	2302      	movs	r3, #2
 8027f6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8027f72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f76:	2b00      	cmp	r3, #0
 8027f78:	f040 8095 	bne.w	80280a6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8027f7c:	693b      	ldr	r3, [r7, #16]
 8027f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027f80:	4611      	mov	r1, r2
 8027f82:	4618      	mov	r0, r3
 8027f84:	f7ff f9b4 	bl	80272f0 <ld_clust>
 8027f88:	4602      	mov	r2, r0
 8027f8a:	68fb      	ldr	r3, [r7, #12]
 8027f8c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8027f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027f90:	331c      	adds	r3, #28
 8027f92:	4618      	mov	r0, r3
 8027f94:	f7fe fa10 	bl	80263b8 <ld_dword>
 8027f98:	4602      	mov	r2, r0
 8027f9a:	68fb      	ldr	r3, [r7, #12]
 8027f9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8027f9e:	68fb      	ldr	r3, [r7, #12]
 8027fa0:	2200      	movs	r2, #0
 8027fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8027fa4:	693a      	ldr	r2, [r7, #16]
 8027fa6:	68fb      	ldr	r3, [r7, #12]
 8027fa8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8027faa:	693b      	ldr	r3, [r7, #16]
 8027fac:	88da      	ldrh	r2, [r3, #6]
 8027fae:	68fb      	ldr	r3, [r7, #12]
 8027fb0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8027fb2:	68fb      	ldr	r3, [r7, #12]
 8027fb4:	79fa      	ldrb	r2, [r7, #7]
 8027fb6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8027fb8:	68fb      	ldr	r3, [r7, #12]
 8027fba:	2200      	movs	r2, #0
 8027fbc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8027fbe:	68fb      	ldr	r3, [r7, #12]
 8027fc0:	2200      	movs	r2, #0
 8027fc2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8027fc4:	68fb      	ldr	r3, [r7, #12]
 8027fc6:	2200      	movs	r2, #0
 8027fc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8027fca:	68fb      	ldr	r3, [r7, #12]
 8027fcc:	3330      	adds	r3, #48	@ 0x30
 8027fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8027fd2:	2100      	movs	r1, #0
 8027fd4:	4618      	mov	r0, r3
 8027fd6:	f7fe fa7a 	bl	80264ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8027fda:	79fb      	ldrb	r3, [r7, #7]
 8027fdc:	f003 0320 	and.w	r3, r3, #32
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d060      	beq.n	80280a6 <f_open+0x35a>
 8027fe4:	68fb      	ldr	r3, [r7, #12]
 8027fe6:	68db      	ldr	r3, [r3, #12]
 8027fe8:	2b00      	cmp	r3, #0
 8027fea:	d05c      	beq.n	80280a6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8027fec:	68fb      	ldr	r3, [r7, #12]
 8027fee:	68da      	ldr	r2, [r3, #12]
 8027ff0:	68fb      	ldr	r3, [r7, #12]
 8027ff2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8027ff4:	693b      	ldr	r3, [r7, #16]
 8027ff6:	895b      	ldrh	r3, [r3, #10]
 8027ff8:	025b      	lsls	r3, r3, #9
 8027ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8027ffc:	68fb      	ldr	r3, [r7, #12]
 8027ffe:	689b      	ldr	r3, [r3, #8]
 8028000:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8028002:	68fb      	ldr	r3, [r7, #12]
 8028004:	68db      	ldr	r3, [r3, #12]
 8028006:	657b      	str	r3, [r7, #84]	@ 0x54
 8028008:	e016      	b.n	8028038 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 802800a:	68fb      	ldr	r3, [r7, #12]
 802800c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802800e:	4618      	mov	r0, r3
 8028010:	f7fe fd25 	bl	8026a5e <get_fat>
 8028014:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8028016:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028018:	2b01      	cmp	r3, #1
 802801a:	d802      	bhi.n	8028022 <f_open+0x2d6>
 802801c:	2302      	movs	r3, #2
 802801e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8028022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028028:	d102      	bne.n	8028030 <f_open+0x2e4>
 802802a:	2301      	movs	r3, #1
 802802c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8028030:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8028032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028034:	1ad3      	subs	r3, r2, r3
 8028036:	657b      	str	r3, [r7, #84]	@ 0x54
 8028038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802803c:	2b00      	cmp	r3, #0
 802803e:	d103      	bne.n	8028048 <f_open+0x2fc>
 8028040:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8028042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028044:	429a      	cmp	r2, r3
 8028046:	d8e0      	bhi.n	802800a <f_open+0x2be>
				}
				fp->clust = clst;
 8028048:	68fb      	ldr	r3, [r7, #12]
 802804a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802804c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 802804e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028052:	2b00      	cmp	r3, #0
 8028054:	d127      	bne.n	80280a6 <f_open+0x35a>
 8028056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8028058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802805c:	2b00      	cmp	r3, #0
 802805e:	d022      	beq.n	80280a6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8028060:	693b      	ldr	r3, [r7, #16]
 8028062:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8028064:	4618      	mov	r0, r3
 8028066:	f7fe fcdb 	bl	8026a20 <clust2sect>
 802806a:	6478      	str	r0, [r7, #68]	@ 0x44
 802806c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802806e:	2b00      	cmp	r3, #0
 8028070:	d103      	bne.n	802807a <f_open+0x32e>
						res = FR_INT_ERR;
 8028072:	2302      	movs	r3, #2
 8028074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8028078:	e015      	b.n	80280a6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 802807a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802807c:	0a5a      	lsrs	r2, r3, #9
 802807e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028080:	441a      	add	r2, r3
 8028082:	68fb      	ldr	r3, [r7, #12]
 8028084:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8028086:	693b      	ldr	r3, [r7, #16]
 8028088:	7858      	ldrb	r0, [r3, #1]
 802808a:	68fb      	ldr	r3, [r7, #12]
 802808c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028090:	68fb      	ldr	r3, [r7, #12]
 8028092:	6a1a      	ldr	r2, [r3, #32]
 8028094:	2301      	movs	r3, #1
 8028096:	f7fe f919 	bl	80262cc <disk_read>
 802809a:	4603      	mov	r3, r0
 802809c:	2b00      	cmp	r3, #0
 802809e:	d002      	beq.n	80280a6 <f_open+0x35a>
 80280a0:	2301      	movs	r3, #1
 80280a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80280a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	d002      	beq.n	80280b4 <f_open+0x368>
 80280ae:	68fb      	ldr	r3, [r7, #12]
 80280b0:	2200      	movs	r2, #0
 80280b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80280b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80280b8:	4618      	mov	r0, r3
 80280ba:	3760      	adds	r7, #96	@ 0x60
 80280bc:	46bd      	mov	sp, r7
 80280be:	bd80      	pop	{r7, pc}

080280c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80280c0:	b580      	push	{r7, lr}
 80280c2:	b08e      	sub	sp, #56	@ 0x38
 80280c4:	af00      	add	r7, sp, #0
 80280c6:	60f8      	str	r0, [r7, #12]
 80280c8:	60b9      	str	r1, [r7, #8]
 80280ca:	607a      	str	r2, [r7, #4]
 80280cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80280ce:	68bb      	ldr	r3, [r7, #8]
 80280d0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80280d2:	683b      	ldr	r3, [r7, #0]
 80280d4:	2200      	movs	r2, #0
 80280d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80280d8:	68fb      	ldr	r3, [r7, #12]
 80280da:	f107 0214 	add.w	r2, r7, #20
 80280de:	4611      	mov	r1, r2
 80280e0:	4618      	mov	r0, r3
 80280e2:	f7ff fdb7 	bl	8027c54 <validate>
 80280e6:	4603      	mov	r3, r0
 80280e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80280ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80280f0:	2b00      	cmp	r3, #0
 80280f2:	d107      	bne.n	8028104 <f_read+0x44>
 80280f4:	68fb      	ldr	r3, [r7, #12]
 80280f6:	7d5b      	ldrb	r3, [r3, #21]
 80280f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80280fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028100:	2b00      	cmp	r3, #0
 8028102:	d002      	beq.n	802810a <f_read+0x4a>
 8028104:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028108:	e115      	b.n	8028336 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 802810a:	68fb      	ldr	r3, [r7, #12]
 802810c:	7d1b      	ldrb	r3, [r3, #20]
 802810e:	f003 0301 	and.w	r3, r3, #1
 8028112:	2b00      	cmp	r3, #0
 8028114:	d101      	bne.n	802811a <f_read+0x5a>
 8028116:	2307      	movs	r3, #7
 8028118:	e10d      	b.n	8028336 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	68da      	ldr	r2, [r3, #12]
 802811e:	68fb      	ldr	r3, [r7, #12]
 8028120:	699b      	ldr	r3, [r3, #24]
 8028122:	1ad3      	subs	r3, r2, r3
 8028124:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8028126:	687a      	ldr	r2, [r7, #4]
 8028128:	6a3b      	ldr	r3, [r7, #32]
 802812a:	429a      	cmp	r2, r3
 802812c:	f240 80fe 	bls.w	802832c <f_read+0x26c>
 8028130:	6a3b      	ldr	r3, [r7, #32]
 8028132:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8028134:	e0fa      	b.n	802832c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8028136:	68fb      	ldr	r3, [r7, #12]
 8028138:	699b      	ldr	r3, [r3, #24]
 802813a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802813e:	2b00      	cmp	r3, #0
 8028140:	f040 80c6 	bne.w	80282d0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8028144:	68fb      	ldr	r3, [r7, #12]
 8028146:	699b      	ldr	r3, [r3, #24]
 8028148:	0a5b      	lsrs	r3, r3, #9
 802814a:	697a      	ldr	r2, [r7, #20]
 802814c:	8952      	ldrh	r2, [r2, #10]
 802814e:	3a01      	subs	r2, #1
 8028150:	4013      	ands	r3, r2
 8028152:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8028154:	69fb      	ldr	r3, [r7, #28]
 8028156:	2b00      	cmp	r3, #0
 8028158:	d12f      	bne.n	80281ba <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 802815a:	68fb      	ldr	r3, [r7, #12]
 802815c:	699b      	ldr	r3, [r3, #24]
 802815e:	2b00      	cmp	r3, #0
 8028160:	d103      	bne.n	802816a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8028162:	68fb      	ldr	r3, [r7, #12]
 8028164:	689b      	ldr	r3, [r3, #8]
 8028166:	633b      	str	r3, [r7, #48]	@ 0x30
 8028168:	e013      	b.n	8028192 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 802816a:	68fb      	ldr	r3, [r7, #12]
 802816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802816e:	2b00      	cmp	r3, #0
 8028170:	d007      	beq.n	8028182 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8028172:	68fb      	ldr	r3, [r7, #12]
 8028174:	699b      	ldr	r3, [r3, #24]
 8028176:	4619      	mov	r1, r3
 8028178:	68f8      	ldr	r0, [r7, #12]
 802817a:	f7fe fefe 	bl	8026f7a <clmt_clust>
 802817e:	6338      	str	r0, [r7, #48]	@ 0x30
 8028180:	e007      	b.n	8028192 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8028182:	68fa      	ldr	r2, [r7, #12]
 8028184:	68fb      	ldr	r3, [r7, #12]
 8028186:	69db      	ldr	r3, [r3, #28]
 8028188:	4619      	mov	r1, r3
 802818a:	4610      	mov	r0, r2
 802818c:	f7fe fc67 	bl	8026a5e <get_fat>
 8028190:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8028192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028194:	2b01      	cmp	r3, #1
 8028196:	d804      	bhi.n	80281a2 <f_read+0xe2>
 8028198:	68fb      	ldr	r3, [r7, #12]
 802819a:	2202      	movs	r2, #2
 802819c:	755a      	strb	r2, [r3, #21]
 802819e:	2302      	movs	r3, #2
 80281a0:	e0c9      	b.n	8028336 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80281a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80281a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80281a8:	d104      	bne.n	80281b4 <f_read+0xf4>
 80281aa:	68fb      	ldr	r3, [r7, #12]
 80281ac:	2201      	movs	r2, #1
 80281ae:	755a      	strb	r2, [r3, #21]
 80281b0:	2301      	movs	r3, #1
 80281b2:	e0c0      	b.n	8028336 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80281b4:	68fb      	ldr	r3, [r7, #12]
 80281b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80281b8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80281ba:	697a      	ldr	r2, [r7, #20]
 80281bc:	68fb      	ldr	r3, [r7, #12]
 80281be:	69db      	ldr	r3, [r3, #28]
 80281c0:	4619      	mov	r1, r3
 80281c2:	4610      	mov	r0, r2
 80281c4:	f7fe fc2c 	bl	8026a20 <clust2sect>
 80281c8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80281ca:	69bb      	ldr	r3, [r7, #24]
 80281cc:	2b00      	cmp	r3, #0
 80281ce:	d104      	bne.n	80281da <f_read+0x11a>
 80281d0:	68fb      	ldr	r3, [r7, #12]
 80281d2:	2202      	movs	r2, #2
 80281d4:	755a      	strb	r2, [r3, #21]
 80281d6:	2302      	movs	r3, #2
 80281d8:	e0ad      	b.n	8028336 <f_read+0x276>
			sect += csect;
 80281da:	69ba      	ldr	r2, [r7, #24]
 80281dc:	69fb      	ldr	r3, [r7, #28]
 80281de:	4413      	add	r3, r2
 80281e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80281e2:	687b      	ldr	r3, [r7, #4]
 80281e4:	0a5b      	lsrs	r3, r3, #9
 80281e6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80281e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80281ea:	2b00      	cmp	r3, #0
 80281ec:	d039      	beq.n	8028262 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80281ee:	69fa      	ldr	r2, [r7, #28]
 80281f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80281f2:	4413      	add	r3, r2
 80281f4:	697a      	ldr	r2, [r7, #20]
 80281f6:	8952      	ldrh	r2, [r2, #10]
 80281f8:	4293      	cmp	r3, r2
 80281fa:	d905      	bls.n	8028208 <f_read+0x148>
					cc = fs->csize - csect;
 80281fc:	697b      	ldr	r3, [r7, #20]
 80281fe:	895b      	ldrh	r3, [r3, #10]
 8028200:	461a      	mov	r2, r3
 8028202:	69fb      	ldr	r3, [r7, #28]
 8028204:	1ad3      	subs	r3, r2, r3
 8028206:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028208:	697b      	ldr	r3, [r7, #20]
 802820a:	7858      	ldrb	r0, [r3, #1]
 802820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802820e:	69ba      	ldr	r2, [r7, #24]
 8028210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8028212:	f7fe f85b 	bl	80262cc <disk_read>
 8028216:	4603      	mov	r3, r0
 8028218:	2b00      	cmp	r3, #0
 802821a:	d004      	beq.n	8028226 <f_read+0x166>
 802821c:	68fb      	ldr	r3, [r7, #12]
 802821e:	2201      	movs	r2, #1
 8028220:	755a      	strb	r2, [r3, #21]
 8028222:	2301      	movs	r3, #1
 8028224:	e087      	b.n	8028336 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8028226:	68fb      	ldr	r3, [r7, #12]
 8028228:	7d1b      	ldrb	r3, [r3, #20]
 802822a:	b25b      	sxtb	r3, r3
 802822c:	2b00      	cmp	r3, #0
 802822e:	da14      	bge.n	802825a <f_read+0x19a>
 8028230:	68fb      	ldr	r3, [r7, #12]
 8028232:	6a1a      	ldr	r2, [r3, #32]
 8028234:	69bb      	ldr	r3, [r7, #24]
 8028236:	1ad3      	subs	r3, r2, r3
 8028238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802823a:	429a      	cmp	r2, r3
 802823c:	d90d      	bls.n	802825a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 802823e:	68fb      	ldr	r3, [r7, #12]
 8028240:	6a1a      	ldr	r2, [r3, #32]
 8028242:	69bb      	ldr	r3, [r7, #24]
 8028244:	1ad3      	subs	r3, r2, r3
 8028246:	025b      	lsls	r3, r3, #9
 8028248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802824a:	18d0      	adds	r0, r2, r3
 802824c:	68fb      	ldr	r3, [r7, #12]
 802824e:	3330      	adds	r3, #48	@ 0x30
 8028250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8028254:	4619      	mov	r1, r3
 8028256:	f7fe f919 	bl	802648c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 802825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802825c:	025b      	lsls	r3, r3, #9
 802825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8028260:	e050      	b.n	8028304 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8028262:	68fb      	ldr	r3, [r7, #12]
 8028264:	6a1b      	ldr	r3, [r3, #32]
 8028266:	69ba      	ldr	r2, [r7, #24]
 8028268:	429a      	cmp	r2, r3
 802826a:	d02e      	beq.n	80282ca <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 802826c:	68fb      	ldr	r3, [r7, #12]
 802826e:	7d1b      	ldrb	r3, [r3, #20]
 8028270:	b25b      	sxtb	r3, r3
 8028272:	2b00      	cmp	r3, #0
 8028274:	da18      	bge.n	80282a8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028276:	697b      	ldr	r3, [r7, #20]
 8028278:	7858      	ldrb	r0, [r3, #1]
 802827a:	68fb      	ldr	r3, [r7, #12]
 802827c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028280:	68fb      	ldr	r3, [r7, #12]
 8028282:	6a1a      	ldr	r2, [r3, #32]
 8028284:	2301      	movs	r3, #1
 8028286:	f7fe f841 	bl	802630c <disk_write>
 802828a:	4603      	mov	r3, r0
 802828c:	2b00      	cmp	r3, #0
 802828e:	d004      	beq.n	802829a <f_read+0x1da>
 8028290:	68fb      	ldr	r3, [r7, #12]
 8028292:	2201      	movs	r2, #1
 8028294:	755a      	strb	r2, [r3, #21]
 8028296:	2301      	movs	r3, #1
 8028298:	e04d      	b.n	8028336 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 802829a:	68fb      	ldr	r3, [r7, #12]
 802829c:	7d1b      	ldrb	r3, [r3, #20]
 802829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80282a2:	b2da      	uxtb	r2, r3
 80282a4:	68fb      	ldr	r3, [r7, #12]
 80282a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80282a8:	697b      	ldr	r3, [r7, #20]
 80282aa:	7858      	ldrb	r0, [r3, #1]
 80282ac:	68fb      	ldr	r3, [r7, #12]
 80282ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80282b2:	2301      	movs	r3, #1
 80282b4:	69ba      	ldr	r2, [r7, #24]
 80282b6:	f7fe f809 	bl	80262cc <disk_read>
 80282ba:	4603      	mov	r3, r0
 80282bc:	2b00      	cmp	r3, #0
 80282be:	d004      	beq.n	80282ca <f_read+0x20a>
 80282c0:	68fb      	ldr	r3, [r7, #12]
 80282c2:	2201      	movs	r2, #1
 80282c4:	755a      	strb	r2, [r3, #21]
 80282c6:	2301      	movs	r3, #1
 80282c8:	e035      	b.n	8028336 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80282ca:	68fb      	ldr	r3, [r7, #12]
 80282cc:	69ba      	ldr	r2, [r7, #24]
 80282ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80282d0:	68fb      	ldr	r3, [r7, #12]
 80282d2:	699b      	ldr	r3, [r3, #24]
 80282d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80282d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80282dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80282de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80282e0:	687b      	ldr	r3, [r7, #4]
 80282e2:	429a      	cmp	r2, r3
 80282e4:	d901      	bls.n	80282ea <f_read+0x22a>
 80282e6:	687b      	ldr	r3, [r7, #4]
 80282e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80282ea:	68fb      	ldr	r3, [r7, #12]
 80282ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80282f0:	68fb      	ldr	r3, [r7, #12]
 80282f2:	699b      	ldr	r3, [r3, #24]
 80282f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80282f8:	4413      	add	r3, r2
 80282fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80282fc:	4619      	mov	r1, r3
 80282fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028300:	f7fe f8c4 	bl	802648c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8028304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028308:	4413      	add	r3, r2
 802830a:	627b      	str	r3, [r7, #36]	@ 0x24
 802830c:	68fb      	ldr	r3, [r7, #12]
 802830e:	699a      	ldr	r2, [r3, #24]
 8028310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028312:	441a      	add	r2, r3
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	619a      	str	r2, [r3, #24]
 8028318:	683b      	ldr	r3, [r7, #0]
 802831a:	681a      	ldr	r2, [r3, #0]
 802831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802831e:	441a      	add	r2, r3
 8028320:	683b      	ldr	r3, [r7, #0]
 8028322:	601a      	str	r2, [r3, #0]
 8028324:	687a      	ldr	r2, [r7, #4]
 8028326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028328:	1ad3      	subs	r3, r2, r3
 802832a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 802832c:	687b      	ldr	r3, [r7, #4]
 802832e:	2b00      	cmp	r3, #0
 8028330:	f47f af01 	bne.w	8028136 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8028334:	2300      	movs	r3, #0
}
 8028336:	4618      	mov	r0, r3
 8028338:	3738      	adds	r7, #56	@ 0x38
 802833a:	46bd      	mov	sp, r7
 802833c:	bd80      	pop	{r7, pc}

0802833e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 802833e:	b580      	push	{r7, lr}
 8028340:	b086      	sub	sp, #24
 8028342:	af00      	add	r7, sp, #0
 8028344:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8028346:	687b      	ldr	r3, [r7, #4]
 8028348:	f107 0208 	add.w	r2, r7, #8
 802834c:	4611      	mov	r1, r2
 802834e:	4618      	mov	r0, r3
 8028350:	f7ff fc80 	bl	8027c54 <validate>
 8028354:	4603      	mov	r3, r0
 8028356:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8028358:	7dfb      	ldrb	r3, [r7, #23]
 802835a:	2b00      	cmp	r3, #0
 802835c:	d168      	bne.n	8028430 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 802835e:	687b      	ldr	r3, [r7, #4]
 8028360:	7d1b      	ldrb	r3, [r3, #20]
 8028362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8028366:	2b00      	cmp	r3, #0
 8028368:	d062      	beq.n	8028430 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 802836a:	687b      	ldr	r3, [r7, #4]
 802836c:	7d1b      	ldrb	r3, [r3, #20]
 802836e:	b25b      	sxtb	r3, r3
 8028370:	2b00      	cmp	r3, #0
 8028372:	da15      	bge.n	80283a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8028374:	68bb      	ldr	r3, [r7, #8]
 8028376:	7858      	ldrb	r0, [r3, #1]
 8028378:	687b      	ldr	r3, [r7, #4]
 802837a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802837e:	687b      	ldr	r3, [r7, #4]
 8028380:	6a1a      	ldr	r2, [r3, #32]
 8028382:	2301      	movs	r3, #1
 8028384:	f7fd ffc2 	bl	802630c <disk_write>
 8028388:	4603      	mov	r3, r0
 802838a:	2b00      	cmp	r3, #0
 802838c:	d001      	beq.n	8028392 <f_sync+0x54>
 802838e:	2301      	movs	r3, #1
 8028390:	e04f      	b.n	8028432 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8028392:	687b      	ldr	r3, [r7, #4]
 8028394:	7d1b      	ldrb	r3, [r3, #20]
 8028396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802839a:	b2da      	uxtb	r2, r3
 802839c:	687b      	ldr	r3, [r7, #4]
 802839e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80283a0:	f7fd fcc6 	bl	8025d30 <get_fattime>
 80283a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80283a6:	68ba      	ldr	r2, [r7, #8]
 80283a8:	687b      	ldr	r3, [r7, #4]
 80283aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80283ac:	4619      	mov	r1, r3
 80283ae:	4610      	mov	r0, r2
 80283b0:	f7fe fa9a 	bl	80268e8 <move_window>
 80283b4:	4603      	mov	r3, r0
 80283b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80283b8:	7dfb      	ldrb	r3, [r7, #23]
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d138      	bne.n	8028430 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80283be:	687b      	ldr	r3, [r7, #4]
 80283c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80283c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	330b      	adds	r3, #11
 80283c8:	781a      	ldrb	r2, [r3, #0]
 80283ca:	68fb      	ldr	r3, [r7, #12]
 80283cc:	330b      	adds	r3, #11
 80283ce:	f042 0220 	orr.w	r2, r2, #32
 80283d2:	b2d2      	uxtb	r2, r2
 80283d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	6818      	ldr	r0, [r3, #0]
 80283da:	687b      	ldr	r3, [r7, #4]
 80283dc:	689b      	ldr	r3, [r3, #8]
 80283de:	461a      	mov	r2, r3
 80283e0:	68f9      	ldr	r1, [r7, #12]
 80283e2:	f7fe ffa4 	bl	802732e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80283e6:	68fb      	ldr	r3, [r7, #12]
 80283e8:	f103 021c 	add.w	r2, r3, #28
 80283ec:	687b      	ldr	r3, [r7, #4]
 80283ee:	68db      	ldr	r3, [r3, #12]
 80283f0:	4619      	mov	r1, r3
 80283f2:	4610      	mov	r0, r2
 80283f4:	f7fe f81e 	bl	8026434 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80283f8:	68fb      	ldr	r3, [r7, #12]
 80283fa:	3316      	adds	r3, #22
 80283fc:	6939      	ldr	r1, [r7, #16]
 80283fe:	4618      	mov	r0, r3
 8028400:	f7fe f818 	bl	8026434 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8028404:	68fb      	ldr	r3, [r7, #12]
 8028406:	3312      	adds	r3, #18
 8028408:	2100      	movs	r1, #0
 802840a:	4618      	mov	r0, r3
 802840c:	f7fd fff7 	bl	80263fe <st_word>
					fs->wflag = 1;
 8028410:	68bb      	ldr	r3, [r7, #8]
 8028412:	2201      	movs	r2, #1
 8028414:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8028416:	68bb      	ldr	r3, [r7, #8]
 8028418:	4618      	mov	r0, r3
 802841a:	f7fe fa93 	bl	8026944 <sync_fs>
 802841e:	4603      	mov	r3, r0
 8028420:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	7d1b      	ldrb	r3, [r3, #20]
 8028426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 802842a:	b2da      	uxtb	r2, r3
 802842c:	687b      	ldr	r3, [r7, #4]
 802842e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8028430:	7dfb      	ldrb	r3, [r7, #23]
}
 8028432:	4618      	mov	r0, r3
 8028434:	3718      	adds	r7, #24
 8028436:	46bd      	mov	sp, r7
 8028438:	bd80      	pop	{r7, pc}

0802843a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 802843a:	b580      	push	{r7, lr}
 802843c:	b084      	sub	sp, #16
 802843e:	af00      	add	r7, sp, #0
 8028440:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8028442:	6878      	ldr	r0, [r7, #4]
 8028444:	f7ff ff7b 	bl	802833e <f_sync>
 8028448:	4603      	mov	r3, r0
 802844a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 802844c:	7bfb      	ldrb	r3, [r7, #15]
 802844e:	2b00      	cmp	r3, #0
 8028450:	d118      	bne.n	8028484 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8028452:	687b      	ldr	r3, [r7, #4]
 8028454:	f107 0208 	add.w	r2, r7, #8
 8028458:	4611      	mov	r1, r2
 802845a:	4618      	mov	r0, r3
 802845c:	f7ff fbfa 	bl	8027c54 <validate>
 8028460:	4603      	mov	r3, r0
 8028462:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8028464:	7bfb      	ldrb	r3, [r7, #15]
 8028466:	2b00      	cmp	r3, #0
 8028468:	d10c      	bne.n	8028484 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	691b      	ldr	r3, [r3, #16]
 802846e:	4618      	mov	r0, r3
 8028470:	f7fe f996 	bl	80267a0 <dec_lock>
 8028474:	4603      	mov	r3, r0
 8028476:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8028478:	7bfb      	ldrb	r3, [r7, #15]
 802847a:	2b00      	cmp	r3, #0
 802847c:	d102      	bne.n	8028484 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 802847e:	687b      	ldr	r3, [r7, #4]
 8028480:	2200      	movs	r2, #0
 8028482:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8028484:	7bfb      	ldrb	r3, [r7, #15]
}
 8028486:	4618      	mov	r0, r3
 8028488:	3710      	adds	r7, #16
 802848a:	46bd      	mov	sp, r7
 802848c:	bd80      	pop	{r7, pc}
	...

08028490 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8028490:	b480      	push	{r7}
 8028492:	b087      	sub	sp, #28
 8028494:	af00      	add	r7, sp, #0
 8028496:	60f8      	str	r0, [r7, #12]
 8028498:	60b9      	str	r1, [r7, #8]
 802849a:	4613      	mov	r3, r2
 802849c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 802849e:	2301      	movs	r3, #1
 80284a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80284a2:	2300      	movs	r3, #0
 80284a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80284a6:	4b1f      	ldr	r3, [pc, #124]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284a8:	7a5b      	ldrb	r3, [r3, #9]
 80284aa:	b2db      	uxtb	r3, r3
 80284ac:	2b00      	cmp	r3, #0
 80284ae:	d131      	bne.n	8028514 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80284b0:	4b1c      	ldr	r3, [pc, #112]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284b2:	7a5b      	ldrb	r3, [r3, #9]
 80284b4:	b2db      	uxtb	r3, r3
 80284b6:	461a      	mov	r2, r3
 80284b8:	4b1a      	ldr	r3, [pc, #104]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284ba:	2100      	movs	r1, #0
 80284bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80284be:	4b19      	ldr	r3, [pc, #100]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284c0:	7a5b      	ldrb	r3, [r3, #9]
 80284c2:	b2db      	uxtb	r3, r3
 80284c4:	4a17      	ldr	r2, [pc, #92]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284c6:	009b      	lsls	r3, r3, #2
 80284c8:	4413      	add	r3, r2
 80284ca:	68fa      	ldr	r2, [r7, #12]
 80284cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80284ce:	4b15      	ldr	r3, [pc, #84]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284d0:	7a5b      	ldrb	r3, [r3, #9]
 80284d2:	b2db      	uxtb	r3, r3
 80284d4:	461a      	mov	r2, r3
 80284d6:	4b13      	ldr	r3, [pc, #76]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284d8:	4413      	add	r3, r2
 80284da:	79fa      	ldrb	r2, [r7, #7]
 80284dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80284de:	4b11      	ldr	r3, [pc, #68]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284e0:	7a5b      	ldrb	r3, [r3, #9]
 80284e2:	b2db      	uxtb	r3, r3
 80284e4:	1c5a      	adds	r2, r3, #1
 80284e6:	b2d1      	uxtb	r1, r2
 80284e8:	4a0e      	ldr	r2, [pc, #56]	@ (8028524 <FATFS_LinkDriverEx+0x94>)
 80284ea:	7251      	strb	r1, [r2, #9]
 80284ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80284ee:	7dbb      	ldrb	r3, [r7, #22]
 80284f0:	3330      	adds	r3, #48	@ 0x30
 80284f2:	b2da      	uxtb	r2, r3
 80284f4:	68bb      	ldr	r3, [r7, #8]
 80284f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80284f8:	68bb      	ldr	r3, [r7, #8]
 80284fa:	3301      	adds	r3, #1
 80284fc:	223a      	movs	r2, #58	@ 0x3a
 80284fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8028500:	68bb      	ldr	r3, [r7, #8]
 8028502:	3302      	adds	r3, #2
 8028504:	222f      	movs	r2, #47	@ 0x2f
 8028506:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8028508:	68bb      	ldr	r3, [r7, #8]
 802850a:	3303      	adds	r3, #3
 802850c:	2200      	movs	r2, #0
 802850e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8028510:	2300      	movs	r3, #0
 8028512:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8028514:	7dfb      	ldrb	r3, [r7, #23]
}
 8028516:	4618      	mov	r0, r3
 8028518:	371c      	adds	r7, #28
 802851a:	46bd      	mov	sp, r7
 802851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028520:	4770      	bx	lr
 8028522:	bf00      	nop
 8028524:	24000ab4 	.word	0x24000ab4

08028528 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8028528:	b580      	push	{r7, lr}
 802852a:	b082      	sub	sp, #8
 802852c:	af00      	add	r7, sp, #0
 802852e:	6078      	str	r0, [r7, #4]
 8028530:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8028532:	2200      	movs	r2, #0
 8028534:	6839      	ldr	r1, [r7, #0]
 8028536:	6878      	ldr	r0, [r7, #4]
 8028538:	f7ff ffaa 	bl	8028490 <FATFS_LinkDriverEx>
 802853c:	4603      	mov	r3, r0
}
 802853e:	4618      	mov	r0, r3
 8028540:	3708      	adds	r7, #8
 8028542:	46bd      	mov	sp, r7
 8028544:	bd80      	pop	{r7, pc}

08028546 <_ZdlPvj>:
 8028546:	f000 bbd3 	b.w	8028cf0 <_ZdlPv>

0802854a <__cxa_guard_acquire>:
 802854a:	6802      	ldr	r2, [r0, #0]
 802854c:	07d2      	lsls	r2, r2, #31
 802854e:	4603      	mov	r3, r0
 8028550:	d405      	bmi.n	802855e <__cxa_guard_acquire+0x14>
 8028552:	7842      	ldrb	r2, [r0, #1]
 8028554:	b102      	cbz	r2, 8028558 <__cxa_guard_acquire+0xe>
 8028556:	deff      	udf	#255	@ 0xff
 8028558:	2001      	movs	r0, #1
 802855a:	7058      	strb	r0, [r3, #1]
 802855c:	4770      	bx	lr
 802855e:	2000      	movs	r0, #0
 8028560:	4770      	bx	lr

08028562 <__cxa_guard_release>:
 8028562:	2301      	movs	r3, #1
 8028564:	6003      	str	r3, [r0, #0]
 8028566:	4770      	bx	lr

08028568 <_Znwj>:
 8028568:	2801      	cmp	r0, #1
 802856a:	bf38      	it	cc
 802856c:	2001      	movcc	r0, #1
 802856e:	b510      	push	{r4, lr}
 8028570:	4604      	mov	r4, r0
 8028572:	4620      	mov	r0, r4
 8028574:	f000 fc68 	bl	8028e48 <malloc>
 8028578:	b100      	cbz	r0, 802857c <_Znwj+0x14>
 802857a:	bd10      	pop	{r4, pc}
 802857c:	f000 fbba 	bl	8028cf4 <_ZSt15get_new_handlerv>
 8028580:	b908      	cbnz	r0, 8028586 <_Znwj+0x1e>
 8028582:	f000 fc59 	bl	8028e38 <abort>
 8028586:	4780      	blx	r0
 8028588:	e7f3      	b.n	8028572 <_Znwj+0xa>

0802858a <_ZNSaIcEC1Ev>:
 802858a:	4770      	bx	lr

0802858c <_ZNSaIcED1Ev>:
 802858c:	4770      	bx	lr

0802858e <_ZSt17__throw_bad_allocv>:
 802858e:	b508      	push	{r3, lr}
 8028590:	f000 fc52 	bl	8028e38 <abort>

08028594 <_ZSt28__throw_bad_array_new_lengthv>:
 8028594:	b508      	push	{r3, lr}
 8028596:	f000 fc4f 	bl	8028e38 <abort>

0802859a <_ZSt19__throw_logic_errorPKc>:
 802859a:	b508      	push	{r3, lr}
 802859c:	f000 fc4c 	bl	8028e38 <abort>

080285a0 <_ZSt24__throw_invalid_argumentPKc>:
 80285a0:	b508      	push	{r3, lr}
 80285a2:	f000 fc49 	bl	8028e38 <abort>

080285a6 <_ZSt20__throw_length_errorPKc>:
 80285a6:	b508      	push	{r3, lr}
 80285a8:	f000 fc46 	bl	8028e38 <abort>

080285ac <_ZSt20__throw_out_of_rangePKc>:
 80285ac:	b508      	push	{r3, lr}
 80285ae:	f000 fc43 	bl	8028e38 <abort>

080285b2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80285b2:	b40f      	push	{r0, r1, r2, r3}
 80285b4:	b508      	push	{r3, lr}
 80285b6:	f000 fc3f 	bl	8028e38 <abort>

080285ba <_ZSt25__throw_bad_function_callv>:
 80285ba:	b508      	push	{r3, lr}
 80285bc:	f000 fc3c 	bl	8028e38 <abort>

080285c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80285c0:	4901      	ldr	r1, [pc, #4]	@ (80285c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80285c2:	f000 bc23 	b.w	8028e0c <_ZNKSt9type_info7__equalERKS_>
 80285c6:	bf00      	nop
 80285c8:	0802b6c4 	.word	0x0802b6c4

080285cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80285cc:	b10a      	cbz	r2, 80285d2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80285ce:	f001 b8be 	b.w	802974e <memcpy>
 80285d2:	4770      	bx	lr

080285d4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80285d4:	b10a      	cbz	r2, 80285da <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80285d6:	f000 bfc1 	b.w	802955c <memcmp>
 80285da:	4610      	mov	r0, r2
 80285dc:	4770      	bx	lr

080285de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80285de:	6001      	str	r1, [r0, #0]
 80285e0:	4770      	bx	lr

080285e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80285e2:	6800      	ldr	r0, [r0, #0]
 80285e4:	4770      	bx	lr

080285e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80285e6:	3008      	adds	r0, #8
 80285e8:	4770      	bx	lr

080285ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80285ea:	6081      	str	r1, [r0, #8]
 80285ec:	4770      	bx	lr

080285ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80285ee:	6803      	ldr	r3, [r0, #0]
 80285f0:	6041      	str	r1, [r0, #4]
 80285f2:	2200      	movs	r2, #0
 80285f4:	545a      	strb	r2, [r3, r1]
 80285f6:	4770      	bx	lr

080285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80285f8:	f850 3b08 	ldr.w	r3, [r0], #8
 80285fc:	1a1b      	subs	r3, r3, r0
 80285fe:	4258      	negs	r0, r3
 8028600:	4158      	adcs	r0, r3
 8028602:	4770      	bx	lr

08028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8028604:	b508      	push	{r3, lr}
 8028606:	680b      	ldr	r3, [r1, #0]
 8028608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802860c:	d302      	bcc.n	8028614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 802860e:	480d      	ldr	r0, [pc, #52]	@ (8028644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8028610:	f7ff ffc9 	bl	80285a6 <_ZSt20__throw_length_errorPKc>
 8028614:	4293      	cmp	r3, r2
 8028616:	d90b      	bls.n	8028630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8028618:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 802861c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8028620:	d206      	bcs.n	8028630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8028622:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8028626:	bf2a      	itet	cs
 8028628:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 802862c:	6008      	strcc	r0, [r1, #0]
 802862e:	600b      	strcs	r3, [r1, #0]
 8028630:	6808      	ldr	r0, [r1, #0]
 8028632:	3001      	adds	r0, #1
 8028634:	d501      	bpl.n	802863a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8028636:	f7ff ffaa 	bl	802858e <_ZSt17__throw_bad_allocv>
 802863a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802863e:	f7ff bf93 	b.w	8028568 <_Znwj>
 8028642:	bf00      	nop
 8028644:	0802b6cc 	.word	0x0802b6cc

08028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8028648:	b510      	push	{r4, lr}
 802864a:	4604      	mov	r4, r0
 802864c:	f7ff ffd4 	bl	80285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028650:	b920      	cbnz	r0, 802865c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8028652:	6820      	ldr	r0, [r4, #0]
 8028654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028658:	f000 bb4a 	b.w	8028cf0 <_ZdlPv>
 802865c:	bd10      	pop	{r4, pc}
	...

08028660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8028660:	b508      	push	{r3, lr}
 8028662:	4603      	mov	r3, r0
 8028664:	4608      	mov	r0, r1
 8028666:	685b      	ldr	r3, [r3, #4]
 8028668:	4298      	cmp	r0, r3
 802866a:	4611      	mov	r1, r2
 802866c:	d903      	bls.n	8028676 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 802866e:	4602      	mov	r2, r0
 8028670:	4801      	ldr	r0, [pc, #4]	@ (8028678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8028672:	f7ff ff9e 	bl	80285b2 <_ZSt24__throw_out_of_range_fmtPKcz>
 8028676:	bd08      	pop	{r3, pc}
 8028678:	0802b6e4 	.word	0x0802b6e4

0802867c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 802867c:	6840      	ldr	r0, [r0, #4]
 802867e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028682:	3901      	subs	r1, #1
 8028684:	1a09      	subs	r1, r1, r0
 8028686:	4291      	cmp	r1, r2
 8028688:	b508      	push	{r3, lr}
 802868a:	d202      	bcs.n	8028692 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 802868c:	4618      	mov	r0, r3
 802868e:	f7ff ff8a 	bl	80285a6 <_ZSt20__throw_length_errorPKc>
 8028692:	bd08      	pop	{r3, pc}

08028694 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8028694:	6803      	ldr	r3, [r0, #0]
 8028696:	428b      	cmp	r3, r1
 8028698:	d806      	bhi.n	80286a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 802869a:	6842      	ldr	r2, [r0, #4]
 802869c:	4413      	add	r3, r2
 802869e:	4299      	cmp	r1, r3
 80286a0:	bf94      	ite	ls
 80286a2:	2000      	movls	r0, #0
 80286a4:	2001      	movhi	r0, #1
 80286a6:	4770      	bx	lr
 80286a8:	2001      	movs	r0, #1
 80286aa:	4770      	bx	lr

080286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80286ac:	2a01      	cmp	r2, #1
 80286ae:	b410      	push	{r4}
 80286b0:	d104      	bne.n	80286bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80286b2:	780a      	ldrb	r2, [r1, #0]
 80286b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286b8:	7002      	strb	r2, [r0, #0]
 80286ba:	4770      	bx	lr
 80286bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286c0:	f7ff bf84 	b.w	80285cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80286c4:	2a01      	cmp	r2, #1
 80286c6:	b430      	push	{r4, r5}
 80286c8:	d103      	bne.n	80286d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80286ca:	780b      	ldrb	r3, [r1, #0]
 80286cc:	7003      	strb	r3, [r0, #0]
 80286ce:	bc30      	pop	{r4, r5}
 80286d0:	4770      	bx	lr
 80286d2:	2a00      	cmp	r2, #0
 80286d4:	d0fb      	beq.n	80286ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80286d6:	bc30      	pop	{r4, r5}
 80286d8:	f000 bf50 	b.w	802957c <memmove>

080286dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80286dc:	460b      	mov	r3, r1
 80286de:	2b01      	cmp	r3, #1
 80286e0:	b410      	push	{r4}
 80286e2:	4611      	mov	r1, r2
 80286e4:	4604      	mov	r4, r0
 80286e6:	d103      	bne.n	80286f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80286e8:	7022      	strb	r2, [r4, #0]
 80286ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286ee:	4770      	bx	lr
 80286f0:	2b00      	cmp	r3, #0
 80286f2:	d0fa      	beq.n	80286ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80286f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286f8:	461a      	mov	r2, r3
 80286fa:	f000 bf59 	b.w	80295b0 <memset>

080286fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80286fe:	b508      	push	{r3, lr}
 8028700:	1a52      	subs	r2, r2, r1
 8028702:	f7ff ffd3 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028706:	bd08      	pop	{r3, pc}

08028708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8028708:	b508      	push	{r3, lr}
 802870a:	1a52      	subs	r2, r2, r1
 802870c:	f7ff ffce 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028710:	bd08      	pop	{r3, pc}

08028712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8028712:	f100 0208 	add.w	r2, r0, #8
 8028716:	6002      	str	r2, [r0, #0]
 8028718:	2200      	movs	r2, #0
 802871a:	6042      	str	r2, [r0, #4]
 802871c:	7202      	strb	r2, [r0, #8]
 802871e:	4770      	bx	lr

08028720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8028720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028722:	f100 0708 	add.w	r7, r0, #8
 8028726:	6007      	str	r7, [r0, #0]
 8028728:	4605      	mov	r5, r0
 802872a:	4608      	mov	r0, r1
 802872c:	460c      	mov	r4, r1
 802872e:	f7ff ff63 	bl	80285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028732:	f104 0608 	add.w	r6, r4, #8
 8028736:	6862      	ldr	r2, [r4, #4]
 8028738:	b160      	cbz	r0, 8028754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 802873a:	3201      	adds	r2, #1
 802873c:	4631      	mov	r1, r6
 802873e:	4638      	mov	r0, r7
 8028740:	f7ff ff44 	bl	80285cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8028744:	6863      	ldr	r3, [r4, #4]
 8028746:	606b      	str	r3, [r5, #4]
 8028748:	2300      	movs	r3, #0
 802874a:	7223      	strb	r3, [r4, #8]
 802874c:	6026      	str	r6, [r4, #0]
 802874e:	6063      	str	r3, [r4, #4]
 8028750:	4628      	mov	r0, r5
 8028752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028754:	6823      	ldr	r3, [r4, #0]
 8028756:	602b      	str	r3, [r5, #0]
 8028758:	68a3      	ldr	r3, [r4, #8]
 802875a:	60ab      	str	r3, [r5, #8]
 802875c:	e7f2      	b.n	8028744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0802875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 802875e:	b510      	push	{r4, lr}
 8028760:	4604      	mov	r4, r0
 8028762:	f7ff ff71 	bl	8028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028766:	4620      	mov	r0, r4
 8028768:	bd10      	pop	{r4, pc}

0802876a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 802876a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802876c:	460c      	mov	r4, r1
 802876e:	4605      	mov	r5, r0
 8028770:	f7ff ff42 	bl	80285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028774:	4606      	mov	r6, r0
 8028776:	4620      	mov	r0, r4
 8028778:	f7ff ff3e 	bl	80285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802877c:	b190      	cbz	r0, 80287a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 802877e:	42a5      	cmp	r5, r4
 8028780:	d00a      	beq.n	8028798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8028782:	6862      	ldr	r2, [r4, #4]
 8028784:	b11a      	cbz	r2, 802878e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8028786:	6821      	ldr	r1, [r4, #0]
 8028788:	6828      	ldr	r0, [r5, #0]
 802878a:	f7ff ff8f 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802878e:	6863      	ldr	r3, [r4, #4]
 8028790:	682a      	ldr	r2, [r5, #0]
 8028792:	606b      	str	r3, [r5, #4]
 8028794:	2100      	movs	r1, #0
 8028796:	54d1      	strb	r1, [r2, r3]
 8028798:	6822      	ldr	r2, [r4, #0]
 802879a:	2300      	movs	r3, #0
 802879c:	6063      	str	r3, [r4, #4]
 802879e:	7013      	strb	r3, [r2, #0]
 80287a0:	4628      	mov	r0, r5
 80287a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80287a4:	b90e      	cbnz	r6, 80287aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80287a6:	6828      	ldr	r0, [r5, #0]
 80287a8:	68af      	ldr	r7, [r5, #8]
 80287aa:	6823      	ldr	r3, [r4, #0]
 80287ac:	602b      	str	r3, [r5, #0]
 80287ae:	6863      	ldr	r3, [r4, #4]
 80287b0:	606b      	str	r3, [r5, #4]
 80287b2:	68a3      	ldr	r3, [r4, #8]
 80287b4:	60ab      	str	r3, [r5, #8]
 80287b6:	b110      	cbz	r0, 80287be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80287b8:	6020      	str	r0, [r4, #0]
 80287ba:	60a7      	str	r7, [r4, #8]
 80287bc:	e7ec      	b.n	8028798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80287be:	f104 0308 	add.w	r3, r4, #8
 80287c2:	6023      	str	r3, [r4, #0]
 80287c4:	e7e8      	b.n	8028798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80287c6:	b510      	push	{r4, lr}
 80287c8:	4604      	mov	r4, r0
 80287ca:	f7ff ff15 	bl	80285f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80287ce:	b908      	cbnz	r0, 80287d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80287d0:	68a0      	ldr	r0, [r4, #8]
 80287d2:	bd10      	pop	{r4, pc}
 80287d4:	200f      	movs	r0, #15
 80287d6:	e7fc      	b.n	80287d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80287d8:	4288      	cmp	r0, r1
 80287da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80287dc:	4604      	mov	r4, r0
 80287de:	460e      	mov	r6, r1
 80287e0:	d01d      	beq.n	802881e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 80287e2:	684d      	ldr	r5, [r1, #4]
 80287e4:	f7ff ffef 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80287e8:	42a8      	cmp	r0, r5
 80287ea:	4602      	mov	r2, r0
 80287ec:	d211      	bcs.n	8028812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 80287ee:	a901      	add	r1, sp, #4
 80287f0:	4620      	mov	r0, r4
 80287f2:	9501      	str	r5, [sp, #4]
 80287f4:	f7ff ff06 	bl	8028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80287f8:	4607      	mov	r7, r0
 80287fa:	4620      	mov	r0, r4
 80287fc:	f7ff ff24 	bl	8028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028800:	9b01      	ldr	r3, [sp, #4]
 8028802:	6027      	str	r7, [r4, #0]
 8028804:	60a3      	str	r3, [r4, #8]
 8028806:	6831      	ldr	r1, [r6, #0]
 8028808:	6820      	ldr	r0, [r4, #0]
 802880a:	462a      	mov	r2, r5
 802880c:	f7ff ff4e 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028810:	e001      	b.n	8028816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 8028812:	2d00      	cmp	r5, #0
 8028814:	d1f7      	bne.n	8028806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 8028816:	6823      	ldr	r3, [r4, #0]
 8028818:	6065      	str	r5, [r4, #4]
 802881a:	2200      	movs	r2, #0
 802881c:	555a      	strb	r2, [r3, r5]
 802881e:	b003      	add	sp, #12
 8028820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8028822:	b510      	push	{r4, lr}
 8028824:	4604      	mov	r4, r0
 8028826:	f7ff ffd7 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 802882a:	4620      	mov	r0, r4
 802882c:	bd10      	pop	{r4, pc}

0802882e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 802882e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8028832:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8028834:	461f      	mov	r7, r3
 8028836:	6843      	ldr	r3, [r0, #4]
 8028838:	eb01 0802 	add.w	r8, r1, r2
 802883c:	1ab2      	subs	r2, r6, r2
 802883e:	441a      	add	r2, r3
 8028840:	4604      	mov	r4, r0
 8028842:	460d      	mov	r5, r1
 8028844:	eba3 0908 	sub.w	r9, r3, r8
 8028848:	9201      	str	r2, [sp, #4]
 802884a:	f7ff ffbc 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802884e:	a901      	add	r1, sp, #4
 8028850:	4602      	mov	r2, r0
 8028852:	4620      	mov	r0, r4
 8028854:	f7ff fed6 	bl	8028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028858:	4682      	mov	sl, r0
 802885a:	b11d      	cbz	r5, 8028864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 802885c:	6821      	ldr	r1, [r4, #0]
 802885e:	462a      	mov	r2, r5
 8028860:	f7ff ff24 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028864:	b137      	cbz	r7, 8028874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8028866:	b12e      	cbz	r6, 8028874 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8028868:	4632      	mov	r2, r6
 802886a:	4639      	mov	r1, r7
 802886c:	eb0a 0005 	add.w	r0, sl, r5
 8028870:	f7ff ff1c 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028874:	f1b9 0f00 	cmp.w	r9, #0
 8028878:	d007      	beq.n	802888a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 802887a:	6821      	ldr	r1, [r4, #0]
 802887c:	4435      	add	r5, r6
 802887e:	464a      	mov	r2, r9
 8028880:	4441      	add	r1, r8
 8028882:	eb0a 0005 	add.w	r0, sl, r5
 8028886:	f7ff ff11 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802888a:	4620      	mov	r0, r4
 802888c:	f7ff fedc 	bl	8028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028890:	9b01      	ldr	r3, [sp, #4]
 8028892:	f8c4 a000 	str.w	sl, [r4]
 8028896:	60a3      	str	r3, [r4, #8]
 8028898:	b002      	add	sp, #8
 802889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802889e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 802889e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80288a0:	4604      	mov	r4, r0
 80288a2:	9101      	str	r1, [sp, #4]
 80288a4:	f7ff ff8f 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80288a8:	9b01      	ldr	r3, [sp, #4]
 80288aa:	4283      	cmp	r3, r0
 80288ac:	4602      	mov	r2, r0
 80288ae:	d90f      	bls.n	80288d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80288b0:	a901      	add	r1, sp, #4
 80288b2:	4620      	mov	r0, r4
 80288b4:	f7ff fea6 	bl	8028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80288b8:	6862      	ldr	r2, [r4, #4]
 80288ba:	6821      	ldr	r1, [r4, #0]
 80288bc:	3201      	adds	r2, #1
 80288be:	4605      	mov	r5, r0
 80288c0:	f7ff fef4 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288c4:	4620      	mov	r0, r4
 80288c6:	f7ff febf 	bl	8028648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80288ca:	9b01      	ldr	r3, [sp, #4]
 80288cc:	6025      	str	r5, [r4, #0]
 80288ce:	60a3      	str	r3, [r4, #8]
 80288d0:	b003      	add	sp, #12
 80288d2:	bd30      	pop	{r4, r5, pc}

080288d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80288d4:	6802      	ldr	r2, [r0, #0]
 80288d6:	2300      	movs	r3, #0
 80288d8:	6043      	str	r3, [r0, #4]
 80288da:	7013      	strb	r3, [r2, #0]
 80288dc:	4770      	bx	lr

080288de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 80288de:	6840      	ldr	r0, [r0, #4]
 80288e0:	fab0 f080 	clz	r0, r0
 80288e4:	0940      	lsrs	r0, r0, #5
 80288e6:	4770      	bx	lr

080288e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80288e8:	6800      	ldr	r0, [r0, #0]
 80288ea:	4408      	add	r0, r1
 80288ec:	4770      	bx	lr

080288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80288ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80288f0:	6846      	ldr	r6, [r0, #4]
 80288f2:	4604      	mov	r4, r0
 80288f4:	460f      	mov	r7, r1
 80288f6:	f7ff ff66 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80288fa:	1c75      	adds	r5, r6, #1
 80288fc:	4285      	cmp	r5, r0
 80288fe:	d907      	bls.n	8028910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8028900:	2301      	movs	r3, #1
 8028902:	9300      	str	r3, [sp, #0]
 8028904:	2300      	movs	r3, #0
 8028906:	461a      	mov	r2, r3
 8028908:	4631      	mov	r1, r6
 802890a:	4620      	mov	r0, r4
 802890c:	f7ff ff8f 	bl	802882e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028910:	6823      	ldr	r3, [r4, #0]
 8028912:	559f      	strb	r7, [r3, r6]
 8028914:	6823      	ldr	r3, [r4, #0]
 8028916:	6065      	str	r5, [r4, #4]
 8028918:	2200      	movs	r2, #0
 802891a:	555a      	strb	r2, [r3, r5]
 802891c:	b003      	add	sp, #12
 802891e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8028920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028924:	4616      	mov	r6, r2
 8028926:	461d      	mov	r5, r3
 8028928:	4604      	mov	r4, r0
 802892a:	4b1b      	ldr	r3, [pc, #108]	@ (8028998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 802892c:	462a      	mov	r2, r5
 802892e:	460f      	mov	r7, r1
 8028930:	4631      	mov	r1, r6
 8028932:	f7ff fea3 	bl	802867c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028936:	4620      	mov	r0, r4
 8028938:	f7ff ff45 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 802893c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8028940:	eba5 0806 	sub.w	r8, r5, r6
 8028944:	44c8      	add	r8, r9
 8028946:	4540      	cmp	r0, r8
 8028948:	d31d      	bcc.n	8028986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 802894a:	19f3      	adds	r3, r6, r7
 802894c:	ebb9 0203 	subs.w	r2, r9, r3
 8028950:	d007      	beq.n	8028962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028952:	42ae      	cmp	r6, r5
 8028954:	d005      	beq.n	8028962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028956:	6820      	ldr	r0, [r4, #0]
 8028958:	4438      	add	r0, r7
 802895a:	1981      	adds	r1, r0, r6
 802895c:	4428      	add	r0, r5
 802895e:	f7ff feb1 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028962:	b135      	cbz	r5, 8028972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8028964:	6820      	ldr	r0, [r4, #0]
 8028966:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 802896a:	4629      	mov	r1, r5
 802896c:	4438      	add	r0, r7
 802896e:	f7ff feb5 	bl	80286dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8028972:	6823      	ldr	r3, [r4, #0]
 8028974:	f8c4 8004 	str.w	r8, [r4, #4]
 8028978:	2200      	movs	r2, #0
 802897a:	4620      	mov	r0, r4
 802897c:	f803 2008 	strb.w	r2, [r3, r8]
 8028980:	b003      	add	sp, #12
 8028982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028986:	9500      	str	r5, [sp, #0]
 8028988:	2300      	movs	r3, #0
 802898a:	4632      	mov	r2, r6
 802898c:	4639      	mov	r1, r7
 802898e:	4620      	mov	r0, r4
 8028990:	f7ff ff4d 	bl	802882e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028994:	e7e5      	b.n	8028962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028996:	bf00      	nop
 8028998:	0802b71b 	.word	0x0802b71b

0802899c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 802899c:	b507      	push	{r0, r1, r2, lr}
 802899e:	9200      	str	r2, [sp, #0]
 80289a0:	460b      	mov	r3, r1
 80289a2:	2200      	movs	r2, #0
 80289a4:	6841      	ldr	r1, [r0, #4]
 80289a6:	f7ff ffbb 	bl	8028920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80289aa:	b003      	add	sp, #12
 80289ac:	f85d fb04 	ldr.w	pc, [sp], #4

080289b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80289b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289b4:	b085      	sub	sp, #20
 80289b6:	4680      	mov	r8, r0
 80289b8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80289ba:	4614      	mov	r4, r2
 80289bc:	4689      	mov	r9, r1
 80289be:	462a      	mov	r2, r5
 80289c0:	4621      	mov	r1, r4
 80289c2:	461f      	mov	r7, r3
 80289c4:	4b37      	ldr	r3, [pc, #220]	@ (8028aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 80289c6:	f7ff fe59 	bl	802867c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80289ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80289ce:	9303      	str	r3, [sp, #12]
 80289d0:	eba5 0b04 	sub.w	fp, r5, r4
 80289d4:	4640      	mov	r0, r8
 80289d6:	eb03 0a0b 	add.w	sl, r3, fp
 80289da:	f7ff fef4 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80289de:	4550      	cmp	r0, sl
 80289e0:	d354      	bcc.n	8028a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 80289e2:	f8d8 6000 	ldr.w	r6, [r8]
 80289e6:	9b03      	ldr	r3, [sp, #12]
 80289e8:	444e      	add	r6, r9
 80289ea:	4639      	mov	r1, r7
 80289ec:	44a1      	add	r9, r4
 80289ee:	4640      	mov	r0, r8
 80289f0:	eba3 0909 	sub.w	r9, r3, r9
 80289f4:	f7ff fe4e 	bl	8028694 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80289f8:	b180      	cbz	r0, 8028a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 80289fa:	f1b9 0f00 	cmp.w	r9, #0
 80289fe:	d006      	beq.n	8028a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028a00:	42ac      	cmp	r4, r5
 8028a02:	d004      	beq.n	8028a0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028a04:	464a      	mov	r2, r9
 8028a06:	1931      	adds	r1, r6, r4
 8028a08:	1970      	adds	r0, r6, r5
 8028a0a:	f7ff fe5b 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a0e:	b315      	cbz	r5, 8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a10:	462a      	mov	r2, r5
 8028a12:	4639      	mov	r1, r7
 8028a14:	4630      	mov	r0, r6
 8028a16:	f7ff fe49 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028a1a:	e01c      	b.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a1c:	b135      	cbz	r5, 8028a2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8028a1e:	42ac      	cmp	r4, r5
 8028a20:	d33c      	bcc.n	8028a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8028a22:	462a      	mov	r2, r5
 8028a24:	4639      	mov	r1, r7
 8028a26:	4630      	mov	r0, r6
 8028a28:	f7ff fe4c 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a2c:	f1b9 0f00 	cmp.w	r9, #0
 8028a30:	d011      	beq.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a32:	42ac      	cmp	r4, r5
 8028a34:	d00f      	beq.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a36:	464a      	mov	r2, r9
 8028a38:	1931      	adds	r1, r6, r4
 8028a3a:	1970      	adds	r0, r6, r5
 8028a3c:	f7ff fe42 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a40:	42ac      	cmp	r4, r5
 8028a42:	d208      	bcs.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a44:	4434      	add	r4, r6
 8028a46:	197b      	adds	r3, r7, r5
 8028a48:	429c      	cmp	r4, r3
 8028a4a:	d30f      	bcc.n	8028a6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8028a4c:	462a      	mov	r2, r5
 8028a4e:	4639      	mov	r1, r7
 8028a50:	4630      	mov	r0, r6
 8028a52:	f7ff fe37 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a56:	f8d8 3000 	ldr.w	r3, [r8]
 8028a5a:	f8c8 a004 	str.w	sl, [r8, #4]
 8028a5e:	2200      	movs	r2, #0
 8028a60:	4640      	mov	r0, r8
 8028a62:	f803 200a 	strb.w	r2, [r3, sl]
 8028a66:	b005      	add	sp, #20
 8028a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a6c:	42bc      	cmp	r4, r7
 8028a6e:	d803      	bhi.n	8028a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8028a70:	462a      	mov	r2, r5
 8028a72:	eb07 010b 	add.w	r1, r7, fp
 8028a76:	e7cd      	b.n	8028a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8028a78:	1be4      	subs	r4, r4, r7
 8028a7a:	4622      	mov	r2, r4
 8028a7c:	4639      	mov	r1, r7
 8028a7e:	4630      	mov	r0, r6
 8028a80:	f7ff fe20 	bl	80286c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a84:	1b2a      	subs	r2, r5, r4
 8028a86:	1971      	adds	r1, r6, r5
 8028a88:	1930      	adds	r0, r6, r4
 8028a8a:	e7c4      	b.n	8028a16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8028a8c:	9500      	str	r5, [sp, #0]
 8028a8e:	463b      	mov	r3, r7
 8028a90:	4622      	mov	r2, r4
 8028a92:	4649      	mov	r1, r9
 8028a94:	4640      	mov	r0, r8
 8028a96:	f7ff feca 	bl	802882e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028a9a:	e7dc      	b.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a9c:	f1b9 0f00 	cmp.w	r9, #0
 8028aa0:	d0d0      	beq.n	8028a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8028aa2:	e7c8      	b.n	8028a36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8028aa4:	0802b738 	.word	0x0802b738

08028aa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 8028aa8:	b507      	push	{r0, r1, r2, lr}
 8028aaa:	9200      	str	r2, [sp, #0]
 8028aac:	460b      	mov	r3, r1
 8028aae:	6842      	ldr	r2, [r0, #4]
 8028ab0:	2100      	movs	r1, #0
 8028ab2:	f7ff ff7d 	bl	80289b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8028ab6:	b003      	add	sp, #12
 8028ab8:	f85d fb04 	ldr.w	pc, [sp], #4

08028abc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8028abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028ac0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8028ac4:	4604      	mov	r4, r0
 8028ac6:	eb02 0708 	add.w	r7, r2, r8
 8028aca:	460e      	mov	r6, r1
 8028acc:	4615      	mov	r5, r2
 8028ace:	f7ff fe7a 	bl	80287c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028ad2:	42b8      	cmp	r0, r7
 8028ad4:	d30e      	bcc.n	8028af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8028ad6:	b12d      	cbz	r5, 8028ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8028ad8:	6820      	ldr	r0, [r4, #0]
 8028ada:	462a      	mov	r2, r5
 8028adc:	4631      	mov	r1, r6
 8028ade:	4440      	add	r0, r8
 8028ae0:	f7ff fde4 	bl	80286ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028ae4:	6823      	ldr	r3, [r4, #0]
 8028ae6:	6067      	str	r7, [r4, #4]
 8028ae8:	2200      	movs	r2, #0
 8028aea:	4620      	mov	r0, r4
 8028aec:	55da      	strb	r2, [r3, r7]
 8028aee:	b002      	add	sp, #8
 8028af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028af4:	9500      	str	r5, [sp, #0]
 8028af6:	4633      	mov	r3, r6
 8028af8:	2200      	movs	r2, #0
 8028afa:	4641      	mov	r1, r8
 8028afc:	4620      	mov	r0, r4
 8028afe:	f7ff fe96 	bl	802882e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028b02:	e7ef      	b.n	8028ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08028b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8028b04:	b570      	push	{r4, r5, r6, lr}
 8028b06:	4b06      	ldr	r3, [pc, #24]	@ (8028b20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8028b08:	4604      	mov	r4, r0
 8028b0a:	460d      	mov	r5, r1
 8028b0c:	4616      	mov	r6, r2
 8028b0e:	2100      	movs	r1, #0
 8028b10:	f7ff fdb4 	bl	802867c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028b14:	4632      	mov	r2, r6
 8028b16:	4629      	mov	r1, r5
 8028b18:	4620      	mov	r0, r4
 8028b1a:	f7ff ffcf 	bl	8028abc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8028b1e:	bd70      	pop	{r4, r5, r6, pc}
 8028b20:	0802b751 	.word	0x0802b751

08028b24 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8028b24:	6800      	ldr	r0, [r0, #0]
 8028b26:	4770      	bx	lr

08028b28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8028b28:	b538      	push	{r3, r4, r5, lr}
 8028b2a:	6845      	ldr	r5, [r0, #4]
 8028b2c:	684c      	ldr	r4, [r1, #4]
 8028b2e:	6800      	ldr	r0, [r0, #0]
 8028b30:	6809      	ldr	r1, [r1, #0]
 8028b32:	42a5      	cmp	r5, r4
 8028b34:	462a      	mov	r2, r5
 8028b36:	bf28      	it	cs
 8028b38:	4622      	movcs	r2, r4
 8028b3a:	f7ff fd4b 	bl	80285d4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8028b3e:	b900      	cbnz	r0, 8028b42 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8028b40:	1b28      	subs	r0, r5, r4
 8028b42:	bd38      	pop	{r3, r4, r5, pc}

08028b44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8028b44:	6001      	str	r1, [r0, #0]
 8028b46:	4770      	bx	lr

08028b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8028b48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028b4a:	1a53      	subs	r3, r2, r1
 8028b4c:	2b0f      	cmp	r3, #15
 8028b4e:	4604      	mov	r4, r0
 8028b50:	460d      	mov	r5, r1
 8028b52:	4616      	mov	r6, r2
 8028b54:	9301      	str	r3, [sp, #4]
 8028b56:	d906      	bls.n	8028b66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8028b58:	2200      	movs	r2, #0
 8028b5a:	a901      	add	r1, sp, #4
 8028b5c:	f7ff fd52 	bl	8028604 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028b60:	9b01      	ldr	r3, [sp, #4]
 8028b62:	6020      	str	r0, [r4, #0]
 8028b64:	60a3      	str	r3, [r4, #8]
 8028b66:	4632      	mov	r2, r6
 8028b68:	4629      	mov	r1, r5
 8028b6a:	6820      	ldr	r0, [r4, #0]
 8028b6c:	f7ff fdc7 	bl	80286fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8028b70:	9b01      	ldr	r3, [sp, #4]
 8028b72:	6822      	ldr	r2, [r4, #0]
 8028b74:	6063      	str	r3, [r4, #4]
 8028b76:	2100      	movs	r1, #0
 8028b78:	54d1      	strb	r1, [r2, r3]
 8028b7a:	b002      	add	sp, #8
 8028b7c:	bd70      	pop	{r4, r5, r6, pc}

08028b7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8028b7e:	f100 0208 	add.w	r2, r0, #8
 8028b82:	b510      	push	{r4, lr}
 8028b84:	6002      	str	r2, [r0, #0]
 8028b86:	e9d1 1200 	ldrd	r1, r2, [r1]
 8028b8a:	4604      	mov	r4, r0
 8028b8c:	f04f 0300 	mov.w	r3, #0
 8028b90:	440a      	add	r2, r1
 8028b92:	f7ff ffd9 	bl	8028b48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8028b96:	4620      	mov	r0, r4
 8028b98:	bd10      	pop	{r4, pc}
	...

08028b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8028b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ba0:	4698      	mov	r8, r3
 8028ba2:	f100 0308 	add.w	r3, r0, #8
 8028ba6:	460d      	mov	r5, r1
 8028ba8:	4617      	mov	r7, r2
 8028baa:	6003      	str	r3, [r0, #0]
 8028bac:	680e      	ldr	r6, [r1, #0]
 8028bae:	4a0b      	ldr	r2, [pc, #44]	@ (8028bdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8028bb0:	4604      	mov	r4, r0
 8028bb2:	4639      	mov	r1, r7
 8028bb4:	4628      	mov	r0, r5
 8028bb6:	f7ff fd53 	bl	8028660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028bba:	686a      	ldr	r2, [r5, #4]
 8028bbc:	1831      	adds	r1, r6, r0
 8028bbe:	1bd2      	subs	r2, r2, r7
 8028bc0:	4620      	mov	r0, r4
 8028bc2:	f04f 0300 	mov.w	r3, #0
 8028bc6:	4542      	cmp	r2, r8
 8028bc8:	bf94      	ite	ls
 8028bca:	188a      	addls	r2, r1, r2
 8028bcc:	eb01 0208 	addhi.w	r2, r1, r8
 8028bd0:	f7de ff3d 	bl	8007a4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8028bd4:	4620      	mov	r0, r4
 8028bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028bda:	bf00      	nop
 8028bdc:	0802b766 	.word	0x0802b766

08028be0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8028be0:	b570      	push	{r4, r5, r6, lr}
 8028be2:	460d      	mov	r5, r1
 8028be4:	4604      	mov	r4, r0
 8028be6:	4611      	mov	r1, r2
 8028be8:	4628      	mov	r0, r5
 8028bea:	4a06      	ldr	r2, [pc, #24]	@ (8028c04 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8028bec:	461e      	mov	r6, r3
 8028bee:	f7ff fd37 	bl	8028660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028bf2:	4633      	mov	r3, r6
 8028bf4:	4602      	mov	r2, r0
 8028bf6:	4629      	mov	r1, r5
 8028bf8:	4620      	mov	r0, r4
 8028bfa:	f7ff ffcf 	bl	8028b9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8028bfe:	4620      	mov	r0, r4
 8028c00:	bd70      	pop	{r4, r5, r6, pc}
 8028c02:	bf00      	nop
 8028c04:	0802b781 	.word	0x0802b781

08028c08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8028c08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028c0a:	2400      	movs	r4, #0
 8028c0c:	2310      	movs	r3, #16
 8028c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8028c12:	6803      	ldr	r3, [r0, #0]
 8028c14:	4615      	mov	r5, r2
 8028c16:	699e      	ldr	r6, [r3, #24]
 8028c18:	6812      	ldr	r2, [r2, #0]
 8028c1a:	466b      	mov	r3, sp
 8028c1c:	e9cd 4400 	strd	r4, r4, [sp]
 8028c20:	47b0      	blx	r6
 8028c22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8028c26:	f003 0306 	and.w	r3, r3, #6
 8028c2a:	2b06      	cmp	r3, #6
 8028c2c:	bf03      	ittte	eq
 8028c2e:	9b00      	ldreq	r3, [sp, #0]
 8028c30:	602b      	streq	r3, [r5, #0]
 8028c32:	2001      	moveq	r0, #1
 8028c34:	4620      	movne	r0, r4
 8028c36:	b004      	add	sp, #16
 8028c38:	bd70      	pop	{r4, r5, r6, pc}

08028c3a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8028c3a:	9800      	ldr	r0, [sp, #0]
 8028c3c:	4290      	cmp	r0, r2
 8028c3e:	bf0c      	ite	eq
 8028c40:	2006      	moveq	r0, #6
 8028c42:	2001      	movne	r0, #1
 8028c44:	4770      	bx	lr
	...

08028c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8028c48:	b510      	push	{r4, lr}
 8028c4a:	4b03      	ldr	r3, [pc, #12]	@ (8028c58 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8028c4c:	6003      	str	r3, [r0, #0]
 8028c4e:	4604      	mov	r4, r0
 8028c50:	f000 f8d9 	bl	8028e06 <_ZNSt9type_infoD1Ev>
 8028c54:	4620      	mov	r0, r4
 8028c56:	bd10      	pop	{r4, pc}
 8028c58:	0802b7cc 	.word	0x0802b7cc

08028c5c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8028c5c:	b510      	push	{r4, lr}
 8028c5e:	4604      	mov	r4, r0
 8028c60:	f7ff fff2 	bl	8028c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028c64:	4620      	mov	r0, r4
 8028c66:	2108      	movs	r1, #8
 8028c68:	f7ff fc6d 	bl	8028546 <_ZdlPvj>
 8028c6c:	4620      	mov	r0, r4
 8028c6e:	bd10      	pop	{r4, pc}

08028c70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8028c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c74:	461f      	mov	r7, r3
 8028c76:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8028c7a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028c7e:	4598      	cmp	r8, r3
 8028c80:	4606      	mov	r6, r0
 8028c82:	4615      	mov	r5, r2
 8028c84:	d107      	bne.n	8028c96 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028c86:	9907      	ldr	r1, [sp, #28]
 8028c88:	f000 f8c0 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028c8c:	b118      	cbz	r0, 8028c96 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028c8e:	7165      	strb	r5, [r4, #5]
 8028c90:	2000      	movs	r0, #0
 8028c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c96:	4639      	mov	r1, r7
 8028c98:	4630      	mov	r0, r6
 8028c9a:	f000 f8b7 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028c9e:	2800      	cmp	r0, #0
 8028ca0:	d0f6      	beq.n	8028c90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8028ca2:	2301      	movs	r3, #1
 8028ca4:	f8c4 8000 	str.w	r8, [r4]
 8028ca8:	7125      	strb	r5, [r4, #4]
 8028caa:	71a3      	strb	r3, [r4, #6]
 8028cac:	e7f0      	b.n	8028c90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08028cae <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8028cae:	b538      	push	{r3, r4, r5, lr}
 8028cb0:	4615      	mov	r5, r2
 8028cb2:	461c      	mov	r4, r3
 8028cb4:	f000 f8aa 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028cb8:	b120      	cbz	r0, 8028cc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8028cba:	2308      	movs	r3, #8
 8028cbc:	60e3      	str	r3, [r4, #12]
 8028cbe:	2306      	movs	r3, #6
 8028cc0:	6025      	str	r5, [r4, #0]
 8028cc2:	7123      	strb	r3, [r4, #4]
 8028cc4:	bd38      	pop	{r3, r4, r5, pc}

08028cc6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8028cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cca:	4605      	mov	r5, r0
 8028ccc:	460c      	mov	r4, r1
 8028cce:	4616      	mov	r6, r2
 8028cd0:	461f      	mov	r7, r3
 8028cd2:	f000 f89b 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028cd6:	b948      	cbnz	r0, 8028cec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028cd8:	2f03      	cmp	r7, #3
 8028cda:	d807      	bhi.n	8028cec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028cdc:	6823      	ldr	r3, [r4, #0]
 8028cde:	4632      	mov	r2, r6
 8028ce0:	4629      	mov	r1, r5
 8028ce2:	4620      	mov	r0, r4
 8028ce4:	695b      	ldr	r3, [r3, #20]
 8028ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028cea:	4718      	bx	r3
 8028cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028cf0 <_ZdlPv>:
 8028cf0:	f000 b8b2 	b.w	8028e58 <free>

08028cf4 <_ZSt15get_new_handlerv>:
 8028cf4:	4b02      	ldr	r3, [pc, #8]	@ (8028d00 <_ZSt15get_new_handlerv+0xc>)
 8028cf6:	6818      	ldr	r0, [r3, #0]
 8028cf8:	f3bf 8f5b 	dmb	ish
 8028cfc:	4770      	bx	lr
 8028cfe:	bf00      	nop
 8028d00:	24000ac0 	.word	0x24000ac0

08028d04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8028d04:	b510      	push	{r4, lr}
 8028d06:	4b03      	ldr	r3, [pc, #12]	@ (8028d14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8028d08:	6003      	str	r3, [r0, #0]
 8028d0a:	4604      	mov	r4, r0
 8028d0c:	f7ff ff9c 	bl	8028c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028d10:	4620      	mov	r0, r4
 8028d12:	bd10      	pop	{r4, pc}
 8028d14:	0802b82c 	.word	0x0802b82c

08028d18 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8028d18:	b510      	push	{r4, lr}
 8028d1a:	4604      	mov	r4, r0
 8028d1c:	f7ff fff2 	bl	8028d04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8028d20:	4620      	mov	r0, r4
 8028d22:	210c      	movs	r1, #12
 8028d24:	f7ff fc0f 	bl	8028546 <_ZdlPvj>
 8028d28:	4620      	mov	r0, r4
 8028d2a:	bd10      	pop	{r4, pc}

08028d2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8028d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028d34:	4590      	cmp	r8, r2
 8028d36:	4606      	mov	r6, r0
 8028d38:	460f      	mov	r7, r1
 8028d3a:	4615      	mov	r5, r2
 8028d3c:	461c      	mov	r4, r3
 8028d3e:	d00b      	beq.n	8028d58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8028d40:	68b0      	ldr	r0, [r6, #8]
 8028d42:	6803      	ldr	r3, [r0, #0]
 8028d44:	f8cd 8018 	str.w	r8, [sp, #24]
 8028d48:	6a1e      	ldr	r6, [r3, #32]
 8028d4a:	462a      	mov	r2, r5
 8028d4c:	4623      	mov	r3, r4
 8028d4e:	4639      	mov	r1, r7
 8028d50:	46b4      	mov	ip, r6
 8028d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d56:	4760      	bx	ip
 8028d58:	4619      	mov	r1, r3
 8028d5a:	f000 f857 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028d5e:	2800      	cmp	r0, #0
 8028d60:	d0ee      	beq.n	8028d40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8028d62:	2006      	movs	r0, #6
 8028d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028d68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8028d68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d6c:	460d      	mov	r5, r1
 8028d6e:	4619      	mov	r1, r3
 8028d70:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8028d74:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8028d78:	4681      	mov	r9, r0
 8028d7a:	4617      	mov	r7, r2
 8028d7c:	4698      	mov	r8, r3
 8028d7e:	f000 f845 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028d82:	b190      	cbz	r0, 8028daa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8028d84:	2d00      	cmp	r5, #0
 8028d86:	6034      	str	r4, [r6, #0]
 8028d88:	7137      	strb	r7, [r6, #4]
 8028d8a:	db09      	blt.n	8028da0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8028d8c:	442c      	add	r4, r5
 8028d8e:	45a2      	cmp	sl, r4
 8028d90:	bf14      	ite	ne
 8028d92:	2401      	movne	r4, #1
 8028d94:	2406      	moveq	r4, #6
 8028d96:	71b4      	strb	r4, [r6, #6]
 8028d98:	2000      	movs	r0, #0
 8028d9a:	b001      	add	sp, #4
 8028d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028da0:	3502      	adds	r5, #2
 8028da2:	d1f9      	bne.n	8028d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028da4:	2301      	movs	r3, #1
 8028da6:	71b3      	strb	r3, [r6, #6]
 8028da8:	e7f6      	b.n	8028d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028daa:	4554      	cmp	r4, sl
 8028dac:	d106      	bne.n	8028dbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028dae:	4659      	mov	r1, fp
 8028db0:	4648      	mov	r0, r9
 8028db2:	f000 f82b 	bl	8028e0c <_ZNKSt9type_info7__equalERKS_>
 8028db6:	b108      	cbz	r0, 8028dbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028db8:	7177      	strb	r7, [r6, #5]
 8028dba:	e7ed      	b.n	8028d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028dbc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8028dc0:	6803      	ldr	r3, [r0, #0]
 8028dc2:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8028dc6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8028dca:	69dc      	ldr	r4, [r3, #28]
 8028dcc:	463a      	mov	r2, r7
 8028dce:	4643      	mov	r3, r8
 8028dd0:	4629      	mov	r1, r5
 8028dd2:	46a4      	mov	ip, r4
 8028dd4:	b001      	add	sp, #4
 8028dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dda:	4760      	bx	ip

08028ddc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8028ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028de0:	4607      	mov	r7, r0
 8028de2:	460c      	mov	r4, r1
 8028de4:	4615      	mov	r5, r2
 8028de6:	461e      	mov	r6, r3
 8028de8:	f7ff ff61 	bl	8028cae <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8028dec:	b948      	cbnz	r0, 8028e02 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8028dee:	68b8      	ldr	r0, [r7, #8]
 8028df0:	6803      	ldr	r3, [r0, #0]
 8028df2:	699f      	ldr	r7, [r3, #24]
 8028df4:	462a      	mov	r2, r5
 8028df6:	4633      	mov	r3, r6
 8028df8:	4621      	mov	r1, r4
 8028dfa:	46bc      	mov	ip, r7
 8028dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e00:	4760      	bx	ip
 8028e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028e06 <_ZNSt9type_infoD1Ev>:
 8028e06:	4770      	bx	lr

08028e08 <_ZNKSt9type_info14__is_pointer_pEv>:
 8028e08:	2000      	movs	r0, #0
 8028e0a:	4770      	bx	lr

08028e0c <_ZNKSt9type_info7__equalERKS_>:
 8028e0c:	4281      	cmp	r1, r0
 8028e0e:	b508      	push	{r3, lr}
 8028e10:	d00e      	beq.n	8028e30 <_ZNKSt9type_info7__equalERKS_+0x24>
 8028e12:	6840      	ldr	r0, [r0, #4]
 8028e14:	7803      	ldrb	r3, [r0, #0]
 8028e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8028e18:	d00c      	beq.n	8028e34 <_ZNKSt9type_info7__equalERKS_+0x28>
 8028e1a:	6849      	ldr	r1, [r1, #4]
 8028e1c:	780b      	ldrb	r3, [r1, #0]
 8028e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028e20:	bf08      	it	eq
 8028e22:	3101      	addeq	r1, #1
 8028e24:	f7d7 fa5c 	bl	80002e0 <strcmp>
 8028e28:	fab0 f080 	clz	r0, r0
 8028e2c:	0940      	lsrs	r0, r0, #5
 8028e2e:	bd08      	pop	{r3, pc}
 8028e30:	2001      	movs	r0, #1
 8028e32:	e7fc      	b.n	8028e2e <_ZNKSt9type_info7__equalERKS_+0x22>
 8028e34:	2000      	movs	r0, #0
 8028e36:	e7fa      	b.n	8028e2e <_ZNKSt9type_info7__equalERKS_+0x22>

08028e38 <abort>:
 8028e38:	b508      	push	{r3, lr}
 8028e3a:	2006      	movs	r0, #6
 8028e3c:	f000 fbe8 	bl	8029610 <raise>
 8028e40:	2001      	movs	r0, #1
 8028e42:	f7e5 ffcb 	bl	800eddc <_exit>
	...

08028e48 <malloc>:
 8028e48:	4b02      	ldr	r3, [pc, #8]	@ (8028e54 <malloc+0xc>)
 8028e4a:	4601      	mov	r1, r0
 8028e4c:	6818      	ldr	r0, [r3, #0]
 8028e4e:	f000 b82d 	b.w	8028eac <_malloc_r>
 8028e52:	bf00      	nop
 8028e54:	24000038 	.word	0x24000038

08028e58 <free>:
 8028e58:	4b02      	ldr	r3, [pc, #8]	@ (8028e64 <free+0xc>)
 8028e5a:	4601      	mov	r1, r0
 8028e5c:	6818      	ldr	r0, [r3, #0]
 8028e5e:	f000 bc85 	b.w	802976c <_free_r>
 8028e62:	bf00      	nop
 8028e64:	24000038 	.word	0x24000038

08028e68 <sbrk_aligned>:
 8028e68:	b570      	push	{r4, r5, r6, lr}
 8028e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8028ea8 <sbrk_aligned+0x40>)
 8028e6c:	460c      	mov	r4, r1
 8028e6e:	6831      	ldr	r1, [r6, #0]
 8028e70:	4605      	mov	r5, r0
 8028e72:	b911      	cbnz	r1, 8028e7a <sbrk_aligned+0x12>
 8028e74:	f000 fc1c 	bl	80296b0 <_sbrk_r>
 8028e78:	6030      	str	r0, [r6, #0]
 8028e7a:	4621      	mov	r1, r4
 8028e7c:	4628      	mov	r0, r5
 8028e7e:	f000 fc17 	bl	80296b0 <_sbrk_r>
 8028e82:	1c43      	adds	r3, r0, #1
 8028e84:	d103      	bne.n	8028e8e <sbrk_aligned+0x26>
 8028e86:	f04f 34ff 	mov.w	r4, #4294967295
 8028e8a:	4620      	mov	r0, r4
 8028e8c:	bd70      	pop	{r4, r5, r6, pc}
 8028e8e:	1cc4      	adds	r4, r0, #3
 8028e90:	f024 0403 	bic.w	r4, r4, #3
 8028e94:	42a0      	cmp	r0, r4
 8028e96:	d0f8      	beq.n	8028e8a <sbrk_aligned+0x22>
 8028e98:	1a21      	subs	r1, r4, r0
 8028e9a:	4628      	mov	r0, r5
 8028e9c:	f000 fc08 	bl	80296b0 <_sbrk_r>
 8028ea0:	3001      	adds	r0, #1
 8028ea2:	d1f2      	bne.n	8028e8a <sbrk_aligned+0x22>
 8028ea4:	e7ef      	b.n	8028e86 <sbrk_aligned+0x1e>
 8028ea6:	bf00      	nop
 8028ea8:	24000ac4 	.word	0x24000ac4

08028eac <_malloc_r>:
 8028eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028eb0:	1ccd      	adds	r5, r1, #3
 8028eb2:	f025 0503 	bic.w	r5, r5, #3
 8028eb6:	3508      	adds	r5, #8
 8028eb8:	2d0c      	cmp	r5, #12
 8028eba:	bf38      	it	cc
 8028ebc:	250c      	movcc	r5, #12
 8028ebe:	2d00      	cmp	r5, #0
 8028ec0:	4606      	mov	r6, r0
 8028ec2:	db01      	blt.n	8028ec8 <_malloc_r+0x1c>
 8028ec4:	42a9      	cmp	r1, r5
 8028ec6:	d904      	bls.n	8028ed2 <_malloc_r+0x26>
 8028ec8:	230c      	movs	r3, #12
 8028eca:	6033      	str	r3, [r6, #0]
 8028ecc:	2000      	movs	r0, #0
 8028ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028fa8 <_malloc_r+0xfc>
 8028ed6:	f000 f869 	bl	8028fac <__malloc_lock>
 8028eda:	f8d8 3000 	ldr.w	r3, [r8]
 8028ede:	461c      	mov	r4, r3
 8028ee0:	bb44      	cbnz	r4, 8028f34 <_malloc_r+0x88>
 8028ee2:	4629      	mov	r1, r5
 8028ee4:	4630      	mov	r0, r6
 8028ee6:	f7ff ffbf 	bl	8028e68 <sbrk_aligned>
 8028eea:	1c43      	adds	r3, r0, #1
 8028eec:	4604      	mov	r4, r0
 8028eee:	d158      	bne.n	8028fa2 <_malloc_r+0xf6>
 8028ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8028ef4:	4627      	mov	r7, r4
 8028ef6:	2f00      	cmp	r7, #0
 8028ef8:	d143      	bne.n	8028f82 <_malloc_r+0xd6>
 8028efa:	2c00      	cmp	r4, #0
 8028efc:	d04b      	beq.n	8028f96 <_malloc_r+0xea>
 8028efe:	6823      	ldr	r3, [r4, #0]
 8028f00:	4639      	mov	r1, r7
 8028f02:	4630      	mov	r0, r6
 8028f04:	eb04 0903 	add.w	r9, r4, r3
 8028f08:	f000 fbd2 	bl	80296b0 <_sbrk_r>
 8028f0c:	4581      	cmp	r9, r0
 8028f0e:	d142      	bne.n	8028f96 <_malloc_r+0xea>
 8028f10:	6821      	ldr	r1, [r4, #0]
 8028f12:	1a6d      	subs	r5, r5, r1
 8028f14:	4629      	mov	r1, r5
 8028f16:	4630      	mov	r0, r6
 8028f18:	f7ff ffa6 	bl	8028e68 <sbrk_aligned>
 8028f1c:	3001      	adds	r0, #1
 8028f1e:	d03a      	beq.n	8028f96 <_malloc_r+0xea>
 8028f20:	6823      	ldr	r3, [r4, #0]
 8028f22:	442b      	add	r3, r5
 8028f24:	6023      	str	r3, [r4, #0]
 8028f26:	f8d8 3000 	ldr.w	r3, [r8]
 8028f2a:	685a      	ldr	r2, [r3, #4]
 8028f2c:	bb62      	cbnz	r2, 8028f88 <_malloc_r+0xdc>
 8028f2e:	f8c8 7000 	str.w	r7, [r8]
 8028f32:	e00f      	b.n	8028f54 <_malloc_r+0xa8>
 8028f34:	6822      	ldr	r2, [r4, #0]
 8028f36:	1b52      	subs	r2, r2, r5
 8028f38:	d420      	bmi.n	8028f7c <_malloc_r+0xd0>
 8028f3a:	2a0b      	cmp	r2, #11
 8028f3c:	d917      	bls.n	8028f6e <_malloc_r+0xc2>
 8028f3e:	1961      	adds	r1, r4, r5
 8028f40:	42a3      	cmp	r3, r4
 8028f42:	6025      	str	r5, [r4, #0]
 8028f44:	bf18      	it	ne
 8028f46:	6059      	strne	r1, [r3, #4]
 8028f48:	6863      	ldr	r3, [r4, #4]
 8028f4a:	bf08      	it	eq
 8028f4c:	f8c8 1000 	streq.w	r1, [r8]
 8028f50:	5162      	str	r2, [r4, r5]
 8028f52:	604b      	str	r3, [r1, #4]
 8028f54:	4630      	mov	r0, r6
 8028f56:	f000 f82f 	bl	8028fb8 <__malloc_unlock>
 8028f5a:	f104 000b 	add.w	r0, r4, #11
 8028f5e:	1d23      	adds	r3, r4, #4
 8028f60:	f020 0007 	bic.w	r0, r0, #7
 8028f64:	1ac2      	subs	r2, r0, r3
 8028f66:	bf1c      	itt	ne
 8028f68:	1a1b      	subne	r3, r3, r0
 8028f6a:	50a3      	strne	r3, [r4, r2]
 8028f6c:	e7af      	b.n	8028ece <_malloc_r+0x22>
 8028f6e:	6862      	ldr	r2, [r4, #4]
 8028f70:	42a3      	cmp	r3, r4
 8028f72:	bf0c      	ite	eq
 8028f74:	f8c8 2000 	streq.w	r2, [r8]
 8028f78:	605a      	strne	r2, [r3, #4]
 8028f7a:	e7eb      	b.n	8028f54 <_malloc_r+0xa8>
 8028f7c:	4623      	mov	r3, r4
 8028f7e:	6864      	ldr	r4, [r4, #4]
 8028f80:	e7ae      	b.n	8028ee0 <_malloc_r+0x34>
 8028f82:	463c      	mov	r4, r7
 8028f84:	687f      	ldr	r7, [r7, #4]
 8028f86:	e7b6      	b.n	8028ef6 <_malloc_r+0x4a>
 8028f88:	461a      	mov	r2, r3
 8028f8a:	685b      	ldr	r3, [r3, #4]
 8028f8c:	42a3      	cmp	r3, r4
 8028f8e:	d1fb      	bne.n	8028f88 <_malloc_r+0xdc>
 8028f90:	2300      	movs	r3, #0
 8028f92:	6053      	str	r3, [r2, #4]
 8028f94:	e7de      	b.n	8028f54 <_malloc_r+0xa8>
 8028f96:	230c      	movs	r3, #12
 8028f98:	6033      	str	r3, [r6, #0]
 8028f9a:	4630      	mov	r0, r6
 8028f9c:	f000 f80c 	bl	8028fb8 <__malloc_unlock>
 8028fa0:	e794      	b.n	8028ecc <_malloc_r+0x20>
 8028fa2:	6005      	str	r5, [r0, #0]
 8028fa4:	e7d6      	b.n	8028f54 <_malloc_r+0xa8>
 8028fa6:	bf00      	nop
 8028fa8:	24000ac8 	.word	0x24000ac8

08028fac <__malloc_lock>:
 8028fac:	4801      	ldr	r0, [pc, #4]	@ (8028fb4 <__malloc_lock+0x8>)
 8028fae:	f000 bbcc 	b.w	802974a <__retarget_lock_acquire_recursive>
 8028fb2:	bf00      	nop
 8028fb4:	24000c0c 	.word	0x24000c0c

08028fb8 <__malloc_unlock>:
 8028fb8:	4801      	ldr	r0, [pc, #4]	@ (8028fc0 <__malloc_unlock+0x8>)
 8028fba:	f000 bbc7 	b.w	802974c <__retarget_lock_release_recursive>
 8028fbe:	bf00      	nop
 8028fc0:	24000c0c 	.word	0x24000c0c

08028fc4 <realloc>:
 8028fc4:	4b02      	ldr	r3, [pc, #8]	@ (8028fd0 <realloc+0xc>)
 8028fc6:	460a      	mov	r2, r1
 8028fc8:	4601      	mov	r1, r0
 8028fca:	6818      	ldr	r0, [r3, #0]
 8028fcc:	f000 b802 	b.w	8028fd4 <_realloc_r>
 8028fd0:	24000038 	.word	0x24000038

08028fd4 <_realloc_r>:
 8028fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fd8:	4680      	mov	r8, r0
 8028fda:	4615      	mov	r5, r2
 8028fdc:	460c      	mov	r4, r1
 8028fde:	b921      	cbnz	r1, 8028fea <_realloc_r+0x16>
 8028fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028fe4:	4611      	mov	r1, r2
 8028fe6:	f7ff bf61 	b.w	8028eac <_malloc_r>
 8028fea:	b92a      	cbnz	r2, 8028ff8 <_realloc_r+0x24>
 8028fec:	f000 fbbe 	bl	802976c <_free_r>
 8028ff0:	2400      	movs	r4, #0
 8028ff2:	4620      	mov	r0, r4
 8028ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ff8:	f000 fc02 	bl	8029800 <_malloc_usable_size_r>
 8028ffc:	4285      	cmp	r5, r0
 8028ffe:	4606      	mov	r6, r0
 8029000:	d802      	bhi.n	8029008 <_realloc_r+0x34>
 8029002:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8029006:	d8f4      	bhi.n	8028ff2 <_realloc_r+0x1e>
 8029008:	4629      	mov	r1, r5
 802900a:	4640      	mov	r0, r8
 802900c:	f7ff ff4e 	bl	8028eac <_malloc_r>
 8029010:	4607      	mov	r7, r0
 8029012:	2800      	cmp	r0, #0
 8029014:	d0ec      	beq.n	8028ff0 <_realloc_r+0x1c>
 8029016:	42b5      	cmp	r5, r6
 8029018:	462a      	mov	r2, r5
 802901a:	4621      	mov	r1, r4
 802901c:	bf28      	it	cs
 802901e:	4632      	movcs	r2, r6
 8029020:	f000 fb95 	bl	802974e <memcpy>
 8029024:	4621      	mov	r1, r4
 8029026:	4640      	mov	r0, r8
 8029028:	f000 fba0 	bl	802976c <_free_r>
 802902c:	463c      	mov	r4, r7
 802902e:	e7e0      	b.n	8028ff2 <_realloc_r+0x1e>

08029030 <_strtol_l.constprop.0>:
 8029030:	2b24      	cmp	r3, #36	@ 0x24
 8029032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029036:	4686      	mov	lr, r0
 8029038:	4690      	mov	r8, r2
 802903a:	d801      	bhi.n	8029040 <_strtol_l.constprop.0+0x10>
 802903c:	2b01      	cmp	r3, #1
 802903e:	d106      	bne.n	802904e <_strtol_l.constprop.0+0x1e>
 8029040:	f000 fb58 	bl	80296f4 <__errno>
 8029044:	2316      	movs	r3, #22
 8029046:	6003      	str	r3, [r0, #0]
 8029048:	2000      	movs	r0, #0
 802904a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802904e:	4834      	ldr	r0, [pc, #208]	@ (8029120 <_strtol_l.constprop.0+0xf0>)
 8029050:	460d      	mov	r5, r1
 8029052:	462a      	mov	r2, r5
 8029054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029058:	5d06      	ldrb	r6, [r0, r4]
 802905a:	f016 0608 	ands.w	r6, r6, #8
 802905e:	d1f8      	bne.n	8029052 <_strtol_l.constprop.0+0x22>
 8029060:	2c2d      	cmp	r4, #45	@ 0x2d
 8029062:	d12d      	bne.n	80290c0 <_strtol_l.constprop.0+0x90>
 8029064:	782c      	ldrb	r4, [r5, #0]
 8029066:	2601      	movs	r6, #1
 8029068:	1c95      	adds	r5, r2, #2
 802906a:	f033 0210 	bics.w	r2, r3, #16
 802906e:	d109      	bne.n	8029084 <_strtol_l.constprop.0+0x54>
 8029070:	2c30      	cmp	r4, #48	@ 0x30
 8029072:	d12a      	bne.n	80290ca <_strtol_l.constprop.0+0x9a>
 8029074:	782a      	ldrb	r2, [r5, #0]
 8029076:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802907a:	2a58      	cmp	r2, #88	@ 0x58
 802907c:	d125      	bne.n	80290ca <_strtol_l.constprop.0+0x9a>
 802907e:	786c      	ldrb	r4, [r5, #1]
 8029080:	2310      	movs	r3, #16
 8029082:	3502      	adds	r5, #2
 8029084:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8029088:	f10c 3cff 	add.w	ip, ip, #4294967295
 802908c:	2200      	movs	r2, #0
 802908e:	fbbc f9f3 	udiv	r9, ip, r3
 8029092:	4610      	mov	r0, r2
 8029094:	fb03 ca19 	mls	sl, r3, r9, ip
 8029098:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802909c:	2f09      	cmp	r7, #9
 802909e:	d81b      	bhi.n	80290d8 <_strtol_l.constprop.0+0xa8>
 80290a0:	463c      	mov	r4, r7
 80290a2:	42a3      	cmp	r3, r4
 80290a4:	dd27      	ble.n	80290f6 <_strtol_l.constprop.0+0xc6>
 80290a6:	1c57      	adds	r7, r2, #1
 80290a8:	d007      	beq.n	80290ba <_strtol_l.constprop.0+0x8a>
 80290aa:	4581      	cmp	r9, r0
 80290ac:	d320      	bcc.n	80290f0 <_strtol_l.constprop.0+0xc0>
 80290ae:	d101      	bne.n	80290b4 <_strtol_l.constprop.0+0x84>
 80290b0:	45a2      	cmp	sl, r4
 80290b2:	db1d      	blt.n	80290f0 <_strtol_l.constprop.0+0xc0>
 80290b4:	fb00 4003 	mla	r0, r0, r3, r4
 80290b8:	2201      	movs	r2, #1
 80290ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80290be:	e7eb      	b.n	8029098 <_strtol_l.constprop.0+0x68>
 80290c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80290c2:	bf04      	itt	eq
 80290c4:	782c      	ldrbeq	r4, [r5, #0]
 80290c6:	1c95      	addeq	r5, r2, #2
 80290c8:	e7cf      	b.n	802906a <_strtol_l.constprop.0+0x3a>
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d1da      	bne.n	8029084 <_strtol_l.constprop.0+0x54>
 80290ce:	2c30      	cmp	r4, #48	@ 0x30
 80290d0:	bf0c      	ite	eq
 80290d2:	2308      	moveq	r3, #8
 80290d4:	230a      	movne	r3, #10
 80290d6:	e7d5      	b.n	8029084 <_strtol_l.constprop.0+0x54>
 80290d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80290dc:	2f19      	cmp	r7, #25
 80290de:	d801      	bhi.n	80290e4 <_strtol_l.constprop.0+0xb4>
 80290e0:	3c37      	subs	r4, #55	@ 0x37
 80290e2:	e7de      	b.n	80290a2 <_strtol_l.constprop.0+0x72>
 80290e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80290e8:	2f19      	cmp	r7, #25
 80290ea:	d804      	bhi.n	80290f6 <_strtol_l.constprop.0+0xc6>
 80290ec:	3c57      	subs	r4, #87	@ 0x57
 80290ee:	e7d8      	b.n	80290a2 <_strtol_l.constprop.0+0x72>
 80290f0:	f04f 32ff 	mov.w	r2, #4294967295
 80290f4:	e7e1      	b.n	80290ba <_strtol_l.constprop.0+0x8a>
 80290f6:	1c53      	adds	r3, r2, #1
 80290f8:	d108      	bne.n	802910c <_strtol_l.constprop.0+0xdc>
 80290fa:	2322      	movs	r3, #34	@ 0x22
 80290fc:	f8ce 3000 	str.w	r3, [lr]
 8029100:	4660      	mov	r0, ip
 8029102:	f1b8 0f00 	cmp.w	r8, #0
 8029106:	d0a0      	beq.n	802904a <_strtol_l.constprop.0+0x1a>
 8029108:	1e69      	subs	r1, r5, #1
 802910a:	e006      	b.n	802911a <_strtol_l.constprop.0+0xea>
 802910c:	b106      	cbz	r6, 8029110 <_strtol_l.constprop.0+0xe0>
 802910e:	4240      	negs	r0, r0
 8029110:	f1b8 0f00 	cmp.w	r8, #0
 8029114:	d099      	beq.n	802904a <_strtol_l.constprop.0+0x1a>
 8029116:	2a00      	cmp	r2, #0
 8029118:	d1f6      	bne.n	8029108 <_strtol_l.constprop.0+0xd8>
 802911a:	f8c8 1000 	str.w	r1, [r8]
 802911e:	e794      	b.n	802904a <_strtol_l.constprop.0+0x1a>
 8029120:	0802b869 	.word	0x0802b869

08029124 <strtol>:
 8029124:	4613      	mov	r3, r2
 8029126:	460a      	mov	r2, r1
 8029128:	4601      	mov	r1, r0
 802912a:	4802      	ldr	r0, [pc, #8]	@ (8029134 <strtol+0x10>)
 802912c:	6800      	ldr	r0, [r0, #0]
 802912e:	f7ff bf7f 	b.w	8029030 <_strtol_l.constprop.0>
 8029132:	bf00      	nop
 8029134:	24000038 	.word	0x24000038

08029138 <std>:
 8029138:	2300      	movs	r3, #0
 802913a:	b510      	push	{r4, lr}
 802913c:	4604      	mov	r4, r0
 802913e:	e9c0 3300 	strd	r3, r3, [r0]
 8029142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029146:	6083      	str	r3, [r0, #8]
 8029148:	8181      	strh	r1, [r0, #12]
 802914a:	6643      	str	r3, [r0, #100]	@ 0x64
 802914c:	81c2      	strh	r2, [r0, #14]
 802914e:	6183      	str	r3, [r0, #24]
 8029150:	4619      	mov	r1, r3
 8029152:	2208      	movs	r2, #8
 8029154:	305c      	adds	r0, #92	@ 0x5c
 8029156:	f000 fa2b 	bl	80295b0 <memset>
 802915a:	4b0d      	ldr	r3, [pc, #52]	@ (8029190 <std+0x58>)
 802915c:	6263      	str	r3, [r4, #36]	@ 0x24
 802915e:	4b0d      	ldr	r3, [pc, #52]	@ (8029194 <std+0x5c>)
 8029160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029162:	4b0d      	ldr	r3, [pc, #52]	@ (8029198 <std+0x60>)
 8029164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8029166:	4b0d      	ldr	r3, [pc, #52]	@ (802919c <std+0x64>)
 8029168:	6323      	str	r3, [r4, #48]	@ 0x30
 802916a:	4b0d      	ldr	r3, [pc, #52]	@ (80291a0 <std+0x68>)
 802916c:	6224      	str	r4, [r4, #32]
 802916e:	429c      	cmp	r4, r3
 8029170:	d006      	beq.n	8029180 <std+0x48>
 8029172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8029176:	4294      	cmp	r4, r2
 8029178:	d002      	beq.n	8029180 <std+0x48>
 802917a:	33d0      	adds	r3, #208	@ 0xd0
 802917c:	429c      	cmp	r4, r3
 802917e:	d105      	bne.n	802918c <std+0x54>
 8029180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029188:	f000 bade 	b.w	8029748 <__retarget_lock_init_recursive>
 802918c:	bd10      	pop	{r4, pc}
 802918e:	bf00      	nop
 8029190:	080293ad 	.word	0x080293ad
 8029194:	080293cf 	.word	0x080293cf
 8029198:	08029407 	.word	0x08029407
 802919c:	0802942b 	.word	0x0802942b
 80291a0:	24000acc 	.word	0x24000acc

080291a4 <stdio_exit_handler>:
 80291a4:	4a02      	ldr	r2, [pc, #8]	@ (80291b0 <stdio_exit_handler+0xc>)
 80291a6:	4903      	ldr	r1, [pc, #12]	@ (80291b4 <stdio_exit_handler+0x10>)
 80291a8:	4803      	ldr	r0, [pc, #12]	@ (80291b8 <stdio_exit_handler+0x14>)
 80291aa:	f000 b869 	b.w	8029280 <_fwalk_sglue>
 80291ae:	bf00      	nop
 80291b0:	2400002c 	.word	0x2400002c
 80291b4:	08029eb9 	.word	0x08029eb9
 80291b8:	2400003c 	.word	0x2400003c

080291bc <cleanup_stdio>:
 80291bc:	6841      	ldr	r1, [r0, #4]
 80291be:	4b0c      	ldr	r3, [pc, #48]	@ (80291f0 <cleanup_stdio+0x34>)
 80291c0:	4299      	cmp	r1, r3
 80291c2:	b510      	push	{r4, lr}
 80291c4:	4604      	mov	r4, r0
 80291c6:	d001      	beq.n	80291cc <cleanup_stdio+0x10>
 80291c8:	f000 fe76 	bl	8029eb8 <_fflush_r>
 80291cc:	68a1      	ldr	r1, [r4, #8]
 80291ce:	4b09      	ldr	r3, [pc, #36]	@ (80291f4 <cleanup_stdio+0x38>)
 80291d0:	4299      	cmp	r1, r3
 80291d2:	d002      	beq.n	80291da <cleanup_stdio+0x1e>
 80291d4:	4620      	mov	r0, r4
 80291d6:	f000 fe6f 	bl	8029eb8 <_fflush_r>
 80291da:	68e1      	ldr	r1, [r4, #12]
 80291dc:	4b06      	ldr	r3, [pc, #24]	@ (80291f8 <cleanup_stdio+0x3c>)
 80291de:	4299      	cmp	r1, r3
 80291e0:	d004      	beq.n	80291ec <cleanup_stdio+0x30>
 80291e2:	4620      	mov	r0, r4
 80291e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291e8:	f000 be66 	b.w	8029eb8 <_fflush_r>
 80291ec:	bd10      	pop	{r4, pc}
 80291ee:	bf00      	nop
 80291f0:	24000acc 	.word	0x24000acc
 80291f4:	24000b34 	.word	0x24000b34
 80291f8:	24000b9c 	.word	0x24000b9c

080291fc <global_stdio_init.part.0>:
 80291fc:	b510      	push	{r4, lr}
 80291fe:	4b0b      	ldr	r3, [pc, #44]	@ (802922c <global_stdio_init.part.0+0x30>)
 8029200:	4c0b      	ldr	r4, [pc, #44]	@ (8029230 <global_stdio_init.part.0+0x34>)
 8029202:	4a0c      	ldr	r2, [pc, #48]	@ (8029234 <global_stdio_init.part.0+0x38>)
 8029204:	601a      	str	r2, [r3, #0]
 8029206:	4620      	mov	r0, r4
 8029208:	2200      	movs	r2, #0
 802920a:	2104      	movs	r1, #4
 802920c:	f7ff ff94 	bl	8029138 <std>
 8029210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029214:	2201      	movs	r2, #1
 8029216:	2109      	movs	r1, #9
 8029218:	f7ff ff8e 	bl	8029138 <std>
 802921c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029220:	2202      	movs	r2, #2
 8029222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029226:	2112      	movs	r1, #18
 8029228:	f7ff bf86 	b.w	8029138 <std>
 802922c:	24000c04 	.word	0x24000c04
 8029230:	24000acc 	.word	0x24000acc
 8029234:	080291a5 	.word	0x080291a5

08029238 <__sfp_lock_acquire>:
 8029238:	4801      	ldr	r0, [pc, #4]	@ (8029240 <__sfp_lock_acquire+0x8>)
 802923a:	f000 ba86 	b.w	802974a <__retarget_lock_acquire_recursive>
 802923e:	bf00      	nop
 8029240:	24000c0d 	.word	0x24000c0d

08029244 <__sfp_lock_release>:
 8029244:	4801      	ldr	r0, [pc, #4]	@ (802924c <__sfp_lock_release+0x8>)
 8029246:	f000 ba81 	b.w	802974c <__retarget_lock_release_recursive>
 802924a:	bf00      	nop
 802924c:	24000c0d 	.word	0x24000c0d

08029250 <__sinit>:
 8029250:	b510      	push	{r4, lr}
 8029252:	4604      	mov	r4, r0
 8029254:	f7ff fff0 	bl	8029238 <__sfp_lock_acquire>
 8029258:	6a23      	ldr	r3, [r4, #32]
 802925a:	b11b      	cbz	r3, 8029264 <__sinit+0x14>
 802925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029260:	f7ff bff0 	b.w	8029244 <__sfp_lock_release>
 8029264:	4b04      	ldr	r3, [pc, #16]	@ (8029278 <__sinit+0x28>)
 8029266:	6223      	str	r3, [r4, #32]
 8029268:	4b04      	ldr	r3, [pc, #16]	@ (802927c <__sinit+0x2c>)
 802926a:	681b      	ldr	r3, [r3, #0]
 802926c:	2b00      	cmp	r3, #0
 802926e:	d1f5      	bne.n	802925c <__sinit+0xc>
 8029270:	f7ff ffc4 	bl	80291fc <global_stdio_init.part.0>
 8029274:	e7f2      	b.n	802925c <__sinit+0xc>
 8029276:	bf00      	nop
 8029278:	080291bd 	.word	0x080291bd
 802927c:	24000c04 	.word	0x24000c04

08029280 <_fwalk_sglue>:
 8029280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029284:	4607      	mov	r7, r0
 8029286:	4688      	mov	r8, r1
 8029288:	4614      	mov	r4, r2
 802928a:	2600      	movs	r6, #0
 802928c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029290:	f1b9 0901 	subs.w	r9, r9, #1
 8029294:	d505      	bpl.n	80292a2 <_fwalk_sglue+0x22>
 8029296:	6824      	ldr	r4, [r4, #0]
 8029298:	2c00      	cmp	r4, #0
 802929a:	d1f7      	bne.n	802928c <_fwalk_sglue+0xc>
 802929c:	4630      	mov	r0, r6
 802929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80292a2:	89ab      	ldrh	r3, [r5, #12]
 80292a4:	2b01      	cmp	r3, #1
 80292a6:	d907      	bls.n	80292b8 <_fwalk_sglue+0x38>
 80292a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80292ac:	3301      	adds	r3, #1
 80292ae:	d003      	beq.n	80292b8 <_fwalk_sglue+0x38>
 80292b0:	4629      	mov	r1, r5
 80292b2:	4638      	mov	r0, r7
 80292b4:	47c0      	blx	r8
 80292b6:	4306      	orrs	r6, r0
 80292b8:	3568      	adds	r5, #104	@ 0x68
 80292ba:	e7e9      	b.n	8029290 <_fwalk_sglue+0x10>

080292bc <iprintf>:
 80292bc:	b40f      	push	{r0, r1, r2, r3}
 80292be:	b507      	push	{r0, r1, r2, lr}
 80292c0:	4906      	ldr	r1, [pc, #24]	@ (80292dc <iprintf+0x20>)
 80292c2:	ab04      	add	r3, sp, #16
 80292c4:	6808      	ldr	r0, [r1, #0]
 80292c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80292ca:	6881      	ldr	r1, [r0, #8]
 80292cc:	9301      	str	r3, [sp, #4]
 80292ce:	f000 fac9 	bl	8029864 <_vfiprintf_r>
 80292d2:	b003      	add	sp, #12
 80292d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80292d8:	b004      	add	sp, #16
 80292da:	4770      	bx	lr
 80292dc:	24000038 	.word	0x24000038

080292e0 <putchar>:
 80292e0:	4b02      	ldr	r3, [pc, #8]	@ (80292ec <putchar+0xc>)
 80292e2:	4601      	mov	r1, r0
 80292e4:	6818      	ldr	r0, [r3, #0]
 80292e6:	6882      	ldr	r2, [r0, #8]
 80292e8:	f000 be70 	b.w	8029fcc <_putc_r>
 80292ec:	24000038 	.word	0x24000038

080292f0 <_puts_r>:
 80292f0:	6a03      	ldr	r3, [r0, #32]
 80292f2:	b570      	push	{r4, r5, r6, lr}
 80292f4:	6884      	ldr	r4, [r0, #8]
 80292f6:	4605      	mov	r5, r0
 80292f8:	460e      	mov	r6, r1
 80292fa:	b90b      	cbnz	r3, 8029300 <_puts_r+0x10>
 80292fc:	f7ff ffa8 	bl	8029250 <__sinit>
 8029300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029302:	07db      	lsls	r3, r3, #31
 8029304:	d405      	bmi.n	8029312 <_puts_r+0x22>
 8029306:	89a3      	ldrh	r3, [r4, #12]
 8029308:	0598      	lsls	r0, r3, #22
 802930a:	d402      	bmi.n	8029312 <_puts_r+0x22>
 802930c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802930e:	f000 fa1c 	bl	802974a <__retarget_lock_acquire_recursive>
 8029312:	89a3      	ldrh	r3, [r4, #12]
 8029314:	0719      	lsls	r1, r3, #28
 8029316:	d502      	bpl.n	802931e <_puts_r+0x2e>
 8029318:	6923      	ldr	r3, [r4, #16]
 802931a:	2b00      	cmp	r3, #0
 802931c:	d135      	bne.n	802938a <_puts_r+0x9a>
 802931e:	4621      	mov	r1, r4
 8029320:	4628      	mov	r0, r5
 8029322:	f000 f8c5 	bl	80294b0 <__swsetup_r>
 8029326:	b380      	cbz	r0, 802938a <_puts_r+0x9a>
 8029328:	f04f 35ff 	mov.w	r5, #4294967295
 802932c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802932e:	07da      	lsls	r2, r3, #31
 8029330:	d405      	bmi.n	802933e <_puts_r+0x4e>
 8029332:	89a3      	ldrh	r3, [r4, #12]
 8029334:	059b      	lsls	r3, r3, #22
 8029336:	d402      	bmi.n	802933e <_puts_r+0x4e>
 8029338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802933a:	f000 fa07 	bl	802974c <__retarget_lock_release_recursive>
 802933e:	4628      	mov	r0, r5
 8029340:	bd70      	pop	{r4, r5, r6, pc}
 8029342:	2b00      	cmp	r3, #0
 8029344:	da04      	bge.n	8029350 <_puts_r+0x60>
 8029346:	69a2      	ldr	r2, [r4, #24]
 8029348:	429a      	cmp	r2, r3
 802934a:	dc17      	bgt.n	802937c <_puts_r+0x8c>
 802934c:	290a      	cmp	r1, #10
 802934e:	d015      	beq.n	802937c <_puts_r+0x8c>
 8029350:	6823      	ldr	r3, [r4, #0]
 8029352:	1c5a      	adds	r2, r3, #1
 8029354:	6022      	str	r2, [r4, #0]
 8029356:	7019      	strb	r1, [r3, #0]
 8029358:	68a3      	ldr	r3, [r4, #8]
 802935a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802935e:	3b01      	subs	r3, #1
 8029360:	60a3      	str	r3, [r4, #8]
 8029362:	2900      	cmp	r1, #0
 8029364:	d1ed      	bne.n	8029342 <_puts_r+0x52>
 8029366:	2b00      	cmp	r3, #0
 8029368:	da11      	bge.n	802938e <_puts_r+0x9e>
 802936a:	4622      	mov	r2, r4
 802936c:	210a      	movs	r1, #10
 802936e:	4628      	mov	r0, r5
 8029370:	f000 f85f 	bl	8029432 <__swbuf_r>
 8029374:	3001      	adds	r0, #1
 8029376:	d0d7      	beq.n	8029328 <_puts_r+0x38>
 8029378:	250a      	movs	r5, #10
 802937a:	e7d7      	b.n	802932c <_puts_r+0x3c>
 802937c:	4622      	mov	r2, r4
 802937e:	4628      	mov	r0, r5
 8029380:	f000 f857 	bl	8029432 <__swbuf_r>
 8029384:	3001      	adds	r0, #1
 8029386:	d1e7      	bne.n	8029358 <_puts_r+0x68>
 8029388:	e7ce      	b.n	8029328 <_puts_r+0x38>
 802938a:	3e01      	subs	r6, #1
 802938c:	e7e4      	b.n	8029358 <_puts_r+0x68>
 802938e:	6823      	ldr	r3, [r4, #0]
 8029390:	1c5a      	adds	r2, r3, #1
 8029392:	6022      	str	r2, [r4, #0]
 8029394:	220a      	movs	r2, #10
 8029396:	701a      	strb	r2, [r3, #0]
 8029398:	e7ee      	b.n	8029378 <_puts_r+0x88>
	...

0802939c <puts>:
 802939c:	4b02      	ldr	r3, [pc, #8]	@ (80293a8 <puts+0xc>)
 802939e:	4601      	mov	r1, r0
 80293a0:	6818      	ldr	r0, [r3, #0]
 80293a2:	f7ff bfa5 	b.w	80292f0 <_puts_r>
 80293a6:	bf00      	nop
 80293a8:	24000038 	.word	0x24000038

080293ac <__sread>:
 80293ac:	b510      	push	{r4, lr}
 80293ae:	460c      	mov	r4, r1
 80293b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293b4:	f000 f956 	bl	8029664 <_read_r>
 80293b8:	2800      	cmp	r0, #0
 80293ba:	bfab      	itete	ge
 80293bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80293be:	89a3      	ldrhlt	r3, [r4, #12]
 80293c0:	181b      	addge	r3, r3, r0
 80293c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80293c6:	bfac      	ite	ge
 80293c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80293ca:	81a3      	strhlt	r3, [r4, #12]
 80293cc:	bd10      	pop	{r4, pc}

080293ce <__swrite>:
 80293ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293d2:	461f      	mov	r7, r3
 80293d4:	898b      	ldrh	r3, [r1, #12]
 80293d6:	05db      	lsls	r3, r3, #23
 80293d8:	4605      	mov	r5, r0
 80293da:	460c      	mov	r4, r1
 80293dc:	4616      	mov	r6, r2
 80293de:	d505      	bpl.n	80293ec <__swrite+0x1e>
 80293e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293e4:	2302      	movs	r3, #2
 80293e6:	2200      	movs	r2, #0
 80293e8:	f000 f92a 	bl	8029640 <_lseek_r>
 80293ec:	89a3      	ldrh	r3, [r4, #12]
 80293ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80293f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80293f6:	81a3      	strh	r3, [r4, #12]
 80293f8:	4632      	mov	r2, r6
 80293fa:	463b      	mov	r3, r7
 80293fc:	4628      	mov	r0, r5
 80293fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029402:	f000 b965 	b.w	80296d0 <_write_r>

08029406 <__sseek>:
 8029406:	b510      	push	{r4, lr}
 8029408:	460c      	mov	r4, r1
 802940a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802940e:	f000 f917 	bl	8029640 <_lseek_r>
 8029412:	1c43      	adds	r3, r0, #1
 8029414:	89a3      	ldrh	r3, [r4, #12]
 8029416:	bf15      	itete	ne
 8029418:	6560      	strne	r0, [r4, #84]	@ 0x54
 802941a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802941e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029422:	81a3      	strheq	r3, [r4, #12]
 8029424:	bf18      	it	ne
 8029426:	81a3      	strhne	r3, [r4, #12]
 8029428:	bd10      	pop	{r4, pc}

0802942a <__sclose>:
 802942a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802942e:	f000 b8f7 	b.w	8029620 <_close_r>

08029432 <__swbuf_r>:
 8029432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029434:	460e      	mov	r6, r1
 8029436:	4614      	mov	r4, r2
 8029438:	4605      	mov	r5, r0
 802943a:	b118      	cbz	r0, 8029444 <__swbuf_r+0x12>
 802943c:	6a03      	ldr	r3, [r0, #32]
 802943e:	b90b      	cbnz	r3, 8029444 <__swbuf_r+0x12>
 8029440:	f7ff ff06 	bl	8029250 <__sinit>
 8029444:	69a3      	ldr	r3, [r4, #24]
 8029446:	60a3      	str	r3, [r4, #8]
 8029448:	89a3      	ldrh	r3, [r4, #12]
 802944a:	071a      	lsls	r2, r3, #28
 802944c:	d501      	bpl.n	8029452 <__swbuf_r+0x20>
 802944e:	6923      	ldr	r3, [r4, #16]
 8029450:	b943      	cbnz	r3, 8029464 <__swbuf_r+0x32>
 8029452:	4621      	mov	r1, r4
 8029454:	4628      	mov	r0, r5
 8029456:	f000 f82b 	bl	80294b0 <__swsetup_r>
 802945a:	b118      	cbz	r0, 8029464 <__swbuf_r+0x32>
 802945c:	f04f 37ff 	mov.w	r7, #4294967295
 8029460:	4638      	mov	r0, r7
 8029462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029464:	6823      	ldr	r3, [r4, #0]
 8029466:	6922      	ldr	r2, [r4, #16]
 8029468:	1a98      	subs	r0, r3, r2
 802946a:	6963      	ldr	r3, [r4, #20]
 802946c:	b2f6      	uxtb	r6, r6
 802946e:	4283      	cmp	r3, r0
 8029470:	4637      	mov	r7, r6
 8029472:	dc05      	bgt.n	8029480 <__swbuf_r+0x4e>
 8029474:	4621      	mov	r1, r4
 8029476:	4628      	mov	r0, r5
 8029478:	f000 fd1e 	bl	8029eb8 <_fflush_r>
 802947c:	2800      	cmp	r0, #0
 802947e:	d1ed      	bne.n	802945c <__swbuf_r+0x2a>
 8029480:	68a3      	ldr	r3, [r4, #8]
 8029482:	3b01      	subs	r3, #1
 8029484:	60a3      	str	r3, [r4, #8]
 8029486:	6823      	ldr	r3, [r4, #0]
 8029488:	1c5a      	adds	r2, r3, #1
 802948a:	6022      	str	r2, [r4, #0]
 802948c:	701e      	strb	r6, [r3, #0]
 802948e:	6962      	ldr	r2, [r4, #20]
 8029490:	1c43      	adds	r3, r0, #1
 8029492:	429a      	cmp	r2, r3
 8029494:	d004      	beq.n	80294a0 <__swbuf_r+0x6e>
 8029496:	89a3      	ldrh	r3, [r4, #12]
 8029498:	07db      	lsls	r3, r3, #31
 802949a:	d5e1      	bpl.n	8029460 <__swbuf_r+0x2e>
 802949c:	2e0a      	cmp	r6, #10
 802949e:	d1df      	bne.n	8029460 <__swbuf_r+0x2e>
 80294a0:	4621      	mov	r1, r4
 80294a2:	4628      	mov	r0, r5
 80294a4:	f000 fd08 	bl	8029eb8 <_fflush_r>
 80294a8:	2800      	cmp	r0, #0
 80294aa:	d0d9      	beq.n	8029460 <__swbuf_r+0x2e>
 80294ac:	e7d6      	b.n	802945c <__swbuf_r+0x2a>
	...

080294b0 <__swsetup_r>:
 80294b0:	b538      	push	{r3, r4, r5, lr}
 80294b2:	4b29      	ldr	r3, [pc, #164]	@ (8029558 <__swsetup_r+0xa8>)
 80294b4:	4605      	mov	r5, r0
 80294b6:	6818      	ldr	r0, [r3, #0]
 80294b8:	460c      	mov	r4, r1
 80294ba:	b118      	cbz	r0, 80294c4 <__swsetup_r+0x14>
 80294bc:	6a03      	ldr	r3, [r0, #32]
 80294be:	b90b      	cbnz	r3, 80294c4 <__swsetup_r+0x14>
 80294c0:	f7ff fec6 	bl	8029250 <__sinit>
 80294c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80294c8:	0719      	lsls	r1, r3, #28
 80294ca:	d422      	bmi.n	8029512 <__swsetup_r+0x62>
 80294cc:	06da      	lsls	r2, r3, #27
 80294ce:	d407      	bmi.n	80294e0 <__swsetup_r+0x30>
 80294d0:	2209      	movs	r2, #9
 80294d2:	602a      	str	r2, [r5, #0]
 80294d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80294d8:	81a3      	strh	r3, [r4, #12]
 80294da:	f04f 30ff 	mov.w	r0, #4294967295
 80294de:	e033      	b.n	8029548 <__swsetup_r+0x98>
 80294e0:	0758      	lsls	r0, r3, #29
 80294e2:	d512      	bpl.n	802950a <__swsetup_r+0x5a>
 80294e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80294e6:	b141      	cbz	r1, 80294fa <__swsetup_r+0x4a>
 80294e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80294ec:	4299      	cmp	r1, r3
 80294ee:	d002      	beq.n	80294f6 <__swsetup_r+0x46>
 80294f0:	4628      	mov	r0, r5
 80294f2:	f000 f93b 	bl	802976c <_free_r>
 80294f6:	2300      	movs	r3, #0
 80294f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80294fa:	89a3      	ldrh	r3, [r4, #12]
 80294fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029500:	81a3      	strh	r3, [r4, #12]
 8029502:	2300      	movs	r3, #0
 8029504:	6063      	str	r3, [r4, #4]
 8029506:	6923      	ldr	r3, [r4, #16]
 8029508:	6023      	str	r3, [r4, #0]
 802950a:	89a3      	ldrh	r3, [r4, #12]
 802950c:	f043 0308 	orr.w	r3, r3, #8
 8029510:	81a3      	strh	r3, [r4, #12]
 8029512:	6923      	ldr	r3, [r4, #16]
 8029514:	b94b      	cbnz	r3, 802952a <__swsetup_r+0x7a>
 8029516:	89a3      	ldrh	r3, [r4, #12]
 8029518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802951c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029520:	d003      	beq.n	802952a <__swsetup_r+0x7a>
 8029522:	4621      	mov	r1, r4
 8029524:	4628      	mov	r0, r5
 8029526:	f000 fd15 	bl	8029f54 <__smakebuf_r>
 802952a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802952e:	f013 0201 	ands.w	r2, r3, #1
 8029532:	d00a      	beq.n	802954a <__swsetup_r+0x9a>
 8029534:	2200      	movs	r2, #0
 8029536:	60a2      	str	r2, [r4, #8]
 8029538:	6962      	ldr	r2, [r4, #20]
 802953a:	4252      	negs	r2, r2
 802953c:	61a2      	str	r2, [r4, #24]
 802953e:	6922      	ldr	r2, [r4, #16]
 8029540:	b942      	cbnz	r2, 8029554 <__swsetup_r+0xa4>
 8029542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8029546:	d1c5      	bne.n	80294d4 <__swsetup_r+0x24>
 8029548:	bd38      	pop	{r3, r4, r5, pc}
 802954a:	0799      	lsls	r1, r3, #30
 802954c:	bf58      	it	pl
 802954e:	6962      	ldrpl	r2, [r4, #20]
 8029550:	60a2      	str	r2, [r4, #8]
 8029552:	e7f4      	b.n	802953e <__swsetup_r+0x8e>
 8029554:	2000      	movs	r0, #0
 8029556:	e7f7      	b.n	8029548 <__swsetup_r+0x98>
 8029558:	24000038 	.word	0x24000038

0802955c <memcmp>:
 802955c:	b510      	push	{r4, lr}
 802955e:	3901      	subs	r1, #1
 8029560:	4402      	add	r2, r0
 8029562:	4290      	cmp	r0, r2
 8029564:	d101      	bne.n	802956a <memcmp+0xe>
 8029566:	2000      	movs	r0, #0
 8029568:	e005      	b.n	8029576 <memcmp+0x1a>
 802956a:	7803      	ldrb	r3, [r0, #0]
 802956c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029570:	42a3      	cmp	r3, r4
 8029572:	d001      	beq.n	8029578 <memcmp+0x1c>
 8029574:	1b18      	subs	r0, r3, r4
 8029576:	bd10      	pop	{r4, pc}
 8029578:	3001      	adds	r0, #1
 802957a:	e7f2      	b.n	8029562 <memcmp+0x6>

0802957c <memmove>:
 802957c:	4288      	cmp	r0, r1
 802957e:	b510      	push	{r4, lr}
 8029580:	eb01 0402 	add.w	r4, r1, r2
 8029584:	d902      	bls.n	802958c <memmove+0x10>
 8029586:	4284      	cmp	r4, r0
 8029588:	4623      	mov	r3, r4
 802958a:	d807      	bhi.n	802959c <memmove+0x20>
 802958c:	1e43      	subs	r3, r0, #1
 802958e:	42a1      	cmp	r1, r4
 8029590:	d008      	beq.n	80295a4 <memmove+0x28>
 8029592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029596:	f803 2f01 	strb.w	r2, [r3, #1]!
 802959a:	e7f8      	b.n	802958e <memmove+0x12>
 802959c:	4402      	add	r2, r0
 802959e:	4601      	mov	r1, r0
 80295a0:	428a      	cmp	r2, r1
 80295a2:	d100      	bne.n	80295a6 <memmove+0x2a>
 80295a4:	bd10      	pop	{r4, pc}
 80295a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80295aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80295ae:	e7f7      	b.n	80295a0 <memmove+0x24>

080295b0 <memset>:
 80295b0:	4402      	add	r2, r0
 80295b2:	4603      	mov	r3, r0
 80295b4:	4293      	cmp	r3, r2
 80295b6:	d100      	bne.n	80295ba <memset+0xa>
 80295b8:	4770      	bx	lr
 80295ba:	f803 1b01 	strb.w	r1, [r3], #1
 80295be:	e7f9      	b.n	80295b4 <memset+0x4>

080295c0 <_raise_r>:
 80295c0:	291f      	cmp	r1, #31
 80295c2:	b538      	push	{r3, r4, r5, lr}
 80295c4:	4605      	mov	r5, r0
 80295c6:	460c      	mov	r4, r1
 80295c8:	d904      	bls.n	80295d4 <_raise_r+0x14>
 80295ca:	2316      	movs	r3, #22
 80295cc:	6003      	str	r3, [r0, #0]
 80295ce:	f04f 30ff 	mov.w	r0, #4294967295
 80295d2:	bd38      	pop	{r3, r4, r5, pc}
 80295d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80295d6:	b112      	cbz	r2, 80295de <_raise_r+0x1e>
 80295d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80295dc:	b94b      	cbnz	r3, 80295f2 <_raise_r+0x32>
 80295de:	4628      	mov	r0, r5
 80295e0:	f000 f864 	bl	80296ac <_getpid_r>
 80295e4:	4622      	mov	r2, r4
 80295e6:	4601      	mov	r1, r0
 80295e8:	4628      	mov	r0, r5
 80295ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80295ee:	f000 b84b 	b.w	8029688 <_kill_r>
 80295f2:	2b01      	cmp	r3, #1
 80295f4:	d00a      	beq.n	802960c <_raise_r+0x4c>
 80295f6:	1c59      	adds	r1, r3, #1
 80295f8:	d103      	bne.n	8029602 <_raise_r+0x42>
 80295fa:	2316      	movs	r3, #22
 80295fc:	6003      	str	r3, [r0, #0]
 80295fe:	2001      	movs	r0, #1
 8029600:	e7e7      	b.n	80295d2 <_raise_r+0x12>
 8029602:	2100      	movs	r1, #0
 8029604:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029608:	4620      	mov	r0, r4
 802960a:	4798      	blx	r3
 802960c:	2000      	movs	r0, #0
 802960e:	e7e0      	b.n	80295d2 <_raise_r+0x12>

08029610 <raise>:
 8029610:	4b02      	ldr	r3, [pc, #8]	@ (802961c <raise+0xc>)
 8029612:	4601      	mov	r1, r0
 8029614:	6818      	ldr	r0, [r3, #0]
 8029616:	f7ff bfd3 	b.w	80295c0 <_raise_r>
 802961a:	bf00      	nop
 802961c:	24000038 	.word	0x24000038

08029620 <_close_r>:
 8029620:	b538      	push	{r3, r4, r5, lr}
 8029622:	4d06      	ldr	r5, [pc, #24]	@ (802963c <_close_r+0x1c>)
 8029624:	2300      	movs	r3, #0
 8029626:	4604      	mov	r4, r0
 8029628:	4608      	mov	r0, r1
 802962a:	602b      	str	r3, [r5, #0]
 802962c:	f7e5 fc1a 	bl	800ee64 <_close>
 8029630:	1c43      	adds	r3, r0, #1
 8029632:	d102      	bne.n	802963a <_close_r+0x1a>
 8029634:	682b      	ldr	r3, [r5, #0]
 8029636:	b103      	cbz	r3, 802963a <_close_r+0x1a>
 8029638:	6023      	str	r3, [r4, #0]
 802963a:	bd38      	pop	{r3, r4, r5, pc}
 802963c:	24000c08 	.word	0x24000c08

08029640 <_lseek_r>:
 8029640:	b538      	push	{r3, r4, r5, lr}
 8029642:	4d07      	ldr	r5, [pc, #28]	@ (8029660 <_lseek_r+0x20>)
 8029644:	4604      	mov	r4, r0
 8029646:	4608      	mov	r0, r1
 8029648:	4611      	mov	r1, r2
 802964a:	2200      	movs	r2, #0
 802964c:	602a      	str	r2, [r5, #0]
 802964e:	461a      	mov	r2, r3
 8029650:	f7e5 fc2f 	bl	800eeb2 <_lseek>
 8029654:	1c43      	adds	r3, r0, #1
 8029656:	d102      	bne.n	802965e <_lseek_r+0x1e>
 8029658:	682b      	ldr	r3, [r5, #0]
 802965a:	b103      	cbz	r3, 802965e <_lseek_r+0x1e>
 802965c:	6023      	str	r3, [r4, #0]
 802965e:	bd38      	pop	{r3, r4, r5, pc}
 8029660:	24000c08 	.word	0x24000c08

08029664 <_read_r>:
 8029664:	b538      	push	{r3, r4, r5, lr}
 8029666:	4d07      	ldr	r5, [pc, #28]	@ (8029684 <_read_r+0x20>)
 8029668:	4604      	mov	r4, r0
 802966a:	4608      	mov	r0, r1
 802966c:	4611      	mov	r1, r2
 802966e:	2200      	movs	r2, #0
 8029670:	602a      	str	r2, [r5, #0]
 8029672:	461a      	mov	r2, r3
 8029674:	f7e5 fbbd 	bl	800edf2 <_read>
 8029678:	1c43      	adds	r3, r0, #1
 802967a:	d102      	bne.n	8029682 <_read_r+0x1e>
 802967c:	682b      	ldr	r3, [r5, #0]
 802967e:	b103      	cbz	r3, 8029682 <_read_r+0x1e>
 8029680:	6023      	str	r3, [r4, #0]
 8029682:	bd38      	pop	{r3, r4, r5, pc}
 8029684:	24000c08 	.word	0x24000c08

08029688 <_kill_r>:
 8029688:	b538      	push	{r3, r4, r5, lr}
 802968a:	4d07      	ldr	r5, [pc, #28]	@ (80296a8 <_kill_r+0x20>)
 802968c:	2300      	movs	r3, #0
 802968e:	4604      	mov	r4, r0
 8029690:	4608      	mov	r0, r1
 8029692:	4611      	mov	r1, r2
 8029694:	602b      	str	r3, [r5, #0]
 8029696:	f7e5 fb91 	bl	800edbc <_kill>
 802969a:	1c43      	adds	r3, r0, #1
 802969c:	d102      	bne.n	80296a4 <_kill_r+0x1c>
 802969e:	682b      	ldr	r3, [r5, #0]
 80296a0:	b103      	cbz	r3, 80296a4 <_kill_r+0x1c>
 80296a2:	6023      	str	r3, [r4, #0]
 80296a4:	bd38      	pop	{r3, r4, r5, pc}
 80296a6:	bf00      	nop
 80296a8:	24000c08 	.word	0x24000c08

080296ac <_getpid_r>:
 80296ac:	f7e5 bb7e 	b.w	800edac <_getpid>

080296b0 <_sbrk_r>:
 80296b0:	b538      	push	{r3, r4, r5, lr}
 80296b2:	4d06      	ldr	r5, [pc, #24]	@ (80296cc <_sbrk_r+0x1c>)
 80296b4:	2300      	movs	r3, #0
 80296b6:	4604      	mov	r4, r0
 80296b8:	4608      	mov	r0, r1
 80296ba:	602b      	str	r3, [r5, #0]
 80296bc:	f7e5 fc06 	bl	800eecc <_sbrk>
 80296c0:	1c43      	adds	r3, r0, #1
 80296c2:	d102      	bne.n	80296ca <_sbrk_r+0x1a>
 80296c4:	682b      	ldr	r3, [r5, #0]
 80296c6:	b103      	cbz	r3, 80296ca <_sbrk_r+0x1a>
 80296c8:	6023      	str	r3, [r4, #0]
 80296ca:	bd38      	pop	{r3, r4, r5, pc}
 80296cc:	24000c08 	.word	0x24000c08

080296d0 <_write_r>:
 80296d0:	b538      	push	{r3, r4, r5, lr}
 80296d2:	4d07      	ldr	r5, [pc, #28]	@ (80296f0 <_write_r+0x20>)
 80296d4:	4604      	mov	r4, r0
 80296d6:	4608      	mov	r0, r1
 80296d8:	4611      	mov	r1, r2
 80296da:	2200      	movs	r2, #0
 80296dc:	602a      	str	r2, [r5, #0]
 80296de:	461a      	mov	r2, r3
 80296e0:	f7e5 fba4 	bl	800ee2c <_write>
 80296e4:	1c43      	adds	r3, r0, #1
 80296e6:	d102      	bne.n	80296ee <_write_r+0x1e>
 80296e8:	682b      	ldr	r3, [r5, #0]
 80296ea:	b103      	cbz	r3, 80296ee <_write_r+0x1e>
 80296ec:	6023      	str	r3, [r4, #0]
 80296ee:	bd38      	pop	{r3, r4, r5, pc}
 80296f0:	24000c08 	.word	0x24000c08

080296f4 <__errno>:
 80296f4:	4b01      	ldr	r3, [pc, #4]	@ (80296fc <__errno+0x8>)
 80296f6:	6818      	ldr	r0, [r3, #0]
 80296f8:	4770      	bx	lr
 80296fa:	bf00      	nop
 80296fc:	24000038 	.word	0x24000038

08029700 <__libc_init_array>:
 8029700:	b570      	push	{r4, r5, r6, lr}
 8029702:	4d0d      	ldr	r5, [pc, #52]	@ (8029738 <__libc_init_array+0x38>)
 8029704:	4c0d      	ldr	r4, [pc, #52]	@ (802973c <__libc_init_array+0x3c>)
 8029706:	1b64      	subs	r4, r4, r5
 8029708:	10a4      	asrs	r4, r4, #2
 802970a:	2600      	movs	r6, #0
 802970c:	42a6      	cmp	r6, r4
 802970e:	d109      	bne.n	8029724 <__libc_init_array+0x24>
 8029710:	4d0b      	ldr	r5, [pc, #44]	@ (8029740 <__libc_init_array+0x40>)
 8029712:	4c0c      	ldr	r4, [pc, #48]	@ (8029744 <__libc_init_array+0x44>)
 8029714:	f000 fcb0 	bl	802a078 <_init>
 8029718:	1b64      	subs	r4, r4, r5
 802971a:	10a4      	asrs	r4, r4, #2
 802971c:	2600      	movs	r6, #0
 802971e:	42a6      	cmp	r6, r4
 8029720:	d105      	bne.n	802972e <__libc_init_array+0x2e>
 8029722:	bd70      	pop	{r4, r5, r6, pc}
 8029724:	f855 3b04 	ldr.w	r3, [r5], #4
 8029728:	4798      	blx	r3
 802972a:	3601      	adds	r6, #1
 802972c:	e7ee      	b.n	802970c <__libc_init_array+0xc>
 802972e:	f855 3b04 	ldr.w	r3, [r5], #4
 8029732:	4798      	blx	r3
 8029734:	3601      	adds	r6, #1
 8029736:	e7f2      	b.n	802971e <__libc_init_array+0x1e>
 8029738:	0802b9a4 	.word	0x0802b9a4
 802973c:	0802b9a4 	.word	0x0802b9a4
 8029740:	0802b9a4 	.word	0x0802b9a4
 8029744:	0802b9b0 	.word	0x0802b9b0

08029748 <__retarget_lock_init_recursive>:
 8029748:	4770      	bx	lr

0802974a <__retarget_lock_acquire_recursive>:
 802974a:	4770      	bx	lr

0802974c <__retarget_lock_release_recursive>:
 802974c:	4770      	bx	lr

0802974e <memcpy>:
 802974e:	440a      	add	r2, r1
 8029750:	4291      	cmp	r1, r2
 8029752:	f100 33ff 	add.w	r3, r0, #4294967295
 8029756:	d100      	bne.n	802975a <memcpy+0xc>
 8029758:	4770      	bx	lr
 802975a:	b510      	push	{r4, lr}
 802975c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029764:	4291      	cmp	r1, r2
 8029766:	d1f9      	bne.n	802975c <memcpy+0xe>
 8029768:	bd10      	pop	{r4, pc}
	...

0802976c <_free_r>:
 802976c:	b538      	push	{r3, r4, r5, lr}
 802976e:	4605      	mov	r5, r0
 8029770:	2900      	cmp	r1, #0
 8029772:	d041      	beq.n	80297f8 <_free_r+0x8c>
 8029774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029778:	1f0c      	subs	r4, r1, #4
 802977a:	2b00      	cmp	r3, #0
 802977c:	bfb8      	it	lt
 802977e:	18e4      	addlt	r4, r4, r3
 8029780:	f7ff fc14 	bl	8028fac <__malloc_lock>
 8029784:	4a1d      	ldr	r2, [pc, #116]	@ (80297fc <_free_r+0x90>)
 8029786:	6813      	ldr	r3, [r2, #0]
 8029788:	b933      	cbnz	r3, 8029798 <_free_r+0x2c>
 802978a:	6063      	str	r3, [r4, #4]
 802978c:	6014      	str	r4, [r2, #0]
 802978e:	4628      	mov	r0, r5
 8029790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029794:	f7ff bc10 	b.w	8028fb8 <__malloc_unlock>
 8029798:	42a3      	cmp	r3, r4
 802979a:	d908      	bls.n	80297ae <_free_r+0x42>
 802979c:	6820      	ldr	r0, [r4, #0]
 802979e:	1821      	adds	r1, r4, r0
 80297a0:	428b      	cmp	r3, r1
 80297a2:	bf01      	itttt	eq
 80297a4:	6819      	ldreq	r1, [r3, #0]
 80297a6:	685b      	ldreq	r3, [r3, #4]
 80297a8:	1809      	addeq	r1, r1, r0
 80297aa:	6021      	streq	r1, [r4, #0]
 80297ac:	e7ed      	b.n	802978a <_free_r+0x1e>
 80297ae:	461a      	mov	r2, r3
 80297b0:	685b      	ldr	r3, [r3, #4]
 80297b2:	b10b      	cbz	r3, 80297b8 <_free_r+0x4c>
 80297b4:	42a3      	cmp	r3, r4
 80297b6:	d9fa      	bls.n	80297ae <_free_r+0x42>
 80297b8:	6811      	ldr	r1, [r2, #0]
 80297ba:	1850      	adds	r0, r2, r1
 80297bc:	42a0      	cmp	r0, r4
 80297be:	d10b      	bne.n	80297d8 <_free_r+0x6c>
 80297c0:	6820      	ldr	r0, [r4, #0]
 80297c2:	4401      	add	r1, r0
 80297c4:	1850      	adds	r0, r2, r1
 80297c6:	4283      	cmp	r3, r0
 80297c8:	6011      	str	r1, [r2, #0]
 80297ca:	d1e0      	bne.n	802978e <_free_r+0x22>
 80297cc:	6818      	ldr	r0, [r3, #0]
 80297ce:	685b      	ldr	r3, [r3, #4]
 80297d0:	6053      	str	r3, [r2, #4]
 80297d2:	4408      	add	r0, r1
 80297d4:	6010      	str	r0, [r2, #0]
 80297d6:	e7da      	b.n	802978e <_free_r+0x22>
 80297d8:	d902      	bls.n	80297e0 <_free_r+0x74>
 80297da:	230c      	movs	r3, #12
 80297dc:	602b      	str	r3, [r5, #0]
 80297de:	e7d6      	b.n	802978e <_free_r+0x22>
 80297e0:	6820      	ldr	r0, [r4, #0]
 80297e2:	1821      	adds	r1, r4, r0
 80297e4:	428b      	cmp	r3, r1
 80297e6:	bf04      	itt	eq
 80297e8:	6819      	ldreq	r1, [r3, #0]
 80297ea:	685b      	ldreq	r3, [r3, #4]
 80297ec:	6063      	str	r3, [r4, #4]
 80297ee:	bf04      	itt	eq
 80297f0:	1809      	addeq	r1, r1, r0
 80297f2:	6021      	streq	r1, [r4, #0]
 80297f4:	6054      	str	r4, [r2, #4]
 80297f6:	e7ca      	b.n	802978e <_free_r+0x22>
 80297f8:	bd38      	pop	{r3, r4, r5, pc}
 80297fa:	bf00      	nop
 80297fc:	24000ac8 	.word	0x24000ac8

08029800 <_malloc_usable_size_r>:
 8029800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029804:	1f18      	subs	r0, r3, #4
 8029806:	2b00      	cmp	r3, #0
 8029808:	bfbc      	itt	lt
 802980a:	580b      	ldrlt	r3, [r1, r0]
 802980c:	18c0      	addlt	r0, r0, r3
 802980e:	4770      	bx	lr

08029810 <__sfputc_r>:
 8029810:	6893      	ldr	r3, [r2, #8]
 8029812:	3b01      	subs	r3, #1
 8029814:	2b00      	cmp	r3, #0
 8029816:	b410      	push	{r4}
 8029818:	6093      	str	r3, [r2, #8]
 802981a:	da08      	bge.n	802982e <__sfputc_r+0x1e>
 802981c:	6994      	ldr	r4, [r2, #24]
 802981e:	42a3      	cmp	r3, r4
 8029820:	db01      	blt.n	8029826 <__sfputc_r+0x16>
 8029822:	290a      	cmp	r1, #10
 8029824:	d103      	bne.n	802982e <__sfputc_r+0x1e>
 8029826:	f85d 4b04 	ldr.w	r4, [sp], #4
 802982a:	f7ff be02 	b.w	8029432 <__swbuf_r>
 802982e:	6813      	ldr	r3, [r2, #0]
 8029830:	1c58      	adds	r0, r3, #1
 8029832:	6010      	str	r0, [r2, #0]
 8029834:	7019      	strb	r1, [r3, #0]
 8029836:	4608      	mov	r0, r1
 8029838:	f85d 4b04 	ldr.w	r4, [sp], #4
 802983c:	4770      	bx	lr

0802983e <__sfputs_r>:
 802983e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029840:	4606      	mov	r6, r0
 8029842:	460f      	mov	r7, r1
 8029844:	4614      	mov	r4, r2
 8029846:	18d5      	adds	r5, r2, r3
 8029848:	42ac      	cmp	r4, r5
 802984a:	d101      	bne.n	8029850 <__sfputs_r+0x12>
 802984c:	2000      	movs	r0, #0
 802984e:	e007      	b.n	8029860 <__sfputs_r+0x22>
 8029850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029854:	463a      	mov	r2, r7
 8029856:	4630      	mov	r0, r6
 8029858:	f7ff ffda 	bl	8029810 <__sfputc_r>
 802985c:	1c43      	adds	r3, r0, #1
 802985e:	d1f3      	bne.n	8029848 <__sfputs_r+0xa>
 8029860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029864 <_vfiprintf_r>:
 8029864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029868:	460d      	mov	r5, r1
 802986a:	b09d      	sub	sp, #116	@ 0x74
 802986c:	4614      	mov	r4, r2
 802986e:	4698      	mov	r8, r3
 8029870:	4606      	mov	r6, r0
 8029872:	b118      	cbz	r0, 802987c <_vfiprintf_r+0x18>
 8029874:	6a03      	ldr	r3, [r0, #32]
 8029876:	b90b      	cbnz	r3, 802987c <_vfiprintf_r+0x18>
 8029878:	f7ff fcea 	bl	8029250 <__sinit>
 802987c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802987e:	07d9      	lsls	r1, r3, #31
 8029880:	d405      	bmi.n	802988e <_vfiprintf_r+0x2a>
 8029882:	89ab      	ldrh	r3, [r5, #12]
 8029884:	059a      	lsls	r2, r3, #22
 8029886:	d402      	bmi.n	802988e <_vfiprintf_r+0x2a>
 8029888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802988a:	f7ff ff5e 	bl	802974a <__retarget_lock_acquire_recursive>
 802988e:	89ab      	ldrh	r3, [r5, #12]
 8029890:	071b      	lsls	r3, r3, #28
 8029892:	d501      	bpl.n	8029898 <_vfiprintf_r+0x34>
 8029894:	692b      	ldr	r3, [r5, #16]
 8029896:	b99b      	cbnz	r3, 80298c0 <_vfiprintf_r+0x5c>
 8029898:	4629      	mov	r1, r5
 802989a:	4630      	mov	r0, r6
 802989c:	f7ff fe08 	bl	80294b0 <__swsetup_r>
 80298a0:	b170      	cbz	r0, 80298c0 <_vfiprintf_r+0x5c>
 80298a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80298a4:	07dc      	lsls	r4, r3, #31
 80298a6:	d504      	bpl.n	80298b2 <_vfiprintf_r+0x4e>
 80298a8:	f04f 30ff 	mov.w	r0, #4294967295
 80298ac:	b01d      	add	sp, #116	@ 0x74
 80298ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298b2:	89ab      	ldrh	r3, [r5, #12]
 80298b4:	0598      	lsls	r0, r3, #22
 80298b6:	d4f7      	bmi.n	80298a8 <_vfiprintf_r+0x44>
 80298b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80298ba:	f7ff ff47 	bl	802974c <__retarget_lock_release_recursive>
 80298be:	e7f3      	b.n	80298a8 <_vfiprintf_r+0x44>
 80298c0:	2300      	movs	r3, #0
 80298c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80298c4:	2320      	movs	r3, #32
 80298c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80298ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80298ce:	2330      	movs	r3, #48	@ 0x30
 80298d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029a80 <_vfiprintf_r+0x21c>
 80298d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80298d8:	f04f 0901 	mov.w	r9, #1
 80298dc:	4623      	mov	r3, r4
 80298de:	469a      	mov	sl, r3
 80298e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298e4:	b10a      	cbz	r2, 80298ea <_vfiprintf_r+0x86>
 80298e6:	2a25      	cmp	r2, #37	@ 0x25
 80298e8:	d1f9      	bne.n	80298de <_vfiprintf_r+0x7a>
 80298ea:	ebba 0b04 	subs.w	fp, sl, r4
 80298ee:	d00b      	beq.n	8029908 <_vfiprintf_r+0xa4>
 80298f0:	465b      	mov	r3, fp
 80298f2:	4622      	mov	r2, r4
 80298f4:	4629      	mov	r1, r5
 80298f6:	4630      	mov	r0, r6
 80298f8:	f7ff ffa1 	bl	802983e <__sfputs_r>
 80298fc:	3001      	adds	r0, #1
 80298fe:	f000 80a7 	beq.w	8029a50 <_vfiprintf_r+0x1ec>
 8029902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029904:	445a      	add	r2, fp
 8029906:	9209      	str	r2, [sp, #36]	@ 0x24
 8029908:	f89a 3000 	ldrb.w	r3, [sl]
 802990c:	2b00      	cmp	r3, #0
 802990e:	f000 809f 	beq.w	8029a50 <_vfiprintf_r+0x1ec>
 8029912:	2300      	movs	r3, #0
 8029914:	f04f 32ff 	mov.w	r2, #4294967295
 8029918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802991c:	f10a 0a01 	add.w	sl, sl, #1
 8029920:	9304      	str	r3, [sp, #16]
 8029922:	9307      	str	r3, [sp, #28]
 8029924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029928:	931a      	str	r3, [sp, #104]	@ 0x68
 802992a:	4654      	mov	r4, sl
 802992c:	2205      	movs	r2, #5
 802992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029932:	4853      	ldr	r0, [pc, #332]	@ (8029a80 <_vfiprintf_r+0x21c>)
 8029934:	f7d6 fce4 	bl	8000300 <memchr>
 8029938:	9a04      	ldr	r2, [sp, #16]
 802993a:	b9d8      	cbnz	r0, 8029974 <_vfiprintf_r+0x110>
 802993c:	06d1      	lsls	r1, r2, #27
 802993e:	bf44      	itt	mi
 8029940:	2320      	movmi	r3, #32
 8029942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029946:	0713      	lsls	r3, r2, #28
 8029948:	bf44      	itt	mi
 802994a:	232b      	movmi	r3, #43	@ 0x2b
 802994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029950:	f89a 3000 	ldrb.w	r3, [sl]
 8029954:	2b2a      	cmp	r3, #42	@ 0x2a
 8029956:	d015      	beq.n	8029984 <_vfiprintf_r+0x120>
 8029958:	9a07      	ldr	r2, [sp, #28]
 802995a:	4654      	mov	r4, sl
 802995c:	2000      	movs	r0, #0
 802995e:	f04f 0c0a 	mov.w	ip, #10
 8029962:	4621      	mov	r1, r4
 8029964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029968:	3b30      	subs	r3, #48	@ 0x30
 802996a:	2b09      	cmp	r3, #9
 802996c:	d94b      	bls.n	8029a06 <_vfiprintf_r+0x1a2>
 802996e:	b1b0      	cbz	r0, 802999e <_vfiprintf_r+0x13a>
 8029970:	9207      	str	r2, [sp, #28]
 8029972:	e014      	b.n	802999e <_vfiprintf_r+0x13a>
 8029974:	eba0 0308 	sub.w	r3, r0, r8
 8029978:	fa09 f303 	lsl.w	r3, r9, r3
 802997c:	4313      	orrs	r3, r2
 802997e:	9304      	str	r3, [sp, #16]
 8029980:	46a2      	mov	sl, r4
 8029982:	e7d2      	b.n	802992a <_vfiprintf_r+0xc6>
 8029984:	9b03      	ldr	r3, [sp, #12]
 8029986:	1d19      	adds	r1, r3, #4
 8029988:	681b      	ldr	r3, [r3, #0]
 802998a:	9103      	str	r1, [sp, #12]
 802998c:	2b00      	cmp	r3, #0
 802998e:	bfbb      	ittet	lt
 8029990:	425b      	neglt	r3, r3
 8029992:	f042 0202 	orrlt.w	r2, r2, #2
 8029996:	9307      	strge	r3, [sp, #28]
 8029998:	9307      	strlt	r3, [sp, #28]
 802999a:	bfb8      	it	lt
 802999c:	9204      	strlt	r2, [sp, #16]
 802999e:	7823      	ldrb	r3, [r4, #0]
 80299a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80299a2:	d10a      	bne.n	80299ba <_vfiprintf_r+0x156>
 80299a4:	7863      	ldrb	r3, [r4, #1]
 80299a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80299a8:	d132      	bne.n	8029a10 <_vfiprintf_r+0x1ac>
 80299aa:	9b03      	ldr	r3, [sp, #12]
 80299ac:	1d1a      	adds	r2, r3, #4
 80299ae:	681b      	ldr	r3, [r3, #0]
 80299b0:	9203      	str	r2, [sp, #12]
 80299b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80299b6:	3402      	adds	r4, #2
 80299b8:	9305      	str	r3, [sp, #20]
 80299ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029a90 <_vfiprintf_r+0x22c>
 80299be:	7821      	ldrb	r1, [r4, #0]
 80299c0:	2203      	movs	r2, #3
 80299c2:	4650      	mov	r0, sl
 80299c4:	f7d6 fc9c 	bl	8000300 <memchr>
 80299c8:	b138      	cbz	r0, 80299da <_vfiprintf_r+0x176>
 80299ca:	9b04      	ldr	r3, [sp, #16]
 80299cc:	eba0 000a 	sub.w	r0, r0, sl
 80299d0:	2240      	movs	r2, #64	@ 0x40
 80299d2:	4082      	lsls	r2, r0
 80299d4:	4313      	orrs	r3, r2
 80299d6:	3401      	adds	r4, #1
 80299d8:	9304      	str	r3, [sp, #16]
 80299da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299de:	4829      	ldr	r0, [pc, #164]	@ (8029a84 <_vfiprintf_r+0x220>)
 80299e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80299e4:	2206      	movs	r2, #6
 80299e6:	f7d6 fc8b 	bl	8000300 <memchr>
 80299ea:	2800      	cmp	r0, #0
 80299ec:	d03f      	beq.n	8029a6e <_vfiprintf_r+0x20a>
 80299ee:	4b26      	ldr	r3, [pc, #152]	@ (8029a88 <_vfiprintf_r+0x224>)
 80299f0:	bb1b      	cbnz	r3, 8029a3a <_vfiprintf_r+0x1d6>
 80299f2:	9b03      	ldr	r3, [sp, #12]
 80299f4:	3307      	adds	r3, #7
 80299f6:	f023 0307 	bic.w	r3, r3, #7
 80299fa:	3308      	adds	r3, #8
 80299fc:	9303      	str	r3, [sp, #12]
 80299fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a00:	443b      	add	r3, r7
 8029a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a04:	e76a      	b.n	80298dc <_vfiprintf_r+0x78>
 8029a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8029a0a:	460c      	mov	r4, r1
 8029a0c:	2001      	movs	r0, #1
 8029a0e:	e7a8      	b.n	8029962 <_vfiprintf_r+0xfe>
 8029a10:	2300      	movs	r3, #0
 8029a12:	3401      	adds	r4, #1
 8029a14:	9305      	str	r3, [sp, #20]
 8029a16:	4619      	mov	r1, r3
 8029a18:	f04f 0c0a 	mov.w	ip, #10
 8029a1c:	4620      	mov	r0, r4
 8029a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029a22:	3a30      	subs	r2, #48	@ 0x30
 8029a24:	2a09      	cmp	r2, #9
 8029a26:	d903      	bls.n	8029a30 <_vfiprintf_r+0x1cc>
 8029a28:	2b00      	cmp	r3, #0
 8029a2a:	d0c6      	beq.n	80299ba <_vfiprintf_r+0x156>
 8029a2c:	9105      	str	r1, [sp, #20]
 8029a2e:	e7c4      	b.n	80299ba <_vfiprintf_r+0x156>
 8029a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8029a34:	4604      	mov	r4, r0
 8029a36:	2301      	movs	r3, #1
 8029a38:	e7f0      	b.n	8029a1c <_vfiprintf_r+0x1b8>
 8029a3a:	ab03      	add	r3, sp, #12
 8029a3c:	9300      	str	r3, [sp, #0]
 8029a3e:	462a      	mov	r2, r5
 8029a40:	4b12      	ldr	r3, [pc, #72]	@ (8029a8c <_vfiprintf_r+0x228>)
 8029a42:	a904      	add	r1, sp, #16
 8029a44:	4630      	mov	r0, r6
 8029a46:	f3af 8000 	nop.w
 8029a4a:	4607      	mov	r7, r0
 8029a4c:	1c78      	adds	r0, r7, #1
 8029a4e:	d1d6      	bne.n	80299fe <_vfiprintf_r+0x19a>
 8029a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029a52:	07d9      	lsls	r1, r3, #31
 8029a54:	d405      	bmi.n	8029a62 <_vfiprintf_r+0x1fe>
 8029a56:	89ab      	ldrh	r3, [r5, #12]
 8029a58:	059a      	lsls	r2, r3, #22
 8029a5a:	d402      	bmi.n	8029a62 <_vfiprintf_r+0x1fe>
 8029a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029a5e:	f7ff fe75 	bl	802974c <__retarget_lock_release_recursive>
 8029a62:	89ab      	ldrh	r3, [r5, #12]
 8029a64:	065b      	lsls	r3, r3, #25
 8029a66:	f53f af1f 	bmi.w	80298a8 <_vfiprintf_r+0x44>
 8029a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029a6c:	e71e      	b.n	80298ac <_vfiprintf_r+0x48>
 8029a6e:	ab03      	add	r3, sp, #12
 8029a70:	9300      	str	r3, [sp, #0]
 8029a72:	462a      	mov	r2, r5
 8029a74:	4b05      	ldr	r3, [pc, #20]	@ (8029a8c <_vfiprintf_r+0x228>)
 8029a76:	a904      	add	r1, sp, #16
 8029a78:	4630      	mov	r0, r6
 8029a7a:	f000 f879 	bl	8029b70 <_printf_i>
 8029a7e:	e7e4      	b.n	8029a4a <_vfiprintf_r+0x1e6>
 8029a80:	0802b969 	.word	0x0802b969
 8029a84:	0802b973 	.word	0x0802b973
 8029a88:	00000000 	.word	0x00000000
 8029a8c:	0802983f 	.word	0x0802983f
 8029a90:	0802b96f 	.word	0x0802b96f

08029a94 <_printf_common>:
 8029a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029a98:	4616      	mov	r6, r2
 8029a9a:	4698      	mov	r8, r3
 8029a9c:	688a      	ldr	r2, [r1, #8]
 8029a9e:	690b      	ldr	r3, [r1, #16]
 8029aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029aa4:	4293      	cmp	r3, r2
 8029aa6:	bfb8      	it	lt
 8029aa8:	4613      	movlt	r3, r2
 8029aaa:	6033      	str	r3, [r6, #0]
 8029aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029ab0:	4607      	mov	r7, r0
 8029ab2:	460c      	mov	r4, r1
 8029ab4:	b10a      	cbz	r2, 8029aba <_printf_common+0x26>
 8029ab6:	3301      	adds	r3, #1
 8029ab8:	6033      	str	r3, [r6, #0]
 8029aba:	6823      	ldr	r3, [r4, #0]
 8029abc:	0699      	lsls	r1, r3, #26
 8029abe:	bf42      	ittt	mi
 8029ac0:	6833      	ldrmi	r3, [r6, #0]
 8029ac2:	3302      	addmi	r3, #2
 8029ac4:	6033      	strmi	r3, [r6, #0]
 8029ac6:	6825      	ldr	r5, [r4, #0]
 8029ac8:	f015 0506 	ands.w	r5, r5, #6
 8029acc:	d106      	bne.n	8029adc <_printf_common+0x48>
 8029ace:	f104 0a19 	add.w	sl, r4, #25
 8029ad2:	68e3      	ldr	r3, [r4, #12]
 8029ad4:	6832      	ldr	r2, [r6, #0]
 8029ad6:	1a9b      	subs	r3, r3, r2
 8029ad8:	42ab      	cmp	r3, r5
 8029ada:	dc26      	bgt.n	8029b2a <_printf_common+0x96>
 8029adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029ae0:	6822      	ldr	r2, [r4, #0]
 8029ae2:	3b00      	subs	r3, #0
 8029ae4:	bf18      	it	ne
 8029ae6:	2301      	movne	r3, #1
 8029ae8:	0692      	lsls	r2, r2, #26
 8029aea:	d42b      	bmi.n	8029b44 <_printf_common+0xb0>
 8029aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029af0:	4641      	mov	r1, r8
 8029af2:	4638      	mov	r0, r7
 8029af4:	47c8      	blx	r9
 8029af6:	3001      	adds	r0, #1
 8029af8:	d01e      	beq.n	8029b38 <_printf_common+0xa4>
 8029afa:	6823      	ldr	r3, [r4, #0]
 8029afc:	6922      	ldr	r2, [r4, #16]
 8029afe:	f003 0306 	and.w	r3, r3, #6
 8029b02:	2b04      	cmp	r3, #4
 8029b04:	bf02      	ittt	eq
 8029b06:	68e5      	ldreq	r5, [r4, #12]
 8029b08:	6833      	ldreq	r3, [r6, #0]
 8029b0a:	1aed      	subeq	r5, r5, r3
 8029b0c:	68a3      	ldr	r3, [r4, #8]
 8029b0e:	bf0c      	ite	eq
 8029b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029b14:	2500      	movne	r5, #0
 8029b16:	4293      	cmp	r3, r2
 8029b18:	bfc4      	itt	gt
 8029b1a:	1a9b      	subgt	r3, r3, r2
 8029b1c:	18ed      	addgt	r5, r5, r3
 8029b1e:	2600      	movs	r6, #0
 8029b20:	341a      	adds	r4, #26
 8029b22:	42b5      	cmp	r5, r6
 8029b24:	d11a      	bne.n	8029b5c <_printf_common+0xc8>
 8029b26:	2000      	movs	r0, #0
 8029b28:	e008      	b.n	8029b3c <_printf_common+0xa8>
 8029b2a:	2301      	movs	r3, #1
 8029b2c:	4652      	mov	r2, sl
 8029b2e:	4641      	mov	r1, r8
 8029b30:	4638      	mov	r0, r7
 8029b32:	47c8      	blx	r9
 8029b34:	3001      	adds	r0, #1
 8029b36:	d103      	bne.n	8029b40 <_printf_common+0xac>
 8029b38:	f04f 30ff 	mov.w	r0, #4294967295
 8029b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b40:	3501      	adds	r5, #1
 8029b42:	e7c6      	b.n	8029ad2 <_printf_common+0x3e>
 8029b44:	18e1      	adds	r1, r4, r3
 8029b46:	1c5a      	adds	r2, r3, #1
 8029b48:	2030      	movs	r0, #48	@ 0x30
 8029b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029b4e:	4422      	add	r2, r4
 8029b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029b58:	3302      	adds	r3, #2
 8029b5a:	e7c7      	b.n	8029aec <_printf_common+0x58>
 8029b5c:	2301      	movs	r3, #1
 8029b5e:	4622      	mov	r2, r4
 8029b60:	4641      	mov	r1, r8
 8029b62:	4638      	mov	r0, r7
 8029b64:	47c8      	blx	r9
 8029b66:	3001      	adds	r0, #1
 8029b68:	d0e6      	beq.n	8029b38 <_printf_common+0xa4>
 8029b6a:	3601      	adds	r6, #1
 8029b6c:	e7d9      	b.n	8029b22 <_printf_common+0x8e>
	...

08029b70 <_printf_i>:
 8029b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029b74:	7e0f      	ldrb	r7, [r1, #24]
 8029b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029b78:	2f78      	cmp	r7, #120	@ 0x78
 8029b7a:	4691      	mov	r9, r2
 8029b7c:	4680      	mov	r8, r0
 8029b7e:	460c      	mov	r4, r1
 8029b80:	469a      	mov	sl, r3
 8029b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029b86:	d807      	bhi.n	8029b98 <_printf_i+0x28>
 8029b88:	2f62      	cmp	r7, #98	@ 0x62
 8029b8a:	d80a      	bhi.n	8029ba2 <_printf_i+0x32>
 8029b8c:	2f00      	cmp	r7, #0
 8029b8e:	f000 80d2 	beq.w	8029d36 <_printf_i+0x1c6>
 8029b92:	2f58      	cmp	r7, #88	@ 0x58
 8029b94:	f000 80b9 	beq.w	8029d0a <_printf_i+0x19a>
 8029b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029ba0:	e03a      	b.n	8029c18 <_printf_i+0xa8>
 8029ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029ba6:	2b15      	cmp	r3, #21
 8029ba8:	d8f6      	bhi.n	8029b98 <_printf_i+0x28>
 8029baa:	a101      	add	r1, pc, #4	@ (adr r1, 8029bb0 <_printf_i+0x40>)
 8029bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029bb0:	08029c09 	.word	0x08029c09
 8029bb4:	08029c1d 	.word	0x08029c1d
 8029bb8:	08029b99 	.word	0x08029b99
 8029bbc:	08029b99 	.word	0x08029b99
 8029bc0:	08029b99 	.word	0x08029b99
 8029bc4:	08029b99 	.word	0x08029b99
 8029bc8:	08029c1d 	.word	0x08029c1d
 8029bcc:	08029b99 	.word	0x08029b99
 8029bd0:	08029b99 	.word	0x08029b99
 8029bd4:	08029b99 	.word	0x08029b99
 8029bd8:	08029b99 	.word	0x08029b99
 8029bdc:	08029d1d 	.word	0x08029d1d
 8029be0:	08029c47 	.word	0x08029c47
 8029be4:	08029cd7 	.word	0x08029cd7
 8029be8:	08029b99 	.word	0x08029b99
 8029bec:	08029b99 	.word	0x08029b99
 8029bf0:	08029d3f 	.word	0x08029d3f
 8029bf4:	08029b99 	.word	0x08029b99
 8029bf8:	08029c47 	.word	0x08029c47
 8029bfc:	08029b99 	.word	0x08029b99
 8029c00:	08029b99 	.word	0x08029b99
 8029c04:	08029cdf 	.word	0x08029cdf
 8029c08:	6833      	ldr	r3, [r6, #0]
 8029c0a:	1d1a      	adds	r2, r3, #4
 8029c0c:	681b      	ldr	r3, [r3, #0]
 8029c0e:	6032      	str	r2, [r6, #0]
 8029c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029c18:	2301      	movs	r3, #1
 8029c1a:	e09d      	b.n	8029d58 <_printf_i+0x1e8>
 8029c1c:	6833      	ldr	r3, [r6, #0]
 8029c1e:	6820      	ldr	r0, [r4, #0]
 8029c20:	1d19      	adds	r1, r3, #4
 8029c22:	6031      	str	r1, [r6, #0]
 8029c24:	0606      	lsls	r6, r0, #24
 8029c26:	d501      	bpl.n	8029c2c <_printf_i+0xbc>
 8029c28:	681d      	ldr	r5, [r3, #0]
 8029c2a:	e003      	b.n	8029c34 <_printf_i+0xc4>
 8029c2c:	0645      	lsls	r5, r0, #25
 8029c2e:	d5fb      	bpl.n	8029c28 <_printf_i+0xb8>
 8029c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029c34:	2d00      	cmp	r5, #0
 8029c36:	da03      	bge.n	8029c40 <_printf_i+0xd0>
 8029c38:	232d      	movs	r3, #45	@ 0x2d
 8029c3a:	426d      	negs	r5, r5
 8029c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029c40:	4859      	ldr	r0, [pc, #356]	@ (8029da8 <_printf_i+0x238>)
 8029c42:	230a      	movs	r3, #10
 8029c44:	e011      	b.n	8029c6a <_printf_i+0xfa>
 8029c46:	6821      	ldr	r1, [r4, #0]
 8029c48:	6833      	ldr	r3, [r6, #0]
 8029c4a:	0608      	lsls	r0, r1, #24
 8029c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029c50:	d402      	bmi.n	8029c58 <_printf_i+0xe8>
 8029c52:	0649      	lsls	r1, r1, #25
 8029c54:	bf48      	it	mi
 8029c56:	b2ad      	uxthmi	r5, r5
 8029c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8029c5a:	4853      	ldr	r0, [pc, #332]	@ (8029da8 <_printf_i+0x238>)
 8029c5c:	6033      	str	r3, [r6, #0]
 8029c5e:	bf14      	ite	ne
 8029c60:	230a      	movne	r3, #10
 8029c62:	2308      	moveq	r3, #8
 8029c64:	2100      	movs	r1, #0
 8029c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029c6a:	6866      	ldr	r6, [r4, #4]
 8029c6c:	60a6      	str	r6, [r4, #8]
 8029c6e:	2e00      	cmp	r6, #0
 8029c70:	bfa2      	ittt	ge
 8029c72:	6821      	ldrge	r1, [r4, #0]
 8029c74:	f021 0104 	bicge.w	r1, r1, #4
 8029c78:	6021      	strge	r1, [r4, #0]
 8029c7a:	b90d      	cbnz	r5, 8029c80 <_printf_i+0x110>
 8029c7c:	2e00      	cmp	r6, #0
 8029c7e:	d04b      	beq.n	8029d18 <_printf_i+0x1a8>
 8029c80:	4616      	mov	r6, r2
 8029c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8029c86:	fb03 5711 	mls	r7, r3, r1, r5
 8029c8a:	5dc7      	ldrb	r7, [r0, r7]
 8029c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029c90:	462f      	mov	r7, r5
 8029c92:	42bb      	cmp	r3, r7
 8029c94:	460d      	mov	r5, r1
 8029c96:	d9f4      	bls.n	8029c82 <_printf_i+0x112>
 8029c98:	2b08      	cmp	r3, #8
 8029c9a:	d10b      	bne.n	8029cb4 <_printf_i+0x144>
 8029c9c:	6823      	ldr	r3, [r4, #0]
 8029c9e:	07df      	lsls	r7, r3, #31
 8029ca0:	d508      	bpl.n	8029cb4 <_printf_i+0x144>
 8029ca2:	6923      	ldr	r3, [r4, #16]
 8029ca4:	6861      	ldr	r1, [r4, #4]
 8029ca6:	4299      	cmp	r1, r3
 8029ca8:	bfde      	ittt	le
 8029caa:	2330      	movle	r3, #48	@ 0x30
 8029cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029cb4:	1b92      	subs	r2, r2, r6
 8029cb6:	6122      	str	r2, [r4, #16]
 8029cb8:	f8cd a000 	str.w	sl, [sp]
 8029cbc:	464b      	mov	r3, r9
 8029cbe:	aa03      	add	r2, sp, #12
 8029cc0:	4621      	mov	r1, r4
 8029cc2:	4640      	mov	r0, r8
 8029cc4:	f7ff fee6 	bl	8029a94 <_printf_common>
 8029cc8:	3001      	adds	r0, #1
 8029cca:	d14a      	bne.n	8029d62 <_printf_i+0x1f2>
 8029ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8029cd0:	b004      	add	sp, #16
 8029cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029cd6:	6823      	ldr	r3, [r4, #0]
 8029cd8:	f043 0320 	orr.w	r3, r3, #32
 8029cdc:	6023      	str	r3, [r4, #0]
 8029cde:	4833      	ldr	r0, [pc, #204]	@ (8029dac <_printf_i+0x23c>)
 8029ce0:	2778      	movs	r7, #120	@ 0x78
 8029ce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029ce6:	6823      	ldr	r3, [r4, #0]
 8029ce8:	6831      	ldr	r1, [r6, #0]
 8029cea:	061f      	lsls	r7, r3, #24
 8029cec:	f851 5b04 	ldr.w	r5, [r1], #4
 8029cf0:	d402      	bmi.n	8029cf8 <_printf_i+0x188>
 8029cf2:	065f      	lsls	r7, r3, #25
 8029cf4:	bf48      	it	mi
 8029cf6:	b2ad      	uxthmi	r5, r5
 8029cf8:	6031      	str	r1, [r6, #0]
 8029cfa:	07d9      	lsls	r1, r3, #31
 8029cfc:	bf44      	itt	mi
 8029cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8029d02:	6023      	strmi	r3, [r4, #0]
 8029d04:	b11d      	cbz	r5, 8029d0e <_printf_i+0x19e>
 8029d06:	2310      	movs	r3, #16
 8029d08:	e7ac      	b.n	8029c64 <_printf_i+0xf4>
 8029d0a:	4827      	ldr	r0, [pc, #156]	@ (8029da8 <_printf_i+0x238>)
 8029d0c:	e7e9      	b.n	8029ce2 <_printf_i+0x172>
 8029d0e:	6823      	ldr	r3, [r4, #0]
 8029d10:	f023 0320 	bic.w	r3, r3, #32
 8029d14:	6023      	str	r3, [r4, #0]
 8029d16:	e7f6      	b.n	8029d06 <_printf_i+0x196>
 8029d18:	4616      	mov	r6, r2
 8029d1a:	e7bd      	b.n	8029c98 <_printf_i+0x128>
 8029d1c:	6833      	ldr	r3, [r6, #0]
 8029d1e:	6825      	ldr	r5, [r4, #0]
 8029d20:	6961      	ldr	r1, [r4, #20]
 8029d22:	1d18      	adds	r0, r3, #4
 8029d24:	6030      	str	r0, [r6, #0]
 8029d26:	062e      	lsls	r6, r5, #24
 8029d28:	681b      	ldr	r3, [r3, #0]
 8029d2a:	d501      	bpl.n	8029d30 <_printf_i+0x1c0>
 8029d2c:	6019      	str	r1, [r3, #0]
 8029d2e:	e002      	b.n	8029d36 <_printf_i+0x1c6>
 8029d30:	0668      	lsls	r0, r5, #25
 8029d32:	d5fb      	bpl.n	8029d2c <_printf_i+0x1bc>
 8029d34:	8019      	strh	r1, [r3, #0]
 8029d36:	2300      	movs	r3, #0
 8029d38:	6123      	str	r3, [r4, #16]
 8029d3a:	4616      	mov	r6, r2
 8029d3c:	e7bc      	b.n	8029cb8 <_printf_i+0x148>
 8029d3e:	6833      	ldr	r3, [r6, #0]
 8029d40:	1d1a      	adds	r2, r3, #4
 8029d42:	6032      	str	r2, [r6, #0]
 8029d44:	681e      	ldr	r6, [r3, #0]
 8029d46:	6862      	ldr	r2, [r4, #4]
 8029d48:	2100      	movs	r1, #0
 8029d4a:	4630      	mov	r0, r6
 8029d4c:	f7d6 fad8 	bl	8000300 <memchr>
 8029d50:	b108      	cbz	r0, 8029d56 <_printf_i+0x1e6>
 8029d52:	1b80      	subs	r0, r0, r6
 8029d54:	6060      	str	r0, [r4, #4]
 8029d56:	6863      	ldr	r3, [r4, #4]
 8029d58:	6123      	str	r3, [r4, #16]
 8029d5a:	2300      	movs	r3, #0
 8029d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029d60:	e7aa      	b.n	8029cb8 <_printf_i+0x148>
 8029d62:	6923      	ldr	r3, [r4, #16]
 8029d64:	4632      	mov	r2, r6
 8029d66:	4649      	mov	r1, r9
 8029d68:	4640      	mov	r0, r8
 8029d6a:	47d0      	blx	sl
 8029d6c:	3001      	adds	r0, #1
 8029d6e:	d0ad      	beq.n	8029ccc <_printf_i+0x15c>
 8029d70:	6823      	ldr	r3, [r4, #0]
 8029d72:	079b      	lsls	r3, r3, #30
 8029d74:	d413      	bmi.n	8029d9e <_printf_i+0x22e>
 8029d76:	68e0      	ldr	r0, [r4, #12]
 8029d78:	9b03      	ldr	r3, [sp, #12]
 8029d7a:	4298      	cmp	r0, r3
 8029d7c:	bfb8      	it	lt
 8029d7e:	4618      	movlt	r0, r3
 8029d80:	e7a6      	b.n	8029cd0 <_printf_i+0x160>
 8029d82:	2301      	movs	r3, #1
 8029d84:	4632      	mov	r2, r6
 8029d86:	4649      	mov	r1, r9
 8029d88:	4640      	mov	r0, r8
 8029d8a:	47d0      	blx	sl
 8029d8c:	3001      	adds	r0, #1
 8029d8e:	d09d      	beq.n	8029ccc <_printf_i+0x15c>
 8029d90:	3501      	adds	r5, #1
 8029d92:	68e3      	ldr	r3, [r4, #12]
 8029d94:	9903      	ldr	r1, [sp, #12]
 8029d96:	1a5b      	subs	r3, r3, r1
 8029d98:	42ab      	cmp	r3, r5
 8029d9a:	dcf2      	bgt.n	8029d82 <_printf_i+0x212>
 8029d9c:	e7eb      	b.n	8029d76 <_printf_i+0x206>
 8029d9e:	2500      	movs	r5, #0
 8029da0:	f104 0619 	add.w	r6, r4, #25
 8029da4:	e7f5      	b.n	8029d92 <_printf_i+0x222>
 8029da6:	bf00      	nop
 8029da8:	0802b97a 	.word	0x0802b97a
 8029dac:	0802b98b 	.word	0x0802b98b

08029db0 <__sflush_r>:
 8029db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029db8:	0716      	lsls	r6, r2, #28
 8029dba:	4605      	mov	r5, r0
 8029dbc:	460c      	mov	r4, r1
 8029dbe:	d454      	bmi.n	8029e6a <__sflush_r+0xba>
 8029dc0:	684b      	ldr	r3, [r1, #4]
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	dc02      	bgt.n	8029dcc <__sflush_r+0x1c>
 8029dc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029dc8:	2b00      	cmp	r3, #0
 8029dca:	dd48      	ble.n	8029e5e <__sflush_r+0xae>
 8029dcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029dce:	2e00      	cmp	r6, #0
 8029dd0:	d045      	beq.n	8029e5e <__sflush_r+0xae>
 8029dd2:	2300      	movs	r3, #0
 8029dd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029dd8:	682f      	ldr	r7, [r5, #0]
 8029dda:	6a21      	ldr	r1, [r4, #32]
 8029ddc:	602b      	str	r3, [r5, #0]
 8029dde:	d030      	beq.n	8029e42 <__sflush_r+0x92>
 8029de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8029de2:	89a3      	ldrh	r3, [r4, #12]
 8029de4:	0759      	lsls	r1, r3, #29
 8029de6:	d505      	bpl.n	8029df4 <__sflush_r+0x44>
 8029de8:	6863      	ldr	r3, [r4, #4]
 8029dea:	1ad2      	subs	r2, r2, r3
 8029dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029dee:	b10b      	cbz	r3, 8029df4 <__sflush_r+0x44>
 8029df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029df2:	1ad2      	subs	r2, r2, r3
 8029df4:	2300      	movs	r3, #0
 8029df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029df8:	6a21      	ldr	r1, [r4, #32]
 8029dfa:	4628      	mov	r0, r5
 8029dfc:	47b0      	blx	r6
 8029dfe:	1c43      	adds	r3, r0, #1
 8029e00:	89a3      	ldrh	r3, [r4, #12]
 8029e02:	d106      	bne.n	8029e12 <__sflush_r+0x62>
 8029e04:	6829      	ldr	r1, [r5, #0]
 8029e06:	291d      	cmp	r1, #29
 8029e08:	d82b      	bhi.n	8029e62 <__sflush_r+0xb2>
 8029e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8029eb4 <__sflush_r+0x104>)
 8029e0c:	410a      	asrs	r2, r1
 8029e0e:	07d6      	lsls	r6, r2, #31
 8029e10:	d427      	bmi.n	8029e62 <__sflush_r+0xb2>
 8029e12:	2200      	movs	r2, #0
 8029e14:	6062      	str	r2, [r4, #4]
 8029e16:	04d9      	lsls	r1, r3, #19
 8029e18:	6922      	ldr	r2, [r4, #16]
 8029e1a:	6022      	str	r2, [r4, #0]
 8029e1c:	d504      	bpl.n	8029e28 <__sflush_r+0x78>
 8029e1e:	1c42      	adds	r2, r0, #1
 8029e20:	d101      	bne.n	8029e26 <__sflush_r+0x76>
 8029e22:	682b      	ldr	r3, [r5, #0]
 8029e24:	b903      	cbnz	r3, 8029e28 <__sflush_r+0x78>
 8029e26:	6560      	str	r0, [r4, #84]	@ 0x54
 8029e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029e2a:	602f      	str	r7, [r5, #0]
 8029e2c:	b1b9      	cbz	r1, 8029e5e <__sflush_r+0xae>
 8029e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029e32:	4299      	cmp	r1, r3
 8029e34:	d002      	beq.n	8029e3c <__sflush_r+0x8c>
 8029e36:	4628      	mov	r0, r5
 8029e38:	f7ff fc98 	bl	802976c <_free_r>
 8029e3c:	2300      	movs	r3, #0
 8029e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8029e40:	e00d      	b.n	8029e5e <__sflush_r+0xae>
 8029e42:	2301      	movs	r3, #1
 8029e44:	4628      	mov	r0, r5
 8029e46:	47b0      	blx	r6
 8029e48:	4602      	mov	r2, r0
 8029e4a:	1c50      	adds	r0, r2, #1
 8029e4c:	d1c9      	bne.n	8029de2 <__sflush_r+0x32>
 8029e4e:	682b      	ldr	r3, [r5, #0]
 8029e50:	2b00      	cmp	r3, #0
 8029e52:	d0c6      	beq.n	8029de2 <__sflush_r+0x32>
 8029e54:	2b1d      	cmp	r3, #29
 8029e56:	d001      	beq.n	8029e5c <__sflush_r+0xac>
 8029e58:	2b16      	cmp	r3, #22
 8029e5a:	d11e      	bne.n	8029e9a <__sflush_r+0xea>
 8029e5c:	602f      	str	r7, [r5, #0]
 8029e5e:	2000      	movs	r0, #0
 8029e60:	e022      	b.n	8029ea8 <__sflush_r+0xf8>
 8029e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029e66:	b21b      	sxth	r3, r3
 8029e68:	e01b      	b.n	8029ea2 <__sflush_r+0xf2>
 8029e6a:	690f      	ldr	r7, [r1, #16]
 8029e6c:	2f00      	cmp	r7, #0
 8029e6e:	d0f6      	beq.n	8029e5e <__sflush_r+0xae>
 8029e70:	0793      	lsls	r3, r2, #30
 8029e72:	680e      	ldr	r6, [r1, #0]
 8029e74:	bf08      	it	eq
 8029e76:	694b      	ldreq	r3, [r1, #20]
 8029e78:	600f      	str	r7, [r1, #0]
 8029e7a:	bf18      	it	ne
 8029e7c:	2300      	movne	r3, #0
 8029e7e:	eba6 0807 	sub.w	r8, r6, r7
 8029e82:	608b      	str	r3, [r1, #8]
 8029e84:	f1b8 0f00 	cmp.w	r8, #0
 8029e88:	dde9      	ble.n	8029e5e <__sflush_r+0xae>
 8029e8a:	6a21      	ldr	r1, [r4, #32]
 8029e8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029e8e:	4643      	mov	r3, r8
 8029e90:	463a      	mov	r2, r7
 8029e92:	4628      	mov	r0, r5
 8029e94:	47b0      	blx	r6
 8029e96:	2800      	cmp	r0, #0
 8029e98:	dc08      	bgt.n	8029eac <__sflush_r+0xfc>
 8029e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029ea2:	81a3      	strh	r3, [r4, #12]
 8029ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8029ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029eac:	4407      	add	r7, r0
 8029eae:	eba8 0800 	sub.w	r8, r8, r0
 8029eb2:	e7e7      	b.n	8029e84 <__sflush_r+0xd4>
 8029eb4:	dfbffffe 	.word	0xdfbffffe

08029eb8 <_fflush_r>:
 8029eb8:	b538      	push	{r3, r4, r5, lr}
 8029eba:	690b      	ldr	r3, [r1, #16]
 8029ebc:	4605      	mov	r5, r0
 8029ebe:	460c      	mov	r4, r1
 8029ec0:	b913      	cbnz	r3, 8029ec8 <_fflush_r+0x10>
 8029ec2:	2500      	movs	r5, #0
 8029ec4:	4628      	mov	r0, r5
 8029ec6:	bd38      	pop	{r3, r4, r5, pc}
 8029ec8:	b118      	cbz	r0, 8029ed2 <_fflush_r+0x1a>
 8029eca:	6a03      	ldr	r3, [r0, #32]
 8029ecc:	b90b      	cbnz	r3, 8029ed2 <_fflush_r+0x1a>
 8029ece:	f7ff f9bf 	bl	8029250 <__sinit>
 8029ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029ed6:	2b00      	cmp	r3, #0
 8029ed8:	d0f3      	beq.n	8029ec2 <_fflush_r+0xa>
 8029eda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029edc:	07d0      	lsls	r0, r2, #31
 8029ede:	d404      	bmi.n	8029eea <_fflush_r+0x32>
 8029ee0:	0599      	lsls	r1, r3, #22
 8029ee2:	d402      	bmi.n	8029eea <_fflush_r+0x32>
 8029ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029ee6:	f7ff fc30 	bl	802974a <__retarget_lock_acquire_recursive>
 8029eea:	4628      	mov	r0, r5
 8029eec:	4621      	mov	r1, r4
 8029eee:	f7ff ff5f 	bl	8029db0 <__sflush_r>
 8029ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029ef4:	07da      	lsls	r2, r3, #31
 8029ef6:	4605      	mov	r5, r0
 8029ef8:	d4e4      	bmi.n	8029ec4 <_fflush_r+0xc>
 8029efa:	89a3      	ldrh	r3, [r4, #12]
 8029efc:	059b      	lsls	r3, r3, #22
 8029efe:	d4e1      	bmi.n	8029ec4 <_fflush_r+0xc>
 8029f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029f02:	f7ff fc23 	bl	802974c <__retarget_lock_release_recursive>
 8029f06:	e7dd      	b.n	8029ec4 <_fflush_r+0xc>

08029f08 <__swhatbuf_r>:
 8029f08:	b570      	push	{r4, r5, r6, lr}
 8029f0a:	460c      	mov	r4, r1
 8029f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f10:	2900      	cmp	r1, #0
 8029f12:	b096      	sub	sp, #88	@ 0x58
 8029f14:	4615      	mov	r5, r2
 8029f16:	461e      	mov	r6, r3
 8029f18:	da0d      	bge.n	8029f36 <__swhatbuf_r+0x2e>
 8029f1a:	89a3      	ldrh	r3, [r4, #12]
 8029f1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029f20:	f04f 0100 	mov.w	r1, #0
 8029f24:	bf14      	ite	ne
 8029f26:	2340      	movne	r3, #64	@ 0x40
 8029f28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029f2c:	2000      	movs	r0, #0
 8029f2e:	6031      	str	r1, [r6, #0]
 8029f30:	602b      	str	r3, [r5, #0]
 8029f32:	b016      	add	sp, #88	@ 0x58
 8029f34:	bd70      	pop	{r4, r5, r6, pc}
 8029f36:	466a      	mov	r2, sp
 8029f38:	f000 f87c 	bl	802a034 <_fstat_r>
 8029f3c:	2800      	cmp	r0, #0
 8029f3e:	dbec      	blt.n	8029f1a <__swhatbuf_r+0x12>
 8029f40:	9901      	ldr	r1, [sp, #4]
 8029f42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029f46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029f4a:	4259      	negs	r1, r3
 8029f4c:	4159      	adcs	r1, r3
 8029f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029f52:	e7eb      	b.n	8029f2c <__swhatbuf_r+0x24>

08029f54 <__smakebuf_r>:
 8029f54:	898b      	ldrh	r3, [r1, #12]
 8029f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029f58:	079d      	lsls	r5, r3, #30
 8029f5a:	4606      	mov	r6, r0
 8029f5c:	460c      	mov	r4, r1
 8029f5e:	d507      	bpl.n	8029f70 <__smakebuf_r+0x1c>
 8029f60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029f64:	6023      	str	r3, [r4, #0]
 8029f66:	6123      	str	r3, [r4, #16]
 8029f68:	2301      	movs	r3, #1
 8029f6a:	6163      	str	r3, [r4, #20]
 8029f6c:	b003      	add	sp, #12
 8029f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f70:	ab01      	add	r3, sp, #4
 8029f72:	466a      	mov	r2, sp
 8029f74:	f7ff ffc8 	bl	8029f08 <__swhatbuf_r>
 8029f78:	9f00      	ldr	r7, [sp, #0]
 8029f7a:	4605      	mov	r5, r0
 8029f7c:	4639      	mov	r1, r7
 8029f7e:	4630      	mov	r0, r6
 8029f80:	f7fe ff94 	bl	8028eac <_malloc_r>
 8029f84:	b948      	cbnz	r0, 8029f9a <__smakebuf_r+0x46>
 8029f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029f8a:	059a      	lsls	r2, r3, #22
 8029f8c:	d4ee      	bmi.n	8029f6c <__smakebuf_r+0x18>
 8029f8e:	f023 0303 	bic.w	r3, r3, #3
 8029f92:	f043 0302 	orr.w	r3, r3, #2
 8029f96:	81a3      	strh	r3, [r4, #12]
 8029f98:	e7e2      	b.n	8029f60 <__smakebuf_r+0xc>
 8029f9a:	89a3      	ldrh	r3, [r4, #12]
 8029f9c:	6020      	str	r0, [r4, #0]
 8029f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029fa2:	81a3      	strh	r3, [r4, #12]
 8029fa4:	9b01      	ldr	r3, [sp, #4]
 8029fa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8029faa:	b15b      	cbz	r3, 8029fc4 <__smakebuf_r+0x70>
 8029fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029fb0:	4630      	mov	r0, r6
 8029fb2:	f000 f851 	bl	802a058 <_isatty_r>
 8029fb6:	b128      	cbz	r0, 8029fc4 <__smakebuf_r+0x70>
 8029fb8:	89a3      	ldrh	r3, [r4, #12]
 8029fba:	f023 0303 	bic.w	r3, r3, #3
 8029fbe:	f043 0301 	orr.w	r3, r3, #1
 8029fc2:	81a3      	strh	r3, [r4, #12]
 8029fc4:	89a3      	ldrh	r3, [r4, #12]
 8029fc6:	431d      	orrs	r5, r3
 8029fc8:	81a5      	strh	r5, [r4, #12]
 8029fca:	e7cf      	b.n	8029f6c <__smakebuf_r+0x18>

08029fcc <_putc_r>:
 8029fcc:	b570      	push	{r4, r5, r6, lr}
 8029fce:	460d      	mov	r5, r1
 8029fd0:	4614      	mov	r4, r2
 8029fd2:	4606      	mov	r6, r0
 8029fd4:	b118      	cbz	r0, 8029fde <_putc_r+0x12>
 8029fd6:	6a03      	ldr	r3, [r0, #32]
 8029fd8:	b90b      	cbnz	r3, 8029fde <_putc_r+0x12>
 8029fda:	f7ff f939 	bl	8029250 <__sinit>
 8029fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029fe0:	07d8      	lsls	r0, r3, #31
 8029fe2:	d405      	bmi.n	8029ff0 <_putc_r+0x24>
 8029fe4:	89a3      	ldrh	r3, [r4, #12]
 8029fe6:	0599      	lsls	r1, r3, #22
 8029fe8:	d402      	bmi.n	8029ff0 <_putc_r+0x24>
 8029fea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029fec:	f7ff fbad 	bl	802974a <__retarget_lock_acquire_recursive>
 8029ff0:	68a3      	ldr	r3, [r4, #8]
 8029ff2:	3b01      	subs	r3, #1
 8029ff4:	2b00      	cmp	r3, #0
 8029ff6:	60a3      	str	r3, [r4, #8]
 8029ff8:	da05      	bge.n	802a006 <_putc_r+0x3a>
 8029ffa:	69a2      	ldr	r2, [r4, #24]
 8029ffc:	4293      	cmp	r3, r2
 8029ffe:	db12      	blt.n	802a026 <_putc_r+0x5a>
 802a000:	b2eb      	uxtb	r3, r5
 802a002:	2b0a      	cmp	r3, #10
 802a004:	d00f      	beq.n	802a026 <_putc_r+0x5a>
 802a006:	6823      	ldr	r3, [r4, #0]
 802a008:	1c5a      	adds	r2, r3, #1
 802a00a:	6022      	str	r2, [r4, #0]
 802a00c:	701d      	strb	r5, [r3, #0]
 802a00e:	b2ed      	uxtb	r5, r5
 802a010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a012:	07da      	lsls	r2, r3, #31
 802a014:	d405      	bmi.n	802a022 <_putc_r+0x56>
 802a016:	89a3      	ldrh	r3, [r4, #12]
 802a018:	059b      	lsls	r3, r3, #22
 802a01a:	d402      	bmi.n	802a022 <_putc_r+0x56>
 802a01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a01e:	f7ff fb95 	bl	802974c <__retarget_lock_release_recursive>
 802a022:	4628      	mov	r0, r5
 802a024:	bd70      	pop	{r4, r5, r6, pc}
 802a026:	4629      	mov	r1, r5
 802a028:	4622      	mov	r2, r4
 802a02a:	4630      	mov	r0, r6
 802a02c:	f7ff fa01 	bl	8029432 <__swbuf_r>
 802a030:	4605      	mov	r5, r0
 802a032:	e7ed      	b.n	802a010 <_putc_r+0x44>

0802a034 <_fstat_r>:
 802a034:	b538      	push	{r3, r4, r5, lr}
 802a036:	4d07      	ldr	r5, [pc, #28]	@ (802a054 <_fstat_r+0x20>)
 802a038:	2300      	movs	r3, #0
 802a03a:	4604      	mov	r4, r0
 802a03c:	4608      	mov	r0, r1
 802a03e:	4611      	mov	r1, r2
 802a040:	602b      	str	r3, [r5, #0]
 802a042:	f7e4 ff1b 	bl	800ee7c <_fstat>
 802a046:	1c43      	adds	r3, r0, #1
 802a048:	d102      	bne.n	802a050 <_fstat_r+0x1c>
 802a04a:	682b      	ldr	r3, [r5, #0]
 802a04c:	b103      	cbz	r3, 802a050 <_fstat_r+0x1c>
 802a04e:	6023      	str	r3, [r4, #0]
 802a050:	bd38      	pop	{r3, r4, r5, pc}
 802a052:	bf00      	nop
 802a054:	24000c08 	.word	0x24000c08

0802a058 <_isatty_r>:
 802a058:	b538      	push	{r3, r4, r5, lr}
 802a05a:	4d06      	ldr	r5, [pc, #24]	@ (802a074 <_isatty_r+0x1c>)
 802a05c:	2300      	movs	r3, #0
 802a05e:	4604      	mov	r4, r0
 802a060:	4608      	mov	r0, r1
 802a062:	602b      	str	r3, [r5, #0]
 802a064:	f7e4 ff1a 	bl	800ee9c <_isatty>
 802a068:	1c43      	adds	r3, r0, #1
 802a06a:	d102      	bne.n	802a072 <_isatty_r+0x1a>
 802a06c:	682b      	ldr	r3, [r5, #0]
 802a06e:	b103      	cbz	r3, 802a072 <_isatty_r+0x1a>
 802a070:	6023      	str	r3, [r4, #0]
 802a072:	bd38      	pop	{r3, r4, r5, pc}
 802a074:	24000c08 	.word	0x24000c08

0802a078 <_init>:
 802a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a07a:	bf00      	nop
 802a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a07e:	bc08      	pop	{r3}
 802a080:	469e      	mov	lr, r3
 802a082:	4770      	bx	lr

0802a084 <_fini>:
 802a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a086:	bf00      	nop
 802a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a08a:	bc08      	pop	{r3}
 802a08c:	469e      	mov	lr, r3
 802a08e:	4770      	bx	lr
